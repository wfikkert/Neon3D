
Neon3DSoftware.elf:     file format elf32-littlenios2
Neon3DSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001c014 memsz 0x0001c014 flags r-x
    LOAD off    0x0001d034 vaddr 0x0001c034 paddr 0x0001df28 align 2**12
         filesz 0x00001ef4 memsz 0x00001ef4 flags rw-
    LOAD off    0x0001fe1c vaddr 0x0001fe1c paddr 0x0001fe1c align 2**12
         filesz 0x00000000 memsz 0x000033f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b448  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009a8  0001b68c  0001b68c  0001c68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ef4  0001c034  0001df28  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000033f8  0001fe1c  0001fe1c  0001fe1c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00023214  00023214  0001ef28  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001ef28  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ef28  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e38  00000000  00000000  0001ef50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000232a1  00000000  00000000  0001fd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008b64  00000000  00000000  00043029  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c4b7  00000000  00000000  0004bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000033b0  00000000  00000000  00058044  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000051ce  00000000  00000000  0005b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016462  00000000  00000000  000605c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00076a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  00076a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0007d06e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007d074  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007d079  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007d07a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007d07b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007d07f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007d083  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007d087  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007d090  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007d099  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007d0a2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0007d0ad  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0007d10b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  00087cd0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001b68c l    d  .rodata	00000000 .rodata
0001c034 l    d  .rwdata	00000000 .rwdata
0001fe1c l    d  .bss	00000000 .bss
00023214 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Eldin/Documents/GitHub/Neon3D/FPGA/Software/Neon3DSoftware_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0001b928 l     O .rodata	00000108 two_over_pi
0001b8a8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001ba70 l     O .rodata	00000010 init_jk
0001ba30 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004cb0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001bbc2 l     O .rodata	00000010 zeroes.4240
0001bbd2 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 dtoa.c
00009708 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 impure.c
0001c034 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001c478 l     O .rwdata	00000020 lc_ctype_charset
0001c458 l     O .rwdata	00000020 lc_message_charset
0001c498 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0001bc04 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001bd28 l     O .rodata	00000010 zeroes.4184
0001bd38 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_load.c
0000f5fc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001de84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001de88 l     O .rwdata	00000004 lockid
0001fe54 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001de8c l     O .rwdata	00000004 lockid
0001fe5c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00011150 l     F .text	00000044 OS_InitMisc
00011194 l     F .text	00000068 OS_InitRdyList
000112f4 l     F .text	000000e0 OS_InitTCBList
00011074 l     F .text	000000dc OS_InitEventList
000111fc l     F .text	0000007c OS_InitTaskIdle
00011278 l     F .text	0000007c OS_InitTaskStat
00011554 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00013358 l     F .text	00000110 OS_FlagTaskRdy
000130b0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017800 l     F .text	00000038 alt_dev_reg
0001c8d8 l     O .rwdata	0000106c JTAG_UART
0001d944 l     O .rwdata	00000030 AV_Config
0001d974 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001d9a4 l     O .rwdata	0000002c Char_LCD_16x2
0001d9d0 l     O .rwdata	0000002c IrDA
0001d9fc l     O .rwdata	0000002c Expansion_JP5
0001da28 l     O .rwdata	0000002c Green_LEDs
0001da54 l     O .rwdata	0000002c HEX3_HEX0
0001da80 l     O .rwdata	0000002c HEX7_HEX4
0001daac l     O .rwdata	0000002c Pushbuttons
0001dad8 l     O .rwdata	0000002c Red_LEDs
0001db04 l     O .rwdata	0000002c Slider_Switches
0001db30 l     O .rwdata	00000038 PS2_Port
0001db68 l     O .rwdata	00000038 PS2_Port_Dual
0001dba0 l     O .rwdata	0000002c Serial_Port
0001dbcc l     O .rwdata	00000034 USB
0001dc00 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001dc48 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001dc9c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00017ee8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00018190 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00018968 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0001a128 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001a264 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a290 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a4fc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001a7e4 l     F .text	00000050 alt_get_errno
0001a834 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001fec4 g     O .bss	00000004 alt_instruction_exception_handler
0000c7c8 g     F .text	00000074 _mprec_log10
0001deda g     O .rwdata	00000002 OSTaskNameSize
0000c8b4 g     F .text	0000008c __any_on
0001bc10 g     O .rodata	00000028 __mprec_tinytens
0000f6e0 g     F .text	000000d4 alt_main
00023114 g     O .bss	00000100 alt_irq
00019504 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000048c0 g     F .text	00000014 fabs
00013bbc g     F .text	000000d0 OS_MemInit
0001df28 g       *ABS*	00000000 __flash_rwdata_start
0001779c g     F .text	00000064 OSTimeSet
00018ad4 g     F .text	0000003c alt_up_character_lcd_send_cmd
00006078 g     F .text	00000084 .hidden __eqdf2
0000fdcc g     F .text	00000610 OSEventPendMulti
00023214 g       *ABS*	00000000 __alt_heap_start
0001aea0 g     F .text	00000020 OSTaskCreateHook
0001deb2 g     O .rwdata	00000002 OSMboxEn
00010430 g     F .text	0000007c OSIntEnter
00019e8c g     F .text	00000100 alt_up_char_buffer_string
00019324 g     F .text	00000034 read_CE_bit
0001dec2 g     O .rwdata	00000002 OSQEn
0000b030 g     F .text	0000007c _setlocale_r
0000faa0 g     F .text	000000d0 __malloc_unlock
0001aefc g     F .text	0000001c OSTaskStatHook
000196a8 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00019b9c g     F .text	00000090 alt_up_rs232_read_fd
0001fe64 g     O .bss	00000001 OSLockNesting
00002650 g     F .text	00000068 LCD_cursor
0001df00 g     O .rwdata	00000002 OSDataSize
0001fe65 g     O .bss	00000001 OSRunning
00019dc0 g     F .text	000000cc alt_up_char_buffer_draw
0000e220 g     F .text	0000015c memmove
0001af34 g     F .text	0000001c OSInitHookBegin
0001def8 g     O .rwdata	00000002 OSTmrSize
0000b9a0 g     F .text	000000a8 _Balloc
0001fe68 g     O .bss	00000004 OSIdleCtr
000060fc g     F .text	000000e0 .hidden __gtdf2
0001ac54 g     F .text	00000020 altera_nios2_gen2_irq_init
0001ad20 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00018a60 g     F .text	00000074 get_DDRAM_addr
0001188c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001defe g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001de9e g     O .rwdata	00000002 OSEventSize
0001fe6c g     O .bss	00000001 OSPrioHighRdy
0001aec0 g     F .text	00000020 OSTaskDelHook
0001fe44 g     O .bss	00000004 errno
000048d4 g     F .text	000001f4 floor
0001ad00 g       .text	00000000 OSStartHighRdy
000160a0 g     F .text	000001ec OSTaskCreateExt
0000cd10 g     F .text	00001038 ___svfiprintf_internal_r
00012bfc g     F .text	00000068 OSFlagPendGetFlagsRdy
0001dede g     O .rwdata	00000002 OSTaskStatStkSize
00011cec g     F .text	00000308 OSFlagAccept
00014290 g     F .text	000000b8 OSQFlush
00013c8c g     F .text	00000140 OSQAccept
0001fe4c g     O .bss	00000004 alt_argv
00025e70 g       *ABS*	00000000 _gp
00015ee4 g     F .text	000001bc OSTaskCreate
000159a4 g     F .text	00000540 OSTaskChangePrio
0001fe60 g     O .bss	00000004 alt_heapsem
00011b60 g     F .text	0000018c OSDebugInit
0001628c g     F .text	000003e0 OSTaskDel
0001dcf0 g     O .rwdata	00000180 alt_fd_list
0001fef0 g     O .bss	00000370 OSFlagTbl
00002c90 g     F .text	0000079c __ieee754_rem_pio2
00010e60 g     F .text	000000b4 OS_EventTaskRemove
0001a43c g     F .text	00000090 alt_find_dev
0000757c g     F .text	00000138 memcpy
0001dec8 g     O .rwdata	00000002 OSRdyTblSize
00018c70 g     F .text	00000050 alt_up_character_lcd_write_fd
0001fe28 g     O .bss	00000004 previousYRotation
00019f8c g     F .text	0000005c alt_up_char_buffer_clear
00007338 g     F .text	000000d0 .hidden __floatsidf
0001a5bc g     F .text	00000078 alt_io_redirect
000061dc g     F .text	000000e0 .hidden __ltdf2
0001b68c g       *ABS*	00000000 __DTOR_END__
000191f0 g     F .text	00000090 alt_up_irda_write_fd
00019b28 g     F .text	00000074 alt_up_rs232_read_data
0001b244 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000fb70 g     F .text	00000120 OSEventNameGet
0001deac g     O .rwdata	00000002 OSFlagMax
0000c940 g     F .text	00000074 __fpclassifyd
0000c724 g     F .text	000000a4 __ratio
000104ac g     F .text	000000f4 OSIntExit
0001dee6 g     O .rwdata	00000002 OSTCBSize
0001fe6d g     O .bss	00000001 OSPrioCur
00018fec g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000183f4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000026b8 g     F .text	00000068 LCD_text
00004dcc g     F .text	00000008 .hidden __udivsi3
0001decc g     O .rwdata	00000002 OSStkWidth
0001bc60 g     O .rodata	000000c8 __mprec_tens
0001dec0 g     O .rwdata	00000002 OSPtrSize
0000b0ac g     F .text	0000000c __locale_charset
0000342c g     F .text	000004a4 __kernel_cos
0001dea0 g     O .rwdata	00000002 OSEventTblSize
00018f90 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001ac74 g       .text	00000000 OSCtxSw
0001b1b8 g     F .text	0000008c alt_icache_flush
0001fe40 g     O .bss	00000004 __malloc_top_pad
0001fe70 g     O .bss	00000004 OSTCBList
0001feb4 g     O .bss	00000004 alt_fd_list_lock
0001de78 g     O .rwdata	00000004 __mb_cur_max
0000b0dc g     F .text	0000000c _localeconv_r
0000bdac g     F .text	0000003c __i2b
00020260 g     O .bss	00000c30 OSMemTbl
0001fe74 g     O .bss	00000001 OSTickStepState
0000c9b4 g     F .text	00000054 _sbrk_r
0001dec4 g     O .rwdata	00000002 OSQMax
00020e90 g     O .bss	00000800 OSTaskStatStk
000137ec g     F .text	000000f8 OSMemNameGet
000002f0 g     F .text	00000064 removePixel
0001dea4 g     O .rwdata	00000002 OSFlagEn
0001deea g     O .rwdata	00000002 OSTimeTickHookEn
000147b0 g     F .text	00000168 OSQPost
00013468 g     F .text	000000a0 OS_FlagUnlink
0001df14 g     O .rwdata	00000004 alt_max_fd
00019aa4 g     F .text	00000044 alt_up_rs232_check_parity
00011424 g     F .text	00000064 OS_MemCopy
00011488 g     F .text	000000cc OS_Sched
000136fc g     F .text	000000f0 OSMemGet
0001696c g     F .text	000001c0 OSTaskNameSet
00019358 g     F .text	00000030 read_num_bytes_available
0001fe3c g     O .bss	00000004 __malloc_max_sbrked_mem
0001fe78 g     O .bss	00000004 OSCtxSwCtr
0001af18 g     F .text	0000001c OSTimeTickHook
0001a634 g     F .text	000001b0 alt_irq_register
0001deae g     O .rwdata	00000002 OSFlagNameSize
000192c0 g     F .text	00000034 read_RI_bit
000045f8 g     F .text	000002c8 __kernel_sin
00007408 g     F .text	00000110 .hidden __extendsfdf2
00010f14 g     F .text	000000fc OS_EventTaskRemoveMulti
00004f10 g     F .text	0000089c .hidden __adddf3
00010d14 g     F .text	0000014c OS_EventTaskWaitMulti
0000c4cc g     F .text	0000011c __b2d
0001dec6 g     O .rwdata	00000002 OSQSize
0000efc8 g     F .text	00000590 .hidden __umoddi3
000152b4 g     F .text	00000268 OSSemPend
0001de70 g     O .rwdata	00000004 _global_impure_ptr
0000e4a0 g     F .text	00000568 _realloc_r
0001deb0 g     O .rwdata	00000002 OSLowestPrio
00023214 g       *ABS*	00000000 __bss_end
0001af88 g     F .text	00000020 OSTCBInitHook
0001def6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001ab50 g     F .text	00000104 alt_tick
0000ea08 g     F .text	000005c0 .hidden __udivdi3
0001de98 g     O .rwdata	00000002 OSEventEn
0001bc38 g     O .rodata	00000028 __mprec_bigtens
0000bb90 g     F .text	00000104 __s2b
0001def2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000f558 g     F .text	000000a4 .hidden __floatunsidf
0000c274 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
000193bc g     F .text	0000002c read_data_byte
000029ec g     F .text	000000c8 check_KEYs
00013274 g     F .text	000000e4 OS_FlagInit
0001aab8 g     F .text	00000098 alt_alarm_stop
000192f4 g     F .text	00000030 read_RE_bit
0001ded4 g     O .rwdata	00000002 OSTaskIdleStkSize
0001feb8 g     O .bss	00000004 alt_irq_active
00014e9c g     F .text	000000b0 OSSemAccept
00002754 g     F .text	00000090 VGA_text
000139fc g     F .text	000000d8 OSMemPut
00013508 g     F .text	000001f4 OSMemCreate
0001fe7c g     O .bss	00000004 OSIdleCtrMax
0001902c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001dcc8 g     O .rwdata	00000028 alt_dev_null
0001dee8 g     O .rwdata	00000002 OSTicksPerSec
000038d0 g     F .text	00000d28 __kernel_rem_pio2
00018f04 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001ac74 g       .text	00000000 OSIntCtxSw
00019560 g     F .text	00000074 alt_up_ps2_write_data_byte
0001a248 g     F .text	0000001c alt_dcache_flush_all
0000bc94 g     F .text	00000068 __hi0bits
000072b0 g     F .text	00000088 .hidden __fixdfsi
0001fe80 g     O .bss	00000004 OSTCBFreeList
0001df28 g       *ABS*	00000000 __ram_rwdata_end
0001551c g     F .text	0000016c OSSemPendAbort
0001df0c g     O .rwdata	00000008 alt_dev_list
0001deec g     O .rwdata	00000002 OSVersionNbr
0001c034 g       *ABS*	00000000 __ram_rodata_end
00019c2c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000061dc g     F .text	000000e0 .hidden __ledf2
0001de94 g     O .rwdata	00000004 OSEndiannessTest
0000bfe4 g     F .text	00000140 __pow5mult
0001fe34 g     O .bss	00000004 __nlocale_changed
00004dd4 g     F .text	00000008 .hidden __umodsi3
0001dea6 g     O .rwdata	00000002 OSFlagGrpSize
0001fe24 g     O .bss	00000004 previousXRotation
00023214 g       *ABS*	00000000 end
0001989c g     F .text	00000098 alt_up_ps2_write_fd
00019068 g     F .text	00000044 alt_up_irda_check_parity
00019d00 g     F .text	00000080 alt_up_char_buffer_init
00017da8 g     F .text	00000140 altera_avalon_jtag_uart_init
000116e8 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001b68c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00002898 g     F .text	00000154 HEX_PS2
000189e0 g     F .text	00000080 alt_avalon_timer_sc_init
00007518 g     F .text	00000064 .hidden __clzsi2
000186a8 g     F .text	000002c0 altera_avalon_jtag_uart_write
00002ab4 g     F .text	000000ec cos
0000b8b8 g     F .text	000000e8 memchr
000113d4 g     F .text	00000050 OS_MemClr
00018b84 g     F .text	00000078 alt_up_character_lcd_write
0001ad44 g     F .text	0000015c OSTaskStkInit
000076b4 g     F .text	00000058 _sprintf_r
0000df30 g     F .text	000002f0 _free_r
0000b0b8 g     F .text	00000010 __locale_mb_cur_max
00010a70 g     F .text	00000198 OS_EventTaskRdy
0001b4bc g     F .text	00000194 __call_exitprocs
0001fe84 g     O .bss	00000001 OSCPUUsage
0001fe30 g     O .bss	00000004 __mlocale_changed
0001de7c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001febc g     O .bss	00000004 _alt_tick_rate
00014348 g     F .text	000002fc OSQPend
00002ba0 g     F .text	000000f0 sin
00017298 g     F .text	00000148 OSTimeDly
0000c124 g     F .text	00000150 __lshift
0001fec0 g     O .bss	00000004 _alt_nticks
0001786c g     F .text	000003d8 alt_sys_init
00018dbc g     F .text	00000088 alt_up_character_lcd_shift_display
00004ddc g     F .text	00000134 .hidden __floatsisf
0000cb44 g     F .text	000001cc __ssprint_r
0001b3a8 g     F .text	00000114 __register_exitproc
0001fe85 g     O .bss	00000001 OSTaskCtr
0001fe1c g     O .bss	00000008 prevousZoomScreenBR
000197bc g     F .text	00000054 alt_up_ps2_clear_fifo
00019a68 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000027e4 g     F .text	000000b4 VGA_box
000173e0 g     F .text	00000168 OSTimeDlyHMSM
0000bde8 g     F .text	000001fc __multiply
00018e44 g     F .text	0000008c alt_up_character_lcd_erase_pos
000182a0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001c034 g       *ABS*	00000000 __ram_rwdata_start
0001b68c g       *ABS*	00000000 __ram_rodata_start
0001fec8 g     O .bss	00000028 __malloc_current_mallinfo
0001de9a g     O .rwdata	00000002 OSEventMax
0000c5e8 g     F .text	0000013c __d2b
00015688 g     F .text	00000110 OSSemPost
00010628 g     F .text	000000d8 OSSchedUnlock
00017c44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001b0bc g     F .text	000000fc alt_get_fd
0001fe88 g     O .bss	00000004 OSMemFreeList
0001076c g     F .text	000000ac OSStatInit
00012fec g     F .text	000000c4 OSFlagQuery
000009ac g     F .text	0000165c drawNodesAndBeams
0001ded0 g     O .rwdata	00000002 OSTaskCreateExtEn
0001b32c g     F .text	0000007c memcmp
00010a54 g     F .text	0000001c OS_Dummy
00017d04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00023214 g       *ABS*	00000000 __alt_stack_base
00017d54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00018f38 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00021690 g     O .bss	000001e0 OSQTbl
000057ac g     F .text	000008cc .hidden __divdf3
0000c83c g     F .text	00000078 __copybits
0001c4d0 g     O .rwdata	00000408 __malloc_av_
0001fe8c g     O .bss	00000004 OSTCBHighRdy
000062bc g     F .text	00000724 .hidden __muldf3
0001fe90 g     O .bss	00000004 OSQFreeList
000199cc g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001afa8 g     F .text	00000114 alt_find_file
0001a2e0 g     F .text	000000a4 alt_dev_llist_insert
0000f980 g     F .text	00000120 __malloc_lock
0000f7b4 g     F .text	000000b0 sbrk
00007778 g     F .text	00001f90 ___svfprintf_internal_r
0000fc90 g     F .text	0000013c OSEventNameSet
0000dd48 g     F .text	000000c4 _calloc_r
0001fe94 g     O .bss	00000001 OSRdyGrp
0001fe1c g       *ABS*	00000000 __bss_start
0000e37c g     F .text	00000124 memset
00002008 g     F .text	00000648 main
0001fe50 g     O .bss	00000004 alt_envp
0001fe38 g     O .bss	00000004 __malloc_max_total_mem
00019d80 g     F .text	00000040 alt_up_char_buffer_open_dev
00017ca4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001bd58 g     O .rodata	00000100 OSUnMapTbl
0001deca g     O .rwdata	00000002 OSSemEn
00002720 g     F .text	00000034 LCD_cursor_off
00018d34 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00012c64 g     F .text	00000388 OSFlagPost
04000000 g       *ABS*	00000000 __alt_heap_limit
00010c08 g     F .text	0000010c OS_EventTaskWait
0001974c g     F .text	00000070 alt_up_ps2_read_data_byte
000117c4 g     F .text	000000c8 OS_TaskStatStkChk
0001666c g     F .text	00000158 OSTaskDelReq
00009908 g     F .text	00001728 _dtoa_r
0000b110 g     F .text	000007a8 _malloc_r
0001df18 g     O .rwdata	00000004 alt_errno
00010700 g     F .text	0000006c OSStart
0000f924 g     F .text	0000005c __env_unlock
00016b2c g     F .text	000001f8 OSTaskResume
00013ad4 g     F .text	000000e8 OSMemQuery
0001dedc g     O .rwdata	00000002 OSTaskStatEn
000190ac g     F .text	00000040 alt_up_irda_write_data
0001deb6 g     O .rwdata	00000002 OSMemMax
00014918 g     F .text	00000170 OSQPostFront
00019934 g     F .text	00000040 alt_up_ps2_open_dev
00004d1c g     F .text	00000054 .hidden __divsi3
0001fe95 g     O .bss	00000003 OSRdyTbl
0001de90 g     O .rwdata	00000002 OSDebugEn
00018b44 g     F .text	00000040 alt_up_character_lcd_open_dev
0000de0c g     F .text	00000124 _malloc_trim_r
000194ac g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001b68c g       *ABS*	00000000 __CTOR_END__
0001dea8 g     O .rwdata	00000002 OSFlagNodeSize
0001def0 g     O .rwdata	00000002 OSTmrCfgMax
00018b10 g     F .text	00000034 alt_up_character_lcd_init
0000ca08 g     F .text	000000a4 strcmp
00013dcc g     F .text	000001fc OSQCreate
000167c4 g     F .text	000001a8 OSTaskNameGet
0001b68c g       *ABS*	00000000 __flash_rodata_start
00014a88 g     F .text	0000020c OSQPostOpt
00010818 g     F .text	0000021c OSTimeTick
0001ded8 g     O .rwdata	00000002 OSTaskMax
0001b68c g       *ABS*	00000000 __DTOR_LIST__
00014f4c g     F .text	00000100 OSSemCreate
0001defc g     O .rwdata	00000002 OSTmrWheelSize
00019cc0 g     F .text	00000040 alt_up_rs232_open_dev
00004c94 g     F .text	0000001c copysign
00006078 g     F .text	00000084 .hidden __nedf2
0001ded2 g     O .rwdata	00000002 OSTaskDelEn
00015798 g     F .text	00000110 OSSemQuery
00013fc8 g     F .text	000002c8 OSQDel
00014644 g     F .text	0000016c OSQPendAbort
00017838 g     F .text	00000034 alt_irq_init
00000354 g     F .text	00000658 drawLine
0001aa58 g     F .text	00000060 alt_release_fd
00019388 g     F .text	00000034 read_data_valid
0000770c g     F .text	0000006c sprintf
00018ed0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001ba80 g     O .rodata	00000100 .hidden __clz_tab
0001fe2c g     O .bss	00000004 _PathLocale
00019644 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001b2e0 g     F .text	00000014 atexit
000105a0 g     F .text	00000088 OSSchedLock
0000b0e8 g     F .text	0000001c setlocale
00011ff4 g     F .text	00000128 OSFlagCreate
0001de74 g     O .rwdata	00000004 _impure_ptr
0001fe48 g     O .bss	00000004 alt_argc
00004ac8 g     F .text	000001cc scalbn
0001a3e0 g     F .text	0000005c _do_dtors
0000b0d4 g     F .text	00000008 __locale_cjk_lang
0001dea2 g     O .rwdata	00000002 OSEventMultiEn
0001211c g     F .text	00000270 OSFlagDel
0001fe98 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000c46c g     F .text	00000060 __ulp
0001260c g     F .text	000005f0 OSFlagPend
0001deee g     O .rwdata	00000002 OSTmrEn
0001df04 g     O .rwdata	00000008 alt_fs_list
000115c4 g     F .text	00000074 OS_StrCopy
00019974 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00019ae8 g     F .text	00000040 alt_up_rs232_write_data
00000280 g     F .text	00000070 drawPixel
0001deb8 g     O .rwdata	00000002 OSMemNameSize
0001af50 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001dee4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000b104 g     F .text	0000000c localeconv
0001dee0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001deb4 g     O .rwdata	00000002 OSMemEn
0001debe g     O .rwdata	00000002 OSMutexEn
0001df28 g       *ABS*	00000000 _edata
00023214 g       *ABS*	00000000 _end
0001fe9c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00018308 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00017548 g     F .text	000001f0 OSTimeDlyResume
000124bc g     F .text	00000150 OSFlagNameSet
00016d24 g     F .text	000001c8 OSTaskStkChk
0001deba g     O .rwdata	00000002 OSMemSize
0001de80 g     O .rwdata	00000004 __malloc_trim_threshold
0000b0c8 g     F .text	0000000c __locale_msgcharset
0001fea0 g     O .bss	00000004 OSTCBCur
0001b2f4 g     F .text	00000038 exit
000190ec g     F .text	00000074 alt_up_irda_read_data
0001debc g     O .rwdata	00000002 OSMemTblSize
000193e8 g     F .text	000000c4 alt_up_ps2_init
0000c2d4 g     F .text	00000198 __mdiff
00004d70 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000103dc g     F .text	00000054 OSInit
00017100 g     F .text	0000012c OSTaskQuery
00018bfc g     F .text	00000074 alt_up_character_lcd_string
00014df0 g     F .text	000000ac OS_QInit
00011638 g     F .text	00000054 OS_StrLen
00019280 g     F .text	00000040 alt_up_irda_open_dev
000138e4 g     F .text	00000118 OSMemNameSet
0001ded6 g     O .rwdata	00000002 OSTaskProfileEn
0001fea4 g     O .bss	00000004 OSTime
00021870 g     O .bss	00000800 OSTaskIdleStk
0001b650 g     F .text	0000003c _exit
00019fe8 g     F .text	00000140 alt_alarm_start
0001238c g     F .text	00000130 OSFlagNameGet
00017738 g     F .text	00000064 OSTimeGet
000195d4 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000caac g     F .text	00000098 strlen
0001aee0 g     F .text	0000001c OSTaskSwHook
0001a900 g     F .text	00000158 open
00022070 g     O .bss	00000b40 OSEventTbl
000060fc g     F .text	000000e0 .hidden __gedf2
00022bb0 g     O .bss	00000510 OSTCBTbl
000158a8 g     F .text	000000fc OSSemSet
0001a4cc g     F .text	00000030 alt_icache_flush_all
00018cc0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001df1c g     O .rwdata	00000004 alt_priority_mask
0001504c g     F .text	00000268 OSSemDel
0001fea8 g     O .bss	00000004 OSFlagFreeList
0001de9c g     O .rwdata	00000002 OSEventNameSize
0001feac g     O .bss	00000001 OSStatRdy
000230c0 g     O .bss	00000054 OSTCBPrioTbl
0000f864 g     F .text	000000c0 __env_lock
00019810 g     F .text	0000008c alt_up_ps2_read_fd
0001dee2 g     O .rwdata	00000002 OSTaskSwHookEn
000069e0 g     F .text	000008d0 .hidden __subdf3
00019160 g     F .text	00000090 alt_up_irda_read_fd
0000bcfc g     F .text	000000b0 __lo0bits
0001df20 g     O .rwdata	00000008 alt_alarm_list
0001deaa g     O .rwdata	00000002 OSFlagWidth
0001a384 g     F .text	0000005c _do_ctors
00019a28 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0001a178 g     F .text	000000d0 close
0001fe58 g     O .bss	00000004 alt_envsem
0001feb0 g     O .bss	00000004 OSIdleCtrRun
00010a34 g     F .text	00000020 OSVersion
0001def4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000f660 g     F .text	00000080 alt_load
0001722c g     F .text	0000006c OS_TaskStkClr
0001dece g     O .rwdata	00000002 OSTaskCreateEn
00011010 g     F .text	00000064 OS_EventWaitListInit
0001af6c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0000ba70 g     F .text	00000120 __multadd
00016eec g     F .text	00000214 OSTaskSuspend
0000ba48 g     F .text	00000028 _Bfree
0001168c g     F .text	0000005c OS_TaskIdle
0001defa g     O .rwdata	00000002 OSTmrTblSize
00014c94 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00104300 	call	10430 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	108c4504 	addi	r2,r2,12564
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	108c4504 	addi	r2,r2,12564
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00104ac0 	call	104ac <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a81517 	ldw	r2,-24492(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a81517 	ldw	r2,-24492(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6979c14 	ori	gp,gp,24176
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10bf8714 	ori	r2,r2,65052

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18cc8514 	ori	r3,r3,12820

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000f6600 	call	f660 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f6e00 	call	f6e0 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <drawPixel>:
void HEX_PS2(char, char, char);
void check_KEYs( int *, int *, int * );


void drawPixel(int x, int y, int size, short pixel_color )
{
     280:	defff904 	addi	sp,sp,-28
     284:	dfc00615 	stw	ra,24(sp)
     288:	df000515 	stw	fp,20(sp)
     28c:	df000504 	addi	fp,sp,20
     290:	e13ffc15 	stw	r4,-16(fp)
     294:	e17ffd15 	stw	r5,-12(fp)
     298:	e1bffe15 	stw	r6,-8(fp)
     29c:	3805883a 	mov	r2,r7
     2a0:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box (x, y, x + size - 1, y + size - 1, pixel_color);
     2a4:	e0fffc17 	ldw	r3,-16(fp)
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	1885883a 	add	r2,r3,r2
     2b0:	11bfffc4 	addi	r6,r2,-1
     2b4:	e0fffd17 	ldw	r3,-12(fp)
     2b8:	e0bffe17 	ldw	r2,-8(fp)
     2bc:	1885883a 	add	r2,r3,r2
     2c0:	10ffffc4 	addi	r3,r2,-1
     2c4:	e0bfff0f 	ldh	r2,-4(fp)
     2c8:	d8800015 	stw	r2,0(sp)
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	e17ffd17 	ldw	r5,-12(fp)
     2d4:	180f883a 	mov	r7,r3
     2d8:	00027e40 	call	27e4 <VGA_box>
}
     2dc:	e037883a 	mov	sp,fp
     2e0:	dfc00117 	ldw	ra,4(sp)
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00204 	addi	sp,sp,8
     2ec:	f800283a 	ret

000002f0 <removePixel>:

void removePixel(int x, int y, int size)
{
     2f0:	defffa04 	addi	sp,sp,-24
     2f4:	dfc00515 	stw	ra,20(sp)
     2f8:	df000415 	stw	fp,16(sp)
     2fc:	df000404 	addi	fp,sp,16
     300:	e13ffd15 	stw	r4,-12(fp)
     304:	e17ffe15 	stw	r5,-8(fp)
     308:	e1bfff15 	stw	r6,-4(fp)
	VGA_box (x, y, x +(size - 1), y + (size - 1), 0x0000);
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	10ffffc4 	addi	r3,r2,-1
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	188d883a 	add	r6,r3,r2
     31c:	e0bfff17 	ldw	r2,-4(fp)
     320:	10ffffc4 	addi	r3,r2,-1
     324:	e0bffe17 	ldw	r2,-8(fp)
     328:	1885883a 	add	r2,r3,r2
     32c:	d8000015 	stw	zero,0(sp)
     330:	e13ffd17 	ldw	r4,-12(fp)
     334:	e17ffe17 	ldw	r5,-8(fp)
     338:	100f883a 	mov	r7,r2
     33c:	00027e40 	call	27e4 <VGA_box>
}
     340:	e037883a 	mov	sp,fp
     344:	dfc00117 	ldw	ra,4(sp)
     348:	df000017 	ldw	fp,0(sp)
     34c:	dec00204 	addi	sp,sp,8
     350:	f800283a 	ret

00000354 <drawLine>:


void drawLine(double x1, double y1, double x2, double y2, double midX, double midY, int size, int remove, short pixel_color)
{
     354:	deffda04 	addi	sp,sp,-152
     358:	dfc02515 	stw	ra,148(sp)
     35c:	df002415 	stw	fp,144(sp)
     360:	dc002315 	stw	r16,140(sp)
     364:	df002404 	addi	fp,sp,144
     368:	e13ffa15 	stw	r4,-24(fp)
     36c:	e17ffb15 	stw	r5,-20(fp)
     370:	e1bffc15 	stw	r6,-16(fp)
     374:	e1fffd15 	stw	r7,-12(fp)
     378:	e0800c17 	ldw	r2,48(fp)
     37c:	e0bffe0d 	sth	r2,-8(fp)
    y1 = y1 * -1;
     380:	e0bffc17 	ldw	r2,-16(fp)
     384:	e0bffc15 	stw	r2,-16(fp)
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	10a0003c 	xorhi	r2,r2,32768
     390:	e0bffd15 	stw	r2,-12(fp)
    y2 = y2 * -1;
     394:	e0800417 	ldw	r2,16(fp)
     398:	e0800415 	stw	r2,16(fp)
     39c:	e0800517 	ldw	r2,20(fp)
     3a0:	10a0003c 	xorhi	r2,r2,32768
     3a4:	e0800515 	stw	r2,20(fp)

    x1 = x1 + midX;
     3a8:	e13ffa17 	ldw	r4,-24(fp)
     3ac:	e17ffb17 	ldw	r5,-20(fp)
     3b0:	e1800617 	ldw	r6,24(fp)
     3b4:	e1c00717 	ldw	r7,28(fp)
     3b8:	0004f100 	call	4f10 <__adddf3>
     3bc:	1009883a 	mov	r4,r2
     3c0:	180b883a 	mov	r5,r3
     3c4:	e13ffa15 	stw	r4,-24(fp)
     3c8:	e17ffb15 	stw	r5,-20(fp)
    x2 = x2 + midX;
     3cc:	e1000217 	ldw	r4,8(fp)
     3d0:	e1400317 	ldw	r5,12(fp)
     3d4:	e1800617 	ldw	r6,24(fp)
     3d8:	e1c00717 	ldw	r7,28(fp)
     3dc:	0004f100 	call	4f10 <__adddf3>
     3e0:	1009883a 	mov	r4,r2
     3e4:	180b883a 	mov	r5,r3
     3e8:	e1000215 	stw	r4,8(fp)
     3ec:	e1400315 	stw	r5,12(fp)
    y1 = y1 + midY;
     3f0:	e13ffc17 	ldw	r4,-16(fp)
     3f4:	e17ffd17 	ldw	r5,-12(fp)
     3f8:	e1800817 	ldw	r6,32(fp)
     3fc:	e1c00917 	ldw	r7,36(fp)
     400:	0004f100 	call	4f10 <__adddf3>
     404:	1009883a 	mov	r4,r2
     408:	180b883a 	mov	r5,r3
     40c:	e13ffc15 	stw	r4,-16(fp)
     410:	e17ffd15 	stw	r5,-12(fp)
    y2 = y2 + midY;
     414:	e1000417 	ldw	r4,16(fp)
     418:	e1400517 	ldw	r5,20(fp)
     41c:	e1800817 	ldw	r6,32(fp)
     420:	e1c00917 	ldw	r7,36(fp)
     424:	0004f100 	call	4f10 <__adddf3>
     428:	1009883a 	mov	r4,r2
     42c:	180b883a 	mov	r5,r3
     430:	e1000415 	stw	r4,16(fp)
     434:	e1400515 	stw	r5,20(fp)


    //switch points when first point is behind second point on x axel
    if (x2 < x1)
     438:	e1000217 	ldw	r4,8(fp)
     43c:	e1400317 	ldw	r5,12(fp)
     440:	e1bffa17 	ldw	r6,-24(fp)
     444:	e1fffb17 	ldw	r7,-20(fp)
     448:	00061dc0 	call	61dc <__ledf2>
     44c:	1000180e 	bge	r2,zero,4b0 <drawLine+0x15c>
    {
        double tempX = x1;
     450:	e0bffa17 	ldw	r2,-24(fp)
     454:	e0bfea15 	stw	r2,-88(fp)
     458:	e0bffb17 	ldw	r2,-20(fp)
     45c:	e0bfeb15 	stw	r2,-84(fp)
        double tempY = y1;
     460:	e0bffc17 	ldw	r2,-16(fp)
     464:	e0bfec15 	stw	r2,-80(fp)
     468:	e0bffd17 	ldw	r2,-12(fp)
     46c:	e0bfed15 	stw	r2,-76(fp)
        x1 = x2;
     470:	e0800217 	ldw	r2,8(fp)
     474:	e0bffa15 	stw	r2,-24(fp)
     478:	e0800317 	ldw	r2,12(fp)
     47c:	e0bffb15 	stw	r2,-20(fp)
        y1 = y2;
     480:	e0800417 	ldw	r2,16(fp)
     484:	e0bffc15 	stw	r2,-16(fp)
     488:	e0800517 	ldw	r2,20(fp)
     48c:	e0bffd15 	stw	r2,-12(fp)

        x2 = tempX;
     490:	e0bfea17 	ldw	r2,-88(fp)
     494:	e0800215 	stw	r2,8(fp)
     498:	e0bfeb17 	ldw	r2,-84(fp)
     49c:	e0800315 	stw	r2,12(fp)
        y2 = tempY;
     4a0:	e0bfec17 	ldw	r2,-80(fp)
     4a4:	e0800415 	stw	r2,16(fp)
     4a8:	e0bfed17 	ldw	r2,-76(fp)
     4ac:	e0800515 	stw	r2,20(fp)
    }

    //setup vars for loop
    double x = 0;
     4b0:	e03fdc15 	stw	zero,-144(fp)
     4b4:	e03fdd15 	stw	zero,-140(fp)
    double y = 0;
     4b8:	e03fde15 	stw	zero,-136(fp)
     4bc:	e03fdf15 	stw	zero,-132(fp)
    double prevY = 0;
     4c0:	e03fe015 	stw	zero,-128(fp)
     4c4:	e03fe115 	stw	zero,-124(fp)
    double prevX = 0;
     4c8:	e03fe215 	stw	zero,-120(fp)
     4cc:	e03fe315 	stw	zero,-116(fp)
    //for loop for drawing beam
    for (x = x1; x <= x2; x++)
     4d0:	e0bffa17 	ldw	r2,-24(fp)
     4d4:	e0bfdc15 	stw	r2,-144(fp)
     4d8:	e0bffb17 	ldw	r2,-20(fp)
     4dc:	e0bfdd15 	stw	r2,-140(fp)
     4e0:	00012606 	br	97c <drawLine+0x628>
    {
    		y = 0;
     4e4:	e03fde15 	stw	zero,-136(fp)
     4e8:	e03fdf15 	stw	zero,-132(fp)
            //formula for drawing beam between nodes
			if ((x2 - x1) == 0)
     4ec:	e1000217 	ldw	r4,8(fp)
     4f0:	e1400317 	ldw	r5,12(fp)
     4f4:	e1bffa17 	ldw	r6,-24(fp)
     4f8:	e1fffb17 	ldw	r7,-20(fp)
     4fc:	00069e00 	call	69e0 <__subdf3>
     500:	1009883a 	mov	r4,r2
     504:	180b883a 	mov	r5,r3
     508:	2005883a 	mov	r2,r4
     50c:	2807883a 	mov	r3,r5
     510:	1009883a 	mov	r4,r2
     514:	180b883a 	mov	r5,r3
     518:	000d883a 	mov	r6,zero
     51c:	000f883a 	mov	r7,zero
     520:	00060780 	call	6078 <__eqdf2>
     524:	1000431e 	bne	r2,zero,634 <drawLine+0x2e0>
			{
                double count;

                if (y2 > y1)
     528:	e1000417 	ldw	r4,16(fp)
     52c:	e1400517 	ldw	r5,20(fp)
     530:	e1bffc17 	ldw	r6,-16(fp)
     534:	e1fffd17 	ldw	r7,-12(fp)
     538:	00060fc0 	call	60fc <__gedf2>
     53c:	00800c0e 	bge	zero,r2,570 <drawLine+0x21c>
                {
                    double tempY = y1;
     540:	e0bffc17 	ldw	r2,-16(fp)
     544:	e0bfee15 	stw	r2,-72(fp)
     548:	e0bffd17 	ldw	r2,-12(fp)
     54c:	e0bfef15 	stw	r2,-68(fp)
                    y1 = y2;
     550:	e0800417 	ldw	r2,16(fp)
     554:	e0bffc15 	stw	r2,-16(fp)
     558:	e0800517 	ldw	r2,20(fp)
     55c:	e0bffd15 	stw	r2,-12(fp)
                    y2 = tempY;
     560:	e0bfee17 	ldw	r2,-72(fp)
     564:	e0800415 	stw	r2,16(fp)
     568:	e0bfef17 	ldw	r2,-68(fp)
     56c:	e0800515 	stw	r2,20(fp)
                }
                for (count = y2; count <= y1; count++)
     570:	e0800417 	ldw	r2,16(fp)
     574:	e0bfe415 	stw	r2,-112(fp)
     578:	e0800517 	ldw	r2,20(fp)
     57c:	e0bfe515 	stw	r2,-108(fp)
     580:	00002506 	br	618 <drawLine+0x2c4>
                {
                    if (!remove)
     584:	e0800b17 	ldw	r2,44(fp)
     588:	10000f1e 	bne	r2,zero,5c8 <drawLine+0x274>
                    {
                        drawPixel((int)x, (int)count, size, pixel_color);
     58c:	e13fdc17 	ldw	r4,-144(fp)
     590:	e17fdd17 	ldw	r5,-140(fp)
     594:	00072b00 	call	72b0 <__fixdfsi>
     598:	1021883a 	mov	r16,r2
     59c:	e13fe417 	ldw	r4,-112(fp)
     5a0:	e17fe517 	ldw	r5,-108(fp)
     5a4:	00072b00 	call	72b0 <__fixdfsi>
     5a8:	1007883a 	mov	r3,r2
     5ac:	e0bffe0f 	ldh	r2,-8(fp)
     5b0:	8009883a 	mov	r4,r16
     5b4:	180b883a 	mov	r5,r3
     5b8:	e1800a17 	ldw	r6,40(fp)
     5bc:	100f883a 	mov	r7,r2
     5c0:	00002800 	call	280 <drawPixel>
     5c4:	00000b06 	br	5f4 <drawLine+0x2a0>
                    }
                    else
                    {
                        removePixel((int)x, (int)count, size);
     5c8:	e13fdc17 	ldw	r4,-144(fp)
     5cc:	e17fdd17 	ldw	r5,-140(fp)
     5d0:	00072b00 	call	72b0 <__fixdfsi>
     5d4:	1021883a 	mov	r16,r2
     5d8:	e13fe417 	ldw	r4,-112(fp)
     5dc:	e17fe517 	ldw	r5,-108(fp)
     5e0:	00072b00 	call	72b0 <__fixdfsi>
     5e4:	8009883a 	mov	r4,r16
     5e8:	100b883a 	mov	r5,r2
     5ec:	e1800a17 	ldw	r6,40(fp)
     5f0:	00002f00 	call	2f0 <removePixel>
                {
                    double tempY = y1;
                    y1 = y2;
                    y2 = tempY;
                }
                for (count = y2; count <= y1; count++)
     5f4:	e13fe417 	ldw	r4,-112(fp)
     5f8:	e17fe517 	ldw	r5,-108(fp)
     5fc:	000d883a 	mov	r6,zero
     600:	01cffc34 	movhi	r7,16368
     604:	0004f100 	call	4f10 <__adddf3>
     608:	1009883a 	mov	r4,r2
     60c:	180b883a 	mov	r5,r3
     610:	e13fe415 	stw	r4,-112(fp)
     614:	e17fe515 	stw	r5,-108(fp)
     618:	e13fe417 	ldw	r4,-112(fp)
     61c:	e17fe517 	ldw	r5,-108(fp)
     620:	e1bffc17 	ldw	r6,-16(fp)
     624:	e1fffd17 	ldw	r7,-12(fp)
     628:	00061dc0 	call	61dc <__ledf2>
     62c:	00bfd50e 	bge	zero,r2,584 <__alt_mem_Flash_flash_data+0xf4000584>
     630:	00003606 	br	70c <drawLine+0x3b8>
                }

            }
            else
            {
            	double a = y2 - y1;
     634:	e1000417 	ldw	r4,16(fp)
     638:	e1400517 	ldw	r5,20(fp)
     63c:	e1bffc17 	ldw	r6,-16(fp)
     640:	e1fffd17 	ldw	r7,-12(fp)
     644:	00069e00 	call	69e0 <__subdf3>
     648:	1009883a 	mov	r4,r2
     64c:	180b883a 	mov	r5,r3
     650:	e13ff015 	stw	r4,-64(fp)
     654:	e17ff115 	stw	r5,-60(fp)
            	double b = x2 - x1;
     658:	e1000217 	ldw	r4,8(fp)
     65c:	e1400317 	ldw	r5,12(fp)
     660:	e1bffa17 	ldw	r6,-24(fp)
     664:	e1fffb17 	ldw	r7,-20(fp)
     668:	00069e00 	call	69e0 <__subdf3>
     66c:	1009883a 	mov	r4,r2
     670:	180b883a 	mov	r5,r3
     674:	e13ff215 	stw	r4,-56(fp)
     678:	e17ff315 	stw	r5,-52(fp)
            	double c = a /b;
     67c:	e13ff017 	ldw	r4,-64(fp)
     680:	e17ff117 	ldw	r5,-60(fp)
     684:	e1bff217 	ldw	r6,-56(fp)
     688:	e1fff317 	ldw	r7,-52(fp)
     68c:	00057ac0 	call	57ac <__divdf3>
     690:	1009883a 	mov	r4,r2
     694:	180b883a 	mov	r5,r3
     698:	e13ff415 	stw	r4,-48(fp)
     69c:	e17ff515 	stw	r5,-44(fp)
            	double d = x - x1;
     6a0:	e13fdc17 	ldw	r4,-144(fp)
     6a4:	e17fdd17 	ldw	r5,-140(fp)
     6a8:	e1bffa17 	ldw	r6,-24(fp)
     6ac:	e1fffb17 	ldw	r7,-20(fp)
     6b0:	00069e00 	call	69e0 <__subdf3>
     6b4:	1009883a 	mov	r4,r2
     6b8:	180b883a 	mov	r5,r3
     6bc:	e13ff615 	stw	r4,-40(fp)
     6c0:	e17ff715 	stw	r5,-36(fp)
            	double e = c * d;
     6c4:	e13ff417 	ldw	r4,-48(fp)
     6c8:	e17ff517 	ldw	r5,-44(fp)
     6cc:	e1bff617 	ldw	r6,-40(fp)
     6d0:	e1fff717 	ldw	r7,-36(fp)
     6d4:	00062bc0 	call	62bc <__muldf3>
     6d8:	1009883a 	mov	r4,r2
     6dc:	180b883a 	mov	r5,r3
     6e0:	e13ff815 	stw	r4,-32(fp)
     6e4:	e17ff915 	stw	r5,-28(fp)
                y = e + y1;
     6e8:	e13ff817 	ldw	r4,-32(fp)
     6ec:	e17ff917 	ldw	r5,-28(fp)
     6f0:	e1bffc17 	ldw	r6,-16(fp)
     6f4:	e1fffd17 	ldw	r7,-12(fp)
     6f8:	0004f100 	call	4f10 <__adddf3>
     6fc:	1009883a 	mov	r4,r2
     700:	180b883a 	mov	r5,r3
     704:	e13fde15 	stw	r4,-136(fp)
     708:	e17fdf15 	stw	r5,-132(fp)
            }

			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
     70c:	e13fde17 	ldw	r4,-136(fp)
     710:	e17fdf17 	ldw	r5,-132(fp)
     714:	e1bfe017 	ldw	r6,-128(fp)
     718:	e1ffe117 	ldw	r7,-124(fp)
     71c:	00069e00 	call	69e0 <__subdf3>
     720:	1009883a 	mov	r4,r2
     724:	180b883a 	mov	r5,r3
     728:	2005883a 	mov	r2,r4
     72c:	2807883a 	mov	r3,r5
     730:	1009883a 	mov	r4,r2
     734:	180b883a 	mov	r5,r3
     738:	000d883a 	mov	r6,zero
     73c:	000f883a 	mov	r7,zero
     740:	00060fc0 	call	60fc <__gedf2>
     744:	0080370e 	bge	zero,r2,824 <drawLine+0x4d0>
     748:	e13fdc17 	ldw	r4,-144(fp)
     74c:	e17fdd17 	ldw	r5,-140(fp)
     750:	000d883a 	mov	r6,zero
     754:	000f883a 	mov	r7,zero
     758:	00060780 	call	6078 <__eqdf2>
     75c:	10003126 	beq	r2,zero,824 <drawLine+0x4d0>
			        {

			            double counter;
			            for (counter = prevY; counter <= y; counter++)
     760:	e0bfe017 	ldw	r2,-128(fp)
     764:	e0bfe615 	stw	r2,-104(fp)
     768:	e0bfe117 	ldw	r2,-124(fp)
     76c:	e0bfe715 	stw	r2,-100(fp)
     770:	00002506 	br	808 <drawLine+0x4b4>
			            {
			                if (!remove)
     774:	e0800b17 	ldw	r2,44(fp)
     778:	10000f1e 	bne	r2,zero,7b8 <drawLine+0x464>
			                {
			                    drawPixel((int)prevX, (int)counter, size, pixel_color);
     77c:	e13fe217 	ldw	r4,-120(fp)
     780:	e17fe317 	ldw	r5,-116(fp)
     784:	00072b00 	call	72b0 <__fixdfsi>
     788:	1021883a 	mov	r16,r2
     78c:	e13fe617 	ldw	r4,-104(fp)
     790:	e17fe717 	ldw	r5,-100(fp)
     794:	00072b00 	call	72b0 <__fixdfsi>
     798:	1007883a 	mov	r3,r2
     79c:	e0bffe0f 	ldh	r2,-8(fp)
     7a0:	8009883a 	mov	r4,r16
     7a4:	180b883a 	mov	r5,r3
     7a8:	e1800a17 	ldw	r6,40(fp)
     7ac:	100f883a 	mov	r7,r2
     7b0:	00002800 	call	280 <drawPixel>
     7b4:	00000b06 	br	7e4 <drawLine+0x490>
			                }
			                else
			                {
			                    removePixel((int)prevX, (int)counter, size);
     7b8:	e13fe217 	ldw	r4,-120(fp)
     7bc:	e17fe317 	ldw	r5,-116(fp)
     7c0:	00072b00 	call	72b0 <__fixdfsi>
     7c4:	1021883a 	mov	r16,r2
     7c8:	e13fe617 	ldw	r4,-104(fp)
     7cc:	e17fe717 	ldw	r5,-100(fp)
     7d0:	00072b00 	call	72b0 <__fixdfsi>
     7d4:	8009883a 	mov	r4,r16
     7d8:	100b883a 	mov	r5,r2
     7dc:	e1800a17 	ldw	r6,40(fp)
     7e0:	00002f00 	call	2f0 <removePixel>
			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
			        {

			            double counter;
			            for (counter = prevY; counter <= y; counter++)
     7e4:	e13fe617 	ldw	r4,-104(fp)
     7e8:	e17fe717 	ldw	r5,-100(fp)
     7ec:	000d883a 	mov	r6,zero
     7f0:	01cffc34 	movhi	r7,16368
     7f4:	0004f100 	call	4f10 <__adddf3>
     7f8:	1009883a 	mov	r4,r2
     7fc:	180b883a 	mov	r5,r3
     800:	e13fe615 	stw	r4,-104(fp)
     804:	e17fe715 	stw	r5,-100(fp)
     808:	e13fe617 	ldw	r4,-104(fp)
     80c:	e17fe717 	ldw	r5,-100(fp)
     810:	e1bfde17 	ldw	r6,-136(fp)
     814:	e1ffdf17 	ldw	r7,-132(fp)
     818:	00061dc0 	call	61dc <__ledf2>
     81c:	00bfd50e 	bge	zero,r2,774 <__alt_mem_Flash_flash_data+0xf4000774>
                y = e + y1;
            }

			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
			        {
     820:	00004506 	br	938 <drawLine+0x5e4>
			                {
			                    removePixel((int)prevX, (int)counter, size);
			                }
			            }
			        }
			        else if (prevY - y > 0 && x != 0)
     824:	e13fe017 	ldw	r4,-128(fp)
     828:	e17fe117 	ldw	r5,-124(fp)
     82c:	e1bfde17 	ldw	r6,-136(fp)
     830:	e1ffdf17 	ldw	r7,-132(fp)
     834:	00069e00 	call	69e0 <__subdf3>
     838:	1009883a 	mov	r4,r2
     83c:	180b883a 	mov	r5,r3
     840:	2005883a 	mov	r2,r4
     844:	2807883a 	mov	r3,r5
     848:	1009883a 	mov	r4,r2
     84c:	180b883a 	mov	r5,r3
     850:	000d883a 	mov	r6,zero
     854:	000f883a 	mov	r7,zero
     858:	00060fc0 	call	60fc <__gedf2>
     85c:	0080360e 	bge	zero,r2,938 <drawLine+0x5e4>
     860:	e13fdc17 	ldw	r4,-144(fp)
     864:	e17fdd17 	ldw	r5,-140(fp)
     868:	000d883a 	mov	r6,zero
     86c:	000f883a 	mov	r7,zero
     870:	00060780 	call	6078 <__eqdf2>
     874:	10003026 	beq	r2,zero,938 <drawLine+0x5e4>
			        {
			            double counter;
			            for (counter = y; counter <= prevY; counter++)
     878:	e0bfde17 	ldw	r2,-136(fp)
     87c:	e0bfe815 	stw	r2,-96(fp)
     880:	e0bfdf17 	ldw	r2,-132(fp)
     884:	e0bfe915 	stw	r2,-92(fp)
     888:	00002506 	br	920 <drawLine+0x5cc>
			            {
			                if (!remove)
     88c:	e0800b17 	ldw	r2,44(fp)
     890:	10000f1e 	bne	r2,zero,8d0 <drawLine+0x57c>
			                {
			                    drawPixel((int)prevX, (int)counter, size, pixel_color);
     894:	e13fe217 	ldw	r4,-120(fp)
     898:	e17fe317 	ldw	r5,-116(fp)
     89c:	00072b00 	call	72b0 <__fixdfsi>
     8a0:	1021883a 	mov	r16,r2
     8a4:	e13fe817 	ldw	r4,-96(fp)
     8a8:	e17fe917 	ldw	r5,-92(fp)
     8ac:	00072b00 	call	72b0 <__fixdfsi>
     8b0:	1007883a 	mov	r3,r2
     8b4:	e0bffe0f 	ldh	r2,-8(fp)
     8b8:	8009883a 	mov	r4,r16
     8bc:	180b883a 	mov	r5,r3
     8c0:	e1800a17 	ldw	r6,40(fp)
     8c4:	100f883a 	mov	r7,r2
     8c8:	00002800 	call	280 <drawPixel>
     8cc:	00000b06 	br	8fc <drawLine+0x5a8>
			                }
			                else
			                {
			                    removePixel((int)prevX, (int)counter, size);
     8d0:	e13fe217 	ldw	r4,-120(fp)
     8d4:	e17fe317 	ldw	r5,-116(fp)
     8d8:	00072b00 	call	72b0 <__fixdfsi>
     8dc:	1021883a 	mov	r16,r2
     8e0:	e13fe817 	ldw	r4,-96(fp)
     8e4:	e17fe917 	ldw	r5,-92(fp)
     8e8:	00072b00 	call	72b0 <__fixdfsi>
     8ec:	8009883a 	mov	r4,r16
     8f0:	100b883a 	mov	r5,r2
     8f4:	e1800a17 	ldw	r6,40(fp)
     8f8:	00002f00 	call	2f0 <removePixel>
			            }
			        }
			        else if (prevY - y > 0 && x != 0)
			        {
			            double counter;
			            for (counter = y; counter <= prevY; counter++)
     8fc:	e13fe817 	ldw	r4,-96(fp)
     900:	e17fe917 	ldw	r5,-92(fp)
     904:	000d883a 	mov	r6,zero
     908:	01cffc34 	movhi	r7,16368
     90c:	0004f100 	call	4f10 <__adddf3>
     910:	1009883a 	mov	r4,r2
     914:	180b883a 	mov	r5,r3
     918:	e13fe815 	stw	r4,-96(fp)
     91c:	e17fe915 	stw	r5,-92(fp)
     920:	e13fe817 	ldw	r4,-96(fp)
     924:	e17fe917 	ldw	r5,-92(fp)
     928:	e1bfe017 	ldw	r6,-128(fp)
     92c:	e1ffe117 	ldw	r7,-124(fp)
     930:	00061dc0 	call	61dc <__ledf2>
     934:	00bfd50e 	bge	zero,r2,88c <__alt_mem_Flash_flash_data+0xf400088c>
			        else
			        {
			            removePixel((int)x, (int)y, size);
			        }*/

			        prevY = y;
     938:	e0bfde17 	ldw	r2,-136(fp)
     93c:	e0bfe015 	stw	r2,-128(fp)
     940:	e0bfdf17 	ldw	r2,-132(fp)
     944:	e0bfe115 	stw	r2,-124(fp)
			        prevX = x;
     948:	e0bfdc17 	ldw	r2,-144(fp)
     94c:	e0bfe215 	stw	r2,-120(fp)
     950:	e0bfdd17 	ldw	r2,-140(fp)
     954:	e0bfe315 	stw	r2,-116(fp)
    double x = 0;
    double y = 0;
    double prevY = 0;
    double prevX = 0;
    //for loop for drawing beam
    for (x = x1; x <= x2; x++)
     958:	e13fdc17 	ldw	r4,-144(fp)
     95c:	e17fdd17 	ldw	r5,-140(fp)
     960:	000d883a 	mov	r6,zero
     964:	01cffc34 	movhi	r7,16368
     968:	0004f100 	call	4f10 <__adddf3>
     96c:	1009883a 	mov	r4,r2
     970:	180b883a 	mov	r5,r3
     974:	e13fdc15 	stw	r4,-144(fp)
     978:	e17fdd15 	stw	r5,-140(fp)
     97c:	e13fdc17 	ldw	r4,-144(fp)
     980:	e17fdd17 	ldw	r5,-140(fp)
     984:	e1800217 	ldw	r6,8(fp)
     988:	e1c00317 	ldw	r7,12(fp)
     98c:	00061dc0 	call	61dc <__ledf2>
     990:	00bed40e 	bge	zero,r2,4e4 <__alt_mem_Flash_flash_data+0xf40004e4>
			        prevY = y;
			        prevX = x;

        }

}
     994:	e6ffff04 	addi	sp,fp,-4
     998:	dfc00217 	ldw	ra,8(sp)
     99c:	df000117 	ldw	fp,4(sp)
     9a0:	dc000017 	ldw	r16,0(sp)
     9a4:	dec00304 	addi	sp,sp,12
     9a8:	f800283a 	ret

000009ac <drawNodesAndBeams>:
double prevousZoomScreenBR = 0;
int previousXRotation = 0;
int previousYRotation = 0;

void drawNodesAndBeams( double zoomscreen, int rotation[2], double starteEndnodes[8][2][3], int midX, int midY, short color)
{
     9ac:	deffb704 	addi	sp,sp,-292
     9b0:	dfc04815 	stw	ra,288(sp)
     9b4:	df004715 	stw	fp,284(sp)
     9b8:	ddc04615 	stw	r23,280(sp)
     9bc:	dd804515 	stw	r22,276(sp)
     9c0:	dd404415 	stw	r21,272(sp)
     9c4:	dd004315 	stw	r20,268(sp)
     9c8:	dcc04215 	stw	r19,264(sp)
     9cc:	dc804115 	stw	r18,260(sp)
     9d0:	dc404015 	stw	r17,256(sp)
     9d4:	dc003f15 	stw	r16,252(sp)
     9d8:	df004704 	addi	fp,sp,284
     9dc:	e13fdd15 	stw	r4,-140(fp)
     9e0:	e17fde15 	stw	r5,-136(fp)
     9e4:	e1bfdf15 	stw	r6,-132(fp)
     9e8:	e1ffe015 	stw	r7,-128(fp)
     9ec:	e0800417 	ldw	r2,16(fp)
     9f0:	e0bfe10d 	sth	r2,-124(fp)
	int linesDrawn;
	double startx = 0;
     9f4:	e03fc515 	stw	zero,-236(fp)
     9f8:	e03fc615 	stw	zero,-232(fp)
	double starty = 0;
     9fc:	e03fc715 	stw	zero,-228(fp)
     a00:	e03fc815 	stw	zero,-224(fp)
	double startz = 0;
     a04:	e03fc915 	stw	zero,-220(fp)
     a08:	e03fca15 	stw	zero,-216(fp)
	double endx = 0;
     a0c:	e03fcb15 	stw	zero,-212(fp)
     a10:	e03fcc15 	stw	zero,-208(fp)
	double endy = 0;
     a14:	e03fcd15 	stw	zero,-204(fp)
     a18:	e03fce15 	stw	zero,-200(fp)
	double endz = 0;
     a1c:	e03fcf15 	stw	zero,-196(fp)
     a20:	e03fd015 	stw	zero,-192(fp)

	for (linesDrawn = 0; linesDrawn < 8; linesDrawn++)
     a24:	e03fc415 	stw	zero,-240(fp)
     a28:	00055306 	br	1f78 <drawNodesAndBeams+0x15cc>
	{


		double x1 = startx = starteEndnodes[linesDrawn][0][0];
     a2c:	e0bfc417 	ldw	r2,-240(fp)
     a30:	10800c24 	muli	r2,r2,48
     a34:	e0ffe017 	ldw	r3,-128(fp)
     a38:	1885883a 	add	r2,r3,r2
     a3c:	10c00017 	ldw	r3,0(r2)
     a40:	e0ffc515 	stw	r3,-236(fp)
     a44:	10800117 	ldw	r2,4(r2)
     a48:	e0bfc615 	stw	r2,-232(fp)
     a4c:	e0bfc517 	ldw	r2,-236(fp)
     a50:	e0bfd115 	stw	r2,-188(fp)
     a54:	e0bfc617 	ldw	r2,-232(fp)
     a58:	e0bfd215 	stw	r2,-184(fp)
		double y1 = starty = starteEndnodes[linesDrawn][0][1];
     a5c:	e0bfc417 	ldw	r2,-240(fp)
     a60:	10800c24 	muli	r2,r2,48
     a64:	e0ffe017 	ldw	r3,-128(fp)
     a68:	1885883a 	add	r2,r3,r2
     a6c:	10c00217 	ldw	r3,8(r2)
     a70:	e0ffc715 	stw	r3,-228(fp)
     a74:	10800317 	ldw	r2,12(r2)
     a78:	e0bfc815 	stw	r2,-224(fp)
     a7c:	e0bfc717 	ldw	r2,-228(fp)
     a80:	e0bfd315 	stw	r2,-180(fp)
     a84:	e0bfc817 	ldw	r2,-224(fp)
     a88:	e0bfd415 	stw	r2,-176(fp)
		double z1 = startz = starteEndnodes[linesDrawn][0][2];
     a8c:	e0bfc417 	ldw	r2,-240(fp)
     a90:	10800c24 	muli	r2,r2,48
     a94:	e0ffe017 	ldw	r3,-128(fp)
     a98:	1885883a 	add	r2,r3,r2
     a9c:	10c00417 	ldw	r3,16(r2)
     aa0:	e0ffc915 	stw	r3,-220(fp)
     aa4:	10800517 	ldw	r2,20(r2)
     aa8:	e0bfca15 	stw	r2,-216(fp)
     aac:	e0bfc917 	ldw	r2,-220(fp)
     ab0:	e0bfd515 	stw	r2,-172(fp)
     ab4:	e0bfca17 	ldw	r2,-216(fp)
     ab8:	e0bfd615 	stw	r2,-168(fp)

		double x2 = endx = starteEndnodes[linesDrawn][1][0];
     abc:	e0bfc417 	ldw	r2,-240(fp)
     ac0:	10800c24 	muli	r2,r2,48
     ac4:	e0ffe017 	ldw	r3,-128(fp)
     ac8:	1885883a 	add	r2,r3,r2
     acc:	10c00617 	ldw	r3,24(r2)
     ad0:	e0ffcb15 	stw	r3,-212(fp)
     ad4:	10800717 	ldw	r2,28(r2)
     ad8:	e0bfcc15 	stw	r2,-208(fp)
     adc:	e0bfcb17 	ldw	r2,-212(fp)
     ae0:	e0bfd715 	stw	r2,-164(fp)
     ae4:	e0bfcc17 	ldw	r2,-208(fp)
     ae8:	e0bfd815 	stw	r2,-160(fp)
		double y2 = endy = starteEndnodes[linesDrawn][1][1];
     aec:	e0bfc417 	ldw	r2,-240(fp)
     af0:	10800c24 	muli	r2,r2,48
     af4:	e0ffe017 	ldw	r3,-128(fp)
     af8:	1885883a 	add	r2,r3,r2
     afc:	10c00817 	ldw	r3,32(r2)
     b00:	e0ffcd15 	stw	r3,-204(fp)
     b04:	10800917 	ldw	r2,36(r2)
     b08:	e0bfce15 	stw	r2,-200(fp)
     b0c:	e0bfcd17 	ldw	r2,-204(fp)
     b10:	e0bfd915 	stw	r2,-156(fp)
     b14:	e0bfce17 	ldw	r2,-200(fp)
     b18:	e0bfda15 	stw	r2,-152(fp)
		double z2 = endz = starteEndnodes[linesDrawn][1][2];
     b1c:	e0bfc417 	ldw	r2,-240(fp)
     b20:	10800c24 	muli	r2,r2,48
     b24:	e0ffe017 	ldw	r3,-128(fp)
     b28:	1885883a 	add	r2,r3,r2
     b2c:	10c00a17 	ldw	r3,40(r2)
     b30:	e0ffcf15 	stw	r3,-196(fp)
     b34:	10800b17 	ldw	r2,44(r2)
     b38:	e0bfd015 	stw	r2,-192(fp)
     b3c:	e0bfcf17 	ldw	r2,-196(fp)
     b40:	e0bfdb15 	stw	r2,-148(fp)
     b44:	e0bfd017 	ldw	r2,-192(fp)
     b48:	e0bfdc15 	stw	r2,-144(fp)


		if(previousXRotation != rotation[0] || previousYRotation != rotation[1])
     b4c:	e0bfdf17 	ldw	r2,-132(fp)
     b50:	10c00017 	ldw	r3,0(r2)
     b54:	d0a7ed17 	ldw	r2,-24652(gp)
     b58:	1880051e 	bne	r3,r2,b70 <drawNodesAndBeams+0x1c4>
     b5c:	e0bfdf17 	ldw	r2,-132(fp)
     b60:	10800104 	addi	r2,r2,4
     b64:	10c00017 	ldw	r3,0(r2)
     b68:	d0a7ee17 	ldw	r2,-24648(gp)
     b6c:	18823026 	beq	r3,r2,1430 <drawNodesAndBeams+0xa84>
		{
			x1 = ((startx * cos(previousXRotation / 57.4) - starty * sin(previousXRotation / 57.4)) * (cos(previousYRotation / 57.4))) + startz * sin(previousYRotation / 57.4);
     b70:	d0a7ed17 	ldw	r2,-24652(gp)
     b74:	1009883a 	mov	r4,r2
     b78:	0004ddc0 	call	4ddc <__floatsisf>
     b7c:	1007883a 	mov	r3,r2
     b80:	009099b4 	movhi	r2,16998
     b84:	10a66684 	addi	r2,r2,-26214
     b88:	1885fff2 	custom	255,r2,r3,r2
     b8c:	1009883a 	mov	r4,r2
     b90:	00074080 	call	7408 <__extendsfdf2>
     b94:	100b883a 	mov	r5,r2
     b98:	180d883a 	mov	r6,r3
     b9c:	2809883a 	mov	r4,r5
     ba0:	300b883a 	mov	r5,r6
     ba4:	0002ab40 	call	2ab4 <cos>
     ba8:	100b883a 	mov	r5,r2
     bac:	180d883a 	mov	r6,r3
     bb0:	2809883a 	mov	r4,r5
     bb4:	300b883a 	mov	r5,r6
     bb8:	e1bfc517 	ldw	r6,-236(fp)
     bbc:	e1ffc617 	ldw	r7,-232(fp)
     bc0:	00062bc0 	call	62bc <__muldf3>
     bc4:	1009883a 	mov	r4,r2
     bc8:	180b883a 	mov	r5,r3
     bcc:	2021883a 	mov	r16,r4
     bd0:	2823883a 	mov	r17,r5
     bd4:	d0a7ed17 	ldw	r2,-24652(gp)
     bd8:	1009883a 	mov	r4,r2
     bdc:	0004ddc0 	call	4ddc <__floatsisf>
     be0:	1007883a 	mov	r3,r2
     be4:	009099b4 	movhi	r2,16998
     be8:	10a66684 	addi	r2,r2,-26214
     bec:	1885fff2 	custom	255,r2,r3,r2
     bf0:	1009883a 	mov	r4,r2
     bf4:	00074080 	call	7408 <__extendsfdf2>
     bf8:	100b883a 	mov	r5,r2
     bfc:	180d883a 	mov	r6,r3
     c00:	2809883a 	mov	r4,r5
     c04:	300b883a 	mov	r5,r6
     c08:	0002ba00 	call	2ba0 <sin>
     c0c:	100b883a 	mov	r5,r2
     c10:	180d883a 	mov	r6,r3
     c14:	2809883a 	mov	r4,r5
     c18:	300b883a 	mov	r5,r6
     c1c:	e1bfc717 	ldw	r6,-228(fp)
     c20:	e1ffc817 	ldw	r7,-224(fp)
     c24:	00062bc0 	call	62bc <__muldf3>
     c28:	1009883a 	mov	r4,r2
     c2c:	180b883a 	mov	r5,r3
     c30:	2005883a 	mov	r2,r4
     c34:	2807883a 	mov	r3,r5
     c38:	8009883a 	mov	r4,r16
     c3c:	880b883a 	mov	r5,r17
     c40:	100d883a 	mov	r6,r2
     c44:	180f883a 	mov	r7,r3
     c48:	00069e00 	call	69e0 <__subdf3>
     c4c:	1009883a 	mov	r4,r2
     c50:	180b883a 	mov	r5,r3
     c54:	2021883a 	mov	r16,r4
     c58:	2823883a 	mov	r17,r5
     c5c:	d0a7ee17 	ldw	r2,-24648(gp)
     c60:	1009883a 	mov	r4,r2
     c64:	0004ddc0 	call	4ddc <__floatsisf>
     c68:	1007883a 	mov	r3,r2
     c6c:	009099b4 	movhi	r2,16998
     c70:	10a66684 	addi	r2,r2,-26214
     c74:	1885fff2 	custom	255,r2,r3,r2
     c78:	1009883a 	mov	r4,r2
     c7c:	00074080 	call	7408 <__extendsfdf2>
     c80:	100b883a 	mov	r5,r2
     c84:	180d883a 	mov	r6,r3
     c88:	2809883a 	mov	r4,r5
     c8c:	300b883a 	mov	r5,r6
     c90:	0002ab40 	call	2ab4 <cos>
     c94:	100f883a 	mov	r7,r2
     c98:	1811883a 	mov	r8,r3
     c9c:	8009883a 	mov	r4,r16
     ca0:	880b883a 	mov	r5,r17
     ca4:	380d883a 	mov	r6,r7
     ca8:	400f883a 	mov	r7,r8
     cac:	00062bc0 	call	62bc <__muldf3>
     cb0:	1009883a 	mov	r4,r2
     cb4:	180b883a 	mov	r5,r3
     cb8:	2021883a 	mov	r16,r4
     cbc:	2823883a 	mov	r17,r5
     cc0:	d0a7ee17 	ldw	r2,-24648(gp)
     cc4:	1009883a 	mov	r4,r2
     cc8:	0004ddc0 	call	4ddc <__floatsisf>
     ccc:	1007883a 	mov	r3,r2
     cd0:	009099b4 	movhi	r2,16998
     cd4:	10a66684 	addi	r2,r2,-26214
     cd8:	1885fff2 	custom	255,r2,r3,r2
     cdc:	1009883a 	mov	r4,r2
     ce0:	00074080 	call	7408 <__extendsfdf2>
     ce4:	100b883a 	mov	r5,r2
     ce8:	180d883a 	mov	r6,r3
     cec:	2809883a 	mov	r4,r5
     cf0:	300b883a 	mov	r5,r6
     cf4:	0002ba00 	call	2ba0 <sin>
     cf8:	100b883a 	mov	r5,r2
     cfc:	180d883a 	mov	r6,r3
     d00:	2809883a 	mov	r4,r5
     d04:	300b883a 	mov	r5,r6
     d08:	e1bfc917 	ldw	r6,-220(fp)
     d0c:	e1ffca17 	ldw	r7,-216(fp)
     d10:	00062bc0 	call	62bc <__muldf3>
     d14:	1009883a 	mov	r4,r2
     d18:	180b883a 	mov	r5,r3
     d1c:	2005883a 	mov	r2,r4
     d20:	2807883a 	mov	r3,r5
     d24:	8009883a 	mov	r4,r16
     d28:	880b883a 	mov	r5,r17
     d2c:	100d883a 	mov	r6,r2
     d30:	180f883a 	mov	r7,r3
     d34:	0004f100 	call	4f10 <__adddf3>
     d38:	1009883a 	mov	r4,r2
     d3c:	180b883a 	mov	r5,r3
     d40:	e13fd115 	stw	r4,-188(fp)
     d44:	e17fd215 	stw	r5,-184(fp)
			x2 = ((endx * cos(previousXRotation / 57.4) - endy * sin(previousXRotation / 57.4)) * (cos(previousYRotation / 57.4))) + endz * sin(previousYRotation / 57.4);
     d48:	d0a7ed17 	ldw	r2,-24652(gp)
     d4c:	1009883a 	mov	r4,r2
     d50:	0004ddc0 	call	4ddc <__floatsisf>
     d54:	1007883a 	mov	r3,r2
     d58:	009099b4 	movhi	r2,16998
     d5c:	10a66684 	addi	r2,r2,-26214
     d60:	1885fff2 	custom	255,r2,r3,r2
     d64:	1009883a 	mov	r4,r2
     d68:	00074080 	call	7408 <__extendsfdf2>
     d6c:	100b883a 	mov	r5,r2
     d70:	180d883a 	mov	r6,r3
     d74:	2809883a 	mov	r4,r5
     d78:	300b883a 	mov	r5,r6
     d7c:	0002ab40 	call	2ab4 <cos>
     d80:	100b883a 	mov	r5,r2
     d84:	180d883a 	mov	r6,r3
     d88:	2809883a 	mov	r4,r5
     d8c:	300b883a 	mov	r5,r6
     d90:	e1bfcb17 	ldw	r6,-212(fp)
     d94:	e1ffcc17 	ldw	r7,-208(fp)
     d98:	00062bc0 	call	62bc <__muldf3>
     d9c:	1009883a 	mov	r4,r2
     da0:	180b883a 	mov	r5,r3
     da4:	2021883a 	mov	r16,r4
     da8:	2823883a 	mov	r17,r5
     dac:	d0a7ed17 	ldw	r2,-24652(gp)
     db0:	1009883a 	mov	r4,r2
     db4:	0004ddc0 	call	4ddc <__floatsisf>
     db8:	1007883a 	mov	r3,r2
     dbc:	009099b4 	movhi	r2,16998
     dc0:	10a66684 	addi	r2,r2,-26214
     dc4:	1885fff2 	custom	255,r2,r3,r2
     dc8:	1009883a 	mov	r4,r2
     dcc:	00074080 	call	7408 <__extendsfdf2>
     dd0:	100b883a 	mov	r5,r2
     dd4:	180d883a 	mov	r6,r3
     dd8:	2809883a 	mov	r4,r5
     ddc:	300b883a 	mov	r5,r6
     de0:	0002ba00 	call	2ba0 <sin>
     de4:	100b883a 	mov	r5,r2
     de8:	180d883a 	mov	r6,r3
     dec:	2809883a 	mov	r4,r5
     df0:	300b883a 	mov	r5,r6
     df4:	e1bfcd17 	ldw	r6,-204(fp)
     df8:	e1ffce17 	ldw	r7,-200(fp)
     dfc:	00062bc0 	call	62bc <__muldf3>
     e00:	1009883a 	mov	r4,r2
     e04:	180b883a 	mov	r5,r3
     e08:	2005883a 	mov	r2,r4
     e0c:	2807883a 	mov	r3,r5
     e10:	8009883a 	mov	r4,r16
     e14:	880b883a 	mov	r5,r17
     e18:	100d883a 	mov	r6,r2
     e1c:	180f883a 	mov	r7,r3
     e20:	00069e00 	call	69e0 <__subdf3>
     e24:	1009883a 	mov	r4,r2
     e28:	180b883a 	mov	r5,r3
     e2c:	2021883a 	mov	r16,r4
     e30:	2823883a 	mov	r17,r5
     e34:	d0a7ee17 	ldw	r2,-24648(gp)
     e38:	1009883a 	mov	r4,r2
     e3c:	0004ddc0 	call	4ddc <__floatsisf>
     e40:	1007883a 	mov	r3,r2
     e44:	009099b4 	movhi	r2,16998
     e48:	10a66684 	addi	r2,r2,-26214
     e4c:	1885fff2 	custom	255,r2,r3,r2
     e50:	1009883a 	mov	r4,r2
     e54:	00074080 	call	7408 <__extendsfdf2>
     e58:	100b883a 	mov	r5,r2
     e5c:	180d883a 	mov	r6,r3
     e60:	2809883a 	mov	r4,r5
     e64:	300b883a 	mov	r5,r6
     e68:	0002ab40 	call	2ab4 <cos>
     e6c:	100f883a 	mov	r7,r2
     e70:	1811883a 	mov	r8,r3
     e74:	8009883a 	mov	r4,r16
     e78:	880b883a 	mov	r5,r17
     e7c:	380d883a 	mov	r6,r7
     e80:	400f883a 	mov	r7,r8
     e84:	00062bc0 	call	62bc <__muldf3>
     e88:	1009883a 	mov	r4,r2
     e8c:	180b883a 	mov	r5,r3
     e90:	2021883a 	mov	r16,r4
     e94:	2823883a 	mov	r17,r5
     e98:	d0a7ee17 	ldw	r2,-24648(gp)
     e9c:	1009883a 	mov	r4,r2
     ea0:	0004ddc0 	call	4ddc <__floatsisf>
     ea4:	1007883a 	mov	r3,r2
     ea8:	009099b4 	movhi	r2,16998
     eac:	10a66684 	addi	r2,r2,-26214
     eb0:	1885fff2 	custom	255,r2,r3,r2
     eb4:	1009883a 	mov	r4,r2
     eb8:	00074080 	call	7408 <__extendsfdf2>
     ebc:	100b883a 	mov	r5,r2
     ec0:	180d883a 	mov	r6,r3
     ec4:	2809883a 	mov	r4,r5
     ec8:	300b883a 	mov	r5,r6
     ecc:	0002ba00 	call	2ba0 <sin>
     ed0:	100b883a 	mov	r5,r2
     ed4:	180d883a 	mov	r6,r3
     ed8:	2809883a 	mov	r4,r5
     edc:	300b883a 	mov	r5,r6
     ee0:	e1bfcf17 	ldw	r6,-196(fp)
     ee4:	e1ffd017 	ldw	r7,-192(fp)
     ee8:	00062bc0 	call	62bc <__muldf3>
     eec:	1009883a 	mov	r4,r2
     ef0:	180b883a 	mov	r5,r3
     ef4:	2005883a 	mov	r2,r4
     ef8:	2807883a 	mov	r3,r5
     efc:	8009883a 	mov	r4,r16
     f00:	880b883a 	mov	r5,r17
     f04:	100d883a 	mov	r6,r2
     f08:	180f883a 	mov	r7,r3
     f0c:	0004f100 	call	4f10 <__adddf3>
     f10:	1009883a 	mov	r4,r2
     f14:	180b883a 	mov	r5,r3
     f18:	e13fd715 	stw	r4,-164(fp)
     f1c:	e17fd815 	stw	r5,-160(fp)

			z1 = ((-(startx * cos(previousXRotation / 57.4) - starty * sin(previousXRotation / 57.4))) * (sin(previousYRotation / 57.4)) + startz * cos(previousYRotation / 57.4));
     f20:	d0a7ed17 	ldw	r2,-24652(gp)
     f24:	1009883a 	mov	r4,r2
     f28:	0004ddc0 	call	4ddc <__floatsisf>
     f2c:	1007883a 	mov	r3,r2
     f30:	009099b4 	movhi	r2,16998
     f34:	10a66684 	addi	r2,r2,-26214
     f38:	1885fff2 	custom	255,r2,r3,r2
     f3c:	1009883a 	mov	r4,r2
     f40:	00074080 	call	7408 <__extendsfdf2>
     f44:	100b883a 	mov	r5,r2
     f48:	180d883a 	mov	r6,r3
     f4c:	2809883a 	mov	r4,r5
     f50:	300b883a 	mov	r5,r6
     f54:	0002ab40 	call	2ab4 <cos>
     f58:	100b883a 	mov	r5,r2
     f5c:	180d883a 	mov	r6,r3
     f60:	2809883a 	mov	r4,r5
     f64:	300b883a 	mov	r5,r6
     f68:	e1bfc517 	ldw	r6,-236(fp)
     f6c:	e1ffc617 	ldw	r7,-232(fp)
     f70:	00062bc0 	call	62bc <__muldf3>
     f74:	1009883a 	mov	r4,r2
     f78:	180b883a 	mov	r5,r3
     f7c:	2021883a 	mov	r16,r4
     f80:	2823883a 	mov	r17,r5
     f84:	d0a7ed17 	ldw	r2,-24652(gp)
     f88:	1009883a 	mov	r4,r2
     f8c:	0004ddc0 	call	4ddc <__floatsisf>
     f90:	1007883a 	mov	r3,r2
     f94:	009099b4 	movhi	r2,16998
     f98:	10a66684 	addi	r2,r2,-26214
     f9c:	1885fff2 	custom	255,r2,r3,r2
     fa0:	1009883a 	mov	r4,r2
     fa4:	00074080 	call	7408 <__extendsfdf2>
     fa8:	100b883a 	mov	r5,r2
     fac:	180d883a 	mov	r6,r3
     fb0:	2809883a 	mov	r4,r5
     fb4:	300b883a 	mov	r5,r6
     fb8:	0002ba00 	call	2ba0 <sin>
     fbc:	100b883a 	mov	r5,r2
     fc0:	180d883a 	mov	r6,r3
     fc4:	2809883a 	mov	r4,r5
     fc8:	300b883a 	mov	r5,r6
     fcc:	e1bfc717 	ldw	r6,-228(fp)
     fd0:	e1ffc817 	ldw	r7,-224(fp)
     fd4:	00062bc0 	call	62bc <__muldf3>
     fd8:	1009883a 	mov	r4,r2
     fdc:	180b883a 	mov	r5,r3
     fe0:	2005883a 	mov	r2,r4
     fe4:	2807883a 	mov	r3,r5
     fe8:	8009883a 	mov	r4,r16
     fec:	880b883a 	mov	r5,r17
     ff0:	100d883a 	mov	r6,r2
     ff4:	180f883a 	mov	r7,r3
     ff8:	00069e00 	call	69e0 <__subdf3>
     ffc:	1009883a 	mov	r4,r2
    1000:	180b883a 	mov	r5,r3
    1004:	2005883a 	mov	r2,r4
    1008:	2807883a 	mov	r3,r5
    100c:	102d883a 	mov	r22,r2
    1010:	1de0003c 	xorhi	r23,r3,32768
    1014:	d0a7ee17 	ldw	r2,-24648(gp)
    1018:	1009883a 	mov	r4,r2
    101c:	0004ddc0 	call	4ddc <__floatsisf>
    1020:	1007883a 	mov	r3,r2
    1024:	009099b4 	movhi	r2,16998
    1028:	10a66684 	addi	r2,r2,-26214
    102c:	1885fff2 	custom	255,r2,r3,r2
    1030:	1009883a 	mov	r4,r2
    1034:	00074080 	call	7408 <__extendsfdf2>
    1038:	100b883a 	mov	r5,r2
    103c:	180d883a 	mov	r6,r3
    1040:	2809883a 	mov	r4,r5
    1044:	300b883a 	mov	r5,r6
    1048:	0002ba00 	call	2ba0 <sin>
    104c:	100f883a 	mov	r7,r2
    1050:	1811883a 	mov	r8,r3
    1054:	b009883a 	mov	r4,r22
    1058:	b80b883a 	mov	r5,r23
    105c:	380d883a 	mov	r6,r7
    1060:	400f883a 	mov	r7,r8
    1064:	00062bc0 	call	62bc <__muldf3>
    1068:	1009883a 	mov	r4,r2
    106c:	180b883a 	mov	r5,r3
    1070:	2021883a 	mov	r16,r4
    1074:	2823883a 	mov	r17,r5
    1078:	d0a7ee17 	ldw	r2,-24648(gp)
    107c:	1009883a 	mov	r4,r2
    1080:	0004ddc0 	call	4ddc <__floatsisf>
    1084:	1007883a 	mov	r3,r2
    1088:	009099b4 	movhi	r2,16998
    108c:	10a66684 	addi	r2,r2,-26214
    1090:	1885fff2 	custom	255,r2,r3,r2
    1094:	1009883a 	mov	r4,r2
    1098:	00074080 	call	7408 <__extendsfdf2>
    109c:	100b883a 	mov	r5,r2
    10a0:	180d883a 	mov	r6,r3
    10a4:	2809883a 	mov	r4,r5
    10a8:	300b883a 	mov	r5,r6
    10ac:	0002ab40 	call	2ab4 <cos>
    10b0:	100b883a 	mov	r5,r2
    10b4:	180d883a 	mov	r6,r3
    10b8:	2809883a 	mov	r4,r5
    10bc:	300b883a 	mov	r5,r6
    10c0:	e1bfc917 	ldw	r6,-220(fp)
    10c4:	e1ffca17 	ldw	r7,-216(fp)
    10c8:	00062bc0 	call	62bc <__muldf3>
    10cc:	1009883a 	mov	r4,r2
    10d0:	180b883a 	mov	r5,r3
    10d4:	2005883a 	mov	r2,r4
    10d8:	2807883a 	mov	r3,r5
    10dc:	8009883a 	mov	r4,r16
    10e0:	880b883a 	mov	r5,r17
    10e4:	100d883a 	mov	r6,r2
    10e8:	180f883a 	mov	r7,r3
    10ec:	0004f100 	call	4f10 <__adddf3>
    10f0:	1009883a 	mov	r4,r2
    10f4:	180b883a 	mov	r5,r3
    10f8:	e13fd515 	stw	r4,-172(fp)
    10fc:	e17fd615 	stw	r5,-168(fp)
			z2 = ((-(endx * cos(previousXRotation / 57.4) - endy * sin(previousXRotation / 57.4))) * (sin(previousYRotation / 57.4)) + endz * cos(previousYRotation / 57.4));
    1100:	d0a7ed17 	ldw	r2,-24652(gp)
    1104:	1009883a 	mov	r4,r2
    1108:	0004ddc0 	call	4ddc <__floatsisf>
    110c:	1007883a 	mov	r3,r2
    1110:	009099b4 	movhi	r2,16998
    1114:	10a66684 	addi	r2,r2,-26214
    1118:	1885fff2 	custom	255,r2,r3,r2
    111c:	1009883a 	mov	r4,r2
    1120:	00074080 	call	7408 <__extendsfdf2>
    1124:	100b883a 	mov	r5,r2
    1128:	180d883a 	mov	r6,r3
    112c:	2809883a 	mov	r4,r5
    1130:	300b883a 	mov	r5,r6
    1134:	0002ab40 	call	2ab4 <cos>
    1138:	100b883a 	mov	r5,r2
    113c:	180d883a 	mov	r6,r3
    1140:	2809883a 	mov	r4,r5
    1144:	300b883a 	mov	r5,r6
    1148:	e1bfcb17 	ldw	r6,-212(fp)
    114c:	e1ffcc17 	ldw	r7,-208(fp)
    1150:	00062bc0 	call	62bc <__muldf3>
    1154:	1009883a 	mov	r4,r2
    1158:	180b883a 	mov	r5,r3
    115c:	2021883a 	mov	r16,r4
    1160:	2823883a 	mov	r17,r5
    1164:	d0a7ed17 	ldw	r2,-24652(gp)
    1168:	1009883a 	mov	r4,r2
    116c:	0004ddc0 	call	4ddc <__floatsisf>
    1170:	1007883a 	mov	r3,r2
    1174:	009099b4 	movhi	r2,16998
    1178:	10a66684 	addi	r2,r2,-26214
    117c:	1885fff2 	custom	255,r2,r3,r2
    1180:	1009883a 	mov	r4,r2
    1184:	00074080 	call	7408 <__extendsfdf2>
    1188:	100b883a 	mov	r5,r2
    118c:	180d883a 	mov	r6,r3
    1190:	2809883a 	mov	r4,r5
    1194:	300b883a 	mov	r5,r6
    1198:	0002ba00 	call	2ba0 <sin>
    119c:	100b883a 	mov	r5,r2
    11a0:	180d883a 	mov	r6,r3
    11a4:	2809883a 	mov	r4,r5
    11a8:	300b883a 	mov	r5,r6
    11ac:	e1bfcd17 	ldw	r6,-204(fp)
    11b0:	e1ffce17 	ldw	r7,-200(fp)
    11b4:	00062bc0 	call	62bc <__muldf3>
    11b8:	1009883a 	mov	r4,r2
    11bc:	180b883a 	mov	r5,r3
    11c0:	2005883a 	mov	r2,r4
    11c4:	2807883a 	mov	r3,r5
    11c8:	8009883a 	mov	r4,r16
    11cc:	880b883a 	mov	r5,r17
    11d0:	100d883a 	mov	r6,r2
    11d4:	180f883a 	mov	r7,r3
    11d8:	00069e00 	call	69e0 <__subdf3>
    11dc:	1009883a 	mov	r4,r2
    11e0:	180b883a 	mov	r5,r3
    11e4:	2005883a 	mov	r2,r4
    11e8:	2807883a 	mov	r3,r5
    11ec:	e0bfe215 	stw	r2,-120(fp)
    11f0:	1920003c 	xorhi	r4,r3,32768
    11f4:	e13fe315 	stw	r4,-116(fp)
    11f8:	d0a7ee17 	ldw	r2,-24648(gp)
    11fc:	1009883a 	mov	r4,r2
    1200:	0004ddc0 	call	4ddc <__floatsisf>
    1204:	1007883a 	mov	r3,r2
    1208:	009099b4 	movhi	r2,16998
    120c:	10a66684 	addi	r2,r2,-26214
    1210:	1885fff2 	custom	255,r2,r3,r2
    1214:	1009883a 	mov	r4,r2
    1218:	00074080 	call	7408 <__extendsfdf2>
    121c:	100b883a 	mov	r5,r2
    1220:	180d883a 	mov	r6,r3
    1224:	2809883a 	mov	r4,r5
    1228:	300b883a 	mov	r5,r6
    122c:	0002ba00 	call	2ba0 <sin>
    1230:	100f883a 	mov	r7,r2
    1234:	1811883a 	mov	r8,r3
    1238:	e13fe217 	ldw	r4,-120(fp)
    123c:	e17fe317 	ldw	r5,-116(fp)
    1240:	380d883a 	mov	r6,r7
    1244:	400f883a 	mov	r7,r8
    1248:	00062bc0 	call	62bc <__muldf3>
    124c:	1009883a 	mov	r4,r2
    1250:	180b883a 	mov	r5,r3
    1254:	2021883a 	mov	r16,r4
    1258:	2823883a 	mov	r17,r5
    125c:	d0a7ee17 	ldw	r2,-24648(gp)
    1260:	1009883a 	mov	r4,r2
    1264:	0004ddc0 	call	4ddc <__floatsisf>
    1268:	1007883a 	mov	r3,r2
    126c:	009099b4 	movhi	r2,16998
    1270:	10a66684 	addi	r2,r2,-26214
    1274:	1885fff2 	custom	255,r2,r3,r2
    1278:	1009883a 	mov	r4,r2
    127c:	00074080 	call	7408 <__extendsfdf2>
    1280:	100b883a 	mov	r5,r2
    1284:	180d883a 	mov	r6,r3
    1288:	2809883a 	mov	r4,r5
    128c:	300b883a 	mov	r5,r6
    1290:	0002ab40 	call	2ab4 <cos>
    1294:	100b883a 	mov	r5,r2
    1298:	180d883a 	mov	r6,r3
    129c:	2809883a 	mov	r4,r5
    12a0:	300b883a 	mov	r5,r6
    12a4:	e1bfcf17 	ldw	r6,-196(fp)
    12a8:	e1ffd017 	ldw	r7,-192(fp)
    12ac:	00062bc0 	call	62bc <__muldf3>
    12b0:	1009883a 	mov	r4,r2
    12b4:	180b883a 	mov	r5,r3
    12b8:	2005883a 	mov	r2,r4
    12bc:	2807883a 	mov	r3,r5
    12c0:	8009883a 	mov	r4,r16
    12c4:	880b883a 	mov	r5,r17
    12c8:	100d883a 	mov	r6,r2
    12cc:	180f883a 	mov	r7,r3
    12d0:	0004f100 	call	4f10 <__adddf3>
    12d4:	1009883a 	mov	r4,r2
    12d8:	180b883a 	mov	r5,r3
    12dc:	e13fdb15 	stw	r4,-148(fp)
    12e0:	e17fdc15 	stw	r5,-144(fp)

			y1 = z1;
    12e4:	e0bfd517 	ldw	r2,-172(fp)
    12e8:	e0bfd315 	stw	r2,-180(fp)
    12ec:	e0bfd617 	ldw	r2,-168(fp)
    12f0:	e0bfd415 	stw	r2,-176(fp)
			y2 = z2;
    12f4:	e0bfdb17 	ldw	r2,-148(fp)
    12f8:	e0bfd915 	stw	r2,-156(fp)
    12fc:	e0bfdc17 	ldw	r2,-144(fp)
    1300:	e0bfda15 	stw	r2,-152(fp)

			drawLine((x1 * prevousZoomScreenBR), (y1 * prevousZoomScreenBR), (x2 * prevousZoomScreenBR), (y2 * prevousZoomScreenBR), midX, midY, 1 , 1, color);
    1304:	d0a7eb17 	ldw	r2,-24660(gp)
    1308:	d127ec04 	addi	r4,gp,-24656
    130c:	20c00017 	ldw	r3,0(r4)
    1310:	1009883a 	mov	r4,r2
    1314:	180b883a 	mov	r5,r3
    1318:	e1bfd117 	ldw	r6,-188(fp)
    131c:	e1ffd217 	ldw	r7,-184(fp)
    1320:	00062bc0 	call	62bc <__muldf3>
    1324:	1009883a 	mov	r4,r2
    1328:	180b883a 	mov	r5,r3
    132c:	e13fe415 	stw	r4,-112(fp)
    1330:	e17fe515 	stw	r5,-108(fp)
    1334:	d0a7eb17 	ldw	r2,-24660(gp)
    1338:	d127ec04 	addi	r4,gp,-24656
    133c:	20c00017 	ldw	r3,0(r4)
    1340:	1009883a 	mov	r4,r2
    1344:	180b883a 	mov	r5,r3
    1348:	e1bfd317 	ldw	r6,-180(fp)
    134c:	e1ffd417 	ldw	r7,-176(fp)
    1350:	00062bc0 	call	62bc <__muldf3>
    1354:	1009883a 	mov	r4,r2
    1358:	180b883a 	mov	r5,r3
    135c:	e13fe615 	stw	r4,-104(fp)
    1360:	e17fe715 	stw	r5,-100(fp)
    1364:	d0a7eb17 	ldw	r2,-24660(gp)
    1368:	d127ec04 	addi	r4,gp,-24656
    136c:	20c00017 	ldw	r3,0(r4)
    1370:	1009883a 	mov	r4,r2
    1374:	180b883a 	mov	r5,r3
    1378:	e1bfd717 	ldw	r6,-164(fp)
    137c:	e1ffd817 	ldw	r7,-160(fp)
    1380:	00062bc0 	call	62bc <__muldf3>
    1384:	1009883a 	mov	r4,r2
    1388:	180b883a 	mov	r5,r3
    138c:	2029883a 	mov	r20,r4
    1390:	282b883a 	mov	r21,r5
    1394:	d0a7eb17 	ldw	r2,-24660(gp)
    1398:	d127ec04 	addi	r4,gp,-24656
    139c:	20c00017 	ldw	r3,0(r4)
    13a0:	1009883a 	mov	r4,r2
    13a4:	180b883a 	mov	r5,r3
    13a8:	e1bfd917 	ldw	r6,-156(fp)
    13ac:	e1ffda17 	ldw	r7,-152(fp)
    13b0:	00062bc0 	call	62bc <__muldf3>
    13b4:	1009883a 	mov	r4,r2
    13b8:	180b883a 	mov	r5,r3
    13bc:	2025883a 	mov	r18,r4
    13c0:	2827883a 	mov	r19,r5
    13c4:	e1000217 	ldw	r4,8(fp)
    13c8:	00073380 	call	7338 <__floatsidf>
    13cc:	1021883a 	mov	r16,r2
    13d0:	1823883a 	mov	r17,r3
    13d4:	e1000317 	ldw	r4,12(fp)
    13d8:	00073380 	call	7338 <__floatsidf>
    13dc:	1009883a 	mov	r4,r2
    13e0:	180b883a 	mov	r5,r3
    13e4:	e0bfe10f 	ldh	r2,-124(fp)
    13e8:	dd000015 	stw	r20,0(sp)
    13ec:	dd400115 	stw	r21,4(sp)
    13f0:	dc800215 	stw	r18,8(sp)
    13f4:	dcc00315 	stw	r19,12(sp)
    13f8:	dc000415 	stw	r16,16(sp)
    13fc:	dc400515 	stw	r17,20(sp)
    1400:	d9000615 	stw	r4,24(sp)
    1404:	d9400715 	stw	r5,28(sp)
    1408:	00c00044 	movi	r3,1
    140c:	d8c00815 	stw	r3,32(sp)
    1410:	00c00044 	movi	r3,1
    1414:	d8c00915 	stw	r3,36(sp)
    1418:	d8800a15 	stw	r2,40(sp)
    141c:	e13fe417 	ldw	r4,-112(fp)
    1420:	e17fe517 	ldw	r5,-108(fp)
    1424:	e1bfe617 	ldw	r6,-104(fp)
    1428:	e1ffe717 	ldw	r7,-100(fp)
    142c:	00003540 	call	354 <drawLine>

		}

		x1 = ((startx * cos(rotation[0] / 57.4) - starty * sin(rotation[0] / 57.4)) * (cos(rotation[1] / 57.4))) + startz * sin(rotation[1] / 57.4) ;
    1430:	e0bfdf17 	ldw	r2,-132(fp)
    1434:	10800017 	ldw	r2,0(r2)
    1438:	1009883a 	mov	r4,r2
    143c:	0004ddc0 	call	4ddc <__floatsisf>
    1440:	1007883a 	mov	r3,r2
    1444:	009099b4 	movhi	r2,16998
    1448:	10a66684 	addi	r2,r2,-26214
    144c:	1885fff2 	custom	255,r2,r3,r2
    1450:	1009883a 	mov	r4,r2
    1454:	00074080 	call	7408 <__extendsfdf2>
    1458:	100b883a 	mov	r5,r2
    145c:	180d883a 	mov	r6,r3
    1460:	2809883a 	mov	r4,r5
    1464:	300b883a 	mov	r5,r6
    1468:	0002ab40 	call	2ab4 <cos>
    146c:	100b883a 	mov	r5,r2
    1470:	180d883a 	mov	r6,r3
    1474:	2809883a 	mov	r4,r5
    1478:	300b883a 	mov	r5,r6
    147c:	e1bfc517 	ldw	r6,-236(fp)
    1480:	e1ffc617 	ldw	r7,-232(fp)
    1484:	00062bc0 	call	62bc <__muldf3>
    1488:	1009883a 	mov	r4,r2
    148c:	180b883a 	mov	r5,r3
    1490:	2021883a 	mov	r16,r4
    1494:	2823883a 	mov	r17,r5
    1498:	e0bfdf17 	ldw	r2,-132(fp)
    149c:	10800017 	ldw	r2,0(r2)
    14a0:	1009883a 	mov	r4,r2
    14a4:	0004ddc0 	call	4ddc <__floatsisf>
    14a8:	1007883a 	mov	r3,r2
    14ac:	009099b4 	movhi	r2,16998
    14b0:	10a66684 	addi	r2,r2,-26214
    14b4:	1885fff2 	custom	255,r2,r3,r2
    14b8:	1009883a 	mov	r4,r2
    14bc:	00074080 	call	7408 <__extendsfdf2>
    14c0:	100b883a 	mov	r5,r2
    14c4:	180d883a 	mov	r6,r3
    14c8:	2809883a 	mov	r4,r5
    14cc:	300b883a 	mov	r5,r6
    14d0:	0002ba00 	call	2ba0 <sin>
    14d4:	100b883a 	mov	r5,r2
    14d8:	180d883a 	mov	r6,r3
    14dc:	2809883a 	mov	r4,r5
    14e0:	300b883a 	mov	r5,r6
    14e4:	e1bfc717 	ldw	r6,-228(fp)
    14e8:	e1ffc817 	ldw	r7,-224(fp)
    14ec:	00062bc0 	call	62bc <__muldf3>
    14f0:	1009883a 	mov	r4,r2
    14f4:	180b883a 	mov	r5,r3
    14f8:	2005883a 	mov	r2,r4
    14fc:	2807883a 	mov	r3,r5
    1500:	8009883a 	mov	r4,r16
    1504:	880b883a 	mov	r5,r17
    1508:	100d883a 	mov	r6,r2
    150c:	180f883a 	mov	r7,r3
    1510:	00069e00 	call	69e0 <__subdf3>
    1514:	1009883a 	mov	r4,r2
    1518:	180b883a 	mov	r5,r3
    151c:	2021883a 	mov	r16,r4
    1520:	2823883a 	mov	r17,r5
    1524:	e0bfdf17 	ldw	r2,-132(fp)
    1528:	10800104 	addi	r2,r2,4
    152c:	10800017 	ldw	r2,0(r2)
    1530:	1009883a 	mov	r4,r2
    1534:	0004ddc0 	call	4ddc <__floatsisf>
    1538:	1007883a 	mov	r3,r2
    153c:	009099b4 	movhi	r2,16998
    1540:	10a66684 	addi	r2,r2,-26214
    1544:	1885fff2 	custom	255,r2,r3,r2
    1548:	1009883a 	mov	r4,r2
    154c:	00074080 	call	7408 <__extendsfdf2>
    1550:	100b883a 	mov	r5,r2
    1554:	180d883a 	mov	r6,r3
    1558:	2809883a 	mov	r4,r5
    155c:	300b883a 	mov	r5,r6
    1560:	0002ab40 	call	2ab4 <cos>
    1564:	100f883a 	mov	r7,r2
    1568:	1811883a 	mov	r8,r3
    156c:	8009883a 	mov	r4,r16
    1570:	880b883a 	mov	r5,r17
    1574:	380d883a 	mov	r6,r7
    1578:	400f883a 	mov	r7,r8
    157c:	00062bc0 	call	62bc <__muldf3>
    1580:	1009883a 	mov	r4,r2
    1584:	180b883a 	mov	r5,r3
    1588:	2021883a 	mov	r16,r4
    158c:	2823883a 	mov	r17,r5
    1590:	e0bfdf17 	ldw	r2,-132(fp)
    1594:	10800104 	addi	r2,r2,4
    1598:	10800017 	ldw	r2,0(r2)
    159c:	1009883a 	mov	r4,r2
    15a0:	0004ddc0 	call	4ddc <__floatsisf>
    15a4:	1007883a 	mov	r3,r2
    15a8:	009099b4 	movhi	r2,16998
    15ac:	10a66684 	addi	r2,r2,-26214
    15b0:	1885fff2 	custom	255,r2,r3,r2
    15b4:	1009883a 	mov	r4,r2
    15b8:	00074080 	call	7408 <__extendsfdf2>
    15bc:	100b883a 	mov	r5,r2
    15c0:	180d883a 	mov	r6,r3
    15c4:	2809883a 	mov	r4,r5
    15c8:	300b883a 	mov	r5,r6
    15cc:	0002ba00 	call	2ba0 <sin>
    15d0:	100b883a 	mov	r5,r2
    15d4:	180d883a 	mov	r6,r3
    15d8:	2809883a 	mov	r4,r5
    15dc:	300b883a 	mov	r5,r6
    15e0:	e1bfc917 	ldw	r6,-220(fp)
    15e4:	e1ffca17 	ldw	r7,-216(fp)
    15e8:	00062bc0 	call	62bc <__muldf3>
    15ec:	1009883a 	mov	r4,r2
    15f0:	180b883a 	mov	r5,r3
    15f4:	2005883a 	mov	r2,r4
    15f8:	2807883a 	mov	r3,r5
    15fc:	8009883a 	mov	r4,r16
    1600:	880b883a 	mov	r5,r17
    1604:	100d883a 	mov	r6,r2
    1608:	180f883a 	mov	r7,r3
    160c:	0004f100 	call	4f10 <__adddf3>
    1610:	1009883a 	mov	r4,r2
    1614:	180b883a 	mov	r5,r3
    1618:	e13fd115 	stw	r4,-188(fp)
    161c:	e17fd215 	stw	r5,-184(fp)
		x2 = ((endx * cos(rotation[0] / 57.4) - endy * sin(rotation[0] / 57.4))*(cos(rotation[1] / 57.4))) + endz * sin(rotation[1] / 57.4);
    1620:	e0bfdf17 	ldw	r2,-132(fp)
    1624:	10800017 	ldw	r2,0(r2)
    1628:	1009883a 	mov	r4,r2
    162c:	0004ddc0 	call	4ddc <__floatsisf>
    1630:	1007883a 	mov	r3,r2
    1634:	009099b4 	movhi	r2,16998
    1638:	10a66684 	addi	r2,r2,-26214
    163c:	1885fff2 	custom	255,r2,r3,r2
    1640:	1009883a 	mov	r4,r2
    1644:	00074080 	call	7408 <__extendsfdf2>
    1648:	100b883a 	mov	r5,r2
    164c:	180d883a 	mov	r6,r3
    1650:	2809883a 	mov	r4,r5
    1654:	300b883a 	mov	r5,r6
    1658:	0002ab40 	call	2ab4 <cos>
    165c:	100b883a 	mov	r5,r2
    1660:	180d883a 	mov	r6,r3
    1664:	2809883a 	mov	r4,r5
    1668:	300b883a 	mov	r5,r6
    166c:	e1bfcb17 	ldw	r6,-212(fp)
    1670:	e1ffcc17 	ldw	r7,-208(fp)
    1674:	00062bc0 	call	62bc <__muldf3>
    1678:	1009883a 	mov	r4,r2
    167c:	180b883a 	mov	r5,r3
    1680:	2021883a 	mov	r16,r4
    1684:	2823883a 	mov	r17,r5
    1688:	e0bfdf17 	ldw	r2,-132(fp)
    168c:	10800017 	ldw	r2,0(r2)
    1690:	1009883a 	mov	r4,r2
    1694:	0004ddc0 	call	4ddc <__floatsisf>
    1698:	1007883a 	mov	r3,r2
    169c:	009099b4 	movhi	r2,16998
    16a0:	10a66684 	addi	r2,r2,-26214
    16a4:	1885fff2 	custom	255,r2,r3,r2
    16a8:	1009883a 	mov	r4,r2
    16ac:	00074080 	call	7408 <__extendsfdf2>
    16b0:	100b883a 	mov	r5,r2
    16b4:	180d883a 	mov	r6,r3
    16b8:	2809883a 	mov	r4,r5
    16bc:	300b883a 	mov	r5,r6
    16c0:	0002ba00 	call	2ba0 <sin>
    16c4:	100b883a 	mov	r5,r2
    16c8:	180d883a 	mov	r6,r3
    16cc:	2809883a 	mov	r4,r5
    16d0:	300b883a 	mov	r5,r6
    16d4:	e1bfcd17 	ldw	r6,-204(fp)
    16d8:	e1ffce17 	ldw	r7,-200(fp)
    16dc:	00062bc0 	call	62bc <__muldf3>
    16e0:	1009883a 	mov	r4,r2
    16e4:	180b883a 	mov	r5,r3
    16e8:	2005883a 	mov	r2,r4
    16ec:	2807883a 	mov	r3,r5
    16f0:	8009883a 	mov	r4,r16
    16f4:	880b883a 	mov	r5,r17
    16f8:	100d883a 	mov	r6,r2
    16fc:	180f883a 	mov	r7,r3
    1700:	00069e00 	call	69e0 <__subdf3>
    1704:	1009883a 	mov	r4,r2
    1708:	180b883a 	mov	r5,r3
    170c:	2021883a 	mov	r16,r4
    1710:	2823883a 	mov	r17,r5
    1714:	e0bfdf17 	ldw	r2,-132(fp)
    1718:	10800104 	addi	r2,r2,4
    171c:	10800017 	ldw	r2,0(r2)
    1720:	1009883a 	mov	r4,r2
    1724:	0004ddc0 	call	4ddc <__floatsisf>
    1728:	1007883a 	mov	r3,r2
    172c:	009099b4 	movhi	r2,16998
    1730:	10a66684 	addi	r2,r2,-26214
    1734:	1885fff2 	custom	255,r2,r3,r2
    1738:	1009883a 	mov	r4,r2
    173c:	00074080 	call	7408 <__extendsfdf2>
    1740:	100b883a 	mov	r5,r2
    1744:	180d883a 	mov	r6,r3
    1748:	2809883a 	mov	r4,r5
    174c:	300b883a 	mov	r5,r6
    1750:	0002ab40 	call	2ab4 <cos>
    1754:	100f883a 	mov	r7,r2
    1758:	1811883a 	mov	r8,r3
    175c:	8009883a 	mov	r4,r16
    1760:	880b883a 	mov	r5,r17
    1764:	380d883a 	mov	r6,r7
    1768:	400f883a 	mov	r7,r8
    176c:	00062bc0 	call	62bc <__muldf3>
    1770:	1009883a 	mov	r4,r2
    1774:	180b883a 	mov	r5,r3
    1778:	2021883a 	mov	r16,r4
    177c:	2823883a 	mov	r17,r5
    1780:	e0bfdf17 	ldw	r2,-132(fp)
    1784:	10800104 	addi	r2,r2,4
    1788:	10800017 	ldw	r2,0(r2)
    178c:	1009883a 	mov	r4,r2
    1790:	0004ddc0 	call	4ddc <__floatsisf>
    1794:	1007883a 	mov	r3,r2
    1798:	009099b4 	movhi	r2,16998
    179c:	10a66684 	addi	r2,r2,-26214
    17a0:	1885fff2 	custom	255,r2,r3,r2
    17a4:	1009883a 	mov	r4,r2
    17a8:	00074080 	call	7408 <__extendsfdf2>
    17ac:	100b883a 	mov	r5,r2
    17b0:	180d883a 	mov	r6,r3
    17b4:	2809883a 	mov	r4,r5
    17b8:	300b883a 	mov	r5,r6
    17bc:	0002ba00 	call	2ba0 <sin>
    17c0:	100b883a 	mov	r5,r2
    17c4:	180d883a 	mov	r6,r3
    17c8:	2809883a 	mov	r4,r5
    17cc:	300b883a 	mov	r5,r6
    17d0:	e1bfcf17 	ldw	r6,-196(fp)
    17d4:	e1ffd017 	ldw	r7,-192(fp)
    17d8:	00062bc0 	call	62bc <__muldf3>
    17dc:	1009883a 	mov	r4,r2
    17e0:	180b883a 	mov	r5,r3
    17e4:	2005883a 	mov	r2,r4
    17e8:	2807883a 	mov	r3,r5
    17ec:	8009883a 	mov	r4,r16
    17f0:	880b883a 	mov	r5,r17
    17f4:	100d883a 	mov	r6,r2
    17f8:	180f883a 	mov	r7,r3
    17fc:	0004f100 	call	4f10 <__adddf3>
    1800:	1009883a 	mov	r4,r2
    1804:	180b883a 	mov	r5,r3
    1808:	e13fd715 	stw	r4,-164(fp)
    180c:	e17fd815 	stw	r5,-160(fp)

		z1 = ((-(startx * cos(rotation[0] / 57.4) - starty * sin(rotation[0] / 57.4))) *(sin(rotation[1] / 57.4)) + startz * cos(rotation[1] / 57.4));
    1810:	e0bfdf17 	ldw	r2,-132(fp)
    1814:	10800017 	ldw	r2,0(r2)
    1818:	1009883a 	mov	r4,r2
    181c:	0004ddc0 	call	4ddc <__floatsisf>
    1820:	1007883a 	mov	r3,r2
    1824:	009099b4 	movhi	r2,16998
    1828:	10a66684 	addi	r2,r2,-26214
    182c:	1885fff2 	custom	255,r2,r3,r2
    1830:	1009883a 	mov	r4,r2
    1834:	00074080 	call	7408 <__extendsfdf2>
    1838:	100b883a 	mov	r5,r2
    183c:	180d883a 	mov	r6,r3
    1840:	2809883a 	mov	r4,r5
    1844:	300b883a 	mov	r5,r6
    1848:	0002ab40 	call	2ab4 <cos>
    184c:	100b883a 	mov	r5,r2
    1850:	180d883a 	mov	r6,r3
    1854:	2809883a 	mov	r4,r5
    1858:	300b883a 	mov	r5,r6
    185c:	e1bfc517 	ldw	r6,-236(fp)
    1860:	e1ffc617 	ldw	r7,-232(fp)
    1864:	00062bc0 	call	62bc <__muldf3>
    1868:	1009883a 	mov	r4,r2
    186c:	180b883a 	mov	r5,r3
    1870:	2021883a 	mov	r16,r4
    1874:	2823883a 	mov	r17,r5
    1878:	e0bfdf17 	ldw	r2,-132(fp)
    187c:	10800017 	ldw	r2,0(r2)
    1880:	1009883a 	mov	r4,r2
    1884:	0004ddc0 	call	4ddc <__floatsisf>
    1888:	1007883a 	mov	r3,r2
    188c:	009099b4 	movhi	r2,16998
    1890:	10a66684 	addi	r2,r2,-26214
    1894:	1885fff2 	custom	255,r2,r3,r2
    1898:	1009883a 	mov	r4,r2
    189c:	00074080 	call	7408 <__extendsfdf2>
    18a0:	100b883a 	mov	r5,r2
    18a4:	180d883a 	mov	r6,r3
    18a8:	2809883a 	mov	r4,r5
    18ac:	300b883a 	mov	r5,r6
    18b0:	0002ba00 	call	2ba0 <sin>
    18b4:	100b883a 	mov	r5,r2
    18b8:	180d883a 	mov	r6,r3
    18bc:	2809883a 	mov	r4,r5
    18c0:	300b883a 	mov	r5,r6
    18c4:	e1bfc717 	ldw	r6,-228(fp)
    18c8:	e1ffc817 	ldw	r7,-224(fp)
    18cc:	00062bc0 	call	62bc <__muldf3>
    18d0:	1009883a 	mov	r4,r2
    18d4:	180b883a 	mov	r5,r3
    18d8:	2005883a 	mov	r2,r4
    18dc:	2807883a 	mov	r3,r5
    18e0:	8009883a 	mov	r4,r16
    18e4:	880b883a 	mov	r5,r17
    18e8:	100d883a 	mov	r6,r2
    18ec:	180f883a 	mov	r7,r3
    18f0:	00069e00 	call	69e0 <__subdf3>
    18f4:	1009883a 	mov	r4,r2
    18f8:	180b883a 	mov	r5,r3
    18fc:	2005883a 	mov	r2,r4
    1900:	2807883a 	mov	r3,r5
    1904:	e0bfe815 	stw	r2,-96(fp)
    1908:	1920003c 	xorhi	r4,r3,32768
    190c:	e13fe915 	stw	r4,-92(fp)
    1910:	e0bfdf17 	ldw	r2,-132(fp)
    1914:	10800104 	addi	r2,r2,4
    1918:	10800017 	ldw	r2,0(r2)
    191c:	1009883a 	mov	r4,r2
    1920:	0004ddc0 	call	4ddc <__floatsisf>
    1924:	1007883a 	mov	r3,r2
    1928:	009099b4 	movhi	r2,16998
    192c:	10a66684 	addi	r2,r2,-26214
    1930:	1885fff2 	custom	255,r2,r3,r2
    1934:	1009883a 	mov	r4,r2
    1938:	00074080 	call	7408 <__extendsfdf2>
    193c:	100b883a 	mov	r5,r2
    1940:	180d883a 	mov	r6,r3
    1944:	2809883a 	mov	r4,r5
    1948:	300b883a 	mov	r5,r6
    194c:	0002ba00 	call	2ba0 <sin>
    1950:	100f883a 	mov	r7,r2
    1954:	1811883a 	mov	r8,r3
    1958:	e13fe817 	ldw	r4,-96(fp)
    195c:	e17fe917 	ldw	r5,-92(fp)
    1960:	380d883a 	mov	r6,r7
    1964:	400f883a 	mov	r7,r8
    1968:	00062bc0 	call	62bc <__muldf3>
    196c:	1009883a 	mov	r4,r2
    1970:	180b883a 	mov	r5,r3
    1974:	2021883a 	mov	r16,r4
    1978:	2823883a 	mov	r17,r5
    197c:	e0bfdf17 	ldw	r2,-132(fp)
    1980:	10800104 	addi	r2,r2,4
    1984:	10800017 	ldw	r2,0(r2)
    1988:	1009883a 	mov	r4,r2
    198c:	0004ddc0 	call	4ddc <__floatsisf>
    1990:	1007883a 	mov	r3,r2
    1994:	009099b4 	movhi	r2,16998
    1998:	10a66684 	addi	r2,r2,-26214
    199c:	1885fff2 	custom	255,r2,r3,r2
    19a0:	1009883a 	mov	r4,r2
    19a4:	00074080 	call	7408 <__extendsfdf2>
    19a8:	100b883a 	mov	r5,r2
    19ac:	180d883a 	mov	r6,r3
    19b0:	2809883a 	mov	r4,r5
    19b4:	300b883a 	mov	r5,r6
    19b8:	0002ab40 	call	2ab4 <cos>
    19bc:	100b883a 	mov	r5,r2
    19c0:	180d883a 	mov	r6,r3
    19c4:	2809883a 	mov	r4,r5
    19c8:	300b883a 	mov	r5,r6
    19cc:	e1bfc917 	ldw	r6,-220(fp)
    19d0:	e1ffca17 	ldw	r7,-216(fp)
    19d4:	00062bc0 	call	62bc <__muldf3>
    19d8:	1009883a 	mov	r4,r2
    19dc:	180b883a 	mov	r5,r3
    19e0:	2005883a 	mov	r2,r4
    19e4:	2807883a 	mov	r3,r5
    19e8:	8009883a 	mov	r4,r16
    19ec:	880b883a 	mov	r5,r17
    19f0:	100d883a 	mov	r6,r2
    19f4:	180f883a 	mov	r7,r3
    19f8:	0004f100 	call	4f10 <__adddf3>
    19fc:	1009883a 	mov	r4,r2
    1a00:	180b883a 	mov	r5,r3
    1a04:	e13fd515 	stw	r4,-172(fp)
    1a08:	e17fd615 	stw	r5,-168(fp)
		z2 = ((-(endx * cos(rotation[0] / 57.4) - endy * sin(rotation[0] / 57.4))) * (sin(rotation[1] / 57.4)) + endz * cos(rotation[1] / 57.4));
    1a0c:	e0bfdf17 	ldw	r2,-132(fp)
    1a10:	10800017 	ldw	r2,0(r2)
    1a14:	1009883a 	mov	r4,r2
    1a18:	0004ddc0 	call	4ddc <__floatsisf>
    1a1c:	1007883a 	mov	r3,r2
    1a20:	009099b4 	movhi	r2,16998
    1a24:	10a66684 	addi	r2,r2,-26214
    1a28:	1885fff2 	custom	255,r2,r3,r2
    1a2c:	1009883a 	mov	r4,r2
    1a30:	00074080 	call	7408 <__extendsfdf2>
    1a34:	100b883a 	mov	r5,r2
    1a38:	180d883a 	mov	r6,r3
    1a3c:	2809883a 	mov	r4,r5
    1a40:	300b883a 	mov	r5,r6
    1a44:	0002ab40 	call	2ab4 <cos>
    1a48:	100b883a 	mov	r5,r2
    1a4c:	180d883a 	mov	r6,r3
    1a50:	2809883a 	mov	r4,r5
    1a54:	300b883a 	mov	r5,r6
    1a58:	e1bfcb17 	ldw	r6,-212(fp)
    1a5c:	e1ffcc17 	ldw	r7,-208(fp)
    1a60:	00062bc0 	call	62bc <__muldf3>
    1a64:	1009883a 	mov	r4,r2
    1a68:	180b883a 	mov	r5,r3
    1a6c:	2021883a 	mov	r16,r4
    1a70:	2823883a 	mov	r17,r5
    1a74:	e0bfdf17 	ldw	r2,-132(fp)
    1a78:	10800017 	ldw	r2,0(r2)
    1a7c:	1009883a 	mov	r4,r2
    1a80:	0004ddc0 	call	4ddc <__floatsisf>
    1a84:	1007883a 	mov	r3,r2
    1a88:	009099b4 	movhi	r2,16998
    1a8c:	10a66684 	addi	r2,r2,-26214
    1a90:	1885fff2 	custom	255,r2,r3,r2
    1a94:	1009883a 	mov	r4,r2
    1a98:	00074080 	call	7408 <__extendsfdf2>
    1a9c:	100b883a 	mov	r5,r2
    1aa0:	180d883a 	mov	r6,r3
    1aa4:	2809883a 	mov	r4,r5
    1aa8:	300b883a 	mov	r5,r6
    1aac:	0002ba00 	call	2ba0 <sin>
    1ab0:	100b883a 	mov	r5,r2
    1ab4:	180d883a 	mov	r6,r3
    1ab8:	2809883a 	mov	r4,r5
    1abc:	300b883a 	mov	r5,r6
    1ac0:	e1bfcd17 	ldw	r6,-204(fp)
    1ac4:	e1ffce17 	ldw	r7,-200(fp)
    1ac8:	00062bc0 	call	62bc <__muldf3>
    1acc:	1009883a 	mov	r4,r2
    1ad0:	180b883a 	mov	r5,r3
    1ad4:	2005883a 	mov	r2,r4
    1ad8:	2807883a 	mov	r3,r5
    1adc:	8009883a 	mov	r4,r16
    1ae0:	880b883a 	mov	r5,r17
    1ae4:	100d883a 	mov	r6,r2
    1ae8:	180f883a 	mov	r7,r3
    1aec:	00069e00 	call	69e0 <__subdf3>
    1af0:	1009883a 	mov	r4,r2
    1af4:	180b883a 	mov	r5,r3
    1af8:	2005883a 	mov	r2,r4
    1afc:	2807883a 	mov	r3,r5
    1b00:	e0bfea15 	stw	r2,-88(fp)
    1b04:	1920003c 	xorhi	r4,r3,32768
    1b08:	e13feb15 	stw	r4,-84(fp)
    1b0c:	e0bfdf17 	ldw	r2,-132(fp)
    1b10:	10800104 	addi	r2,r2,4
    1b14:	10800017 	ldw	r2,0(r2)
    1b18:	1009883a 	mov	r4,r2
    1b1c:	0004ddc0 	call	4ddc <__floatsisf>
    1b20:	1007883a 	mov	r3,r2
    1b24:	009099b4 	movhi	r2,16998
    1b28:	10a66684 	addi	r2,r2,-26214
    1b2c:	1885fff2 	custom	255,r2,r3,r2
    1b30:	1009883a 	mov	r4,r2
    1b34:	00074080 	call	7408 <__extendsfdf2>
    1b38:	100b883a 	mov	r5,r2
    1b3c:	180d883a 	mov	r6,r3
    1b40:	2809883a 	mov	r4,r5
    1b44:	300b883a 	mov	r5,r6
    1b48:	0002ba00 	call	2ba0 <sin>
    1b4c:	100f883a 	mov	r7,r2
    1b50:	1811883a 	mov	r8,r3
    1b54:	e13fea17 	ldw	r4,-88(fp)
    1b58:	e17feb17 	ldw	r5,-84(fp)
    1b5c:	380d883a 	mov	r6,r7
    1b60:	400f883a 	mov	r7,r8
    1b64:	00062bc0 	call	62bc <__muldf3>
    1b68:	1009883a 	mov	r4,r2
    1b6c:	180b883a 	mov	r5,r3
    1b70:	2021883a 	mov	r16,r4
    1b74:	2823883a 	mov	r17,r5
    1b78:	e0bfdf17 	ldw	r2,-132(fp)
    1b7c:	10800104 	addi	r2,r2,4
    1b80:	10800017 	ldw	r2,0(r2)
    1b84:	1009883a 	mov	r4,r2
    1b88:	0004ddc0 	call	4ddc <__floatsisf>
    1b8c:	1007883a 	mov	r3,r2
    1b90:	009099b4 	movhi	r2,16998
    1b94:	10a66684 	addi	r2,r2,-26214
    1b98:	1885fff2 	custom	255,r2,r3,r2
    1b9c:	1009883a 	mov	r4,r2
    1ba0:	00074080 	call	7408 <__extendsfdf2>
    1ba4:	100b883a 	mov	r5,r2
    1ba8:	180d883a 	mov	r6,r3
    1bac:	2809883a 	mov	r4,r5
    1bb0:	300b883a 	mov	r5,r6
    1bb4:	0002ab40 	call	2ab4 <cos>
    1bb8:	100b883a 	mov	r5,r2
    1bbc:	180d883a 	mov	r6,r3
    1bc0:	2809883a 	mov	r4,r5
    1bc4:	300b883a 	mov	r5,r6
    1bc8:	e1bfcf17 	ldw	r6,-196(fp)
    1bcc:	e1ffd017 	ldw	r7,-192(fp)
    1bd0:	00062bc0 	call	62bc <__muldf3>
    1bd4:	1009883a 	mov	r4,r2
    1bd8:	180b883a 	mov	r5,r3
    1bdc:	2005883a 	mov	r2,r4
    1be0:	2807883a 	mov	r3,r5
    1be4:	8009883a 	mov	r4,r16
    1be8:	880b883a 	mov	r5,r17
    1bec:	100d883a 	mov	r6,r2
    1bf0:	180f883a 	mov	r7,r3
    1bf4:	0004f100 	call	4f10 <__adddf3>
    1bf8:	1009883a 	mov	r4,r2
    1bfc:	180b883a 	mov	r5,r3
    1c00:	e13fdb15 	stw	r4,-148(fp)
    1c04:	e17fdc15 	stw	r5,-144(fp)

		y1 = z1;
    1c08:	e0bfd517 	ldw	r2,-172(fp)
    1c0c:	e0bfd315 	stw	r2,-180(fp)
    1c10:	e0bfd617 	ldw	r2,-168(fp)
    1c14:	e0bfd415 	stw	r2,-176(fp)
		y2 = z2;
    1c18:	e0bfdb17 	ldw	r2,-148(fp)
    1c1c:	e0bfd915 	stw	r2,-156(fp)
    1c20:	e0bfdc17 	ldw	r2,-144(fp)
    1c24:	e0bfda15 	stw	r2,-152(fp)

		if (zoomscreen != prevousZoomScreenBR)
    1c28:	d0a7eb17 	ldw	r2,-24660(gp)
    1c2c:	d127ec04 	addi	r4,gp,-24656
    1c30:	20c00017 	ldw	r3,0(r4)
    1c34:	e13fdd17 	ldw	r4,-140(fp)
    1c38:	e17fde17 	ldw	r5,-136(fp)
    1c3c:	100d883a 	mov	r6,r2
    1c40:	180f883a 	mov	r7,r3
    1c44:	00060780 	call	6078 <__eqdf2>
    1c48:	10008a26 	beq	r2,zero,1e74 <drawNodesAndBeams+0x14c8>
		{
			drawLine((x1 * prevousZoomScreenBR), (y1 * prevousZoomScreenBR), (x2 * prevousZoomScreenBR), (y2 * prevousZoomScreenBR), midX, midY, 1 , 1, color);
    1c4c:	d0a7eb17 	ldw	r2,-24660(gp)
    1c50:	d127ec04 	addi	r4,gp,-24656
    1c54:	20c00017 	ldw	r3,0(r4)
    1c58:	1009883a 	mov	r4,r2
    1c5c:	180b883a 	mov	r5,r3
    1c60:	e1bfd117 	ldw	r6,-188(fp)
    1c64:	e1ffd217 	ldw	r7,-184(fp)
    1c68:	00062bc0 	call	62bc <__muldf3>
    1c6c:	1009883a 	mov	r4,r2
    1c70:	180b883a 	mov	r5,r3
    1c74:	e13fec15 	stw	r4,-80(fp)
    1c78:	e17fed15 	stw	r5,-76(fp)
    1c7c:	d0a7eb17 	ldw	r2,-24660(gp)
    1c80:	d127ec04 	addi	r4,gp,-24656
    1c84:	20c00017 	ldw	r3,0(r4)
    1c88:	1009883a 	mov	r4,r2
    1c8c:	180b883a 	mov	r5,r3
    1c90:	e1bfd317 	ldw	r6,-180(fp)
    1c94:	e1ffd417 	ldw	r7,-176(fp)
    1c98:	00062bc0 	call	62bc <__muldf3>
    1c9c:	1009883a 	mov	r4,r2
    1ca0:	180b883a 	mov	r5,r3
    1ca4:	e13fee15 	stw	r4,-72(fp)
    1ca8:	e17fef15 	stw	r5,-68(fp)
    1cac:	d0a7eb17 	ldw	r2,-24660(gp)
    1cb0:	d127ec04 	addi	r4,gp,-24656
    1cb4:	20c00017 	ldw	r3,0(r4)
    1cb8:	1009883a 	mov	r4,r2
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	e1bfd717 	ldw	r6,-164(fp)
    1cc4:	e1ffd817 	ldw	r7,-160(fp)
    1cc8:	00062bc0 	call	62bc <__muldf3>
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	180b883a 	mov	r5,r3
    1cd4:	2029883a 	mov	r20,r4
    1cd8:	282b883a 	mov	r21,r5
    1cdc:	d0a7eb17 	ldw	r2,-24660(gp)
    1ce0:	d127ec04 	addi	r4,gp,-24656
    1ce4:	20c00017 	ldw	r3,0(r4)
    1ce8:	1009883a 	mov	r4,r2
    1cec:	180b883a 	mov	r5,r3
    1cf0:	e1bfd917 	ldw	r6,-156(fp)
    1cf4:	e1ffda17 	ldw	r7,-152(fp)
    1cf8:	00062bc0 	call	62bc <__muldf3>
    1cfc:	1009883a 	mov	r4,r2
    1d00:	180b883a 	mov	r5,r3
    1d04:	2025883a 	mov	r18,r4
    1d08:	2827883a 	mov	r19,r5
    1d0c:	e1000217 	ldw	r4,8(fp)
    1d10:	00073380 	call	7338 <__floatsidf>
    1d14:	1021883a 	mov	r16,r2
    1d18:	1823883a 	mov	r17,r3
    1d1c:	e1000317 	ldw	r4,12(fp)
    1d20:	00073380 	call	7338 <__floatsidf>
    1d24:	1009883a 	mov	r4,r2
    1d28:	180b883a 	mov	r5,r3
    1d2c:	e0bfe10f 	ldh	r2,-124(fp)
    1d30:	dd000015 	stw	r20,0(sp)
    1d34:	dd400115 	stw	r21,4(sp)
    1d38:	dc800215 	stw	r18,8(sp)
    1d3c:	dcc00315 	stw	r19,12(sp)
    1d40:	dc000415 	stw	r16,16(sp)
    1d44:	dc400515 	stw	r17,20(sp)
    1d48:	d9000615 	stw	r4,24(sp)
    1d4c:	d9400715 	stw	r5,28(sp)
    1d50:	00c00044 	movi	r3,1
    1d54:	d8c00815 	stw	r3,32(sp)
    1d58:	00c00044 	movi	r3,1
    1d5c:	d8c00915 	stw	r3,36(sp)
    1d60:	d8800a15 	stw	r2,40(sp)
    1d64:	e13fec17 	ldw	r4,-80(fp)
    1d68:	e17fed17 	ldw	r5,-76(fp)
    1d6c:	e1bfee17 	ldw	r6,-72(fp)
    1d70:	e1ffef17 	ldw	r7,-68(fp)
    1d74:	00003540 	call	354 <drawLine>

			drawLine((x1 * zoomscreen), (y1 * zoomscreen), (x2 * zoomscreen), (y2 * zoomscreen),midX, midY, 1 , 0, color);
    1d78:	e13fd117 	ldw	r4,-188(fp)
    1d7c:	e17fd217 	ldw	r5,-184(fp)
    1d80:	e1bfdd17 	ldw	r6,-140(fp)
    1d84:	e1ffde17 	ldw	r7,-136(fp)
    1d88:	00062bc0 	call	62bc <__muldf3>
    1d8c:	1009883a 	mov	r4,r2
    1d90:	180b883a 	mov	r5,r3
    1d94:	e13ff015 	stw	r4,-64(fp)
    1d98:	e17ff115 	stw	r5,-60(fp)
    1d9c:	e13fd317 	ldw	r4,-180(fp)
    1da0:	e17fd417 	ldw	r5,-176(fp)
    1da4:	e1bfdd17 	ldw	r6,-140(fp)
    1da8:	e1ffde17 	ldw	r7,-136(fp)
    1dac:	00062bc0 	call	62bc <__muldf3>
    1db0:	1009883a 	mov	r4,r2
    1db4:	180b883a 	mov	r5,r3
    1db8:	e13ff215 	stw	r4,-56(fp)
    1dbc:	e17ff315 	stw	r5,-52(fp)
    1dc0:	e13fd717 	ldw	r4,-164(fp)
    1dc4:	e17fd817 	ldw	r5,-160(fp)
    1dc8:	e1bfdd17 	ldw	r6,-140(fp)
    1dcc:	e1ffde17 	ldw	r7,-136(fp)
    1dd0:	00062bc0 	call	62bc <__muldf3>
    1dd4:	1009883a 	mov	r4,r2
    1dd8:	180b883a 	mov	r5,r3
    1ddc:	2029883a 	mov	r20,r4
    1de0:	282b883a 	mov	r21,r5
    1de4:	e13fd917 	ldw	r4,-156(fp)
    1de8:	e17fda17 	ldw	r5,-152(fp)
    1dec:	e1bfdd17 	ldw	r6,-140(fp)
    1df0:	e1ffde17 	ldw	r7,-136(fp)
    1df4:	00062bc0 	call	62bc <__muldf3>
    1df8:	1009883a 	mov	r4,r2
    1dfc:	180b883a 	mov	r5,r3
    1e00:	2025883a 	mov	r18,r4
    1e04:	2827883a 	mov	r19,r5
    1e08:	e1000217 	ldw	r4,8(fp)
    1e0c:	00073380 	call	7338 <__floatsidf>
    1e10:	1021883a 	mov	r16,r2
    1e14:	1823883a 	mov	r17,r3
    1e18:	e1000317 	ldw	r4,12(fp)
    1e1c:	00073380 	call	7338 <__floatsidf>
    1e20:	1009883a 	mov	r4,r2
    1e24:	180b883a 	mov	r5,r3
    1e28:	e0bfe10f 	ldh	r2,-124(fp)
    1e2c:	dd000015 	stw	r20,0(sp)
    1e30:	dd400115 	stw	r21,4(sp)
    1e34:	dc800215 	stw	r18,8(sp)
    1e38:	dcc00315 	stw	r19,12(sp)
    1e3c:	dc000415 	stw	r16,16(sp)
    1e40:	dc400515 	stw	r17,20(sp)
    1e44:	d9000615 	stw	r4,24(sp)
    1e48:	d9400715 	stw	r5,28(sp)
    1e4c:	00c00044 	movi	r3,1
    1e50:	d8c00815 	stw	r3,32(sp)
    1e54:	d8000915 	stw	zero,36(sp)
    1e58:	d8800a15 	stw	r2,40(sp)
    1e5c:	e13ff017 	ldw	r4,-64(fp)
    1e60:	e17ff117 	ldw	r5,-60(fp)
    1e64:	e1bff217 	ldw	r6,-56(fp)
    1e68:	e1fff317 	ldw	r7,-52(fp)
    1e6c:	00003540 	call	354 <drawLine>
    1e70:	00003e06 	br	1f6c <drawNodesAndBeams+0x15c0>

		}
		else
		{
			drawLine((x1 * zoomscreen), (y1 * zoomscreen), (x2 * zoomscreen), (y2 * zoomscreen), midX, midY, 1 , 0, color);
    1e74:	e13fd117 	ldw	r4,-188(fp)
    1e78:	e17fd217 	ldw	r5,-184(fp)
    1e7c:	e1bfdd17 	ldw	r6,-140(fp)
    1e80:	e1ffde17 	ldw	r7,-136(fp)
    1e84:	00062bc0 	call	62bc <__muldf3>
    1e88:	1009883a 	mov	r4,r2
    1e8c:	180b883a 	mov	r5,r3
    1e90:	e13ff415 	stw	r4,-48(fp)
    1e94:	e17ff515 	stw	r5,-44(fp)
    1e98:	e13fd317 	ldw	r4,-180(fp)
    1e9c:	e17fd417 	ldw	r5,-176(fp)
    1ea0:	e1bfdd17 	ldw	r6,-140(fp)
    1ea4:	e1ffde17 	ldw	r7,-136(fp)
    1ea8:	00062bc0 	call	62bc <__muldf3>
    1eac:	1009883a 	mov	r4,r2
    1eb0:	180b883a 	mov	r5,r3
    1eb4:	e13ff615 	stw	r4,-40(fp)
    1eb8:	e17ff715 	stw	r5,-36(fp)
    1ebc:	e13fd717 	ldw	r4,-164(fp)
    1ec0:	e17fd817 	ldw	r5,-160(fp)
    1ec4:	e1bfdd17 	ldw	r6,-140(fp)
    1ec8:	e1ffde17 	ldw	r7,-136(fp)
    1ecc:	00062bc0 	call	62bc <__muldf3>
    1ed0:	1009883a 	mov	r4,r2
    1ed4:	180b883a 	mov	r5,r3
    1ed8:	2029883a 	mov	r20,r4
    1edc:	282b883a 	mov	r21,r5
    1ee0:	e13fd917 	ldw	r4,-156(fp)
    1ee4:	e17fda17 	ldw	r5,-152(fp)
    1ee8:	e1bfdd17 	ldw	r6,-140(fp)
    1eec:	e1ffde17 	ldw	r7,-136(fp)
    1ef0:	00062bc0 	call	62bc <__muldf3>
    1ef4:	1009883a 	mov	r4,r2
    1ef8:	180b883a 	mov	r5,r3
    1efc:	2025883a 	mov	r18,r4
    1f00:	2827883a 	mov	r19,r5
    1f04:	e1000217 	ldw	r4,8(fp)
    1f08:	00073380 	call	7338 <__floatsidf>
    1f0c:	1021883a 	mov	r16,r2
    1f10:	1823883a 	mov	r17,r3
    1f14:	e1000317 	ldw	r4,12(fp)
    1f18:	00073380 	call	7338 <__floatsidf>
    1f1c:	1009883a 	mov	r4,r2
    1f20:	180b883a 	mov	r5,r3
    1f24:	e0bfe10f 	ldh	r2,-124(fp)
    1f28:	dd000015 	stw	r20,0(sp)
    1f2c:	dd400115 	stw	r21,4(sp)
    1f30:	dc800215 	stw	r18,8(sp)
    1f34:	dcc00315 	stw	r19,12(sp)
    1f38:	dc000415 	stw	r16,16(sp)
    1f3c:	dc400515 	stw	r17,20(sp)
    1f40:	d9000615 	stw	r4,24(sp)
    1f44:	d9400715 	stw	r5,28(sp)
    1f48:	00c00044 	movi	r3,1
    1f4c:	d8c00815 	stw	r3,32(sp)
    1f50:	d8000915 	stw	zero,36(sp)
    1f54:	d8800a15 	stw	r2,40(sp)
    1f58:	e13ff417 	ldw	r4,-48(fp)
    1f5c:	e17ff517 	ldw	r5,-44(fp)
    1f60:	e1bff617 	ldw	r6,-40(fp)
    1f64:	e1fff717 	ldw	r7,-36(fp)
    1f68:	00003540 	call	354 <drawLine>
	double startz = 0;
	double endx = 0;
	double endy = 0;
	double endz = 0;

	for (linesDrawn = 0; linesDrawn < 8; linesDrawn++)
    1f6c:	e0bfc417 	ldw	r2,-240(fp)
    1f70:	10800044 	addi	r2,r2,1
    1f74:	e0bfc415 	stw	r2,-240(fp)
    1f78:	e0bfc417 	ldw	r2,-240(fp)
    1f7c:	10800210 	cmplti	r2,r2,8
    1f80:	103aaa1e 	bne	r2,zero,a2c <__alt_mem_Flash_flash_data+0xf4000a2c>
		}

	}


	if (zoomscreen != prevousZoomScreenBR)
    1f84:	d0a7eb17 	ldw	r2,-24660(gp)
    1f88:	d127ec04 	addi	r4,gp,-24656
    1f8c:	20c00017 	ldw	r3,0(r4)
    1f90:	e13fdd17 	ldw	r4,-140(fp)
    1f94:	e17fde17 	ldw	r5,-136(fp)
    1f98:	100d883a 	mov	r6,r2
    1f9c:	180f883a 	mov	r7,r3
    1fa0:	00060780 	call	6078 <__eqdf2>
    1fa4:	10000526 	beq	r2,zero,1fbc <drawNodesAndBeams+0x1610>
	{
		prevousZoomScreenBR = zoomscreen;
    1fa8:	e0bfdd17 	ldw	r2,-140(fp)
    1fac:	d0a7eb15 	stw	r2,-24660(gp)
    1fb0:	d0a7ec04 	addi	r2,gp,-24656
    1fb4:	e0ffde17 	ldw	r3,-136(fp)
    1fb8:	10c00015 	stw	r3,0(r2)
	}
	previousXRotation = rotation[0];
    1fbc:	e0bfdf17 	ldw	r2,-132(fp)
    1fc0:	10800017 	ldw	r2,0(r2)
    1fc4:	d0a7ed15 	stw	r2,-24652(gp)
	previousYRotation = rotation[1];
    1fc8:	e0bfdf17 	ldw	r2,-132(fp)
    1fcc:	10800117 	ldw	r2,4(r2)
    1fd0:	d0a7ee15 	stw	r2,-24648(gp)
}
    1fd4:	e6fff804 	addi	sp,fp,-32
    1fd8:	dfc00917 	ldw	ra,36(sp)
    1fdc:	df000817 	ldw	fp,32(sp)
    1fe0:	ddc00717 	ldw	r23,28(sp)
    1fe4:	dd800617 	ldw	r22,24(sp)
    1fe8:	dd400517 	ldw	r21,20(sp)
    1fec:	dd000417 	ldw	r20,16(sp)
    1ff0:	dcc00317 	ldw	r19,12(sp)
    1ff4:	dc800217 	ldw	r18,8(sp)
    1ff8:	dc400117 	ldw	r17,4(sp)
    1ffc:	dc000017 	ldw	r16,0(sp)
    2000:	dec00a04 	addi	sp,sp,40
    2004:	f800283a 	ret

00002008 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
    2008:	defffe04 	addi	sp,sp,-8
    200c:	dfc00115 	stw	ra,4(sp)
    2010:	df000015 	stw	fp,0(sp)
    2014:	d839883a 	mov	fp,sp
    2018:	023ff0f4 	movhi	r8,65475
    201c:	423d2804 	addi	r8,r8,-2912
    2020:	da37883a 	add	sp,sp,r8
	/* Declare volatile pointers to I/O registers (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile int * green_LED_ptr = (int *) 0x10000010;		// green LED address
    2024:	00840034 	movhi	r2,4096
    2028:	10800404 	addi	r2,r2,16
    202c:	00fff0f4 	movhi	r3,65475
    2030:	18fd2f04 	addi	r3,r3,-2884
    2034:	1f07883a 	add	r3,r3,fp
    2038:	18800015 	stw	r2,0(r3)
	volatile int * audio_ptr = (int *) 0x10003040;			// audio port address
    203c:	00840034 	movhi	r2,4096
    2040:	108c1004 	addi	r2,r2,12352
    2044:	013ff0f4 	movhi	r4,65475
    2048:	213d3004 	addi	r4,r4,-2880
    204c:	2709883a 	add	r4,r4,fp
    2050:	20800015 	stw	r2,0(r4)
	volatile int * PS2_ptr = (int *) 0x10000100;				// PS/2 port address
    2054:	00840034 	movhi	r2,4096
    2058:	10804004 	addi	r2,r2,256
    205c:	00fff0f4 	movhi	r3,65475
    2060:	18fd3104 	addi	r3,r3,-2876
    2064:	1f07883a 	add	r3,r3,fp
    2068:	18800015 	stw	r2,0(r3)

	/* used for audio record/playback */
	int fifospace, leftdata, rightdata;
	int record = 0, play = 0, buffer_index = 0;
    206c:	013ff0f4 	movhi	r4,65475
    2070:	213d3204 	addi	r4,r4,-2872
    2074:	2709883a 	add	r4,r4,fp
    2078:	20000015 	stw	zero,0(r4)
    207c:	00bff0f4 	movhi	r2,65475
    2080:	10bd3304 	addi	r2,r2,-2868
    2084:	1705883a 	add	r2,r2,fp
    2088:	10000015 	stw	zero,0(r2)
    208c:	00fff0f4 	movhi	r3,65475
    2090:	18fd3404 	addi	r3,r3,-2864
    2094:	1f07883a 	add	r3,r3,fp
    2098:	18000015 	stw	zero,0(r3)
	int left_buffer[BUF_SIZE];
	int right_buffer[BUF_SIZE];

	/* used for PS/2 port data */
	int PS2_data, RVALID;
	char byte1 = 0, byte2 = 0, byte3 = 0;
    209c:	013ff0f4 	movhi	r4,65475
    20a0:	213d3504 	addi	r4,r4,-2860
    20a4:	2709883a 	add	r4,r4,fp
    20a8:	20000005 	stb	zero,0(r4)
    20ac:	00bff0f4 	movhi	r2,65475
    20b0:	10bd3544 	addi	r2,r2,-2859
    20b4:	1705883a 	add	r2,r2,fp
    20b8:	10000005 	stb	zero,0(r2)
    20bc:	00fff0f4 	movhi	r3,65475
    20c0:	18fd3584 	addi	r3,r3,-2858
    20c4:	1f07883a 	add	r3,r3,fp
    20c8:	18000005 	stb	zero,0(r3)
	/* create a message to be displayed on the VGA and LCD displays */




	double startEndNodes[8][2][3] = {	{{0,100,0},{100,0,100}},
    20cc:	00800f74 	movhi	r2,61
    20d0:	10824b04 	addi	r2,r2,2348
    20d4:	013ff0f4 	movhi	r4,65475
    20d8:	213d2b04 	addi	r4,r4,-2900
    20dc:	2709883a 	add	r4,r4,fp
    20e0:	2087883a 	add	r3,r4,r2
    20e4:	008000b4 	movhi	r2,2
    20e8:	10adbc04 	addi	r2,r2,-18704
    20ec:	1809883a 	mov	r4,r3
    20f0:	1007883a 	mov	r3,r2
    20f4:	00806004 	movi	r2,384
    20f8:	180b883a 	mov	r5,r3
    20fc:	100d883a 	mov	r6,r2
    2100:	000757c0 	call	757c <memcpy>
	//LCD_cursor (0,1);										// set LCD cursor location to bottom row
	//LCD_text (text_bottom_row);
	//LCD_cursor_off ();									// turn off the LCD cursor

	/* output text message in the middle of the VGA monitor */
	VGA_box (0, 0, 319, 239, 0);						// clear the screen
    2104:	d8000015 	stw	zero,0(sp)
    2108:	0009883a 	mov	r4,zero
    210c:	000b883a 	mov	r5,zero
    2110:	01804fc4 	movi	r6,319
    2114:	01c03bc4 	movi	r7,239
    2118:	00027e40 	call	27e4 <VGA_box>
	//VGA_box (0, 0, 320, 240, 0x00FF);

	//VGA_text (1, 1, text_top_row);
	/* read and echo audio data */
	record = 0;
    211c:	00bff0f4 	movhi	r2,65475
    2120:	10bd3204 	addi	r2,r2,-2872
    2124:	1705883a 	add	r2,r2,fp
    2128:	10000015 	stw	zero,0(r2)
	play = 0;
    212c:	00fff0f4 	movhi	r3,65475
    2130:	18fd3304 	addi	r3,r3,-2868
    2134:	1f07883a 	add	r3,r3,fp
    2138:	18000015 	stw	zero,0(r3)

	// PS/2 mouse needs to be reset (must be already plugged in)
	*(PS2_ptr) = 0xFF;		// reset
    213c:	013ff0f4 	movhi	r4,65475
    2140:	213d3104 	addi	r4,r4,-2876
    2144:	2709883a 	add	r4,r4,fp
    2148:	20800017 	ldw	r2,0(r4)
    214c:	00c03fc4 	movi	r3,255
    2150:	10c00015 	stw	r3,0(r2)

	//volatile int * JTAG_UART_ptr 	= (int *) JTAG_UART_BASE;



	int rotation[2] = {90,0};
    2154:	00800f74 	movhi	r2,61
    2158:	1082ab04 	addi	r2,r2,2732
    215c:	00fff0f4 	movhi	r3,65475
    2160:	18fd2b04 	addi	r3,r3,-2900
    2164:	1f07883a 	add	r3,r3,fp
    2168:	1885883a 	add	r2,r3,r2
    216c:	00c01684 	movi	r3,90
    2170:	10c00015 	stw	r3,0(r2)
    2174:	00800f74 	movhi	r2,61
    2178:	1082ab04 	addi	r2,r2,2732
    217c:	013ff0f4 	movhi	r4,65475
    2180:	213d2b04 	addi	r4,r4,-2900
    2184:	2709883a 	add	r4,r4,fp
    2188:	2085883a 	add	r2,r4,r2
    218c:	10000115 	stw	zero,4(r2)

	int xRotate = 0;
    2190:	00bff0f4 	movhi	r2,65475
    2194:	10bd2b04 	addi	r2,r2,-2900
    2198:	1705883a 	add	r2,r2,fp
    219c:	10000015 	stw	zero,0(r2)
	int yRotate = 50;
    21a0:	00800c84 	movi	r2,50
    21a4:	00fff0f4 	movhi	r3,65475
    21a8:	18fd2c04 	addi	r3,r3,-2896
    21ac:	1f07883a 	add	r3,r3,fp
    21b0:	18800015 	stw	r2,0(r3)
	double zoom = 50;
    21b4:	013ff0f4 	movhi	r4,65475
    21b8:	213d2d04 	addi	r4,r4,-2892
    21bc:	2709883a 	add	r4,r4,fp
    21c0:	20000015 	stw	zero,0(r4)
    21c4:	00901274 	movhi	r2,16457
    21c8:	00fff0f4 	movhi	r3,65475
    21cc:	18fd2e04 	addi	r3,r3,-2888
    21d0:	1f07883a 	add	r3,r3,fp
    21d4:	18800015 	stw	r2,0(r3)
	while(1)
	{
			if(xRotate > 359){
    21d8:	013ff0f4 	movhi	r4,65475
    21dc:	213d2b04 	addi	r4,r4,-2900
    21e0:	2709883a 	add	r4,r4,fp
    21e4:	20800017 	ldw	r2,0(r4)
    21e8:	10805a10 	cmplti	r2,r2,360
    21ec:	1000041e 	bne	r2,zero,2200 <main+0x1f8>
				xRotate = 0;
    21f0:	00bff0f4 	movhi	r2,65475
    21f4:	10bd2b04 	addi	r2,r2,-2900
    21f8:	1705883a 	add	r2,r2,fp
    21fc:	10000015 	stw	zero,0(r2)
			}

			if(yRotate > 359){
    2200:	00fff0f4 	movhi	r3,65475
    2204:	18fd2c04 	addi	r3,r3,-2896
    2208:	1f07883a 	add	r3,r3,fp
    220c:	18800017 	ldw	r2,0(r3)
    2210:	10805a10 	cmplti	r2,r2,360
    2214:	1000041e 	bne	r2,zero,2228 <main+0x220>
				yRotate = 0;
    2218:	013ff0f4 	movhi	r4,65475
    221c:	213d2c04 	addi	r4,r4,-2896
    2220:	2709883a 	add	r4,r4,fp
    2224:	20000015 	stw	zero,0(r4)
			}

			if(zoom == 80){
    2228:	00bff0f4 	movhi	r2,65475
    222c:	10bd2d04 	addi	r2,r2,-2892
    2230:	1705883a 	add	r2,r2,fp
    2234:	11000017 	ldw	r4,0(r2)
    2238:	00fff0f4 	movhi	r3,65475
    223c:	18fd2e04 	addi	r3,r3,-2888
    2240:	1f07883a 	add	r3,r3,fp
    2244:	19400017 	ldw	r5,0(r3)
    2248:	000d883a 	mov	r6,zero
    224c:	01d01534 	movhi	r7,16468
    2250:	00060780 	call	6078 <__eqdf2>
    2254:	1000091e 	bne	r2,zero,227c <main+0x274>
				zoom = 50;
    2258:	013ff0f4 	movhi	r4,65475
    225c:	213d2d04 	addi	r4,r4,-2892
    2260:	2709883a 	add	r4,r4,fp
    2264:	20000015 	stw	zero,0(r4)
    2268:	00901274 	movhi	r2,16457
    226c:	00fff0f4 	movhi	r3,65475
    2270:	18fd2e04 	addi	r3,r3,-2888
    2274:	1f07883a 	add	r3,r3,fp
    2278:	18800015 	stw	r2,0(r3)
			}
			rotation[0] = xRotate;
    227c:	00800f74 	movhi	r2,61
    2280:	1082ab04 	addi	r2,r2,2732
    2284:	013ff0f4 	movhi	r4,65475
    2288:	213d2b04 	addi	r4,r4,-2900
    228c:	2709883a 	add	r4,r4,fp
    2290:	2085883a 	add	r2,r4,r2
    2294:	013ff0f4 	movhi	r4,65475
    2298:	213d2b04 	addi	r4,r4,-2900
    229c:	2709883a 	add	r4,r4,fp
    22a0:	20c00017 	ldw	r3,0(r4)
    22a4:	10c00015 	stw	r3,0(r2)
			rotation[1] = yRotate;
    22a8:	00800f74 	movhi	r2,61
    22ac:	1082ab04 	addi	r2,r2,2732
    22b0:	00fff0f4 	movhi	r3,65475
    22b4:	18fd2b04 	addi	r3,r3,-2900
    22b8:	1f07883a 	add	r3,r3,fp
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	013ff0f4 	movhi	r4,65475
    22c4:	213d2c04 	addi	r4,r4,-2896
    22c8:	2709883a 	add	r4,r4,fp
    22cc:	20c00017 	ldw	r3,0(r4)
    22d0:	10c00115 	stw	r3,4(r2)
			drawNodesAndBeams(zoom / 100,rotation, startEndNodes, 160, 120, 0x0F00);
    22d4:	00bff0f4 	movhi	r2,65475
    22d8:	10bd2d04 	addi	r2,r2,-2892
    22dc:	1705883a 	add	r2,r2,fp
    22e0:	11000017 	ldw	r4,0(r2)
    22e4:	00fff0f4 	movhi	r3,65475
    22e8:	18fd2e04 	addi	r3,r3,-2888
    22ec:	1f07883a 	add	r3,r3,fp
    22f0:	19400017 	ldw	r5,0(r3)
    22f4:	000d883a 	mov	r6,zero
    22f8:	01d01674 	movhi	r7,16473
    22fc:	00057ac0 	call	57ac <__divdf3>
    2300:	100f883a 	mov	r7,r2
    2304:	1811883a 	mov	r8,r3
    2308:	380b883a 	mov	r5,r7
    230c:	400d883a 	mov	r6,r8
    2310:	00800f74 	movhi	r2,61
    2314:	1082ab04 	addi	r2,r2,2732
    2318:	013ff0f4 	movhi	r4,65475
    231c:	213d2b04 	addi	r4,r4,-2900
    2320:	2709883a 	add	r4,r4,fp
    2324:	208f883a 	add	r7,r4,r2
    2328:	00800f74 	movhi	r2,61
    232c:	10824b04 	addi	r2,r2,2348
    2330:	013ff0f4 	movhi	r4,65475
    2334:	213d2b04 	addi	r4,r4,-2900
    2338:	2709883a 	add	r4,r4,fp
    233c:	2087883a 	add	r3,r4,r2
    2340:	00802804 	movi	r2,160
    2344:	d8800015 	stw	r2,0(sp)
    2348:	00801e04 	movi	r2,120
    234c:	d8800115 	stw	r2,4(sp)
    2350:	0083c004 	movi	r2,3840
    2354:	d8800215 	stw	r2,8(sp)
    2358:	2809883a 	mov	r4,r5
    235c:	300b883a 	mov	r5,r6
    2360:	380d883a 	mov	r6,r7
    2364:	180f883a 	mov	r7,r3
    2368:	00009ac0 	call	9ac <drawNodesAndBeams>
			drawPixel(159, 119, 2, 0xF000);
    236c:	010027c4 	movi	r4,159
    2370:	01401dc4 	movi	r5,119
    2374:	01800084 	movi	r6,2
    2378:	01fc0004 	movi	r7,-4096
    237c:	00002800 	call	280 <drawPixel>
			xRotate++;
    2380:	00fff0f4 	movhi	r3,65475
    2384:	18fd2b04 	addi	r3,r3,-2900
    2388:	1f07883a 	add	r3,r3,fp
    238c:	18800017 	ldw	r2,0(r3)
    2390:	10800044 	addi	r2,r2,1
    2394:	013ff0f4 	movhi	r4,65475
    2398:	213d2b04 	addi	r4,r4,-2900
    239c:	2709883a 	add	r4,r4,fp
    23a0:	20800015 	stw	r2,0(r4)
			yRotate++;
    23a4:	00fff0f4 	movhi	r3,65475
    23a8:	18fd2c04 	addi	r3,r3,-2896
    23ac:	1f07883a 	add	r3,r3,fp
    23b0:	18800017 	ldw	r2,0(r3)
    23b4:	10800044 	addi	r2,r2,1
    23b8:	013ff0f4 	movhi	r4,65475
    23bc:	213d2c04 	addi	r4,r4,-2896
    23c0:	2709883a 	add	r4,r4,fp
    23c4:	20800015 	stw	r2,0(r4)
			zoom++;
    23c8:	00bff0f4 	movhi	r2,65475
    23cc:	10bd2d04 	addi	r2,r2,-2892
    23d0:	1705883a 	add	r2,r2,fp
    23d4:	11000017 	ldw	r4,0(r2)
    23d8:	00fff0f4 	movhi	r3,65475
    23dc:	18fd2e04 	addi	r3,r3,-2888
    23e0:	1f07883a 	add	r3,r3,fp
    23e4:	19400017 	ldw	r5,0(r3)
    23e8:	000d883a 	mov	r6,zero
    23ec:	01cffc34 	movhi	r7,16368
    23f0:	0004f100 	call	4f10 <__adddf3>
    23f4:	1009883a 	mov	r4,r2
    23f8:	180b883a 	mov	r5,r3
    23fc:	00bff0f4 	movhi	r2,65475
    2400:	10bd2d04 	addi	r2,r2,-2892
    2404:	1705883a 	add	r2,r2,fp
    2408:	11000015 	stw	r4,0(r2)
    240c:	00fff0f4 	movhi	r3,65475
    2410:	18fd2e04 	addi	r3,r3,-2888
    2414:	1f07883a 	add	r3,r3,fp
    2418:	19400015 	stw	r5,0(r3)
			char text_top_row[40];
			char text_bottom_row[40];
			char text_bottom_row2[40];
			char text_bottom_row3[40] = "SOFTWARE MODE \0";
    241c:	00800f74 	movhi	r2,61
    2420:	1082ad04 	addi	r2,r2,2740
    2424:	013ff0f4 	movhi	r4,65475
    2428:	213d2b04 	addi	r4,r4,-2900
    242c:	2709883a 	add	r4,r4,fp
    2430:	2085883a 	add	r2,r4,r2
    2434:	00c000b4 	movhi	r3,2
    2438:	18ee1c04 	addi	r3,r3,-18320
    243c:	19000017 	ldw	r4,0(r3)
    2440:	11000015 	stw	r4,0(r2)
    2444:	19000117 	ldw	r4,4(r3)
    2448:	11000115 	stw	r4,4(r2)
    244c:	19000217 	ldw	r4,8(r3)
    2450:	11000215 	stw	r4,8(r2)
    2454:	18c00317 	ldw	r3,12(r3)
    2458:	10c00315 	stw	r3,12(r2)
    245c:	10000415 	stw	zero,16(r2)
    2460:	10000515 	stw	zero,20(r2)
    2464:	10000615 	stw	zero,24(r2)
    2468:	10000715 	stw	zero,28(r2)
    246c:	10000815 	stw	zero,32(r2)
    2470:	10000915 	stw	zero,36(r2)
			sprintf(text_top_row, "3D amount of lines: %d", 8);
    2474:	00800f74 	movhi	r2,61
    2478:	1082cb04 	addi	r2,r2,2860
    247c:	00fff0f4 	movhi	r3,65475
    2480:	18fd2b04 	addi	r3,r3,-2900
    2484:	1f07883a 	add	r3,r3,fp
    2488:	1885883a 	add	r2,r3,r2
    248c:	1009883a 	mov	r4,r2
    2490:	014000b4 	movhi	r5,2
    2494:	296da304 	addi	r5,r5,-18804
    2498:	01800204 	movi	r6,8
    249c:	000770c0 	call	770c <sprintf>
			VGA_text (1, 1, "                                          \0");
    24a0:	01000044 	movi	r4,1
    24a4:	01400044 	movi	r5,1
    24a8:	018000b4 	movhi	r6,2
    24ac:	31ada904 	addi	r6,r6,-18780
    24b0:	00027540 	call	2754 <VGA_text>
			VGA_text (1, 2, "                                          \0");
    24b4:	01000044 	movi	r4,1
    24b8:	01400084 	movi	r5,2
    24bc:	018000b4 	movhi	r6,2
    24c0:	31ada904 	addi	r6,r6,-18780
    24c4:	00027540 	call	2754 <VGA_text>
			VGA_text (1, 3, "                                          \0");
    24c8:	01000044 	movi	r4,1
    24cc:	014000c4 	movi	r5,3
    24d0:	018000b4 	movhi	r6,2
    24d4:	31ada904 	addi	r6,r6,-18780
    24d8:	00027540 	call	2754 <VGA_text>
			VGA_text (1, 1, text_top_row);
    24dc:	00800f74 	movhi	r2,61
    24e0:	1082cb04 	addi	r2,r2,2860
    24e4:	013ff0f4 	movhi	r4,65475
    24e8:	213d2b04 	addi	r4,r4,-2900
    24ec:	2709883a 	add	r4,r4,fp
    24f0:	2085883a 	add	r2,r4,r2
    24f4:	01000044 	movi	r4,1
    24f8:	01400044 	movi	r5,1
    24fc:	100d883a 	mov	r6,r2
    2500:	00027540 	call	2754 <VGA_text>

			sprintf(text_bottom_row, "Zoom: %f", zoom / 100);
    2504:	00bff0f4 	movhi	r2,65475
    2508:	10bd2d04 	addi	r2,r2,-2892
    250c:	1705883a 	add	r2,r2,fp
    2510:	11000017 	ldw	r4,0(r2)
    2514:	00fff0f4 	movhi	r3,65475
    2518:	18fd2e04 	addi	r3,r3,-2888
    251c:	1f07883a 	add	r3,r3,fp
    2520:	19400017 	ldw	r5,0(r3)
    2524:	000d883a 	mov	r6,zero
    2528:	01d01674 	movhi	r7,16473
    252c:	00057ac0 	call	57ac <__divdf3>
    2530:	1009883a 	mov	r4,r2
    2534:	180b883a 	mov	r5,r3
    2538:	200f883a 	mov	r7,r4
    253c:	2811883a 	mov	r8,r5
    2540:	00800f74 	movhi	r2,61
    2544:	1082c104 	addi	r2,r2,2820
    2548:	013ff0f4 	movhi	r4,65475
    254c:	213d2b04 	addi	r4,r4,-2900
    2550:	2709883a 	add	r4,r4,fp
    2554:	2085883a 	add	r2,r4,r2
    2558:	1009883a 	mov	r4,r2
    255c:	014000b4 	movhi	r5,2
    2560:	296db404 	addi	r5,r5,-18736
    2564:	380d883a 	mov	r6,r7
    2568:	400f883a 	mov	r7,r8
    256c:	000770c0 	call	770c <sprintf>
			VGA_text (1, 2, text_bottom_row);
    2570:	00800f74 	movhi	r2,61
    2574:	1082c104 	addi	r2,r2,2820
    2578:	00fff0f4 	movhi	r3,65475
    257c:	18fd2b04 	addi	r3,r3,-2900
    2580:	1f07883a 	add	r3,r3,fp
    2584:	1885883a 	add	r2,r3,r2
    2588:	01000044 	movi	r4,1
    258c:	01400084 	movi	r5,2
    2590:	100d883a 	mov	r6,r2
    2594:	00027540 	call	2754 <VGA_text>

			sprintf(text_bottom_row2, "Rotation X,Y: %d,%d", rotation[0], rotation[1]);
    2598:	00800f74 	movhi	r2,61
    259c:	1082ab04 	addi	r2,r2,2732
    25a0:	013ff0f4 	movhi	r4,65475
    25a4:	213d2b04 	addi	r4,r4,-2900
    25a8:	2709883a 	add	r4,r4,fp
    25ac:	2085883a 	add	r2,r4,r2
    25b0:	11800017 	ldw	r6,0(r2)
    25b4:	00800f74 	movhi	r2,61
    25b8:	1082ab04 	addi	r2,r2,2732
    25bc:	00fff0f4 	movhi	r3,65475
    25c0:	18fd2b04 	addi	r3,r3,-2900
    25c4:	1f07883a 	add	r3,r3,fp
    25c8:	1885883a 	add	r2,r3,r2
    25cc:	10c00117 	ldw	r3,4(r2)
    25d0:	00800f74 	movhi	r2,61
    25d4:	1082b704 	addi	r2,r2,2780
    25d8:	013ff0f4 	movhi	r4,65475
    25dc:	213d2b04 	addi	r4,r4,-2900
    25e0:	2709883a 	add	r4,r4,fp
    25e4:	2085883a 	add	r2,r4,r2
    25e8:	1009883a 	mov	r4,r2
    25ec:	014000b4 	movhi	r5,2
    25f0:	296db704 	addi	r5,r5,-18724
    25f4:	180f883a 	mov	r7,r3
    25f8:	000770c0 	call	770c <sprintf>
			VGA_text (1, 3, text_bottom_row2);
    25fc:	00800f74 	movhi	r2,61
    2600:	1082b704 	addi	r2,r2,2780
    2604:	00fff0f4 	movhi	r3,65475
    2608:	18fd2b04 	addi	r3,r3,-2900
    260c:	1f07883a 	add	r3,r3,fp
    2610:	1885883a 	add	r2,r3,r2
    2614:	01000044 	movi	r4,1
    2618:	014000c4 	movi	r5,3
    261c:	100d883a 	mov	r6,r2
    2620:	00027540 	call	2754 <VGA_text>

			VGA_text (1, 4, text_bottom_row3);
    2624:	00800f74 	movhi	r2,61
    2628:	1082ad04 	addi	r2,r2,2740
    262c:	013ff0f4 	movhi	r4,65475
    2630:	213d2b04 	addi	r4,r4,-2900
    2634:	2709883a 	add	r4,r4,fp
    2638:	2085883a 	add	r2,r4,r2
    263c:	01000044 	movi	r4,1
    2640:	01400104 	movi	r5,4
    2644:	100d883a 	mov	r6,r2
    2648:	00027540 	call	2754 <VGA_text>
			if(data == 'd'){
				h++;
			}
		}
		 */
	}
    264c:	003ee206 	br	21d8 <__alt_mem_Flash_flash_data+0xf40021d8>

00002650 <LCD_cursor>:

/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	df000415 	stw	fp,16(sp)
    2658:	df000404 	addi	fp,sp,16
    265c:	e13ffe15 	stw	r4,-8(fp)
    2660:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
    2664:	00840034 	movhi	r2,4096
    2668:	108c1404 	addi	r2,r2,12368
    266c:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
    2670:	e0bffe17 	ldw	r2,-8(fp)
    2674:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
    2678:	e0bfff17 	ldw	r2,-4(fp)
    267c:	10000326 	beq	r2,zero,268c <LCD_cursor+0x3c>
    2680:	e0bffc03 	ldbu	r2,-16(fp)
    2684:	10801014 	ori	r2,r2,64
    2688:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
    268c:	e0fffc03 	ldbu	r3,-16(fp)
    2690:	00bfe004 	movi	r2,-128
    2694:	1884b03a 	or	r2,r3,r2
    2698:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
    269c:	e0bffd17 	ldw	r2,-12(fp)
    26a0:	e0fffc03 	ldbu	r3,-16(fp)
    26a4:	10c00005 	stb	r3,0(r2)
}
    26a8:	e037883a 	mov	sp,fp
    26ac:	df000017 	ldw	fp,0(sp)
    26b0:	dec00104 	addi	sp,sp,4
    26b4:	f800283a 	ret

000026b8 <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
    26b8:	defffd04 	addi	sp,sp,-12
    26bc:	df000215 	stw	fp,8(sp)
    26c0:	df000204 	addi	fp,sp,8
    26c4:	e13fff15 	stw	r4,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
    26c8:	00840034 	movhi	r2,4096
    26cc:	108c1404 	addi	r2,r2,12368
    26d0:	e0bffe15 	stw	r2,-8(fp)

	while ( *(text_ptr) )
    26d4:	00000806 	br	26f8 <LCD_text+0x40>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
    26d8:	e0bffe17 	ldw	r2,-8(fp)
    26dc:	10800044 	addi	r2,r2,1
    26e0:	e0ffff17 	ldw	r3,-4(fp)
    26e4:	18c00003 	ldbu	r3,0(r3)
    26e8:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    26ec:	e0bfff17 	ldw	r2,-4(fp)
    26f0:	10800044 	addi	r2,r2,1
    26f4:	e0bfff15 	stw	r2,-4(fp)
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display

	while ( *(text_ptr) )
    26f8:	e0bfff17 	ldw	r2,-4(fp)
    26fc:	10800003 	ldbu	r2,0(r2)
    2700:	10803fcc 	andi	r2,r2,255
    2704:	1080201c 	xori	r2,r2,128
    2708:	10bfe004 	addi	r2,r2,-128
    270c:	103ff21e 	bne	r2,zero,26d8 <__alt_mem_Flash_flash_data+0xf40026d8>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}
    2710:	e037883a 	mov	sp,fp
    2714:	df000017 	ldw	fp,0(sp)
    2718:	dec00104 	addi	sp,sp,4
    271c:	f800283a 	ret

00002720 <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
    2720:	defffe04 	addi	sp,sp,-8
    2724:	df000115 	stw	fp,4(sp)
    2728:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
    272c:	00840034 	movhi	r2,4096
    2730:	108c1404 	addi	r2,r2,12368
    2734:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;											// turn off the LCD cursor
    2738:	e0bfff17 	ldw	r2,-4(fp)
    273c:	00c00304 	movi	r3,12
    2740:	10c00005 	stb	r3,0(r2)
}
    2744:	e037883a 	mov	sp,fp
    2748:	df000017 	ldw	fp,0(sp)
    274c:	dec00104 	addi	sp,sp,4
    2750:	f800283a 	ret

00002754 <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
    2754:	defffa04 	addi	sp,sp,-24
    2758:	df000515 	stw	fp,20(sp)
    275c:	df000504 	addi	fp,sp,20
    2760:	e13ffd15 	stw	r4,-12(fp)
    2764:	e17ffe15 	stw	r5,-8(fp)
    2768:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    276c:	00824034 	movhi	r2,2304
    2770:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    2774:	e0bffe17 	ldw	r2,-8(fp)
    2778:	100691fa 	slli	r3,r2,7
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	1885883a 	add	r2,r3,r2
    2784:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    2788:	00000c06 	br	27bc <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    278c:	e0bffb17 	ldw	r2,-20(fp)
    2790:	e0fffc17 	ldw	r3,-16(fp)
    2794:	1885883a 	add	r2,r3,r2
    2798:	e0ffff17 	ldw	r3,-4(fp)
    279c:	18c00003 	ldbu	r3,0(r3)
    27a0:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    27a4:	e0bfff17 	ldw	r2,-4(fp)
    27a8:	10800044 	addi	r2,r2,1
    27ac:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    27b0:	e0bffb17 	ldw	r2,-20(fp)
    27b4:	10800044 	addi	r2,r2,1
    27b8:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    27bc:	e0bfff17 	ldw	r2,-4(fp)
    27c0:	10800003 	ldbu	r2,0(r2)
    27c4:	10803fcc 	andi	r2,r2,255
    27c8:	1080201c 	xori	r2,r2,128
    27cc:	10bfe004 	addi	r2,r2,-128
    27d0:	103fee1e 	bne	r2,zero,278c <__alt_mem_Flash_flash_data+0xf400278c>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    27d4:	e037883a 	mov	sp,fp
    27d8:	df000017 	ldw	fp,0(sp)
    27dc:	dec00104 	addi	sp,sp,4
    27e0:	f800283a 	ret

000027e4 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    27e4:	defff604 	addi	sp,sp,-40
    27e8:	df000915 	stw	fp,36(sp)
    27ec:	df000904 	addi	fp,sp,36
    27f0:	e13ffb15 	stw	r4,-20(fp)
    27f4:	e17ffc15 	stw	r5,-16(fp)
    27f8:	e1bffd15 	stw	r6,-12(fp)
    27fc:	e1fffe15 	stw	r7,-8(fp)
    2800:	e0800117 	ldw	r2,4(fp)
    2804:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    2808:	00820034 	movhi	r2,2048
    280c:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2810:	e0bffc17 	ldw	r2,-16(fp)
    2814:	e0bff715 	stw	r2,-36(fp)
    2818:	00001806 	br	287c <VGA_box+0x98>
	{
		col = x1;
    281c:	e0bffb17 	ldw	r2,-20(fp)
    2820:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    2824:	00000f06 	br	2864 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    2828:	e0bff717 	ldw	r2,-36(fp)
    282c:	1006927a 	slli	r3,r2,9
    2830:	e0bff817 	ldw	r2,-32(fp)
    2834:	1885883a 	add	r2,r3,r2
    2838:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    283c:	e0bffa17 	ldw	r2,-24(fp)
    2840:	1085883a 	add	r2,r2,r2
    2844:	1007883a 	mov	r3,r2
    2848:	e0bff917 	ldw	r2,-28(fp)
    284c:	10c5883a 	add	r2,r2,r3
    2850:	e0ffff0b 	ldhu	r3,-4(fp)
    2854:	10c0000d 	sth	r3,0(r2)
			++col;
    2858:	e0bff817 	ldw	r2,-32(fp)
    285c:	10800044 	addi	r2,r2,1
    2860:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    2864:	e0bff817 	ldw	r2,-32(fp)
    2868:	e0fffd17 	ldw	r3,-12(fp)
    286c:	18bfee0e 	bge	r3,r2,2828 <__alt_mem_Flash_flash_data+0xf4002828>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2870:	e0bff717 	ldw	r2,-36(fp)
    2874:	10800044 	addi	r2,r2,1
    2878:	e0bff715 	stw	r2,-36(fp)
    287c:	e0bff717 	ldw	r2,-36(fp)
    2880:	e0fffe17 	ldw	r3,-8(fp)
    2884:	18bfe50e 	bge	r3,r2,281c <__alt_mem_Flash_flash_data+0xf400281c>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2888:	e037883a 	mov	sp,fp
    288c:	df000017 	ldw	fp,0(sp)
    2890:	dec00104 	addi	sp,sp,4
    2894:	f800283a 	ret

00002898 <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3)
{
    2898:	deffef04 	addi	sp,sp,-68
    289c:	dfc01015 	stw	ra,64(sp)
    28a0:	df000f15 	stw	fp,60(sp)
    28a4:	df000f04 	addi	fp,sp,60
    28a8:	2807883a 	mov	r3,r5
    28ac:	3005883a 	mov	r2,r6
    28b0:	e13ffd05 	stb	r4,-12(fp)
    28b4:	e0fffe05 	stb	r3,-8(fp)
    28b8:	e0bfff05 	stb	r2,-4(fp)
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;
    28bc:	00840034 	movhi	r2,4096
    28c0:	10800804 	addi	r2,r2,32
    28c4:	e0bff315 	stw	r2,-52(fp)
	volatile int * HEX7_HEX4_ptr = (int *) 0x10000030;
    28c8:	00840034 	movhi	r2,4096
    28cc:	10800c04 	addi	r2,r2,48
    28d0:	e0bff415 	stw	r2,-48(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
    28d4:	008000b4 	movhi	r2,2
    28d8:	10ae2604 	addi	r2,r2,-18280
    28dc:	e0fff644 	addi	r3,fp,-39
    28e0:	100b883a 	mov	r5,r2
    28e4:	00800404 	movi	r2,16
    28e8:	1809883a 	mov	r4,r3
    28ec:	100d883a 	mov	r6,r2
    28f0:	000757c0 	call	757c <memcpy>
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    28f4:	e03ffa45 	stb	zero,-23(fp)
    28f8:	e03ffa85 	stb	zero,-22(fp)
    28fc:	e03ffac5 	stb	zero,-21(fp)
    2900:	e03ffb05 	stb	zero,-20(fp)
    2904:	e03ffb45 	stb	zero,-19(fp)
    2908:	e03ffb85 	stb	zero,-18(fp)
    290c:	e03ffbc5 	stb	zero,-17(fp)
    2910:	e03ffc05 	stb	zero,-16(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    2914:	e0bffd07 	ldb	r2,-12(fp)
    2918:	1006943a 	slli	r3,r2,16
    291c:	e0bffe07 	ldb	r2,-8(fp)
    2920:	1004923a 	slli	r2,r2,8
    2924:	1886b03a 	or	r3,r3,r2
    2928:	e0bfff07 	ldb	r2,-4(fp)
    292c:	1884b03a 	or	r2,r3,r2
    2930:	e0bff115 	stw	r2,-60(fp)
	for ( i = 0; i < 6; ++i )
    2934:	e03ff215 	stw	zero,-56(fp)
    2938:	00001306 	br	2988 <HEX_PS2+0xf0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    293c:	e0bff117 	ldw	r2,-60(fp)
    2940:	108003cc 	andi	r2,r2,15
    2944:	e0bff515 	stw	r2,-44(fp)
		code = seven_seg_decode_table[nibble];
    2948:	e0fff644 	addi	r3,fp,-39
    294c:	e0bff517 	ldw	r2,-44(fp)
    2950:	1885883a 	add	r2,r3,r2
    2954:	10800003 	ldbu	r2,0(r2)
    2958:	e0bff605 	stb	r2,-40(fp)
		hex_segs[i] = code;
    295c:	e0fffa44 	addi	r3,fp,-23
    2960:	e0bff217 	ldw	r2,-56(fp)
    2964:	1885883a 	add	r2,r3,r2
    2968:	e0fff603 	ldbu	r3,-40(fp)
    296c:	10c00005 	stb	r3,0(r2)
		shift_buffer = shift_buffer >> 4;
    2970:	e0bff117 	ldw	r2,-60(fp)
    2974:	1004d13a 	srli	r2,r2,4
    2978:	e0bff115 	stw	r2,-60(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
    297c:	e0bff217 	ldw	r2,-56(fp)
    2980:	10800044 	addi	r2,r2,1
    2984:	e0bff215 	stw	r2,-56(fp)
    2988:	e0bff217 	ldw	r2,-56(fp)
    298c:	10800190 	cmplti	r2,r2,6
    2990:	103fea1e 	bne	r2,zero,293c <__alt_mem_Flash_flash_data+0xf400293c>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    2994:	e0bffa44 	addi	r2,fp,-23
    2998:	10c00017 	ldw	r3,0(r2)
    299c:	e0bff317 	ldw	r2,-52(fp)
    29a0:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    29a4:	e0bffb43 	ldbu	r2,-19(fp)
    29a8:	e0fffb83 	ldbu	r3,-18(fp)
    29ac:	1806923a 	slli	r3,r3,8
    29b0:	1884b03a 	or	r2,r3,r2
    29b4:	e0fffbc3 	ldbu	r3,-17(fp)
    29b8:	1806943a 	slli	r3,r3,16
    29bc:	1884b03a 	or	r2,r3,r2
    29c0:	e0fffc03 	ldbu	r3,-16(fp)
    29c4:	1806963a 	slli	r3,r3,24
    29c8:	1884b03a 	or	r2,r3,r2
    29cc:	1007883a 	mov	r3,r2
    29d0:	e0bff417 	ldw	r2,-48(fp)
    29d4:	10c00015 	stw	r3,0(r2)
}
    29d8:	e037883a 	mov	sp,fp
    29dc:	dfc00117 	ldw	ra,4(sp)
    29e0:	df000017 	ldw	fp,0(sp)
    29e4:	dec00204 	addi	sp,sp,8
    29e8:	f800283a 	ret

000029ec <check_KEYs>:

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY1, int * KEY2, int * counter)
{
    29ec:	defff904 	addi	sp,sp,-28
    29f0:	df000615 	stw	fp,24(sp)
    29f4:	df000604 	addi	fp,sp,24
    29f8:	e13ffd15 	stw	r4,-12(fp)
    29fc:	e17ffe15 	stw	r5,-8(fp)
    2a00:	e1bfff15 	stw	r6,-4(fp)
	volatile int * KEY_ptr = (int *) 0x10000050;		// pushbutton KEY address
    2a04:	00840034 	movhi	r2,4096
    2a08:	10801404 	addi	r2,r2,80
    2a0c:	e0bffa15 	stw	r2,-24(fp)
	volatile int * audio_ptr = (int *) 0x10003040;	// audio port address
    2a10:	00840034 	movhi	r2,4096
    2a14:	108c1004 	addi	r2,r2,12352
    2a18:	e0bffb15 	stw	r2,-20(fp)
	int KEY_value;

	KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
    2a1c:	e0bffa17 	ldw	r2,-24(fp)
    2a20:	10800017 	ldw	r2,0(r2)
    2a24:	e0bffc15 	stw	r2,-16(fp)
	while (*KEY_ptr);							// wait for pushbutton KEY release
    2a28:	0001883a 	nop
    2a2c:	e0bffa17 	ldw	r2,-24(fp)
    2a30:	10800017 	ldw	r2,0(r2)
    2a34:	103ffd1e 	bne	r2,zero,2a2c <__alt_mem_Flash_flash_data+0xf4002a2c>

	if (KEY_value == 0x2)					// check KEY1
    2a38:	e0bffc17 	ldw	r2,-16(fp)
    2a3c:	10800098 	cmpnei	r2,r2,2
    2a40:	10000b1e 	bne	r2,zero,2a70 <check_KEYs+0x84>
	{
		// reset counter to start recording
		*counter = 0;
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	10000015 	stw	zero,0(r2)
		// clear audio-in FIFO
		*(audio_ptr) = 0x4;
    2a4c:	e0bffb17 	ldw	r2,-20(fp)
    2a50:	00c00104 	movi	r3,4
    2a54:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
    2a58:	e0bffb17 	ldw	r2,-20(fp)
    2a5c:	10000015 	stw	zero,0(r2)

		*KEY1 = 1;
    2a60:	e0bffd17 	ldw	r2,-12(fp)
    2a64:	00c00044 	movi	r3,1
    2a68:	10c00015 	stw	r3,0(r2)
    2a6c:	00000d06 	br	2aa4 <check_KEYs+0xb8>
	}
	else if (KEY_value == 0x4)				// check KEY2
    2a70:	e0bffc17 	ldw	r2,-16(fp)
    2a74:	10800118 	cmpnei	r2,r2,4
    2a78:	10000a1e 	bne	r2,zero,2aa4 <check_KEYs+0xb8>
	{
		// reset counter to start playback
		*counter = 0;
    2a7c:	e0bfff17 	ldw	r2,-4(fp)
    2a80:	10000015 	stw	zero,0(r2)
		// clear audio-out FIFO
		*(audio_ptr) = 0x8;
    2a84:	e0bffb17 	ldw	r2,-20(fp)
    2a88:	00c00204 	movi	r3,8
    2a8c:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
    2a90:	e0bffb17 	ldw	r2,-20(fp)
    2a94:	10000015 	stw	zero,0(r2)

		*KEY2 = 1;
    2a98:	e0bffe17 	ldw	r2,-8(fp)
    2a9c:	00c00044 	movi	r3,1
    2aa0:	10c00015 	stw	r3,0(r2)
	}
}
    2aa4:	e037883a 	mov	sp,fp
    2aa8:	df000017 	ldw	fp,0(sp)
    2aac:	dec00104 	addi	sp,sp,4
    2ab0:	f800283a 	ret

00002ab4 <cos>:
    2ab4:	00a00034 	movhi	r2,32768
    2ab8:	defffa04 	addi	sp,sp,-24
    2abc:	10bfffc4 	addi	r2,r2,-1
    2ac0:	00cffa74 	movhi	r3,16361
    2ac4:	dfc00515 	stw	ra,20(sp)
    2ac8:	2884703a 	and	r2,r5,r2
    2acc:	18c87ec4 	addi	r3,r3,8699
    2ad0:	280f883a 	mov	r7,r5
    2ad4:	1880170e 	bge	r3,r2,2b34 <cos+0x80>
    2ad8:	00dffc34 	movhi	r3,32752
    2adc:	18ffffc4 	addi	r3,r3,-1
    2ae0:	1880050e 	bge	r3,r2,2af8 <cos+0x44>
    2ae4:	200d883a 	mov	r6,r4
    2ae8:	00069e00 	call	69e0 <__subdf3>
    2aec:	dfc00517 	ldw	ra,20(sp)
    2af0:	dec00604 	addi	sp,sp,24
    2af4:	f800283a 	ret
    2af8:	d9800104 	addi	r6,sp,4
    2afc:	0002c900 	call	2c90 <__ieee754_rem_pio2>
    2b00:	108000cc 	andi	r2,r2,3
    2b04:	00c00044 	movi	r3,1
    2b08:	10c01726 	beq	r2,r3,2b68 <cos+0xb4>
    2b0c:	01000084 	movi	r4,2
    2b10:	11000e26 	beq	r2,r4,2b4c <cos+0x98>
    2b14:	10001c26 	beq	r2,zero,2b88 <cos+0xd4>
    2b18:	d9000117 	ldw	r4,4(sp)
    2b1c:	d9400217 	ldw	r5,8(sp)
    2b20:	d9800317 	ldw	r6,12(sp)
    2b24:	d9c00417 	ldw	r7,16(sp)
    2b28:	d8c00015 	stw	r3,0(sp)
    2b2c:	00045f80 	call	45f8 <__kernel_sin>
    2b30:	003fee06 	br	2aec <__alt_mem_Flash_flash_data+0xf4002aec>
    2b34:	000d883a 	mov	r6,zero
    2b38:	000f883a 	mov	r7,zero
    2b3c:	000342c0 	call	342c <__kernel_cos>
    2b40:	dfc00517 	ldw	ra,20(sp)
    2b44:	dec00604 	addi	sp,sp,24
    2b48:	f800283a 	ret
    2b4c:	d9000117 	ldw	r4,4(sp)
    2b50:	d9400217 	ldw	r5,8(sp)
    2b54:	d9800317 	ldw	r6,12(sp)
    2b58:	d9c00417 	ldw	r7,16(sp)
    2b5c:	000342c0 	call	342c <__kernel_cos>
    2b60:	18e0003c 	xorhi	r3,r3,32768
    2b64:	003fe106 	br	2aec <__alt_mem_Flash_flash_data+0xf4002aec>
    2b68:	d9000117 	ldw	r4,4(sp)
    2b6c:	d9400217 	ldw	r5,8(sp)
    2b70:	d9800317 	ldw	r6,12(sp)
    2b74:	d9c00417 	ldw	r7,16(sp)
    2b78:	d8800015 	stw	r2,0(sp)
    2b7c:	00045f80 	call	45f8 <__kernel_sin>
    2b80:	18e0003c 	xorhi	r3,r3,32768
    2b84:	003fd906 	br	2aec <__alt_mem_Flash_flash_data+0xf4002aec>
    2b88:	d9000117 	ldw	r4,4(sp)
    2b8c:	d9400217 	ldw	r5,8(sp)
    2b90:	d9800317 	ldw	r6,12(sp)
    2b94:	d9c00417 	ldw	r7,16(sp)
    2b98:	000342c0 	call	342c <__kernel_cos>
    2b9c:	003fd306 	br	2aec <__alt_mem_Flash_flash_data+0xf4002aec>

00002ba0 <sin>:
    2ba0:	00a00034 	movhi	r2,32768
    2ba4:	defffa04 	addi	sp,sp,-24
    2ba8:	10bfffc4 	addi	r2,r2,-1
    2bac:	00cffa74 	movhi	r3,16361
    2bb0:	dfc00515 	stw	ra,20(sp)
    2bb4:	2884703a 	and	r2,r5,r2
    2bb8:	18c87ec4 	addi	r3,r3,8699
    2bbc:	280f883a 	mov	r7,r5
    2bc0:	1880170e 	bge	r3,r2,2c20 <sin+0x80>
    2bc4:	00dffc34 	movhi	r3,32752
    2bc8:	18ffffc4 	addi	r3,r3,-1
    2bcc:	1880050e 	bge	r3,r2,2be4 <sin+0x44>
    2bd0:	200d883a 	mov	r6,r4
    2bd4:	00069e00 	call	69e0 <__subdf3>
    2bd8:	dfc00517 	ldw	ra,20(sp)
    2bdc:	dec00604 	addi	sp,sp,24
    2be0:	f800283a 	ret
    2be4:	d9800104 	addi	r6,sp,4
    2be8:	0002c900 	call	2c90 <__ieee754_rem_pio2>
    2bec:	108000cc 	andi	r2,r2,3
    2bf0:	00c00044 	movi	r3,1
    2bf4:	10c01926 	beq	r2,r3,2c5c <sin+0xbc>
    2bf8:	01000084 	movi	r4,2
    2bfc:	11000f26 	beq	r2,r4,2c3c <sin+0x9c>
    2c00:	10001c26 	beq	r2,zero,2c74 <sin+0xd4>
    2c04:	d9000117 	ldw	r4,4(sp)
    2c08:	d9400217 	ldw	r5,8(sp)
    2c0c:	d9800317 	ldw	r6,12(sp)
    2c10:	d9c00417 	ldw	r7,16(sp)
    2c14:	000342c0 	call	342c <__kernel_cos>
    2c18:	18e0003c 	xorhi	r3,r3,32768
    2c1c:	003fee06 	br	2bd8 <__alt_mem_Flash_flash_data+0xf4002bd8>
    2c20:	d8000015 	stw	zero,0(sp)
    2c24:	000d883a 	mov	r6,zero
    2c28:	000f883a 	mov	r7,zero
    2c2c:	00045f80 	call	45f8 <__kernel_sin>
    2c30:	dfc00517 	ldw	ra,20(sp)
    2c34:	dec00604 	addi	sp,sp,24
    2c38:	f800283a 	ret
    2c3c:	d9000117 	ldw	r4,4(sp)
    2c40:	d9400217 	ldw	r5,8(sp)
    2c44:	d9800317 	ldw	r6,12(sp)
    2c48:	d9c00417 	ldw	r7,16(sp)
    2c4c:	d8c00015 	stw	r3,0(sp)
    2c50:	00045f80 	call	45f8 <__kernel_sin>
    2c54:	18e0003c 	xorhi	r3,r3,32768
    2c58:	003fdf06 	br	2bd8 <__alt_mem_Flash_flash_data+0xf4002bd8>
    2c5c:	d9000117 	ldw	r4,4(sp)
    2c60:	d9400217 	ldw	r5,8(sp)
    2c64:	d9800317 	ldw	r6,12(sp)
    2c68:	d9c00417 	ldw	r7,16(sp)
    2c6c:	000342c0 	call	342c <__kernel_cos>
    2c70:	003fd906 	br	2bd8 <__alt_mem_Flash_flash_data+0xf4002bd8>
    2c74:	d9000117 	ldw	r4,4(sp)
    2c78:	d9400217 	ldw	r5,8(sp)
    2c7c:	d9800317 	ldw	r6,12(sp)
    2c80:	d9c00417 	ldw	r7,16(sp)
    2c84:	d8c00015 	stw	r3,0(sp)
    2c88:	00045f80 	call	45f8 <__kernel_sin>
    2c8c:	003fd206 	br	2bd8 <__alt_mem_Flash_flash_data+0xf4002bd8>

00002c90 <__ieee754_rem_pio2>:
    2c90:	02200034 	movhi	r8,32768
    2c94:	deffea04 	addi	sp,sp,-88
    2c98:	423fffc4 	addi	r8,r8,-1
    2c9c:	00cffa74 	movhi	r3,16361
    2ca0:	ddc01315 	stw	r23,76(sp)
    2ca4:	dc400d15 	stw	r17,52(sp)
    2ca8:	dfc01515 	stw	ra,84(sp)
    2cac:	df001415 	stw	fp,80(sp)
    2cb0:	dd801215 	stw	r22,72(sp)
    2cb4:	dd401115 	stw	r21,68(sp)
    2cb8:	dd001015 	stw	r20,64(sp)
    2cbc:	dcc00f15 	stw	r19,60(sp)
    2cc0:	dc800e15 	stw	r18,56(sp)
    2cc4:	dc000c15 	stw	r16,48(sp)
    2cc8:	2a2e703a 	and	r23,r5,r8
    2ccc:	18c87ec4 	addi	r3,r3,8699
    2cd0:	2823883a 	mov	r17,r5
    2cd4:	1dc0790e 	bge	r3,r23,2ebc <__ieee754_rem_pio2+0x22c>
    2cd8:	009000f4 	movhi	r2,16387
    2cdc:	10b65ec4 	addi	r2,r2,-9861
    2ce0:	3021883a 	mov	r16,r6
    2ce4:	2027883a 	mov	r19,r4
    2ce8:	15c02316 	blt	r2,r23,2d78 <__ieee754_rem_pio2+0xe8>
    2cec:	01cffe74 	movhi	r7,16377
    2cf0:	39c87ec4 	addi	r7,r7,8699
    2cf4:	01951034 	movhi	r6,21568
    2cf8:	0141800e 	bge	zero,r5,32fc <__ieee754_rem_pio2+0x66c>
    2cfc:	00069e00 	call	69e0 <__subdf3>
    2d00:	1025883a 	mov	r18,r2
    2d04:	008ffe74 	movhi	r2,16377
    2d08:	10887ec4 	addi	r2,r2,8699
    2d0c:	1823883a 	mov	r17,r3
    2d10:	b8808426 	beq	r23,r2,2f24 <__ieee754_rem_pio2+0x294>
    2d14:	018698b4 	movhi	r6,6754
    2d18:	01cf7474 	movhi	r7,15825
    2d1c:	3198cc44 	addi	r6,r6,25393
    2d20:	39ed1844 	addi	r7,r7,-19359
    2d24:	9009883a 	mov	r4,r18
    2d28:	180b883a 	mov	r5,r3
    2d2c:	00069e00 	call	69e0 <__subdf3>
    2d30:	100d883a 	mov	r6,r2
    2d34:	180f883a 	mov	r7,r3
    2d38:	9009883a 	mov	r4,r18
    2d3c:	880b883a 	mov	r5,r17
    2d40:	80800015 	stw	r2,0(r16)
    2d44:	80c00115 	stw	r3,4(r16)
    2d48:	00069e00 	call	69e0 <__subdf3>
    2d4c:	018698b4 	movhi	r6,6754
    2d50:	01cf7474 	movhi	r7,15825
    2d54:	1009883a 	mov	r4,r2
    2d58:	180b883a 	mov	r5,r3
    2d5c:	3198cc44 	addi	r6,r6,25393
    2d60:	39ed1844 	addi	r7,r7,-19359
    2d64:	00069e00 	call	69e0 <__subdf3>
    2d68:	80800215 	stw	r2,8(r16)
    2d6c:	80c00315 	stw	r3,12(r16)
    2d70:	00800044 	movi	r2,1
    2d74:	00005606 	br	2ed0 <__ieee754_rem_pio2+0x240>
    2d78:	00904e74 	movhi	r2,16697
    2d7c:	10887ec4 	addi	r2,r2,8699
    2d80:	15c0890e 	bge	r2,r23,2fa8 <__ieee754_rem_pio2+0x318>
    2d84:	009ffc34 	movhi	r2,32752
    2d88:	10bfffc4 	addi	r2,r2,-1
    2d8c:	15c05c16 	blt	r2,r23,2f00 <__ieee754_rem_pio2+0x270>
    2d90:	b829d53a 	srai	r20,r23,20
    2d94:	a53efa84 	addi	r20,r20,-1046
    2d98:	a024953a 	slli	r18,r20,20
    2d9c:	bca5c83a 	sub	r18,r23,r18
    2da0:	900b883a 	mov	r5,r18
    2da4:	00072b00 	call	72b0 <__fixdfsi>
    2da8:	1009883a 	mov	r4,r2
    2dac:	00073380 	call	7338 <__floatsidf>
    2db0:	9809883a 	mov	r4,r19
    2db4:	900b883a 	mov	r5,r18
    2db8:	100d883a 	mov	r6,r2
    2dbc:	180f883a 	mov	r7,r3
    2dc0:	d8800215 	stw	r2,8(sp)
    2dc4:	d8c00315 	stw	r3,12(sp)
    2dc8:	00069e00 	call	69e0 <__subdf3>
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	01d05c34 	movhi	r7,16752
    2dd4:	1009883a 	mov	r4,r2
    2dd8:	180b883a 	mov	r5,r3
    2ddc:	00062bc0 	call	62bc <__muldf3>
    2de0:	180b883a 	mov	r5,r3
    2de4:	1009883a 	mov	r4,r2
    2de8:	182b883a 	mov	r21,r3
    2dec:	102d883a 	mov	r22,r2
    2df0:	00072b00 	call	72b0 <__fixdfsi>
    2df4:	1009883a 	mov	r4,r2
    2df8:	00073380 	call	7338 <__floatsidf>
    2dfc:	100d883a 	mov	r6,r2
    2e00:	180f883a 	mov	r7,r3
    2e04:	b009883a 	mov	r4,r22
    2e08:	a80b883a 	mov	r5,r21
    2e0c:	1027883a 	mov	r19,r2
    2e10:	1825883a 	mov	r18,r3
    2e14:	d8800415 	stw	r2,16(sp)
    2e18:	d8c00515 	stw	r3,20(sp)
    2e1c:	00069e00 	call	69e0 <__subdf3>
    2e20:	1009883a 	mov	r4,r2
    2e24:	180b883a 	mov	r5,r3
    2e28:	000d883a 	mov	r6,zero
    2e2c:	01d05c34 	movhi	r7,16752
    2e30:	00062bc0 	call	62bc <__muldf3>
    2e34:	1009883a 	mov	r4,r2
    2e38:	180b883a 	mov	r5,r3
    2e3c:	000d883a 	mov	r6,zero
    2e40:	000f883a 	mov	r7,zero
    2e44:	d8800615 	stw	r2,24(sp)
    2e48:	d8c00715 	stw	r3,28(sp)
    2e4c:	00060780 	call	6078 <__eqdf2>
    2e50:	1001491e 	bne	r2,zero,3378 <__ieee754_rem_pio2+0x6e8>
    2e54:	000f883a 	mov	r7,zero
    2e58:	9809883a 	mov	r4,r19
    2e5c:	900b883a 	mov	r5,r18
    2e60:	000d883a 	mov	r6,zero
    2e64:	00060780 	call	6078 <__eqdf2>
    2e68:	100f003a 	cmpeq	r7,r2,zero
    2e6c:	00800084 	movi	r2,2
    2e70:	11cfc83a 	sub	r7,r2,r7
    2e74:	00800084 	movi	r2,2
    2e78:	d8800015 	stw	r2,0(sp)
    2e7c:	008000b4 	movhi	r2,2
    2e80:	10ae4a04 	addi	r2,r2,-18136
    2e84:	d8800115 	stw	r2,4(sp)
    2e88:	d9000204 	addi	r4,sp,8
    2e8c:	800b883a 	mov	r5,r16
    2e90:	a00d883a 	mov	r6,r20
    2e94:	00038d00 	call	38d0 <__kernel_rem_pio2>
    2e98:	88000d0e 	bge	r17,zero,2ed0 <__ieee754_rem_pio2+0x240>
    2e9c:	81000117 	ldw	r4,4(r16)
    2ea0:	80c00317 	ldw	r3,12(r16)
    2ea4:	0085c83a 	sub	r2,zero,r2
    2ea8:	2120003c 	xorhi	r4,r4,32768
    2eac:	18e0003c 	xorhi	r3,r3,32768
    2eb0:	81000115 	stw	r4,4(r16)
    2eb4:	80c00315 	stw	r3,12(r16)
    2eb8:	00000506 	br	2ed0 <__ieee754_rem_pio2+0x240>
    2ebc:	31000015 	stw	r4,0(r6)
    2ec0:	31400115 	stw	r5,4(r6)
    2ec4:	30000215 	stw	zero,8(r6)
    2ec8:	30000315 	stw	zero,12(r6)
    2ecc:	0005883a 	mov	r2,zero
    2ed0:	dfc01517 	ldw	ra,84(sp)
    2ed4:	df001417 	ldw	fp,80(sp)
    2ed8:	ddc01317 	ldw	r23,76(sp)
    2edc:	dd801217 	ldw	r22,72(sp)
    2ee0:	dd401117 	ldw	r21,68(sp)
    2ee4:	dd001017 	ldw	r20,64(sp)
    2ee8:	dcc00f17 	ldw	r19,60(sp)
    2eec:	dc800e17 	ldw	r18,56(sp)
    2ef0:	dc400d17 	ldw	r17,52(sp)
    2ef4:	dc000c17 	ldw	r16,48(sp)
    2ef8:	dec01604 	addi	sp,sp,88
    2efc:	f800283a 	ret
    2f00:	200d883a 	mov	r6,r4
    2f04:	280f883a 	mov	r7,r5
    2f08:	00069e00 	call	69e0 <__subdf3>
    2f0c:	80800215 	stw	r2,8(r16)
    2f10:	80800015 	stw	r2,0(r16)
    2f14:	80c00315 	stw	r3,12(r16)
    2f18:	80c00115 	stw	r3,4(r16)
    2f1c:	0005883a 	mov	r2,zero
    2f20:	003feb06 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    2f24:	01cf7474 	movhi	r7,15825
    2f28:	9009883a 	mov	r4,r18
    2f2c:	39ed1844 	addi	r7,r7,-19359
    2f30:	01869834 	movhi	r6,6752
    2f34:	180b883a 	mov	r5,r3
    2f38:	00069e00 	call	69e0 <__subdf3>
    2f3c:	018b80f4 	movhi	r6,11779
    2f40:	01cee8f4 	movhi	r7,15267
    2f44:	1009883a 	mov	r4,r2
    2f48:	180b883a 	mov	r5,r3
    2f4c:	319c1cc4 	addi	r6,r6,28787
    2f50:	39c66284 	addi	r7,r7,6538
    2f54:	1025883a 	mov	r18,r2
    2f58:	1823883a 	mov	r17,r3
    2f5c:	00069e00 	call	69e0 <__subdf3>
    2f60:	100d883a 	mov	r6,r2
    2f64:	180f883a 	mov	r7,r3
    2f68:	9009883a 	mov	r4,r18
    2f6c:	880b883a 	mov	r5,r17
    2f70:	80800015 	stw	r2,0(r16)
    2f74:	80c00115 	stw	r3,4(r16)
    2f78:	00069e00 	call	69e0 <__subdf3>
    2f7c:	018b80f4 	movhi	r6,11779
    2f80:	01cee8f4 	movhi	r7,15267
    2f84:	1009883a 	mov	r4,r2
    2f88:	180b883a 	mov	r5,r3
    2f8c:	319c1cc4 	addi	r6,r6,28787
    2f90:	39c66284 	addi	r7,r7,6538
    2f94:	00069e00 	call	69e0 <__subdf3>
    2f98:	80800215 	stw	r2,8(r16)
    2f9c:	80c00315 	stw	r3,12(r16)
    2fa0:	00800044 	movi	r2,1
    2fa4:	003fca06 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    2fa8:	00048c00 	call	48c0 <fabs>
    2fac:	019b72b4 	movhi	r6,28106
    2fb0:	01cff934 	movhi	r7,16356
    2fb4:	1009883a 	mov	r4,r2
    2fb8:	180b883a 	mov	r5,r3
    2fbc:	31b220c4 	addi	r6,r6,-14205
    2fc0:	39d7cc04 	addi	r7,r7,24368
    2fc4:	102d883a 	mov	r22,r2
    2fc8:	182b883a 	mov	r21,r3
    2fcc:	00062bc0 	call	62bc <__muldf3>
    2fd0:	000d883a 	mov	r6,zero
    2fd4:	01cff834 	movhi	r7,16352
    2fd8:	1009883a 	mov	r4,r2
    2fdc:	180b883a 	mov	r5,r3
    2fe0:	0004f100 	call	4f10 <__adddf3>
    2fe4:	180b883a 	mov	r5,r3
    2fe8:	1009883a 	mov	r4,r2
    2fec:	00072b00 	call	72b0 <__fixdfsi>
    2ff0:	1009883a 	mov	r4,r2
    2ff4:	1025883a 	mov	r18,r2
    2ff8:	00073380 	call	7338 <__floatsidf>
    2ffc:	01cffe74 	movhi	r7,16377
    3000:	1009883a 	mov	r4,r2
    3004:	180b883a 	mov	r5,r3
    3008:	39c87ec4 	addi	r7,r7,8699
    300c:	01951034 	movhi	r6,21568
    3010:	1029883a 	mov	r20,r2
    3014:	1827883a 	mov	r19,r3
    3018:	00062bc0 	call	62bc <__muldf3>
    301c:	b009883a 	mov	r4,r22
    3020:	a80b883a 	mov	r5,r21
    3024:	100d883a 	mov	r6,r2
    3028:	180f883a 	mov	r7,r3
    302c:	00069e00 	call	69e0 <__subdf3>
    3030:	018698b4 	movhi	r6,6754
    3034:	01cf7474 	movhi	r7,15825
    3038:	a009883a 	mov	r4,r20
    303c:	3198cc44 	addi	r6,r6,25393
    3040:	39ed1844 	addi	r7,r7,-19359
    3044:	980b883a 	mov	r5,r19
    3048:	1039883a 	mov	fp,r2
    304c:	d8c00815 	stw	r3,32(sp)
    3050:	00062bc0 	call	62bc <__muldf3>
    3054:	010007c4 	movi	r4,31
    3058:	e017883a 	mov	r11,fp
    305c:	da800817 	ldw	r10,32(sp)
    3060:	102d883a 	mov	r22,r2
    3064:	182b883a 	mov	r21,r3
    3068:	24802816 	blt	r4,r18,310c <__ieee754_rem_pio2+0x47c>
    306c:	927fffc4 	addi	r9,r18,-1
    3070:	4a53883a 	add	r9,r9,r9
    3074:	010000b4 	movhi	r4,2
    3078:	212e2a04 	addi	r4,r4,-18264
    307c:	4a53883a 	add	r9,r9,r9
    3080:	2253883a 	add	r9,r4,r9
    3084:	49000017 	ldw	r4,0(r9)
    3088:	25c02026 	beq	r4,r23,310c <__ieee754_rem_pio2+0x47c>
    308c:	e009883a 	mov	r4,fp
    3090:	500b883a 	mov	r5,r10
    3094:	100d883a 	mov	r6,r2
    3098:	180f883a 	mov	r7,r3
    309c:	da800b15 	stw	r10,44(sp)
    30a0:	df000a15 	stw	fp,40(sp)
    30a4:	00069e00 	call	69e0 <__subdf3>
    30a8:	da800b17 	ldw	r10,44(sp)
    30ac:	dac00a17 	ldw	r11,40(sp)
    30b0:	1019883a 	mov	r12,r2
    30b4:	1813883a 	mov	r9,r3
    30b8:	80800015 	stw	r2,0(r16)
    30bc:	80c00115 	stw	r3,4(r16)
    30c0:	600d883a 	mov	r6,r12
    30c4:	480f883a 	mov	r7,r9
    30c8:	5809883a 	mov	r4,r11
    30cc:	500b883a 	mov	r5,r10
    30d0:	da400b15 	stw	r9,44(sp)
    30d4:	db000a15 	stw	r12,40(sp)
    30d8:	00069e00 	call	69e0 <__subdf3>
    30dc:	1009883a 	mov	r4,r2
    30e0:	180b883a 	mov	r5,r3
    30e4:	b00d883a 	mov	r6,r22
    30e8:	a80f883a 	mov	r7,r21
    30ec:	00069e00 	call	69e0 <__subdf3>
    30f0:	80800215 	stw	r2,8(r16)
    30f4:	80c00315 	stw	r3,12(r16)
    30f8:	da400b17 	ldw	r9,44(sp)
    30fc:	db000a17 	ldw	r12,40(sp)
    3100:	88009f16 	blt	r17,zero,3380 <__ieee754_rem_pio2+0x6f0>
    3104:	9005883a 	mov	r2,r18
    3108:	003f7106 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    310c:	d9400817 	ldw	r5,32(sp)
    3110:	e009883a 	mov	r4,fp
    3114:	100d883a 	mov	r6,r2
    3118:	180f883a 	mov	r7,r3
    311c:	da800b15 	stw	r10,44(sp)
    3120:	dac00a15 	stw	r11,40(sp)
    3124:	00069e00 	call	69e0 <__subdf3>
    3128:	1019883a 	mov	r12,r2
    312c:	1804d53a 	srli	r2,r3,20
    3130:	b811d53a 	srai	r8,r23,20
    3134:	1813883a 	mov	r9,r3
    3138:	1081ffcc 	andi	r2,r2,2047
    313c:	80c00115 	stw	r3,4(r16)
    3140:	83000015 	stw	r12,0(r16)
    3144:	4085c83a 	sub	r2,r8,r2
    3148:	00c00404 	movi	r3,16
    314c:	da800b17 	ldw	r10,44(sp)
    3150:	dac00a17 	ldw	r11,40(sp)
    3154:	18bfda0e 	bge	r3,r2,30c0 <__alt_mem_Flash_flash_data+0xf40030c0>
    3158:	01cf7474 	movhi	r7,15825
    315c:	39ed1844 	addi	r7,r7,-19359
    3160:	a009883a 	mov	r4,r20
    3164:	980b883a 	mov	r5,r19
    3168:	01869834 	movhi	r6,6752
    316c:	da000a15 	stw	r8,40(sp)
    3170:	00062bc0 	call	62bc <__muldf3>
    3174:	d9400817 	ldw	r5,32(sp)
    3178:	e009883a 	mov	r4,fp
    317c:	100d883a 	mov	r6,r2
    3180:	180f883a 	mov	r7,r3
    3184:	102d883a 	mov	r22,r2
    3188:	182b883a 	mov	r21,r3
    318c:	00069e00 	call	69e0 <__subdf3>
    3190:	d9400817 	ldw	r5,32(sp)
    3194:	e009883a 	mov	r4,fp
    3198:	100d883a 	mov	r6,r2
    319c:	180f883a 	mov	r7,r3
    31a0:	182f883a 	mov	r23,r3
    31a4:	d8800915 	stw	r2,36(sp)
    31a8:	00069e00 	call	69e0 <__subdf3>
    31ac:	b00d883a 	mov	r6,r22
    31b0:	a80f883a 	mov	r7,r21
    31b4:	1009883a 	mov	r4,r2
    31b8:	180b883a 	mov	r5,r3
    31bc:	00069e00 	call	69e0 <__subdf3>
    31c0:	018b80f4 	movhi	r6,11779
    31c4:	01cee8f4 	movhi	r7,15267
    31c8:	a009883a 	mov	r4,r20
    31cc:	980b883a 	mov	r5,r19
    31d0:	319c1cc4 	addi	r6,r6,28787
    31d4:	39c66284 	addi	r7,r7,6538
    31d8:	102d883a 	mov	r22,r2
    31dc:	182b883a 	mov	r21,r3
    31e0:	00062bc0 	call	62bc <__muldf3>
    31e4:	b00d883a 	mov	r6,r22
    31e8:	a80f883a 	mov	r7,r21
    31ec:	1009883a 	mov	r4,r2
    31f0:	180b883a 	mov	r5,r3
    31f4:	00069e00 	call	69e0 <__subdf3>
    31f8:	d9000917 	ldw	r4,36(sp)
    31fc:	b80b883a 	mov	r5,r23
    3200:	100d883a 	mov	r6,r2
    3204:	180f883a 	mov	r7,r3
    3208:	102d883a 	mov	r22,r2
    320c:	182b883a 	mov	r21,r3
    3210:	00069e00 	call	69e0 <__subdf3>
    3214:	1019883a 	mov	r12,r2
    3218:	1804d53a 	srli	r2,r3,20
    321c:	da000a17 	ldw	r8,40(sp)
    3220:	83000015 	stw	r12,0(r16)
    3224:	1081ffcc 	andi	r2,r2,2047
    3228:	4091c83a 	sub	r8,r8,r2
    322c:	80c00115 	stw	r3,4(r16)
    3230:	00800c44 	movi	r2,49
    3234:	1813883a 	mov	r9,r3
    3238:	1200790e 	bge	r2,r8,3420 <__ieee754_rem_pio2+0x790>
    323c:	01cee8f4 	movhi	r7,15267
    3240:	39c66284 	addi	r7,r7,6538
    3244:	a009883a 	mov	r4,r20
    3248:	980b883a 	mov	r5,r19
    324c:	018b8034 	movhi	r6,11776
    3250:	00062bc0 	call	62bc <__muldf3>
    3254:	d9000917 	ldw	r4,36(sp)
    3258:	b80b883a 	mov	r5,r23
    325c:	100d883a 	mov	r6,r2
    3260:	180f883a 	mov	r7,r3
    3264:	102d883a 	mov	r22,r2
    3268:	182b883a 	mov	r21,r3
    326c:	00069e00 	call	69e0 <__subdf3>
    3270:	d9000917 	ldw	r4,36(sp)
    3274:	b80b883a 	mov	r5,r23
    3278:	100d883a 	mov	r6,r2
    327c:	180f883a 	mov	r7,r3
    3280:	d8c00b15 	stw	r3,44(sp)
    3284:	d8800a15 	stw	r2,40(sp)
    3288:	00069e00 	call	69e0 <__subdf3>
    328c:	b00d883a 	mov	r6,r22
    3290:	a80f883a 	mov	r7,r21
    3294:	1009883a 	mov	r4,r2
    3298:	180b883a 	mov	r5,r3
    329c:	00069e00 	call	69e0 <__subdf3>
    32a0:	01894834 	movhi	r6,9504
    32a4:	01ce5f34 	movhi	r7,14716
    32a8:	a009883a 	mov	r4,r20
    32ac:	980b883a 	mov	r5,r19
    32b0:	31927044 	addi	r6,r6,18881
    32b4:	39e0e684 	addi	r7,r7,-31846
    32b8:	102d883a 	mov	r22,r2
    32bc:	182b883a 	mov	r21,r3
    32c0:	00062bc0 	call	62bc <__muldf3>
    32c4:	b00d883a 	mov	r6,r22
    32c8:	a80f883a 	mov	r7,r21
    32cc:	1009883a 	mov	r4,r2
    32d0:	180b883a 	mov	r5,r3
    32d4:	00069e00 	call	69e0 <__subdf3>
    32d8:	dac00a17 	ldw	r11,40(sp)
    32dc:	da800b17 	ldw	r10,44(sp)
    32e0:	102d883a 	mov	r22,r2
    32e4:	182b883a 	mov	r21,r3
    32e8:	5809883a 	mov	r4,r11
    32ec:	500b883a 	mov	r5,r10
    32f0:	100d883a 	mov	r6,r2
    32f4:	180f883a 	mov	r7,r3
    32f8:	003f6a06 	br	30a4 <__alt_mem_Flash_flash_data+0xf40030a4>
    32fc:	0004f100 	call	4f10 <__adddf3>
    3300:	1025883a 	mov	r18,r2
    3304:	008ffe74 	movhi	r2,16377
    3308:	10887ec4 	addi	r2,r2,8699
    330c:	1823883a 	mov	r17,r3
    3310:	b8802226 	beq	r23,r2,339c <__ieee754_rem_pio2+0x70c>
    3314:	018698b4 	movhi	r6,6754
    3318:	01cf7474 	movhi	r7,15825
    331c:	3198cc44 	addi	r6,r6,25393
    3320:	39ed1844 	addi	r7,r7,-19359
    3324:	9009883a 	mov	r4,r18
    3328:	180b883a 	mov	r5,r3
    332c:	0004f100 	call	4f10 <__adddf3>
    3330:	100d883a 	mov	r6,r2
    3334:	180f883a 	mov	r7,r3
    3338:	9009883a 	mov	r4,r18
    333c:	880b883a 	mov	r5,r17
    3340:	80800015 	stw	r2,0(r16)
    3344:	80c00115 	stw	r3,4(r16)
    3348:	00069e00 	call	69e0 <__subdf3>
    334c:	018698b4 	movhi	r6,6754
    3350:	01cf7474 	movhi	r7,15825
    3354:	1009883a 	mov	r4,r2
    3358:	180b883a 	mov	r5,r3
    335c:	3198cc44 	addi	r6,r6,25393
    3360:	39ed1844 	addi	r7,r7,-19359
    3364:	0004f100 	call	4f10 <__adddf3>
    3368:	80800215 	stw	r2,8(r16)
    336c:	80c00315 	stw	r3,12(r16)
    3370:	00bfffc4 	movi	r2,-1
    3374:	003ed606 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    3378:	01c000c4 	movi	r7,3
    337c:	003ebd06 	br	2e74 <__alt_mem_Flash_flash_data+0xf4002e74>
    3380:	4a60003c 	xorhi	r9,r9,32768
    3384:	18e0003c 	xorhi	r3,r3,32768
    3388:	83000015 	stw	r12,0(r16)
    338c:	82400115 	stw	r9,4(r16)
    3390:	80c00315 	stw	r3,12(r16)
    3394:	0485c83a 	sub	r2,zero,r18
    3398:	003ecd06 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    339c:	01cf7474 	movhi	r7,15825
    33a0:	9009883a 	mov	r4,r18
    33a4:	39ed1844 	addi	r7,r7,-19359
    33a8:	01869834 	movhi	r6,6752
    33ac:	180b883a 	mov	r5,r3
    33b0:	0004f100 	call	4f10 <__adddf3>
    33b4:	018b80f4 	movhi	r6,11779
    33b8:	01cee8f4 	movhi	r7,15267
    33bc:	1009883a 	mov	r4,r2
    33c0:	180b883a 	mov	r5,r3
    33c4:	319c1cc4 	addi	r6,r6,28787
    33c8:	39c66284 	addi	r7,r7,6538
    33cc:	1025883a 	mov	r18,r2
    33d0:	1823883a 	mov	r17,r3
    33d4:	0004f100 	call	4f10 <__adddf3>
    33d8:	100d883a 	mov	r6,r2
    33dc:	180f883a 	mov	r7,r3
    33e0:	9009883a 	mov	r4,r18
    33e4:	880b883a 	mov	r5,r17
    33e8:	80800015 	stw	r2,0(r16)
    33ec:	80c00115 	stw	r3,4(r16)
    33f0:	00069e00 	call	69e0 <__subdf3>
    33f4:	018b80f4 	movhi	r6,11779
    33f8:	01cee8f4 	movhi	r7,15267
    33fc:	1009883a 	mov	r4,r2
    3400:	180b883a 	mov	r5,r3
    3404:	319c1cc4 	addi	r6,r6,28787
    3408:	39c66284 	addi	r7,r7,6538
    340c:	0004f100 	call	4f10 <__adddf3>
    3410:	80800215 	stw	r2,8(r16)
    3414:	80c00315 	stw	r3,12(r16)
    3418:	00bfffc4 	movi	r2,-1
    341c:	003eac06 	br	2ed0 <__alt_mem_Flash_flash_data+0xf4002ed0>
    3420:	dac00917 	ldw	r11,36(sp)
    3424:	b815883a 	mov	r10,r23
    3428:	003f2506 	br	30c0 <__alt_mem_Flash_flash_data+0xf40030c0>

0000342c <__kernel_cos>:
    342c:	defff304 	addi	sp,sp,-52
    3430:	dc000315 	stw	r16,12(sp)
    3434:	04200034 	movhi	r16,32768
    3438:	843fffc4 	addi	r16,r16,-1
    343c:	008f9034 	movhi	r2,15936
    3440:	df000b15 	stw	fp,44(sp)
    3444:	ddc00a15 	stw	r23,40(sp)
    3448:	dd800915 	stw	r22,36(sp)
    344c:	dcc00615 	stw	r19,24(sp)
    3450:	dfc00c15 	stw	ra,48(sp)
    3454:	dd400815 	stw	r21,32(sp)
    3458:	dd000715 	stw	r20,28(sp)
    345c:	dc800515 	stw	r18,20(sp)
    3460:	dc400415 	stw	r17,16(sp)
    3464:	2c20703a 	and	r16,r5,r16
    3468:	10bfffc4 	addi	r2,r2,-1
    346c:	2827883a 	mov	r19,r5
    3470:	202d883a 	mov	r22,r4
    3474:	302f883a 	mov	r23,r6
    3478:	3839883a 	mov	fp,r7
    347c:	14007516 	blt	r2,r16,3654 <__kernel_cos+0x228>
    3480:	00072b00 	call	72b0 <__fixdfsi>
    3484:	10010f26 	beq	r2,zero,38c4 <__kernel_cos+0x498>
    3488:	b00d883a 	mov	r6,r22
    348c:	980f883a 	mov	r7,r19
    3490:	b009883a 	mov	r4,r22
    3494:	980b883a 	mov	r5,r19
    3498:	00062bc0 	call	62bc <__muldf3>
    349c:	01afa234 	movhi	r6,48776
    34a0:	01ef6a74 	movhi	r7,48553
    34a4:	1009883a 	mov	r4,r2
    34a8:	180b883a 	mov	r5,r3
    34ac:	318e3504 	addi	r6,r6,14548
    34b0:	39feba44 	addi	r7,r7,-1303
    34b4:	102b883a 	mov	r21,r2
    34b8:	1829883a 	mov	r20,r3
    34bc:	00062bc0 	call	62bc <__muldf3>
    34c0:	01af6d74 	movhi	r6,48565
    34c4:	01cf88b4 	movhi	r7,15906
    34c8:	1009883a 	mov	r4,r2
    34cc:	180b883a 	mov	r5,r3
    34d0:	31ac7104 	addi	r6,r6,-20028
    34d4:	39fba784 	addi	r7,r7,-4450
    34d8:	0004f100 	call	4f10 <__adddf3>
    34dc:	1009883a 	mov	r4,r2
    34e0:	180b883a 	mov	r5,r3
    34e4:	a80d883a 	mov	r6,r21
    34e8:	a00f883a 	mov	r7,r20
    34ec:	00062bc0 	call	62bc <__muldf3>
    34f0:	01a02734 	movhi	r6,32924
    34f4:	01cfa4b4 	movhi	r7,16018
    34f8:	1009883a 	mov	r4,r2
    34fc:	180b883a 	mov	r5,r3
    3500:	3194ab44 	addi	r6,r6,21165
    3504:	39df93c4 	addi	r7,r7,32335
    3508:	00069e00 	call	69e0 <__subdf3>
    350c:	1009883a 	mov	r4,r2
    3510:	180b883a 	mov	r5,r3
    3514:	a80d883a 	mov	r6,r21
    3518:	a00f883a 	mov	r7,r20
    351c:	00062bc0 	call	62bc <__muldf3>
    3520:	018672f4 	movhi	r6,6603
    3524:	01cfbeb4 	movhi	r7,16122
    3528:	1009883a 	mov	r4,r2
    352c:	180b883a 	mov	r5,r3
    3530:	31856404 	addi	r6,r6,5520
    3534:	39c06804 	addi	r7,r7,416
    3538:	0004f100 	call	4f10 <__adddf3>
    353c:	1009883a 	mov	r4,r2
    3540:	180b883a 	mov	r5,r3
    3544:	a80d883a 	mov	r6,r21
    3548:	a00f883a 	mov	r7,r20
    354c:	00062bc0 	call	62bc <__muldf3>
    3550:	0185b074 	movhi	r6,5825
    3554:	01cfd5f4 	movhi	r7,16215
    3558:	1009883a 	mov	r4,r2
    355c:	180b883a 	mov	r5,r3
    3560:	31945dc4 	addi	r6,r6,20855
    3564:	39f05b04 	addi	r7,r7,-16020
    3568:	00069e00 	call	69e0 <__subdf3>
    356c:	1009883a 	mov	r4,r2
    3570:	180b883a 	mov	r5,r3
    3574:	a80d883a 	mov	r6,r21
    3578:	a00f883a 	mov	r7,r20
    357c:	00062bc0 	call	62bc <__muldf3>
    3580:	01955574 	movhi	r6,21845
    3584:	01cfe974 	movhi	r7,16293
    3588:	1009883a 	mov	r4,r2
    358c:	180b883a 	mov	r5,r3
    3590:	31955304 	addi	r6,r6,21836
    3594:	39d55544 	addi	r7,r7,21845
    3598:	0004f100 	call	4f10 <__adddf3>
    359c:	1009883a 	mov	r4,r2
    35a0:	180b883a 	mov	r5,r3
    35a4:	a80d883a 	mov	r6,r21
    35a8:	a00f883a 	mov	r7,r20
    35ac:	00062bc0 	call	62bc <__muldf3>
    35b0:	1017883a 	mov	r11,r2
    35b4:	1815883a 	mov	r10,r3
    35b8:	a809883a 	mov	r4,r21
    35bc:	a00b883a 	mov	r5,r20
    35c0:	000d883a 	mov	r6,zero
    35c4:	01cff834 	movhi	r7,16352
    35c8:	da800215 	stw	r10,8(sp)
    35cc:	dac00115 	stw	r11,4(sp)
    35d0:	00062bc0 	call	62bc <__muldf3>
    35d4:	dac00117 	ldw	r11,4(sp)
    35d8:	da800217 	ldw	r10,8(sp)
    35dc:	a809883a 	mov	r4,r21
    35e0:	580d883a 	mov	r6,r11
    35e4:	500f883a 	mov	r7,r10
    35e8:	a00b883a 	mov	r5,r20
    35ec:	1023883a 	mov	r17,r2
    35f0:	1821883a 	mov	r16,r3
    35f4:	00062bc0 	call	62bc <__muldf3>
    35f8:	b009883a 	mov	r4,r22
    35fc:	980b883a 	mov	r5,r19
    3600:	b80d883a 	mov	r6,r23
    3604:	e00f883a 	mov	r7,fp
    3608:	1029883a 	mov	r20,r2
    360c:	1825883a 	mov	r18,r3
    3610:	00062bc0 	call	62bc <__muldf3>
    3614:	a009883a 	mov	r4,r20
    3618:	900b883a 	mov	r5,r18
    361c:	100d883a 	mov	r6,r2
    3620:	180f883a 	mov	r7,r3
    3624:	00069e00 	call	69e0 <__subdf3>
    3628:	8809883a 	mov	r4,r17
    362c:	800b883a 	mov	r5,r16
    3630:	100d883a 	mov	r6,r2
    3634:	180f883a 	mov	r7,r3
    3638:	00069e00 	call	69e0 <__subdf3>
    363c:	0009883a 	mov	r4,zero
    3640:	014ffc34 	movhi	r5,16368
    3644:	100d883a 	mov	r6,r2
    3648:	180f883a 	mov	r7,r3
    364c:	00069e00 	call	69e0 <__subdf3>
    3650:	00008b06 	br	3880 <__kernel_cos+0x454>
    3654:	200d883a 	mov	r6,r4
    3658:	280f883a 	mov	r7,r5
    365c:	00062bc0 	call	62bc <__muldf3>
    3660:	01afa234 	movhi	r6,48776
    3664:	01ef6a74 	movhi	r7,48553
    3668:	318e3504 	addi	r6,r6,14548
    366c:	39feba44 	addi	r7,r7,-1303
    3670:	1009883a 	mov	r4,r2
    3674:	180b883a 	mov	r5,r3
    3678:	1025883a 	mov	r18,r2
    367c:	1823883a 	mov	r17,r3
    3680:	00062bc0 	call	62bc <__muldf3>
    3684:	01af6d74 	movhi	r6,48565
    3688:	01cf88b4 	movhi	r7,15906
    368c:	1009883a 	mov	r4,r2
    3690:	180b883a 	mov	r5,r3
    3694:	31ac7104 	addi	r6,r6,-20028
    3698:	39fba784 	addi	r7,r7,-4450
    369c:	0004f100 	call	4f10 <__adddf3>
    36a0:	1009883a 	mov	r4,r2
    36a4:	180b883a 	mov	r5,r3
    36a8:	900d883a 	mov	r6,r18
    36ac:	880f883a 	mov	r7,r17
    36b0:	00062bc0 	call	62bc <__muldf3>
    36b4:	01a02734 	movhi	r6,32924
    36b8:	01cfa4b4 	movhi	r7,16018
    36bc:	1009883a 	mov	r4,r2
    36c0:	180b883a 	mov	r5,r3
    36c4:	3194ab44 	addi	r6,r6,21165
    36c8:	39df93c4 	addi	r7,r7,32335
    36cc:	00069e00 	call	69e0 <__subdf3>
    36d0:	1009883a 	mov	r4,r2
    36d4:	180b883a 	mov	r5,r3
    36d8:	900d883a 	mov	r6,r18
    36dc:	880f883a 	mov	r7,r17
    36e0:	00062bc0 	call	62bc <__muldf3>
    36e4:	018672f4 	movhi	r6,6603
    36e8:	01cfbeb4 	movhi	r7,16122
    36ec:	1009883a 	mov	r4,r2
    36f0:	180b883a 	mov	r5,r3
    36f4:	31856404 	addi	r6,r6,5520
    36f8:	39c06804 	addi	r7,r7,416
    36fc:	0004f100 	call	4f10 <__adddf3>
    3700:	1009883a 	mov	r4,r2
    3704:	180b883a 	mov	r5,r3
    3708:	900d883a 	mov	r6,r18
    370c:	880f883a 	mov	r7,r17
    3710:	00062bc0 	call	62bc <__muldf3>
    3714:	0185b074 	movhi	r6,5825
    3718:	01cfd5f4 	movhi	r7,16215
    371c:	1009883a 	mov	r4,r2
    3720:	180b883a 	mov	r5,r3
    3724:	31945dc4 	addi	r6,r6,20855
    3728:	39f05b04 	addi	r7,r7,-16020
    372c:	00069e00 	call	69e0 <__subdf3>
    3730:	1009883a 	mov	r4,r2
    3734:	180b883a 	mov	r5,r3
    3738:	900d883a 	mov	r6,r18
    373c:	880f883a 	mov	r7,r17
    3740:	00062bc0 	call	62bc <__muldf3>
    3744:	01955574 	movhi	r6,21845
    3748:	01cfe974 	movhi	r7,16293
    374c:	1009883a 	mov	r4,r2
    3750:	180b883a 	mov	r5,r3
    3754:	31955304 	addi	r6,r6,21836
    3758:	39d55544 	addi	r7,r7,21845
    375c:	0004f100 	call	4f10 <__adddf3>
    3760:	1009883a 	mov	r4,r2
    3764:	180b883a 	mov	r5,r3
    3768:	900d883a 	mov	r6,r18
    376c:	880f883a 	mov	r7,r17
    3770:	00062bc0 	call	62bc <__muldf3>
    3774:	1013883a 	mov	r9,r2
    3778:	1017883a 	mov	r11,r2
    377c:	008ff4f4 	movhi	r2,16339
    3780:	108ccc84 	addi	r2,r2,13106
    3784:	902b883a 	mov	r21,r18
    3788:	8829883a 	mov	r20,r17
    378c:	1811883a 	mov	r8,r3
    3790:	1815883a 	mov	r10,r3
    3794:	143f880e 	bge	r2,r16,35b8 <__alt_mem_Flash_flash_data+0xf40035b8>
    3798:	008ffa74 	movhi	r2,16361
    379c:	14004416 	blt	r2,r16,38b0 <__kernel_cos+0x484>
    37a0:	00bff834 	movhi	r2,65504
    37a4:	80a1883a 	add	r16,r16,r2
    37a8:	0009883a 	mov	r4,zero
    37ac:	014ffc34 	movhi	r5,16368
    37b0:	000d883a 	mov	r6,zero
    37b4:	800f883a 	mov	r7,r16
    37b8:	da400115 	stw	r9,4(sp)
    37bc:	d8c00215 	stw	r3,8(sp)
    37c0:	00069e00 	call	69e0 <__subdf3>
    37c4:	da000217 	ldw	r8,8(sp)
    37c8:	da400117 	ldw	r9,4(sp)
    37cc:	102b883a 	mov	r21,r2
    37d0:	d8c00015 	stw	r3,0(sp)
    37d4:	9009883a 	mov	r4,r18
    37d8:	880b883a 	mov	r5,r17
    37dc:	000d883a 	mov	r6,zero
    37e0:	01cff834 	movhi	r7,16352
    37e4:	da000215 	stw	r8,8(sp)
    37e8:	da400115 	stw	r9,4(sp)
    37ec:	00062bc0 	call	62bc <__muldf3>
    37f0:	800f883a 	mov	r7,r16
    37f4:	1009883a 	mov	r4,r2
    37f8:	180b883a 	mov	r5,r3
    37fc:	000d883a 	mov	r6,zero
    3800:	00069e00 	call	69e0 <__subdf3>
    3804:	da400117 	ldw	r9,4(sp)
    3808:	da000217 	ldw	r8,8(sp)
    380c:	9009883a 	mov	r4,r18
    3810:	480d883a 	mov	r6,r9
    3814:	400f883a 	mov	r7,r8
    3818:	880b883a 	mov	r5,r17
    381c:	1029883a 	mov	r20,r2
    3820:	1821883a 	mov	r16,r3
    3824:	00062bc0 	call	62bc <__muldf3>
    3828:	b009883a 	mov	r4,r22
    382c:	980b883a 	mov	r5,r19
    3830:	b80d883a 	mov	r6,r23
    3834:	e00f883a 	mov	r7,fp
    3838:	1025883a 	mov	r18,r2
    383c:	1823883a 	mov	r17,r3
    3840:	00062bc0 	call	62bc <__muldf3>
    3844:	9009883a 	mov	r4,r18
    3848:	880b883a 	mov	r5,r17
    384c:	100d883a 	mov	r6,r2
    3850:	180f883a 	mov	r7,r3
    3854:	00069e00 	call	69e0 <__subdf3>
    3858:	a009883a 	mov	r4,r20
    385c:	800b883a 	mov	r5,r16
    3860:	100d883a 	mov	r6,r2
    3864:	180f883a 	mov	r7,r3
    3868:	00069e00 	call	69e0 <__subdf3>
    386c:	d9400017 	ldw	r5,0(sp)
    3870:	a809883a 	mov	r4,r21
    3874:	100d883a 	mov	r6,r2
    3878:	180f883a 	mov	r7,r3
    387c:	00069e00 	call	69e0 <__subdf3>
    3880:	dfc00c17 	ldw	ra,48(sp)
    3884:	df000b17 	ldw	fp,44(sp)
    3888:	ddc00a17 	ldw	r23,40(sp)
    388c:	dd800917 	ldw	r22,36(sp)
    3890:	dd400817 	ldw	r21,32(sp)
    3894:	dd000717 	ldw	r20,28(sp)
    3898:	dcc00617 	ldw	r19,24(sp)
    389c:	dc800517 	ldw	r18,20(sp)
    38a0:	dc400417 	ldw	r17,16(sp)
    38a4:	dc000317 	ldw	r16,12(sp)
    38a8:	dec00d04 	addi	sp,sp,52
    38ac:	f800283a 	ret
    38b0:	008ff9f4 	movhi	r2,16359
    38b4:	002b883a 	mov	r21,zero
    38b8:	d8800015 	stw	r2,0(sp)
    38bc:	040ff4b4 	movhi	r16,16338
    38c0:	003fc406 	br	37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    38c4:	0005883a 	mov	r2,zero
    38c8:	00cffc34 	movhi	r3,16368
    38cc:	003fec06 	br	3880 <__alt_mem_Flash_flash_data+0xf4003880>

000038d0 <__kernel_rem_pio2>:
    38d0:	deff5b04 	addi	sp,sp,-660
    38d4:	da00a517 	ldw	r8,660(sp)
    38d8:	00c000b4 	movhi	r3,2
    38dc:	18ee9c04 	addi	r3,r3,-17808
    38e0:	4205883a 	add	r2,r8,r8
    38e4:	1085883a 	add	r2,r2,r2
    38e8:	1885883a 	add	r2,r3,r2
    38ec:	d9008d15 	stw	r4,564(sp)
    38f0:	d9409015 	stw	r5,576(sp)
    38f4:	313fff44 	addi	r4,r6,-3
    38f8:	01400604 	movi	r5,24
    38fc:	dd80a115 	stw	r22,644(sp)
    3900:	dc009b15 	stw	r16,620(sp)
    3904:	dfc0a415 	stw	ra,656(sp)
    3908:	df00a315 	stw	fp,652(sp)
    390c:	ddc0a215 	stw	r23,648(sp)
    3910:	dd40a015 	stw	r21,640(sp)
    3914:	dd009f15 	stw	r20,636(sp)
    3918:	dcc09e15 	stw	r19,632(sp)
    391c:	dc809d15 	stw	r18,628(sp)
    3920:	dc409c15 	stw	r17,624(sp)
    3924:	3021883a 	mov	r16,r6
    3928:	d9c09315 	stw	r7,588(sp)
    392c:	15800017 	ldw	r22,0(r2)
    3930:	0004d1c0 	call	4d1c <__divsi3>
    3934:	da009317 	ldw	r8,588(sp)
    3938:	d8809215 	stw	r2,584(sp)
    393c:	423fffc4 	addi	r8,r8,-1
    3940:	da008c15 	stw	r8,560(sp)
    3944:	10032a16 	blt	r2,zero,45f0 <__kernel_rem_pio2+0xd20>
    3948:	da009217 	ldw	r8,584(sp)
    394c:	d9009217 	ldw	r4,584(sp)
    3950:	0206303a 	nor	r3,zero,r8
    3954:	18c00624 	muli	r3,r3,24
    3958:	da008c17 	ldw	r8,560(sp)
    395c:	1c07883a 	add	r3,r3,r16
    3960:	4585883a 	add	r2,r8,r22
    3964:	d8c08f15 	stw	r3,572(sp)
    3968:	2223c83a 	sub	r17,r4,r8
    396c:	10001016 	blt	r2,zero,39b0 <__kernel_rem_pio2+0xe0>
    3970:	da00a617 	ldw	r8,664(sp)
    3974:	8c65883a 	add	r18,r17,r17
    3978:	94a5883a 	add	r18,r18,r18
    397c:	8885883a 	add	r2,r17,r2
    3980:	dcc05004 	addi	r19,sp,320
    3984:	44a5883a 	add	r18,r8,r18
    3988:	14000044 	addi	r16,r2,1
    398c:	88014516 	blt	r17,zero,3ea4 <__kernel_rem_pio2+0x5d4>
    3990:	91000017 	ldw	r4,0(r18)
    3994:	00073380 	call	7338 <__floatsidf>
    3998:	98800015 	stw	r2,0(r19)
    399c:	98c00115 	stw	r3,4(r19)
    39a0:	8c400044 	addi	r17,r17,1
    39a4:	9cc00204 	addi	r19,r19,8
    39a8:	94800104 	addi	r18,r18,4
    39ac:	8c3ff71e 	bne	r17,r16,398c <__alt_mem_Flash_flash_data+0xf400398c>
    39b0:	b0002116 	blt	r22,zero,3a38 <__kernel_rem_pio2+0x168>
    39b4:	da009317 	ldw	r8,588(sp)
    39b8:	b02490fa 	slli	r18,r22,3
    39bc:	d8805004 	addi	r2,sp,320
    39c0:	402e90fa 	slli	r23,r8,3
    39c4:	d823883a 	mov	r17,sp
    39c8:	dc004e04 	addi	r16,sp,312
    39cc:	14b9883a 	add	fp,r2,r18
    39d0:	da008c17 	ldw	r8,560(sp)
    39d4:	40015816 	blt	r8,zero,3f38 <__kernel_rem_pio2+0x668>
    39d8:	dcc08d17 	ldw	r19,564(sp)
    39dc:	85e5883a 	add	r18,r16,r23
    39e0:	002b883a 	mov	r21,zero
    39e4:	0029883a 	mov	r20,zero
    39e8:	99000017 	ldw	r4,0(r19)
    39ec:	99400117 	ldw	r5,4(r19)
    39f0:	91800017 	ldw	r6,0(r18)
    39f4:	91c00117 	ldw	r7,4(r18)
    39f8:	94bffe04 	addi	r18,r18,-8
    39fc:	9cc00204 	addi	r19,r19,8
    3a00:	00062bc0 	call	62bc <__muldf3>
    3a04:	a809883a 	mov	r4,r21
    3a08:	a00b883a 	mov	r5,r20
    3a0c:	100d883a 	mov	r6,r2
    3a10:	180f883a 	mov	r7,r3
    3a14:	0004f100 	call	4f10 <__adddf3>
    3a18:	102b883a 	mov	r21,r2
    3a1c:	1829883a 	mov	r20,r3
    3a20:	84bff11e 	bne	r16,r18,39e8 <__alt_mem_Flash_flash_data+0xf40039e8>
    3a24:	8d400015 	stw	r21,0(r17)
    3a28:	8d000115 	stw	r20,4(r17)
    3a2c:	84000204 	addi	r16,r16,8
    3a30:	8c400204 	addi	r17,r17,8
    3a34:	873fe61e 	bne	r16,fp,39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3a38:	da009317 	ldw	r8,588(sp)
    3a3c:	b00690ba 	slli	r3,r22,2
    3a40:	b0bfffc4 	addi	r2,r22,-1
    3a44:	423ffe24 	muli	r8,r8,-8
    3a48:	193fff04 	addi	r4,r3,-4
    3a4c:	1085883a 	add	r2,r2,r2
    3a50:	da008e15 	stw	r8,568(sp)
    3a54:	18fffe04 	addi	r3,r3,-8
    3a58:	da007804 	addi	r8,sp,480
    3a5c:	40d1883a 	add	r8,r8,r3
    3a60:	1085883a 	add	r2,r2,r2
    3a64:	d885883a 	add	r2,sp,r2
    3a68:	da009515 	stw	r8,596(sp)
    3a6c:	da007804 	addi	r8,sp,480
    3a70:	4111883a 	add	r8,r8,r4
    3a74:	10807804 	addi	r2,r2,480
    3a78:	da009615 	stw	r8,600(sp)
    3a7c:	b021883a 	mov	r16,r22
    3a80:	d8809715 	stw	r2,604(sp)
    3a84:	dd809415 	stw	r22,592(sp)
    3a88:	800490fa 	slli	r2,r16,3
    3a8c:	d885883a 	add	r2,sp,r2
    3a90:	15c00017 	ldw	r23,0(r2)
    3a94:	15000117 	ldw	r20,4(r2)
    3a98:	04002d0e 	bge	zero,r16,3b50 <__kernel_rem_pio2+0x280>
    3a9c:	00880034 	movhi	r2,8192
    3aa0:	10bfffc4 	addi	r2,r2,-1
    3aa4:	80a5883a 	add	r18,r16,r2
    3aa8:	902490fa 	slli	r18,r18,3
    3aac:	8423883a 	add	r17,r16,r16
    3ab0:	8c63883a 	add	r17,r17,r17
    3ab4:	dcc07804 	addi	r19,sp,480
    3ab8:	dca5883a 	add	r18,sp,r18
    3abc:	9c63883a 	add	r17,r19,r17
    3ac0:	000d883a 	mov	r6,zero
    3ac4:	01cf9c34 	movhi	r7,15984
    3ac8:	b809883a 	mov	r4,r23
    3acc:	a00b883a 	mov	r5,r20
    3ad0:	00062bc0 	call	62bc <__muldf3>
    3ad4:	180b883a 	mov	r5,r3
    3ad8:	1009883a 	mov	r4,r2
    3adc:	00072b00 	call	72b0 <__fixdfsi>
    3ae0:	1009883a 	mov	r4,r2
    3ae4:	00073380 	call	7338 <__floatsidf>
    3ae8:	1009883a 	mov	r4,r2
    3aec:	180b883a 	mov	r5,r3
    3af0:	000d883a 	mov	r6,zero
    3af4:	01d05c34 	movhi	r7,16752
    3af8:	102d883a 	mov	r22,r2
    3afc:	182b883a 	mov	r21,r3
    3b00:	00062bc0 	call	62bc <__muldf3>
    3b04:	b809883a 	mov	r4,r23
    3b08:	a00b883a 	mov	r5,r20
    3b0c:	100d883a 	mov	r6,r2
    3b10:	180f883a 	mov	r7,r3
    3b14:	00069e00 	call	69e0 <__subdf3>
    3b18:	180b883a 	mov	r5,r3
    3b1c:	1009883a 	mov	r4,r2
    3b20:	00072b00 	call	72b0 <__fixdfsi>
    3b24:	91800017 	ldw	r6,0(r18)
    3b28:	91c00117 	ldw	r7,4(r18)
    3b2c:	98800015 	stw	r2,0(r19)
    3b30:	b009883a 	mov	r4,r22
    3b34:	a80b883a 	mov	r5,r21
    3b38:	0004f100 	call	4f10 <__adddf3>
    3b3c:	9cc00104 	addi	r19,r19,4
    3b40:	102f883a 	mov	r23,r2
    3b44:	1829883a 	mov	r20,r3
    3b48:	94bffe04 	addi	r18,r18,-8
    3b4c:	9c7fdc1e 	bne	r19,r17,3ac0 <__alt_mem_Flash_flash_data+0xf4003ac0>
    3b50:	d9808f17 	ldw	r6,572(sp)
    3b54:	a00b883a 	mov	r5,r20
    3b58:	b809883a 	mov	r4,r23
    3b5c:	0004ac80 	call	4ac8 <scalbn>
    3b60:	000d883a 	mov	r6,zero
    3b64:	01cff034 	movhi	r7,16320
    3b68:	1009883a 	mov	r4,r2
    3b6c:	180b883a 	mov	r5,r3
    3b70:	1025883a 	mov	r18,r2
    3b74:	1823883a 	mov	r17,r3
    3b78:	00062bc0 	call	62bc <__muldf3>
    3b7c:	1009883a 	mov	r4,r2
    3b80:	180b883a 	mov	r5,r3
    3b84:	00048d40 	call	48d4 <floor>
    3b88:	1009883a 	mov	r4,r2
    3b8c:	180b883a 	mov	r5,r3
    3b90:	000d883a 	mov	r6,zero
    3b94:	01d00834 	movhi	r7,16416
    3b98:	00062bc0 	call	62bc <__muldf3>
    3b9c:	100d883a 	mov	r6,r2
    3ba0:	180f883a 	mov	r7,r3
    3ba4:	9009883a 	mov	r4,r18
    3ba8:	880b883a 	mov	r5,r17
    3bac:	00069e00 	call	69e0 <__subdf3>
    3bb0:	180b883a 	mov	r5,r3
    3bb4:	1009883a 	mov	r4,r2
    3bb8:	1825883a 	mov	r18,r3
    3bbc:	1027883a 	mov	r19,r2
    3bc0:	00072b00 	call	72b0 <__fixdfsi>
    3bc4:	1009883a 	mov	r4,r2
    3bc8:	1023883a 	mov	r17,r2
    3bcc:	00073380 	call	7338 <__floatsidf>
    3bd0:	9809883a 	mov	r4,r19
    3bd4:	900b883a 	mov	r5,r18
    3bd8:	100d883a 	mov	r6,r2
    3bdc:	180f883a 	mov	r7,r3
    3be0:	00069e00 	call	69e0 <__subdf3>
    3be4:	da008f17 	ldw	r8,572(sp)
    3be8:	1019883a 	mov	r12,r2
    3bec:	1029883a 	mov	r20,r2
    3bf0:	1817883a 	mov	r11,r3
    3bf4:	0200ae0e 	bge	zero,r8,3eb0 <__kernel_rem_pio2+0x5e0>
    3bf8:	80bfffc4 	addi	r2,r16,-1
    3bfc:	1085883a 	add	r2,r2,r2
    3c00:	1085883a 	add	r2,r2,r2
    3c04:	d885883a 	add	r2,sp,r2
    3c08:	10807804 	addi	r2,r2,480
    3c0c:	11400017 	ldw	r5,0(r2)
    3c10:	01000604 	movi	r4,24
    3c14:	2209c83a 	sub	r4,r4,r8
    3c18:	290dd83a 	sra	r6,r5,r4
    3c1c:	048005c4 	movi	r18,23
    3c20:	9225c83a 	sub	r18,r18,r8
    3c24:	3108983a 	sll	r4,r6,r4
    3c28:	89a3883a 	add	r17,r17,r6
    3c2c:	2909c83a 	sub	r4,r5,r4
    3c30:	24a5d83a 	sra	r18,r4,r18
    3c34:	11000015 	stw	r4,0(r2)
    3c38:	04802a0e 	bge	zero,r18,3ce4 <__kernel_rem_pio2+0x414>
    3c3c:	8c400044 	addi	r17,r17,1
    3c40:	0400c40e 	bge	zero,r16,3f54 <__kernel_rem_pio2+0x684>
    3c44:	01404034 	movhi	r5,256
    3c48:	297fffc4 	addi	r5,r5,-1
    3c4c:	da007804 	addi	r8,sp,480
    3c50:	0015883a 	mov	r10,zero
    3c54:	0027883a 	mov	r19,zero
    3c58:	01004034 	movhi	r4,256
    3c5c:	00000706 	br	3c7c <__kernel_rem_pio2+0x3ac>
    3c60:	208dc83a 	sub	r6,r4,r2
    3c64:	10000226 	beq	r2,zero,3c70 <__kernel_rem_pio2+0x3a0>
    3c68:	41800015 	stw	r6,0(r8)
    3c6c:	04c00044 	movi	r19,1
    3c70:	52800044 	addi	r10,r10,1
    3c74:	42000104 	addi	r8,r8,4
    3c78:	5400080e 	bge	r10,r16,3c9c <__kernel_rem_pio2+0x3cc>
    3c7c:	40800017 	ldw	r2,0(r8)
    3c80:	983ff726 	beq	r19,zero,3c60 <__alt_mem_Flash_flash_data+0xf4003c60>
    3c84:	2885c83a 	sub	r2,r5,r2
    3c88:	40800015 	stw	r2,0(r8)
    3c8c:	52800044 	addi	r10,r10,1
    3c90:	04c00044 	movi	r19,1
    3c94:	42000104 	addi	r8,r8,4
    3c98:	543ff816 	blt	r10,r16,3c7c <__alt_mem_Flash_flash_data+0xf4003c7c>
    3c9c:	da008f17 	ldw	r8,572(sp)
    3ca0:	02000e0e 	bge	zero,r8,3cdc <__kernel_rem_pio2+0x40c>
    3ca4:	00800044 	movi	r2,1
    3ca8:	40808a26 	beq	r8,r2,3ed4 <__kernel_rem_pio2+0x604>
    3cac:	00800084 	movi	r2,2
    3cb0:	40800a1e 	bne	r8,r2,3cdc <__kernel_rem_pio2+0x40c>
    3cb4:	80bfffc4 	addi	r2,r16,-1
    3cb8:	1085883a 	add	r2,r2,r2
    3cbc:	1085883a 	add	r2,r2,r2
    3cc0:	d885883a 	add	r2,sp,r2
    3cc4:	10807804 	addi	r2,r2,480
    3cc8:	11400017 	ldw	r5,0(r2)
    3ccc:	01001034 	movhi	r4,64
    3cd0:	213fffc4 	addi	r4,r4,-1
    3cd4:	2908703a 	and	r4,r5,r4
    3cd8:	11000015 	stw	r4,0(r2)
    3cdc:	00800084 	movi	r2,2
    3ce0:	90805a26 	beq	r18,r2,3e4c <__kernel_rem_pio2+0x57c>
    3ce4:	580b883a 	mov	r5,r11
    3ce8:	a009883a 	mov	r4,r20
    3cec:	000d883a 	mov	r6,zero
    3cf0:	000f883a 	mov	r7,zero
    3cf4:	dac09a15 	stw	r11,616(sp)
    3cf8:	00060780 	call	6078 <__eqdf2>
    3cfc:	dac09a17 	ldw	r11,616(sp)
    3d00:	1000961e 	bne	r2,zero,3f5c <__kernel_rem_pio2+0x68c>
    3d04:	da009417 	ldw	r8,592(sp)
    3d08:	817fffc4 	addi	r5,r16,-1
    3d0c:	2a000b16 	blt	r5,r8,3d3c <__kernel_rem_pio2+0x46c>
    3d10:	800490ba 	slli	r2,r16,2
    3d14:	d9809617 	ldw	r6,600(sp)
    3d18:	d9007804 	addi	r4,sp,480
    3d1c:	10bfff04 	addi	r2,r2,-4
    3d20:	0007883a 	mov	r3,zero
    3d24:	2085883a 	add	r2,r4,r2
    3d28:	11000017 	ldw	r4,0(r2)
    3d2c:	10bfff04 	addi	r2,r2,-4
    3d30:	1906b03a 	or	r3,r3,r4
    3d34:	11bffc1e 	bne	r2,r6,3d28 <__alt_mem_Flash_flash_data+0xf4003d28>
    3d38:	18013c1e 	bne	r3,zero,422c <__kernel_rem_pio2+0x95c>
    3d3c:	da009717 	ldw	r8,604(sp)
    3d40:	40800017 	ldw	r2,0(r8)
    3d44:	1001371e 	bne	r2,zero,4224 <__kernel_rem_pio2+0x954>
    3d48:	d8809517 	ldw	r2,596(sp)
    3d4c:	00c00044 	movi	r3,1
    3d50:	10bfff04 	addi	r2,r2,-4
    3d54:	11000117 	ldw	r4,4(r2)
    3d58:	18c00044 	addi	r3,r3,1
    3d5c:	203ffc26 	beq	r4,zero,3d50 <__alt_mem_Flash_flash_data+0xf4003d50>
    3d60:	80c7883a 	add	r3,r16,r3
    3d64:	80800044 	addi	r2,r16,1
    3d68:	d8c09115 	stw	r3,580(sp)
    3d6c:	18803216 	blt	r3,r2,3e38 <__kernel_rem_pio2+0x568>
    3d70:	da009317 	ldw	r8,588(sp)
    3d74:	8223883a 	add	r17,r16,r8
    3d78:	da009117 	ldw	r8,580(sp)
    3d7c:	882290fa 	slli	r17,r17,3
    3d80:	45000044 	addi	r20,r8,1
    3d84:	da009217 	ldw	r8,584(sp)
    3d88:	a02890fa 	slli	r20,r20,3
    3d8c:	1227883a 	add	r19,r2,r8
    3d90:	100490fa 	slli	r2,r2,3
    3d94:	da00a617 	ldw	r8,664(sp)
    3d98:	9ce7883a 	add	r19,r19,r19
    3d9c:	9ce7883a 	add	r19,r19,r19
    3da0:	d8a5883a 	add	r18,sp,r2
    3da4:	d8805004 	addi	r2,sp,320
    3da8:	44e7883a 	add	r19,r8,r19
    3dac:	1463883a 	add	r17,r2,r17
    3db0:	dd29883a 	add	r20,sp,r20
    3db4:	99000017 	ldw	r4,0(r19)
    3db8:	00073380 	call	7338 <__floatsidf>
    3dbc:	da008c17 	ldw	r8,560(sp)
    3dc0:	88800015 	stw	r2,0(r17)
    3dc4:	88c00115 	stw	r3,4(r17)
    3dc8:	40001d16 	blt	r8,zero,3e40 <__kernel_rem_pio2+0x570>
    3dcc:	da008e17 	ldw	r8,568(sp)
    3dd0:	dd808d17 	ldw	r22,564(sp)
    3dd4:	8821883a 	mov	r16,r17
    3dd8:	8a2b883a 	add	r21,r17,r8
    3ddc:	0039883a 	mov	fp,zero
    3de0:	002f883a 	mov	r23,zero
    3de4:	b1000017 	ldw	r4,0(r22)
    3de8:	b1400117 	ldw	r5,4(r22)
    3dec:	81800017 	ldw	r6,0(r16)
    3df0:	81c00117 	ldw	r7,4(r16)
    3df4:	843ffe04 	addi	r16,r16,-8
    3df8:	b5800204 	addi	r22,r22,8
    3dfc:	00062bc0 	call	62bc <__muldf3>
    3e00:	e009883a 	mov	r4,fp
    3e04:	b80b883a 	mov	r5,r23
    3e08:	100d883a 	mov	r6,r2
    3e0c:	180f883a 	mov	r7,r3
    3e10:	0004f100 	call	4f10 <__adddf3>
    3e14:	1039883a 	mov	fp,r2
    3e18:	182f883a 	mov	r23,r3
    3e1c:	857ff11e 	bne	r16,r21,3de4 <__alt_mem_Flash_flash_data+0xf4003de4>
    3e20:	97000015 	stw	fp,0(r18)
    3e24:	95c00115 	stw	r23,4(r18)
    3e28:	94800204 	addi	r18,r18,8
    3e2c:	9cc00104 	addi	r19,r19,4
    3e30:	8c400204 	addi	r17,r17,8
    3e34:	953fdf1e 	bne	r18,r20,3db4 <__alt_mem_Flash_flash_data+0xf4003db4>
    3e38:	dc009117 	ldw	r16,580(sp)
    3e3c:	003f1206 	br	3a88 <__alt_mem_Flash_flash_data+0xf4003a88>
    3e40:	0039883a 	mov	fp,zero
    3e44:	002f883a 	mov	r23,zero
    3e48:	003ff506 	br	3e20 <__alt_mem_Flash_flash_data+0xf4003e20>
    3e4c:	0009883a 	mov	r4,zero
    3e50:	014ffc34 	movhi	r5,16368
    3e54:	600d883a 	mov	r6,r12
    3e58:	180f883a 	mov	r7,r3
    3e5c:	00069e00 	call	69e0 <__subdf3>
    3e60:	1029883a 	mov	r20,r2
    3e64:	1817883a 	mov	r11,r3
    3e68:	983f9e26 	beq	r19,zero,3ce4 <__alt_mem_Flash_flash_data+0xf4003ce4>
    3e6c:	d9808f17 	ldw	r6,572(sp)
    3e70:	0009883a 	mov	r4,zero
    3e74:	014ffc34 	movhi	r5,16368
    3e78:	d8c09a15 	stw	r3,616(sp)
    3e7c:	0004ac80 	call	4ac8 <scalbn>
    3e80:	dac09a17 	ldw	r11,616(sp)
    3e84:	a009883a 	mov	r4,r20
    3e88:	100d883a 	mov	r6,r2
    3e8c:	580b883a 	mov	r5,r11
    3e90:	180f883a 	mov	r7,r3
    3e94:	00069e00 	call	69e0 <__subdf3>
    3e98:	1029883a 	mov	r20,r2
    3e9c:	1817883a 	mov	r11,r3
    3ea0:	003f9006 	br	3ce4 <__alt_mem_Flash_flash_data+0xf4003ce4>
    3ea4:	0005883a 	mov	r2,zero
    3ea8:	0007883a 	mov	r3,zero
    3eac:	003eba06 	br	3998 <__alt_mem_Flash_flash_data+0xf4003998>
    3eb0:	da008f17 	ldw	r8,572(sp)
    3eb4:	4000121e 	bne	r8,zero,3f00 <__kernel_rem_pio2+0x630>
    3eb8:	80bfffc4 	addi	r2,r16,-1
    3ebc:	1085883a 	add	r2,r2,r2
    3ec0:	1085883a 	add	r2,r2,r2
    3ec4:	d885883a 	add	r2,sp,r2
    3ec8:	14807817 	ldw	r18,480(r2)
    3ecc:	9025d5fa 	srai	r18,r18,23
    3ed0:	003f5906 	br	3c38 <__alt_mem_Flash_flash_data+0xf4003c38>
    3ed4:	80bfffc4 	addi	r2,r16,-1
    3ed8:	1085883a 	add	r2,r2,r2
    3edc:	1085883a 	add	r2,r2,r2
    3ee0:	d885883a 	add	r2,sp,r2
    3ee4:	10807804 	addi	r2,r2,480
    3ee8:	11000017 	ldw	r4,0(r2)
    3eec:	01402034 	movhi	r5,128
    3ef0:	297fffc4 	addi	r5,r5,-1
    3ef4:	2148703a 	and	r4,r4,r5
    3ef8:	11000015 	stw	r4,0(r2)
    3efc:	003f7706 	br	3cdc <__alt_mem_Flash_flash_data+0xf4003cdc>
    3f00:	180b883a 	mov	r5,r3
    3f04:	1009883a 	mov	r4,r2
    3f08:	000d883a 	mov	r6,zero
    3f0c:	01cff834 	movhi	r7,16352
    3f10:	d8c09915 	stw	r3,612(sp)
    3f14:	d8c09a15 	stw	r3,616(sp)
    3f18:	d8809815 	stw	r2,608(sp)
    3f1c:	00060fc0 	call	60fc <__gedf2>
    3f20:	d8c09917 	ldw	r3,612(sp)
    3f24:	dac09a17 	ldw	r11,616(sp)
    3f28:	db009817 	ldw	r12,608(sp)
    3f2c:	1000050e 	bge	r2,zero,3f44 <__kernel_rem_pio2+0x674>
    3f30:	0025883a 	mov	r18,zero
    3f34:	003f6b06 	br	3ce4 <__alt_mem_Flash_flash_data+0xf4003ce4>
    3f38:	002b883a 	mov	r21,zero
    3f3c:	0029883a 	mov	r20,zero
    3f40:	003eb806 	br	3a24 <__alt_mem_Flash_flash_data+0xf4003a24>
    3f44:	8c400044 	addi	r17,r17,1
    3f48:	0401960e 	bge	zero,r16,45a4 <__kernel_rem_pio2+0xcd4>
    3f4c:	04800084 	movi	r18,2
    3f50:	003f3c06 	br	3c44 <__alt_mem_Flash_flash_data+0xf4003c44>
    3f54:	0027883a 	mov	r19,zero
    3f58:	003f5006 	br	3c9c <__alt_mem_Flash_flash_data+0xf4003c9c>
    3f5c:	da008f17 	ldw	r8,572(sp)
    3f60:	a009883a 	mov	r4,r20
    3f64:	580b883a 	mov	r5,r11
    3f68:	020dc83a 	sub	r6,zero,r8
    3f6c:	dc808c15 	stw	r18,560(sp)
    3f70:	dd809417 	ldw	r22,592(sp)
    3f74:	dc408e15 	stw	r17,568(sp)
    3f78:	0004ac80 	call	4ac8 <scalbn>
    3f7c:	1009883a 	mov	r4,r2
    3f80:	180b883a 	mov	r5,r3
    3f84:	000d883a 	mov	r6,zero
    3f88:	01d05c34 	movhi	r7,16752
    3f8c:	1029883a 	mov	r20,r2
    3f90:	182f883a 	mov	r23,r3
    3f94:	00060fc0 	call	60fc <__gedf2>
    3f98:	10018b16 	blt	r2,zero,45c8 <__kernel_rem_pio2+0xcf8>
    3f9c:	01cf9c34 	movhi	r7,15984
    3fa0:	000d883a 	mov	r6,zero
    3fa4:	a009883a 	mov	r4,r20
    3fa8:	b80b883a 	mov	r5,r23
    3fac:	00062bc0 	call	62bc <__muldf3>
    3fb0:	180b883a 	mov	r5,r3
    3fb4:	1009883a 	mov	r4,r2
    3fb8:	00072b00 	call	72b0 <__fixdfsi>
    3fbc:	840d883a 	add	r6,r16,r16
    3fc0:	318d883a 	add	r6,r6,r6
    3fc4:	1009883a 	mov	r4,r2
    3fc8:	d9a7883a 	add	r19,sp,r6
    3fcc:	102b883a 	mov	r21,r2
    3fd0:	00073380 	call	7338 <__floatsidf>
    3fd4:	1009883a 	mov	r4,r2
    3fd8:	180b883a 	mov	r5,r3
    3fdc:	000d883a 	mov	r6,zero
    3fe0:	01d05c34 	movhi	r7,16752
    3fe4:	00062bc0 	call	62bc <__muldf3>
    3fe8:	a009883a 	mov	r4,r20
    3fec:	b80b883a 	mov	r5,r23
    3ff0:	100d883a 	mov	r6,r2
    3ff4:	180f883a 	mov	r7,r3
    3ff8:	00069e00 	call	69e0 <__subdf3>
    3ffc:	180b883a 	mov	r5,r3
    4000:	1009883a 	mov	r4,r2
    4004:	00072b00 	call	72b0 <__fixdfsi>
    4008:	da008f17 	ldw	r8,572(sp)
    400c:	84400044 	addi	r17,r16,1
    4010:	8c47883a 	add	r3,r17,r17
    4014:	9cc07804 	addi	r19,r19,480
    4018:	18c7883a 	add	r3,r3,r3
    401c:	98800015 	stw	r2,0(r19)
    4020:	d8c7883a 	add	r3,sp,r3
    4024:	42000604 	addi	r8,r8,24
    4028:	da008f15 	stw	r8,572(sp)
    402c:	1d407815 	stw	r21,480(r3)
    4030:	d9808f17 	ldw	r6,572(sp)
    4034:	0009883a 	mov	r4,zero
    4038:	014ffc34 	movhi	r5,16368
    403c:	0004ac80 	call	4ac8 <scalbn>
    4040:	1029883a 	mov	r20,r2
    4044:	182b883a 	mov	r21,r3
    4048:	88006e16 	blt	r17,zero,4204 <__kernel_rem_pio2+0x934>
    404c:	881090fa 	slli	r8,r17,3
    4050:	d8c07804 	addi	r3,sp,480
    4054:	dc3ffe04 	addi	r16,sp,-8
    4058:	da008d15 	stw	r8,564(sp)
    405c:	d8808d17 	ldw	r2,564(sp)
    4060:	8c51883a 	add	r8,r17,r17
    4064:	4211883a 	add	r8,r8,r8
    4068:	d8a7883a 	add	r19,sp,r2
    406c:	1a2f883a 	add	r23,r3,r8
    4070:	9839883a 	mov	fp,r19
    4074:	b9000017 	ldw	r4,0(r23)
    4078:	e73ffe04 	addi	fp,fp,-8
    407c:	bdffff04 	addi	r23,r23,-4
    4080:	00073380 	call	7338 <__floatsidf>
    4084:	a00d883a 	mov	r6,r20
    4088:	a80f883a 	mov	r7,r21
    408c:	1009883a 	mov	r4,r2
    4090:	180b883a 	mov	r5,r3
    4094:	00062bc0 	call	62bc <__muldf3>
    4098:	a009883a 	mov	r4,r20
    409c:	a80b883a 	mov	r5,r21
    40a0:	e0800215 	stw	r2,8(fp)
    40a4:	e0c00315 	stw	r3,12(fp)
    40a8:	000d883a 	mov	r6,zero
    40ac:	01cf9c34 	movhi	r7,15984
    40b0:	00062bc0 	call	62bc <__muldf3>
    40b4:	1029883a 	mov	r20,r2
    40b8:	182b883a 	mov	r21,r3
    40bc:	e43fed1e 	bne	fp,r16,4074 <__alt_mem_Flash_flash_data+0xf4004074>
    40c0:	8a000044 	addi	r8,r17,1
    40c4:	0029883a 	mov	r20,zero
    40c8:	4039883a 	mov	fp,r8
    40cc:	dc408f15 	stw	r17,572(sp)
    40d0:	b0004916 	blt	r22,zero,41f8 <__kernel_rem_pio2+0x928>
    40d4:	a0004816 	blt	r20,zero,41f8 <__kernel_rem_pio2+0x928>
    40d8:	040000b4 	movhi	r16,2
    40dc:	842e8c04 	addi	r16,r16,-17872
    40e0:	982b883a 	mov	r21,r19
    40e4:	0023883a 	mov	r17,zero
    40e8:	002f883a 	mov	r23,zero
    40ec:	0025883a 	mov	r18,zero
    40f0:	00000206 	br	40fc <__kernel_rem_pio2+0x82c>
    40f4:	ad400204 	addi	r21,r21,8
    40f8:	a4800f16 	blt	r20,r18,4138 <__kernel_rem_pio2+0x868>
    40fc:	81000017 	ldw	r4,0(r16)
    4100:	81400117 	ldw	r5,4(r16)
    4104:	a9800017 	ldw	r6,0(r21)
    4108:	a9c00117 	ldw	r7,4(r21)
    410c:	94800044 	addi	r18,r18,1
    4110:	84000204 	addi	r16,r16,8
    4114:	00062bc0 	call	62bc <__muldf3>
    4118:	8809883a 	mov	r4,r17
    411c:	b80b883a 	mov	r5,r23
    4120:	100d883a 	mov	r6,r2
    4124:	180f883a 	mov	r7,r3
    4128:	0004f100 	call	4f10 <__adddf3>
    412c:	1023883a 	mov	r17,r2
    4130:	182f883a 	mov	r23,r3
    4134:	b4bfef0e 	bge	r22,r18,40f4 <__alt_mem_Flash_flash_data+0xf40040f4>
    4138:	a00490fa 	slli	r2,r20,3
    413c:	a5000044 	addi	r20,r20,1
    4140:	9cfffe04 	addi	r19,r19,-8
    4144:	d885883a 	add	r2,sp,r2
    4148:	10802804 	addi	r2,r2,160
    414c:	14400015 	stw	r17,0(r2)
    4150:	15c00115 	stw	r23,4(r2)
    4154:	a73fde1e 	bne	r20,fp,40d0 <__alt_mem_Flash_flash_data+0xf40040d0>
    4158:	da00a517 	ldw	r8,660(sp)
    415c:	00800084 	movi	r2,2
    4160:	dc408f17 	ldw	r17,572(sp)
    4164:	12007316 	blt	r2,r8,4334 <__kernel_rem_pio2+0xa64>
    4168:	02004816 	blt	zero,r8,428c <__kernel_rem_pio2+0x9bc>
    416c:	4000141e 	bne	r8,zero,41c0 <__kernel_rem_pio2+0x8f0>
    4170:	da008d17 	ldw	r8,564(sp)
    4174:	d8802804 	addi	r2,sp,160
    4178:	0007883a 	mov	r3,zero
    417c:	1221883a 	add	r16,r2,r8
    4180:	04ffffc4 	movi	r19,-1
    4184:	0005883a 	mov	r2,zero
    4188:	81800017 	ldw	r6,0(r16)
    418c:	81c00117 	ldw	r7,4(r16)
    4190:	1009883a 	mov	r4,r2
    4194:	180b883a 	mov	r5,r3
    4198:	8c7fffc4 	addi	r17,r17,-1
    419c:	0004f100 	call	4f10 <__adddf3>
    41a0:	843ffe04 	addi	r16,r16,-8
    41a4:	8cfff81e 	bne	r17,r19,4188 <__alt_mem_Flash_flash_data+0xf4004188>
    41a8:	da008c17 	ldw	r8,560(sp)
    41ac:	40000126 	beq	r8,zero,41b4 <__kernel_rem_pio2+0x8e4>
    41b0:	18e0003c 	xorhi	r3,r3,32768
    41b4:	da009017 	ldw	r8,576(sp)
    41b8:	40800015 	stw	r2,0(r8)
    41bc:	40c00115 	stw	r3,4(r8)
    41c0:	da008e17 	ldw	r8,568(sp)
    41c4:	408001cc 	andi	r2,r8,7
    41c8:	dfc0a417 	ldw	ra,656(sp)
    41cc:	df00a317 	ldw	fp,652(sp)
    41d0:	ddc0a217 	ldw	r23,648(sp)
    41d4:	dd80a117 	ldw	r22,644(sp)
    41d8:	dd40a017 	ldw	r21,640(sp)
    41dc:	dd009f17 	ldw	r20,636(sp)
    41e0:	dcc09e17 	ldw	r19,632(sp)
    41e4:	dc809d17 	ldw	r18,628(sp)
    41e8:	dc409c17 	ldw	r17,624(sp)
    41ec:	dc009b17 	ldw	r16,620(sp)
    41f0:	dec0a504 	addi	sp,sp,660
    41f4:	f800283a 	ret
    41f8:	0023883a 	mov	r17,zero
    41fc:	002f883a 	mov	r23,zero
    4200:	003fcd06 	br	4138 <__alt_mem_Flash_flash_data+0xf4004138>
    4204:	da00a517 	ldw	r8,660(sp)
    4208:	00800084 	movi	r2,2
    420c:	1200d216 	blt	r2,r8,4558 <__kernel_rem_pio2+0xc88>
    4210:	0200c016 	blt	zero,r8,4514 <__kernel_rem_pio2+0xc44>
    4214:	403fea1e 	bne	r8,zero,41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4218:	0005883a 	mov	r2,zero
    421c:	0007883a 	mov	r3,zero
    4220:	003fe106 	br	41a8 <__alt_mem_Flash_flash_data+0xf40041a8>
    4224:	00c00044 	movi	r3,1
    4228:	003ecd06 	br	3d60 <__alt_mem_Flash_flash_data+0xf4003d60>
    422c:	2945883a 	add	r2,r5,r5
    4230:	da008f17 	ldw	r8,572(sp)
    4234:	1085883a 	add	r2,r2,r2
    4238:	d885883a 	add	r2,sp,r2
    423c:	10807817 	ldw	r2,480(r2)
    4240:	423ffa04 	addi	r8,r8,-24
    4244:	dc408e15 	stw	r17,568(sp)
    4248:	dc808c15 	stw	r18,560(sp)
    424c:	da008f15 	stw	r8,572(sp)
    4250:	dd809417 	ldw	r22,592(sp)
    4254:	2823883a 	mov	r17,r5
    4258:	103f751e 	bne	r2,zero,4030 <__alt_mem_Flash_flash_data+0xf4004030>
    425c:	280490ba 	slli	r2,r5,2
    4260:	d8c07804 	addi	r3,sp,480
    4264:	10bfff04 	addi	r2,r2,-4
    4268:	1885883a 	add	r2,r3,r2
    426c:	4007883a 	mov	r3,r8
    4270:	10bfff04 	addi	r2,r2,-4
    4274:	11000117 	ldw	r4,4(r2)
    4278:	8c7fffc4 	addi	r17,r17,-1
    427c:	18fffa04 	addi	r3,r3,-24
    4280:	203ffb26 	beq	r4,zero,4270 <__alt_mem_Flash_flash_data+0xf4004270>
    4284:	d8c08f15 	stw	r3,572(sp)
    4288:	003f6906 	br	4030 <__alt_mem_Flash_flash_data+0xf4004030>
    428c:	da008d17 	ldw	r8,564(sp)
    4290:	d8802804 	addi	r2,sp,160
    4294:	dcc02604 	addi	r19,sp,152
    4298:	1221883a 	add	r16,r2,r8
    429c:	0007883a 	mov	r3,zero
    42a0:	0005883a 	mov	r2,zero
    42a4:	81800017 	ldw	r6,0(r16)
    42a8:	81c00117 	ldw	r7,4(r16)
    42ac:	1009883a 	mov	r4,r2
    42b0:	843ffe04 	addi	r16,r16,-8
    42b4:	180b883a 	mov	r5,r3
    42b8:	0004f100 	call	4f10 <__adddf3>
    42bc:	84fff91e 	bne	r16,r19,42a4 <__alt_mem_Flash_flash_data+0xf40042a4>
    42c0:	da008c17 	ldw	r8,560(sp)
    42c4:	d9002817 	ldw	r4,160(sp)
    42c8:	d9402917 	ldw	r5,164(sp)
    42cc:	40009726 	beq	r8,zero,452c <__kernel_rem_pio2+0xc5c>
    42d0:	da009017 	ldw	r8,576(sp)
    42d4:	19a0003c 	xorhi	r6,r3,32768
    42d8:	180f883a 	mov	r7,r3
    42dc:	41800115 	stw	r6,4(r8)
    42e0:	40800015 	stw	r2,0(r8)
    42e4:	100d883a 	mov	r6,r2
    42e8:	00069e00 	call	69e0 <__subdf3>
    42ec:	04400c0e 	bge	zero,r17,4320 <__kernel_rem_pio2+0xa50>
    42f0:	dc002a04 	addi	r16,sp,168
    42f4:	04c00044 	movi	r19,1
    42f8:	81800017 	ldw	r6,0(r16)
    42fc:	81c00117 	ldw	r7,4(r16)
    4300:	1009883a 	mov	r4,r2
    4304:	180b883a 	mov	r5,r3
    4308:	9cc00044 	addi	r19,r19,1
    430c:	0004f100 	call	4f10 <__adddf3>
    4310:	84000204 	addi	r16,r16,8
    4314:	8cfff80e 	bge	r17,r19,42f8 <__alt_mem_Flash_flash_data+0xf40042f8>
    4318:	da008c17 	ldw	r8,560(sp)
    431c:	40000126 	beq	r8,zero,4324 <__kernel_rem_pio2+0xa54>
    4320:	18e0003c 	xorhi	r3,r3,32768
    4324:	da009017 	ldw	r8,576(sp)
    4328:	40800215 	stw	r2,8(r8)
    432c:	40c00315 	stw	r3,12(r8)
    4330:	003fa306 	br	41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4334:	da00a517 	ldw	r8,660(sp)
    4338:	008000c4 	movi	r2,3
    433c:	40bfa01e 	bne	r8,r2,41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4340:	0440880e 	bge	zero,r17,4564 <__kernel_rem_pio2+0xc94>
    4344:	da008d17 	ldw	r8,564(sp)
    4348:	882690fa 	slli	r19,r17,3
    434c:	dd402804 	addi	r21,sp,160
    4350:	da05883a 	add	r2,sp,r8
    4354:	10802804 	addi	r2,r2,160
    4358:	15c00017 	ldw	r23,0(r2)
    435c:	15800117 	ldw	r22,4(r2)
    4360:	9829883a 	mov	r20,r19
    4364:	9cfffe04 	addi	r19,r19,-8
    4368:	ace7883a 	add	r19,r21,r19
    436c:	ad29883a 	add	r20,r21,r20
    4370:	dac02604 	addi	r11,sp,152
    4374:	8811883a 	mov	r8,r17
    4378:	9c400017 	ldw	r17,0(r19)
    437c:	9f000117 	ldw	fp,4(r19)
    4380:	b809883a 	mov	r4,r23
    4384:	b00b883a 	mov	r5,r22
    4388:	880d883a 	mov	r6,r17
    438c:	e00f883a 	mov	r7,fp
    4390:	da009815 	stw	r8,608(sp)
    4394:	dac09a15 	stw	r11,616(sp)
    4398:	0004f100 	call	4f10 <__adddf3>
    439c:	8809883a 	mov	r4,r17
    43a0:	e00b883a 	mov	r5,fp
    43a4:	100d883a 	mov	r6,r2
    43a8:	180f883a 	mov	r7,r3
    43ac:	1025883a 	mov	r18,r2
    43b0:	1821883a 	mov	r16,r3
    43b4:	00069e00 	call	69e0 <__subdf3>
    43b8:	b809883a 	mov	r4,r23
    43bc:	b00b883a 	mov	r5,r22
    43c0:	100d883a 	mov	r6,r2
    43c4:	180f883a 	mov	r7,r3
    43c8:	0004f100 	call	4f10 <__adddf3>
    43cc:	dac09a17 	ldw	r11,616(sp)
    43d0:	a0800015 	stw	r2,0(r20)
    43d4:	a0c00115 	stw	r3,4(r20)
    43d8:	9c800015 	stw	r18,0(r19)
    43dc:	9c000115 	stw	r16,4(r19)
    43e0:	9cfffe04 	addi	r19,r19,-8
    43e4:	a53ffe04 	addi	r20,r20,-8
    43e8:	902f883a 	mov	r23,r18
    43ec:	802d883a 	mov	r22,r16
    43f0:	da009817 	ldw	r8,608(sp)
    43f4:	9affe01e 	bne	r19,r11,4378 <__alt_mem_Flash_flash_data+0xf4004378>
    43f8:	00800044 	movi	r2,1
    43fc:	1200590e 	bge	r2,r8,4564 <__kernel_rem_pio2+0xc94>
    4400:	402290fa 	slli	r17,r8,3
    4404:	da008d17 	ldw	r8,564(sp)
    4408:	8c3ffe04 	addi	r16,r17,-8
    440c:	da05883a 	add	r2,sp,r8
    4410:	10802804 	addi	r2,r2,160
    4414:	15800017 	ldw	r22,0(r2)
    4418:	15000117 	ldw	r20,4(r2)
    441c:	ac63883a 	add	r17,r21,r17
    4420:	ac21883a 	add	r16,r21,r16
    4424:	8827883a 	mov	r19,r17
    4428:	8811883a 	mov	r8,r17
    442c:	84400017 	ldw	r17,0(r16)
    4430:	87000117 	ldw	fp,4(r16)
    4434:	b00d883a 	mov	r6,r22
    4438:	a00f883a 	mov	r7,r20
    443c:	8809883a 	mov	r4,r17
    4440:	e00b883a 	mov	r5,fp
    4444:	da009815 	stw	r8,608(sp)
    4448:	0004f100 	call	4f10 <__adddf3>
    444c:	8809883a 	mov	r4,r17
    4450:	e00b883a 	mov	r5,fp
    4454:	100d883a 	mov	r6,r2
    4458:	180f883a 	mov	r7,r3
    445c:	102f883a 	mov	r23,r2
    4460:	1825883a 	mov	r18,r3
    4464:	00069e00 	call	69e0 <__subdf3>
    4468:	b00d883a 	mov	r6,r22
    446c:	a00f883a 	mov	r7,r20
    4470:	1009883a 	mov	r4,r2
    4474:	180b883a 	mov	r5,r3
    4478:	0004f100 	call	4f10 <__adddf3>
    447c:	98800015 	stw	r2,0(r19)
    4480:	98c00115 	stw	r3,4(r19)
    4484:	85c00015 	stw	r23,0(r16)
    4488:	84800115 	stw	r18,4(r16)
    448c:	843ffe04 	addi	r16,r16,-8
    4490:	9cfffe04 	addi	r19,r19,-8
    4494:	b82d883a 	mov	r22,r23
    4498:	9029883a 	mov	r20,r18
    449c:	da009817 	ldw	r8,608(sp)
    44a0:	ac3fe21e 	bne	r21,r16,442c <__alt_mem_Flash_flash_data+0xf400442c>
    44a4:	4023883a 	mov	r17,r8
    44a8:	dc002a04 	addi	r16,sp,168
    44ac:	0005883a 	mov	r2,zero
    44b0:	0007883a 	mov	r3,zero
    44b4:	89800017 	ldw	r6,0(r17)
    44b8:	89c00117 	ldw	r7,4(r17)
    44bc:	1009883a 	mov	r4,r2
    44c0:	8c7ffe04 	addi	r17,r17,-8
    44c4:	180b883a 	mov	r5,r3
    44c8:	0004f100 	call	4f10 <__adddf3>
    44cc:	8c3ff91e 	bne	r17,r16,44b4 <__alt_mem_Flash_flash_data+0xf40044b4>
    44d0:	da008c17 	ldw	r8,560(sp)
    44d4:	40002726 	beq	r8,zero,4574 <__kernel_rem_pio2+0xca4>
    44d8:	d9002b17 	ldw	r4,172(sp)
    44dc:	d9402917 	ldw	r5,164(sp)
    44e0:	d9802a17 	ldw	r6,168(sp)
    44e4:	da009017 	ldw	r8,576(sp)
    44e8:	d9c02817 	ldw	r7,160(sp)
    44ec:	2960003c 	xorhi	r5,r5,32768
    44f0:	2120003c 	xorhi	r4,r4,32768
    44f4:	18e0003c 	xorhi	r3,r3,32768
    44f8:	41c00015 	stw	r7,0(r8)
    44fc:	41400115 	stw	r5,4(r8)
    4500:	41800215 	stw	r6,8(r8)
    4504:	41000315 	stw	r4,12(r8)
    4508:	40800415 	stw	r2,16(r8)
    450c:	40c00515 	stw	r3,20(r8)
    4510:	003f2b06 	br	41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4514:	da008c17 	ldw	r8,560(sp)
    4518:	0005883a 	mov	r2,zero
    451c:	0007883a 	mov	r3,zero
    4520:	d9002817 	ldw	r4,160(sp)
    4524:	d9402917 	ldw	r5,164(sp)
    4528:	403f691e 	bne	r8,zero,42d0 <__alt_mem_Flash_flash_data+0xf40042d0>
    452c:	da009017 	ldw	r8,576(sp)
    4530:	100d883a 	mov	r6,r2
    4534:	180f883a 	mov	r7,r3
    4538:	40800015 	stw	r2,0(r8)
    453c:	40c00115 	stw	r3,4(r8)
    4540:	00069e00 	call	69e0 <__subdf3>
    4544:	047f6a16 	blt	zero,r17,42f0 <__alt_mem_Flash_flash_data+0xf40042f0>
    4548:	da009017 	ldw	r8,576(sp)
    454c:	40800215 	stw	r2,8(r8)
    4550:	40c00315 	stw	r3,12(r8)
    4554:	003f1a06 	br	41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4558:	da00a517 	ldw	r8,660(sp)
    455c:	008000c4 	movi	r2,3
    4560:	40bf171e 	bne	r8,r2,41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    4564:	da008c17 	ldw	r8,560(sp)
    4568:	0005883a 	mov	r2,zero
    456c:	0007883a 	mov	r3,zero
    4570:	403fd91e 	bne	r8,zero,44d8 <__alt_mem_Flash_flash_data+0xf40044d8>
    4574:	da009017 	ldw	r8,576(sp)
    4578:	d9802817 	ldw	r6,160(sp)
    457c:	d9402a17 	ldw	r5,168(sp)
    4580:	d9002b17 	ldw	r4,172(sp)
    4584:	41800015 	stw	r6,0(r8)
    4588:	d9802917 	ldw	r6,164(sp)
    458c:	41400215 	stw	r5,8(r8)
    4590:	41000315 	stw	r4,12(r8)
    4594:	41800115 	stw	r6,4(r8)
    4598:	40800415 	stw	r2,16(r8)
    459c:	40c00515 	stw	r3,20(r8)
    45a0:	003f0706 	br	41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    45a4:	a00d883a 	mov	r6,r20
    45a8:	580f883a 	mov	r7,r11
    45ac:	0009883a 	mov	r4,zero
    45b0:	014ffc34 	movhi	r5,16368
    45b4:	00069e00 	call	69e0 <__subdf3>
    45b8:	1029883a 	mov	r20,r2
    45bc:	1817883a 	mov	r11,r3
    45c0:	04800084 	movi	r18,2
    45c4:	003dc706 	br	3ce4 <__alt_mem_Flash_flash_data+0xf4003ce4>
    45c8:	840d883a 	add	r6,r16,r16
    45cc:	318d883a 	add	r6,r6,r6
    45d0:	d9a3883a 	add	r17,sp,r6
    45d4:	a009883a 	mov	r4,r20
    45d8:	b80b883a 	mov	r5,r23
    45dc:	8c407804 	addi	r17,r17,480
    45e0:	00072b00 	call	72b0 <__fixdfsi>
    45e4:	88800015 	stw	r2,0(r17)
    45e8:	8023883a 	mov	r17,r16
    45ec:	003e9006 	br	4030 <__alt_mem_Flash_flash_data+0xf4004030>
    45f0:	d8009215 	stw	zero,584(sp)
    45f4:	003cd406 	br	3948 <__alt_mem_Flash_flash_data+0xf4003948>

000045f8 <__kernel_sin>:
    45f8:	00a00034 	movhi	r2,32768
    45fc:	defff404 	addi	sp,sp,-48
    4600:	10bfffc4 	addi	r2,r2,-1
    4604:	00cf9034 	movhi	r3,15936
    4608:	ddc00915 	stw	r23,36(sp)
    460c:	dd800815 	stw	r22,32(sp)
    4610:	dc400315 	stw	r17,12(sp)
    4614:	dc000215 	stw	r16,8(sp)
    4618:	dfc00b15 	stw	ra,44(sp)
    461c:	df000a15 	stw	fp,40(sp)
    4620:	dd400715 	stw	r21,28(sp)
    4624:	dd000615 	stw	r20,24(sp)
    4628:	dcc00515 	stw	r19,20(sp)
    462c:	dc800415 	stw	r18,16(sp)
    4630:	2884703a 	and	r2,r5,r2
    4634:	18ffffc4 	addi	r3,r3,-1
    4638:	2821883a 	mov	r16,r5
    463c:	2023883a 	mov	r17,r4
    4640:	302f883a 	mov	r23,r6
    4644:	382d883a 	mov	r22,r7
    4648:	18800216 	blt	r3,r2,4654 <__kernel_sin+0x5c>
    464c:	00072b00 	call	72b0 <__fixdfsi>
    4650:	10009826 	beq	r2,zero,48b4 <__kernel_sin+0x2bc>
    4654:	8809883a 	mov	r4,r17
    4658:	800b883a 	mov	r5,r16
    465c:	880d883a 	mov	r6,r17
    4660:	800f883a 	mov	r7,r16
    4664:	00062bc0 	call	62bc <__muldf3>
    4668:	1009883a 	mov	r4,r2
    466c:	180b883a 	mov	r5,r3
    4670:	880d883a 	mov	r6,r17
    4674:	800f883a 	mov	r7,r16
    4678:	1027883a 	mov	r19,r2
    467c:	1825883a 	mov	r18,r3
    4680:	00062bc0 	call	62bc <__muldf3>
    4684:	0196b434 	movhi	r6,23248
    4688:	01cf79b4 	movhi	r7,15846
    468c:	9809883a 	mov	r4,r19
    4690:	900b883a 	mov	r5,r18
    4694:	31b55f04 	addi	r6,r6,-10884
    4698:	39f64e84 	addi	r7,r7,-9926
    469c:	102b883a 	mov	r21,r2
    46a0:	1829883a 	mov	r20,r3
    46a4:	00062bc0 	call	62bc <__muldf3>
    46a8:	01a28b34 	movhi	r6,35372
    46ac:	01cf96f4 	movhi	r7,15963
    46b0:	1009883a 	mov	r4,r2
    46b4:	180b883a 	mov	r5,r3
    46b8:	31a73ac4 	addi	r6,r6,-25365
    46bc:	39f97984 	addi	r7,r7,-6682
    46c0:	00069e00 	call	69e0 <__subdf3>
    46c4:	1009883a 	mov	r4,r2
    46c8:	180b883a 	mov	r5,r3
    46cc:	980d883a 	mov	r6,r19
    46d0:	900f883a 	mov	r7,r18
    46d4:	00062bc0 	call	62bc <__muldf3>
    46d8:	0195ecb4 	movhi	r6,22450
    46dc:	01cfb1f4 	movhi	r7,16071
    46e0:	1009883a 	mov	r4,r2
    46e4:	180b883a 	mov	r5,r3
    46e8:	31bf9f44 	addi	r6,r6,-387
    46ec:	39c778c4 	addi	r7,r7,7651
    46f0:	0004f100 	call	4f10 <__adddf3>
    46f4:	1009883a 	mov	r4,r2
    46f8:	180b883a 	mov	r5,r3
    46fc:	980d883a 	mov	r6,r19
    4700:	900f883a 	mov	r7,r18
    4704:	00062bc0 	call	62bc <__muldf3>
    4708:	01867074 	movhi	r6,6593
    470c:	01cfcab4 	movhi	r7,16170
    4710:	1009883a 	mov	r4,r2
    4714:	180b883a 	mov	r5,r3
    4718:	31987544 	addi	r6,r6,25045
    471c:	39c06804 	addi	r7,r7,416
    4720:	00069e00 	call	69e0 <__subdf3>
    4724:	1009883a 	mov	r4,r2
    4728:	180b883a 	mov	r5,r3
    472c:	980d883a 	mov	r6,r19
    4730:	900f883a 	mov	r7,r18
    4734:	00062bc0 	call	62bc <__muldf3>
    4738:	01844474 	movhi	r6,4369
    473c:	01cfe074 	movhi	r7,16257
    4740:	1009883a 	mov	r4,r2
    4744:	180b883a 	mov	r5,r3
    4748:	31be2984 	addi	r6,r6,-1882
    474c:	39c44444 	addi	r7,r7,4369
    4750:	0004f100 	call	4f10 <__adddf3>
    4754:	d9000c17 	ldw	r4,48(sp)
    4758:	1839883a 	mov	fp,r3
    475c:	20003e26 	beq	r4,zero,4858 <__kernel_sin+0x260>
    4760:	b809883a 	mov	r4,r23
    4764:	b00b883a 	mov	r5,r22
    4768:	000d883a 	mov	r6,zero
    476c:	01cff834 	movhi	r7,16352
    4770:	d8800015 	stw	r2,0(sp)
    4774:	00062bc0 	call	62bc <__muldf3>
    4778:	da000017 	ldw	r8,0(sp)
    477c:	a809883a 	mov	r4,r21
    4780:	a00b883a 	mov	r5,r20
    4784:	400d883a 	mov	r6,r8
    4788:	e00f883a 	mov	r7,fp
    478c:	d8c00115 	stw	r3,4(sp)
    4790:	d8800015 	stw	r2,0(sp)
    4794:	00062bc0 	call	62bc <__muldf3>
    4798:	da800017 	ldw	r10,0(sp)
    479c:	da400117 	ldw	r9,4(sp)
    47a0:	100d883a 	mov	r6,r2
    47a4:	5009883a 	mov	r4,r10
    47a8:	480b883a 	mov	r5,r9
    47ac:	180f883a 	mov	r7,r3
    47b0:	00069e00 	call	69e0 <__subdf3>
    47b4:	980d883a 	mov	r6,r19
    47b8:	900f883a 	mov	r7,r18
    47bc:	1009883a 	mov	r4,r2
    47c0:	180b883a 	mov	r5,r3
    47c4:	00062bc0 	call	62bc <__muldf3>
    47c8:	1009883a 	mov	r4,r2
    47cc:	180b883a 	mov	r5,r3
    47d0:	b80d883a 	mov	r6,r23
    47d4:	b00f883a 	mov	r7,r22
    47d8:	00069e00 	call	69e0 <__subdf3>
    47dc:	01955574 	movhi	r6,21845
    47e0:	01cff174 	movhi	r7,16325
    47e4:	a809883a 	mov	r4,r21
    47e8:	a00b883a 	mov	r5,r20
    47ec:	31955244 	addi	r6,r6,21833
    47f0:	39d55544 	addi	r7,r7,21845
    47f4:	1027883a 	mov	r19,r2
    47f8:	1825883a 	mov	r18,r3
    47fc:	00062bc0 	call	62bc <__muldf3>
    4800:	9809883a 	mov	r4,r19
    4804:	900b883a 	mov	r5,r18
    4808:	100d883a 	mov	r6,r2
    480c:	180f883a 	mov	r7,r3
    4810:	0004f100 	call	4f10 <__adddf3>
    4814:	8809883a 	mov	r4,r17
    4818:	800b883a 	mov	r5,r16
    481c:	100d883a 	mov	r6,r2
    4820:	180f883a 	mov	r7,r3
    4824:	00069e00 	call	69e0 <__subdf3>
    4828:	dfc00b17 	ldw	ra,44(sp)
    482c:	df000a17 	ldw	fp,40(sp)
    4830:	ddc00917 	ldw	r23,36(sp)
    4834:	dd800817 	ldw	r22,32(sp)
    4838:	dd400717 	ldw	r21,28(sp)
    483c:	dd000617 	ldw	r20,24(sp)
    4840:	dcc00517 	ldw	r19,20(sp)
    4844:	dc800417 	ldw	r18,16(sp)
    4848:	dc400317 	ldw	r17,12(sp)
    484c:	dc000217 	ldw	r16,8(sp)
    4850:	dec00c04 	addi	sp,sp,48
    4854:	f800283a 	ret
    4858:	9809883a 	mov	r4,r19
    485c:	900b883a 	mov	r5,r18
    4860:	100d883a 	mov	r6,r2
    4864:	180f883a 	mov	r7,r3
    4868:	00062bc0 	call	62bc <__muldf3>
    486c:	01955574 	movhi	r6,21845
    4870:	01cff174 	movhi	r7,16325
    4874:	1009883a 	mov	r4,r2
    4878:	180b883a 	mov	r5,r3
    487c:	31955244 	addi	r6,r6,21833
    4880:	39d55544 	addi	r7,r7,21845
    4884:	00069e00 	call	69e0 <__subdf3>
    4888:	a80d883a 	mov	r6,r21
    488c:	a00f883a 	mov	r7,r20
    4890:	1009883a 	mov	r4,r2
    4894:	180b883a 	mov	r5,r3
    4898:	00062bc0 	call	62bc <__muldf3>
    489c:	1009883a 	mov	r4,r2
    48a0:	180b883a 	mov	r5,r3
    48a4:	880d883a 	mov	r6,r17
    48a8:	800f883a 	mov	r7,r16
    48ac:	0004f100 	call	4f10 <__adddf3>
    48b0:	003fdd06 	br	4828 <__alt_mem_Flash_flash_data+0xf4004828>
    48b4:	8805883a 	mov	r2,r17
    48b8:	8007883a 	mov	r3,r16
    48bc:	003fda06 	br	4828 <__alt_mem_Flash_flash_data+0xf4004828>

000048c0 <fabs>:
    48c0:	00e00034 	movhi	r3,32768
    48c4:	18ffffc4 	addi	r3,r3,-1
    48c8:	2005883a 	mov	r2,r4
    48cc:	28c6703a 	and	r3,r5,r3
    48d0:	f800283a 	ret

000048d4 <floor>:
    48d4:	defff904 	addi	sp,sp,-28
    48d8:	dc800215 	stw	r18,8(sp)
    48dc:	2825d53a 	srai	r18,r5,20
    48e0:	dd000415 	stw	r20,16(sp)
    48e4:	dcc00315 	stw	r19,12(sp)
    48e8:	9481ffcc 	andi	r18,r18,2047
    48ec:	dc400115 	stw	r17,4(sp)
    48f0:	dc000015 	stw	r16,0(sp)
    48f4:	dfc00615 	stw	ra,24(sp)
    48f8:	dd400515 	stw	r21,20(sp)
    48fc:	94ff0044 	addi	r19,r18,-1023
    4900:	018004c4 	movi	r6,19
    4904:	2821883a 	mov	r16,r5
    4908:	2005883a 	mov	r2,r4
    490c:	280f883a 	mov	r7,r5
    4910:	2829883a 	mov	r20,r5
    4914:	2023883a 	mov	r17,r4
    4918:	34c01916 	blt	r6,r19,4980 <floor+0xac>
    491c:	98003d16 	blt	r19,zero,4a14 <floor+0x140>
    4920:	04800434 	movhi	r18,16
    4924:	94bfffc4 	addi	r18,r18,-1
    4928:	94e5d83a 	sra	r18,r18,r19
    492c:	914c703a 	and	r6,r18,r5
    4930:	310cb03a 	or	r6,r6,r4
    4934:	30001626 	beq	r6,zero,4990 <floor+0xbc>
    4938:	01a20034 	movhi	r6,34816
    493c:	01df8e34 	movhi	r7,32312
    4940:	319d6704 	addi	r6,r6,30108
    4944:	39f90f04 	addi	r7,r7,-7108
    4948:	0004f100 	call	4f10 <__adddf3>
    494c:	1009883a 	mov	r4,r2
    4950:	180b883a 	mov	r5,r3
    4954:	000d883a 	mov	r6,zero
    4958:	000f883a 	mov	r7,zero
    495c:	00060fc0 	call	60fc <__gedf2>
    4960:	0080040e 	bge	zero,r2,4974 <floor+0xa0>
    4964:	80003d16 	blt	r16,zero,4a5c <floor+0x188>
    4968:	04a0303a 	nor	r16,zero,r18
    496c:	a420703a 	and	r16,r20,r16
    4970:	0023883a 	mov	r17,zero
    4974:	8805883a 	mov	r2,r17
    4978:	8007883a 	mov	r3,r16
    497c:	00000506 	br	4994 <floor+0xc0>
    4980:	01800cc4 	movi	r6,51
    4984:	34c00c0e 	bge	r6,r19,49b8 <floor+0xe4>
    4988:	01810004 	movi	r6,1024
    498c:	99803026 	beq	r19,r6,4a50 <floor+0x17c>
    4990:	3807883a 	mov	r3,r7
    4994:	dfc00617 	ldw	ra,24(sp)
    4998:	dd400517 	ldw	r21,20(sp)
    499c:	dd000417 	ldw	r20,16(sp)
    49a0:	dcc00317 	ldw	r19,12(sp)
    49a4:	dc800217 	ldw	r18,8(sp)
    49a8:	dc400117 	ldw	r17,4(sp)
    49ac:	dc000017 	ldw	r16,0(sp)
    49b0:	dec00704 	addi	sp,sp,28
    49b4:	f800283a 	ret
    49b8:	01bfffc4 	movi	r6,-1
    49bc:	957efb44 	addi	r21,r18,-1043
    49c0:	356ad83a 	srl	r21,r6,r21
    49c4:	a90c703a 	and	r6,r21,r4
    49c8:	303ff126 	beq	r6,zero,4990 <__alt_mem_Flash_flash_data+0xf4004990>
    49cc:	01a20034 	movhi	r6,34816
    49d0:	01df8e34 	movhi	r7,32312
    49d4:	319d6704 	addi	r6,r6,30108
    49d8:	39f90f04 	addi	r7,r7,-7108
    49dc:	0004f100 	call	4f10 <__adddf3>
    49e0:	1009883a 	mov	r4,r2
    49e4:	180b883a 	mov	r5,r3
    49e8:	000d883a 	mov	r6,zero
    49ec:	000f883a 	mov	r7,zero
    49f0:	00060fc0 	call	60fc <__gedf2>
    49f4:	00bfdf0e 	bge	zero,r2,4974 <__alt_mem_Flash_flash_data+0xf4004974>
    49f8:	80001c16 	blt	r16,zero,4a6c <floor+0x198>
    49fc:	056a303a 	nor	r21,zero,r21
    4a00:	a021883a 	mov	r16,r20
    4a04:	8d62703a 	and	r17,r17,r21
    4a08:	8805883a 	mov	r2,r17
    4a0c:	8007883a 	mov	r3,r16
    4a10:	003fe006 	br	4994 <__alt_mem_Flash_flash_data+0xf4004994>
    4a14:	01a20034 	movhi	r6,34816
    4a18:	01df8e34 	movhi	r7,32312
    4a1c:	319d6704 	addi	r6,r6,30108
    4a20:	39f90f04 	addi	r7,r7,-7108
    4a24:	0004f100 	call	4f10 <__adddf3>
    4a28:	1009883a 	mov	r4,r2
    4a2c:	180b883a 	mov	r5,r3
    4a30:	000d883a 	mov	r6,zero
    4a34:	000f883a 	mov	r7,zero
    4a38:	00060fc0 	call	60fc <__gedf2>
    4a3c:	00bfcd0e 	bge	zero,r2,4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4a40:	80001516 	blt	r16,zero,4a98 <floor+0x1c4>
    4a44:	0023883a 	mov	r17,zero
    4a48:	0021883a 	mov	r16,zero
    4a4c:	003fc906 	br	4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4a50:	200d883a 	mov	r6,r4
    4a54:	0004f100 	call	4f10 <__adddf3>
    4a58:	003fce06 	br	4994 <__alt_mem_Flash_flash_data+0xf4004994>
    4a5c:	00800434 	movhi	r2,16
    4a60:	14e7d83a 	sra	r19,r2,r19
    4a64:	84e9883a 	add	r20,r16,r19
    4a68:	003fbf06 	br	4968 <__alt_mem_Flash_flash_data+0xf4004968>
    4a6c:	00800504 	movi	r2,20
    4a70:	98801326 	beq	r19,r2,4ac0 <floor+0x1ec>
    4a74:	00810cc4 	movi	r2,1075
    4a78:	14a5c83a 	sub	r18,r2,r18
    4a7c:	00800044 	movi	r2,1
    4a80:	1484983a 	sll	r2,r2,r18
    4a84:	1445883a 	add	r2,r2,r17
    4a88:	14400b2e 	bgeu	r2,r17,4ab8 <floor+0x1e4>
    4a8c:	85000044 	addi	r20,r16,1
    4a90:	1023883a 	mov	r17,r2
    4a94:	003fd906 	br	49fc <__alt_mem_Flash_flash_data+0xf40049fc>
    4a98:	00a00034 	movhi	r2,32768
    4a9c:	10bfffc4 	addi	r2,r2,-1
    4aa0:	8084703a 	and	r2,r16,r2
    4aa4:	1462b03a 	or	r17,r2,r17
    4aa8:	883fb226 	beq	r17,zero,4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4aac:	0023883a 	mov	r17,zero
    4ab0:	042ffc34 	movhi	r16,49136
    4ab4:	003faf06 	br	4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4ab8:	1023883a 	mov	r17,r2
    4abc:	003fcf06 	br	49fc <__alt_mem_Flash_flash_data+0xf40049fc>
    4ac0:	85000044 	addi	r20,r16,1
    4ac4:	003fcd06 	br	49fc <__alt_mem_Flash_flash_data+0xf40049fc>

00004ac8 <scalbn>:
    4ac8:	2a1ffc2c 	andhi	r8,r5,32752
    4acc:	4011d53a 	srai	r8,r8,20
    4ad0:	defffe04 	addi	sp,sp,-8
    4ad4:	dc000015 	stw	r16,0(sp)
    4ad8:	dfc00115 	stw	ra,4(sp)
    4adc:	280f883a 	mov	r7,r5
    4ae0:	2015883a 	mov	r10,r4
    4ae4:	3021883a 	mov	r16,r6
    4ae8:	4000251e 	bne	r8,zero,4b80 <scalbn+0xb8>
    4aec:	00a00034 	movhi	r2,32768
    4af0:	10bfffc4 	addi	r2,r2,-1
    4af4:	2884703a 	and	r2,r5,r2
    4af8:	1104b03a 	or	r2,r2,r4
    4afc:	10003126 	beq	r2,zero,4bc4 <scalbn+0xfc>
    4b00:	01d0d434 	movhi	r7,17232
    4b04:	000d883a 	mov	r6,zero
    4b08:	00062bc0 	call	62bc <__muldf3>
    4b0c:	013ffff4 	movhi	r4,65535
    4b10:	210f2c04 	addi	r4,r4,15536
    4b14:	1015883a 	mov	r10,r2
    4b18:	180f883a 	mov	r7,r3
    4b1c:	81002f16 	blt	r16,r4,4bdc <scalbn+0x114>
    4b20:	1a5ffc2c 	andhi	r9,r3,32752
    4b24:	4813d53a 	srai	r9,r9,20
    4b28:	0081ff84 	movi	r2,2046
    4b2c:	180d883a 	mov	r6,r3
    4b30:	4a3ff284 	addi	r8,r9,-54
    4b34:	4411883a 	add	r8,r8,r16
    4b38:	1200170e 	bge	r2,r8,4b98 <scalbn+0xd0>
    4b3c:	01220034 	movhi	r4,34816
    4b40:	015f8e34 	movhi	r5,32312
    4b44:	500d883a 	mov	r6,r10
    4b48:	211d6704 	addi	r4,r4,30108
    4b4c:	29790f04 	addi	r5,r5,-7108
    4b50:	0004c940 	call	4c94 <copysign>
    4b54:	01a20034 	movhi	r6,34816
    4b58:	01df8e34 	movhi	r7,32312
    4b5c:	1009883a 	mov	r4,r2
    4b60:	180b883a 	mov	r5,r3
    4b64:	319d6704 	addi	r6,r6,30108
    4b68:	39f90f04 	addi	r7,r7,-7108
    4b6c:	00062bc0 	call	62bc <__muldf3>
    4b70:	dfc00117 	ldw	ra,4(sp)
    4b74:	dc000017 	ldw	r16,0(sp)
    4b78:	dec00204 	addi	sp,sp,8
    4b7c:	f800283a 	ret
    4b80:	0081ffc4 	movi	r2,2047
    4b84:	280d883a 	mov	r6,r5
    4b88:	40803126 	beq	r8,r2,4c50 <scalbn+0x188>
    4b8c:	4411883a 	add	r8,r8,r16
    4b90:	0081ff84 	movi	r2,2046
    4b94:	123fe916 	blt	r2,r8,4b3c <__alt_mem_Flash_flash_data+0xf4004b3c>
    4b98:	02001b0e 	bge	zero,r8,4c08 <scalbn+0x140>
    4b9c:	4010953a 	slli	r8,r8,20
    4ba0:	00e00434 	movhi	r3,32784
    4ba4:	18ffffc4 	addi	r3,r3,-1
    4ba8:	30ce703a 	and	r7,r6,r3
    4bac:	5005883a 	mov	r2,r10
    4bb0:	41c6b03a 	or	r3,r8,r7
    4bb4:	dfc00117 	ldw	ra,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00204 	addi	sp,sp,8
    4bc0:	f800283a 	ret
    4bc4:	2005883a 	mov	r2,r4
    4bc8:	2807883a 	mov	r3,r5
    4bcc:	dfc00117 	ldw	ra,4(sp)
    4bd0:	dc000017 	ldw	r16,0(sp)
    4bd4:	dec00204 	addi	sp,sp,8
    4bd8:	f800283a 	ret
    4bdc:	01b0be74 	movhi	r6,49913
    4be0:	01c06974 	movhi	r7,421
    4be4:	31bcd644 	addi	r6,r6,-3239
    4be8:	39db87c4 	addi	r7,r7,28191
    4bec:	1009883a 	mov	r4,r2
    4bf0:	180b883a 	mov	r5,r3
    4bf4:	00062bc0 	call	62bc <__muldf3>
    4bf8:	dfc00117 	ldw	ra,4(sp)
    4bfc:	dc000017 	ldw	r16,0(sp)
    4c00:	dec00204 	addi	sp,sp,8
    4c04:	f800283a 	ret
    4c08:	00bff2c4 	movi	r2,-53
    4c0c:	4080160e 	bge	r8,r2,4c68 <scalbn+0x1a0>
    4c10:	00b0d414 	movui	r2,50000
    4c14:	143fc916 	blt	r2,r16,4b3c <__alt_mem_Flash_flash_data+0xf4004b3c>
    4c18:	0130be74 	movhi	r4,49913
    4c1c:	01406974 	movhi	r5,421
    4c20:	500d883a 	mov	r6,r10
    4c24:	213cd644 	addi	r4,r4,-3239
    4c28:	295b87c4 	addi	r5,r5,28191
    4c2c:	0004c940 	call	4c94 <copysign>
    4c30:	01b0be74 	movhi	r6,49913
    4c34:	01c06974 	movhi	r7,421
    4c38:	1009883a 	mov	r4,r2
    4c3c:	180b883a 	mov	r5,r3
    4c40:	31bcd644 	addi	r6,r6,-3239
    4c44:	39db87c4 	addi	r7,r7,28191
    4c48:	00062bc0 	call	62bc <__muldf3>
    4c4c:	003fd906 	br	4bb4 <__alt_mem_Flash_flash_data+0xf4004bb4>
    4c50:	200d883a 	mov	r6,r4
    4c54:	0004f100 	call	4f10 <__adddf3>
    4c58:	dfc00117 	ldw	ra,4(sp)
    4c5c:	dc000017 	ldw	r16,0(sp)
    4c60:	dec00204 	addi	sp,sp,8
    4c64:	f800283a 	ret
    4c68:	42000d84 	addi	r8,r8,54
    4c6c:	4012953a 	slli	r9,r8,20
    4c70:	01e00434 	movhi	r7,32784
    4c74:	39ffffc4 	addi	r7,r7,-1
    4c78:	31ca703a 	and	r5,r6,r7
    4c7c:	5009883a 	mov	r4,r10
    4c80:	494ab03a 	or	r5,r9,r5
    4c84:	000d883a 	mov	r6,zero
    4c88:	01cf2434 	movhi	r7,15504
    4c8c:	00062bc0 	call	62bc <__muldf3>
    4c90:	003fc806 	br	4bb4 <__alt_mem_Flash_flash_data+0xf4004bb4>

00004c94 <copysign>:
    4c94:	2005883a 	mov	r2,r4
    4c98:	01200034 	movhi	r4,32768
    4c9c:	213fffc4 	addi	r4,r4,-1
    4ca0:	38e0002c 	andhi	r3,r7,32768
    4ca4:	290a703a 	and	r5,r5,r4
    4ca8:	1946b03a 	or	r3,r3,r5
    4cac:	f800283a 	ret

00004cb0 <udivmodsi4>:
    4cb0:	2900182e 	bgeu	r5,r4,4d14 <udivmodsi4+0x64>
    4cb4:	28001716 	blt	r5,zero,4d14 <udivmodsi4+0x64>
    4cb8:	00800804 	movi	r2,32
    4cbc:	00c00044 	movi	r3,1
    4cc0:	00000206 	br	4ccc <udivmodsi4+0x1c>
    4cc4:	10001126 	beq	r2,zero,4d0c <udivmodsi4+0x5c>
    4cc8:	28000516 	blt	r5,zero,4ce0 <udivmodsi4+0x30>
    4ccc:	294b883a 	add	r5,r5,r5
    4cd0:	10bfffc4 	addi	r2,r2,-1
    4cd4:	18c7883a 	add	r3,r3,r3
    4cd8:	293ffa36 	bltu	r5,r4,4cc4 <__alt_mem_Flash_flash_data+0xf4004cc4>
    4cdc:	18000b26 	beq	r3,zero,4d0c <udivmodsi4+0x5c>
    4ce0:	0005883a 	mov	r2,zero
    4ce4:	21400236 	bltu	r4,r5,4cf0 <udivmodsi4+0x40>
    4ce8:	2149c83a 	sub	r4,r4,r5
    4cec:	10c4b03a 	or	r2,r2,r3
    4cf0:	1806d07a 	srli	r3,r3,1
    4cf4:	280ad07a 	srli	r5,r5,1
    4cf8:	183ffa1e 	bne	r3,zero,4ce4 <__alt_mem_Flash_flash_data+0xf4004ce4>
    4cfc:	3000011e 	bne	r6,zero,4d04 <udivmodsi4+0x54>
    4d00:	f800283a 	ret
    4d04:	2005883a 	mov	r2,r4
    4d08:	f800283a 	ret
    4d0c:	0005883a 	mov	r2,zero
    4d10:	003ffa06 	br	4cfc <__alt_mem_Flash_flash_data+0xf4004cfc>
    4d14:	00c00044 	movi	r3,1
    4d18:	003ff106 	br	4ce0 <__alt_mem_Flash_flash_data+0xf4004ce0>

00004d1c <__divsi3>:
    4d1c:	defffe04 	addi	sp,sp,-8
    4d20:	dfc00115 	stw	ra,4(sp)
    4d24:	dc000015 	stw	r16,0(sp)
    4d28:	20000b16 	blt	r4,zero,4d58 <__divsi3+0x3c>
    4d2c:	0021883a 	mov	r16,zero
    4d30:	28000c16 	blt	r5,zero,4d64 <__divsi3+0x48>
    4d34:	000d883a 	mov	r6,zero
    4d38:	0004cb00 	call	4cb0 <udivmodsi4>
    4d3c:	0407c83a 	sub	r3,zero,r16
    4d40:	1884f03a 	xor	r2,r3,r2
    4d44:	1405883a 	add	r2,r2,r16
    4d48:	dfc00117 	ldw	ra,4(sp)
    4d4c:	dc000017 	ldw	r16,0(sp)
    4d50:	dec00204 	addi	sp,sp,8
    4d54:	f800283a 	ret
    4d58:	0109c83a 	sub	r4,zero,r4
    4d5c:	04000044 	movi	r16,1
    4d60:	283ff40e 	bge	r5,zero,4d34 <__alt_mem_Flash_flash_data+0xf4004d34>
    4d64:	014bc83a 	sub	r5,zero,r5
    4d68:	8400005c 	xori	r16,r16,1
    4d6c:	003ff106 	br	4d34 <__alt_mem_Flash_flash_data+0xf4004d34>

00004d70 <__modsi3>:
    4d70:	defffd04 	addi	sp,sp,-12
    4d74:	dfc00215 	stw	ra,8(sp)
    4d78:	dc400115 	stw	r17,4(sp)
    4d7c:	dc000015 	stw	r16,0(sp)
    4d80:	20000c16 	blt	r4,zero,4db4 <__modsi3+0x44>
    4d84:	0023883a 	mov	r17,zero
    4d88:	0021883a 	mov	r16,zero
    4d8c:	28000d16 	blt	r5,zero,4dc4 <__modsi3+0x54>
    4d90:	01800044 	movi	r6,1
    4d94:	0004cb00 	call	4cb0 <udivmodsi4>
    4d98:	1404f03a 	xor	r2,r2,r16
    4d9c:	8885883a 	add	r2,r17,r2
    4da0:	dfc00217 	ldw	ra,8(sp)
    4da4:	dc400117 	ldw	r17,4(sp)
    4da8:	dc000017 	ldw	r16,0(sp)
    4dac:	dec00304 	addi	sp,sp,12
    4db0:	f800283a 	ret
    4db4:	0109c83a 	sub	r4,zero,r4
    4db8:	04400044 	movi	r17,1
    4dbc:	043fffc4 	movi	r16,-1
    4dc0:	283ff30e 	bge	r5,zero,4d90 <__alt_mem_Flash_flash_data+0xf4004d90>
    4dc4:	014bc83a 	sub	r5,zero,r5
    4dc8:	003ff106 	br	4d90 <__alt_mem_Flash_flash_data+0xf4004d90>

00004dcc <__udivsi3>:
    4dcc:	000d883a 	mov	r6,zero
    4dd0:	0004cb01 	jmpi	4cb0 <udivmodsi4>

00004dd4 <__umodsi3>:
    4dd4:	01800044 	movi	r6,1
    4dd8:	0004cb01 	jmpi	4cb0 <udivmodsi4>

00004ddc <__floatsisf>:
    4ddc:	defffd04 	addi	sp,sp,-12
    4de0:	dc000015 	stw	r16,0(sp)
    4de4:	dfc00215 	stw	ra,8(sp)
    4de8:	dc400115 	stw	r17,4(sp)
    4dec:	2021883a 	mov	r16,r4
    4df0:	20003a26 	beq	r4,zero,4edc <__floatsisf+0x100>
    4df4:	2022d7fa 	srli	r17,r4,31
    4df8:	88000126 	beq	r17,zero,4e00 <__floatsisf+0x24>
    4dfc:	0121c83a 	sub	r16,zero,r4
    4e00:	8009883a 	mov	r4,r16
    4e04:	00075180 	call	7518 <__clzsi2>
    4e08:	00c02784 	movi	r3,158
    4e0c:	1887c83a 	sub	r3,r3,r2
    4e10:	01802584 	movi	r6,150
    4e14:	800b883a 	mov	r5,r16
    4e18:	30c01616 	blt	r6,r3,4e74 <__floatsisf+0x98>
    4e1c:	01000204 	movi	r4,8
    4e20:	2080020e 	bge	r4,r2,4e2c <__floatsisf+0x50>
    4e24:	10bffe04 	addi	r2,r2,-8
    4e28:	80a0983a 	sll	r16,r16,r2
    4e2c:	00802034 	movhi	r2,128
    4e30:	10bfffc4 	addi	r2,r2,-1
    4e34:	8809883a 	mov	r4,r17
    4e38:	80a0703a 	and	r16,r16,r2
    4e3c:	18803fcc 	andi	r2,r3,255
    4e40:	100695fa 	slli	r3,r2,23
    4e44:	20803fcc 	andi	r2,r4,255
    4e48:	100897fa 	slli	r4,r2,31
    4e4c:	00802034 	movhi	r2,128
    4e50:	10bfffc4 	addi	r2,r2,-1
    4e54:	8084703a 	and	r2,r16,r2
    4e58:	10c4b03a 	or	r2,r2,r3
    4e5c:	1104b03a 	or	r2,r2,r4
    4e60:	dfc00217 	ldw	ra,8(sp)
    4e64:	dc400117 	ldw	r17,4(sp)
    4e68:	dc000017 	ldw	r16,0(sp)
    4e6c:	dec00304 	addi	sp,sp,12
    4e70:	f800283a 	ret
    4e74:	01002644 	movi	r4,153
    4e78:	20c01c16 	blt	r4,r3,4eec <__floatsisf+0x110>
    4e7c:	01000144 	movi	r4,5
    4e80:	2080020e 	bge	r4,r2,4e8c <__floatsisf+0xb0>
    4e84:	113ffec4 	addi	r4,r2,-5
    4e88:	290a983a 	sll	r5,r5,r4
    4e8c:	043f0034 	movhi	r16,64512
    4e90:	843fffc4 	addi	r16,r16,-1
    4e94:	298001cc 	andi	r6,r5,7
    4e98:	2c20703a 	and	r16,r5,r16
    4e9c:	30000426 	beq	r6,zero,4eb0 <__floatsisf+0xd4>
    4ea0:	294003cc 	andi	r5,r5,15
    4ea4:	01000104 	movi	r4,4
    4ea8:	29000126 	beq	r5,r4,4eb0 <__floatsisf+0xd4>
    4eac:	8121883a 	add	r16,r16,r4
    4eb0:	8101002c 	andhi	r4,r16,1024
    4eb4:	20000526 	beq	r4,zero,4ecc <__floatsisf+0xf0>
    4eb8:	00c027c4 	movi	r3,159
    4ebc:	1887c83a 	sub	r3,r3,r2
    4ec0:	00bf0034 	movhi	r2,64512
    4ec4:	10bfffc4 	addi	r2,r2,-1
    4ec8:	80a0703a 	and	r16,r16,r2
    4ecc:	802091ba 	slli	r16,r16,6
    4ed0:	8809883a 	mov	r4,r17
    4ed4:	8020d27a 	srli	r16,r16,9
    4ed8:	003fd806 	br	4e3c <__alt_mem_Flash_flash_data+0xf4004e3c>
    4edc:	0009883a 	mov	r4,zero
    4ee0:	0007883a 	mov	r3,zero
    4ee4:	0021883a 	mov	r16,zero
    4ee8:	003fd406 	br	4e3c <__alt_mem_Flash_flash_data+0xf4004e3c>
    4eec:	01800144 	movi	r6,5
    4ef0:	110006c4 	addi	r4,r2,27
    4ef4:	8108983a 	sll	r4,r16,r4
    4ef8:	308fc83a 	sub	r7,r6,r2
    4efc:	81cad83a 	srl	r5,r16,r7
    4f00:	2008c03a 	cmpne	r4,r4,zero
    4f04:	214ab03a 	or	r5,r4,r5
    4f08:	30bfe00e 	bge	r6,r2,4e8c <__alt_mem_Flash_flash_data+0xf4004e8c>
    4f0c:	003fdd06 	br	4e84 <__alt_mem_Flash_flash_data+0xf4004e84>

00004f10 <__adddf3>:
    4f10:	02000434 	movhi	r8,16
    4f14:	423fffc4 	addi	r8,r8,-1
    4f18:	defffb04 	addi	sp,sp,-20
    4f1c:	2a12703a 	and	r9,r5,r8
    4f20:	2806d7fa 	srli	r3,r5,31
    4f24:	3a10703a 	and	r8,r7,r8
    4f28:	3804d53a 	srli	r2,r7,20
    4f2c:	3014d77a 	srli	r10,r6,29
    4f30:	dc000015 	stw	r16,0(sp)
    4f34:	481290fa 	slli	r9,r9,3
    4f38:	2820d53a 	srli	r16,r5,20
    4f3c:	401090fa 	slli	r8,r8,3
    4f40:	200ad77a 	srli	r5,r4,29
    4f44:	380ed7fa 	srli	r7,r7,31
    4f48:	dc800215 	stw	r18,8(sp)
    4f4c:	dc400115 	stw	r17,4(sp)
    4f50:	dfc00415 	stw	ra,16(sp)
    4f54:	dcc00315 	stw	r19,12(sp)
    4f58:	1c803fcc 	andi	r18,r3,255
    4f5c:	8401ffcc 	andi	r16,r16,2047
    4f60:	494ab03a 	or	r5,r9,r5
    4f64:	202290fa 	slli	r17,r4,3
    4f68:	1081ffcc 	andi	r2,r2,2047
    4f6c:	4290b03a 	or	r8,r8,r10
    4f70:	300c90fa 	slli	r6,r6,3
    4f74:	91c07026 	beq	r18,r7,5138 <__adddf3+0x228>
    4f78:	8087c83a 	sub	r3,r16,r2
    4f7c:	00c0b30e 	bge	zero,r3,524c <__adddf3+0x33c>
    4f80:	10002a1e 	bne	r2,zero,502c <__adddf3+0x11c>
    4f84:	4184b03a 	or	r2,r8,r6
    4f88:	1000991e 	bne	r2,zero,51f0 <__adddf3+0x2e0>
    4f8c:	888001cc 	andi	r2,r17,7
    4f90:	10005b26 	beq	r2,zero,5100 <__adddf3+0x1f0>
    4f94:	88c003cc 	andi	r3,r17,15
    4f98:	00800104 	movi	r2,4
    4f9c:	18805826 	beq	r3,r2,5100 <__adddf3+0x1f0>
    4fa0:	89800104 	addi	r6,r17,4
    4fa4:	3463803a 	cmpltu	r17,r6,r17
    4fa8:	2c4b883a 	add	r5,r5,r17
    4fac:	2880202c 	andhi	r2,r5,128
    4fb0:	9007883a 	mov	r3,r18
    4fb4:	3023883a 	mov	r17,r6
    4fb8:	10005426 	beq	r2,zero,510c <__adddf3+0x1fc>
    4fbc:	84000044 	addi	r16,r16,1
    4fc0:	0081ffc4 	movi	r2,2047
    4fc4:	8080c126 	beq	r16,r2,52cc <__adddf3+0x3bc>
    4fc8:	013fe034 	movhi	r4,65408
    4fcc:	213fffc4 	addi	r4,r4,-1
    4fd0:	290a703a 	and	r5,r5,r4
    4fd4:	2804977a 	slli	r2,r5,29
    4fd8:	280a927a 	slli	r5,r5,9
    4fdc:	8822d0fa 	srli	r17,r17,3
    4fe0:	8401ffcc 	andi	r16,r16,2047
    4fe4:	2808d33a 	srli	r4,r5,12
    4fe8:	1444b03a 	or	r2,r2,r17
    4fec:	8401ffcc 	andi	r16,r16,2047
    4ff0:	800a953a 	slli	r5,r16,20
    4ff4:	18c03fcc 	andi	r3,r3,255
    4ff8:	04000434 	movhi	r16,16
    4ffc:	180697fa 	slli	r3,r3,31
    5000:	843fffc4 	addi	r16,r16,-1
    5004:	2420703a 	and	r16,r4,r16
    5008:	8160b03a 	or	r16,r16,r5
    500c:	80c6b03a 	or	r3,r16,r3
    5010:	dfc00417 	ldw	ra,16(sp)
    5014:	dcc00317 	ldw	r19,12(sp)
    5018:	dc800217 	ldw	r18,8(sp)
    501c:	dc400117 	ldw	r17,4(sp)
    5020:	dc000017 	ldw	r16,0(sp)
    5024:	dec00504 	addi	sp,sp,20
    5028:	f800283a 	ret
    502c:	0081ffc4 	movi	r2,2047
    5030:	80bfd626 	beq	r16,r2,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5034:	42002034 	orhi	r8,r8,128
    5038:	00800e04 	movi	r2,56
    503c:	10c0a616 	blt	r2,r3,52d8 <__adddf3+0x3c8>
    5040:	008007c4 	movi	r2,31
    5044:	10c0c916 	blt	r2,r3,536c <__adddf3+0x45c>
    5048:	00800804 	movi	r2,32
    504c:	10c5c83a 	sub	r2,r2,r3
    5050:	408e983a 	sll	r7,r8,r2
    5054:	30c8d83a 	srl	r4,r6,r3
    5058:	3084983a 	sll	r2,r6,r2
    505c:	40c6d83a 	srl	r3,r8,r3
    5060:	390cb03a 	or	r6,r7,r4
    5064:	1004c03a 	cmpne	r2,r2,zero
    5068:	308cb03a 	or	r6,r6,r2
    506c:	898dc83a 	sub	r6,r17,r6
    5070:	89a3803a 	cmpltu	r17,r17,r6
    5074:	28cbc83a 	sub	r5,r5,r3
    5078:	2c4bc83a 	sub	r5,r5,r17
    507c:	3023883a 	mov	r17,r6
    5080:	2880202c 	andhi	r2,r5,128
    5084:	10006d26 	beq	r2,zero,523c <__adddf3+0x32c>
    5088:	04c02034 	movhi	r19,128
    508c:	9cffffc4 	addi	r19,r19,-1
    5090:	2ce6703a 	and	r19,r5,r19
    5094:	98007e26 	beq	r19,zero,5290 <__adddf3+0x380>
    5098:	9809883a 	mov	r4,r19
    509c:	00075180 	call	7518 <__clzsi2>
    50a0:	10fffe04 	addi	r3,r2,-8
    50a4:	010007c4 	movi	r4,31
    50a8:	20c07f16 	blt	r4,r3,52a8 <__adddf3+0x398>
    50ac:	01400a04 	movi	r5,40
    50b0:	2885c83a 	sub	r2,r5,r2
    50b4:	888ad83a 	srl	r5,r17,r2
    50b8:	98e6983a 	sll	r19,r19,r3
    50bc:	88e2983a 	sll	r17,r17,r3
    50c0:	2ce6b03a 	or	r19,r5,r19
    50c4:	1c007c16 	blt	r3,r16,52b8 <__adddf3+0x3a8>
    50c8:	1c21c83a 	sub	r16,r3,r16
    50cc:	81400044 	addi	r5,r16,1
    50d0:	00c007c4 	movi	r3,31
    50d4:	19409816 	blt	r3,r5,5338 <__adddf3+0x428>
    50d8:	1c21c83a 	sub	r16,r3,r16
    50dc:	8c08983a 	sll	r4,r17,r16
    50e0:	8946d83a 	srl	r3,r17,r5
    50e4:	9c20983a 	sll	r16,r19,r16
    50e8:	2008c03a 	cmpne	r4,r4,zero
    50ec:	994ad83a 	srl	r5,r19,r5
    50f0:	1c06b03a 	or	r3,r3,r16
    50f4:	1922b03a 	or	r17,r3,r4
    50f8:	0021883a 	mov	r16,zero
    50fc:	003fa306 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5100:	2880202c 	andhi	r2,r5,128
    5104:	9007883a 	mov	r3,r18
    5108:	103fac1e 	bne	r2,zero,4fbc <__alt_mem_Flash_flash_data+0xf4004fbc>
    510c:	2804977a 	slli	r2,r5,29
    5110:	8822d0fa 	srli	r17,r17,3
    5114:	0101ffc4 	movi	r4,2047
    5118:	280ad0fa 	srli	r5,r5,3
    511c:	1444b03a 	or	r2,r2,r17
    5120:	81002c26 	beq	r16,r4,51d4 <__adddf3+0x2c4>
    5124:	8120703a 	and	r16,r16,r4
    5128:	01000434 	movhi	r4,16
    512c:	213fffc4 	addi	r4,r4,-1
    5130:	2908703a 	and	r4,r5,r4
    5134:	003fad06 	br	4fec <__alt_mem_Flash_flash_data+0xf4004fec>
    5138:	8089c83a 	sub	r4,r16,r2
    513c:	01006a0e 	bge	zero,r4,52e8 <__adddf3+0x3d8>
    5140:	10003326 	beq	r2,zero,5210 <__adddf3+0x300>
    5144:	0081ffc4 	movi	r2,2047
    5148:	80bf9026 	beq	r16,r2,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    514c:	42002034 	orhi	r8,r8,128
    5150:	00800e04 	movi	r2,56
    5154:	1100b116 	blt	r2,r4,541c <__adddf3+0x50c>
    5158:	008007c4 	movi	r2,31
    515c:	1100e216 	blt	r2,r4,54e8 <__adddf3+0x5d8>
    5160:	00800804 	movi	r2,32
    5164:	1105c83a 	sub	r2,r2,r4
    5168:	4092983a 	sll	r9,r8,r2
    516c:	310ed83a 	srl	r7,r6,r4
    5170:	3084983a 	sll	r2,r6,r2
    5174:	4110d83a 	srl	r8,r8,r4
    5178:	49ccb03a 	or	r6,r9,r7
    517c:	1004c03a 	cmpne	r2,r2,zero
    5180:	308cb03a 	or	r6,r6,r2
    5184:	344d883a 	add	r6,r6,r17
    5188:	3463803a 	cmpltu	r17,r6,r17
    518c:	414b883a 	add	r5,r8,r5
    5190:	2c4b883a 	add	r5,r5,r17
    5194:	3023883a 	mov	r17,r6
    5198:	2880202c 	andhi	r2,r5,128
    519c:	10002726 	beq	r2,zero,523c <__adddf3+0x32c>
    51a0:	84000044 	addi	r16,r16,1
    51a4:	0081ffc4 	movi	r2,2047
    51a8:	8080ae26 	beq	r16,r2,5464 <__adddf3+0x554>
    51ac:	00bfe034 	movhi	r2,65408
    51b0:	10bfffc4 	addi	r2,r2,-1
    51b4:	288a703a 	and	r5,r5,r2
    51b8:	880cd07a 	srli	r6,r17,1
    51bc:	280897fa 	slli	r4,r5,31
    51c0:	88c0004c 	andi	r3,r17,1
    51c4:	30e2b03a 	or	r17,r6,r3
    51c8:	280ad07a 	srli	r5,r5,1
    51cc:	8922b03a 	or	r17,r17,r4
    51d0:	003f6e06 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    51d4:	1148b03a 	or	r4,r2,r5
    51d8:	20003c26 	beq	r4,zero,52cc <__adddf3+0x3bc>
    51dc:	29000234 	orhi	r4,r5,8
    51e0:	01400434 	movhi	r5,16
    51e4:	297fffc4 	addi	r5,r5,-1
    51e8:	2148703a 	and	r4,r4,r5
    51ec:	003f7f06 	br	4fec <__alt_mem_Flash_flash_data+0xf4004fec>
    51f0:	18ffffc4 	addi	r3,r3,-1
    51f4:	18004d1e 	bne	r3,zero,532c <__adddf3+0x41c>
    51f8:	898dc83a 	sub	r6,r17,r6
    51fc:	89a3803a 	cmpltu	r17,r17,r6
    5200:	2a0bc83a 	sub	r5,r5,r8
    5204:	2c4bc83a 	sub	r5,r5,r17
    5208:	3023883a 	mov	r17,r6
    520c:	003f9c06 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    5210:	4184b03a 	or	r2,r8,r6
    5214:	103f5d26 	beq	r2,zero,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5218:	213fffc4 	addi	r4,r4,-1
    521c:	203fd926 	beq	r4,zero,5184 <__alt_mem_Flash_flash_data+0xf4005184>
    5220:	0081ffc4 	movi	r2,2047
    5224:	80bfca1e 	bne	r16,r2,5150 <__alt_mem_Flash_flash_data+0xf4005150>
    5228:	003f5806 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    522c:	10c8b03a 	or	r4,r2,r3
    5230:	20008b26 	beq	r4,zero,5460 <__adddf3+0x550>
    5234:	100b883a 	mov	r5,r2
    5238:	1823883a 	mov	r17,r3
    523c:	888001cc 	andi	r2,r17,7
    5240:	103f541e 	bne	r2,zero,4f94 <__alt_mem_Flash_flash_data+0xf4004f94>
    5244:	9007883a 	mov	r3,r18
    5248:	003fb006 	br	510c <__alt_mem_Flash_flash_data+0xf400510c>
    524c:	1800531e 	bne	r3,zero,539c <__adddf3+0x48c>
    5250:	80800044 	addi	r2,r16,1
    5254:	1081ffcc 	andi	r2,r2,2047
    5258:	00c00044 	movi	r3,1
    525c:	1880990e 	bge	r3,r2,54c4 <__adddf3+0x5b4>
    5260:	8985c83a 	sub	r2,r17,r6
    5264:	8887803a 	cmpltu	r3,r17,r2
    5268:	2a27c83a 	sub	r19,r5,r8
    526c:	98e7c83a 	sub	r19,r19,r3
    5270:	98c0202c 	andhi	r3,r19,128
    5274:	18006226 	beq	r3,zero,5400 <__adddf3+0x4f0>
    5278:	3463c83a 	sub	r17,r6,r17
    527c:	4151c83a 	sub	r8,r8,r5
    5280:	344d803a 	cmpltu	r6,r6,r17
    5284:	41a7c83a 	sub	r19,r8,r6
    5288:	3825883a 	mov	r18,r7
    528c:	983f821e 	bne	r19,zero,5098 <__alt_mem_Flash_flash_data+0xf4005098>
    5290:	8809883a 	mov	r4,r17
    5294:	00075180 	call	7518 <__clzsi2>
    5298:	10800804 	addi	r2,r2,32
    529c:	10fffe04 	addi	r3,r2,-8
    52a0:	010007c4 	movi	r4,31
    52a4:	20ff810e 	bge	r4,r3,50ac <__alt_mem_Flash_flash_data+0xf40050ac>
    52a8:	14fff604 	addi	r19,r2,-40
    52ac:	8ce6983a 	sll	r19,r17,r19
    52b0:	0023883a 	mov	r17,zero
    52b4:	1c3f840e 	bge	r3,r16,50c8 <__alt_mem_Flash_flash_data+0xf40050c8>
    52b8:	017fe034 	movhi	r5,65408
    52bc:	297fffc4 	addi	r5,r5,-1
    52c0:	80e1c83a 	sub	r16,r16,r3
    52c4:	994a703a 	and	r5,r19,r5
    52c8:	003f3006 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    52cc:	0009883a 	mov	r4,zero
    52d0:	0005883a 	mov	r2,zero
    52d4:	003f4506 	br	4fec <__alt_mem_Flash_flash_data+0xf4004fec>
    52d8:	418cb03a 	or	r6,r8,r6
    52dc:	300cc03a 	cmpne	r6,r6,zero
    52e0:	0007883a 	mov	r3,zero
    52e4:	003f6106 	br	506c <__alt_mem_Flash_flash_data+0xf400506c>
    52e8:	2000921e 	bne	r4,zero,5534 <__adddf3+0x624>
    52ec:	80800044 	addi	r2,r16,1
    52f0:	11c1ffcc 	andi	r7,r2,2047
    52f4:	01000044 	movi	r4,1
    52f8:	21c0610e 	bge	r4,r7,5480 <__adddf3+0x570>
    52fc:	0101ffc4 	movi	r4,2047
    5300:	1100a326 	beq	r2,r4,5590 <__adddf3+0x680>
    5304:	344d883a 	add	r6,r6,r17
    5308:	3463803a 	cmpltu	r17,r6,r17
    530c:	414b883a 	add	r5,r8,r5
    5310:	2c4b883a 	add	r5,r5,r17
    5314:	282297fa 	slli	r17,r5,31
    5318:	300cd07a 	srli	r6,r6,1
    531c:	280ad07a 	srli	r5,r5,1
    5320:	1021883a 	mov	r16,r2
    5324:	89a2b03a 	or	r17,r17,r6
    5328:	003f1806 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    532c:	0081ffc4 	movi	r2,2047
    5330:	80bf411e 	bne	r16,r2,5038 <__alt_mem_Flash_flash_data+0xf4005038>
    5334:	003f1506 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5338:	80bff844 	addi	r2,r16,-31
    533c:	00c00804 	movi	r3,32
    5340:	9884d83a 	srl	r2,r19,r2
    5344:	28c04a26 	beq	r5,r3,5470 <__adddf3+0x560>
    5348:	00c00fc4 	movi	r3,63
    534c:	1c21c83a 	sub	r16,r3,r16
    5350:	9c26983a 	sll	r19,r19,r16
    5354:	9c62b03a 	or	r17,r19,r17
    5358:	8822c03a 	cmpne	r17,r17,zero
    535c:	88a2b03a 	or	r17,r17,r2
    5360:	000b883a 	mov	r5,zero
    5364:	0021883a 	mov	r16,zero
    5368:	003fb406 	br	523c <__alt_mem_Flash_flash_data+0xf400523c>
    536c:	18bff804 	addi	r2,r3,-32
    5370:	01000804 	movi	r4,32
    5374:	4084d83a 	srl	r2,r8,r2
    5378:	19003f26 	beq	r3,r4,5478 <__adddf3+0x568>
    537c:	01001004 	movi	r4,64
    5380:	20c7c83a 	sub	r3,r4,r3
    5384:	40d0983a 	sll	r8,r8,r3
    5388:	418cb03a 	or	r6,r8,r6
    538c:	300cc03a 	cmpne	r6,r6,zero
    5390:	308cb03a 	or	r6,r6,r2
    5394:	0007883a 	mov	r3,zero
    5398:	003f3406 	br	506c <__alt_mem_Flash_flash_data+0xf400506c>
    539c:	80002326 	beq	r16,zero,542c <__adddf3+0x51c>
    53a0:	0101ffc4 	movi	r4,2047
    53a4:	11005e26 	beq	r2,r4,5520 <__adddf3+0x610>
    53a8:	00c7c83a 	sub	r3,zero,r3
    53ac:	29402034 	orhi	r5,r5,128
    53b0:	01000e04 	movi	r4,56
    53b4:	20c07216 	blt	r4,r3,5580 <__adddf3+0x670>
    53b8:	010007c4 	movi	r4,31
    53bc:	20c0ce16 	blt	r4,r3,56f8 <__adddf3+0x7e8>
    53c0:	01000804 	movi	r4,32
    53c4:	20c9c83a 	sub	r4,r4,r3
    53c8:	2914983a 	sll	r10,r5,r4
    53cc:	88d2d83a 	srl	r9,r17,r3
    53d0:	8908983a 	sll	r4,r17,r4
    53d4:	28c6d83a 	srl	r3,r5,r3
    53d8:	5262b03a 	or	r17,r10,r9
    53dc:	2008c03a 	cmpne	r4,r4,zero
    53e0:	8922b03a 	or	r17,r17,r4
    53e4:	3463c83a 	sub	r17,r6,r17
    53e8:	40c7c83a 	sub	r3,r8,r3
    53ec:	344d803a 	cmpltu	r6,r6,r17
    53f0:	198bc83a 	sub	r5,r3,r6
    53f4:	1021883a 	mov	r16,r2
    53f8:	3825883a 	mov	r18,r7
    53fc:	003f2006 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    5400:	9886b03a 	or	r3,r19,r2
    5404:	1800141e 	bne	r3,zero,5458 <__adddf3+0x548>
    5408:	0007883a 	mov	r3,zero
    540c:	000b883a 	mov	r5,zero
    5410:	0023883a 	mov	r17,zero
    5414:	0021883a 	mov	r16,zero
    5418:	003f3c06 	br	510c <__alt_mem_Flash_flash_data+0xf400510c>
    541c:	418cb03a 	or	r6,r8,r6
    5420:	300cc03a 	cmpne	r6,r6,zero
    5424:	0011883a 	mov	r8,zero
    5428:	003f5606 	br	5184 <__alt_mem_Flash_flash_data+0xf4005184>
    542c:	2c48b03a 	or	r4,r5,r17
    5430:	20003b26 	beq	r4,zero,5520 <__adddf3+0x610>
    5434:	00c6303a 	nor	r3,zero,r3
    5438:	1800371e 	bne	r3,zero,5518 <__adddf3+0x608>
    543c:	3463c83a 	sub	r17,r6,r17
    5440:	414bc83a 	sub	r5,r8,r5
    5444:	344d803a 	cmpltu	r6,r6,r17
    5448:	298bc83a 	sub	r5,r5,r6
    544c:	1021883a 	mov	r16,r2
    5450:	3825883a 	mov	r18,r7
    5454:	003f0a06 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    5458:	1023883a 	mov	r17,r2
    545c:	003f0d06 	br	5094 <__alt_mem_Flash_flash_data+0xf4005094>
    5460:	0007883a 	mov	r3,zero
    5464:	000b883a 	mov	r5,zero
    5468:	0023883a 	mov	r17,zero
    546c:	003f2706 	br	510c <__alt_mem_Flash_flash_data+0xf400510c>
    5470:	0027883a 	mov	r19,zero
    5474:	003fb706 	br	5354 <__alt_mem_Flash_flash_data+0xf4005354>
    5478:	0011883a 	mov	r8,zero
    547c:	003fc206 	br	5388 <__alt_mem_Flash_flash_data+0xf4005388>
    5480:	2c44b03a 	or	r2,r5,r17
    5484:	8000871e 	bne	r16,zero,56a4 <__adddf3+0x794>
    5488:	1000b126 	beq	r2,zero,5750 <__adddf3+0x840>
    548c:	4184b03a 	or	r2,r8,r6
    5490:	103ebe26 	beq	r2,zero,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5494:	3445883a 	add	r2,r6,r17
    5498:	1463803a 	cmpltu	r17,r2,r17
    549c:	414b883a 	add	r5,r8,r5
    54a0:	2c4b883a 	add	r5,r5,r17
    54a4:	28c0202c 	andhi	r3,r5,128
    54a8:	1023883a 	mov	r17,r2
    54ac:	183f6326 	beq	r3,zero,523c <__alt_mem_Flash_flash_data+0xf400523c>
    54b0:	00bfe034 	movhi	r2,65408
    54b4:	10bfffc4 	addi	r2,r2,-1
    54b8:	2021883a 	mov	r16,r4
    54bc:	288a703a 	and	r5,r5,r2
    54c0:	003eb206 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    54c4:	2c44b03a 	or	r2,r5,r17
    54c8:	8000251e 	bne	r16,zero,5560 <__adddf3+0x650>
    54cc:	10004b1e 	bne	r2,zero,55fc <__adddf3+0x6ec>
    54d0:	4184b03a 	or	r2,r8,r6
    54d4:	103fe226 	beq	r2,zero,5460 <__alt_mem_Flash_flash_data+0xf4005460>
    54d8:	400b883a 	mov	r5,r8
    54dc:	3023883a 	mov	r17,r6
    54e0:	3825883a 	mov	r18,r7
    54e4:	003ea906 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    54e8:	20bff804 	addi	r2,r4,-32
    54ec:	01c00804 	movi	r7,32
    54f0:	4084d83a 	srl	r2,r8,r2
    54f4:	21c07e26 	beq	r4,r7,56f0 <__adddf3+0x7e0>
    54f8:	01c01004 	movi	r7,64
    54fc:	3909c83a 	sub	r4,r7,r4
    5500:	4110983a 	sll	r8,r8,r4
    5504:	418cb03a 	or	r6,r8,r6
    5508:	300cc03a 	cmpne	r6,r6,zero
    550c:	308cb03a 	or	r6,r6,r2
    5510:	0011883a 	mov	r8,zero
    5514:	003f1b06 	br	5184 <__alt_mem_Flash_flash_data+0xf4005184>
    5518:	0101ffc4 	movi	r4,2047
    551c:	113fa41e 	bne	r2,r4,53b0 <__alt_mem_Flash_flash_data+0xf40053b0>
    5520:	400b883a 	mov	r5,r8
    5524:	3023883a 	mov	r17,r6
    5528:	1021883a 	mov	r16,r2
    552c:	3825883a 	mov	r18,r7
    5530:	003e9606 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5534:	80001a1e 	bne	r16,zero,55a0 <__adddf3+0x690>
    5538:	2c4eb03a 	or	r7,r5,r17
    553c:	38005526 	beq	r7,zero,5694 <__adddf3+0x784>
    5540:	0108303a 	nor	r4,zero,r4
    5544:	2000511e 	bne	r4,zero,568c <__adddf3+0x77c>
    5548:	89a3883a 	add	r17,r17,r6
    554c:	414b883a 	add	r5,r8,r5
    5550:	898d803a 	cmpltu	r6,r17,r6
    5554:	298b883a 	add	r5,r5,r6
    5558:	1021883a 	mov	r16,r2
    555c:	003f0e06 	br	5198 <__alt_mem_Flash_flash_data+0xf4005198>
    5560:	1000341e 	bne	r2,zero,5634 <__adddf3+0x724>
    5564:	4184b03a 	or	r2,r8,r6
    5568:	10006f26 	beq	r2,zero,5728 <__adddf3+0x818>
    556c:	400b883a 	mov	r5,r8
    5570:	3023883a 	mov	r17,r6
    5574:	3825883a 	mov	r18,r7
    5578:	0401ffc4 	movi	r16,2047
    557c:	003e8306 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5580:	2c62b03a 	or	r17,r5,r17
    5584:	8822c03a 	cmpne	r17,r17,zero
    5588:	0007883a 	mov	r3,zero
    558c:	003f9506 	br	53e4 <__alt_mem_Flash_flash_data+0xf40053e4>
    5590:	1021883a 	mov	r16,r2
    5594:	000b883a 	mov	r5,zero
    5598:	0023883a 	mov	r17,zero
    559c:	003edb06 	br	510c <__alt_mem_Flash_flash_data+0xf400510c>
    55a0:	01c1ffc4 	movi	r7,2047
    55a4:	11c03b26 	beq	r2,r7,5694 <__adddf3+0x784>
    55a8:	0109c83a 	sub	r4,zero,r4
    55ac:	29402034 	orhi	r5,r5,128
    55b0:	01c00e04 	movi	r7,56
    55b4:	39006216 	blt	r7,r4,5740 <__adddf3+0x830>
    55b8:	01c007c4 	movi	r7,31
    55bc:	39006b16 	blt	r7,r4,576c <__adddf3+0x85c>
    55c0:	01c00804 	movi	r7,32
    55c4:	390fc83a 	sub	r7,r7,r4
    55c8:	29d4983a 	sll	r10,r5,r7
    55cc:	8912d83a 	srl	r9,r17,r4
    55d0:	89ce983a 	sll	r7,r17,r7
    55d4:	2908d83a 	srl	r4,r5,r4
    55d8:	5262b03a 	or	r17,r10,r9
    55dc:	380ac03a 	cmpne	r5,r7,zero
    55e0:	8962b03a 	or	r17,r17,r5
    55e4:	89a3883a 	add	r17,r17,r6
    55e8:	2211883a 	add	r8,r4,r8
    55ec:	898d803a 	cmpltu	r6,r17,r6
    55f0:	418b883a 	add	r5,r8,r6
    55f4:	1021883a 	mov	r16,r2
    55f8:	003ee706 	br	5198 <__alt_mem_Flash_flash_data+0xf4005198>
    55fc:	4184b03a 	or	r2,r8,r6
    5600:	103e6226 	beq	r2,zero,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5604:	8987c83a 	sub	r3,r17,r6
    5608:	88c9803a 	cmpltu	r4,r17,r3
    560c:	2a05c83a 	sub	r2,r5,r8
    5610:	1105c83a 	sub	r2,r2,r4
    5614:	1100202c 	andhi	r4,r2,128
    5618:	203f0426 	beq	r4,zero,522c <__alt_mem_Flash_flash_data+0xf400522c>
    561c:	3463c83a 	sub	r17,r6,r17
    5620:	414bc83a 	sub	r5,r8,r5
    5624:	344d803a 	cmpltu	r6,r6,r17
    5628:	298bc83a 	sub	r5,r5,r6
    562c:	3825883a 	mov	r18,r7
    5630:	003e5606 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5634:	4184b03a 	or	r2,r8,r6
    5638:	10002b26 	beq	r2,zero,56e8 <__adddf3+0x7d8>
    563c:	2804d0fa 	srli	r2,r5,3
    5640:	8822d0fa 	srli	r17,r17,3
    5644:	280a977a 	slli	r5,r5,29
    5648:	10c0022c 	andhi	r3,r2,8
    564c:	2c62b03a 	or	r17,r5,r17
    5650:	18000826 	beq	r3,zero,5674 <__adddf3+0x764>
    5654:	4008d0fa 	srli	r4,r8,3
    5658:	20c0022c 	andhi	r3,r4,8
    565c:	1800051e 	bne	r3,zero,5674 <__adddf3+0x764>
    5660:	300cd0fa 	srli	r6,r6,3
    5664:	4010977a 	slli	r8,r8,29
    5668:	2005883a 	mov	r2,r4
    566c:	3825883a 	mov	r18,r7
    5670:	41a2b03a 	or	r17,r8,r6
    5674:	880ad77a 	srli	r5,r17,29
    5678:	100490fa 	slli	r2,r2,3
    567c:	882290fa 	slli	r17,r17,3
    5680:	0401ffc4 	movi	r16,2047
    5684:	288ab03a 	or	r5,r5,r2
    5688:	003e4006 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    568c:	01c1ffc4 	movi	r7,2047
    5690:	11ffc71e 	bne	r2,r7,55b0 <__alt_mem_Flash_flash_data+0xf40055b0>
    5694:	400b883a 	mov	r5,r8
    5698:	3023883a 	mov	r17,r6
    569c:	1021883a 	mov	r16,r2
    56a0:	003e3a06 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    56a4:	10002d26 	beq	r2,zero,575c <__adddf3+0x84c>
    56a8:	4184b03a 	or	r2,r8,r6
    56ac:	10000e26 	beq	r2,zero,56e8 <__adddf3+0x7d8>
    56b0:	2804d0fa 	srli	r2,r5,3
    56b4:	8822d0fa 	srli	r17,r17,3
    56b8:	280a977a 	slli	r5,r5,29
    56bc:	10c0022c 	andhi	r3,r2,8
    56c0:	2c62b03a 	or	r17,r5,r17
    56c4:	183feb26 	beq	r3,zero,5674 <__alt_mem_Flash_flash_data+0xf4005674>
    56c8:	4008d0fa 	srli	r4,r8,3
    56cc:	20c0022c 	andhi	r3,r4,8
    56d0:	183fe81e 	bne	r3,zero,5674 <__alt_mem_Flash_flash_data+0xf4005674>
    56d4:	300cd0fa 	srli	r6,r6,3
    56d8:	4010977a 	slli	r8,r8,29
    56dc:	2005883a 	mov	r2,r4
    56e0:	41a2b03a 	or	r17,r8,r6
    56e4:	003fe306 	br	5674 <__alt_mem_Flash_flash_data+0xf4005674>
    56e8:	0401ffc4 	movi	r16,2047
    56ec:	003e2706 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    56f0:	0011883a 	mov	r8,zero
    56f4:	003f8306 	br	5504 <__alt_mem_Flash_flash_data+0xf4005504>
    56f8:	193ff804 	addi	r4,r3,-32
    56fc:	02400804 	movi	r9,32
    5700:	2908d83a 	srl	r4,r5,r4
    5704:	1a402526 	beq	r3,r9,579c <__adddf3+0x88c>
    5708:	02401004 	movi	r9,64
    570c:	48c7c83a 	sub	r3,r9,r3
    5710:	28ca983a 	sll	r5,r5,r3
    5714:	2c62b03a 	or	r17,r5,r17
    5718:	8822c03a 	cmpne	r17,r17,zero
    571c:	8922b03a 	or	r17,r17,r4
    5720:	0007883a 	mov	r3,zero
    5724:	003f2f06 	br	53e4 <__alt_mem_Flash_flash_data+0xf40053e4>
    5728:	01402034 	movhi	r5,128
    572c:	0007883a 	mov	r3,zero
    5730:	297fffc4 	addi	r5,r5,-1
    5734:	047ffe04 	movi	r17,-8
    5738:	0401ffc4 	movi	r16,2047
    573c:	003e7306 	br	510c <__alt_mem_Flash_flash_data+0xf400510c>
    5740:	2c62b03a 	or	r17,r5,r17
    5744:	8822c03a 	cmpne	r17,r17,zero
    5748:	0009883a 	mov	r4,zero
    574c:	003fa506 	br	55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    5750:	400b883a 	mov	r5,r8
    5754:	3023883a 	mov	r17,r6
    5758:	003e0c06 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    575c:	400b883a 	mov	r5,r8
    5760:	3023883a 	mov	r17,r6
    5764:	0401ffc4 	movi	r16,2047
    5768:	003e0806 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    576c:	21fff804 	addi	r7,r4,-32
    5770:	02400804 	movi	r9,32
    5774:	29ced83a 	srl	r7,r5,r7
    5778:	22400a26 	beq	r4,r9,57a4 <__adddf3+0x894>
    577c:	02401004 	movi	r9,64
    5780:	4909c83a 	sub	r4,r9,r4
    5784:	290a983a 	sll	r5,r5,r4
    5788:	2c62b03a 	or	r17,r5,r17
    578c:	8822c03a 	cmpne	r17,r17,zero
    5790:	89e2b03a 	or	r17,r17,r7
    5794:	0009883a 	mov	r4,zero
    5798:	003f9206 	br	55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    579c:	000b883a 	mov	r5,zero
    57a0:	003fdc06 	br	5714 <__alt_mem_Flash_flash_data+0xf4005714>
    57a4:	000b883a 	mov	r5,zero
    57a8:	003ff706 	br	5788 <__alt_mem_Flash_flash_data+0xf4005788>

000057ac <__divdf3>:
    57ac:	defff204 	addi	sp,sp,-56
    57b0:	dd000815 	stw	r20,32(sp)
    57b4:	2828d53a 	srli	r20,r5,20
    57b8:	dd800a15 	stw	r22,40(sp)
    57bc:	282cd7fa 	srli	r22,r5,31
    57c0:	dc000415 	stw	r16,16(sp)
    57c4:	04000434 	movhi	r16,16
    57c8:	df000c15 	stw	fp,48(sp)
    57cc:	dcc00715 	stw	r19,28(sp)
    57d0:	dc800615 	stw	r18,24(sp)
    57d4:	dc400515 	stw	r17,20(sp)
    57d8:	843fffc4 	addi	r16,r16,-1
    57dc:	dfc00d15 	stw	ra,52(sp)
    57e0:	ddc00b15 	stw	r23,44(sp)
    57e4:	dd400915 	stw	r21,36(sp)
    57e8:	a501ffcc 	andi	r20,r20,2047
    57ec:	2025883a 	mov	r18,r4
    57f0:	2027883a 	mov	r19,r4
    57f4:	2c22703a 	and	r17,r5,r16
    57f8:	b7003fcc 	andi	fp,r22,255
    57fc:	a0005e26 	beq	r20,zero,5978 <__divdf3+0x1cc>
    5800:	0081ffc4 	movi	r2,2047
    5804:	a0803526 	beq	r20,r2,58dc <__divdf3+0x130>
    5808:	8c000434 	orhi	r16,r17,16
    580c:	2004d77a 	srli	r2,r4,29
    5810:	802090fa 	slli	r16,r16,3
    5814:	202690fa 	slli	r19,r4,3
    5818:	a53f0044 	addi	r20,r20,-1023
    581c:	80a2b03a 	or	r17,r16,r2
    5820:	0025883a 	mov	r18,zero
    5824:	0011883a 	mov	r8,zero
    5828:	380ad53a 	srli	r5,r7,20
    582c:	382ed7fa 	srli	r23,r7,31
    5830:	04000434 	movhi	r16,16
    5834:	843fffc4 	addi	r16,r16,-1
    5838:	2941ffcc 	andi	r5,r5,2047
    583c:	302b883a 	mov	r21,r6
    5840:	3c20703a 	and	r16,r7,r16
    5844:	ba403fcc 	andi	r9,r23,255
    5848:	28006726 	beq	r5,zero,59e8 <__divdf3+0x23c>
    584c:	0081ffc4 	movi	r2,2047
    5850:	28805f26 	beq	r5,r2,59d0 <__divdf3+0x224>
    5854:	84000434 	orhi	r16,r16,16
    5858:	3004d77a 	srli	r2,r6,29
    585c:	802090fa 	slli	r16,r16,3
    5860:	302a90fa 	slli	r21,r6,3
    5864:	297f0044 	addi	r5,r5,-1023
    5868:	80a0b03a 	or	r16,r16,r2
    586c:	000f883a 	mov	r7,zero
    5870:	3c86b03a 	or	r3,r7,r18
    5874:	180690ba 	slli	r3,r3,2
    5878:	00800034 	movhi	r2,0
    587c:	10962704 	addi	r2,r2,22684
    5880:	1887883a 	add	r3,r3,r2
    5884:	18c00017 	ldw	r3,0(r3)
    5888:	b5c8f03a 	xor	r4,r22,r23
    588c:	200d883a 	mov	r6,r4
    5890:	24803fcc 	andi	r18,r4,255
    5894:	a169c83a 	sub	r20,r20,r5
    5898:	1800683a 	jmp	r3
    589c:	00005ae4 	muli	zero,zero,363
    58a0:	00005914 	movui	zero,356
    58a4:	00005aa8 	cmpgeui	zero,zero,362
    58a8:	000058f8 	rdprs	zero,zero,355
    58ac:	00005aa8 	cmpgeui	zero,zero,362
    58b0:	00005a7c 	xorhi	zero,zero,361
    58b4:	00005aa8 	cmpgeui	zero,zero,362
    58b8:	000058f8 	rdprs	zero,zero,355
    58bc:	00005914 	movui	zero,356
    58c0:	00005914 	movui	zero,356
    58c4:	00005a7c 	xorhi	zero,zero,361
    58c8:	000058f8 	rdprs	zero,zero,355
    58cc:	00005908 	cmpgei	zero,zero,356
    58d0:	00005908 	cmpgei	zero,zero,356
    58d4:	00005908 	cmpgei	zero,zero,356
    58d8:	00005ab8 	rdprs	zero,zero,362
    58dc:	8904b03a 	or	r2,r17,r4
    58e0:	1000631e 	bne	r2,zero,5a70 <__divdf3+0x2c4>
    58e4:	04800204 	movi	r18,8
    58e8:	0023883a 	mov	r17,zero
    58ec:	0027883a 	mov	r19,zero
    58f0:	02000084 	movi	r8,2
    58f4:	003fcc06 	br	5828 <__alt_mem_Flash_flash_data+0xf4005828>
    58f8:	8023883a 	mov	r17,r16
    58fc:	a827883a 	mov	r19,r21
    5900:	4839883a 	mov	fp,r9
    5904:	3811883a 	mov	r8,r7
    5908:	00800084 	movi	r2,2
    590c:	40812a1e 	bne	r8,r2,5db8 <__divdf3+0x60c>
    5910:	e025883a 	mov	r18,fp
    5914:	9180004c 	andi	r6,r18,1
    5918:	0101ffc4 	movi	r4,2047
    591c:	000b883a 	mov	r5,zero
    5920:	0027883a 	mov	r19,zero
    5924:	2008953a 	slli	r4,r4,20
    5928:	30c03fcc 	andi	r3,r6,255
    592c:	04000434 	movhi	r16,16
    5930:	180697fa 	slli	r3,r3,31
    5934:	843fffc4 	addi	r16,r16,-1
    5938:	2c20703a 	and	r16,r5,r16
    593c:	8120b03a 	or	r16,r16,r4
    5940:	80c6b03a 	or	r3,r16,r3
    5944:	9805883a 	mov	r2,r19
    5948:	dfc00d17 	ldw	ra,52(sp)
    594c:	df000c17 	ldw	fp,48(sp)
    5950:	ddc00b17 	ldw	r23,44(sp)
    5954:	dd800a17 	ldw	r22,40(sp)
    5958:	dd400917 	ldw	r21,36(sp)
    595c:	dd000817 	ldw	r20,32(sp)
    5960:	dcc00717 	ldw	r19,28(sp)
    5964:	dc800617 	ldw	r18,24(sp)
    5968:	dc400517 	ldw	r17,20(sp)
    596c:	dc000417 	ldw	r16,16(sp)
    5970:	dec00e04 	addi	sp,sp,56
    5974:	f800283a 	ret
    5978:	8904b03a 	or	r2,r17,r4
    597c:	10003726 	beq	r2,zero,5a5c <__divdf3+0x2b0>
    5980:	88011c26 	beq	r17,zero,5df4 <__divdf3+0x648>
    5984:	8809883a 	mov	r4,r17
    5988:	d9800315 	stw	r6,12(sp)
    598c:	d9c00115 	stw	r7,4(sp)
    5990:	00075180 	call	7518 <__clzsi2>
    5994:	d9800317 	ldw	r6,12(sp)
    5998:	d9c00117 	ldw	r7,4(sp)
    599c:	1007883a 	mov	r3,r2
    59a0:	01000a04 	movi	r4,40
    59a4:	1cfffe04 	addi	r19,r3,-8
    59a8:	20c9c83a 	sub	r4,r4,r3
    59ac:	8cca983a 	sll	r5,r17,r19
    59b0:	9108d83a 	srl	r4,r18,r4
    59b4:	94e6983a 	sll	r19,r18,r19
    59b8:	2162b03a 	or	r17,r4,r5
    59bc:	053f0344 	movi	r20,-1011
    59c0:	a0e9c83a 	sub	r20,r20,r3
    59c4:	0025883a 	mov	r18,zero
    59c8:	0011883a 	mov	r8,zero
    59cc:	003f9606 	br	5828 <__alt_mem_Flash_flash_data+0xf4005828>
    59d0:	8184b03a 	or	r2,r16,r6
    59d4:	10001f1e 	bne	r2,zero,5a54 <__divdf3+0x2a8>
    59d8:	0021883a 	mov	r16,zero
    59dc:	002b883a 	mov	r21,zero
    59e0:	01c00084 	movi	r7,2
    59e4:	003fa206 	br	5870 <__alt_mem_Flash_flash_data+0xf4005870>
    59e8:	8184b03a 	or	r2,r16,r6
    59ec:	10001526 	beq	r2,zero,5a44 <__divdf3+0x298>
    59f0:	80010c26 	beq	r16,zero,5e24 <__divdf3+0x678>
    59f4:	8009883a 	mov	r4,r16
    59f8:	d9800315 	stw	r6,12(sp)
    59fc:	da000215 	stw	r8,8(sp)
    5a00:	da400015 	stw	r9,0(sp)
    5a04:	00075180 	call	7518 <__clzsi2>
    5a08:	d9800317 	ldw	r6,12(sp)
    5a0c:	da000217 	ldw	r8,8(sp)
    5a10:	da400017 	ldw	r9,0(sp)
    5a14:	1007883a 	mov	r3,r2
    5a18:	01000a04 	movi	r4,40
    5a1c:	1d7ffe04 	addi	r21,r3,-8
    5a20:	20c9c83a 	sub	r4,r4,r3
    5a24:	8560983a 	sll	r16,r16,r21
    5a28:	3108d83a 	srl	r4,r6,r4
    5a2c:	356a983a 	sll	r21,r6,r21
    5a30:	2420b03a 	or	r16,r4,r16
    5a34:	017f0344 	movi	r5,-1011
    5a38:	28cbc83a 	sub	r5,r5,r3
    5a3c:	000f883a 	mov	r7,zero
    5a40:	003f8b06 	br	5870 <__alt_mem_Flash_flash_data+0xf4005870>
    5a44:	0021883a 	mov	r16,zero
    5a48:	002b883a 	mov	r21,zero
    5a4c:	01c00044 	movi	r7,1
    5a50:	003f8706 	br	5870 <__alt_mem_Flash_flash_data+0xf4005870>
    5a54:	01c000c4 	movi	r7,3
    5a58:	003f8506 	br	5870 <__alt_mem_Flash_flash_data+0xf4005870>
    5a5c:	04800104 	movi	r18,4
    5a60:	0023883a 	mov	r17,zero
    5a64:	0027883a 	mov	r19,zero
    5a68:	02000044 	movi	r8,1
    5a6c:	003f6e06 	br	5828 <__alt_mem_Flash_flash_data+0xf4005828>
    5a70:	04800304 	movi	r18,12
    5a74:	020000c4 	movi	r8,3
    5a78:	003f6b06 	br	5828 <__alt_mem_Flash_flash_data+0xf4005828>
    5a7c:	01400434 	movhi	r5,16
    5a80:	000d883a 	mov	r6,zero
    5a84:	297fffc4 	addi	r5,r5,-1
    5a88:	04ffffc4 	movi	r19,-1
    5a8c:	0101ffc4 	movi	r4,2047
    5a90:	003fa406 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    5a94:	043f0084 	movi	r16,-1022
    5a98:	8521c83a 	sub	r16,r16,r20
    5a9c:	00800e04 	movi	r2,56
    5aa0:	1401200e 	bge	r2,r16,5f24 <__divdf3+0x778>
    5aa4:	9180004c 	andi	r6,r18,1
    5aa8:	0009883a 	mov	r4,zero
    5aac:	000b883a 	mov	r5,zero
    5ab0:	0027883a 	mov	r19,zero
    5ab4:	003f9b06 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    5ab8:	8880022c 	andhi	r2,r17,8
    5abc:	1000c726 	beq	r2,zero,5ddc <__divdf3+0x630>
    5ac0:	8080022c 	andhi	r2,r16,8
    5ac4:	1000c51e 	bne	r2,zero,5ddc <__divdf3+0x630>
    5ac8:	00800434 	movhi	r2,16
    5acc:	81400234 	orhi	r5,r16,8
    5ad0:	10bfffc4 	addi	r2,r2,-1
    5ad4:	b80d883a 	mov	r6,r23
    5ad8:	288a703a 	and	r5,r5,r2
    5adc:	a827883a 	mov	r19,r21
    5ae0:	003fea06 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    5ae4:	8440ea36 	bltu	r16,r17,5e90 <__divdf3+0x6e4>
    5ae8:	8c00e826 	beq	r17,r16,5e8c <__divdf3+0x6e0>
    5aec:	a53fffc4 	addi	r20,r20,-1
    5af0:	882d883a 	mov	r22,r17
    5af4:	000d883a 	mov	r6,zero
    5af8:	a804d63a 	srli	r2,r21,24
    5afc:	8020923a 	slli	r16,r16,8
    5b00:	b009883a 	mov	r4,r22
    5b04:	d9800315 	stw	r6,12(sp)
    5b08:	1420b03a 	or	r16,r2,r16
    5b0c:	802ed43a 	srli	r23,r16,16
    5b10:	873fffcc 	andi	fp,r16,65535
    5b14:	a82a923a 	slli	r21,r21,8
    5b18:	b80b883a 	mov	r5,r23
    5b1c:	0004dcc0 	call	4dcc <__udivsi3>
    5b20:	b009883a 	mov	r4,r22
    5b24:	b80b883a 	mov	r5,r23
    5b28:	1023883a 	mov	r17,r2
    5b2c:	0004dd40 	call	4dd4 <__umodsi3>
    5b30:	1004943a 	slli	r2,r2,16
    5b34:	9808d43a 	srli	r4,r19,16
    5b38:	8f2d383a 	mul	r22,r17,fp
    5b3c:	d9800317 	ldw	r6,12(sp)
    5b40:	1106b03a 	or	r3,r2,r4
    5b44:	1d80062e 	bgeu	r3,r22,5b60 <__divdf3+0x3b4>
    5b48:	1c07883a 	add	r3,r3,r16
    5b4c:	88bfffc4 	addi	r2,r17,-1
    5b50:	1c00dc36 	bltu	r3,r16,5ec4 <__divdf3+0x718>
    5b54:	1d80db2e 	bgeu	r3,r22,5ec4 <__divdf3+0x718>
    5b58:	8c7fff84 	addi	r17,r17,-2
    5b5c:	1c07883a 	add	r3,r3,r16
    5b60:	1dadc83a 	sub	r22,r3,r22
    5b64:	b009883a 	mov	r4,r22
    5b68:	b80b883a 	mov	r5,r23
    5b6c:	d9800315 	stw	r6,12(sp)
    5b70:	0004dcc0 	call	4dcc <__udivsi3>
    5b74:	b009883a 	mov	r4,r22
    5b78:	b80b883a 	mov	r5,r23
    5b7c:	d8800015 	stw	r2,0(sp)
    5b80:	0004dd40 	call	4dd4 <__umodsi3>
    5b84:	da400017 	ldw	r9,0(sp)
    5b88:	1004943a 	slli	r2,r2,16
    5b8c:	9cffffcc 	andi	r19,r19,65535
    5b90:	4f07383a 	mul	r3,r9,fp
    5b94:	14c8b03a 	or	r4,r2,r19
    5b98:	d9800317 	ldw	r6,12(sp)
    5b9c:	20c0062e 	bgeu	r4,r3,5bb8 <__divdf3+0x40c>
    5ba0:	2409883a 	add	r4,r4,r16
    5ba4:	48bfffc4 	addi	r2,r9,-1
    5ba8:	2400c436 	bltu	r4,r16,5ebc <__divdf3+0x710>
    5bac:	20c0c32e 	bgeu	r4,r3,5ebc <__divdf3+0x710>
    5bb0:	4a7fff84 	addi	r9,r9,-2
    5bb4:	2409883a 	add	r4,r4,r16
    5bb8:	8822943a 	slli	r17,r17,16
    5bbc:	a80ed43a 	srli	r7,r21,16
    5bc0:	aa3fffcc 	andi	r8,r21,65535
    5bc4:	4c62b03a 	or	r17,r9,r17
    5bc8:	8816d43a 	srli	r11,r17,16
    5bcc:	897fffcc 	andi	r5,r17,65535
    5bd0:	2a15383a 	mul	r10,r5,r8
    5bd4:	5a19383a 	mul	r12,r11,r8
    5bd8:	29cb383a 	mul	r5,r5,r7
    5bdc:	5012d43a 	srli	r9,r10,16
    5be0:	20c5c83a 	sub	r2,r4,r3
    5be4:	614b883a 	add	r5,r12,r5
    5be8:	2a4b883a 	add	r5,r5,r9
    5bec:	59c7383a 	mul	r3,r11,r7
    5bf0:	2b00022e 	bgeu	r5,r12,5bfc <__divdf3+0x450>
    5bf4:	01000074 	movhi	r4,1
    5bf8:	1907883a 	add	r3,r3,r4
    5bfc:	2808d43a 	srli	r4,r5,16
    5c00:	280a943a 	slli	r5,r5,16
    5c04:	54ffffcc 	andi	r19,r10,65535
    5c08:	1907883a 	add	r3,r3,r4
    5c0c:	2ccb883a 	add	r5,r5,r19
    5c10:	10c09336 	bltu	r2,r3,5e60 <__divdf3+0x6b4>
    5c14:	10c0ad26 	beq	r2,r3,5ecc <__divdf3+0x720>
    5c18:	10c7c83a 	sub	r3,r2,r3
    5c1c:	3167c83a 	sub	r19,r6,r5
    5c20:	34ed803a 	cmpltu	r22,r6,r19
    5c24:	1dadc83a 	sub	r22,r3,r22
    5c28:	b400b226 	beq	r22,r16,5ef4 <__divdf3+0x748>
    5c2c:	b009883a 	mov	r4,r22
    5c30:	b80b883a 	mov	r5,r23
    5c34:	d9c00115 	stw	r7,4(sp)
    5c38:	da000215 	stw	r8,8(sp)
    5c3c:	0004dcc0 	call	4dcc <__udivsi3>
    5c40:	b009883a 	mov	r4,r22
    5c44:	b80b883a 	mov	r5,r23
    5c48:	d8800315 	stw	r2,12(sp)
    5c4c:	0004dd40 	call	4dd4 <__umodsi3>
    5c50:	d9800317 	ldw	r6,12(sp)
    5c54:	1004943a 	slli	r2,r2,16
    5c58:	9808d43a 	srli	r4,r19,16
    5c5c:	372d383a 	mul	r22,r6,fp
    5c60:	d9c00117 	ldw	r7,4(sp)
    5c64:	1106b03a 	or	r3,r2,r4
    5c68:	da000217 	ldw	r8,8(sp)
    5c6c:	1d80062e 	bgeu	r3,r22,5c88 <__divdf3+0x4dc>
    5c70:	1c07883a 	add	r3,r3,r16
    5c74:	30bfffc4 	addi	r2,r6,-1
    5c78:	1c00a036 	bltu	r3,r16,5efc <__divdf3+0x750>
    5c7c:	1d809f2e 	bgeu	r3,r22,5efc <__divdf3+0x750>
    5c80:	31bfff84 	addi	r6,r6,-2
    5c84:	1c07883a 	add	r3,r3,r16
    5c88:	1dadc83a 	sub	r22,r3,r22
    5c8c:	b009883a 	mov	r4,r22
    5c90:	b80b883a 	mov	r5,r23
    5c94:	d9800315 	stw	r6,12(sp)
    5c98:	d9c00115 	stw	r7,4(sp)
    5c9c:	da000215 	stw	r8,8(sp)
    5ca0:	0004dcc0 	call	4dcc <__udivsi3>
    5ca4:	b009883a 	mov	r4,r22
    5ca8:	b80b883a 	mov	r5,r23
    5cac:	d8800015 	stw	r2,0(sp)
    5cb0:	0004dd40 	call	4dd4 <__umodsi3>
    5cb4:	da400017 	ldw	r9,0(sp)
    5cb8:	1004943a 	slli	r2,r2,16
    5cbc:	993fffcc 	andi	r4,r19,65535
    5cc0:	4f39383a 	mul	fp,r9,fp
    5cc4:	1106b03a 	or	r3,r2,r4
    5cc8:	d9800317 	ldw	r6,12(sp)
    5ccc:	d9c00117 	ldw	r7,4(sp)
    5cd0:	da000217 	ldw	r8,8(sp)
    5cd4:	1f00062e 	bgeu	r3,fp,5cf0 <__divdf3+0x544>
    5cd8:	1c07883a 	add	r3,r3,r16
    5cdc:	48bfffc4 	addi	r2,r9,-1
    5ce0:	1c008836 	bltu	r3,r16,5f04 <__divdf3+0x758>
    5ce4:	1f00872e 	bgeu	r3,fp,5f04 <__divdf3+0x758>
    5ce8:	4a7fff84 	addi	r9,r9,-2
    5cec:	1c07883a 	add	r3,r3,r16
    5cf0:	3008943a 	slli	r4,r6,16
    5cf4:	1f07c83a 	sub	r3,r3,fp
    5cf8:	4926b03a 	or	r19,r9,r4
    5cfc:	993fffcc 	andi	r4,r19,65535
    5d00:	980cd43a 	srli	r6,r19,16
    5d04:	220b383a 	mul	r5,r4,r8
    5d08:	21c5383a 	mul	r2,r4,r7
    5d0c:	3211383a 	mul	r8,r6,r8
    5d10:	2808d43a 	srli	r4,r5,16
    5d14:	31cf383a 	mul	r7,r6,r7
    5d18:	4085883a 	add	r2,r8,r2
    5d1c:	1105883a 	add	r2,r2,r4
    5d20:	1200022e 	bgeu	r2,r8,5d2c <__divdf3+0x580>
    5d24:	01000074 	movhi	r4,1
    5d28:	390f883a 	add	r7,r7,r4
    5d2c:	1008d43a 	srli	r4,r2,16
    5d30:	1004943a 	slli	r2,r2,16
    5d34:	297fffcc 	andi	r5,r5,65535
    5d38:	390f883a 	add	r7,r7,r4
    5d3c:	1145883a 	add	r2,r2,r5
    5d40:	19c06536 	bltu	r3,r7,5ed8 <__divdf3+0x72c>
    5d44:	19c09f26 	beq	r3,r7,5fc4 <__divdf3+0x818>
    5d48:	9cc00054 	ori	r19,r19,1
    5d4c:	a100ffc4 	addi	r4,r20,1023
    5d50:	013f500e 	bge	zero,r4,5a94 <__alt_mem_Flash_flash_data+0xf4005a94>
    5d54:	988001cc 	andi	r2,r19,7
    5d58:	10000726 	beq	r2,zero,5d78 <__divdf3+0x5cc>
    5d5c:	98c003cc 	andi	r3,r19,15
    5d60:	00800104 	movi	r2,4
    5d64:	18800426 	beq	r3,r2,5d78 <__divdf3+0x5cc>
    5d68:	9885883a 	add	r2,r19,r2
    5d6c:	14e1803a 	cmpltu	r16,r2,r19
    5d70:	8c23883a 	add	r17,r17,r16
    5d74:	1027883a 	mov	r19,r2
    5d78:	8880402c 	andhi	r2,r17,256
    5d7c:	10000426 	beq	r2,zero,5d90 <__divdf3+0x5e4>
    5d80:	00bfc034 	movhi	r2,65280
    5d84:	10bfffc4 	addi	r2,r2,-1
    5d88:	a1010004 	addi	r4,r20,1024
    5d8c:	88a2703a 	and	r17,r17,r2
    5d90:	0081ff84 	movi	r2,2046
    5d94:	113edf16 	blt	r2,r4,5914 <__alt_mem_Flash_flash_data+0xf4005914>
    5d98:	9826d0fa 	srli	r19,r19,3
    5d9c:	8804977a 	slli	r2,r17,29
    5da0:	8820927a 	slli	r16,r17,9
    5da4:	2101ffcc 	andi	r4,r4,2047
    5da8:	14e6b03a 	or	r19,r2,r19
    5dac:	800ad33a 	srli	r5,r16,12
    5db0:	9180004c 	andi	r6,r18,1
    5db4:	003edb06 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    5db8:	008000c4 	movi	r2,3
    5dbc:	4080a826 	beq	r8,r2,6060 <__divdf3+0x8b4>
    5dc0:	00800044 	movi	r2,1
    5dc4:	4080551e 	bne	r8,r2,5f1c <__divdf3+0x770>
    5dc8:	e00d883a 	mov	r6,fp
    5dcc:	0009883a 	mov	r4,zero
    5dd0:	000b883a 	mov	r5,zero
    5dd4:	0027883a 	mov	r19,zero
    5dd8:	003ed206 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    5ddc:	00800434 	movhi	r2,16
    5de0:	89400234 	orhi	r5,r17,8
    5de4:	10bfffc4 	addi	r2,r2,-1
    5de8:	b00d883a 	mov	r6,r22
    5dec:	288a703a 	and	r5,r5,r2
    5df0:	003f2606 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    5df4:	d9800315 	stw	r6,12(sp)
    5df8:	d9c00115 	stw	r7,4(sp)
    5dfc:	00075180 	call	7518 <__clzsi2>
    5e00:	10c00804 	addi	r3,r2,32
    5e04:	010009c4 	movi	r4,39
    5e08:	d9800317 	ldw	r6,12(sp)
    5e0c:	d9c00117 	ldw	r7,4(sp)
    5e10:	20fee30e 	bge	r4,r3,59a0 <__alt_mem_Flash_flash_data+0xf40059a0>
    5e14:	117ffe04 	addi	r5,r2,-8
    5e18:	9162983a 	sll	r17,r18,r5
    5e1c:	0027883a 	mov	r19,zero
    5e20:	003ee606 	br	59bc <__alt_mem_Flash_flash_data+0xf40059bc>
    5e24:	3009883a 	mov	r4,r6
    5e28:	d9800315 	stw	r6,12(sp)
    5e2c:	da000215 	stw	r8,8(sp)
    5e30:	da400015 	stw	r9,0(sp)
    5e34:	00075180 	call	7518 <__clzsi2>
    5e38:	10c00804 	addi	r3,r2,32
    5e3c:	010009c4 	movi	r4,39
    5e40:	d9800317 	ldw	r6,12(sp)
    5e44:	da000217 	ldw	r8,8(sp)
    5e48:	da400017 	ldw	r9,0(sp)
    5e4c:	20fef20e 	bge	r4,r3,5a18 <__alt_mem_Flash_flash_data+0xf4005a18>
    5e50:	10bffe04 	addi	r2,r2,-8
    5e54:	a8a0983a 	sll	r16,r21,r2
    5e58:	002b883a 	mov	r21,zero
    5e5c:	003ef506 	br	5a34 <__alt_mem_Flash_flash_data+0xf4005a34>
    5e60:	354d883a 	add	r6,r6,r21
    5e64:	3549803a 	cmpltu	r4,r6,r21
    5e68:	2409883a 	add	r4,r4,r16
    5e6c:	2089883a 	add	r4,r4,r2
    5e70:	88bfffc4 	addi	r2,r17,-1
    5e74:	81000c2e 	bgeu	r16,r4,5ea8 <__divdf3+0x6fc>
    5e78:	20c04436 	bltu	r4,r3,5f8c <__divdf3+0x7e0>
    5e7c:	19006f26 	beq	r3,r4,603c <__divdf3+0x890>
    5e80:	20c7c83a 	sub	r3,r4,r3
    5e84:	1023883a 	mov	r17,r2
    5e88:	003f6406 	br	5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5e8c:	9d7f1736 	bltu	r19,r21,5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5e90:	9806d07a 	srli	r3,r19,1
    5e94:	880497fa 	slli	r2,r17,31
    5e98:	980c97fa 	slli	r6,r19,31
    5e9c:	882cd07a 	srli	r22,r17,1
    5ea0:	18a6b03a 	or	r19,r3,r2
    5ea4:	003f1406 	br	5af8 <__alt_mem_Flash_flash_data+0xf4005af8>
    5ea8:	243ff51e 	bne	r4,r16,5e80 <__alt_mem_Flash_flash_data+0xf4005e80>
    5eac:	357ff22e 	bgeu	r6,r21,5e78 <__alt_mem_Flash_flash_data+0xf4005e78>
    5eb0:	80c7c83a 	sub	r3,r16,r3
    5eb4:	1023883a 	mov	r17,r2
    5eb8:	003f5806 	br	5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5ebc:	1013883a 	mov	r9,r2
    5ec0:	003f3d06 	br	5bb8 <__alt_mem_Flash_flash_data+0xf4005bb8>
    5ec4:	1023883a 	mov	r17,r2
    5ec8:	003f2506 	br	5b60 <__alt_mem_Flash_flash_data+0xf4005b60>
    5ecc:	317fe436 	bltu	r6,r5,5e60 <__alt_mem_Flash_flash_data+0xf4005e60>
    5ed0:	0007883a 	mov	r3,zero
    5ed4:	003f5106 	br	5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5ed8:	1c07883a 	add	r3,r3,r16
    5edc:	993fffc4 	addi	r4,r19,-1
    5ee0:	1c000a2e 	bgeu	r3,r16,5f0c <__divdf3+0x760>
    5ee4:	2027883a 	mov	r19,r4
    5ee8:	19ff971e 	bne	r3,r7,5d48 <__alt_mem_Flash_flash_data+0xf4005d48>
    5eec:	a8bf961e 	bne	r21,r2,5d48 <__alt_mem_Flash_flash_data+0xf4005d48>
    5ef0:	003f9606 	br	5d4c <__alt_mem_Flash_flash_data+0xf4005d4c>
    5ef4:	04ffffc4 	movi	r19,-1
    5ef8:	003f9406 	br	5d4c <__alt_mem_Flash_flash_data+0xf4005d4c>
    5efc:	100d883a 	mov	r6,r2
    5f00:	003f6106 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    5f04:	1013883a 	mov	r9,r2
    5f08:	003f7906 	br	5cf0 <__alt_mem_Flash_flash_data+0xf4005cf0>
    5f0c:	19c02636 	bltu	r3,r7,5fa8 <__divdf3+0x7fc>
    5f10:	38c04d26 	beq	r7,r3,6048 <__divdf3+0x89c>
    5f14:	2027883a 	mov	r19,r4
    5f18:	003f8b06 	br	5d48 <__alt_mem_Flash_flash_data+0xf4005d48>
    5f1c:	e025883a 	mov	r18,fp
    5f20:	003f8a06 	br	5d4c <__alt_mem_Flash_flash_data+0xf4005d4c>
    5f24:	008007c4 	movi	r2,31
    5f28:	14002a16 	blt	r2,r16,5fd4 <__divdf3+0x828>
    5f2c:	a5010784 	addi	r20,r20,1054
    5f30:	8d04983a 	sll	r2,r17,r20
    5f34:	9c06d83a 	srl	r3,r19,r16
    5f38:	9d28983a 	sll	r20,r19,r20
    5f3c:	8c20d83a 	srl	r16,r17,r16
    5f40:	1886b03a 	or	r3,r3,r2
    5f44:	a004c03a 	cmpne	r2,r20,zero
    5f48:	1884b03a 	or	r2,r3,r2
    5f4c:	10c001cc 	andi	r3,r2,7
    5f50:	18000726 	beq	r3,zero,5f70 <__divdf3+0x7c4>
    5f54:	110003cc 	andi	r4,r2,15
    5f58:	00c00104 	movi	r3,4
    5f5c:	20c00426 	beq	r4,r3,5f70 <__divdf3+0x7c4>
    5f60:	10c00104 	addi	r3,r2,4
    5f64:	1885803a 	cmpltu	r2,r3,r2
    5f68:	80a1883a 	add	r16,r16,r2
    5f6c:	1805883a 	mov	r2,r3
    5f70:	80c0202c 	andhi	r3,r16,128
    5f74:	18002d26 	beq	r3,zero,602c <__divdf3+0x880>
    5f78:	9180004c 	andi	r6,r18,1
    5f7c:	01000044 	movi	r4,1
    5f80:	000b883a 	mov	r5,zero
    5f84:	0027883a 	mov	r19,zero
    5f88:	003e6606 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    5f8c:	354d883a 	add	r6,r6,r21
    5f90:	356d803a 	cmpltu	r22,r6,r21
    5f94:	b42d883a 	add	r22,r22,r16
    5f98:	b12d883a 	add	r22,r22,r4
    5f9c:	8c7fff84 	addi	r17,r17,-2
    5fa0:	b0c7c83a 	sub	r3,r22,r3
    5fa4:	003f1d06 	br	5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5fa8:	ad4b883a 	add	r5,r21,r21
    5fac:	2d6b803a 	cmpltu	r21,r5,r21
    5fb0:	ac2b883a 	add	r21,r21,r16
    5fb4:	1d47883a 	add	r3,r3,r21
    5fb8:	993fff84 	addi	r4,r19,-2
    5fbc:	282b883a 	mov	r21,r5
    5fc0:	003fc806 	br	5ee4 <__alt_mem_Flash_flash_data+0xf4005ee4>
    5fc4:	103fc41e 	bne	r2,zero,5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    5fc8:	002b883a 	mov	r21,zero
    5fcc:	a8bf5e1e 	bne	r21,r2,5d48 <__alt_mem_Flash_flash_data+0xf4005d48>
    5fd0:	003f5e06 	br	5d4c <__alt_mem_Flash_flash_data+0xf4005d4c>
    5fd4:	00bef884 	movi	r2,-1054
    5fd8:	1505c83a 	sub	r2,r2,r20
    5fdc:	00c00804 	movi	r3,32
    5fe0:	8884d83a 	srl	r2,r17,r2
    5fe4:	80c01c26 	beq	r16,r3,6058 <__divdf3+0x8ac>
    5fe8:	a0c10f84 	addi	r3,r20,1086
    5fec:	88c6983a 	sll	r3,r17,r3
    5ff0:	1cc6b03a 	or	r3,r3,r19
    5ff4:	1806c03a 	cmpne	r3,r3,zero
    5ff8:	1884b03a 	or	r2,r3,r2
    5ffc:	140001cc 	andi	r16,r2,7
    6000:	8000061e 	bne	r16,zero,601c <__divdf3+0x870>
    6004:	000b883a 	mov	r5,zero
    6008:	1004d0fa 	srli	r2,r2,3
    600c:	9180004c 	andi	r6,r18,1
    6010:	0009883a 	mov	r4,zero
    6014:	1426b03a 	or	r19,r2,r16
    6018:	003e4206 	br	5924 <__alt_mem_Flash_flash_data+0xf4005924>
    601c:	110003cc 	andi	r4,r2,15
    6020:	00c00104 	movi	r3,4
    6024:	0021883a 	mov	r16,zero
    6028:	20ffcd1e 	bne	r4,r3,5f60 <__alt_mem_Flash_flash_data+0xf4005f60>
    602c:	800a927a 	slli	r5,r16,9
    6030:	8020977a 	slli	r16,r16,29
    6034:	280ad33a 	srli	r5,r5,12
    6038:	003ff306 	br	6008 <__alt_mem_Flash_flash_data+0xf4006008>
    603c:	317fd336 	bltu	r6,r5,5f8c <__alt_mem_Flash_flash_data+0xf4005f8c>
    6040:	1023883a 	mov	r17,r2
    6044:	003fa206 	br	5ed0 <__alt_mem_Flash_flash_data+0xf4005ed0>
    6048:	a8bfd736 	bltu	r21,r2,5fa8 <__alt_mem_Flash_flash_data+0xf4005fa8>
    604c:	2027883a 	mov	r19,r4
    6050:	a8bf3d1e 	bne	r21,r2,5d48 <__alt_mem_Flash_flash_data+0xf4005d48>
    6054:	003f3d06 	br	5d4c <__alt_mem_Flash_flash_data+0xf4005d4c>
    6058:	0007883a 	mov	r3,zero
    605c:	003fe406 	br	5ff0 <__alt_mem_Flash_flash_data+0xf4005ff0>
    6060:	00800434 	movhi	r2,16
    6064:	89400234 	orhi	r5,r17,8
    6068:	10bfffc4 	addi	r2,r2,-1
    606c:	e00d883a 	mov	r6,fp
    6070:	288a703a 	and	r5,r5,r2
    6074:	003e8506 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>

00006078 <__eqdf2>:
    6078:	2804d53a 	srli	r2,r5,20
    607c:	3806d53a 	srli	r3,r7,20
    6080:	02000434 	movhi	r8,16
    6084:	423fffc4 	addi	r8,r8,-1
    6088:	1081ffcc 	andi	r2,r2,2047
    608c:	0241ffc4 	movi	r9,2047
    6090:	2a14703a 	and	r10,r5,r8
    6094:	18c1ffcc 	andi	r3,r3,2047
    6098:	3a10703a 	and	r8,r7,r8
    609c:	280ad7fa 	srli	r5,r5,31
    60a0:	380ed7fa 	srli	r7,r7,31
    60a4:	12400f26 	beq	r2,r9,60e4 <__eqdf2+0x6c>
    60a8:	0241ffc4 	movi	r9,2047
    60ac:	1a400326 	beq	r3,r9,60bc <__eqdf2+0x44>
    60b0:	10c00526 	beq	r2,r3,60c8 <__eqdf2+0x50>
    60b4:	00800044 	movi	r2,1
    60b8:	f800283a 	ret
    60bc:	4192b03a 	or	r9,r8,r6
    60c0:	483ffc1e 	bne	r9,zero,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    60c4:	10fffb1e 	bne	r2,r3,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    60c8:	523ffa1e 	bne	r10,r8,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    60cc:	21bff91e 	bne	r4,r6,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    60d0:	29c00826 	beq	r5,r7,60f4 <__eqdf2+0x7c>
    60d4:	103ff71e 	bne	r2,zero,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    60d8:	5104b03a 	or	r2,r10,r4
    60dc:	1004c03a 	cmpne	r2,r2,zero
    60e0:	f800283a 	ret
    60e4:	5112b03a 	or	r9,r10,r4
    60e8:	483fef26 	beq	r9,zero,60a8 <__alt_mem_Flash_flash_data+0xf40060a8>
    60ec:	00800044 	movi	r2,1
    60f0:	f800283a 	ret
    60f4:	0005883a 	mov	r2,zero
    60f8:	f800283a 	ret

000060fc <__gedf2>:
    60fc:	2804d53a 	srli	r2,r5,20
    6100:	3806d53a 	srli	r3,r7,20
    6104:	02000434 	movhi	r8,16
    6108:	423fffc4 	addi	r8,r8,-1
    610c:	0241ffc4 	movi	r9,2047
    6110:	1081ffcc 	andi	r2,r2,2047
    6114:	2a14703a 	and	r10,r5,r8
    6118:	1a46703a 	and	r3,r3,r9
    611c:	3a10703a 	and	r8,r7,r8
    6120:	280ad7fa 	srli	r5,r5,31
    6124:	380ed7fa 	srli	r7,r7,31
    6128:	12400b26 	beq	r2,r9,6158 <__gedf2+0x5c>
    612c:	1a401626 	beq	r3,r9,6188 <__gedf2+0x8c>
    6130:	10000c1e 	bne	r2,zero,6164 <__gedf2+0x68>
    6134:	5112b03a 	or	r9,r10,r4
    6138:	4813003a 	cmpeq	r9,r9,zero
    613c:	4817883a 	mov	r11,r9
    6140:	18000c1e 	bne	r3,zero,6174 <__gedf2+0x78>
    6144:	4198b03a 	or	r12,r8,r6
    6148:	60000a1e 	bne	r12,zero,6174 <__gedf2+0x78>
    614c:	48001326 	beq	r9,zero,619c <__gedf2+0xa0>
    6150:	0005883a 	mov	r2,zero
    6154:	f800283a 	ret
    6158:	5112b03a 	or	r9,r10,r4
    615c:	4800191e 	bne	r9,zero,61c4 <__gedf2+0xc8>
    6160:	18800926 	beq	r3,r2,6188 <__gedf2+0x8c>
    6164:	18000b1e 	bne	r3,zero,6194 <__gedf2+0x98>
    6168:	4192b03a 	or	r9,r8,r6
    616c:	0017883a 	mov	r11,zero
    6170:	48000a26 	beq	r9,zero,619c <__gedf2+0xa0>
    6174:	39c03fcc 	andi	r7,r7,255
    6178:	58000726 	beq	r11,zero,6198 <__gedf2+0x9c>
    617c:	3800081e 	bne	r7,zero,61a0 <__gedf2+0xa4>
    6180:	00bfffc4 	movi	r2,-1
    6184:	f800283a 	ret
    6188:	4192b03a 	or	r9,r8,r6
    618c:	48000d1e 	bne	r9,zero,61c4 <__gedf2+0xc8>
    6190:	103fe826 	beq	r2,zero,6134 <__alt_mem_Flash_flash_data+0xf4006134>
    6194:	39c03fcc 	andi	r7,r7,255
    6198:	29c00326 	beq	r5,r7,61a8 <__gedf2+0xac>
    619c:	283ff81e 	bne	r5,zero,6180 <__alt_mem_Flash_flash_data+0xf4006180>
    61a0:	00800044 	movi	r2,1
    61a4:	f800283a 	ret
    61a8:	18bffc16 	blt	r3,r2,619c <__alt_mem_Flash_flash_data+0xf400619c>
    61ac:	10c00316 	blt	r2,r3,61bc <__gedf2+0xc0>
    61b0:	42bffa36 	bltu	r8,r10,619c <__alt_mem_Flash_flash_data+0xf400619c>
    61b4:	52000526 	beq	r10,r8,61cc <__gedf2+0xd0>
    61b8:	523fe52e 	bgeu	r10,r8,6150 <__alt_mem_Flash_flash_data+0xf4006150>
    61bc:	283ff026 	beq	r5,zero,6180 <__alt_mem_Flash_flash_data+0xf4006180>
    61c0:	003ff706 	br	61a0 <__alt_mem_Flash_flash_data+0xf40061a0>
    61c4:	00bfff84 	movi	r2,-2
    61c8:	f800283a 	ret
    61cc:	313ff336 	bltu	r6,r4,619c <__alt_mem_Flash_flash_data+0xf400619c>
    61d0:	21bfdf2e 	bgeu	r4,r6,6150 <__alt_mem_Flash_flash_data+0xf4006150>
    61d4:	283fea26 	beq	r5,zero,6180 <__alt_mem_Flash_flash_data+0xf4006180>
    61d8:	003ff106 	br	61a0 <__alt_mem_Flash_flash_data+0xf40061a0>

000061dc <__ledf2>:
    61dc:	2804d53a 	srli	r2,r5,20
    61e0:	3810d53a 	srli	r8,r7,20
    61e4:	00c00434 	movhi	r3,16
    61e8:	18ffffc4 	addi	r3,r3,-1
    61ec:	0241ffc4 	movi	r9,2047
    61f0:	1081ffcc 	andi	r2,r2,2047
    61f4:	28d4703a 	and	r10,r5,r3
    61f8:	4250703a 	and	r8,r8,r9
    61fc:	38c6703a 	and	r3,r7,r3
    6200:	280ad7fa 	srli	r5,r5,31
    6204:	380ed7fa 	srli	r7,r7,31
    6208:	12400b26 	beq	r2,r9,6238 <__ledf2+0x5c>
    620c:	42401926 	beq	r8,r9,6274 <__ledf2+0x98>
    6210:	10000c1e 	bne	r2,zero,6244 <__ledf2+0x68>
    6214:	5112b03a 	or	r9,r10,r4
    6218:	4813003a 	cmpeq	r9,r9,zero
    621c:	4817883a 	mov	r11,r9
    6220:	40000f26 	beq	r8,zero,6260 <__ledf2+0x84>
    6224:	39c03fcc 	andi	r7,r7,255
    6228:	58001826 	beq	r11,zero,628c <__ledf2+0xb0>
    622c:	38000a1e 	bne	r7,zero,6258 <__ledf2+0x7c>
    6230:	00bfffc4 	movi	r2,-1
    6234:	f800283a 	ret
    6238:	5112b03a 	or	r9,r10,r4
    623c:	48000f1e 	bne	r9,zero,627c <__ledf2+0xa0>
    6240:	40800c26 	beq	r8,r2,6274 <__ledf2+0x98>
    6244:	4000101e 	bne	r8,zero,6288 <__ledf2+0xac>
    6248:	1992b03a 	or	r9,r3,r6
    624c:	0017883a 	mov	r11,zero
    6250:	483ff41e 	bne	r9,zero,6224 <__alt_mem_Flash_flash_data+0xf4006224>
    6254:	283ff61e 	bne	r5,zero,6230 <__alt_mem_Flash_flash_data+0xf4006230>
    6258:	00800044 	movi	r2,1
    625c:	f800283a 	ret
    6260:	1998b03a 	or	r12,r3,r6
    6264:	603fef1e 	bne	r12,zero,6224 <__alt_mem_Flash_flash_data+0xf4006224>
    6268:	483ffa26 	beq	r9,zero,6254 <__alt_mem_Flash_flash_data+0xf4006254>
    626c:	0005883a 	mov	r2,zero
    6270:	f800283a 	ret
    6274:	1992b03a 	or	r9,r3,r6
    6278:	48000226 	beq	r9,zero,6284 <__ledf2+0xa8>
    627c:	00800084 	movi	r2,2
    6280:	f800283a 	ret
    6284:	103fe326 	beq	r2,zero,6214 <__alt_mem_Flash_flash_data+0xf4006214>
    6288:	39c03fcc 	andi	r7,r7,255
    628c:	29fff11e 	bne	r5,r7,6254 <__alt_mem_Flash_flash_data+0xf4006254>
    6290:	40bff016 	blt	r8,r2,6254 <__alt_mem_Flash_flash_data+0xf4006254>
    6294:	12000316 	blt	r2,r8,62a4 <__ledf2+0xc8>
    6298:	1abfee36 	bltu	r3,r10,6254 <__alt_mem_Flash_flash_data+0xf4006254>
    629c:	50c00326 	beq	r10,r3,62ac <__ledf2+0xd0>
    62a0:	50fff22e 	bgeu	r10,r3,626c <__alt_mem_Flash_flash_data+0xf400626c>
    62a4:	283fe226 	beq	r5,zero,6230 <__alt_mem_Flash_flash_data+0xf4006230>
    62a8:	003feb06 	br	6258 <__alt_mem_Flash_flash_data+0xf4006258>
    62ac:	313fe936 	bltu	r6,r4,6254 <__alt_mem_Flash_flash_data+0xf4006254>
    62b0:	21bfee2e 	bgeu	r4,r6,626c <__alt_mem_Flash_flash_data+0xf400626c>
    62b4:	283fde26 	beq	r5,zero,6230 <__alt_mem_Flash_flash_data+0xf4006230>
    62b8:	003fe706 	br	6258 <__alt_mem_Flash_flash_data+0xf4006258>

000062bc <__muldf3>:
    62bc:	defff204 	addi	sp,sp,-56
    62c0:	2804d53a 	srli	r2,r5,20
    62c4:	dd800a15 	stw	r22,40(sp)
    62c8:	282cd7fa 	srli	r22,r5,31
    62cc:	dc000415 	stw	r16,16(sp)
    62d0:	04000434 	movhi	r16,16
    62d4:	df000c15 	stw	fp,48(sp)
    62d8:	dd000815 	stw	r20,32(sp)
    62dc:	dcc00715 	stw	r19,28(sp)
    62e0:	dc800615 	stw	r18,24(sp)
    62e4:	dc400515 	stw	r17,20(sp)
    62e8:	843fffc4 	addi	r16,r16,-1
    62ec:	dfc00d15 	stw	ra,52(sp)
    62f0:	ddc00b15 	stw	r23,44(sp)
    62f4:	dd400915 	stw	r21,36(sp)
    62f8:	1501ffcc 	andi	r20,r2,2047
    62fc:	2023883a 	mov	r17,r4
    6300:	2025883a 	mov	r18,r4
    6304:	2c20703a 	and	r16,r5,r16
    6308:	b027883a 	mov	r19,r22
    630c:	b7003fcc 	andi	fp,r22,255
    6310:	a0005926 	beq	r20,zero,6478 <__muldf3+0x1bc>
    6314:	0081ffc4 	movi	r2,2047
    6318:	a0803426 	beq	r20,r2,63ec <__muldf3+0x130>
    631c:	84000434 	orhi	r16,r16,16
    6320:	2004d77a 	srli	r2,r4,29
    6324:	802090fa 	slli	r16,r16,3
    6328:	202490fa 	slli	r18,r4,3
    632c:	a53f0044 	addi	r20,r20,-1023
    6330:	80a0b03a 	or	r16,r16,r2
    6334:	002b883a 	mov	r21,zero
    6338:	0015883a 	mov	r10,zero
    633c:	3812d53a 	srli	r9,r7,20
    6340:	3806d7fa 	srli	r3,r7,31
    6344:	02000434 	movhi	r8,16
    6348:	423fffc4 	addi	r8,r8,-1
    634c:	4941ffcc 	andi	r5,r9,2047
    6350:	302f883a 	mov	r23,r6
    6354:	3a22703a 	and	r17,r7,r8
    6358:	1ac03fcc 	andi	r11,r3,255
    635c:	28006226 	beq	r5,zero,64e8 <__muldf3+0x22c>
    6360:	0081ffc4 	movi	r2,2047
    6364:	28805a26 	beq	r5,r2,64d0 <__muldf3+0x214>
    6368:	8a000434 	orhi	r8,r17,16
    636c:	3004d77a 	srli	r2,r6,29
    6370:	401090fa 	slli	r8,r8,3
    6374:	302e90fa 	slli	r23,r6,3
    6378:	297f0044 	addi	r5,r5,-1023
    637c:	40a2b03a 	or	r17,r8,r2
    6380:	0013883a 	mov	r9,zero
    6384:	4d4cb03a 	or	r6,r9,r21
    6388:	300c90ba 	slli	r6,r6,2
    638c:	02000034 	movhi	r8,0
    6390:	4218eb04 	addi	r8,r8,25516
    6394:	320d883a 	add	r6,r6,r8
    6398:	31800017 	ldw	r6,0(r6)
    639c:	a14b883a 	add	r5,r20,r5
    63a0:	1dacf03a 	xor	r22,r3,r22
    63a4:	2b000044 	addi	r12,r5,1
    63a8:	3000683a 	jmp	r6
    63ac:	000065e8 	cmpgeui	zero,zero,407
    63b0:	000065d4 	movui	zero,407
    63b4:	000065d4 	movui	zero,407
    63b8:	000065c0 	call	65c <drawLine+0x308>
    63bc:	00006408 	cmpgei	zero,zero,400
    63c0:	00006408 	cmpgei	zero,zero,400
    63c4:	000065a8 	cmpgeui	zero,zero,406
    63c8:	000065c0 	call	65c <drawLine+0x308>
    63cc:	00006408 	cmpgei	zero,zero,400
    63d0:	000065a8 	cmpgeui	zero,zero,406
    63d4:	00006408 	cmpgei	zero,zero,400
    63d8:	000065c0 	call	65c <drawLine+0x308>
    63dc:	0000640c 	andi	zero,zero,400
    63e0:	0000640c 	andi	zero,zero,400
    63e4:	0000640c 	andi	zero,zero,400
    63e8:	000067e4 	muli	zero,zero,415
    63ec:	8104b03a 	or	r2,r16,r4
    63f0:	10006a1e 	bne	r2,zero,659c <__muldf3+0x2e0>
    63f4:	05400204 	movi	r21,8
    63f8:	0021883a 	mov	r16,zero
    63fc:	0025883a 	mov	r18,zero
    6400:	02800084 	movi	r10,2
    6404:	003fcd06 	br	633c <__alt_mem_Flash_flash_data+0xf400633c>
    6408:	b039883a 	mov	fp,r22
    640c:	00800084 	movi	r2,2
    6410:	50804e1e 	bne	r10,r2,654c <__muldf3+0x290>
    6414:	e4c0004c 	andi	r19,fp,1
    6418:	0101ffc4 	movi	r4,2047
    641c:	0021883a 	mov	r16,zero
    6420:	0025883a 	mov	r18,zero
    6424:	2008953a 	slli	r4,r4,20
    6428:	98c03fcc 	andi	r3,r19,255
    642c:	01400434 	movhi	r5,16
    6430:	297fffc4 	addi	r5,r5,-1
    6434:	180697fa 	slli	r3,r3,31
    6438:	8160703a 	and	r16,r16,r5
    643c:	8120b03a 	or	r16,r16,r4
    6440:	80c6b03a 	or	r3,r16,r3
    6444:	9005883a 	mov	r2,r18
    6448:	dfc00d17 	ldw	ra,52(sp)
    644c:	df000c17 	ldw	fp,48(sp)
    6450:	ddc00b17 	ldw	r23,44(sp)
    6454:	dd800a17 	ldw	r22,40(sp)
    6458:	dd400917 	ldw	r21,36(sp)
    645c:	dd000817 	ldw	r20,32(sp)
    6460:	dcc00717 	ldw	r19,28(sp)
    6464:	dc800617 	ldw	r18,24(sp)
    6468:	dc400517 	ldw	r17,20(sp)
    646c:	dc000417 	ldw	r16,16(sp)
    6470:	dec00e04 	addi	sp,sp,56
    6474:	f800283a 	ret
    6478:	8104b03a 	or	r2,r16,r4
    647c:	10004226 	beq	r2,zero,6588 <__muldf3+0x2cc>
    6480:	8000f926 	beq	r16,zero,6868 <__muldf3+0x5ac>
    6484:	8009883a 	mov	r4,r16
    6488:	d9800315 	stw	r6,12(sp)
    648c:	d9c00015 	stw	r7,0(sp)
    6490:	00075180 	call	7518 <__clzsi2>
    6494:	d9800317 	ldw	r6,12(sp)
    6498:	d9c00017 	ldw	r7,0(sp)
    649c:	1007883a 	mov	r3,r2
    64a0:	01000a04 	movi	r4,40
    64a4:	18bffe04 	addi	r2,r3,-8
    64a8:	20c9c83a 	sub	r4,r4,r3
    64ac:	80a0983a 	sll	r16,r16,r2
    64b0:	8908d83a 	srl	r4,r17,r4
    64b4:	88a4983a 	sll	r18,r17,r2
    64b8:	2420b03a 	or	r16,r4,r16
    64bc:	017f0344 	movi	r5,-1011
    64c0:	28e9c83a 	sub	r20,r5,r3
    64c4:	002b883a 	mov	r21,zero
    64c8:	0015883a 	mov	r10,zero
    64cc:	003f9b06 	br	633c <__alt_mem_Flash_flash_data+0xf400633c>
    64d0:	8984b03a 	or	r2,r17,r6
    64d4:	10002a1e 	bne	r2,zero,6580 <__muldf3+0x2c4>
    64d8:	0023883a 	mov	r17,zero
    64dc:	002f883a 	mov	r23,zero
    64e0:	02400084 	movi	r9,2
    64e4:	003fa706 	br	6384 <__alt_mem_Flash_flash_data+0xf4006384>
    64e8:	8984b03a 	or	r2,r17,r6
    64ec:	10002026 	beq	r2,zero,6570 <__muldf3+0x2b4>
    64f0:	8800cc26 	beq	r17,zero,6824 <__muldf3+0x568>
    64f4:	8809883a 	mov	r4,r17
    64f8:	d8c00215 	stw	r3,8(sp)
    64fc:	d9800315 	stw	r6,12(sp)
    6500:	da800015 	stw	r10,0(sp)
    6504:	dac00115 	stw	r11,4(sp)
    6508:	00075180 	call	7518 <__clzsi2>
    650c:	d8c00217 	ldw	r3,8(sp)
    6510:	d9800317 	ldw	r6,12(sp)
    6514:	da800017 	ldw	r10,0(sp)
    6518:	dac00117 	ldw	r11,4(sp)
    651c:	1009883a 	mov	r4,r2
    6520:	01400a04 	movi	r5,40
    6524:	25fffe04 	addi	r23,r4,-8
    6528:	290bc83a 	sub	r5,r5,r4
    652c:	8dd0983a 	sll	r8,r17,r23
    6530:	314ad83a 	srl	r5,r6,r5
    6534:	35ee983a 	sll	r23,r6,r23
    6538:	2a22b03a 	or	r17,r5,r8
    653c:	017f0344 	movi	r5,-1011
    6540:	290bc83a 	sub	r5,r5,r4
    6544:	0013883a 	mov	r9,zero
    6548:	003f8e06 	br	6384 <__alt_mem_Flash_flash_data+0xf4006384>
    654c:	008000c4 	movi	r2,3
    6550:	50811d26 	beq	r10,r2,69c8 <__muldf3+0x70c>
    6554:	00800044 	movi	r2,1
    6558:	5080e01e 	bne	r10,r2,68dc <__muldf3+0x620>
    655c:	e0a6703a 	and	r19,fp,r2
    6560:	0009883a 	mov	r4,zero
    6564:	0021883a 	mov	r16,zero
    6568:	0025883a 	mov	r18,zero
    656c:	003fad06 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    6570:	0023883a 	mov	r17,zero
    6574:	002f883a 	mov	r23,zero
    6578:	02400044 	movi	r9,1
    657c:	003f8106 	br	6384 <__alt_mem_Flash_flash_data+0xf4006384>
    6580:	024000c4 	movi	r9,3
    6584:	003f7f06 	br	6384 <__alt_mem_Flash_flash_data+0xf4006384>
    6588:	05400104 	movi	r21,4
    658c:	0021883a 	mov	r16,zero
    6590:	0025883a 	mov	r18,zero
    6594:	02800044 	movi	r10,1
    6598:	003f6806 	br	633c <__alt_mem_Flash_flash_data+0xf400633c>
    659c:	05400304 	movi	r21,12
    65a0:	028000c4 	movi	r10,3
    65a4:	003f6506 	br	633c <__alt_mem_Flash_flash_data+0xf400633c>
    65a8:	04000434 	movhi	r16,16
    65ac:	0027883a 	mov	r19,zero
    65b0:	843fffc4 	addi	r16,r16,-1
    65b4:	04bfffc4 	movi	r18,-1
    65b8:	0101ffc4 	movi	r4,2047
    65bc:	003f9906 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    65c0:	8821883a 	mov	r16,r17
    65c4:	b825883a 	mov	r18,r23
    65c8:	5839883a 	mov	fp,r11
    65cc:	4815883a 	mov	r10,r9
    65d0:	003f8e06 	br	640c <__alt_mem_Flash_flash_data+0xf400640c>
    65d4:	8821883a 	mov	r16,r17
    65d8:	b825883a 	mov	r18,r23
    65dc:	b039883a 	mov	fp,r22
    65e0:	4815883a 	mov	r10,r9
    65e4:	003f8906 	br	640c <__alt_mem_Flash_flash_data+0xf400640c>
    65e8:	b80cd43a 	srli	r6,r23,16
    65ec:	9006d43a 	srli	r3,r18,16
    65f0:	90bfffcc 	andi	r2,r18,65535
    65f4:	bdffffcc 	andi	r23,r23,65535
    65f8:	b891383a 	mul	r8,r23,r2
    65fc:	b8c9383a 	mul	r4,r23,r3
    6600:	309b383a 	mul	r13,r6,r2
    6604:	400ed43a 	srli	r7,r8,16
    6608:	30df383a 	mul	r15,r6,r3
    660c:	235b883a 	add	r13,r4,r13
    6610:	69db883a 	add	r13,r13,r7
    6614:	6900022e 	bgeu	r13,r4,6620 <__muldf3+0x364>
    6618:	01000074 	movhi	r4,1
    661c:	791f883a 	add	r15,r15,r4
    6620:	8828d43a 	srli	r20,r17,16
    6624:	8c7fffcc 	andi	r17,r17,65535
    6628:	888f383a 	mul	r7,r17,r2
    662c:	88d3383a 	mul	r9,r17,r3
    6630:	a0a5383a 	mul	r18,r20,r2
    6634:	3816d43a 	srli	r11,r7,16
    6638:	6814943a 	slli	r10,r13,16
    663c:	4ca5883a 	add	r18,r9,r18
    6640:	423fffcc 	andi	r8,r8,65535
    6644:	92e5883a 	add	r18,r18,r11
    6648:	6808d43a 	srli	r4,r13,16
    664c:	5215883a 	add	r10,r10,r8
    6650:	a0c7383a 	mul	r3,r20,r3
    6654:	9240022e 	bgeu	r18,r9,6660 <__muldf3+0x3a4>
    6658:	00800074 	movhi	r2,1
    665c:	1887883a 	add	r3,r3,r2
    6660:	802ad43a 	srli	r21,r16,16
    6664:	80bfffcc 	andi	r2,r16,65535
    6668:	b893383a 	mul	r9,r23,r2
    666c:	3091383a 	mul	r8,r6,r2
    6670:	bd6f383a 	mul	r23,r23,r21
    6674:	9026943a 	slli	r19,r18,16
    6678:	481ad43a 	srli	r13,r9,16
    667c:	9024d43a 	srli	r18,r18,16
    6680:	39ffffcc 	andi	r7,r7,65535
    6684:	ba11883a 	add	r8,r23,r8
    6688:	99e7883a 	add	r19,r19,r7
    668c:	4351883a 	add	r8,r8,r13
    6690:	1c97883a 	add	r11,r3,r18
    6694:	354d383a 	mul	r6,r6,r21
    6698:	9925883a 	add	r18,r19,r4
    669c:	45c0022e 	bgeu	r8,r23,66a8 <__muldf3+0x3ec>
    66a0:	00c00074 	movhi	r3,1
    66a4:	30cd883a 	add	r6,r6,r3
    66a8:	8889383a 	mul	r4,r17,r2
    66ac:	8d63383a 	mul	r17,r17,r21
    66b0:	a085383a 	mul	r2,r20,r2
    66b4:	200ed43a 	srli	r7,r4,16
    66b8:	401cd43a 	srli	r14,r8,16
    66bc:	401a943a 	slli	r13,r8,16
    66c0:	8885883a 	add	r2,r17,r2
    66c4:	4a3fffcc 	andi	r8,r9,65535
    66c8:	11c5883a 	add	r2,r2,r7
    66cc:	339d883a 	add	r14,r6,r14
    66d0:	6a11883a 	add	r8,r13,r8
    66d4:	a561383a 	mul	r16,r20,r21
    66d8:	1440022e 	bgeu	r2,r17,66e4 <__muldf3+0x428>
    66dc:	00c00074 	movhi	r3,1
    66e0:	80e1883a 	add	r16,r16,r3
    66e4:	1006943a 	slli	r3,r2,16
    66e8:	213fffcc 	andi	r4,r4,65535
    66ec:	93db883a 	add	r13,r18,r15
    66f0:	1909883a 	add	r4,r3,r4
    66f4:	22c7883a 	add	r3,r4,r11
    66f8:	6cd3803a 	cmpltu	r9,r13,r19
    66fc:	6a09883a 	add	r4,r13,r8
    6700:	1a5b883a 	add	r13,r3,r9
    6704:	2211803a 	cmpltu	r8,r4,r8
    6708:	734d883a 	add	r6,r14,r13
    670c:	100ed43a 	srli	r7,r2,16
    6710:	6a53803a 	cmpltu	r9,r13,r9
    6714:	3205883a 	add	r2,r6,r8
    6718:	1ac7803a 	cmpltu	r3,r3,r11
    671c:	1211803a 	cmpltu	r8,r2,r8
    6720:	48c6b03a 	or	r3,r9,r3
    6724:	338d803a 	cmpltu	r6,r6,r14
    6728:	19c7883a 	add	r3,r3,r7
    672c:	418cb03a 	or	r6,r8,r6
    6730:	1987883a 	add	r3,r3,r6
    6734:	2024927a 	slli	r18,r4,9
    6738:	1c07883a 	add	r3,r3,r16
    673c:	1806927a 	slli	r3,r3,9
    6740:	1020d5fa 	srli	r16,r2,23
    6744:	2008d5fa 	srli	r4,r4,23
    6748:	9294b03a 	or	r10,r18,r10
    674c:	1004927a 	slli	r2,r2,9
    6750:	5024c03a 	cmpne	r18,r10,zero
    6754:	1c20b03a 	or	r16,r3,r16
    6758:	9108b03a 	or	r4,r18,r4
    675c:	80c0402c 	andhi	r3,r16,256
    6760:	20a4b03a 	or	r18,r4,r2
    6764:	18000726 	beq	r3,zero,6784 <__muldf3+0x4c8>
    6768:	9006d07a 	srli	r3,r18,1
    676c:	800897fa 	slli	r4,r16,31
    6770:	9080004c 	andi	r2,r18,1
    6774:	8020d07a 	srli	r16,r16,1
    6778:	10c4b03a 	or	r2,r2,r3
    677c:	1124b03a 	or	r18,r2,r4
    6780:	600b883a 	mov	r5,r12
    6784:	2900ffc4 	addi	r4,r5,1023
    6788:	01004b0e 	bge	zero,r4,68b8 <__muldf3+0x5fc>
    678c:	908001cc 	andi	r2,r18,7
    6790:	10000726 	beq	r2,zero,67b0 <__muldf3+0x4f4>
    6794:	90c003cc 	andi	r3,r18,15
    6798:	00800104 	movi	r2,4
    679c:	18800426 	beq	r3,r2,67b0 <__muldf3+0x4f4>
    67a0:	9087883a 	add	r3,r18,r2
    67a4:	1c85803a 	cmpltu	r2,r3,r18
    67a8:	80a1883a 	add	r16,r16,r2
    67ac:	1825883a 	mov	r18,r3
    67b0:	8080402c 	andhi	r2,r16,256
    67b4:	10000426 	beq	r2,zero,67c8 <__muldf3+0x50c>
    67b8:	00bfc034 	movhi	r2,65280
    67bc:	10bfffc4 	addi	r2,r2,-1
    67c0:	29010004 	addi	r4,r5,1024
    67c4:	80a0703a 	and	r16,r16,r2
    67c8:	0081ff84 	movi	r2,2046
    67cc:	1100320e 	bge	r2,r4,6898 <__muldf3+0x5dc>
    67d0:	b4c0004c 	andi	r19,r22,1
    67d4:	0101ffc4 	movi	r4,2047
    67d8:	0021883a 	mov	r16,zero
    67dc:	0025883a 	mov	r18,zero
    67e0:	003f1006 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    67e4:	8080022c 	andhi	r2,r16,8
    67e8:	10000926 	beq	r2,zero,6810 <__muldf3+0x554>
    67ec:	8880022c 	andhi	r2,r17,8
    67f0:	1000071e 	bne	r2,zero,6810 <__muldf3+0x554>
    67f4:	00800434 	movhi	r2,16
    67f8:	8c000234 	orhi	r16,r17,8
    67fc:	10bfffc4 	addi	r2,r2,-1
    6800:	1827883a 	mov	r19,r3
    6804:	80a0703a 	and	r16,r16,r2
    6808:	b825883a 	mov	r18,r23
    680c:	003f6a06 	br	65b8 <__alt_mem_Flash_flash_data+0xf40065b8>
    6810:	00800434 	movhi	r2,16
    6814:	84000234 	orhi	r16,r16,8
    6818:	10bfffc4 	addi	r2,r2,-1
    681c:	80a0703a 	and	r16,r16,r2
    6820:	003f6506 	br	65b8 <__alt_mem_Flash_flash_data+0xf40065b8>
    6824:	3009883a 	mov	r4,r6
    6828:	d8c00215 	stw	r3,8(sp)
    682c:	d9800315 	stw	r6,12(sp)
    6830:	da800015 	stw	r10,0(sp)
    6834:	dac00115 	stw	r11,4(sp)
    6838:	00075180 	call	7518 <__clzsi2>
    683c:	11000804 	addi	r4,r2,32
    6840:	014009c4 	movi	r5,39
    6844:	d8c00217 	ldw	r3,8(sp)
    6848:	d9800317 	ldw	r6,12(sp)
    684c:	da800017 	ldw	r10,0(sp)
    6850:	dac00117 	ldw	r11,4(sp)
    6854:	293f320e 	bge	r5,r4,6520 <__alt_mem_Flash_flash_data+0xf4006520>
    6858:	10bffe04 	addi	r2,r2,-8
    685c:	b8a2983a 	sll	r17,r23,r2
    6860:	002f883a 	mov	r23,zero
    6864:	003f3506 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    6868:	d9800315 	stw	r6,12(sp)
    686c:	d9c00015 	stw	r7,0(sp)
    6870:	00075180 	call	7518 <__clzsi2>
    6874:	10c00804 	addi	r3,r2,32
    6878:	010009c4 	movi	r4,39
    687c:	d9800317 	ldw	r6,12(sp)
    6880:	d9c00017 	ldw	r7,0(sp)
    6884:	20ff060e 	bge	r4,r3,64a0 <__alt_mem_Flash_flash_data+0xf40064a0>
    6888:	10bffe04 	addi	r2,r2,-8
    688c:	88a0983a 	sll	r16,r17,r2
    6890:	0025883a 	mov	r18,zero
    6894:	003f0906 	br	64bc <__alt_mem_Flash_flash_data+0xf40064bc>
    6898:	9004d0fa 	srli	r2,r18,3
    689c:	8024977a 	slli	r18,r16,29
    68a0:	8020927a 	slli	r16,r16,9
    68a4:	2101ffcc 	andi	r4,r4,2047
    68a8:	90a4b03a 	or	r18,r18,r2
    68ac:	8020d33a 	srli	r16,r16,12
    68b0:	b4c0004c 	andi	r19,r22,1
    68b4:	003edb06 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    68b8:	00ff0084 	movi	r3,-1022
    68bc:	1947c83a 	sub	r3,r3,r5
    68c0:	00800e04 	movi	r2,56
    68c4:	10c0080e 	bge	r2,r3,68e8 <__muldf3+0x62c>
    68c8:	b4c0004c 	andi	r19,r22,1
    68cc:	0009883a 	mov	r4,zero
    68d0:	0021883a 	mov	r16,zero
    68d4:	0025883a 	mov	r18,zero
    68d8:	003ed206 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    68dc:	600b883a 	mov	r5,r12
    68e0:	e02d883a 	mov	r22,fp
    68e4:	003fa706 	br	6784 <__alt_mem_Flash_flash_data+0xf4006784>
    68e8:	008007c4 	movi	r2,31
    68ec:	10c01816 	blt	r2,r3,6950 <__muldf3+0x694>
    68f0:	29410784 	addi	r5,r5,1054
    68f4:	8144983a 	sll	r2,r16,r5
    68f8:	90c8d83a 	srl	r4,r18,r3
    68fc:	914a983a 	sll	r5,r18,r5
    6900:	80c6d83a 	srl	r3,r16,r3
    6904:	2088b03a 	or	r4,r4,r2
    6908:	2804c03a 	cmpne	r2,r5,zero
    690c:	2084b03a 	or	r2,r4,r2
    6910:	110001cc 	andi	r4,r2,7
    6914:	20000726 	beq	r4,zero,6934 <__muldf3+0x678>
    6918:	114003cc 	andi	r5,r2,15
    691c:	01000104 	movi	r4,4
    6920:	29000426 	beq	r5,r4,6934 <__muldf3+0x678>
    6924:	11000104 	addi	r4,r2,4
    6928:	2085803a 	cmpltu	r2,r4,r2
    692c:	1887883a 	add	r3,r3,r2
    6930:	2005883a 	mov	r2,r4
    6934:	1900202c 	andhi	r4,r3,128
    6938:	20001826 	beq	r4,zero,699c <__muldf3+0x6e0>
    693c:	b4c0004c 	andi	r19,r22,1
    6940:	01000044 	movi	r4,1
    6944:	0021883a 	mov	r16,zero
    6948:	0025883a 	mov	r18,zero
    694c:	003eb506 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    6950:	00bef884 	movi	r2,-1054
    6954:	1145c83a 	sub	r2,r2,r5
    6958:	8088d83a 	srl	r4,r16,r2
    695c:	00800804 	movi	r2,32
    6960:	18801726 	beq	r3,r2,69c0 <__muldf3+0x704>
    6964:	28810f84 	addi	r2,r5,1086
    6968:	8084983a 	sll	r2,r16,r2
    696c:	1484b03a 	or	r2,r2,r18
    6970:	1004c03a 	cmpne	r2,r2,zero
    6974:	1104b03a 	or	r2,r2,r4
    6978:	10c001cc 	andi	r3,r2,7
    697c:	18000b1e 	bne	r3,zero,69ac <__muldf3+0x6f0>
    6980:	0021883a 	mov	r16,zero
    6984:	1004d0fa 	srli	r2,r2,3
    6988:	b4c0004c 	andi	r19,r22,1
    698c:	0009883a 	mov	r4,zero
    6990:	10e4b03a 	or	r18,r2,r3
    6994:	003ea306 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    6998:	0007883a 	mov	r3,zero
    699c:	1820927a 	slli	r16,r3,9
    69a0:	1806977a 	slli	r3,r3,29
    69a4:	8020d33a 	srli	r16,r16,12
    69a8:	003ff606 	br	6984 <__alt_mem_Flash_flash_data+0xf4006984>
    69ac:	110003cc 	andi	r4,r2,15
    69b0:	00c00104 	movi	r3,4
    69b4:	20fff826 	beq	r4,r3,6998 <__alt_mem_Flash_flash_data+0xf4006998>
    69b8:	0007883a 	mov	r3,zero
    69bc:	003fd906 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    69c0:	0005883a 	mov	r2,zero
    69c4:	003fe906 	br	696c <__alt_mem_Flash_flash_data+0xf400696c>
    69c8:	00800434 	movhi	r2,16
    69cc:	84000234 	orhi	r16,r16,8
    69d0:	10bfffc4 	addi	r2,r2,-1
    69d4:	e4c0004c 	andi	r19,fp,1
    69d8:	80a0703a 	and	r16,r16,r2
    69dc:	003ef606 	br	65b8 <__alt_mem_Flash_flash_data+0xf40065b8>

000069e0 <__subdf3>:
    69e0:	00c00434 	movhi	r3,16
    69e4:	18ffffc4 	addi	r3,r3,-1
    69e8:	defffb04 	addi	sp,sp,-20
    69ec:	28d2703a 	and	r9,r5,r3
    69f0:	3814d53a 	srli	r10,r7,20
    69f4:	38c6703a 	and	r3,r7,r3
    69f8:	3004d77a 	srli	r2,r6,29
    69fc:	dc800215 	stw	r18,8(sp)
    6a00:	dc000015 	stw	r16,0(sp)
    6a04:	2824d7fa 	srli	r18,r5,31
    6a08:	2820d53a 	srli	r16,r5,20
    6a0c:	481290fa 	slli	r9,r9,3
    6a10:	200ad77a 	srli	r5,r4,29
    6a14:	180690fa 	slli	r3,r3,3
    6a18:	dc400115 	stw	r17,4(sp)
    6a1c:	dfc00415 	stw	ra,16(sp)
    6a20:	202290fa 	slli	r17,r4,3
    6a24:	dcc00315 	stw	r19,12(sp)
    6a28:	5281ffcc 	andi	r10,r10,2047
    6a2c:	0101ffc4 	movi	r4,2047
    6a30:	9011883a 	mov	r8,r18
    6a34:	8401ffcc 	andi	r16,r16,2047
    6a38:	94803fcc 	andi	r18,r18,255
    6a3c:	494ab03a 	or	r5,r9,r5
    6a40:	380ed7fa 	srli	r7,r7,31
    6a44:	1886b03a 	or	r3,r3,r2
    6a48:	300c90fa 	slli	r6,r6,3
    6a4c:	51009026 	beq	r10,r4,6c90 <__subdf3+0x2b0>
    6a50:	39c0005c 	xori	r7,r7,1
    6a54:	8285c83a 	sub	r2,r16,r10
    6a58:	91c06f26 	beq	r18,r7,6c18 <__subdf3+0x238>
    6a5c:	0080b10e 	bge	zero,r2,6d24 <__subdf3+0x344>
    6a60:	50002a1e 	bne	r10,zero,6b0c <__subdf3+0x12c>
    6a64:	1988b03a 	or	r4,r3,r6
    6a68:	2000941e 	bne	r4,zero,6cbc <__subdf3+0x2dc>
    6a6c:	888001cc 	andi	r2,r17,7
    6a70:	10005b26 	beq	r2,zero,6be0 <__subdf3+0x200>
    6a74:	88c003cc 	andi	r3,r17,15
    6a78:	00800104 	movi	r2,4
    6a7c:	18805826 	beq	r3,r2,6be0 <__subdf3+0x200>
    6a80:	88c00104 	addi	r3,r17,4
    6a84:	1c63803a 	cmpltu	r17,r3,r17
    6a88:	2c4b883a 	add	r5,r5,r17
    6a8c:	2880202c 	andhi	r2,r5,128
    6a90:	9200004c 	andi	r8,r18,1
    6a94:	1823883a 	mov	r17,r3
    6a98:	10005426 	beq	r2,zero,6bec <__subdf3+0x20c>
    6a9c:	84000044 	addi	r16,r16,1
    6aa0:	0081ffc4 	movi	r2,2047
    6aa4:	8080bf26 	beq	r16,r2,6da4 <__subdf3+0x3c4>
    6aa8:	013fe034 	movhi	r4,65408
    6aac:	213fffc4 	addi	r4,r4,-1
    6ab0:	290a703a 	and	r5,r5,r4
    6ab4:	2804977a 	slli	r2,r5,29
    6ab8:	280a927a 	slli	r5,r5,9
    6abc:	8822d0fa 	srli	r17,r17,3
    6ac0:	8401ffcc 	andi	r16,r16,2047
    6ac4:	2808d33a 	srli	r4,r5,12
    6ac8:	1444b03a 	or	r2,r2,r17
    6acc:	8401ffcc 	andi	r16,r16,2047
    6ad0:	800a953a 	slli	r5,r16,20
    6ad4:	40c03fcc 	andi	r3,r8,255
    6ad8:	04000434 	movhi	r16,16
    6adc:	180697fa 	slli	r3,r3,31
    6ae0:	843fffc4 	addi	r16,r16,-1
    6ae4:	2420703a 	and	r16,r4,r16
    6ae8:	8160b03a 	or	r16,r16,r5
    6aec:	80c6b03a 	or	r3,r16,r3
    6af0:	dfc00417 	ldw	ra,16(sp)
    6af4:	dcc00317 	ldw	r19,12(sp)
    6af8:	dc800217 	ldw	r18,8(sp)
    6afc:	dc400117 	ldw	r17,4(sp)
    6b00:	dc000017 	ldw	r16,0(sp)
    6b04:	dec00504 	addi	sp,sp,20
    6b08:	f800283a 	ret
    6b0c:	0101ffc4 	movi	r4,2047
    6b10:	813fd626 	beq	r16,r4,6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6b14:	18c02034 	orhi	r3,r3,128
    6b18:	01000e04 	movi	r4,56
    6b1c:	2080a416 	blt	r4,r2,6db0 <__subdf3+0x3d0>
    6b20:	010007c4 	movi	r4,31
    6b24:	2080c716 	blt	r4,r2,6e44 <__subdf3+0x464>
    6b28:	01000804 	movi	r4,32
    6b2c:	2089c83a 	sub	r4,r4,r2
    6b30:	1910983a 	sll	r8,r3,r4
    6b34:	308ed83a 	srl	r7,r6,r2
    6b38:	3108983a 	sll	r4,r6,r4
    6b3c:	1884d83a 	srl	r2,r3,r2
    6b40:	41ccb03a 	or	r6,r8,r7
    6b44:	2008c03a 	cmpne	r4,r4,zero
    6b48:	310cb03a 	or	r6,r6,r4
    6b4c:	898dc83a 	sub	r6,r17,r6
    6b50:	89a3803a 	cmpltu	r17,r17,r6
    6b54:	288bc83a 	sub	r5,r5,r2
    6b58:	2c4bc83a 	sub	r5,r5,r17
    6b5c:	3023883a 	mov	r17,r6
    6b60:	2880202c 	andhi	r2,r5,128
    6b64:	10006b26 	beq	r2,zero,6d14 <__subdf3+0x334>
    6b68:	04c02034 	movhi	r19,128
    6b6c:	9cffffc4 	addi	r19,r19,-1
    6b70:	2ce6703a 	and	r19,r5,r19
    6b74:	98007c26 	beq	r19,zero,6d68 <__subdf3+0x388>
    6b78:	9809883a 	mov	r4,r19
    6b7c:	00075180 	call	7518 <__clzsi2>
    6b80:	10fffe04 	addi	r3,r2,-8
    6b84:	010007c4 	movi	r4,31
    6b88:	20c07d16 	blt	r4,r3,6d80 <__subdf3+0x3a0>
    6b8c:	01400a04 	movi	r5,40
    6b90:	2885c83a 	sub	r2,r5,r2
    6b94:	888ad83a 	srl	r5,r17,r2
    6b98:	98e6983a 	sll	r19,r19,r3
    6b9c:	88e2983a 	sll	r17,r17,r3
    6ba0:	2ce6b03a 	or	r19,r5,r19
    6ba4:	1c007a16 	blt	r3,r16,6d90 <__subdf3+0x3b0>
    6ba8:	1c21c83a 	sub	r16,r3,r16
    6bac:	81400044 	addi	r5,r16,1
    6bb0:	00c007c4 	movi	r3,31
    6bb4:	19409616 	blt	r3,r5,6e10 <__subdf3+0x430>
    6bb8:	1c21c83a 	sub	r16,r3,r16
    6bbc:	8c08983a 	sll	r4,r17,r16
    6bc0:	8946d83a 	srl	r3,r17,r5
    6bc4:	9c20983a 	sll	r16,r19,r16
    6bc8:	2008c03a 	cmpne	r4,r4,zero
    6bcc:	994ad83a 	srl	r5,r19,r5
    6bd0:	1c06b03a 	or	r3,r3,r16
    6bd4:	1922b03a 	or	r17,r3,r4
    6bd8:	0021883a 	mov	r16,zero
    6bdc:	003fa306 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6be0:	2880202c 	andhi	r2,r5,128
    6be4:	9200004c 	andi	r8,r18,1
    6be8:	103fac1e 	bne	r2,zero,6a9c <__alt_mem_Flash_flash_data+0xf4006a9c>
    6bec:	2804977a 	slli	r2,r5,29
    6bf0:	8822d0fa 	srli	r17,r17,3
    6bf4:	00c1ffc4 	movi	r3,2047
    6bf8:	280ad0fa 	srli	r5,r5,3
    6bfc:	1444b03a 	or	r2,r2,r17
    6c00:	80c02726 	beq	r16,r3,6ca0 <__subdf3+0x2c0>
    6c04:	01000434 	movhi	r4,16
    6c08:	213fffc4 	addi	r4,r4,-1
    6c0c:	80e0703a 	and	r16,r16,r3
    6c10:	2908703a 	and	r4,r5,r4
    6c14:	003fad06 	br	6acc <__alt_mem_Flash_flash_data+0xf4006acc>
    6c18:	0080690e 	bge	zero,r2,6dc0 <__subdf3+0x3e0>
    6c1c:	50002f26 	beq	r10,zero,6cdc <__subdf3+0x2fc>
    6c20:	0101ffc4 	movi	r4,2047
    6c24:	813f9126 	beq	r16,r4,6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6c28:	18c02034 	orhi	r3,r3,128
    6c2c:	01000e04 	movi	r4,56
    6c30:	2080b00e 	bge	r4,r2,6ef4 <__subdf3+0x514>
    6c34:	198cb03a 	or	r6,r3,r6
    6c38:	300ec03a 	cmpne	r7,r6,zero
    6c3c:	0005883a 	mov	r2,zero
    6c40:	3c4f883a 	add	r7,r7,r17
    6c44:	3c63803a 	cmpltu	r17,r7,r17
    6c48:	114b883a 	add	r5,r2,r5
    6c4c:	2c4b883a 	add	r5,r5,r17
    6c50:	3823883a 	mov	r17,r7
    6c54:	2880202c 	andhi	r2,r5,128
    6c58:	10002e26 	beq	r2,zero,6d14 <__subdf3+0x334>
    6c5c:	84000044 	addi	r16,r16,1
    6c60:	0081ffc4 	movi	r2,2047
    6c64:	8080de26 	beq	r16,r2,6fe0 <__subdf3+0x600>
    6c68:	00bfe034 	movhi	r2,65408
    6c6c:	10bfffc4 	addi	r2,r2,-1
    6c70:	288a703a 	and	r5,r5,r2
    6c74:	880cd07a 	srli	r6,r17,1
    6c78:	280897fa 	slli	r4,r5,31
    6c7c:	88c0004c 	andi	r3,r17,1
    6c80:	30e2b03a 	or	r17,r6,r3
    6c84:	280ad07a 	srli	r5,r5,1
    6c88:	8922b03a 	or	r17,r17,r4
    6c8c:	003f7706 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6c90:	1984b03a 	or	r2,r3,r6
    6c94:	103f6e26 	beq	r2,zero,6a50 <__alt_mem_Flash_flash_data+0xf4006a50>
    6c98:	39c03fcc 	andi	r7,r7,255
    6c9c:	003f6d06 	br	6a54 <__alt_mem_Flash_flash_data+0xf4006a54>
    6ca0:	1146b03a 	or	r3,r2,r5
    6ca4:	18003f26 	beq	r3,zero,6da4 <__subdf3+0x3c4>
    6ca8:	00c00434 	movhi	r3,16
    6cac:	29000234 	orhi	r4,r5,8
    6cb0:	18ffffc4 	addi	r3,r3,-1
    6cb4:	20c8703a 	and	r4,r4,r3
    6cb8:	003f8406 	br	6acc <__alt_mem_Flash_flash_data+0xf4006acc>
    6cbc:	10bfffc4 	addi	r2,r2,-1
    6cc0:	1000501e 	bne	r2,zero,6e04 <__subdf3+0x424>
    6cc4:	898fc83a 	sub	r7,r17,r6
    6cc8:	89e3803a 	cmpltu	r17,r17,r7
    6ccc:	28cbc83a 	sub	r5,r5,r3
    6cd0:	2c4bc83a 	sub	r5,r5,r17
    6cd4:	3823883a 	mov	r17,r7
    6cd8:	003fa106 	br	6b60 <__alt_mem_Flash_flash_data+0xf4006b60>
    6cdc:	1988b03a 	or	r4,r3,r6
    6ce0:	203f6226 	beq	r4,zero,6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6ce4:	10bfffc4 	addi	r2,r2,-1
    6ce8:	10009b1e 	bne	r2,zero,6f58 <__subdf3+0x578>
    6cec:	344d883a 	add	r6,r6,r17
    6cf0:	3463803a 	cmpltu	r17,r6,r17
    6cf4:	194b883a 	add	r5,r3,r5
    6cf8:	2c4b883a 	add	r5,r5,r17
    6cfc:	3023883a 	mov	r17,r6
    6d00:	003fd406 	br	6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    6d04:	1106b03a 	or	r3,r2,r4
    6d08:	1800b426 	beq	r3,zero,6fdc <__subdf3+0x5fc>
    6d0c:	100b883a 	mov	r5,r2
    6d10:	2023883a 	mov	r17,r4
    6d14:	888001cc 	andi	r2,r17,7
    6d18:	103f561e 	bne	r2,zero,6a74 <__alt_mem_Flash_flash_data+0xf4006a74>
    6d1c:	9200004c 	andi	r8,r18,1
    6d20:	003fb206 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    6d24:	1000531e 	bne	r2,zero,6e74 <__subdf3+0x494>
    6d28:	80800044 	addi	r2,r16,1
    6d2c:	1081ffcc 	andi	r2,r2,2047
    6d30:	01000044 	movi	r4,1
    6d34:	2080a00e 	bge	r4,r2,6fb8 <__subdf3+0x5d8>
    6d38:	8985c83a 	sub	r2,r17,r6
    6d3c:	8889803a 	cmpltu	r4,r17,r2
    6d40:	28e7c83a 	sub	r19,r5,r3
    6d44:	9927c83a 	sub	r19,r19,r4
    6d48:	9900202c 	andhi	r4,r19,128
    6d4c:	20006226 	beq	r4,zero,6ed8 <__subdf3+0x4f8>
    6d50:	3463c83a 	sub	r17,r6,r17
    6d54:	194bc83a 	sub	r5,r3,r5
    6d58:	344d803a 	cmpltu	r6,r6,r17
    6d5c:	29a7c83a 	sub	r19,r5,r6
    6d60:	3825883a 	mov	r18,r7
    6d64:	983f841e 	bne	r19,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    6d68:	8809883a 	mov	r4,r17
    6d6c:	00075180 	call	7518 <__clzsi2>
    6d70:	10800804 	addi	r2,r2,32
    6d74:	10fffe04 	addi	r3,r2,-8
    6d78:	010007c4 	movi	r4,31
    6d7c:	20ff830e 	bge	r4,r3,6b8c <__alt_mem_Flash_flash_data+0xf4006b8c>
    6d80:	14fff604 	addi	r19,r2,-40
    6d84:	8ce6983a 	sll	r19,r17,r19
    6d88:	0023883a 	mov	r17,zero
    6d8c:	1c3f860e 	bge	r3,r16,6ba8 <__alt_mem_Flash_flash_data+0xf4006ba8>
    6d90:	017fe034 	movhi	r5,65408
    6d94:	297fffc4 	addi	r5,r5,-1
    6d98:	80e1c83a 	sub	r16,r16,r3
    6d9c:	994a703a 	and	r5,r19,r5
    6da0:	003f3206 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6da4:	0009883a 	mov	r4,zero
    6da8:	0005883a 	mov	r2,zero
    6dac:	003f4706 	br	6acc <__alt_mem_Flash_flash_data+0xf4006acc>
    6db0:	198cb03a 	or	r6,r3,r6
    6db4:	300cc03a 	cmpne	r6,r6,zero
    6db8:	0005883a 	mov	r2,zero
    6dbc:	003f6306 	br	6b4c <__alt_mem_Flash_flash_data+0xf4006b4c>
    6dc0:	10009d1e 	bne	r2,zero,7038 <__subdf3+0x658>
    6dc4:	81c00044 	addi	r7,r16,1
    6dc8:	3881ffcc 	andi	r2,r7,2047
    6dcc:	02400044 	movi	r9,1
    6dd0:	4880680e 	bge	r9,r2,6f74 <__subdf3+0x594>
    6dd4:	0081ffc4 	movi	r2,2047
    6dd8:	3880ae26 	beq	r7,r2,7094 <__subdf3+0x6b4>
    6ddc:	344d883a 	add	r6,r6,r17
    6de0:	3463803a 	cmpltu	r17,r6,r17
    6de4:	194b883a 	add	r5,r3,r5
    6de8:	2c4b883a 	add	r5,r5,r17
    6dec:	282297fa 	slli	r17,r5,31
    6df0:	300cd07a 	srli	r6,r6,1
    6df4:	280ad07a 	srli	r5,r5,1
    6df8:	3821883a 	mov	r16,r7
    6dfc:	89a2b03a 	or	r17,r17,r6
    6e00:	003f1a06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6e04:	0101ffc4 	movi	r4,2047
    6e08:	813f431e 	bne	r16,r4,6b18 <__alt_mem_Flash_flash_data+0xf4006b18>
    6e0c:	003f1706 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6e10:	80bff844 	addi	r2,r16,-31
    6e14:	00c00804 	movi	r3,32
    6e18:	9884d83a 	srl	r2,r19,r2
    6e1c:	28c05126 	beq	r5,r3,6f64 <__subdf3+0x584>
    6e20:	00c00fc4 	movi	r3,63
    6e24:	1c21c83a 	sub	r16,r3,r16
    6e28:	9c26983a 	sll	r19,r19,r16
    6e2c:	9c62b03a 	or	r17,r19,r17
    6e30:	8822c03a 	cmpne	r17,r17,zero
    6e34:	88a2b03a 	or	r17,r17,r2
    6e38:	000b883a 	mov	r5,zero
    6e3c:	0021883a 	mov	r16,zero
    6e40:	003fb406 	br	6d14 <__alt_mem_Flash_flash_data+0xf4006d14>
    6e44:	113ff804 	addi	r4,r2,-32
    6e48:	01c00804 	movi	r7,32
    6e4c:	1908d83a 	srl	r4,r3,r4
    6e50:	11c04626 	beq	r2,r7,6f6c <__subdf3+0x58c>
    6e54:	01c01004 	movi	r7,64
    6e58:	3885c83a 	sub	r2,r7,r2
    6e5c:	1884983a 	sll	r2,r3,r2
    6e60:	118cb03a 	or	r6,r2,r6
    6e64:	300cc03a 	cmpne	r6,r6,zero
    6e68:	310cb03a 	or	r6,r6,r4
    6e6c:	0005883a 	mov	r2,zero
    6e70:	003f3606 	br	6b4c <__alt_mem_Flash_flash_data+0xf4006b4c>
    6e74:	80002b26 	beq	r16,zero,6f24 <__subdf3+0x544>
    6e78:	0101ffc4 	movi	r4,2047
    6e7c:	51006926 	beq	r10,r4,7024 <__subdf3+0x644>
    6e80:	0085c83a 	sub	r2,zero,r2
    6e84:	29402034 	orhi	r5,r5,128
    6e88:	01000e04 	movi	r4,56
    6e8c:	20807d16 	blt	r4,r2,7084 <__subdf3+0x6a4>
    6e90:	010007c4 	movi	r4,31
    6e94:	2080d916 	blt	r4,r2,71fc <__subdf3+0x81c>
    6e98:	01000804 	movi	r4,32
    6e9c:	2089c83a 	sub	r4,r4,r2
    6ea0:	2912983a 	sll	r9,r5,r4
    6ea4:	8890d83a 	srl	r8,r17,r2
    6ea8:	8908983a 	sll	r4,r17,r4
    6eac:	2884d83a 	srl	r2,r5,r2
    6eb0:	4a22b03a 	or	r17,r9,r8
    6eb4:	2008c03a 	cmpne	r4,r4,zero
    6eb8:	8922b03a 	or	r17,r17,r4
    6ebc:	3463c83a 	sub	r17,r6,r17
    6ec0:	1885c83a 	sub	r2,r3,r2
    6ec4:	344d803a 	cmpltu	r6,r6,r17
    6ec8:	118bc83a 	sub	r5,r2,r6
    6ecc:	5021883a 	mov	r16,r10
    6ed0:	3825883a 	mov	r18,r7
    6ed4:	003f2206 	br	6b60 <__alt_mem_Flash_flash_data+0xf4006b60>
    6ed8:	9886b03a 	or	r3,r19,r2
    6edc:	18001c1e 	bne	r3,zero,6f50 <__subdf3+0x570>
    6ee0:	0011883a 	mov	r8,zero
    6ee4:	000b883a 	mov	r5,zero
    6ee8:	0023883a 	mov	r17,zero
    6eec:	0021883a 	mov	r16,zero
    6ef0:	003f3e06 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    6ef4:	010007c4 	movi	r4,31
    6ef8:	20803c16 	blt	r4,r2,6fec <__subdf3+0x60c>
    6efc:	01000804 	movi	r4,32
    6f00:	2089c83a 	sub	r4,r4,r2
    6f04:	1912983a 	sll	r9,r3,r4
    6f08:	308ed83a 	srl	r7,r6,r2
    6f0c:	3108983a 	sll	r4,r6,r4
    6f10:	1884d83a 	srl	r2,r3,r2
    6f14:	49ceb03a 	or	r7,r9,r7
    6f18:	2008c03a 	cmpne	r4,r4,zero
    6f1c:	390eb03a 	or	r7,r7,r4
    6f20:	003f4706 	br	6c40 <__alt_mem_Flash_flash_data+0xf4006c40>
    6f24:	2c48b03a 	or	r4,r5,r17
    6f28:	20003e26 	beq	r4,zero,7024 <__subdf3+0x644>
    6f2c:	0084303a 	nor	r2,zero,r2
    6f30:	10003a1e 	bne	r2,zero,701c <__subdf3+0x63c>
    6f34:	3463c83a 	sub	r17,r6,r17
    6f38:	194bc83a 	sub	r5,r3,r5
    6f3c:	344d803a 	cmpltu	r6,r6,r17
    6f40:	298bc83a 	sub	r5,r5,r6
    6f44:	5021883a 	mov	r16,r10
    6f48:	3825883a 	mov	r18,r7
    6f4c:	003f0406 	br	6b60 <__alt_mem_Flash_flash_data+0xf4006b60>
    6f50:	1023883a 	mov	r17,r2
    6f54:	003f0706 	br	6b74 <__alt_mem_Flash_flash_data+0xf4006b74>
    6f58:	0101ffc4 	movi	r4,2047
    6f5c:	813f331e 	bne	r16,r4,6c2c <__alt_mem_Flash_flash_data+0xf4006c2c>
    6f60:	003ec206 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6f64:	0027883a 	mov	r19,zero
    6f68:	003fb006 	br	6e2c <__alt_mem_Flash_flash_data+0xf4006e2c>
    6f6c:	0005883a 	mov	r2,zero
    6f70:	003fbb06 	br	6e60 <__alt_mem_Flash_flash_data+0xf4006e60>
    6f74:	2c44b03a 	or	r2,r5,r17
    6f78:	80008b1e 	bne	r16,zero,71a8 <__subdf3+0x7c8>
    6f7c:	1000b526 	beq	r2,zero,7254 <__subdf3+0x874>
    6f80:	1984b03a 	or	r2,r3,r6
    6f84:	103eb926 	beq	r2,zero,6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6f88:	3449883a 	add	r4,r6,r17
    6f8c:	2463803a 	cmpltu	r17,r4,r17
    6f90:	194b883a 	add	r5,r3,r5
    6f94:	2c4b883a 	add	r5,r5,r17
    6f98:	2880202c 	andhi	r2,r5,128
    6f9c:	2023883a 	mov	r17,r4
    6fa0:	103f5c26 	beq	r2,zero,6d14 <__alt_mem_Flash_flash_data+0xf4006d14>
    6fa4:	00bfe034 	movhi	r2,65408
    6fa8:	10bfffc4 	addi	r2,r2,-1
    6fac:	4821883a 	mov	r16,r9
    6fb0:	288a703a 	and	r5,r5,r2
    6fb4:	003ead06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6fb8:	2c44b03a 	or	r2,r5,r17
    6fbc:	8000291e 	bne	r16,zero,7064 <__subdf3+0x684>
    6fc0:	10004f1e 	bne	r2,zero,7100 <__subdf3+0x720>
    6fc4:	1984b03a 	or	r2,r3,r6
    6fc8:	10000426 	beq	r2,zero,6fdc <__subdf3+0x5fc>
    6fcc:	180b883a 	mov	r5,r3
    6fd0:	3023883a 	mov	r17,r6
    6fd4:	3825883a 	mov	r18,r7
    6fd8:	003ea406 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    6fdc:	0011883a 	mov	r8,zero
    6fe0:	000b883a 	mov	r5,zero
    6fe4:	0023883a 	mov	r17,zero
    6fe8:	003f0006 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    6fec:	11fff804 	addi	r7,r2,-32
    6ff0:	19c8d83a 	srl	r4,r3,r7
    6ff4:	01c00804 	movi	r7,32
    6ff8:	11c07e26 	beq	r2,r7,71f4 <__subdf3+0x814>
    6ffc:	01c01004 	movi	r7,64
    7000:	3885c83a 	sub	r2,r7,r2
    7004:	1884983a 	sll	r2,r3,r2
    7008:	118cb03a 	or	r6,r2,r6
    700c:	300ec03a 	cmpne	r7,r6,zero
    7010:	390eb03a 	or	r7,r7,r4
    7014:	0005883a 	mov	r2,zero
    7018:	003f0906 	br	6c40 <__alt_mem_Flash_flash_data+0xf4006c40>
    701c:	0101ffc4 	movi	r4,2047
    7020:	513f991e 	bne	r10,r4,6e88 <__alt_mem_Flash_flash_data+0xf4006e88>
    7024:	180b883a 	mov	r5,r3
    7028:	3023883a 	mov	r17,r6
    702c:	5021883a 	mov	r16,r10
    7030:	3825883a 	mov	r18,r7
    7034:	003e8d06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7038:	80001a1e 	bne	r16,zero,70a4 <__subdf3+0x6c4>
    703c:	2c48b03a 	or	r4,r5,r17
    7040:	20005526 	beq	r4,zero,7198 <__subdf3+0x7b8>
    7044:	0084303a 	nor	r2,zero,r2
    7048:	1000511e 	bne	r2,zero,7190 <__subdf3+0x7b0>
    704c:	89a3883a 	add	r17,r17,r6
    7050:	194b883a 	add	r5,r3,r5
    7054:	898d803a 	cmpltu	r6,r17,r6
    7058:	298b883a 	add	r5,r5,r6
    705c:	5021883a 	mov	r16,r10
    7060:	003efc06 	br	6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    7064:	1000341e 	bne	r2,zero,7138 <__subdf3+0x758>
    7068:	1984b03a 	or	r2,r3,r6
    706c:	10006f26 	beq	r2,zero,722c <__subdf3+0x84c>
    7070:	180b883a 	mov	r5,r3
    7074:	3023883a 	mov	r17,r6
    7078:	3825883a 	mov	r18,r7
    707c:	0401ffc4 	movi	r16,2047
    7080:	003e7a06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7084:	2c62b03a 	or	r17,r5,r17
    7088:	8822c03a 	cmpne	r17,r17,zero
    708c:	0005883a 	mov	r2,zero
    7090:	003f8a06 	br	6ebc <__alt_mem_Flash_flash_data+0xf4006ebc>
    7094:	3821883a 	mov	r16,r7
    7098:	000b883a 	mov	r5,zero
    709c:	0023883a 	mov	r17,zero
    70a0:	003ed206 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    70a4:	0101ffc4 	movi	r4,2047
    70a8:	51003b26 	beq	r10,r4,7198 <__subdf3+0x7b8>
    70ac:	0085c83a 	sub	r2,zero,r2
    70b0:	29402034 	orhi	r5,r5,128
    70b4:	01000e04 	movi	r4,56
    70b8:	20806216 	blt	r4,r2,7244 <__subdf3+0x864>
    70bc:	010007c4 	movi	r4,31
    70c0:	20806b16 	blt	r4,r2,7270 <__subdf3+0x890>
    70c4:	01000804 	movi	r4,32
    70c8:	2089c83a 	sub	r4,r4,r2
    70cc:	2912983a 	sll	r9,r5,r4
    70d0:	888ed83a 	srl	r7,r17,r2
    70d4:	8908983a 	sll	r4,r17,r4
    70d8:	2884d83a 	srl	r2,r5,r2
    70dc:	49e2b03a 	or	r17,r9,r7
    70e0:	2008c03a 	cmpne	r4,r4,zero
    70e4:	8922b03a 	or	r17,r17,r4
    70e8:	89a3883a 	add	r17,r17,r6
    70ec:	10c5883a 	add	r2,r2,r3
    70f0:	898d803a 	cmpltu	r6,r17,r6
    70f4:	118b883a 	add	r5,r2,r6
    70f8:	5021883a 	mov	r16,r10
    70fc:	003ed506 	br	6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    7100:	1984b03a 	or	r2,r3,r6
    7104:	103e5926 	beq	r2,zero,6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7108:	8989c83a 	sub	r4,r17,r6
    710c:	8911803a 	cmpltu	r8,r17,r4
    7110:	28c5c83a 	sub	r2,r5,r3
    7114:	1205c83a 	sub	r2,r2,r8
    7118:	1200202c 	andhi	r8,r2,128
    711c:	403ef926 	beq	r8,zero,6d04 <__alt_mem_Flash_flash_data+0xf4006d04>
    7120:	3463c83a 	sub	r17,r6,r17
    7124:	194bc83a 	sub	r5,r3,r5
    7128:	344d803a 	cmpltu	r6,r6,r17
    712c:	298bc83a 	sub	r5,r5,r6
    7130:	3825883a 	mov	r18,r7
    7134:	003e4d06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7138:	1984b03a 	or	r2,r3,r6
    713c:	10002b26 	beq	r2,zero,71ec <__subdf3+0x80c>
    7140:	2808d0fa 	srli	r4,r5,3
    7144:	8822d0fa 	srli	r17,r17,3
    7148:	280a977a 	slli	r5,r5,29
    714c:	2080022c 	andhi	r2,r4,8
    7150:	2c62b03a 	or	r17,r5,r17
    7154:	10000826 	beq	r2,zero,7178 <__subdf3+0x798>
    7158:	1810d0fa 	srli	r8,r3,3
    715c:	4080022c 	andhi	r2,r8,8
    7160:	1000051e 	bne	r2,zero,7178 <__subdf3+0x798>
    7164:	300cd0fa 	srli	r6,r6,3
    7168:	1804977a 	slli	r2,r3,29
    716c:	4009883a 	mov	r4,r8
    7170:	3825883a 	mov	r18,r7
    7174:	11a2b03a 	or	r17,r2,r6
    7178:	880ad77a 	srli	r5,r17,29
    717c:	200890fa 	slli	r4,r4,3
    7180:	882290fa 	slli	r17,r17,3
    7184:	0401ffc4 	movi	r16,2047
    7188:	290ab03a 	or	r5,r5,r4
    718c:	003e3706 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7190:	0101ffc4 	movi	r4,2047
    7194:	513fc71e 	bne	r10,r4,70b4 <__alt_mem_Flash_flash_data+0xf40070b4>
    7198:	180b883a 	mov	r5,r3
    719c:	3023883a 	mov	r17,r6
    71a0:	5021883a 	mov	r16,r10
    71a4:	003e3106 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    71a8:	10002d26 	beq	r2,zero,7260 <__subdf3+0x880>
    71ac:	1984b03a 	or	r2,r3,r6
    71b0:	10000e26 	beq	r2,zero,71ec <__subdf3+0x80c>
    71b4:	2808d0fa 	srli	r4,r5,3
    71b8:	8822d0fa 	srli	r17,r17,3
    71bc:	280a977a 	slli	r5,r5,29
    71c0:	2080022c 	andhi	r2,r4,8
    71c4:	2c62b03a 	or	r17,r5,r17
    71c8:	103feb26 	beq	r2,zero,7178 <__alt_mem_Flash_flash_data+0xf4007178>
    71cc:	180ed0fa 	srli	r7,r3,3
    71d0:	3880022c 	andhi	r2,r7,8
    71d4:	103fe81e 	bne	r2,zero,7178 <__alt_mem_Flash_flash_data+0xf4007178>
    71d8:	300cd0fa 	srli	r6,r6,3
    71dc:	1804977a 	slli	r2,r3,29
    71e0:	3809883a 	mov	r4,r7
    71e4:	11a2b03a 	or	r17,r2,r6
    71e8:	003fe306 	br	7178 <__alt_mem_Flash_flash_data+0xf4007178>
    71ec:	0401ffc4 	movi	r16,2047
    71f0:	003e1e06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    71f4:	0005883a 	mov	r2,zero
    71f8:	003f8306 	br	7008 <__alt_mem_Flash_flash_data+0xf4007008>
    71fc:	113ff804 	addi	r4,r2,-32
    7200:	02000804 	movi	r8,32
    7204:	2908d83a 	srl	r4,r5,r4
    7208:	12002526 	beq	r2,r8,72a0 <__subdf3+0x8c0>
    720c:	02001004 	movi	r8,64
    7210:	4085c83a 	sub	r2,r8,r2
    7214:	288a983a 	sll	r5,r5,r2
    7218:	2c62b03a 	or	r17,r5,r17
    721c:	8822c03a 	cmpne	r17,r17,zero
    7220:	8922b03a 	or	r17,r17,r4
    7224:	0005883a 	mov	r2,zero
    7228:	003f2406 	br	6ebc <__alt_mem_Flash_flash_data+0xf4006ebc>
    722c:	01402034 	movhi	r5,128
    7230:	0011883a 	mov	r8,zero
    7234:	297fffc4 	addi	r5,r5,-1
    7238:	047ffe04 	movi	r17,-8
    723c:	0401ffc4 	movi	r16,2047
    7240:	003e6a06 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    7244:	2c62b03a 	or	r17,r5,r17
    7248:	8822c03a 	cmpne	r17,r17,zero
    724c:	0005883a 	mov	r2,zero
    7250:	003fa506 	br	70e8 <__alt_mem_Flash_flash_data+0xf40070e8>
    7254:	180b883a 	mov	r5,r3
    7258:	3023883a 	mov	r17,r6
    725c:	003e0306 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7260:	180b883a 	mov	r5,r3
    7264:	3023883a 	mov	r17,r6
    7268:	0401ffc4 	movi	r16,2047
    726c:	003dff06 	br	6a6c <__alt_mem_Flash_flash_data+0xf4006a6c>
    7270:	113ff804 	addi	r4,r2,-32
    7274:	01c00804 	movi	r7,32
    7278:	2908d83a 	srl	r4,r5,r4
    727c:	11c00a26 	beq	r2,r7,72a8 <__subdf3+0x8c8>
    7280:	01c01004 	movi	r7,64
    7284:	3885c83a 	sub	r2,r7,r2
    7288:	288a983a 	sll	r5,r5,r2
    728c:	2c62b03a 	or	r17,r5,r17
    7290:	8822c03a 	cmpne	r17,r17,zero
    7294:	8922b03a 	or	r17,r17,r4
    7298:	0005883a 	mov	r2,zero
    729c:	003f9206 	br	70e8 <__alt_mem_Flash_flash_data+0xf40070e8>
    72a0:	000b883a 	mov	r5,zero
    72a4:	003fdc06 	br	7218 <__alt_mem_Flash_flash_data+0xf4007218>
    72a8:	000b883a 	mov	r5,zero
    72ac:	003ff706 	br	728c <__alt_mem_Flash_flash_data+0xf400728c>

000072b0 <__fixdfsi>:
    72b0:	2806d53a 	srli	r3,r5,20
    72b4:	00800434 	movhi	r2,16
    72b8:	10bfffc4 	addi	r2,r2,-1
    72bc:	18c1ffcc 	andi	r3,r3,2047
    72c0:	0180ff84 	movi	r6,1022
    72c4:	2884703a 	and	r2,r5,r2
    72c8:	280ad7fa 	srli	r5,r5,31
    72cc:	30c0130e 	bge	r6,r3,731c <__fixdfsi+0x6c>
    72d0:	01810744 	movi	r6,1053
    72d4:	30c00d16 	blt	r6,r3,730c <__fixdfsi+0x5c>
    72d8:	01810cc4 	movi	r6,1075
    72dc:	30cdc83a 	sub	r6,r6,r3
    72e0:	01c007c4 	movi	r7,31
    72e4:	10800434 	orhi	r2,r2,16
    72e8:	39800e0e 	bge	r7,r6,7324 <__fixdfsi+0x74>
    72ec:	010104c4 	movi	r4,1043
    72f0:	20c7c83a 	sub	r3,r4,r3
    72f4:	10c6d83a 	srl	r3,r2,r3
    72f8:	29403fcc 	andi	r5,r5,255
    72fc:	0145c83a 	sub	r2,zero,r5
    7300:	1884f03a 	xor	r2,r3,r2
    7304:	1145883a 	add	r2,r2,r5
    7308:	f800283a 	ret
    730c:	00a00034 	movhi	r2,32768
    7310:	10bfffc4 	addi	r2,r2,-1
    7314:	2885883a 	add	r2,r5,r2
    7318:	f800283a 	ret
    731c:	0005883a 	mov	r2,zero
    7320:	f800283a 	ret
    7324:	18fefb44 	addi	r3,r3,-1043
    7328:	2188d83a 	srl	r4,r4,r6
    732c:	10c6983a 	sll	r3,r2,r3
    7330:	20c6b03a 	or	r3,r4,r3
    7334:	003ff006 	br	72f8 <__alt_mem_Flash_flash_data+0xf40072f8>

00007338 <__floatsidf>:
    7338:	defffd04 	addi	sp,sp,-12
    733c:	dc400115 	stw	r17,4(sp)
    7340:	dfc00215 	stw	ra,8(sp)
    7344:	dc000015 	stw	r16,0(sp)
    7348:	2023883a 	mov	r17,r4
    734c:	20001426 	beq	r4,zero,73a0 <__floatsidf+0x68>
    7350:	2020d7fa 	srli	r16,r4,31
    7354:	80000126 	beq	r16,zero,735c <__floatsidf+0x24>
    7358:	0123c83a 	sub	r17,zero,r4
    735c:	8809883a 	mov	r4,r17
    7360:	00075180 	call	7518 <__clzsi2>
    7364:	01410784 	movi	r5,1054
    7368:	00c00284 	movi	r3,10
    736c:	288bc83a 	sub	r5,r5,r2
    7370:	18801c16 	blt	r3,r2,73e4 <__floatsidf+0xac>
    7374:	00c002c4 	movi	r3,11
    7378:	1887c83a 	sub	r3,r3,r2
    737c:	88c8d83a 	srl	r4,r17,r3
    7380:	00c00434 	movhi	r3,16
    7384:	18ffffc4 	addi	r3,r3,-1
    7388:	10800544 	addi	r2,r2,21
    738c:	20c8703a 	and	r4,r4,r3
    7390:	8884983a 	sll	r2,r17,r2
    7394:	28c1ffcc 	andi	r3,r5,2047
    7398:	800d883a 	mov	r6,r16
    739c:	00000406 	br	73b0 <__floatsidf+0x78>
    73a0:	000d883a 	mov	r6,zero
    73a4:	0007883a 	mov	r3,zero
    73a8:	0009883a 	mov	r4,zero
    73ac:	0005883a 	mov	r2,zero
    73b0:	180a953a 	slli	r5,r3,20
    73b4:	31803fcc 	andi	r6,r6,255
    73b8:	00c00434 	movhi	r3,16
    73bc:	300c97fa 	slli	r6,r6,31
    73c0:	18ffffc4 	addi	r3,r3,-1
    73c4:	20c6703a 	and	r3,r4,r3
    73c8:	1946b03a 	or	r3,r3,r5
    73cc:	1986b03a 	or	r3,r3,r6
    73d0:	dfc00217 	ldw	ra,8(sp)
    73d4:	dc400117 	ldw	r17,4(sp)
    73d8:	dc000017 	ldw	r16,0(sp)
    73dc:	dec00304 	addi	sp,sp,12
    73e0:	f800283a 	ret
    73e4:	10fffd44 	addi	r3,r2,-11
    73e8:	88c8983a 	sll	r4,r17,r3
    73ec:	00800434 	movhi	r2,16
    73f0:	10bfffc4 	addi	r2,r2,-1
    73f4:	2088703a 	and	r4,r4,r2
    73f8:	28c1ffcc 	andi	r3,r5,2047
    73fc:	800d883a 	mov	r6,r16
    7400:	0005883a 	mov	r2,zero
    7404:	003fea06 	br	73b0 <__alt_mem_Flash_flash_data+0xf40073b0>

00007408 <__extendsfdf2>:
    7408:	200ad5fa 	srli	r5,r4,23
    740c:	defffd04 	addi	sp,sp,-12
    7410:	dc400115 	stw	r17,4(sp)
    7414:	29403fcc 	andi	r5,r5,255
    7418:	29800044 	addi	r6,r5,1
    741c:	04402034 	movhi	r17,128
    7420:	dc000015 	stw	r16,0(sp)
    7424:	8c7fffc4 	addi	r17,r17,-1
    7428:	dfc00215 	stw	ra,8(sp)
    742c:	31803fcc 	andi	r6,r6,255
    7430:	00800044 	movi	r2,1
    7434:	8922703a 	and	r17,r17,r4
    7438:	2020d7fa 	srli	r16,r4,31
    743c:	1180110e 	bge	r2,r6,7484 <__extendsfdf2+0x7c>
    7440:	880ed0fa 	srli	r7,r17,3
    7444:	8822977a 	slli	r17,r17,29
    7448:	2940e004 	addi	r5,r5,896
    744c:	2941ffcc 	andi	r5,r5,2047
    7450:	280c953a 	slli	r6,r5,20
    7454:	01400434 	movhi	r5,16
    7458:	800697fa 	slli	r3,r16,31
    745c:	297fffc4 	addi	r5,r5,-1
    7460:	394a703a 	and	r5,r7,r5
    7464:	298ab03a 	or	r5,r5,r6
    7468:	8805883a 	mov	r2,r17
    746c:	28c6b03a 	or	r3,r5,r3
    7470:	dfc00217 	ldw	ra,8(sp)
    7474:	dc400117 	ldw	r17,4(sp)
    7478:	dc000017 	ldw	r16,0(sp)
    747c:	dec00304 	addi	sp,sp,12
    7480:	f800283a 	ret
    7484:	2800111e 	bne	r5,zero,74cc <__extendsfdf2+0xc4>
    7488:	88001c26 	beq	r17,zero,74fc <__extendsfdf2+0xf4>
    748c:	8809883a 	mov	r4,r17
    7490:	00075180 	call	7518 <__clzsi2>
    7494:	00c00284 	movi	r3,10
    7498:	18801b16 	blt	r3,r2,7508 <__extendsfdf2+0x100>
    749c:	01c002c4 	movi	r7,11
    74a0:	388fc83a 	sub	r7,r7,r2
    74a4:	10c00544 	addi	r3,r2,21
    74a8:	89ced83a 	srl	r7,r17,r7
    74ac:	88e2983a 	sll	r17,r17,r3
    74b0:	0180e244 	movi	r6,905
    74b4:	308bc83a 	sub	r5,r6,r2
    74b8:	01800434 	movhi	r6,16
    74bc:	31bfffc4 	addi	r6,r6,-1
    74c0:	398e703a 	and	r7,r7,r6
    74c4:	2941ffcc 	andi	r5,r5,2047
    74c8:	003fe006 	br	744c <__alt_mem_Flash_flash_data+0xf400744c>
    74cc:	88000826 	beq	r17,zero,74f0 <__extendsfdf2+0xe8>
    74d0:	880ed0fa 	srli	r7,r17,3
    74d4:	00800434 	movhi	r2,16
    74d8:	10bfffc4 	addi	r2,r2,-1
    74dc:	39c00234 	orhi	r7,r7,8
    74e0:	8822977a 	slli	r17,r17,29
    74e4:	388e703a 	and	r7,r7,r2
    74e8:	0141ffc4 	movi	r5,2047
    74ec:	003fd706 	br	744c <__alt_mem_Flash_flash_data+0xf400744c>
    74f0:	0141ffc4 	movi	r5,2047
    74f4:	000f883a 	mov	r7,zero
    74f8:	003fd406 	br	744c <__alt_mem_Flash_flash_data+0xf400744c>
    74fc:	000b883a 	mov	r5,zero
    7500:	000f883a 	mov	r7,zero
    7504:	003fd106 	br	744c <__alt_mem_Flash_flash_data+0xf400744c>
    7508:	11fffd44 	addi	r7,r2,-11
    750c:	89ce983a 	sll	r7,r17,r7
    7510:	0023883a 	mov	r17,zero
    7514:	003fe606 	br	74b0 <__alt_mem_Flash_flash_data+0xf40074b0>

00007518 <__clzsi2>:
    7518:	00bfffd4 	movui	r2,65535
    751c:	11000b36 	bltu	r2,r4,754c <__clzsi2+0x34>
    7520:	00803fc4 	movi	r2,255
    7524:	1100122e 	bgeu	r2,r4,7570 <__clzsi2+0x58>
    7528:	00c00204 	movi	r3,8
    752c:	01400604 	movi	r5,24
    7530:	20c8d83a 	srl	r4,r4,r3
    7534:	008000b4 	movhi	r2,2
    7538:	10aea004 	addi	r2,r2,-17792
    753c:	1109883a 	add	r4,r2,r4
    7540:	20800003 	ldbu	r2,0(r4)
    7544:	2885c83a 	sub	r2,r5,r2
    7548:	f800283a 	ret
    754c:	00804034 	movhi	r2,256
    7550:	10bfffc4 	addi	r2,r2,-1
    7554:	11000336 	bltu	r2,r4,7564 <__clzsi2+0x4c>
    7558:	00c00404 	movi	r3,16
    755c:	180b883a 	mov	r5,r3
    7560:	003ff306 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>
    7564:	00c00604 	movi	r3,24
    7568:	01400204 	movi	r5,8
    756c:	003ff006 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>
    7570:	0007883a 	mov	r3,zero
    7574:	01400804 	movi	r5,32
    7578:	003fed06 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>

0000757c <memcpy>:
    757c:	deffff04 	addi	sp,sp,-4
    7580:	dc000015 	stw	r16,0(sp)
    7584:	00c003c4 	movi	r3,15
    7588:	2005883a 	mov	r2,r4
    758c:	1980432e 	bgeu	r3,r6,769c <memcpy+0x120>
    7590:	2146b03a 	or	r3,r4,r5
    7594:	18c000cc 	andi	r3,r3,3
    7598:	1800421e 	bne	r3,zero,76a4 <memcpy+0x128>
    759c:	343ffc04 	addi	r16,r6,-16
    75a0:	8020d13a 	srli	r16,r16,4
    75a4:	28c00104 	addi	r3,r5,4
    75a8:	23400104 	addi	r13,r4,4
    75ac:	801e913a 	slli	r15,r16,4
    75b0:	2b000204 	addi	r12,r5,8
    75b4:	22c00204 	addi	r11,r4,8
    75b8:	7bc00504 	addi	r15,r15,20
    75bc:	2a800304 	addi	r10,r5,12
    75c0:	22400304 	addi	r9,r4,12
    75c4:	2bdf883a 	add	r15,r5,r15
    75c8:	2811883a 	mov	r8,r5
    75cc:	200f883a 	mov	r7,r4
    75d0:	41000017 	ldw	r4,0(r8)
    75d4:	39c00404 	addi	r7,r7,16
    75d8:	18c00404 	addi	r3,r3,16
    75dc:	393ffc15 	stw	r4,-16(r7)
    75e0:	1bbffc17 	ldw	r14,-16(r3)
    75e4:	6b400404 	addi	r13,r13,16
    75e8:	5ac00404 	addi	r11,r11,16
    75ec:	6bbffc15 	stw	r14,-16(r13)
    75f0:	63800017 	ldw	r14,0(r12)
    75f4:	4a400404 	addi	r9,r9,16
    75f8:	42000404 	addi	r8,r8,16
    75fc:	5bbffc15 	stw	r14,-16(r11)
    7600:	53800017 	ldw	r14,0(r10)
    7604:	63000404 	addi	r12,r12,16
    7608:	52800404 	addi	r10,r10,16
    760c:	4bbffc15 	stw	r14,-16(r9)
    7610:	1bffef1e 	bne	r3,r15,75d0 <__alt_mem_Flash_flash_data+0xf40075d0>
    7614:	81c00044 	addi	r7,r16,1
    7618:	380e913a 	slli	r7,r7,4
    761c:	310003cc 	andi	r4,r6,15
    7620:	02c000c4 	movi	r11,3
    7624:	11c7883a 	add	r3,r2,r7
    7628:	29cb883a 	add	r5,r5,r7
    762c:	59001f2e 	bgeu	r11,r4,76ac <memcpy+0x130>
    7630:	1813883a 	mov	r9,r3
    7634:	2811883a 	mov	r8,r5
    7638:	200f883a 	mov	r7,r4
    763c:	42800017 	ldw	r10,0(r8)
    7640:	4a400104 	addi	r9,r9,4
    7644:	39ffff04 	addi	r7,r7,-4
    7648:	4abfff15 	stw	r10,-4(r9)
    764c:	42000104 	addi	r8,r8,4
    7650:	59fffa36 	bltu	r11,r7,763c <__alt_mem_Flash_flash_data+0xf400763c>
    7654:	213fff04 	addi	r4,r4,-4
    7658:	2008d0ba 	srli	r4,r4,2
    765c:	318000cc 	andi	r6,r6,3
    7660:	21000044 	addi	r4,r4,1
    7664:	2109883a 	add	r4,r4,r4
    7668:	2109883a 	add	r4,r4,r4
    766c:	1907883a 	add	r3,r3,r4
    7670:	290b883a 	add	r5,r5,r4
    7674:	30000626 	beq	r6,zero,7690 <memcpy+0x114>
    7678:	198d883a 	add	r6,r3,r6
    767c:	29c00003 	ldbu	r7,0(r5)
    7680:	18c00044 	addi	r3,r3,1
    7684:	29400044 	addi	r5,r5,1
    7688:	19ffffc5 	stb	r7,-1(r3)
    768c:	19bffb1e 	bne	r3,r6,767c <__alt_mem_Flash_flash_data+0xf400767c>
    7690:	dc000017 	ldw	r16,0(sp)
    7694:	dec00104 	addi	sp,sp,4
    7698:	f800283a 	ret
    769c:	2007883a 	mov	r3,r4
    76a0:	003ff406 	br	7674 <__alt_mem_Flash_flash_data+0xf4007674>
    76a4:	2007883a 	mov	r3,r4
    76a8:	003ff306 	br	7678 <__alt_mem_Flash_flash_data+0xf4007678>
    76ac:	200d883a 	mov	r6,r4
    76b0:	003ff006 	br	7674 <__alt_mem_Flash_flash_data+0xf4007674>

000076b4 <_sprintf_r>:
    76b4:	deffe404 	addi	sp,sp,-112
    76b8:	2807883a 	mov	r3,r5
    76bc:	dfc01a15 	stw	ra,104(sp)
    76c0:	d9c01b15 	stw	r7,108(sp)
    76c4:	00a00034 	movhi	r2,32768
    76c8:	10bfffc4 	addi	r2,r2,-1
    76cc:	02008204 	movi	r8,520
    76d0:	d8800215 	stw	r2,8(sp)
    76d4:	d8800515 	stw	r2,20(sp)
    76d8:	d80b883a 	mov	r5,sp
    76dc:	d9c01b04 	addi	r7,sp,108
    76e0:	00bfffc4 	movi	r2,-1
    76e4:	d8c00015 	stw	r3,0(sp)
    76e8:	d8c00415 	stw	r3,16(sp)
    76ec:	da00030d 	sth	r8,12(sp)
    76f0:	d880038d 	sth	r2,14(sp)
    76f4:	00077780 	call	7778 <___svfprintf_internal_r>
    76f8:	d8c00017 	ldw	r3,0(sp)
    76fc:	18000005 	stb	zero,0(r3)
    7700:	dfc01a17 	ldw	ra,104(sp)
    7704:	dec01c04 	addi	sp,sp,112
    7708:	f800283a 	ret

0000770c <sprintf>:
    770c:	deffe304 	addi	sp,sp,-116
    7710:	2007883a 	mov	r3,r4
    7714:	dfc01a15 	stw	ra,104(sp)
    7718:	d9801b15 	stw	r6,108(sp)
    771c:	d9c01c15 	stw	r7,112(sp)
    7720:	010000b4 	movhi	r4,2
    7724:	21379d04 	addi	r4,r4,-8588
    7728:	21000017 	ldw	r4,0(r4)
    772c:	00a00034 	movhi	r2,32768
    7730:	10bfffc4 	addi	r2,r2,-1
    7734:	280d883a 	mov	r6,r5
    7738:	02008204 	movi	r8,520
    773c:	d8800215 	stw	r2,8(sp)
    7740:	d8800515 	stw	r2,20(sp)
    7744:	d80b883a 	mov	r5,sp
    7748:	d9c01b04 	addi	r7,sp,108
    774c:	00bfffc4 	movi	r2,-1
    7750:	d8c00015 	stw	r3,0(sp)
    7754:	d8c00415 	stw	r3,16(sp)
    7758:	da00030d 	sth	r8,12(sp)
    775c:	d880038d 	sth	r2,14(sp)
    7760:	00077780 	call	7778 <___svfprintf_internal_r>
    7764:	d8c00017 	ldw	r3,0(sp)
    7768:	18000005 	stb	zero,0(r3)
    776c:	dfc01a17 	ldw	ra,104(sp)
    7770:	dec01d04 	addi	sp,sp,116
    7774:	f800283a 	ret

00007778 <___svfprintf_internal_r>:
    7778:	deffb504 	addi	sp,sp,-300
    777c:	dfc04a15 	stw	ra,296(sp)
    7780:	ddc04815 	stw	r23,288(sp)
    7784:	d9002f15 	stw	r4,188(sp)
    7788:	282f883a 	mov	r23,r5
    778c:	d9802915 	stw	r6,164(sp)
    7790:	d9c02d15 	stw	r7,180(sp)
    7794:	df004915 	stw	fp,292(sp)
    7798:	dd804715 	stw	r22,284(sp)
    779c:	dd404615 	stw	r21,280(sp)
    77a0:	dd004515 	stw	r20,276(sp)
    77a4:	dcc04415 	stw	r19,272(sp)
    77a8:	dc804315 	stw	r18,268(sp)
    77ac:	dc404215 	stw	r17,264(sp)
    77b0:	dc004115 	stw	r16,260(sp)
    77b4:	000b0dc0 	call	b0dc <_localeconv_r>
    77b8:	10800017 	ldw	r2,0(r2)
    77bc:	1009883a 	mov	r4,r2
    77c0:	d8803515 	stw	r2,212(sp)
    77c4:	000caac0 	call	caac <strlen>
    77c8:	d8803915 	stw	r2,228(sp)
    77cc:	b880030b 	ldhu	r2,12(r23)
    77d0:	1080200c 	andi	r2,r2,128
    77d4:	10000226 	beq	r2,zero,77e0 <___svfprintf_internal_r+0x68>
    77d8:	b8800417 	ldw	r2,16(r23)
    77dc:	10065f26 	beq	r2,zero,915c <___svfprintf_internal_r+0x19e4>
    77e0:	db001dc4 	addi	r12,sp,119
    77e4:	dd801e04 	addi	r22,sp,120
    77e8:	d8800404 	addi	r2,sp,16
    77ec:	050000b4 	movhi	r20,2
    77f0:	b317c83a 	sub	r11,r22,r12
    77f4:	a52ef084 	addi	r20,r20,-17470
    77f8:	db002815 	stw	r12,160(sp)
    77fc:	d8801e15 	stw	r2,120(sp)
    7800:	d8002015 	stw	zero,128(sp)
    7804:	d8001f15 	stw	zero,124(sp)
    7808:	d8003315 	stw	zero,204(sp)
    780c:	d8003715 	stw	zero,220(sp)
    7810:	d8003815 	stw	zero,224(sp)
    7814:	1011883a 	mov	r8,r2
    7818:	d8003b15 	stw	zero,236(sp)
    781c:	d8003a15 	stw	zero,232(sp)
    7820:	d8003015 	stw	zero,192(sp)
    7824:	dac03d15 	stw	r11,244(sp)
    7828:	db002917 	ldw	r12,164(sp)
    782c:	60800007 	ldb	r2,0(r12)
    7830:	1000ab26 	beq	r2,zero,7ae0 <___svfprintf_internal_r+0x368>
    7834:	00c00944 	movi	r3,37
    7838:	10c0a926 	beq	r2,r3,7ae0 <___svfprintf_internal_r+0x368>
    783c:	6021883a 	mov	r16,r12
    7840:	00000106 	br	7848 <___svfprintf_internal_r+0xd0>
    7844:	10c08426 	beq	r2,r3,7a58 <___svfprintf_internal_r+0x2e0>
    7848:	84000044 	addi	r16,r16,1
    784c:	80800007 	ldb	r2,0(r16)
    7850:	103ffc1e 	bne	r2,zero,7844 <__alt_mem_Flash_flash_data+0xf4007844>
    7854:	dac02917 	ldw	r11,164(sp)
    7858:	82e3c83a 	sub	r17,r16,r11
    785c:	88000f26 	beq	r17,zero,789c <___svfprintf_internal_r+0x124>
    7860:	d8c02017 	ldw	r3,128(sp)
    7864:	d8801f17 	ldw	r2,124(sp)
    7868:	dac02917 	ldw	r11,164(sp)
    786c:	1c47883a 	add	r3,r3,r17
    7870:	10800044 	addi	r2,r2,1
    7874:	d8c02015 	stw	r3,128(sp)
    7878:	42c00015 	stw	r11,0(r8)
    787c:	44400115 	stw	r17,4(r8)
    7880:	d8801f15 	stw	r2,124(sp)
    7884:	00c001c4 	movi	r3,7
    7888:	18807616 	blt	r3,r2,7a64 <___svfprintf_internal_r+0x2ec>
    788c:	42000204 	addi	r8,r8,8
    7890:	db003017 	ldw	r12,192(sp)
    7894:	6459883a 	add	r12,r12,r17
    7898:	db003015 	stw	r12,192(sp)
    789c:	80800007 	ldb	r2,0(r16)
    78a0:	10007726 	beq	r2,zero,7a80 <___svfprintf_internal_r+0x308>
    78a4:	80800044 	addi	r2,r16,1
    78a8:	84000047 	ldb	r16,1(r16)
    78ac:	d8002785 	stb	zero,158(sp)
    78b0:	000d883a 	mov	r6,zero
    78b4:	027fffc4 	movi	r9,-1
    78b8:	d8002e15 	stw	zero,184(sp)
    78bc:	0023883a 	mov	r17,zero
    78c0:	01001604 	movi	r4,88
    78c4:	01400244 	movi	r5,9
    78c8:	02800a84 	movi	r10,42
    78cc:	01c01b04 	movi	r7,108
    78d0:	10c00044 	addi	r3,r2,1
    78d4:	80bff804 	addi	r2,r16,-32
    78d8:	2082e636 	bltu	r4,r2,8474 <___svfprintf_internal_r+0xcfc>
    78dc:	100490ba 	slli	r2,r2,2
    78e0:	02c00034 	movhi	r11,0
    78e4:	5ade3d04 	addi	r11,r11,30964
    78e8:	12c5883a 	add	r2,r2,r11
    78ec:	10800017 	ldw	r2,0(r2)
    78f0:	1000683a 	jmp	r2
    78f4:	00008254 	movui	zero,521
    78f8:	00008474 	movhi	zero,529
    78fc:	00008474 	movhi	zero,529
    7900:	00008274 	movhi	zero,521
    7904:	00008474 	movhi	zero,529
    7908:	00008474 	movhi	zero,529
    790c:	00008474 	movhi	zero,529
    7910:	00008474 	movhi	zero,529
    7914:	00008474 	movhi	zero,529
    7918:	00008474 	movhi	zero,529
    791c:	00008284 	movi	zero,522
    7920:	000082b0 	cmpltui	zero,zero,522
    7924:	00008474 	movhi	zero,529
    7928:	00007ae8 	cmpgeui	zero,zero,491
    792c:	00007af8 	rdprs	zero,zero,491
    7930:	00008474 	movhi	zero,529
    7934:	00007b38 	rdprs	zero,zero,492
    7938:	00008118 	cmpnei	zero,zero,516
    793c:	00008118 	cmpnei	zero,zero,516
    7940:	00008118 	cmpnei	zero,zero,516
    7944:	00008118 	cmpnei	zero,zero,516
    7948:	00008118 	cmpnei	zero,zero,516
    794c:	00008118 	cmpnei	zero,zero,516
    7950:	00008118 	cmpnei	zero,zero,516
    7954:	00008118 	cmpnei	zero,zero,516
    7958:	00008118 	cmpnei	zero,zero,516
    795c:	00008474 	movhi	zero,529
    7960:	00008474 	movhi	zero,529
    7964:	00008474 	movhi	zero,529
    7968:	00008474 	movhi	zero,529
    796c:	00008474 	movhi	zero,529
    7970:	00008474 	movhi	zero,529
    7974:	00008474 	movhi	zero,529
    7978:	00008474 	movhi	zero,529
    797c:	00008474 	movhi	zero,529
    7980:	00008474 	movhi	zero,529
    7984:	00007b48 	cmpgei	zero,zero,493
    7988:	00007fc8 	cmpgei	zero,zero,511
    798c:	00008474 	movhi	zero,529
    7990:	00007fc8 	cmpgei	zero,zero,511
    7994:	00008474 	movhi	zero,529
    7998:	00008474 	movhi	zero,529
    799c:	00008474 	movhi	zero,529
    79a0:	00008474 	movhi	zero,529
    79a4:	0000806c 	andhi	zero,zero,513
    79a8:	00008474 	movhi	zero,529
    79ac:	00008474 	movhi	zero,529
    79b0:	00008408 	cmpgei	zero,zero,528
    79b4:	00008474 	movhi	zero,529
    79b8:	00008474 	movhi	zero,529
    79bc:	00008474 	movhi	zero,529
    79c0:	00008474 	movhi	zero,529
    79c4:	00008474 	movhi	zero,529
    79c8:	0000807c 	xorhi	zero,zero,513
    79cc:	00008474 	movhi	zero,529
    79d0:	00008474 	movhi	zero,529
    79d4:	000080bc 	xorhi	zero,zero,514
    79d8:	00008474 	movhi	zero,529
    79dc:	00008474 	movhi	zero,529
    79e0:	00008474 	movhi	zero,529
    79e4:	00008474 	movhi	zero,529
    79e8:	00008474 	movhi	zero,529
    79ec:	00008474 	movhi	zero,529
    79f0:	00008474 	movhi	zero,529
    79f4:	00008474 	movhi	zero,529
    79f8:	00008474 	movhi	zero,529
    79fc:	00008474 	movhi	zero,529
    7a00:	00008360 	cmpeqi	zero,zero,525
    7a04:	000083a0 	cmpeqi	zero,zero,526
    7a08:	00007fc8 	cmpgei	zero,zero,511
    7a0c:	00007fc8 	cmpgei	zero,zero,511
    7a10:	00007fc8 	cmpgei	zero,zero,511
    7a14:	000082c0 	call	82c <drawLine+0x4d8>
    7a18:	000083a0 	cmpeqi	zero,zero,526
    7a1c:	00008474 	movhi	zero,529
    7a20:	00008474 	movhi	zero,529
    7a24:	000082d0 	cmplti	zero,zero,523
    7a28:	00008474 	movhi	zero,529
    7a2c:	000082e4 	muli	zero,zero,523
    7a30:	00008438 	rdprs	zero,zero,528
    7a34:	00008318 	cmpnei	zero,zero,524
    7a38:	0000814c 	andi	zero,zero,517
    7a3c:	00008474 	movhi	zero,529
    7a40:	0000815c 	xori	zero,zero,517
    7a44:	00008474 	movhi	zero,529
    7a48:	000081d4 	movui	zero,519
    7a4c:	00008474 	movhi	zero,529
    7a50:	00008474 	movhi	zero,529
    7a54:	00008214 	movui	zero,520
    7a58:	db002917 	ldw	r12,164(sp)
    7a5c:	8323c83a 	sub	r17,r16,r12
    7a60:	003f7e06 	br	785c <__alt_mem_Flash_flash_data+0xf400785c>
    7a64:	d9002f17 	ldw	r4,188(sp)
    7a68:	b80b883a 	mov	r5,r23
    7a6c:	b00d883a 	mov	r6,r22
    7a70:	000cb440 	call	cb44 <__ssprint_r>
    7a74:	1000081e 	bne	r2,zero,7a98 <___svfprintf_internal_r+0x320>
    7a78:	da000404 	addi	r8,sp,16
    7a7c:	003f8406 	br	7890 <__alt_mem_Flash_flash_data+0xf4007890>
    7a80:	d8802017 	ldw	r2,128(sp)
    7a84:	10000426 	beq	r2,zero,7a98 <___svfprintf_internal_r+0x320>
    7a88:	d9002f17 	ldw	r4,188(sp)
    7a8c:	b80b883a 	mov	r5,r23
    7a90:	d9801e04 	addi	r6,sp,120
    7a94:	000cb440 	call	cb44 <__ssprint_r>
    7a98:	b880030b 	ldhu	r2,12(r23)
    7a9c:	1080100c 	andi	r2,r2,64
    7aa0:	10000d1e 	bne	r2,zero,7ad8 <___svfprintf_internal_r+0x360>
    7aa4:	d8803017 	ldw	r2,192(sp)
    7aa8:	dfc04a17 	ldw	ra,296(sp)
    7aac:	df004917 	ldw	fp,292(sp)
    7ab0:	ddc04817 	ldw	r23,288(sp)
    7ab4:	dd804717 	ldw	r22,284(sp)
    7ab8:	dd404617 	ldw	r21,280(sp)
    7abc:	dd004517 	ldw	r20,276(sp)
    7ac0:	dcc04417 	ldw	r19,272(sp)
    7ac4:	dc804317 	ldw	r18,268(sp)
    7ac8:	dc404217 	ldw	r17,264(sp)
    7acc:	dc004117 	ldw	r16,260(sp)
    7ad0:	dec04b04 	addi	sp,sp,300
    7ad4:	f800283a 	ret
    7ad8:	00bfffc4 	movi	r2,-1
    7adc:	003ff206 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7ae0:	dc002917 	ldw	r16,164(sp)
    7ae4:	003f6d06 	br	789c <__alt_mem_Flash_flash_data+0xf400789c>
    7ae8:	1805883a 	mov	r2,r3
    7aec:	8c400114 	ori	r17,r17,4
    7af0:	1c000007 	ldb	r16,0(r3)
    7af4:	003f7606 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    7af8:	1c000007 	ldb	r16,0(r3)
    7afc:	18800044 	addi	r2,r3,1
    7b00:	8286e726 	beq	r16,r10,96a0 <___svfprintf_internal_r+0x1f28>
    7b04:	82fff404 	addi	r11,r16,-48
    7b08:	1007883a 	mov	r3,r2
    7b0c:	0013883a 	mov	r9,zero
    7b10:	2aff7036 	bltu	r5,r11,78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7b14:	1c000007 	ldb	r16,0(r3)
    7b18:	4a4002a4 	muli	r9,r9,10
    7b1c:	18c00044 	addi	r3,r3,1
    7b20:	5a53883a 	add	r9,r11,r9
    7b24:	82fff404 	addi	r11,r16,-48
    7b28:	2afffa2e 	bgeu	r5,r11,7b14 <__alt_mem_Flash_flash_data+0xf4007b14>
    7b2c:	483f690e 	bge	r9,zero,78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7b30:	027fffc4 	movi	r9,-1
    7b34:	003f6706 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7b38:	8c402014 	ori	r17,r17,128
    7b3c:	1805883a 	mov	r2,r3
    7b40:	1c000007 	ldb	r16,0(r3)
    7b44:	003f6206 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    7b48:	8c400414 	ori	r17,r17,16
    7b4c:	d8c02915 	stw	r3,164(sp)
    7b50:	d9802785 	stb	r6,158(sp)
    7b54:	8880080c 	andi	r2,r17,32
    7b58:	d8c02d17 	ldw	r3,180(sp)
    7b5c:	10021526 	beq	r2,zero,83b4 <___svfprintf_internal_r+0xc3c>
    7b60:	db002d17 	ldw	r12,180(sp)
    7b64:	18800117 	ldw	r2,4(r3)
    7b68:	1cc00017 	ldw	r19,0(r3)
    7b6c:	63000204 	addi	r12,r12,8
    7b70:	db002d15 	stw	r12,180(sp)
    7b74:	1039883a 	mov	fp,r2
    7b78:	10021916 	blt	r2,zero,83e0 <___svfprintf_internal_r+0xc68>
    7b7c:	dd402783 	ldbu	r21,158(sp)
    7b80:	da403215 	stw	r9,200(sp)
    7b84:	00800044 	movi	r2,1
    7b88:	9f06b03a 	or	r3,r19,fp
    7b8c:	48000216 	blt	r9,zero,7b98 <___svfprintf_internal_r+0x420>
    7b90:	013fdfc4 	movi	r4,-129
    7b94:	8922703a 	and	r17,r17,r4
    7b98:	1802461e 	bne	r3,zero,84b4 <___svfprintf_internal_r+0xd3c>
    7b9c:	48035426 	beq	r9,zero,88f0 <___svfprintf_internal_r+0x1178>
    7ba0:	10803fcc 	andi	r2,r2,255
    7ba4:	00c00044 	movi	r3,1
    7ba8:	10c26726 	beq	r2,r3,8548 <___svfprintf_internal_r+0xdd0>
    7bac:	00c00084 	movi	r3,2
    7bb0:	10c2ea26 	beq	r2,r3,875c <___svfprintf_internal_r+0xfe4>
    7bb4:	b007883a 	mov	r3,r22
    7bb8:	9808d0fa 	srli	r4,r19,3
    7bbc:	e00a977a 	slli	r5,fp,29
    7bc0:	e038d0fa 	srli	fp,fp,3
    7bc4:	9cc001cc 	andi	r19,r19,7
    7bc8:	98800c04 	addi	r2,r19,48
    7bcc:	18ffffc4 	addi	r3,r3,-1
    7bd0:	2926b03a 	or	r19,r5,r4
    7bd4:	18800005 	stb	r2,0(r3)
    7bd8:	9f08b03a 	or	r4,r19,fp
    7bdc:	203ff61e 	bne	r4,zero,7bb8 <__alt_mem_Flash_flash_data+0xf4007bb8>
    7be0:	8900004c 	andi	r4,r17,1
    7be4:	d8c03115 	stw	r3,196(sp)
    7be8:	2002ea26 	beq	r4,zero,8794 <___svfprintf_internal_r+0x101c>
    7bec:	10803fcc 	andi	r2,r2,255
    7bf0:	1080201c 	xori	r2,r2,128
    7bf4:	10bfe004 	addi	r2,r2,-128
    7bf8:	01000c04 	movi	r4,48
    7bfc:	11057526 	beq	r2,r4,91d4 <___svfprintf_internal_r+0x1a5c>
    7c00:	dac03117 	ldw	r11,196(sp)
    7c04:	193fffc5 	stb	r4,-1(r3)
    7c08:	5affffc4 	addi	r11,r11,-1
    7c0c:	dac03115 	stw	r11,196(sp)
    7c10:	b2e5c83a 	sub	r18,r22,r11
    7c14:	9005883a 	mov	r2,r18
    7c18:	9240010e 	bge	r18,r9,7c20 <___svfprintf_internal_r+0x4a8>
    7c1c:	4805883a 	mov	r2,r9
    7c20:	d8802a15 	stw	r2,168(sp)
    7c24:	d8003415 	stw	zero,208(sp)
    7c28:	a8803fcc 	andi	r2,r21,255
    7c2c:	1080201c 	xori	r2,r2,128
    7c30:	10bfe004 	addi	r2,r2,-128
    7c34:	10000326 	beq	r2,zero,7c44 <___svfprintf_internal_r+0x4cc>
    7c38:	d8c02a17 	ldw	r3,168(sp)
    7c3c:	18c00044 	addi	r3,r3,1
    7c40:	d8c02a15 	stw	r3,168(sp)
    7c44:	8ac0008c 	andi	r11,r17,2
    7c48:	dac02b15 	stw	r11,172(sp)
    7c4c:	58000326 	beq	r11,zero,7c5c <___svfprintf_internal_r+0x4e4>
    7c50:	db002a17 	ldw	r12,168(sp)
    7c54:	63000084 	addi	r12,r12,2
    7c58:	db002a15 	stw	r12,168(sp)
    7c5c:	88c0210c 	andi	r3,r17,132
    7c60:	d8c02c15 	stw	r3,176(sp)
    7c64:	1802111e 	bne	r3,zero,84ac <___svfprintf_internal_r+0xd34>
    7c68:	dac02e17 	ldw	r11,184(sp)
    7c6c:	db002a17 	ldw	r12,168(sp)
    7c70:	5b39c83a 	sub	fp,r11,r12
    7c74:	07020d0e 	bge	zero,fp,84ac <___svfprintf_internal_r+0xd34>
    7c78:	02400404 	movi	r9,16
    7c7c:	d8c02017 	ldw	r3,128(sp)
    7c80:	d8801f17 	ldw	r2,124(sp)
    7c84:	4f058c0e 	bge	r9,fp,92b8 <___svfprintf_internal_r+0x1b40>
    7c88:	014000b4 	movhi	r5,2
    7c8c:	e009883a 	mov	r4,fp
    7c90:	296ef484 	addi	r5,r5,-17454
    7c94:	dc003c15 	stw	r16,240(sp)
    7c98:	9039883a 	mov	fp,r18
    7c9c:	d9403615 	stw	r5,216(sp)
    7ca0:	8825883a 	mov	r18,r17
    7ca4:	482b883a 	mov	r21,r9
    7ca8:	04c001c4 	movi	r19,7
    7cac:	dc002f17 	ldw	r16,188(sp)
    7cb0:	2023883a 	mov	r17,r4
    7cb4:	00000306 	br	7cc4 <___svfprintf_internal_r+0x54c>
    7cb8:	8c7ffc04 	addi	r17,r17,-16
    7cbc:	42000204 	addi	r8,r8,8
    7cc0:	ac40130e 	bge	r21,r17,7d10 <___svfprintf_internal_r+0x598>
    7cc4:	02c000b4 	movhi	r11,2
    7cc8:	18c00404 	addi	r3,r3,16
    7ccc:	10800044 	addi	r2,r2,1
    7cd0:	5aeef484 	addi	r11,r11,-17454
    7cd4:	42c00015 	stw	r11,0(r8)
    7cd8:	45400115 	stw	r21,4(r8)
    7cdc:	d8c02015 	stw	r3,128(sp)
    7ce0:	d8801f15 	stw	r2,124(sp)
    7ce4:	98bff40e 	bge	r19,r2,7cb8 <__alt_mem_Flash_flash_data+0xf4007cb8>
    7ce8:	8009883a 	mov	r4,r16
    7cec:	b80b883a 	mov	r5,r23
    7cf0:	b00d883a 	mov	r6,r22
    7cf4:	000cb440 	call	cb44 <__ssprint_r>
    7cf8:	103f671e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    7cfc:	8c7ffc04 	addi	r17,r17,-16
    7d00:	d8c02017 	ldw	r3,128(sp)
    7d04:	d8801f17 	ldw	r2,124(sp)
    7d08:	da000404 	addi	r8,sp,16
    7d0c:	ac7fed16 	blt	r21,r17,7cc4 <__alt_mem_Flash_flash_data+0xf4007cc4>
    7d10:	dc003c17 	ldw	r16,240(sp)
    7d14:	8809883a 	mov	r4,r17
    7d18:	9023883a 	mov	r17,r18
    7d1c:	e025883a 	mov	r18,fp
    7d20:	2039883a 	mov	fp,r4
    7d24:	db003617 	ldw	r12,216(sp)
    7d28:	e0c7883a 	add	r3,fp,r3
    7d2c:	10800044 	addi	r2,r2,1
    7d30:	43000015 	stw	r12,0(r8)
    7d34:	47000115 	stw	fp,4(r8)
    7d38:	d8c02015 	stw	r3,128(sp)
    7d3c:	d8801f15 	stw	r2,124(sp)
    7d40:	010001c4 	movi	r4,7
    7d44:	20834416 	blt	r4,r2,8a58 <___svfprintf_internal_r+0x12e0>
    7d48:	d8802787 	ldb	r2,158(sp)
    7d4c:	42000204 	addi	r8,r8,8
    7d50:	10000c26 	beq	r2,zero,7d84 <___svfprintf_internal_r+0x60c>
    7d54:	d8801f17 	ldw	r2,124(sp)
    7d58:	d9002784 	addi	r4,sp,158
    7d5c:	18c00044 	addi	r3,r3,1
    7d60:	10800044 	addi	r2,r2,1
    7d64:	41000015 	stw	r4,0(r8)
    7d68:	01000044 	movi	r4,1
    7d6c:	41000115 	stw	r4,4(r8)
    7d70:	d8c02015 	stw	r3,128(sp)
    7d74:	d8801f15 	stw	r2,124(sp)
    7d78:	010001c4 	movi	r4,7
    7d7c:	2082f616 	blt	r4,r2,8958 <___svfprintf_internal_r+0x11e0>
    7d80:	42000204 	addi	r8,r8,8
    7d84:	dac02b17 	ldw	r11,172(sp)
    7d88:	58000c26 	beq	r11,zero,7dbc <___svfprintf_internal_r+0x644>
    7d8c:	d8801f17 	ldw	r2,124(sp)
    7d90:	d9002704 	addi	r4,sp,156
    7d94:	18c00084 	addi	r3,r3,2
    7d98:	10800044 	addi	r2,r2,1
    7d9c:	41000015 	stw	r4,0(r8)
    7da0:	01000084 	movi	r4,2
    7da4:	41000115 	stw	r4,4(r8)
    7da8:	d8c02015 	stw	r3,128(sp)
    7dac:	d8801f15 	stw	r2,124(sp)
    7db0:	010001c4 	movi	r4,7
    7db4:	2082e016 	blt	r4,r2,8938 <___svfprintf_internal_r+0x11c0>
    7db8:	42000204 	addi	r8,r8,8
    7dbc:	db002c17 	ldw	r12,176(sp)
    7dc0:	00802004 	movi	r2,128
    7dc4:	60822f26 	beq	r12,r2,8684 <___svfprintf_internal_r+0xf0c>
    7dc8:	db003217 	ldw	r12,200(sp)
    7dcc:	64abc83a 	sub	r21,r12,r18
    7dd0:	0540310e 	bge	zero,r21,7e98 <___svfprintf_internal_r+0x720>
    7dd4:	07000404 	movi	fp,16
    7dd8:	d8801f17 	ldw	r2,124(sp)
    7ddc:	e544270e 	bge	fp,r21,8e7c <___svfprintf_internal_r+0x1704>
    7de0:	014000b4 	movhi	r5,2
    7de4:	a809883a 	mov	r4,r21
    7de8:	296ef084 	addi	r5,r5,-17470
    7dec:	dc002c15 	stw	r16,176(sp)
    7df0:	902b883a 	mov	r21,r18
    7df4:	d9402b15 	stw	r5,172(sp)
    7df8:	8825883a 	mov	r18,r17
    7dfc:	04c001c4 	movi	r19,7
    7e00:	dc002f17 	ldw	r16,188(sp)
    7e04:	2023883a 	mov	r17,r4
    7e08:	00000306 	br	7e18 <___svfprintf_internal_r+0x6a0>
    7e0c:	8c7ffc04 	addi	r17,r17,-16
    7e10:	42000204 	addi	r8,r8,8
    7e14:	e440110e 	bge	fp,r17,7e5c <___svfprintf_internal_r+0x6e4>
    7e18:	18c00404 	addi	r3,r3,16
    7e1c:	10800044 	addi	r2,r2,1
    7e20:	45000015 	stw	r20,0(r8)
    7e24:	47000115 	stw	fp,4(r8)
    7e28:	d8c02015 	stw	r3,128(sp)
    7e2c:	d8801f15 	stw	r2,124(sp)
    7e30:	98bff60e 	bge	r19,r2,7e0c <__alt_mem_Flash_flash_data+0xf4007e0c>
    7e34:	8009883a 	mov	r4,r16
    7e38:	b80b883a 	mov	r5,r23
    7e3c:	b00d883a 	mov	r6,r22
    7e40:	000cb440 	call	cb44 <__ssprint_r>
    7e44:	103f141e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    7e48:	8c7ffc04 	addi	r17,r17,-16
    7e4c:	d8c02017 	ldw	r3,128(sp)
    7e50:	d8801f17 	ldw	r2,124(sp)
    7e54:	da000404 	addi	r8,sp,16
    7e58:	e47fef16 	blt	fp,r17,7e18 <__alt_mem_Flash_flash_data+0xf4007e18>
    7e5c:	dc002c17 	ldw	r16,176(sp)
    7e60:	8809883a 	mov	r4,r17
    7e64:	9023883a 	mov	r17,r18
    7e68:	a825883a 	mov	r18,r21
    7e6c:	202b883a 	mov	r21,r4
    7e70:	dac02b17 	ldw	r11,172(sp)
    7e74:	1d47883a 	add	r3,r3,r21
    7e78:	10800044 	addi	r2,r2,1
    7e7c:	42c00015 	stw	r11,0(r8)
    7e80:	45400115 	stw	r21,4(r8)
    7e84:	d8c02015 	stw	r3,128(sp)
    7e88:	d8801f15 	stw	r2,124(sp)
    7e8c:	010001c4 	movi	r4,7
    7e90:	2082a116 	blt	r4,r2,8918 <___svfprintf_internal_r+0x11a0>
    7e94:	42000204 	addi	r8,r8,8
    7e98:	8880400c 	andi	r2,r17,256
    7e9c:	1001b01e 	bne	r2,zero,8560 <___svfprintf_internal_r+0xde8>
    7ea0:	d8801f17 	ldw	r2,124(sp)
    7ea4:	db003117 	ldw	r12,196(sp)
    7ea8:	1c87883a 	add	r3,r3,r18
    7eac:	10800044 	addi	r2,r2,1
    7eb0:	43000015 	stw	r12,0(r8)
    7eb4:	44800115 	stw	r18,4(r8)
    7eb8:	d8c02015 	stw	r3,128(sp)
    7ebc:	d8801f15 	stw	r2,124(sp)
    7ec0:	010001c4 	movi	r4,7
    7ec4:	20828216 	blt	r4,r2,88d0 <___svfprintf_internal_r+0x1158>
    7ec8:	42000204 	addi	r8,r8,8
    7ecc:	8c40010c 	andi	r17,r17,4
    7ed0:	88003226 	beq	r17,zero,7f9c <___svfprintf_internal_r+0x824>
    7ed4:	db002e17 	ldw	r12,184(sp)
    7ed8:	dac02a17 	ldw	r11,168(sp)
    7edc:	62e1c83a 	sub	r16,r12,r11
    7ee0:	04002e0e 	bge	zero,r16,7f9c <___svfprintf_internal_r+0x824>
    7ee4:	04400404 	movi	r17,16
    7ee8:	d8801f17 	ldw	r2,124(sp)
    7eec:	8c05330e 	bge	r17,r16,93bc <___svfprintf_internal_r+0x1c44>
    7ef0:	010000b4 	movhi	r4,2
    7ef4:	212ef484 	addi	r4,r4,-17454
    7ef8:	d9003615 	stw	r4,216(sp)
    7efc:	048001c4 	movi	r18,7
    7f00:	dcc02f17 	ldw	r19,188(sp)
    7f04:	00000306 	br	7f14 <___svfprintf_internal_r+0x79c>
    7f08:	843ffc04 	addi	r16,r16,-16
    7f0c:	42000204 	addi	r8,r8,8
    7f10:	8c00130e 	bge	r17,r16,7f60 <___svfprintf_internal_r+0x7e8>
    7f14:	014000b4 	movhi	r5,2
    7f18:	18c00404 	addi	r3,r3,16
    7f1c:	10800044 	addi	r2,r2,1
    7f20:	296ef484 	addi	r5,r5,-17454
    7f24:	41400015 	stw	r5,0(r8)
    7f28:	44400115 	stw	r17,4(r8)
    7f2c:	d8c02015 	stw	r3,128(sp)
    7f30:	d8801f15 	stw	r2,124(sp)
    7f34:	90bff40e 	bge	r18,r2,7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    7f38:	9809883a 	mov	r4,r19
    7f3c:	b80b883a 	mov	r5,r23
    7f40:	b00d883a 	mov	r6,r22
    7f44:	000cb440 	call	cb44 <__ssprint_r>
    7f48:	103ed31e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    7f4c:	843ffc04 	addi	r16,r16,-16
    7f50:	d8c02017 	ldw	r3,128(sp)
    7f54:	d8801f17 	ldw	r2,124(sp)
    7f58:	da000404 	addi	r8,sp,16
    7f5c:	8c3fed16 	blt	r17,r16,7f14 <__alt_mem_Flash_flash_data+0xf4007f14>
    7f60:	dac03617 	ldw	r11,216(sp)
    7f64:	1c07883a 	add	r3,r3,r16
    7f68:	10800044 	addi	r2,r2,1
    7f6c:	42c00015 	stw	r11,0(r8)
    7f70:	44000115 	stw	r16,4(r8)
    7f74:	d8c02015 	stw	r3,128(sp)
    7f78:	d8801f15 	stw	r2,124(sp)
    7f7c:	010001c4 	movi	r4,7
    7f80:	2080060e 	bge	r4,r2,7f9c <___svfprintf_internal_r+0x824>
    7f84:	d9002f17 	ldw	r4,188(sp)
    7f88:	b80b883a 	mov	r5,r23
    7f8c:	b00d883a 	mov	r6,r22
    7f90:	000cb440 	call	cb44 <__ssprint_r>
    7f94:	103ec01e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    7f98:	d8c02017 	ldw	r3,128(sp)
    7f9c:	d8802a17 	ldw	r2,168(sp)
    7fa0:	db002e17 	ldw	r12,184(sp)
    7fa4:	1300010e 	bge	r2,r12,7fac <___svfprintf_internal_r+0x834>
    7fa8:	6005883a 	mov	r2,r12
    7fac:	dac03017 	ldw	r11,192(sp)
    7fb0:	5897883a 	add	r11,r11,r2
    7fb4:	dac03015 	stw	r11,192(sp)
    7fb8:	1802331e 	bne	r3,zero,8888 <___svfprintf_internal_r+0x1110>
    7fbc:	d8001f15 	stw	zero,124(sp)
    7fc0:	da000404 	addi	r8,sp,16
    7fc4:	003e1806 	br	7828 <__alt_mem_Flash_flash_data+0xf4007828>
    7fc8:	db002d17 	ldw	r12,180(sp)
    7fcc:	dac02d17 	ldw	r11,180(sp)
    7fd0:	d8c02915 	stw	r3,164(sp)
    7fd4:	63000017 	ldw	r12,0(r12)
    7fd8:	5ac00117 	ldw	r11,4(r11)
    7fdc:	d9802785 	stb	r6,158(sp)
    7fe0:	6009883a 	mov	r4,r12
    7fe4:	580b883a 	mov	r5,r11
    7fe8:	db003715 	stw	r12,220(sp)
    7fec:	da004015 	stw	r8,256(sp)
    7ff0:	da403f15 	stw	r9,252(sp)
    7ff4:	dac03815 	stw	r11,224(sp)
    7ff8:	000c9400 	call	c940 <__fpclassifyd>
    7ffc:	db002d17 	ldw	r12,180(sp)
    8000:	04800044 	movi	r18,1
    8004:	da004017 	ldw	r8,256(sp)
    8008:	64c00204 	addi	r19,r12,8
    800c:	da403f17 	ldw	r9,252(sp)
    8010:	d9003717 	ldw	r4,220(sp)
    8014:	d9403817 	ldw	r5,224(sp)
    8018:	1483561e 	bne	r2,r18,8d74 <___svfprintf_internal_r+0x15fc>
    801c:	000d883a 	mov	r6,zero
    8020:	000f883a 	mov	r7,zero
    8024:	00061dc0 	call	61dc <__ledf2>
    8028:	da004017 	ldw	r8,256(sp)
    802c:	1004ee16 	blt	r2,zero,93e8 <___svfprintf_internal_r+0x1c70>
    8030:	dd402783 	ldbu	r21,158(sp)
    8034:	008011c4 	movi	r2,71
    8038:	1404440e 	bge	r2,r16,914c <___svfprintf_internal_r+0x19d4>
    803c:	00c000b4 	movhi	r3,2
    8040:	18eee104 	addi	r3,r3,-17532
    8044:	d8c03115 	stw	r3,196(sp)
    8048:	02c000c4 	movi	r11,3
    804c:	00bfdfc4 	movi	r2,-129
    8050:	dac02a15 	stw	r11,168(sp)
    8054:	88a2703a 	and	r17,r17,r2
    8058:	dcc02d15 	stw	r19,180(sp)
    805c:	5825883a 	mov	r18,r11
    8060:	d8003215 	stw	zero,200(sp)
    8064:	d8003415 	stw	zero,208(sp)
    8068:	003eef06 	br	7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    806c:	8c400214 	ori	r17,r17,8
    8070:	1805883a 	mov	r2,r3
    8074:	1c000007 	ldb	r16,0(r3)
    8078:	003e1506 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    807c:	8c400414 	ori	r17,r17,16
    8080:	d8c02915 	stw	r3,164(sp)
    8084:	88c0080c 	andi	r3,r17,32
    8088:	d8802d17 	ldw	r2,180(sp)
    808c:	18005526 	beq	r3,zero,81e4 <___svfprintf_internal_r+0xa6c>
    8090:	dac02d17 	ldw	r11,180(sp)
    8094:	14c00017 	ldw	r19,0(r2)
    8098:	17000117 	ldw	fp,4(r2)
    809c:	5ac00204 	addi	r11,r11,8
    80a0:	dac02d15 	stw	r11,180(sp)
    80a4:	00800044 	movi	r2,1
    80a8:	9f06b03a 	or	r3,r19,fp
    80ac:	d8002785 	stb	zero,158(sp)
    80b0:	da403215 	stw	r9,200(sp)
    80b4:	002b883a 	mov	r21,zero
    80b8:	003eb406 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    80bc:	030000b4 	movhi	r12,2
    80c0:	632ee404 	addi	r12,r12,-17520
    80c4:	d8c02915 	stw	r3,164(sp)
    80c8:	d9802785 	stb	r6,158(sp)
    80cc:	db003b15 	stw	r12,236(sp)
    80d0:	88c0080c 	andi	r3,r17,32
    80d4:	d8802d17 	ldw	r2,180(sp)
    80d8:	18005626 	beq	r3,zero,8234 <___svfprintf_internal_r+0xabc>
    80dc:	dac02d17 	ldw	r11,180(sp)
    80e0:	14c00017 	ldw	r19,0(r2)
    80e4:	17000117 	ldw	fp,4(r2)
    80e8:	5ac00204 	addi	r11,r11,8
    80ec:	dac02d15 	stw	r11,180(sp)
    80f0:	8880004c 	andi	r2,r17,1
    80f4:	10029326 	beq	r2,zero,8b44 <___svfprintf_internal_r+0x13cc>
    80f8:	9f06b03a 	or	r3,r19,fp
    80fc:	18033526 	beq	r3,zero,8dd4 <___svfprintf_internal_r+0x165c>
    8100:	00800c04 	movi	r2,48
    8104:	d8802705 	stb	r2,156(sp)
    8108:	dc002745 	stb	r16,157(sp)
    810c:	8c400094 	ori	r17,r17,2
    8110:	00800084 	movi	r2,2
    8114:	003fe506 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8118:	1805883a 	mov	r2,r3
    811c:	d8002e15 	stw	zero,184(sp)
    8120:	82fff404 	addi	r11,r16,-48
    8124:	0019883a 	mov	r12,zero
    8128:	14000007 	ldb	r16,0(r2)
    812c:	630002a4 	muli	r12,r12,10
    8130:	18c00044 	addi	r3,r3,1
    8134:	1805883a 	mov	r2,r3
    8138:	62d9883a 	add	r12,r12,r11
    813c:	82fff404 	addi	r11,r16,-48
    8140:	2afff92e 	bgeu	r5,r11,8128 <__alt_mem_Flash_flash_data+0xf4008128>
    8144:	db002e15 	stw	r12,184(sp)
    8148:	003de206 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    814c:	8c400814 	ori	r17,r17,32
    8150:	1805883a 	mov	r2,r3
    8154:	1c000007 	ldb	r16,0(r3)
    8158:	003ddd06 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    815c:	dac02d17 	ldw	r11,180(sp)
    8160:	db002d17 	ldw	r12,180(sp)
    8164:	d8c02915 	stw	r3,164(sp)
    8168:	5ac00017 	ldw	r11,0(r11)
    816c:	d8002785 	stb	zero,158(sp)
    8170:	64c00104 	addi	r19,r12,4
    8174:	dac03115 	stw	r11,196(sp)
    8178:	58048126 	beq	r11,zero,9380 <___svfprintf_internal_r+0x1c08>
    817c:	d9003117 	ldw	r4,196(sp)
    8180:	48041716 	blt	r9,zero,91e0 <___svfprintf_internal_r+0x1a68>
    8184:	480d883a 	mov	r6,r9
    8188:	000b883a 	mov	r5,zero
    818c:	da004015 	stw	r8,256(sp)
    8190:	da403f15 	stw	r9,252(sp)
    8194:	000b8b80 	call	b8b8 <memchr>
    8198:	da004017 	ldw	r8,256(sp)
    819c:	da403f17 	ldw	r9,252(sp)
    81a0:	1004db26 	beq	r2,zero,9510 <___svfprintf_internal_r+0x1d98>
    81a4:	d8c03117 	ldw	r3,196(sp)
    81a8:	10e5c83a 	sub	r18,r2,r3
    81ac:	4c80010e 	bge	r9,r18,81b4 <___svfprintf_internal_r+0xa3c>
    81b0:	4825883a 	mov	r18,r9
    81b4:	9005883a 	mov	r2,r18
    81b8:	90040e16 	blt	r18,zero,91f4 <___svfprintf_internal_r+0x1a7c>
    81bc:	dd402783 	ldbu	r21,158(sp)
    81c0:	d8802a15 	stw	r2,168(sp)
    81c4:	dcc02d15 	stw	r19,180(sp)
    81c8:	d8003215 	stw	zero,200(sp)
    81cc:	d8003415 	stw	zero,208(sp)
    81d0:	003e9506 	br	7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    81d4:	d8c02915 	stw	r3,164(sp)
    81d8:	88c0080c 	andi	r3,r17,32
    81dc:	d8802d17 	ldw	r2,180(sp)
    81e0:	183fab1e 	bne	r3,zero,8090 <__alt_mem_Flash_flash_data+0xf4008090>
    81e4:	88c0040c 	andi	r3,r17,16
    81e8:	1802681e 	bne	r3,zero,8b8c <___svfprintf_internal_r+0x1414>
    81ec:	88c0100c 	andi	r3,r17,64
    81f0:	18026626 	beq	r3,zero,8b8c <___svfprintf_internal_r+0x1414>
    81f4:	dac02d17 	ldw	r11,180(sp)
    81f8:	14c0000b 	ldhu	r19,0(r2)
    81fc:	0039883a 	mov	fp,zero
    8200:	5ac00104 	addi	r11,r11,4
    8204:	dac02d15 	stw	r11,180(sp)
    8208:	00800044 	movi	r2,1
    820c:	9807883a 	mov	r3,r19
    8210:	003fa606 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8214:	008000b4 	movhi	r2,2
    8218:	10aee904 	addi	r2,r2,-17500
    821c:	d8c02915 	stw	r3,164(sp)
    8220:	d8803b15 	stw	r2,236(sp)
    8224:	d9802785 	stb	r6,158(sp)
    8228:	88c0080c 	andi	r3,r17,32
    822c:	d8802d17 	ldw	r2,180(sp)
    8230:	183faa1e 	bne	r3,zero,80dc <__alt_mem_Flash_flash_data+0xf40080dc>
    8234:	88c0040c 	andi	r3,r17,16
    8238:	1802e826 	beq	r3,zero,8ddc <___svfprintf_internal_r+0x1664>
    823c:	db002d17 	ldw	r12,180(sp)
    8240:	14c00017 	ldw	r19,0(r2)
    8244:	0039883a 	mov	fp,zero
    8248:	63000104 	addi	r12,r12,4
    824c:	db002d15 	stw	r12,180(sp)
    8250:	003fa706 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    8254:	30803fcc 	andi	r2,r6,255
    8258:	1080201c 	xori	r2,r2,128
    825c:	10bfe004 	addi	r2,r2,-128
    8260:	1002d91e 	bne	r2,zero,8dc8 <___svfprintf_internal_r+0x1650>
    8264:	1805883a 	mov	r2,r3
    8268:	01800804 	movi	r6,32
    826c:	1c000007 	ldb	r16,0(r3)
    8270:	003d9706 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    8274:	8c400054 	ori	r17,r17,1
    8278:	1805883a 	mov	r2,r3
    827c:	1c000007 	ldb	r16,0(r3)
    8280:	003d9306 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    8284:	dac02d17 	ldw	r11,180(sp)
    8288:	db002d17 	ldw	r12,180(sp)
    828c:	5ac00017 	ldw	r11,0(r11)
    8290:	dac02e15 	stw	r11,184(sp)
    8294:	62c00104 	addi	r11,r12,4
    8298:	db002e17 	ldw	r12,184(sp)
    829c:	60033e16 	blt	r12,zero,8f98 <___svfprintf_internal_r+0x1820>
    82a0:	dac02d15 	stw	r11,180(sp)
    82a4:	1805883a 	mov	r2,r3
    82a8:	1c000007 	ldb	r16,0(r3)
    82ac:	003d8806 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    82b0:	1805883a 	mov	r2,r3
    82b4:	01800ac4 	movi	r6,43
    82b8:	1c000007 	ldb	r16,0(r3)
    82bc:	003d8406 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    82c0:	8c401014 	ori	r17,r17,64
    82c4:	1805883a 	mov	r2,r3
    82c8:	1c000007 	ldb	r16,0(r3)
    82cc:	003d8006 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    82d0:	1c000007 	ldb	r16,0(r3)
    82d4:	81c33626 	beq	r16,r7,8fb0 <___svfprintf_internal_r+0x1838>
    82d8:	8c400414 	ori	r17,r17,16
    82dc:	1805883a 	mov	r2,r3
    82e0:	003d7b06 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    82e4:	d8c02915 	stw	r3,164(sp)
    82e8:	d9802785 	stb	r6,158(sp)
    82ec:	8880080c 	andi	r2,r17,32
    82f0:	1002c226 	beq	r2,zero,8dfc <___svfprintf_internal_r+0x1684>
    82f4:	db002d17 	ldw	r12,180(sp)
    82f8:	dac03017 	ldw	r11,192(sp)
    82fc:	60800017 	ldw	r2,0(r12)
    8300:	5807d7fa 	srai	r3,r11,31
    8304:	63000104 	addi	r12,r12,4
    8308:	db002d15 	stw	r12,180(sp)
    830c:	12c00015 	stw	r11,0(r2)
    8310:	10c00115 	stw	r3,4(r2)
    8314:	003d4406 	br	7828 <__alt_mem_Flash_flash_data+0xf4007828>
    8318:	db002d17 	ldw	r12,180(sp)
    831c:	00800c04 	movi	r2,48
    8320:	d8802705 	stb	r2,156(sp)
    8324:	64c00017 	ldw	r19,0(r12)
    8328:	00801e04 	movi	r2,120
    832c:	d8802745 	stb	r2,157(sp)
    8330:	008000b4 	movhi	r2,2
    8334:	10aee904 	addi	r2,r2,-17500
    8338:	63000104 	addi	r12,r12,4
    833c:	d8c02915 	stw	r3,164(sp)
    8340:	d8803b15 	stw	r2,236(sp)
    8344:	0039883a 	mov	fp,zero
    8348:	8c400094 	ori	r17,r17,2
    834c:	db002d15 	stw	r12,180(sp)
    8350:	00800084 	movi	r2,2
    8354:	04001e04 	movi	r16,120
    8358:	9807883a 	mov	r3,r19
    835c:	003f5306 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8360:	db002d17 	ldw	r12,180(sp)
    8364:	d8c02915 	stw	r3,164(sp)
    8368:	dac01404 	addi	r11,sp,80
    836c:	60800017 	ldw	r2,0(r12)
    8370:	00c00044 	movi	r3,1
    8374:	63000104 	addi	r12,r12,4
    8378:	d8801405 	stb	r2,80(sp)
    837c:	d8c02a15 	stw	r3,168(sp)
    8380:	d8002785 	stb	zero,158(sp)
    8384:	db002d15 	stw	r12,180(sp)
    8388:	1825883a 	mov	r18,r3
    838c:	d8003215 	stw	zero,200(sp)
    8390:	d8003415 	stw	zero,208(sp)
    8394:	dac03115 	stw	r11,196(sp)
    8398:	0005883a 	mov	r2,zero
    839c:	003e2906 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>
    83a0:	d8c02915 	stw	r3,164(sp)
    83a4:	d9802785 	stb	r6,158(sp)
    83a8:	8880080c 	andi	r2,r17,32
    83ac:	d8c02d17 	ldw	r3,180(sp)
    83b0:	103deb1e 	bne	r2,zero,7b60 <__alt_mem_Flash_flash_data+0xf4007b60>
    83b4:	8880040c 	andi	r2,r17,16
    83b8:	1001e51e 	bne	r2,zero,8b50 <___svfprintf_internal_r+0x13d8>
    83bc:	8880100c 	andi	r2,r17,64
    83c0:	1001e326 	beq	r2,zero,8b50 <___svfprintf_internal_r+0x13d8>
    83c4:	1cc0000f 	ldh	r19,0(r3)
    83c8:	db002d17 	ldw	r12,180(sp)
    83cc:	9839d7fa 	srai	fp,r19,31
    83d0:	63000104 	addi	r12,r12,4
    83d4:	db002d15 	stw	r12,180(sp)
    83d8:	e005883a 	mov	r2,fp
    83dc:	103de70e 	bge	r2,zero,7b7c <__alt_mem_Flash_flash_data+0xf4007b7c>
    83e0:	04e7c83a 	sub	r19,zero,r19
    83e4:	9804c03a 	cmpne	r2,r19,zero
    83e8:	0739c83a 	sub	fp,zero,fp
    83ec:	e0b9c83a 	sub	fp,fp,r2
    83f0:	05400b44 	movi	r21,45
    83f4:	dd402785 	stb	r21,158(sp)
    83f8:	da403215 	stw	r9,200(sp)
    83fc:	00800044 	movi	r2,1
    8400:	9f06b03a 	or	r3,r19,fp
    8404:	003de106 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    8408:	8c400414 	ori	r17,r17,16
    840c:	d8c02915 	stw	r3,164(sp)
    8410:	8880080c 	andi	r2,r17,32
    8414:	10000b26 	beq	r2,zero,8444 <___svfprintf_internal_r+0xccc>
    8418:	db002d17 	ldw	r12,180(sp)
    841c:	0005883a 	mov	r2,zero
    8420:	64c00017 	ldw	r19,0(r12)
    8424:	67000117 	ldw	fp,4(r12)
    8428:	63000204 	addi	r12,r12,8
    842c:	db002d15 	stw	r12,180(sp)
    8430:	9f06b03a 	or	r3,r19,fp
    8434:	003f1d06 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8438:	d8c02915 	stw	r3,164(sp)
    843c:	8880080c 	andi	r2,r17,32
    8440:	103ff51e 	bne	r2,zero,8418 <__alt_mem_Flash_flash_data+0xf4008418>
    8444:	8880040c 	andi	r2,r17,16
    8448:	1001c81e 	bne	r2,zero,8b6c <___svfprintf_internal_r+0x13f4>
    844c:	8880100c 	andi	r2,r17,64
    8450:	1001c626 	beq	r2,zero,8b6c <___svfprintf_internal_r+0x13f4>
    8454:	db002d17 	ldw	r12,180(sp)
    8458:	0039883a 	mov	fp,zero
    845c:	0005883a 	mov	r2,zero
    8460:	64c0000b 	ldhu	r19,0(r12)
    8464:	63000104 	addi	r12,r12,4
    8468:	db002d15 	stw	r12,180(sp)
    846c:	9807883a 	mov	r3,r19
    8470:	003f0e06 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8474:	d8c02915 	stw	r3,164(sp)
    8478:	d9802785 	stb	r6,158(sp)
    847c:	803d8026 	beq	r16,zero,7a80 <__alt_mem_Flash_flash_data+0xf4007a80>
    8480:	02c00044 	movi	r11,1
    8484:	db001404 	addi	r12,sp,80
    8488:	dac02a15 	stw	r11,168(sp)
    848c:	dc001405 	stb	r16,80(sp)
    8490:	d8002785 	stb	zero,158(sp)
    8494:	5825883a 	mov	r18,r11
    8498:	d8003215 	stw	zero,200(sp)
    849c:	d8003415 	stw	zero,208(sp)
    84a0:	db003115 	stw	r12,196(sp)
    84a4:	0005883a 	mov	r2,zero
    84a8:	003de606 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>
    84ac:	d8c02017 	ldw	r3,128(sp)
    84b0:	003e2706 	br	7d50 <__alt_mem_Flash_flash_data+0xf4007d50>
    84b4:	10803fcc 	andi	r2,r2,255
    84b8:	00c00044 	movi	r3,1
    84bc:	10fdbb1e 	bne	r2,r3,7bac <__alt_mem_Flash_flash_data+0xf4007bac>
    84c0:	e000021e 	bne	fp,zero,84cc <___svfprintf_internal_r+0xd54>
    84c4:	00800244 	movi	r2,9
    84c8:	14c01f2e 	bgeu	r2,r19,8548 <___svfprintf_internal_r+0xdd0>
    84cc:	dc002a15 	stw	r16,168(sp)
    84d0:	dc402b15 	stw	r17,172(sp)
    84d4:	9821883a 	mov	r16,r19
    84d8:	e023883a 	mov	r17,fp
    84dc:	b025883a 	mov	r18,r22
    84e0:	4827883a 	mov	r19,r9
    84e4:	4039883a 	mov	fp,r8
    84e8:	8009883a 	mov	r4,r16
    84ec:	880b883a 	mov	r5,r17
    84f0:	01800284 	movi	r6,10
    84f4:	000f883a 	mov	r7,zero
    84f8:	000efc80 	call	efc8 <__umoddi3>
    84fc:	10800c04 	addi	r2,r2,48
    8500:	94bfffc4 	addi	r18,r18,-1
    8504:	8009883a 	mov	r4,r16
    8508:	880b883a 	mov	r5,r17
    850c:	01800284 	movi	r6,10
    8510:	000f883a 	mov	r7,zero
    8514:	90800005 	stb	r2,0(r18)
    8518:	000ea080 	call	ea08 <__udivdi3>
    851c:	1021883a 	mov	r16,r2
    8520:	10c4b03a 	or	r2,r2,r3
    8524:	1823883a 	mov	r17,r3
    8528:	103fef1e 	bne	r2,zero,84e8 <__alt_mem_Flash_flash_data+0xf40084e8>
    852c:	dc803115 	stw	r18,196(sp)
    8530:	dc002a17 	ldw	r16,168(sp)
    8534:	dc402b17 	ldw	r17,172(sp)
    8538:	9813883a 	mov	r9,r19
    853c:	e011883a 	mov	r8,fp
    8540:	b4a5c83a 	sub	r18,r22,r18
    8544:	003db306 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    8548:	9cc00c04 	addi	r19,r19,48
    854c:	db001dc4 	addi	r12,sp,119
    8550:	dcc01dc5 	stb	r19,119(sp)
    8554:	dc803d17 	ldw	r18,244(sp)
    8558:	db003115 	stw	r12,196(sp)
    855c:	003dad06 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    8560:	00801944 	movi	r2,101
    8564:	14008d0e 	bge	r2,r16,879c <___svfprintf_internal_r+0x1024>
    8568:	d9003717 	ldw	r4,220(sp)
    856c:	d9403817 	ldw	r5,224(sp)
    8570:	000d883a 	mov	r6,zero
    8574:	000f883a 	mov	r7,zero
    8578:	d8c03e15 	stw	r3,248(sp)
    857c:	da004015 	stw	r8,256(sp)
    8580:	00060780 	call	6078 <__eqdf2>
    8584:	d8c03e17 	ldw	r3,248(sp)
    8588:	da004017 	ldw	r8,256(sp)
    858c:	1000fd1e 	bne	r2,zero,8984 <___svfprintf_internal_r+0x120c>
    8590:	d8801f17 	ldw	r2,124(sp)
    8594:	010000b4 	movhi	r4,2
    8598:	212ef004 	addi	r4,r4,-17472
    859c:	18c00044 	addi	r3,r3,1
    85a0:	10800044 	addi	r2,r2,1
    85a4:	41000015 	stw	r4,0(r8)
    85a8:	01000044 	movi	r4,1
    85ac:	41000115 	stw	r4,4(r8)
    85b0:	d8c02015 	stw	r3,128(sp)
    85b4:	d8801f15 	stw	r2,124(sp)
    85b8:	010001c4 	movi	r4,7
    85bc:	20823316 	blt	r4,r2,8e8c <___svfprintf_internal_r+0x1714>
    85c0:	42000204 	addi	r8,r8,8
    85c4:	d8802617 	ldw	r2,152(sp)
    85c8:	dac03317 	ldw	r11,204(sp)
    85cc:	12c00216 	blt	r2,r11,85d8 <___svfprintf_internal_r+0xe60>
    85d0:	8880004c 	andi	r2,r17,1
    85d4:	103e3d26 	beq	r2,zero,7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    85d8:	db003917 	ldw	r12,228(sp)
    85dc:	d8801f17 	ldw	r2,124(sp)
    85e0:	dac03517 	ldw	r11,212(sp)
    85e4:	1b07883a 	add	r3,r3,r12
    85e8:	10800044 	addi	r2,r2,1
    85ec:	42c00015 	stw	r11,0(r8)
    85f0:	43000115 	stw	r12,4(r8)
    85f4:	d8c02015 	stw	r3,128(sp)
    85f8:	d8801f15 	stw	r2,124(sp)
    85fc:	010001c4 	movi	r4,7
    8600:	20826f16 	blt	r4,r2,8fc0 <___svfprintf_internal_r+0x1848>
    8604:	42000204 	addi	r8,r8,8
    8608:	db003317 	ldw	r12,204(sp)
    860c:	643fffc4 	addi	r16,r12,-1
    8610:	043e2e0e 	bge	zero,r16,7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    8614:	04800404 	movi	r18,16
    8618:	d8801f17 	ldw	r2,124(sp)
    861c:	9400a00e 	bge	r18,r16,88a0 <___svfprintf_internal_r+0x1128>
    8620:	014000b4 	movhi	r5,2
    8624:	296ef084 	addi	r5,r5,-17470
    8628:	d9402b15 	stw	r5,172(sp)
    862c:	054001c4 	movi	r21,7
    8630:	dcc02f17 	ldw	r19,188(sp)
    8634:	00000306 	br	8644 <___svfprintf_internal_r+0xecc>
    8638:	42000204 	addi	r8,r8,8
    863c:	843ffc04 	addi	r16,r16,-16
    8640:	94009a0e 	bge	r18,r16,88ac <___svfprintf_internal_r+0x1134>
    8644:	18c00404 	addi	r3,r3,16
    8648:	10800044 	addi	r2,r2,1
    864c:	45000015 	stw	r20,0(r8)
    8650:	44800115 	stw	r18,4(r8)
    8654:	d8c02015 	stw	r3,128(sp)
    8658:	d8801f15 	stw	r2,124(sp)
    865c:	a8bff60e 	bge	r21,r2,8638 <__alt_mem_Flash_flash_data+0xf4008638>
    8660:	9809883a 	mov	r4,r19
    8664:	b80b883a 	mov	r5,r23
    8668:	b00d883a 	mov	r6,r22
    866c:	000cb440 	call	cb44 <__ssprint_r>
    8670:	103d091e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8674:	d8c02017 	ldw	r3,128(sp)
    8678:	d8801f17 	ldw	r2,124(sp)
    867c:	da000404 	addi	r8,sp,16
    8680:	003fee06 	br	863c <__alt_mem_Flash_flash_data+0xf400863c>
    8684:	dac02e17 	ldw	r11,184(sp)
    8688:	db002a17 	ldw	r12,168(sp)
    868c:	5b2bc83a 	sub	r21,r11,r12
    8690:	057dcd0e 	bge	zero,r21,7dc8 <__alt_mem_Flash_flash_data+0xf4007dc8>
    8694:	07000404 	movi	fp,16
    8698:	d8801f17 	ldw	r2,124(sp)
    869c:	e5435d0e 	bge	fp,r21,9414 <___svfprintf_internal_r+0x1c9c>
    86a0:	014000b4 	movhi	r5,2
    86a4:	a809883a 	mov	r4,r21
    86a8:	296ef084 	addi	r5,r5,-17470
    86ac:	dc002c15 	stw	r16,176(sp)
    86b0:	902b883a 	mov	r21,r18
    86b4:	d9402b15 	stw	r5,172(sp)
    86b8:	8825883a 	mov	r18,r17
    86bc:	04c001c4 	movi	r19,7
    86c0:	dc002f17 	ldw	r16,188(sp)
    86c4:	2023883a 	mov	r17,r4
    86c8:	00000306 	br	86d8 <___svfprintf_internal_r+0xf60>
    86cc:	8c7ffc04 	addi	r17,r17,-16
    86d0:	42000204 	addi	r8,r8,8
    86d4:	e440110e 	bge	fp,r17,871c <___svfprintf_internal_r+0xfa4>
    86d8:	18c00404 	addi	r3,r3,16
    86dc:	10800044 	addi	r2,r2,1
    86e0:	45000015 	stw	r20,0(r8)
    86e4:	47000115 	stw	fp,4(r8)
    86e8:	d8c02015 	stw	r3,128(sp)
    86ec:	d8801f15 	stw	r2,124(sp)
    86f0:	98bff60e 	bge	r19,r2,86cc <__alt_mem_Flash_flash_data+0xf40086cc>
    86f4:	8009883a 	mov	r4,r16
    86f8:	b80b883a 	mov	r5,r23
    86fc:	b00d883a 	mov	r6,r22
    8700:	000cb440 	call	cb44 <__ssprint_r>
    8704:	103ce41e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8708:	8c7ffc04 	addi	r17,r17,-16
    870c:	d8c02017 	ldw	r3,128(sp)
    8710:	d8801f17 	ldw	r2,124(sp)
    8714:	da000404 	addi	r8,sp,16
    8718:	e47fef16 	blt	fp,r17,86d8 <__alt_mem_Flash_flash_data+0xf40086d8>
    871c:	dc002c17 	ldw	r16,176(sp)
    8720:	8809883a 	mov	r4,r17
    8724:	9023883a 	mov	r17,r18
    8728:	a825883a 	mov	r18,r21
    872c:	202b883a 	mov	r21,r4
    8730:	dac02b17 	ldw	r11,172(sp)
    8734:	1d47883a 	add	r3,r3,r21
    8738:	10800044 	addi	r2,r2,1
    873c:	42c00015 	stw	r11,0(r8)
    8740:	45400115 	stw	r21,4(r8)
    8744:	d8c02015 	stw	r3,128(sp)
    8748:	d8801f15 	stw	r2,124(sp)
    874c:	010001c4 	movi	r4,7
    8750:	20818016 	blt	r4,r2,8d54 <___svfprintf_internal_r+0x15dc>
    8754:	42000204 	addi	r8,r8,8
    8758:	003d9b06 	br	7dc8 <__alt_mem_Flash_flash_data+0xf4007dc8>
    875c:	d9403b17 	ldw	r5,236(sp)
    8760:	b007883a 	mov	r3,r22
    8764:	988003cc 	andi	r2,r19,15
    8768:	e008973a 	slli	r4,fp,28
    876c:	2885883a 	add	r2,r5,r2
    8770:	9826d13a 	srli	r19,r19,4
    8774:	10800003 	ldbu	r2,0(r2)
    8778:	e038d13a 	srli	fp,fp,4
    877c:	18ffffc4 	addi	r3,r3,-1
    8780:	24e6b03a 	or	r19,r4,r19
    8784:	18800005 	stb	r2,0(r3)
    8788:	9f04b03a 	or	r2,r19,fp
    878c:	103ff51e 	bne	r2,zero,8764 <__alt_mem_Flash_flash_data+0xf4008764>
    8790:	d8c03115 	stw	r3,196(sp)
    8794:	b0e5c83a 	sub	r18,r22,r3
    8798:	003d1e06 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    879c:	db003317 	ldw	r12,204(sp)
    87a0:	00800044 	movi	r2,1
    87a4:	18c00044 	addi	r3,r3,1
    87a8:	13014b0e 	bge	r2,r12,8cd8 <___svfprintf_internal_r+0x1560>
    87ac:	dc001f17 	ldw	r16,124(sp)
    87b0:	dac03117 	ldw	r11,196(sp)
    87b4:	00800044 	movi	r2,1
    87b8:	84000044 	addi	r16,r16,1
    87bc:	40800115 	stw	r2,4(r8)
    87c0:	42c00015 	stw	r11,0(r8)
    87c4:	d8c02015 	stw	r3,128(sp)
    87c8:	dc001f15 	stw	r16,124(sp)
    87cc:	008001c4 	movi	r2,7
    87d0:	14014e16 	blt	r2,r16,8d0c <___svfprintf_internal_r+0x1594>
    87d4:	42000204 	addi	r8,r8,8
    87d8:	db003917 	ldw	r12,228(sp)
    87dc:	dac03517 	ldw	r11,212(sp)
    87e0:	84000044 	addi	r16,r16,1
    87e4:	1b07883a 	add	r3,r3,r12
    87e8:	42c00015 	stw	r11,0(r8)
    87ec:	43000115 	stw	r12,4(r8)
    87f0:	d8c02015 	stw	r3,128(sp)
    87f4:	dc001f15 	stw	r16,124(sp)
    87f8:	008001c4 	movi	r2,7
    87fc:	14014c16 	blt	r2,r16,8d30 <___svfprintf_internal_r+0x15b8>
    8800:	44800204 	addi	r18,r8,8
    8804:	d9003717 	ldw	r4,220(sp)
    8808:	d9403817 	ldw	r5,224(sp)
    880c:	000d883a 	mov	r6,zero
    8810:	000f883a 	mov	r7,zero
    8814:	d8c03e15 	stw	r3,248(sp)
    8818:	00060780 	call	6078 <__eqdf2>
    881c:	d8c03e17 	ldw	r3,248(sp)
    8820:	db003317 	ldw	r12,204(sp)
    8824:	10009526 	beq	r2,zero,8a7c <___svfprintf_internal_r+0x1304>
    8828:	dac03117 	ldw	r11,196(sp)
    882c:	60bfffc4 	addi	r2,r12,-1
    8830:	1887883a 	add	r3,r3,r2
    8834:	59000044 	addi	r4,r11,1
    8838:	84000044 	addi	r16,r16,1
    883c:	90800115 	stw	r2,4(r18)
    8840:	91000015 	stw	r4,0(r18)
    8844:	d8c02015 	stw	r3,128(sp)
    8848:	dc001f15 	stw	r16,124(sp)
    884c:	008001c4 	movi	r2,7
    8850:	1400b316 	blt	r2,r16,8b20 <___svfprintf_internal_r+0x13a8>
    8854:	94800204 	addi	r18,r18,8
    8858:	dac03a17 	ldw	r11,232(sp)
    885c:	dd4022c4 	addi	r21,sp,139
    8860:	84000044 	addi	r16,r16,1
    8864:	1ac7883a 	add	r3,r3,r11
    8868:	95400015 	stw	r21,0(r18)
    886c:	92c00115 	stw	r11,4(r18)
    8870:	d8c02015 	stw	r3,128(sp)
    8874:	dc001f15 	stw	r16,124(sp)
    8878:	008001c4 	movi	r2,7
    887c:	14001416 	blt	r2,r16,88d0 <___svfprintf_internal_r+0x1158>
    8880:	92000204 	addi	r8,r18,8
    8884:	003d9106 	br	7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    8888:	d9002f17 	ldw	r4,188(sp)
    888c:	b80b883a 	mov	r5,r23
    8890:	b00d883a 	mov	r6,r22
    8894:	000cb440 	call	cb44 <__ssprint_r>
    8898:	103dc826 	beq	r2,zero,7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    889c:	003c7e06 	br	7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    88a0:	010000b4 	movhi	r4,2
    88a4:	212ef084 	addi	r4,r4,-17470
    88a8:	d9002b15 	stw	r4,172(sp)
    88ac:	dac02b17 	ldw	r11,172(sp)
    88b0:	1c07883a 	add	r3,r3,r16
    88b4:	44000115 	stw	r16,4(r8)
    88b8:	42c00015 	stw	r11,0(r8)
    88bc:	10800044 	addi	r2,r2,1
    88c0:	d8c02015 	stw	r3,128(sp)
    88c4:	d8801f15 	stw	r2,124(sp)
    88c8:	010001c4 	movi	r4,7
    88cc:	20bd7e0e 	bge	r4,r2,7ec8 <__alt_mem_Flash_flash_data+0xf4007ec8>
    88d0:	d9002f17 	ldw	r4,188(sp)
    88d4:	b80b883a 	mov	r5,r23
    88d8:	b00d883a 	mov	r6,r22
    88dc:	000cb440 	call	cb44 <__ssprint_r>
    88e0:	103c6d1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    88e4:	d8c02017 	ldw	r3,128(sp)
    88e8:	da000404 	addi	r8,sp,16
    88ec:	003d7706 	br	7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    88f0:	10803fcc 	andi	r2,r2,255
    88f4:	1000201e 	bne	r2,zero,8978 <___svfprintf_internal_r+0x1200>
    88f8:	8880004c 	andi	r2,r17,1
    88fc:	10001e26 	beq	r2,zero,8978 <___svfprintf_internal_r+0x1200>
    8900:	00800c04 	movi	r2,48
    8904:	d8c01dc4 	addi	r3,sp,119
    8908:	d8801dc5 	stb	r2,119(sp)
    890c:	dc803d17 	ldw	r18,244(sp)
    8910:	d8c03115 	stw	r3,196(sp)
    8914:	003cbf06 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    8918:	d9002f17 	ldw	r4,188(sp)
    891c:	b80b883a 	mov	r5,r23
    8920:	b00d883a 	mov	r6,r22
    8924:	000cb440 	call	cb44 <__ssprint_r>
    8928:	103c5b1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    892c:	d8c02017 	ldw	r3,128(sp)
    8930:	da000404 	addi	r8,sp,16
    8934:	003d5806 	br	7e98 <__alt_mem_Flash_flash_data+0xf4007e98>
    8938:	d9002f17 	ldw	r4,188(sp)
    893c:	b80b883a 	mov	r5,r23
    8940:	b00d883a 	mov	r6,r22
    8944:	000cb440 	call	cb44 <__ssprint_r>
    8948:	103c531e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    894c:	d8c02017 	ldw	r3,128(sp)
    8950:	da000404 	addi	r8,sp,16
    8954:	003d1906 	br	7dbc <__alt_mem_Flash_flash_data+0xf4007dbc>
    8958:	d9002f17 	ldw	r4,188(sp)
    895c:	b80b883a 	mov	r5,r23
    8960:	b00d883a 	mov	r6,r22
    8964:	000cb440 	call	cb44 <__ssprint_r>
    8968:	103c4b1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    896c:	d8c02017 	ldw	r3,128(sp)
    8970:	da000404 	addi	r8,sp,16
    8974:	003d0306 	br	7d84 <__alt_mem_Flash_flash_data+0xf4007d84>
    8978:	0025883a 	mov	r18,zero
    897c:	dd803115 	stw	r22,196(sp)
    8980:	003ca406 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    8984:	dc002617 	ldw	r16,152(sp)
    8988:	0401480e 	bge	zero,r16,8eac <___svfprintf_internal_r+0x1734>
    898c:	db003117 	ldw	r12,196(sp)
    8990:	dac03317 	ldw	r11,204(sp)
    8994:	62e1883a 	add	r16,r12,r11
    8998:	db003417 	ldw	r12,208(sp)
    899c:	5825883a 	mov	r18,r11
    89a0:	62c0010e 	bge	r12,r11,89a8 <___svfprintf_internal_r+0x1230>
    89a4:	6025883a 	mov	r18,r12
    89a8:	04800b0e 	bge	zero,r18,89d8 <___svfprintf_internal_r+0x1260>
    89ac:	d8801f17 	ldw	r2,124(sp)
    89b0:	dac03117 	ldw	r11,196(sp)
    89b4:	1c87883a 	add	r3,r3,r18
    89b8:	10800044 	addi	r2,r2,1
    89bc:	42c00015 	stw	r11,0(r8)
    89c0:	44800115 	stw	r18,4(r8)
    89c4:	d8c02015 	stw	r3,128(sp)
    89c8:	d8801f15 	stw	r2,124(sp)
    89cc:	010001c4 	movi	r4,7
    89d0:	20823f16 	blt	r4,r2,92d0 <___svfprintf_internal_r+0x1b58>
    89d4:	42000204 	addi	r8,r8,8
    89d8:	90023b16 	blt	r18,zero,92c8 <___svfprintf_internal_r+0x1b50>
    89dc:	db003417 	ldw	r12,208(sp)
    89e0:	64a5c83a 	sub	r18,r12,r18
    89e4:	0480780e 	bge	zero,r18,8bc8 <___svfprintf_internal_r+0x1450>
    89e8:	05400404 	movi	r21,16
    89ec:	d8801f17 	ldw	r2,124(sp)
    89f0:	ac81140e 	bge	r21,r18,8e44 <___svfprintf_internal_r+0x16cc>
    89f4:	014000b4 	movhi	r5,2
    89f8:	296ef084 	addi	r5,r5,-17470
    89fc:	d9402b15 	stw	r5,172(sp)
    8a00:	070001c4 	movi	fp,7
    8a04:	dcc02f17 	ldw	r19,188(sp)
    8a08:	00000306 	br	8a18 <___svfprintf_internal_r+0x12a0>
    8a0c:	42000204 	addi	r8,r8,8
    8a10:	94bffc04 	addi	r18,r18,-16
    8a14:	ac810e0e 	bge	r21,r18,8e50 <___svfprintf_internal_r+0x16d8>
    8a18:	18c00404 	addi	r3,r3,16
    8a1c:	10800044 	addi	r2,r2,1
    8a20:	45000015 	stw	r20,0(r8)
    8a24:	45400115 	stw	r21,4(r8)
    8a28:	d8c02015 	stw	r3,128(sp)
    8a2c:	d8801f15 	stw	r2,124(sp)
    8a30:	e0bff60e 	bge	fp,r2,8a0c <__alt_mem_Flash_flash_data+0xf4008a0c>
    8a34:	9809883a 	mov	r4,r19
    8a38:	b80b883a 	mov	r5,r23
    8a3c:	b00d883a 	mov	r6,r22
    8a40:	000cb440 	call	cb44 <__ssprint_r>
    8a44:	103c141e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8a48:	d8c02017 	ldw	r3,128(sp)
    8a4c:	d8801f17 	ldw	r2,124(sp)
    8a50:	da000404 	addi	r8,sp,16
    8a54:	003fee06 	br	8a10 <__alt_mem_Flash_flash_data+0xf4008a10>
    8a58:	d9002f17 	ldw	r4,188(sp)
    8a5c:	b80b883a 	mov	r5,r23
    8a60:	b00d883a 	mov	r6,r22
    8a64:	000cb440 	call	cb44 <__ssprint_r>
    8a68:	103c0b1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8a6c:	d8c02017 	ldw	r3,128(sp)
    8a70:	d8802787 	ldb	r2,158(sp)
    8a74:	da000404 	addi	r8,sp,16
    8a78:	003cb506 	br	7d50 <__alt_mem_Flash_flash_data+0xf4007d50>
    8a7c:	657fffc4 	addi	r21,r12,-1
    8a80:	057f750e 	bge	zero,r21,8858 <__alt_mem_Flash_flash_data+0xf4008858>
    8a84:	07000404 	movi	fp,16
    8a88:	e542ed0e 	bge	fp,r21,9640 <___svfprintf_internal_r+0x1ec8>
    8a8c:	010000b4 	movhi	r4,2
    8a90:	212ef084 	addi	r4,r4,-17470
    8a94:	d9002b15 	stw	r4,172(sp)
    8a98:	01c001c4 	movi	r7,7
    8a9c:	dcc02f17 	ldw	r19,188(sp)
    8aa0:	00000306 	br	8ab0 <___svfprintf_internal_r+0x1338>
    8aa4:	ad7ffc04 	addi	r21,r21,-16
    8aa8:	94800204 	addi	r18,r18,8
    8aac:	e540130e 	bge	fp,r21,8afc <___svfprintf_internal_r+0x1384>
    8ab0:	18c00404 	addi	r3,r3,16
    8ab4:	84000044 	addi	r16,r16,1
    8ab8:	95000015 	stw	r20,0(r18)
    8abc:	97000115 	stw	fp,4(r18)
    8ac0:	d8c02015 	stw	r3,128(sp)
    8ac4:	dc001f15 	stw	r16,124(sp)
    8ac8:	3c3ff60e 	bge	r7,r16,8aa4 <__alt_mem_Flash_flash_data+0xf4008aa4>
    8acc:	9809883a 	mov	r4,r19
    8ad0:	b80b883a 	mov	r5,r23
    8ad4:	b00d883a 	mov	r6,r22
    8ad8:	d9c03e15 	stw	r7,248(sp)
    8adc:	000cb440 	call	cb44 <__ssprint_r>
    8ae0:	d9c03e17 	ldw	r7,248(sp)
    8ae4:	103bec1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8ae8:	ad7ffc04 	addi	r21,r21,-16
    8aec:	d8c02017 	ldw	r3,128(sp)
    8af0:	dc001f17 	ldw	r16,124(sp)
    8af4:	dc800404 	addi	r18,sp,16
    8af8:	e57fed16 	blt	fp,r21,8ab0 <__alt_mem_Flash_flash_data+0xf4008ab0>
    8afc:	dac02b17 	ldw	r11,172(sp)
    8b00:	1d47883a 	add	r3,r3,r21
    8b04:	84000044 	addi	r16,r16,1
    8b08:	92c00015 	stw	r11,0(r18)
    8b0c:	95400115 	stw	r21,4(r18)
    8b10:	d8c02015 	stw	r3,128(sp)
    8b14:	dc001f15 	stw	r16,124(sp)
    8b18:	008001c4 	movi	r2,7
    8b1c:	143f4d0e 	bge	r2,r16,8854 <__alt_mem_Flash_flash_data+0xf4008854>
    8b20:	d9002f17 	ldw	r4,188(sp)
    8b24:	b80b883a 	mov	r5,r23
    8b28:	b00d883a 	mov	r6,r22
    8b2c:	000cb440 	call	cb44 <__ssprint_r>
    8b30:	103bd91e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8b34:	d8c02017 	ldw	r3,128(sp)
    8b38:	dc001f17 	ldw	r16,124(sp)
    8b3c:	dc800404 	addi	r18,sp,16
    8b40:	003f4506 	br	8858 <__alt_mem_Flash_flash_data+0xf4008858>
    8b44:	00800084 	movi	r2,2
    8b48:	9f06b03a 	or	r3,r19,fp
    8b4c:	003d5706 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8b50:	1cc00017 	ldw	r19,0(r3)
    8b54:	dac02d17 	ldw	r11,180(sp)
    8b58:	9839d7fa 	srai	fp,r19,31
    8b5c:	5ac00104 	addi	r11,r11,4
    8b60:	dac02d15 	stw	r11,180(sp)
    8b64:	e005883a 	mov	r2,fp
    8b68:	003c0306 	br	7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    8b6c:	dac02d17 	ldw	r11,180(sp)
    8b70:	0039883a 	mov	fp,zero
    8b74:	0005883a 	mov	r2,zero
    8b78:	5cc00017 	ldw	r19,0(r11)
    8b7c:	5ac00104 	addi	r11,r11,4
    8b80:	dac02d15 	stw	r11,180(sp)
    8b84:	9807883a 	mov	r3,r19
    8b88:	003d4806 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8b8c:	db002d17 	ldw	r12,180(sp)
    8b90:	14c00017 	ldw	r19,0(r2)
    8b94:	0039883a 	mov	fp,zero
    8b98:	63000104 	addi	r12,r12,4
    8b9c:	db002d15 	stw	r12,180(sp)
    8ba0:	00800044 	movi	r2,1
    8ba4:	9807883a 	mov	r3,r19
    8ba8:	003d4006 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8bac:	d9002f17 	ldw	r4,188(sp)
    8bb0:	b80b883a 	mov	r5,r23
    8bb4:	b00d883a 	mov	r6,r22
    8bb8:	000cb440 	call	cb44 <__ssprint_r>
    8bbc:	103bb61e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8bc0:	d8c02017 	ldw	r3,128(sp)
    8bc4:	da000404 	addi	r8,sp,16
    8bc8:	db003117 	ldw	r12,196(sp)
    8bcc:	dac03417 	ldw	r11,208(sp)
    8bd0:	d8802617 	ldw	r2,152(sp)
    8bd4:	62e5883a 	add	r18,r12,r11
    8bd8:	db003317 	ldw	r12,204(sp)
    8bdc:	13000216 	blt	r2,r12,8be8 <___svfprintf_internal_r+0x1470>
    8be0:	8900004c 	andi	r4,r17,1
    8be4:	20000c26 	beq	r4,zero,8c18 <___svfprintf_internal_r+0x14a0>
    8be8:	dac03917 	ldw	r11,228(sp)
    8bec:	d9001f17 	ldw	r4,124(sp)
    8bf0:	db003517 	ldw	r12,212(sp)
    8bf4:	1ac7883a 	add	r3,r3,r11
    8bf8:	21000044 	addi	r4,r4,1
    8bfc:	43000015 	stw	r12,0(r8)
    8c00:	42c00115 	stw	r11,4(r8)
    8c04:	d8c02015 	stw	r3,128(sp)
    8c08:	d9001f15 	stw	r4,124(sp)
    8c0c:	014001c4 	movi	r5,7
    8c10:	2901b716 	blt	r5,r4,92f0 <___svfprintf_internal_r+0x1b78>
    8c14:	42000204 	addi	r8,r8,8
    8c18:	dac03317 	ldw	r11,204(sp)
    8c1c:	8489c83a 	sub	r4,r16,r18
    8c20:	5885c83a 	sub	r2,r11,r2
    8c24:	1021883a 	mov	r16,r2
    8c28:	2080010e 	bge	r4,r2,8c30 <___svfprintf_internal_r+0x14b8>
    8c2c:	2021883a 	mov	r16,r4
    8c30:	04000a0e 	bge	zero,r16,8c5c <___svfprintf_internal_r+0x14e4>
    8c34:	d9001f17 	ldw	r4,124(sp)
    8c38:	1c07883a 	add	r3,r3,r16
    8c3c:	44800015 	stw	r18,0(r8)
    8c40:	21000044 	addi	r4,r4,1
    8c44:	44000115 	stw	r16,4(r8)
    8c48:	d8c02015 	stw	r3,128(sp)
    8c4c:	d9001f15 	stw	r4,124(sp)
    8c50:	014001c4 	movi	r5,7
    8c54:	2901bf16 	blt	r5,r4,9354 <___svfprintf_internal_r+0x1bdc>
    8c58:	42000204 	addi	r8,r8,8
    8c5c:	8001bb16 	blt	r16,zero,934c <___svfprintf_internal_r+0x1bd4>
    8c60:	1421c83a 	sub	r16,r2,r16
    8c64:	043c990e 	bge	zero,r16,7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    8c68:	04800404 	movi	r18,16
    8c6c:	d8801f17 	ldw	r2,124(sp)
    8c70:	943f0b0e 	bge	r18,r16,88a0 <__alt_mem_Flash_flash_data+0xf40088a0>
    8c74:	014000b4 	movhi	r5,2
    8c78:	296ef084 	addi	r5,r5,-17470
    8c7c:	d9402b15 	stw	r5,172(sp)
    8c80:	054001c4 	movi	r21,7
    8c84:	dcc02f17 	ldw	r19,188(sp)
    8c88:	00000306 	br	8c98 <___svfprintf_internal_r+0x1520>
    8c8c:	42000204 	addi	r8,r8,8
    8c90:	843ffc04 	addi	r16,r16,-16
    8c94:	943f050e 	bge	r18,r16,88ac <__alt_mem_Flash_flash_data+0xf40088ac>
    8c98:	18c00404 	addi	r3,r3,16
    8c9c:	10800044 	addi	r2,r2,1
    8ca0:	45000015 	stw	r20,0(r8)
    8ca4:	44800115 	stw	r18,4(r8)
    8ca8:	d8c02015 	stw	r3,128(sp)
    8cac:	d8801f15 	stw	r2,124(sp)
    8cb0:	a8bff60e 	bge	r21,r2,8c8c <__alt_mem_Flash_flash_data+0xf4008c8c>
    8cb4:	9809883a 	mov	r4,r19
    8cb8:	b80b883a 	mov	r5,r23
    8cbc:	b00d883a 	mov	r6,r22
    8cc0:	000cb440 	call	cb44 <__ssprint_r>
    8cc4:	103b741e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8cc8:	d8c02017 	ldw	r3,128(sp)
    8ccc:	d8801f17 	ldw	r2,124(sp)
    8cd0:	da000404 	addi	r8,sp,16
    8cd4:	003fee06 	br	8c90 <__alt_mem_Flash_flash_data+0xf4008c90>
    8cd8:	8888703a 	and	r4,r17,r2
    8cdc:	203eb31e 	bne	r4,zero,87ac <__alt_mem_Flash_flash_data+0xf40087ac>
    8ce0:	dc001f17 	ldw	r16,124(sp)
    8ce4:	db003117 	ldw	r12,196(sp)
    8ce8:	40800115 	stw	r2,4(r8)
    8cec:	84000044 	addi	r16,r16,1
    8cf0:	43000015 	stw	r12,0(r8)
    8cf4:	d8c02015 	stw	r3,128(sp)
    8cf8:	dc001f15 	stw	r16,124(sp)
    8cfc:	008001c4 	movi	r2,7
    8d00:	143f8716 	blt	r2,r16,8b20 <__alt_mem_Flash_flash_data+0xf4008b20>
    8d04:	44800204 	addi	r18,r8,8
    8d08:	003ed306 	br	8858 <__alt_mem_Flash_flash_data+0xf4008858>
    8d0c:	d9002f17 	ldw	r4,188(sp)
    8d10:	b80b883a 	mov	r5,r23
    8d14:	b00d883a 	mov	r6,r22
    8d18:	000cb440 	call	cb44 <__ssprint_r>
    8d1c:	103b5e1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8d20:	d8c02017 	ldw	r3,128(sp)
    8d24:	dc001f17 	ldw	r16,124(sp)
    8d28:	da000404 	addi	r8,sp,16
    8d2c:	003eaa06 	br	87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    8d30:	d9002f17 	ldw	r4,188(sp)
    8d34:	b80b883a 	mov	r5,r23
    8d38:	b00d883a 	mov	r6,r22
    8d3c:	000cb440 	call	cb44 <__ssprint_r>
    8d40:	103b551e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8d44:	d8c02017 	ldw	r3,128(sp)
    8d48:	dc001f17 	ldw	r16,124(sp)
    8d4c:	dc800404 	addi	r18,sp,16
    8d50:	003eac06 	br	8804 <__alt_mem_Flash_flash_data+0xf4008804>
    8d54:	d9002f17 	ldw	r4,188(sp)
    8d58:	b80b883a 	mov	r5,r23
    8d5c:	b00d883a 	mov	r6,r22
    8d60:	000cb440 	call	cb44 <__ssprint_r>
    8d64:	103b4c1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8d68:	d8c02017 	ldw	r3,128(sp)
    8d6c:	da000404 	addi	r8,sp,16
    8d70:	003c1506 	br	7dc8 <__alt_mem_Flash_flash_data+0xf4007dc8>
    8d74:	da004015 	stw	r8,256(sp)
    8d78:	da403f15 	stw	r9,252(sp)
    8d7c:	000c9400 	call	c940 <__fpclassifyd>
    8d80:	da004017 	ldw	r8,256(sp)
    8d84:	da403f17 	ldw	r9,252(sp)
    8d88:	1000951e 	bne	r2,zero,8fe0 <___svfprintf_internal_r+0x1868>
    8d8c:	008011c4 	movi	r2,71
    8d90:	1400fb16 	blt	r2,r16,9180 <___svfprintf_internal_r+0x1a08>
    8d94:	030000b4 	movhi	r12,2
    8d98:	632ee204 	addi	r12,r12,-17528
    8d9c:	db003115 	stw	r12,196(sp)
    8da0:	00c000c4 	movi	r3,3
    8da4:	00bfdfc4 	movi	r2,-129
    8da8:	d8c02a15 	stw	r3,168(sp)
    8dac:	88a2703a 	and	r17,r17,r2
    8db0:	dd402783 	ldbu	r21,158(sp)
    8db4:	dcc02d15 	stw	r19,180(sp)
    8db8:	1825883a 	mov	r18,r3
    8dbc:	d8003215 	stw	zero,200(sp)
    8dc0:	d8003415 	stw	zero,208(sp)
    8dc4:	003b9806 	br	7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    8dc8:	1c000007 	ldb	r16,0(r3)
    8dcc:	1805883a 	mov	r2,r3
    8dd0:	003abf06 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    8dd4:	00800084 	movi	r2,2
    8dd8:	003cb406 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    8ddc:	88c0100c 	andi	r3,r17,64
    8de0:	1800f626 	beq	r3,zero,91bc <___svfprintf_internal_r+0x1a44>
    8de4:	dac02d17 	ldw	r11,180(sp)
    8de8:	14c0000b 	ldhu	r19,0(r2)
    8dec:	0039883a 	mov	fp,zero
    8df0:	5ac00104 	addi	r11,r11,4
    8df4:	dac02d15 	stw	r11,180(sp)
    8df8:	003cbd06 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    8dfc:	8880040c 	andi	r2,r17,16
    8e00:	1000091e 	bne	r2,zero,8e28 <___svfprintf_internal_r+0x16b0>
    8e04:	8c40100c 	andi	r17,r17,64
    8e08:	88000726 	beq	r17,zero,8e28 <___svfprintf_internal_r+0x16b0>
    8e0c:	db002d17 	ldw	r12,180(sp)
    8e10:	dac03017 	ldw	r11,192(sp)
    8e14:	60800017 	ldw	r2,0(r12)
    8e18:	63000104 	addi	r12,r12,4
    8e1c:	db002d15 	stw	r12,180(sp)
    8e20:	12c0000d 	sth	r11,0(r2)
    8e24:	003a8006 	br	7828 <__alt_mem_Flash_flash_data+0xf4007828>
    8e28:	db002d17 	ldw	r12,180(sp)
    8e2c:	dac03017 	ldw	r11,192(sp)
    8e30:	60800017 	ldw	r2,0(r12)
    8e34:	63000104 	addi	r12,r12,4
    8e38:	db002d15 	stw	r12,180(sp)
    8e3c:	12c00015 	stw	r11,0(r2)
    8e40:	003a7906 	br	7828 <__alt_mem_Flash_flash_data+0xf4007828>
    8e44:	010000b4 	movhi	r4,2
    8e48:	212ef084 	addi	r4,r4,-17470
    8e4c:	d9002b15 	stw	r4,172(sp)
    8e50:	dac02b17 	ldw	r11,172(sp)
    8e54:	1c87883a 	add	r3,r3,r18
    8e58:	10800044 	addi	r2,r2,1
    8e5c:	42c00015 	stw	r11,0(r8)
    8e60:	44800115 	stw	r18,4(r8)
    8e64:	d8c02015 	stw	r3,128(sp)
    8e68:	d8801f15 	stw	r2,124(sp)
    8e6c:	010001c4 	movi	r4,7
    8e70:	20bf4e16 	blt	r4,r2,8bac <__alt_mem_Flash_flash_data+0xf4008bac>
    8e74:	42000204 	addi	r8,r8,8
    8e78:	003f5306 	br	8bc8 <__alt_mem_Flash_flash_data+0xf4008bc8>
    8e7c:	010000b4 	movhi	r4,2
    8e80:	212ef084 	addi	r4,r4,-17470
    8e84:	d9002b15 	stw	r4,172(sp)
    8e88:	003bf906 	br	7e70 <__alt_mem_Flash_flash_data+0xf4007e70>
    8e8c:	d9002f17 	ldw	r4,188(sp)
    8e90:	b80b883a 	mov	r5,r23
    8e94:	b00d883a 	mov	r6,r22
    8e98:	000cb440 	call	cb44 <__ssprint_r>
    8e9c:	103afe1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8ea0:	d8c02017 	ldw	r3,128(sp)
    8ea4:	da000404 	addi	r8,sp,16
    8ea8:	003dc606 	br	85c4 <__alt_mem_Flash_flash_data+0xf40085c4>
    8eac:	d8801f17 	ldw	r2,124(sp)
    8eb0:	030000b4 	movhi	r12,2
    8eb4:	01000044 	movi	r4,1
    8eb8:	18c00044 	addi	r3,r3,1
    8ebc:	10800044 	addi	r2,r2,1
    8ec0:	632ef004 	addi	r12,r12,-17472
    8ec4:	41000115 	stw	r4,4(r8)
    8ec8:	43000015 	stw	r12,0(r8)
    8ecc:	d8c02015 	stw	r3,128(sp)
    8ed0:	d8801f15 	stw	r2,124(sp)
    8ed4:	010001c4 	movi	r4,7
    8ed8:	2080ad16 	blt	r4,r2,9190 <___svfprintf_internal_r+0x1a18>
    8edc:	42000204 	addi	r8,r8,8
    8ee0:	8000041e 	bne	r16,zero,8ef4 <___svfprintf_internal_r+0x177c>
    8ee4:	dac03317 	ldw	r11,204(sp)
    8ee8:	5800021e 	bne	r11,zero,8ef4 <___svfprintf_internal_r+0x177c>
    8eec:	8880004c 	andi	r2,r17,1
    8ef0:	103bf626 	beq	r2,zero,7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>
    8ef4:	db003917 	ldw	r12,228(sp)
    8ef8:	d8801f17 	ldw	r2,124(sp)
    8efc:	dac03517 	ldw	r11,212(sp)
    8f00:	1b07883a 	add	r3,r3,r12
    8f04:	10800044 	addi	r2,r2,1
    8f08:	42c00015 	stw	r11,0(r8)
    8f0c:	43000115 	stw	r12,4(r8)
    8f10:	d8c02015 	stw	r3,128(sp)
    8f14:	d8801f15 	stw	r2,124(sp)
    8f18:	010001c4 	movi	r4,7
    8f1c:	20818616 	blt	r4,r2,9538 <___svfprintf_internal_r+0x1dc0>
    8f20:	42000204 	addi	r8,r8,8
    8f24:	0421c83a 	sub	r16,zero,r16
    8f28:	0400bc0e 	bge	zero,r16,921c <___svfprintf_internal_r+0x1aa4>
    8f2c:	04800404 	movi	r18,16
    8f30:	9400f80e 	bge	r18,r16,9314 <___svfprintf_internal_r+0x1b9c>
    8f34:	010000b4 	movhi	r4,2
    8f38:	212ef084 	addi	r4,r4,-17470
    8f3c:	d9002b15 	stw	r4,172(sp)
    8f40:	054001c4 	movi	r21,7
    8f44:	dcc02f17 	ldw	r19,188(sp)
    8f48:	00000306 	br	8f58 <___svfprintf_internal_r+0x17e0>
    8f4c:	42000204 	addi	r8,r8,8
    8f50:	843ffc04 	addi	r16,r16,-16
    8f54:	9400f20e 	bge	r18,r16,9320 <___svfprintf_internal_r+0x1ba8>
    8f58:	18c00404 	addi	r3,r3,16
    8f5c:	10800044 	addi	r2,r2,1
    8f60:	45000015 	stw	r20,0(r8)
    8f64:	44800115 	stw	r18,4(r8)
    8f68:	d8c02015 	stw	r3,128(sp)
    8f6c:	d8801f15 	stw	r2,124(sp)
    8f70:	a8bff60e 	bge	r21,r2,8f4c <__alt_mem_Flash_flash_data+0xf4008f4c>
    8f74:	9809883a 	mov	r4,r19
    8f78:	b80b883a 	mov	r5,r23
    8f7c:	b00d883a 	mov	r6,r22
    8f80:	000cb440 	call	cb44 <__ssprint_r>
    8f84:	103ac41e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8f88:	d8c02017 	ldw	r3,128(sp)
    8f8c:	d8801f17 	ldw	r2,124(sp)
    8f90:	da000404 	addi	r8,sp,16
    8f94:	003fee06 	br	8f50 <__alt_mem_Flash_flash_data+0xf4008f50>
    8f98:	db002e17 	ldw	r12,184(sp)
    8f9c:	1805883a 	mov	r2,r3
    8fa0:	dac02d15 	stw	r11,180(sp)
    8fa4:	0319c83a 	sub	r12,zero,r12
    8fa8:	db002e15 	stw	r12,184(sp)
    8fac:	003acf06 	br	7aec <__alt_mem_Flash_flash_data+0xf4007aec>
    8fb0:	18800044 	addi	r2,r3,1
    8fb4:	8c400814 	ori	r17,r17,32
    8fb8:	1c000047 	ldb	r16,1(r3)
    8fbc:	003a4406 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    8fc0:	d9002f17 	ldw	r4,188(sp)
    8fc4:	b80b883a 	mov	r5,r23
    8fc8:	b00d883a 	mov	r6,r22
    8fcc:	000cb440 	call	cb44 <__ssprint_r>
    8fd0:	103ab11e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    8fd4:	d8c02017 	ldw	r3,128(sp)
    8fd8:	da000404 	addi	r8,sp,16
    8fdc:	003d8a06 	br	8608 <__alt_mem_Flash_flash_data+0xf4008608>
    8fe0:	057ff7c4 	movi	r21,-33
    8fe4:	00bfffc4 	movi	r2,-1
    8fe8:	856a703a 	and	r21,r16,r21
    8fec:	48807126 	beq	r9,r2,91b4 <___svfprintf_internal_r+0x1a3c>
    8ff0:	008011c4 	movi	r2,71
    8ff4:	a8814d26 	beq	r21,r2,952c <___svfprintf_internal_r+0x1db4>
    8ff8:	db003817 	ldw	r12,224(sp)
    8ffc:	8ac04014 	ori	r11,r17,256
    9000:	dac02d15 	stw	r11,180(sp)
    9004:	60015616 	blt	r12,zero,9560 <___svfprintf_internal_r+0x1de8>
    9008:	dc803817 	ldw	r18,224(sp)
    900c:	d8002a05 	stb	zero,168(sp)
    9010:	00801984 	movi	r2,102
    9014:	80808c26 	beq	r16,r2,9248 <___svfprintf_internal_r+0x1ad0>
    9018:	00801184 	movi	r2,70
    901c:	80808a26 	beq	r16,r2,9248 <___svfprintf_internal_r+0x1ad0>
    9020:	00801144 	movi	r2,69
    9024:	a8815226 	beq	r21,r2,9570 <___svfprintf_internal_r+0x1df8>
    9028:	4839883a 	mov	fp,r9
    902c:	d8802604 	addi	r2,sp,152
    9030:	d8800115 	stw	r2,4(sp)
    9034:	d9002f17 	ldw	r4,188(sp)
    9038:	d8802504 	addi	r2,sp,148
    903c:	d9403717 	ldw	r5,220(sp)
    9040:	d8800215 	stw	r2,8(sp)
    9044:	d8802104 	addi	r2,sp,132
    9048:	df000015 	stw	fp,0(sp)
    904c:	d8800315 	stw	r2,12(sp)
    9050:	900d883a 	mov	r6,r18
    9054:	01c00084 	movi	r7,2
    9058:	da004015 	stw	r8,256(sp)
    905c:	da403f15 	stw	r9,252(sp)
    9060:	00099080 	call	9908 <_dtoa_r>
    9064:	d8803115 	stw	r2,196(sp)
    9068:	008019c4 	movi	r2,103
    906c:	da004017 	ldw	r8,256(sp)
    9070:	da403f17 	ldw	r9,252(sp)
    9074:	80800226 	beq	r16,r2,9080 <___svfprintf_internal_r+0x1908>
    9078:	008011c4 	movi	r2,71
    907c:	8080841e 	bne	r16,r2,9290 <___svfprintf_internal_r+0x1b18>
    9080:	8880004c 	andi	r2,r17,1
    9084:	10014f26 	beq	r2,zero,95c4 <___svfprintf_internal_r+0x1e4c>
    9088:	db003117 	ldw	r12,196(sp)
    908c:	6715883a 	add	r10,r12,fp
    9090:	d9003717 	ldw	r4,220(sp)
    9094:	900b883a 	mov	r5,r18
    9098:	000d883a 	mov	r6,zero
    909c:	000f883a 	mov	r7,zero
    90a0:	da004015 	stw	r8,256(sp)
    90a4:	da403f15 	stw	r9,252(sp)
    90a8:	da803e15 	stw	r10,248(sp)
    90ac:	00060780 	call	6078 <__eqdf2>
    90b0:	da004017 	ldw	r8,256(sp)
    90b4:	da403f17 	ldw	r9,252(sp)
    90b8:	da803e17 	ldw	r10,248(sp)
    90bc:	1000d926 	beq	r2,zero,9424 <___svfprintf_internal_r+0x1cac>
    90c0:	d8802117 	ldw	r2,132(sp)
    90c4:	1280062e 	bgeu	r2,r10,90e0 <___svfprintf_internal_r+0x1968>
    90c8:	01000c04 	movi	r4,48
    90cc:	10c00044 	addi	r3,r2,1
    90d0:	d8c02115 	stw	r3,132(sp)
    90d4:	11000005 	stb	r4,0(r2)
    90d8:	d8802117 	ldw	r2,132(sp)
    90dc:	12bffb36 	bltu	r2,r10,90cc <__alt_mem_Flash_flash_data+0xf40090cc>
    90e0:	db003117 	ldw	r12,196(sp)
    90e4:	1305c83a 	sub	r2,r2,r12
    90e8:	d8803315 	stw	r2,204(sp)
    90ec:	008011c4 	movi	r2,71
    90f0:	a880b626 	beq	r21,r2,93cc <___svfprintf_internal_r+0x1c54>
    90f4:	00801944 	movi	r2,101
    90f8:	14017c0e 	bge	r2,r16,96ec <___svfprintf_internal_r+0x1f74>
    90fc:	00801984 	movi	r2,102
    9100:	80812626 	beq	r16,r2,959c <___svfprintf_internal_r+0x1e24>
    9104:	db002617 	ldw	r12,152(sp)
    9108:	db003415 	stw	r12,208(sp)
    910c:	db003417 	ldw	r12,208(sp)
    9110:	dac03317 	ldw	r11,204(sp)
    9114:	62c11816 	blt	r12,r11,9578 <___svfprintf_internal_r+0x1e00>
    9118:	8c40004c 	andi	r17,r17,1
    911c:	88013b1e 	bne	r17,zero,960c <___svfprintf_internal_r+0x1e94>
    9120:	6005883a 	mov	r2,r12
    9124:	60012516 	blt	r12,zero,95bc <___svfprintf_internal_r+0x1e44>
    9128:	dc803417 	ldw	r18,208(sp)
    912c:	df002a07 	ldb	fp,168(sp)
    9130:	e000b01e 	bne	fp,zero,93f4 <___svfprintf_internal_r+0x1c7c>
    9134:	dc402d17 	ldw	r17,180(sp)
    9138:	dd402783 	ldbu	r21,158(sp)
    913c:	d8802a15 	stw	r2,168(sp)
    9140:	dcc02d15 	stw	r19,180(sp)
    9144:	d8003215 	stw	zero,200(sp)
    9148:	003ab706 	br	7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    914c:	008000b4 	movhi	r2,2
    9150:	10aee004 	addi	r2,r2,-17536
    9154:	d8803115 	stw	r2,196(sp)
    9158:	003bbb06 	br	8048 <__alt_mem_Flash_flash_data+0xf4008048>
    915c:	d9002f17 	ldw	r4,188(sp)
    9160:	04001004 	movi	r16,64
    9164:	800b883a 	mov	r5,r16
    9168:	000b1100 	call	b110 <_malloc_r>
    916c:	b8800015 	stw	r2,0(r23)
    9170:	b8800415 	stw	r2,16(r23)
    9174:	10015f26 	beq	r2,zero,96f4 <___svfprintf_internal_r+0x1f7c>
    9178:	bc000515 	stw	r16,20(r23)
    917c:	00399806 	br	77e0 <__alt_mem_Flash_flash_data+0xf40077e0>
    9180:	008000b4 	movhi	r2,2
    9184:	10aee304 	addi	r2,r2,-17524
    9188:	d8803115 	stw	r2,196(sp)
    918c:	003f0406 	br	8da0 <__alt_mem_Flash_flash_data+0xf4008da0>
    9190:	d9002f17 	ldw	r4,188(sp)
    9194:	b80b883a 	mov	r5,r23
    9198:	b00d883a 	mov	r6,r22
    919c:	000cb440 	call	cb44 <__ssprint_r>
    91a0:	103a3d1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    91a4:	dc002617 	ldw	r16,152(sp)
    91a8:	d8c02017 	ldw	r3,128(sp)
    91ac:	da000404 	addi	r8,sp,16
    91b0:	003f4b06 	br	8ee0 <__alt_mem_Flash_flash_data+0xf4008ee0>
    91b4:	02400184 	movi	r9,6
    91b8:	003f8f06 	br	8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    91bc:	db002d17 	ldw	r12,180(sp)
    91c0:	14c00017 	ldw	r19,0(r2)
    91c4:	0039883a 	mov	fp,zero
    91c8:	63000104 	addi	r12,r12,4
    91cc:	db002d15 	stw	r12,180(sp)
    91d0:	003bc706 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    91d4:	d8c03117 	ldw	r3,196(sp)
    91d8:	b0e5c83a 	sub	r18,r22,r3
    91dc:	003a8d06 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    91e0:	da004015 	stw	r8,256(sp)
    91e4:	000caac0 	call	caac <strlen>
    91e8:	1025883a 	mov	r18,r2
    91ec:	da004017 	ldw	r8,256(sp)
    91f0:	903bf20e 	bge	r18,zero,81bc <__alt_mem_Flash_flash_data+0xf40081bc>
    91f4:	0005883a 	mov	r2,zero
    91f8:	003bf006 	br	81bc <__alt_mem_Flash_flash_data+0xf40081bc>
    91fc:	d9002f17 	ldw	r4,188(sp)
    9200:	b80b883a 	mov	r5,r23
    9204:	b00d883a 	mov	r6,r22
    9208:	000cb440 	call	cb44 <__ssprint_r>
    920c:	103a221e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    9210:	d8c02017 	ldw	r3,128(sp)
    9214:	d8801f17 	ldw	r2,124(sp)
    9218:	da000404 	addi	r8,sp,16
    921c:	db003317 	ldw	r12,204(sp)
    9220:	dac03117 	ldw	r11,196(sp)
    9224:	10800044 	addi	r2,r2,1
    9228:	1b07883a 	add	r3,r3,r12
    922c:	42c00015 	stw	r11,0(r8)
    9230:	43000115 	stw	r12,4(r8)
    9234:	d8c02015 	stw	r3,128(sp)
    9238:	d8801f15 	stw	r2,124(sp)
    923c:	010001c4 	movi	r4,7
    9240:	20bb210e 	bge	r4,r2,7ec8 <__alt_mem_Flash_flash_data+0xf4007ec8>
    9244:	003da206 	br	88d0 <__alt_mem_Flash_flash_data+0xf40088d0>
    9248:	d8802604 	addi	r2,sp,152
    924c:	d8800115 	stw	r2,4(sp)
    9250:	d9002f17 	ldw	r4,188(sp)
    9254:	d8802504 	addi	r2,sp,148
    9258:	d9403717 	ldw	r5,220(sp)
    925c:	d8800215 	stw	r2,8(sp)
    9260:	d8802104 	addi	r2,sp,132
    9264:	da400015 	stw	r9,0(sp)
    9268:	d8800315 	stw	r2,12(sp)
    926c:	900d883a 	mov	r6,r18
    9270:	01c000c4 	movi	r7,3
    9274:	da004015 	stw	r8,256(sp)
    9278:	da403f15 	stw	r9,252(sp)
    927c:	00099080 	call	9908 <_dtoa_r>
    9280:	da403f17 	ldw	r9,252(sp)
    9284:	da004017 	ldw	r8,256(sp)
    9288:	d8803115 	stw	r2,196(sp)
    928c:	4839883a 	mov	fp,r9
    9290:	dac03117 	ldw	r11,196(sp)
    9294:	00801184 	movi	r2,70
    9298:	5f15883a 	add	r10,r11,fp
    929c:	a8bf7c1e 	bne	r21,r2,9090 <__alt_mem_Flash_flash_data+0xf4009090>
    92a0:	59000007 	ldb	r4,0(r11)
    92a4:	00800c04 	movi	r2,48
    92a8:	2080c826 	beq	r4,r2,95cc <___svfprintf_internal_r+0x1e54>
    92ac:	d8c02617 	ldw	r3,152(sp)
    92b0:	50d5883a 	add	r10,r10,r3
    92b4:	003f7606 	br	9090 <__alt_mem_Flash_flash_data+0xf4009090>
    92b8:	010000b4 	movhi	r4,2
    92bc:	212ef484 	addi	r4,r4,-17454
    92c0:	d9003615 	stw	r4,216(sp)
    92c4:	003a9706 	br	7d24 <__alt_mem_Flash_flash_data+0xf4007d24>
    92c8:	0025883a 	mov	r18,zero
    92cc:	003dc306 	br	89dc <__alt_mem_Flash_flash_data+0xf40089dc>
    92d0:	d9002f17 	ldw	r4,188(sp)
    92d4:	b80b883a 	mov	r5,r23
    92d8:	b00d883a 	mov	r6,r22
    92dc:	000cb440 	call	cb44 <__ssprint_r>
    92e0:	1039ed1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    92e4:	d8c02017 	ldw	r3,128(sp)
    92e8:	da000404 	addi	r8,sp,16
    92ec:	003dba06 	br	89d8 <__alt_mem_Flash_flash_data+0xf40089d8>
    92f0:	d9002f17 	ldw	r4,188(sp)
    92f4:	b80b883a 	mov	r5,r23
    92f8:	b00d883a 	mov	r6,r22
    92fc:	000cb440 	call	cb44 <__ssprint_r>
    9300:	1039e51e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    9304:	d8802617 	ldw	r2,152(sp)
    9308:	d8c02017 	ldw	r3,128(sp)
    930c:	da000404 	addi	r8,sp,16
    9310:	003e4106 	br	8c18 <__alt_mem_Flash_flash_data+0xf4008c18>
    9314:	030000b4 	movhi	r12,2
    9318:	632ef084 	addi	r12,r12,-17470
    931c:	db002b15 	stw	r12,172(sp)
    9320:	dac02b17 	ldw	r11,172(sp)
    9324:	1c07883a 	add	r3,r3,r16
    9328:	10800044 	addi	r2,r2,1
    932c:	42c00015 	stw	r11,0(r8)
    9330:	44000115 	stw	r16,4(r8)
    9334:	d8c02015 	stw	r3,128(sp)
    9338:	d8801f15 	stw	r2,124(sp)
    933c:	010001c4 	movi	r4,7
    9340:	20bfae16 	blt	r4,r2,91fc <__alt_mem_Flash_flash_data+0xf40091fc>
    9344:	42000204 	addi	r8,r8,8
    9348:	003fb406 	br	921c <__alt_mem_Flash_flash_data+0xf400921c>
    934c:	0021883a 	mov	r16,zero
    9350:	003e4306 	br	8c60 <__alt_mem_Flash_flash_data+0xf4008c60>
    9354:	d9002f17 	ldw	r4,188(sp)
    9358:	b80b883a 	mov	r5,r23
    935c:	b00d883a 	mov	r6,r22
    9360:	000cb440 	call	cb44 <__ssprint_r>
    9364:	1039cc1e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    9368:	d8802617 	ldw	r2,152(sp)
    936c:	db003317 	ldw	r12,204(sp)
    9370:	d8c02017 	ldw	r3,128(sp)
    9374:	da000404 	addi	r8,sp,16
    9378:	6085c83a 	sub	r2,r12,r2
    937c:	003e3706 	br	8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    9380:	00800184 	movi	r2,6
    9384:	1240012e 	bgeu	r2,r9,938c <___svfprintf_internal_r+0x1c14>
    9388:	1013883a 	mov	r9,r2
    938c:	4825883a 	mov	r18,r9
    9390:	4805883a 	mov	r2,r9
    9394:	4800a216 	blt	r9,zero,9620 <___svfprintf_internal_r+0x1ea8>
    9398:	d8802a15 	stw	r2,168(sp)
    939c:	008000b4 	movhi	r2,2
    93a0:	10aeee04 	addi	r2,r2,-17480
    93a4:	d8803115 	stw	r2,196(sp)
    93a8:	dcc02d15 	stw	r19,180(sp)
    93ac:	d8003215 	stw	zero,200(sp)
    93b0:	d8003415 	stw	zero,208(sp)
    93b4:	0005883a 	mov	r2,zero
    93b8:	003a2206 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>
    93bc:	030000b4 	movhi	r12,2
    93c0:	632ef484 	addi	r12,r12,-17454
    93c4:	db003615 	stw	r12,216(sp)
    93c8:	003ae506 	br	7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    93cc:	d8c02617 	ldw	r3,152(sp)
    93d0:	00bfff44 	movi	r2,-3
    93d4:	18801516 	blt	r3,r2,942c <___svfprintf_internal_r+0x1cb4>
    93d8:	48c01416 	blt	r9,r3,942c <___svfprintf_internal_r+0x1cb4>
    93dc:	d8c03415 	stw	r3,208(sp)
    93e0:	040019c4 	movi	r16,103
    93e4:	003f4906 	br	910c <__alt_mem_Flash_flash_data+0xf400910c>
    93e8:	05400b44 	movi	r21,45
    93ec:	dd402785 	stb	r21,158(sp)
    93f0:	003b1006 	br	8034 <__alt_mem_Flash_flash_data+0xf4008034>
    93f4:	00c00b44 	movi	r3,45
    93f8:	d8802a15 	stw	r2,168(sp)
    93fc:	dc402d17 	ldw	r17,180(sp)
    9400:	d8c02785 	stb	r3,158(sp)
    9404:	dcc02d15 	stw	r19,180(sp)
    9408:	d8003215 	stw	zero,200(sp)
    940c:	00800b44 	movi	r2,45
    9410:	003a0906 	br	7c38 <__alt_mem_Flash_flash_data+0xf4007c38>
    9414:	010000b4 	movhi	r4,2
    9418:	212ef084 	addi	r4,r4,-17470
    941c:	d9002b15 	stw	r4,172(sp)
    9420:	003cc306 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    9424:	5005883a 	mov	r2,r10
    9428:	003f2d06 	br	90e0 <__alt_mem_Flash_flash_data+0xf40090e0>
    942c:	843fff84 	addi	r16,r16,-2
    9430:	1f3fffc4 	addi	fp,r3,-1
    9434:	df002615 	stw	fp,152(sp)
    9438:	dc0022c5 	stb	r16,139(sp)
    943c:	e000a016 	blt	fp,zero,96c0 <___svfprintf_internal_r+0x1f48>
    9440:	00800ac4 	movi	r2,43
    9444:	d8802305 	stb	r2,140(sp)
    9448:	00800244 	movi	r2,9
    944c:	1700800e 	bge	r2,fp,9650 <___svfprintf_internal_r+0x1ed8>
    9450:	dd4022c4 	addi	r21,sp,139
    9454:	dc002b15 	stw	r16,172(sp)
    9458:	4025883a 	mov	r18,r8
    945c:	a821883a 	mov	r16,r21
    9460:	e009883a 	mov	r4,fp
    9464:	01400284 	movi	r5,10
    9468:	0004d700 	call	4d70 <__modsi3>
    946c:	10800c04 	addi	r2,r2,48
    9470:	843fffc4 	addi	r16,r16,-1
    9474:	e009883a 	mov	r4,fp
    9478:	01400284 	movi	r5,10
    947c:	80800005 	stb	r2,0(r16)
    9480:	0004d1c0 	call	4d1c <__divsi3>
    9484:	1039883a 	mov	fp,r2
    9488:	00800244 	movi	r2,9
    948c:	173ff416 	blt	r2,fp,9460 <__alt_mem_Flash_flash_data+0xf4009460>
    9490:	9011883a 	mov	r8,r18
    9494:	e0800c04 	addi	r2,fp,48
    9498:	8025883a 	mov	r18,r16
    949c:	913fffc4 	addi	r4,r18,-1
    94a0:	90bfffc5 	stb	r2,-1(r18)
    94a4:	dc002b17 	ldw	r16,172(sp)
    94a8:	25408e2e 	bgeu	r4,r21,96e4 <___svfprintf_internal_r+0x1f6c>
    94ac:	d9402384 	addi	r5,sp,142
    94b0:	2c8bc83a 	sub	r5,r5,r18
    94b4:	d8c02344 	addi	r3,sp,141
    94b8:	a94b883a 	add	r5,r21,r5
    94bc:	00000106 	br	94c4 <___svfprintf_internal_r+0x1d4c>
    94c0:	20800003 	ldbu	r2,0(r4)
    94c4:	18800005 	stb	r2,0(r3)
    94c8:	18c00044 	addi	r3,r3,1
    94cc:	21000044 	addi	r4,r4,1
    94d0:	197ffb1e 	bne	r3,r5,94c0 <__alt_mem_Flash_flash_data+0xf40094c0>
    94d4:	d8802304 	addi	r2,sp,140
    94d8:	1485c83a 	sub	r2,r2,r18
    94dc:	d8c02344 	addi	r3,sp,141
    94e0:	1885883a 	add	r2,r3,r2
    94e4:	dac03317 	ldw	r11,204(sp)
    94e8:	156bc83a 	sub	r21,r2,r21
    94ec:	dd403a15 	stw	r21,232(sp)
    94f0:	00800044 	movi	r2,1
    94f4:	5d65883a 	add	r18,r11,r21
    94f8:	12c0770e 	bge	r2,r11,96d8 <___svfprintf_internal_r+0x1f60>
    94fc:	94800044 	addi	r18,r18,1
    9500:	9005883a 	mov	r2,r18
    9504:	90007216 	blt	r18,zero,96d0 <___svfprintf_internal_r+0x1f58>
    9508:	d8003415 	stw	zero,208(sp)
    950c:	003f0706 	br	912c <__alt_mem_Flash_flash_data+0xf400912c>
    9510:	da402a15 	stw	r9,168(sp)
    9514:	dd402783 	ldbu	r21,158(sp)
    9518:	4825883a 	mov	r18,r9
    951c:	dcc02d15 	stw	r19,180(sp)
    9520:	d8003215 	stw	zero,200(sp)
    9524:	d8003415 	stw	zero,208(sp)
    9528:	0039bf06 	br	7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    952c:	483eb21e 	bne	r9,zero,8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    9530:	9013883a 	mov	r9,r18
    9534:	003eb006 	br	8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    9538:	d9002f17 	ldw	r4,188(sp)
    953c:	b80b883a 	mov	r5,r23
    9540:	b00d883a 	mov	r6,r22
    9544:	000cb440 	call	cb44 <__ssprint_r>
    9548:	1039531e 	bne	r2,zero,7a98 <__alt_mem_Flash_flash_data+0xf4007a98>
    954c:	dc002617 	ldw	r16,152(sp)
    9550:	d8c02017 	ldw	r3,128(sp)
    9554:	d8801f17 	ldw	r2,124(sp)
    9558:	da000404 	addi	r8,sp,16
    955c:	003e7106 	br	8f24 <__alt_mem_Flash_flash_data+0xf4008f24>
    9560:	00c00b44 	movi	r3,45
    9564:	64a0003c 	xorhi	r18,r12,32768
    9568:	d8c02a05 	stb	r3,168(sp)
    956c:	003ea806 	br	9010 <__alt_mem_Flash_flash_data+0xf4009010>
    9570:	4f000044 	addi	fp,r9,1
    9574:	003ead06 	br	902c <__alt_mem_Flash_flash_data+0xf400902c>
    9578:	d8c03417 	ldw	r3,208(sp)
    957c:	00c0410e 	bge	zero,r3,9684 <___svfprintf_internal_r+0x1f0c>
    9580:	04800044 	movi	r18,1
    9584:	dac03317 	ldw	r11,204(sp)
    9588:	92e5883a 	add	r18,r18,r11
    958c:	9005883a 	mov	r2,r18
    9590:	903ee60e 	bge	r18,zero,912c <__alt_mem_Flash_flash_data+0xf400912c>
    9594:	0005883a 	mov	r2,zero
    9598:	003ee406 	br	912c <__alt_mem_Flash_flash_data+0xf400912c>
    959c:	d8c02617 	ldw	r3,152(sp)
    95a0:	d8c03415 	stw	r3,208(sp)
    95a4:	00c0310e 	bge	zero,r3,966c <___svfprintf_internal_r+0x1ef4>
    95a8:	48001f1e 	bne	r9,zero,9628 <___svfprintf_internal_r+0x1eb0>
    95ac:	8c40004c 	andi	r17,r17,1
    95b0:	88001d1e 	bne	r17,zero,9628 <___svfprintf_internal_r+0x1eb0>
    95b4:	1805883a 	mov	r2,r3
    95b8:	183edb0e 	bge	r3,zero,9128 <__alt_mem_Flash_flash_data+0xf4009128>
    95bc:	0005883a 	mov	r2,zero
    95c0:	003ed906 	br	9128 <__alt_mem_Flash_flash_data+0xf4009128>
    95c4:	d8802117 	ldw	r2,132(sp)
    95c8:	003ec506 	br	90e0 <__alt_mem_Flash_flash_data+0xf40090e0>
    95cc:	d9003717 	ldw	r4,220(sp)
    95d0:	900b883a 	mov	r5,r18
    95d4:	000d883a 	mov	r6,zero
    95d8:	000f883a 	mov	r7,zero
    95dc:	da004015 	stw	r8,256(sp)
    95e0:	da403f15 	stw	r9,252(sp)
    95e4:	da803e15 	stw	r10,248(sp)
    95e8:	00060780 	call	6078 <__eqdf2>
    95ec:	da004017 	ldw	r8,256(sp)
    95f0:	da403f17 	ldw	r9,252(sp)
    95f4:	da803e17 	ldw	r10,248(sp)
    95f8:	103f2c26 	beq	r2,zero,92ac <__alt_mem_Flash_flash_data+0xf40092ac>
    95fc:	00800044 	movi	r2,1
    9600:	1707c83a 	sub	r3,r2,fp
    9604:	d8c02615 	stw	r3,152(sp)
    9608:	003f2906 	br	92b0 <__alt_mem_Flash_flash_data+0xf40092b0>
    960c:	db003417 	ldw	r12,208(sp)
    9610:	64800044 	addi	r18,r12,1
    9614:	9005883a 	mov	r2,r18
    9618:	903ec40e 	bge	r18,zero,912c <__alt_mem_Flash_flash_data+0xf400912c>
    961c:	003fdd06 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    9620:	0005883a 	mov	r2,zero
    9624:	003f5c06 	br	9398 <__alt_mem_Flash_flash_data+0xf4009398>
    9628:	dac03417 	ldw	r11,208(sp)
    962c:	4a400044 	addi	r9,r9,1
    9630:	5a65883a 	add	r18,r11,r9
    9634:	9005883a 	mov	r2,r18
    9638:	903ebc0e 	bge	r18,zero,912c <__alt_mem_Flash_flash_data+0xf400912c>
    963c:	003fd506 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    9640:	008000b4 	movhi	r2,2
    9644:	10aef084 	addi	r2,r2,-17470
    9648:	d8802b15 	stw	r2,172(sp)
    964c:	003d2b06 	br	8afc <__alt_mem_Flash_flash_data+0xf4008afc>
    9650:	00800c04 	movi	r2,48
    9654:	e0c00c04 	addi	r3,fp,48
    9658:	d8802345 	stb	r2,141(sp)
    965c:	d8c02385 	stb	r3,142(sp)
    9660:	d88023c4 	addi	r2,sp,143
    9664:	dd4022c4 	addi	r21,sp,139
    9668:	003f9e06 	br	94e4 <__alt_mem_Flash_flash_data+0xf40094e4>
    966c:	4800081e 	bne	r9,zero,9690 <___svfprintf_internal_r+0x1f18>
    9670:	8c40004c 	andi	r17,r17,1
    9674:	8800061e 	bne	r17,zero,9690 <___svfprintf_internal_r+0x1f18>
    9678:	00800044 	movi	r2,1
    967c:	1025883a 	mov	r18,r2
    9680:	003eaa06 	br	912c <__alt_mem_Flash_flash_data+0xf400912c>
    9684:	04800084 	movi	r18,2
    9688:	90e5c83a 	sub	r18,r18,r3
    968c:	003fbd06 	br	9584 <__alt_mem_Flash_flash_data+0xf4009584>
    9690:	4c800084 	addi	r18,r9,2
    9694:	9005883a 	mov	r2,r18
    9698:	903ea40e 	bge	r18,zero,912c <__alt_mem_Flash_flash_data+0xf400912c>
    969c:	003fbd06 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    96a0:	dac02d17 	ldw	r11,180(sp)
    96a4:	5a400017 	ldw	r9,0(r11)
    96a8:	5ac00104 	addi	r11,r11,4
    96ac:	dac02d15 	stw	r11,180(sp)
    96b0:	483e410e 	bge	r9,zero,8fb8 <__alt_mem_Flash_flash_data+0xf4008fb8>
    96b4:	027fffc4 	movi	r9,-1
    96b8:	1c000047 	ldb	r16,1(r3)
    96bc:	00388406 	br	78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    96c0:	00800b44 	movi	r2,45
    96c4:	0739c83a 	sub	fp,zero,fp
    96c8:	d8802305 	stb	r2,140(sp)
    96cc:	003f5e06 	br	9448 <__alt_mem_Flash_flash_data+0xf4009448>
    96d0:	0005883a 	mov	r2,zero
    96d4:	003f8c06 	br	9508 <__alt_mem_Flash_flash_data+0xf4009508>
    96d8:	88a2703a 	and	r17,r17,r2
    96dc:	883f8826 	beq	r17,zero,9500 <__alt_mem_Flash_flash_data+0xf4009500>
    96e0:	003f8606 	br	94fc <__alt_mem_Flash_flash_data+0xf40094fc>
    96e4:	d8802344 	addi	r2,sp,141
    96e8:	003f7e06 	br	94e4 <__alt_mem_Flash_flash_data+0xf40094e4>
    96ec:	d8c02617 	ldw	r3,152(sp)
    96f0:	003f4f06 	br	9430 <__alt_mem_Flash_flash_data+0xf4009430>
    96f4:	dac02f17 	ldw	r11,188(sp)
    96f8:	00800304 	movi	r2,12
    96fc:	58800015 	stw	r2,0(r11)
    9700:	00bfffc4 	movi	r2,-1
    9704:	0038e806 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>

00009708 <quorem>:
    9708:	defff704 	addi	sp,sp,-36
    970c:	dc800215 	stw	r18,8(sp)
    9710:	20800417 	ldw	r2,16(r4)
    9714:	2c800417 	ldw	r18,16(r5)
    9718:	dfc00815 	stw	ra,32(sp)
    971c:	ddc00715 	stw	r23,28(sp)
    9720:	dd800615 	stw	r22,24(sp)
    9724:	dd400515 	stw	r21,20(sp)
    9728:	dd000415 	stw	r20,16(sp)
    972c:	dcc00315 	stw	r19,12(sp)
    9730:	dc400115 	stw	r17,4(sp)
    9734:	dc000015 	stw	r16,0(sp)
    9738:	14807116 	blt	r2,r18,9900 <quorem+0x1f8>
    973c:	94bfffc4 	addi	r18,r18,-1
    9740:	94ad883a 	add	r22,r18,r18
    9744:	b5ad883a 	add	r22,r22,r22
    9748:	2c400504 	addi	r17,r5,20
    974c:	8da9883a 	add	r20,r17,r22
    9750:	25400504 	addi	r21,r4,20
    9754:	282f883a 	mov	r23,r5
    9758:	adad883a 	add	r22,r21,r22
    975c:	a1400017 	ldw	r5,0(r20)
    9760:	2021883a 	mov	r16,r4
    9764:	b1000017 	ldw	r4,0(r22)
    9768:	29400044 	addi	r5,r5,1
    976c:	0004dcc0 	call	4dcc <__udivsi3>
    9770:	1027883a 	mov	r19,r2
    9774:	10002c26 	beq	r2,zero,9828 <quorem+0x120>
    9778:	a813883a 	mov	r9,r21
    977c:	8811883a 	mov	r8,r17
    9780:	0009883a 	mov	r4,zero
    9784:	000d883a 	mov	r6,zero
    9788:	41c00017 	ldw	r7,0(r8)
    978c:	49400017 	ldw	r5,0(r9)
    9790:	42000104 	addi	r8,r8,4
    9794:	38bfffcc 	andi	r2,r7,65535
    9798:	14c5383a 	mul	r2,r2,r19
    979c:	380ed43a 	srli	r7,r7,16
    97a0:	28ffffcc 	andi	r3,r5,65535
    97a4:	2085883a 	add	r2,r4,r2
    97a8:	1008d43a 	srli	r4,r2,16
    97ac:	3ccf383a 	mul	r7,r7,r19
    97b0:	198d883a 	add	r6,r3,r6
    97b4:	10ffffcc 	andi	r3,r2,65535
    97b8:	30c7c83a 	sub	r3,r6,r3
    97bc:	280ad43a 	srli	r5,r5,16
    97c0:	21c9883a 	add	r4,r4,r7
    97c4:	180dd43a 	srai	r6,r3,16
    97c8:	20bfffcc 	andi	r2,r4,65535
    97cc:	288bc83a 	sub	r5,r5,r2
    97d0:	298b883a 	add	r5,r5,r6
    97d4:	280e943a 	slli	r7,r5,16
    97d8:	18ffffcc 	andi	r3,r3,65535
    97dc:	2008d43a 	srli	r4,r4,16
    97e0:	38ceb03a 	or	r7,r7,r3
    97e4:	49c00015 	stw	r7,0(r9)
    97e8:	280dd43a 	srai	r6,r5,16
    97ec:	4a400104 	addi	r9,r9,4
    97f0:	a23fe52e 	bgeu	r20,r8,9788 <__alt_mem_Flash_flash_data+0xf4009788>
    97f4:	b0800017 	ldw	r2,0(r22)
    97f8:	10000b1e 	bne	r2,zero,9828 <quorem+0x120>
    97fc:	b0bfff04 	addi	r2,r22,-4
    9800:	a880082e 	bgeu	r21,r2,9824 <quorem+0x11c>
    9804:	b0ffff17 	ldw	r3,-4(r22)
    9808:	18000326 	beq	r3,zero,9818 <quorem+0x110>
    980c:	00000506 	br	9824 <quorem+0x11c>
    9810:	10c00017 	ldw	r3,0(r2)
    9814:	1800031e 	bne	r3,zero,9824 <quorem+0x11c>
    9818:	10bfff04 	addi	r2,r2,-4
    981c:	94bfffc4 	addi	r18,r18,-1
    9820:	a8bffb36 	bltu	r21,r2,9810 <__alt_mem_Flash_flash_data+0xf4009810>
    9824:	84800415 	stw	r18,16(r16)
    9828:	8009883a 	mov	r4,r16
    982c:	b80b883a 	mov	r5,r23
    9830:	000c2740 	call	c274 <__mcmp>
    9834:	10002616 	blt	r2,zero,98d0 <quorem+0x1c8>
    9838:	9cc00044 	addi	r19,r19,1
    983c:	a80d883a 	mov	r6,r21
    9840:	000b883a 	mov	r5,zero
    9844:	31000017 	ldw	r4,0(r6)
    9848:	88800017 	ldw	r2,0(r17)
    984c:	31800104 	addi	r6,r6,4
    9850:	20ffffcc 	andi	r3,r4,65535
    9854:	194b883a 	add	r5,r3,r5
    9858:	10ffffcc 	andi	r3,r2,65535
    985c:	28c7c83a 	sub	r3,r5,r3
    9860:	1004d43a 	srli	r2,r2,16
    9864:	2008d43a 	srli	r4,r4,16
    9868:	180bd43a 	srai	r5,r3,16
    986c:	18ffffcc 	andi	r3,r3,65535
    9870:	2089c83a 	sub	r4,r4,r2
    9874:	2149883a 	add	r4,r4,r5
    9878:	2004943a 	slli	r2,r4,16
    987c:	8c400104 	addi	r17,r17,4
    9880:	200bd43a 	srai	r5,r4,16
    9884:	10c6b03a 	or	r3,r2,r3
    9888:	30ffff15 	stw	r3,-4(r6)
    988c:	a47fed2e 	bgeu	r20,r17,9844 <__alt_mem_Flash_flash_data+0xf4009844>
    9890:	9485883a 	add	r2,r18,r18
    9894:	1085883a 	add	r2,r2,r2
    9898:	a887883a 	add	r3,r21,r2
    989c:	18800017 	ldw	r2,0(r3)
    98a0:	10000b1e 	bne	r2,zero,98d0 <quorem+0x1c8>
    98a4:	18bfff04 	addi	r2,r3,-4
    98a8:	a880082e 	bgeu	r21,r2,98cc <quorem+0x1c4>
    98ac:	18ffff17 	ldw	r3,-4(r3)
    98b0:	18000326 	beq	r3,zero,98c0 <quorem+0x1b8>
    98b4:	00000506 	br	98cc <quorem+0x1c4>
    98b8:	10c00017 	ldw	r3,0(r2)
    98bc:	1800031e 	bne	r3,zero,98cc <quorem+0x1c4>
    98c0:	10bfff04 	addi	r2,r2,-4
    98c4:	94bfffc4 	addi	r18,r18,-1
    98c8:	a8bffb36 	bltu	r21,r2,98b8 <__alt_mem_Flash_flash_data+0xf40098b8>
    98cc:	84800415 	stw	r18,16(r16)
    98d0:	9805883a 	mov	r2,r19
    98d4:	dfc00817 	ldw	ra,32(sp)
    98d8:	ddc00717 	ldw	r23,28(sp)
    98dc:	dd800617 	ldw	r22,24(sp)
    98e0:	dd400517 	ldw	r21,20(sp)
    98e4:	dd000417 	ldw	r20,16(sp)
    98e8:	dcc00317 	ldw	r19,12(sp)
    98ec:	dc800217 	ldw	r18,8(sp)
    98f0:	dc400117 	ldw	r17,4(sp)
    98f4:	dc000017 	ldw	r16,0(sp)
    98f8:	dec00904 	addi	sp,sp,36
    98fc:	f800283a 	ret
    9900:	0005883a 	mov	r2,zero
    9904:	003ff306 	br	98d4 <__alt_mem_Flash_flash_data+0xf40098d4>

00009908 <_dtoa_r>:
    9908:	20801017 	ldw	r2,64(r4)
    990c:	deffde04 	addi	sp,sp,-136
    9910:	dd401d15 	stw	r21,116(sp)
    9914:	dcc01b15 	stw	r19,108(sp)
    9918:	dc801a15 	stw	r18,104(sp)
    991c:	dc401915 	stw	r17,100(sp)
    9920:	dc001815 	stw	r16,96(sp)
    9924:	dfc02115 	stw	ra,132(sp)
    9928:	df002015 	stw	fp,128(sp)
    992c:	ddc01f15 	stw	r23,124(sp)
    9930:	dd801e15 	stw	r22,120(sp)
    9934:	dd001c15 	stw	r20,112(sp)
    9938:	d9c00315 	stw	r7,12(sp)
    993c:	2021883a 	mov	r16,r4
    9940:	302b883a 	mov	r21,r6
    9944:	2825883a 	mov	r18,r5
    9948:	dc402417 	ldw	r17,144(sp)
    994c:	3027883a 	mov	r19,r6
    9950:	10000826 	beq	r2,zero,9974 <_dtoa_r+0x6c>
    9954:	21801117 	ldw	r6,68(r4)
    9958:	00c00044 	movi	r3,1
    995c:	100b883a 	mov	r5,r2
    9960:	1986983a 	sll	r3,r3,r6
    9964:	11800115 	stw	r6,4(r2)
    9968:	10c00215 	stw	r3,8(r2)
    996c:	000ba480 	call	ba48 <_Bfree>
    9970:	80001015 	stw	zero,64(r16)
    9974:	a8002d16 	blt	r21,zero,9a2c <_dtoa_r+0x124>
    9978:	88000015 	stw	zero,0(r17)
    997c:	a8dffc2c 	andhi	r3,r21,32752
    9980:	009ffc34 	movhi	r2,32752
    9984:	18801b26 	beq	r3,r2,99f4 <_dtoa_r+0xec>
    9988:	9009883a 	mov	r4,r18
    998c:	980b883a 	mov	r5,r19
    9990:	000d883a 	mov	r6,zero
    9994:	000f883a 	mov	r7,zero
    9998:	00060780 	call	6078 <__eqdf2>
    999c:	10002a1e 	bne	r2,zero,9a48 <_dtoa_r+0x140>
    99a0:	d8c02317 	ldw	r3,140(sp)
    99a4:	d9002517 	ldw	r4,148(sp)
    99a8:	00800044 	movi	r2,1
    99ac:	18800015 	stw	r2,0(r3)
    99b0:	2001a226 	beq	r4,zero,a03c <_dtoa_r+0x734>
    99b4:	008000b4 	movhi	r2,2
    99b8:	10aef044 	addi	r2,r2,-17471
    99bc:	20800015 	stw	r2,0(r4)
    99c0:	10bfffc4 	addi	r2,r2,-1
    99c4:	dfc02117 	ldw	ra,132(sp)
    99c8:	df002017 	ldw	fp,128(sp)
    99cc:	ddc01f17 	ldw	r23,124(sp)
    99d0:	dd801e17 	ldw	r22,120(sp)
    99d4:	dd401d17 	ldw	r21,116(sp)
    99d8:	dd001c17 	ldw	r20,112(sp)
    99dc:	dcc01b17 	ldw	r19,108(sp)
    99e0:	dc801a17 	ldw	r18,104(sp)
    99e4:	dc401917 	ldw	r17,100(sp)
    99e8:	dc001817 	ldw	r16,96(sp)
    99ec:	dec02204 	addi	sp,sp,136
    99f0:	f800283a 	ret
    99f4:	d8c02317 	ldw	r3,140(sp)
    99f8:	0089c3c4 	movi	r2,9999
    99fc:	18800015 	stw	r2,0(r3)
    9a00:	90017c26 	beq	r18,zero,9ff4 <_dtoa_r+0x6ec>
    9a04:	008000b4 	movhi	r2,2
    9a08:	10aefc04 	addi	r2,r2,-17424
    9a0c:	d9002517 	ldw	r4,148(sp)
    9a10:	203fec26 	beq	r4,zero,99c4 <__alt_mem_Flash_flash_data+0xf40099c4>
    9a14:	10c000c7 	ldb	r3,3(r2)
    9a18:	18017d1e 	bne	r3,zero,a010 <_dtoa_r+0x708>
    9a1c:	10c000c4 	addi	r3,r2,3
    9a20:	d9802517 	ldw	r6,148(sp)
    9a24:	30c00015 	stw	r3,0(r6)
    9a28:	003fe606 	br	99c4 <__alt_mem_Flash_flash_data+0xf40099c4>
    9a2c:	04e00034 	movhi	r19,32768
    9a30:	9cffffc4 	addi	r19,r19,-1
    9a34:	00800044 	movi	r2,1
    9a38:	ace6703a 	and	r19,r21,r19
    9a3c:	88800015 	stw	r2,0(r17)
    9a40:	982b883a 	mov	r21,r19
    9a44:	003fcd06 	br	997c <__alt_mem_Flash_flash_data+0xf400997c>
    9a48:	d8800204 	addi	r2,sp,8
    9a4c:	a822d53a 	srli	r17,r21,20
    9a50:	d8800015 	stw	r2,0(sp)
    9a54:	8009883a 	mov	r4,r16
    9a58:	900b883a 	mov	r5,r18
    9a5c:	980d883a 	mov	r6,r19
    9a60:	d9c00104 	addi	r7,sp,4
    9a64:	000c5e80 	call	c5e8 <__d2b>
    9a68:	1039883a 	mov	fp,r2
    9a6c:	88016a1e 	bne	r17,zero,a018 <_dtoa_r+0x710>
    9a70:	dd000217 	ldw	r20,8(sp)
    9a74:	dc400117 	ldw	r17,4(sp)
    9a78:	00befbc4 	movi	r2,-1041
    9a7c:	a463883a 	add	r17,r20,r17
    9a80:	8882ea16 	blt	r17,r2,a62c <_dtoa_r+0xd24>
    9a84:	00bf0384 	movi	r2,-1010
    9a88:	1445c83a 	sub	r2,r2,r17
    9a8c:	89010484 	addi	r4,r17,1042
    9a90:	a8aa983a 	sll	r21,r21,r2
    9a94:	9108d83a 	srl	r4,r18,r4
    9a98:	a908b03a 	or	r4,r21,r4
    9a9c:	000f5580 	call	f558 <__floatunsidf>
    9aa0:	017f8434 	movhi	r5,65040
    9aa4:	01800044 	movi	r6,1
    9aa8:	1009883a 	mov	r4,r2
    9aac:	194b883a 	add	r5,r3,r5
    9ab0:	8c7fffc4 	addi	r17,r17,-1
    9ab4:	d9800f15 	stw	r6,60(sp)
    9ab8:	000d883a 	mov	r6,zero
    9abc:	01cffe34 	movhi	r7,16376
    9ac0:	00069e00 	call	69e0 <__subdf3>
    9ac4:	0198dbf4 	movhi	r6,25455
    9ac8:	01cff4f4 	movhi	r7,16339
    9acc:	1009883a 	mov	r4,r2
    9ad0:	180b883a 	mov	r5,r3
    9ad4:	3190d844 	addi	r6,r6,17249
    9ad8:	39e1e9c4 	addi	r7,r7,-30809
    9adc:	00062bc0 	call	62bc <__muldf3>
    9ae0:	01a2d874 	movhi	r6,35681
    9ae4:	01cff1f4 	movhi	r7,16327
    9ae8:	180b883a 	mov	r5,r3
    9aec:	31b22cc4 	addi	r6,r6,-14157
    9af0:	39e28a04 	addi	r7,r7,-30168
    9af4:	1009883a 	mov	r4,r2
    9af8:	0004f100 	call	4f10 <__adddf3>
    9afc:	8809883a 	mov	r4,r17
    9b00:	102d883a 	mov	r22,r2
    9b04:	182b883a 	mov	r21,r3
    9b08:	00073380 	call	7338 <__floatsidf>
    9b0c:	019427f4 	movhi	r6,20639
    9b10:	01cff4f4 	movhi	r7,16339
    9b14:	1009883a 	mov	r4,r2
    9b18:	180b883a 	mov	r5,r3
    9b1c:	319e7ec4 	addi	r6,r6,31227
    9b20:	39d104c4 	addi	r7,r7,17427
    9b24:	00062bc0 	call	62bc <__muldf3>
    9b28:	b009883a 	mov	r4,r22
    9b2c:	a80b883a 	mov	r5,r21
    9b30:	100d883a 	mov	r6,r2
    9b34:	180f883a 	mov	r7,r3
    9b38:	0004f100 	call	4f10 <__adddf3>
    9b3c:	1009883a 	mov	r4,r2
    9b40:	180b883a 	mov	r5,r3
    9b44:	102d883a 	mov	r22,r2
    9b48:	182b883a 	mov	r21,r3
    9b4c:	00072b00 	call	72b0 <__fixdfsi>
    9b50:	b009883a 	mov	r4,r22
    9b54:	a80b883a 	mov	r5,r21
    9b58:	000d883a 	mov	r6,zero
    9b5c:	000f883a 	mov	r7,zero
    9b60:	d8800515 	stw	r2,20(sp)
    9b64:	00061dc0 	call	61dc <__ledf2>
    9b68:	10023116 	blt	r2,zero,a430 <_dtoa_r+0xb28>
    9b6c:	d8c00517 	ldw	r3,20(sp)
    9b70:	00800584 	movi	r2,22
    9b74:	10c21f36 	bltu	r2,r3,a3f4 <_dtoa_r+0xaec>
    9b78:	180490fa 	slli	r2,r3,3
    9b7c:	00c000b4 	movhi	r3,2
    9b80:	18ef1804 	addi	r3,r3,-17312
    9b84:	1885883a 	add	r2,r3,r2
    9b88:	11000017 	ldw	r4,0(r2)
    9b8c:	11400117 	ldw	r5,4(r2)
    9b90:	900d883a 	mov	r6,r18
    9b94:	980f883a 	mov	r7,r19
    9b98:	00060fc0 	call	60fc <__gedf2>
    9b9c:	0082a70e 	bge	zero,r2,a63c <_dtoa_r+0xd34>
    9ba0:	d9000517 	ldw	r4,20(sp)
    9ba4:	d8000d15 	stw	zero,52(sp)
    9ba8:	213fffc4 	addi	r4,r4,-1
    9bac:	d9000515 	stw	r4,20(sp)
    9bb0:	a463c83a 	sub	r17,r20,r17
    9bb4:	8dbfffc4 	addi	r22,r17,-1
    9bb8:	b0021916 	blt	r22,zero,a420 <_dtoa_r+0xb18>
    9bbc:	d8000815 	stw	zero,32(sp)
    9bc0:	d8800517 	ldw	r2,20(sp)
    9bc4:	10020e16 	blt	r2,zero,a400 <_dtoa_r+0xaf8>
    9bc8:	b0ad883a 	add	r22,r22,r2
    9bcc:	d8800a15 	stw	r2,40(sp)
    9bd0:	d8000915 	stw	zero,36(sp)
    9bd4:	d8c00317 	ldw	r3,12(sp)
    9bd8:	00800244 	movi	r2,9
    9bdc:	10c11a36 	bltu	r2,r3,a048 <_dtoa_r+0x740>
    9be0:	00800144 	movi	r2,5
    9be4:	10c4fc0e 	bge	r2,r3,afd8 <_dtoa_r+0x16d0>
    9be8:	18ffff04 	addi	r3,r3,-4
    9bec:	d8c00315 	stw	r3,12(sp)
    9bf0:	0029883a 	mov	r20,zero
    9bf4:	d9800317 	ldw	r6,12(sp)
    9bf8:	008000c4 	movi	r2,3
    9bfc:	3083bd26 	beq	r6,r2,aaf4 <_dtoa_r+0x11ec>
    9c00:	1183670e 	bge	r2,r6,a9a0 <_dtoa_r+0x1098>
    9c04:	d8c00317 	ldw	r3,12(sp)
    9c08:	00800104 	movi	r2,4
    9c0c:	1882e726 	beq	r3,r2,a7ac <_dtoa_r+0xea4>
    9c10:	00800144 	movi	r2,5
    9c14:	1884f21e 	bne	r3,r2,afe0 <_dtoa_r+0x16d8>
    9c18:	00800044 	movi	r2,1
    9c1c:	d8800b15 	stw	r2,44(sp)
    9c20:	d8c02217 	ldw	r3,136(sp)
    9c24:	d9000517 	ldw	r4,20(sp)
    9c28:	1907883a 	add	r3,r3,r4
    9c2c:	19800044 	addi	r6,r3,1
    9c30:	d8c00c15 	stw	r3,48(sp)
    9c34:	d9800615 	stw	r6,24(sp)
    9c38:	0183c30e 	bge	zero,r6,ab48 <_dtoa_r+0x1240>
    9c3c:	d9800617 	ldw	r6,24(sp)
    9c40:	3023883a 	mov	r17,r6
    9c44:	80001115 	stw	zero,68(r16)
    9c48:	008005c4 	movi	r2,23
    9c4c:	1184f62e 	bgeu	r2,r6,b028 <_dtoa_r+0x1720>
    9c50:	00c00044 	movi	r3,1
    9c54:	00800104 	movi	r2,4
    9c58:	1085883a 	add	r2,r2,r2
    9c5c:	11000504 	addi	r4,r2,20
    9c60:	180b883a 	mov	r5,r3
    9c64:	18c00044 	addi	r3,r3,1
    9c68:	313ffb2e 	bgeu	r6,r4,9c58 <__alt_mem_Flash_flash_data+0xf4009c58>
    9c6c:	81401115 	stw	r5,68(r16)
    9c70:	8009883a 	mov	r4,r16
    9c74:	000b9a00 	call	b9a0 <_Balloc>
    9c78:	d8800715 	stw	r2,28(sp)
    9c7c:	80801015 	stw	r2,64(r16)
    9c80:	00800384 	movi	r2,14
    9c84:	1440fd36 	bltu	r2,r17,a07c <_dtoa_r+0x774>
    9c88:	a000fc26 	beq	r20,zero,a07c <_dtoa_r+0x774>
    9c8c:	d8800517 	ldw	r2,20(sp)
    9c90:	0083b90e 	bge	zero,r2,ab78 <_dtoa_r+0x1270>
    9c94:	d8c00517 	ldw	r3,20(sp)
    9c98:	108003cc 	andi	r2,r2,15
    9c9c:	100490fa 	slli	r2,r2,3
    9ca0:	182fd13a 	srai	r23,r3,4
    9ca4:	00c000b4 	movhi	r3,2
    9ca8:	18ef1804 	addi	r3,r3,-17312
    9cac:	1885883a 	add	r2,r3,r2
    9cb0:	b8c0040c 	andi	r3,r23,16
    9cb4:	12c00017 	ldw	r11,0(r2)
    9cb8:	12800117 	ldw	r10,4(r2)
    9cbc:	18039726 	beq	r3,zero,ab1c <_dtoa_r+0x1214>
    9cc0:	008000b4 	movhi	r2,2
    9cc4:	10af0e04 	addi	r2,r2,-17352
    9cc8:	11800817 	ldw	r6,32(r2)
    9ccc:	11c00917 	ldw	r7,36(r2)
    9cd0:	9009883a 	mov	r4,r18
    9cd4:	980b883a 	mov	r5,r19
    9cd8:	da801615 	stw	r10,88(sp)
    9cdc:	dac01515 	stw	r11,84(sp)
    9ce0:	00057ac0 	call	57ac <__divdf3>
    9ce4:	da801617 	ldw	r10,88(sp)
    9ce8:	dac01517 	ldw	r11,84(sp)
    9cec:	bdc003cc 	andi	r23,r23,15
    9cf0:	044000c4 	movi	r17,3
    9cf4:	d8800e15 	stw	r2,56(sp)
    9cf8:	182b883a 	mov	r21,r3
    9cfc:	b8001126 	beq	r23,zero,9d44 <_dtoa_r+0x43c>
    9d00:	050000b4 	movhi	r20,2
    9d04:	a52f0e04 	addi	r20,r20,-17352
    9d08:	5805883a 	mov	r2,r11
    9d0c:	5007883a 	mov	r3,r10
    9d10:	b980004c 	andi	r6,r23,1
    9d14:	1009883a 	mov	r4,r2
    9d18:	b82fd07a 	srai	r23,r23,1
    9d1c:	180b883a 	mov	r5,r3
    9d20:	30000426 	beq	r6,zero,9d34 <_dtoa_r+0x42c>
    9d24:	a1800017 	ldw	r6,0(r20)
    9d28:	a1c00117 	ldw	r7,4(r20)
    9d2c:	8c400044 	addi	r17,r17,1
    9d30:	00062bc0 	call	62bc <__muldf3>
    9d34:	a5000204 	addi	r20,r20,8
    9d38:	b83ff51e 	bne	r23,zero,9d10 <__alt_mem_Flash_flash_data+0xf4009d10>
    9d3c:	1017883a 	mov	r11,r2
    9d40:	1815883a 	mov	r10,r3
    9d44:	d9000e17 	ldw	r4,56(sp)
    9d48:	a80b883a 	mov	r5,r21
    9d4c:	580d883a 	mov	r6,r11
    9d50:	500f883a 	mov	r7,r10
    9d54:	00057ac0 	call	57ac <__divdf3>
    9d58:	1029883a 	mov	r20,r2
    9d5c:	182b883a 	mov	r21,r3
    9d60:	d9800d17 	ldw	r6,52(sp)
    9d64:	30000626 	beq	r6,zero,9d80 <_dtoa_r+0x478>
    9d68:	a009883a 	mov	r4,r20
    9d6c:	a80b883a 	mov	r5,r21
    9d70:	000d883a 	mov	r6,zero
    9d74:	01cffc34 	movhi	r7,16368
    9d78:	00061dc0 	call	61dc <__ledf2>
    9d7c:	10043216 	blt	r2,zero,ae48 <_dtoa_r+0x1540>
    9d80:	8809883a 	mov	r4,r17
    9d84:	00073380 	call	7338 <__floatsidf>
    9d88:	1009883a 	mov	r4,r2
    9d8c:	180b883a 	mov	r5,r3
    9d90:	a00d883a 	mov	r6,r20
    9d94:	a80f883a 	mov	r7,r21
    9d98:	00062bc0 	call	62bc <__muldf3>
    9d9c:	000d883a 	mov	r6,zero
    9da0:	1009883a 	mov	r4,r2
    9da4:	180b883a 	mov	r5,r3
    9da8:	01d00734 	movhi	r7,16412
    9dac:	0004f100 	call	4f10 <__adddf3>
    9db0:	1023883a 	mov	r17,r2
    9db4:	d9800617 	ldw	r6,24(sp)
    9db8:	00bf3034 	movhi	r2,64704
    9dbc:	1885883a 	add	r2,r3,r2
    9dc0:	d8800e15 	stw	r2,56(sp)
    9dc4:	30032e26 	beq	r6,zero,aa80 <_dtoa_r+0x1178>
    9dc8:	d8c00517 	ldw	r3,20(sp)
    9dcc:	da800617 	ldw	r10,24(sp)
    9dd0:	d8c01215 	stw	r3,72(sp)
    9dd4:	d9000b17 	ldw	r4,44(sp)
    9dd8:	2003b026 	beq	r4,zero,ac9c <_dtoa_r+0x1394>
    9ddc:	50bfffc4 	addi	r2,r10,-1
    9de0:	100490fa 	slli	r2,r2,3
    9de4:	00c000b4 	movhi	r3,2
    9de8:	18ef1804 	addi	r3,r3,-17312
    9dec:	1885883a 	add	r2,r3,r2
    9df0:	11800017 	ldw	r6,0(r2)
    9df4:	11c00117 	ldw	r7,4(r2)
    9df8:	d8800717 	ldw	r2,28(sp)
    9dfc:	0009883a 	mov	r4,zero
    9e00:	014ff834 	movhi	r5,16352
    9e04:	da801615 	stw	r10,88(sp)
    9e08:	15c00044 	addi	r23,r2,1
    9e0c:	00057ac0 	call	57ac <__divdf3>
    9e10:	d9c00e17 	ldw	r7,56(sp)
    9e14:	880d883a 	mov	r6,r17
    9e18:	1009883a 	mov	r4,r2
    9e1c:	180b883a 	mov	r5,r3
    9e20:	00069e00 	call	69e0 <__subdf3>
    9e24:	a80b883a 	mov	r5,r21
    9e28:	a009883a 	mov	r4,r20
    9e2c:	d8c01015 	stw	r3,64(sp)
    9e30:	d8800e15 	stw	r2,56(sp)
    9e34:	00072b00 	call	72b0 <__fixdfsi>
    9e38:	1009883a 	mov	r4,r2
    9e3c:	d8801715 	stw	r2,92(sp)
    9e40:	00073380 	call	7338 <__floatsidf>
    9e44:	a009883a 	mov	r4,r20
    9e48:	a80b883a 	mov	r5,r21
    9e4c:	100d883a 	mov	r6,r2
    9e50:	180f883a 	mov	r7,r3
    9e54:	00069e00 	call	69e0 <__subdf3>
    9e58:	da001717 	ldw	r8,92(sp)
    9e5c:	1829883a 	mov	r20,r3
    9e60:	d8c00717 	ldw	r3,28(sp)
    9e64:	d9000e17 	ldw	r4,56(sp)
    9e68:	d9401017 	ldw	r5,64(sp)
    9e6c:	42000c04 	addi	r8,r8,48
    9e70:	1023883a 	mov	r17,r2
    9e74:	1a000005 	stb	r8,0(r3)
    9e78:	880d883a 	mov	r6,r17
    9e7c:	a00f883a 	mov	r7,r20
    9e80:	402b883a 	mov	r21,r8
    9e84:	00060fc0 	call	60fc <__gedf2>
    9e88:	00844516 	blt	zero,r2,afa0 <_dtoa_r+0x1698>
    9e8c:	0009883a 	mov	r4,zero
    9e90:	014ffc34 	movhi	r5,16368
    9e94:	880d883a 	mov	r6,r17
    9e98:	a00f883a 	mov	r7,r20
    9e9c:	00069e00 	call	69e0 <__subdf3>
    9ea0:	d9000e17 	ldw	r4,56(sp)
    9ea4:	d9401017 	ldw	r5,64(sp)
    9ea8:	100d883a 	mov	r6,r2
    9eac:	180f883a 	mov	r7,r3
    9eb0:	00060fc0 	call	60fc <__gedf2>
    9eb4:	da801617 	ldw	r10,88(sp)
    9eb8:	00843616 	blt	zero,r2,af94 <_dtoa_r+0x168c>
    9ebc:	00800044 	movi	r2,1
    9ec0:	12806e0e 	bge	r2,r10,a07c <_dtoa_r+0x774>
    9ec4:	d9000717 	ldw	r4,28(sp)
    9ec8:	dd801315 	stw	r22,76(sp)
    9ecc:	dc001115 	stw	r16,68(sp)
    9ed0:	2295883a 	add	r10,r4,r10
    9ed4:	dcc01415 	stw	r19,80(sp)
    9ed8:	502d883a 	mov	r22,r10
    9edc:	dcc01017 	ldw	r19,64(sp)
    9ee0:	b821883a 	mov	r16,r23
    9ee4:	dc801015 	stw	r18,64(sp)
    9ee8:	dc800e17 	ldw	r18,56(sp)
    9eec:	00000906 	br	9f14 <_dtoa_r+0x60c>
    9ef0:	00069e00 	call	69e0 <__subdf3>
    9ef4:	1009883a 	mov	r4,r2
    9ef8:	180b883a 	mov	r5,r3
    9efc:	900d883a 	mov	r6,r18
    9f00:	980f883a 	mov	r7,r19
    9f04:	00061dc0 	call	61dc <__ledf2>
    9f08:	10040e16 	blt	r2,zero,af44 <_dtoa_r+0x163c>
    9f0c:	b821883a 	mov	r16,r23
    9f10:	bd841026 	beq	r23,r22,af54 <_dtoa_r+0x164c>
    9f14:	9009883a 	mov	r4,r18
    9f18:	980b883a 	mov	r5,r19
    9f1c:	000d883a 	mov	r6,zero
    9f20:	01d00934 	movhi	r7,16420
    9f24:	00062bc0 	call	62bc <__muldf3>
    9f28:	000d883a 	mov	r6,zero
    9f2c:	01d00934 	movhi	r7,16420
    9f30:	8809883a 	mov	r4,r17
    9f34:	a00b883a 	mov	r5,r20
    9f38:	1025883a 	mov	r18,r2
    9f3c:	1827883a 	mov	r19,r3
    9f40:	00062bc0 	call	62bc <__muldf3>
    9f44:	180b883a 	mov	r5,r3
    9f48:	1009883a 	mov	r4,r2
    9f4c:	1823883a 	mov	r17,r3
    9f50:	1029883a 	mov	r20,r2
    9f54:	00072b00 	call	72b0 <__fixdfsi>
    9f58:	1009883a 	mov	r4,r2
    9f5c:	102b883a 	mov	r21,r2
    9f60:	00073380 	call	7338 <__floatsidf>
    9f64:	a009883a 	mov	r4,r20
    9f68:	880b883a 	mov	r5,r17
    9f6c:	100d883a 	mov	r6,r2
    9f70:	180f883a 	mov	r7,r3
    9f74:	00069e00 	call	69e0 <__subdf3>
    9f78:	ad400c04 	addi	r21,r21,48
    9f7c:	1009883a 	mov	r4,r2
    9f80:	180b883a 	mov	r5,r3
    9f84:	900d883a 	mov	r6,r18
    9f88:	980f883a 	mov	r7,r19
    9f8c:	85400005 	stb	r21,0(r16)
    9f90:	1023883a 	mov	r17,r2
    9f94:	1829883a 	mov	r20,r3
    9f98:	00061dc0 	call	61dc <__ledf2>
    9f9c:	bdc00044 	addi	r23,r23,1
    9fa0:	0009883a 	mov	r4,zero
    9fa4:	014ffc34 	movhi	r5,16368
    9fa8:	880d883a 	mov	r6,r17
    9fac:	a00f883a 	mov	r7,r20
    9fb0:	103fcf0e 	bge	r2,zero,9ef0 <__alt_mem_Flash_flash_data+0xf4009ef0>
    9fb4:	d9801217 	ldw	r6,72(sp)
    9fb8:	dc001117 	ldw	r16,68(sp)
    9fbc:	d9800515 	stw	r6,20(sp)
    9fc0:	8009883a 	mov	r4,r16
    9fc4:	e00b883a 	mov	r5,fp
    9fc8:	000ba480 	call	ba48 <_Bfree>
    9fcc:	d8c00517 	ldw	r3,20(sp)
    9fd0:	d9002317 	ldw	r4,140(sp)
    9fd4:	d9802517 	ldw	r6,148(sp)
    9fd8:	b8000005 	stb	zero,0(r23)
    9fdc:	18800044 	addi	r2,r3,1
    9fe0:	20800015 	stw	r2,0(r4)
    9fe4:	30027226 	beq	r6,zero,a9b0 <_dtoa_r+0x10a8>
    9fe8:	35c00015 	stw	r23,0(r6)
    9fec:	d8800717 	ldw	r2,28(sp)
    9ff0:	003e7406 	br	99c4 <__alt_mem_Flash_flash_data+0xf40099c4>
    9ff4:	00800434 	movhi	r2,16
    9ff8:	10bfffc4 	addi	r2,r2,-1
    9ffc:	a8aa703a 	and	r21,r21,r2
    a000:	a83e801e 	bne	r21,zero,9a04 <__alt_mem_Flash_flash_data+0xf4009a04>
    a004:	008000b4 	movhi	r2,2
    a008:	10aef904 	addi	r2,r2,-17436
    a00c:	003e7f06 	br	9a0c <__alt_mem_Flash_flash_data+0xf4009a0c>
    a010:	10c00204 	addi	r3,r2,8
    a014:	003e8206 	br	9a20 <__alt_mem_Flash_flash_data+0xf4009a20>
    a018:	01400434 	movhi	r5,16
    a01c:	297fffc4 	addi	r5,r5,-1
    a020:	994a703a 	and	r5,r19,r5
    a024:	9009883a 	mov	r4,r18
    a028:	8c7f0044 	addi	r17,r17,-1023
    a02c:	294ffc34 	orhi	r5,r5,16368
    a030:	dd000217 	ldw	r20,8(sp)
    a034:	d8000f15 	stw	zero,60(sp)
    a038:	003e9f06 	br	9ab8 <__alt_mem_Flash_flash_data+0xf4009ab8>
    a03c:	008000b4 	movhi	r2,2
    a040:	10aef004 	addi	r2,r2,-17472
    a044:	003e5f06 	br	99c4 <__alt_mem_Flash_flash_data+0xf40099c4>
    a048:	80001115 	stw	zero,68(r16)
    a04c:	8009883a 	mov	r4,r16
    a050:	000b883a 	mov	r5,zero
    a054:	000b9a00 	call	b9a0 <_Balloc>
    a058:	01bfffc4 	movi	r6,-1
    a05c:	d8800715 	stw	r2,28(sp)
    a060:	80801015 	stw	r2,64(r16)
    a064:	00800044 	movi	r2,1
    a068:	d9800c15 	stw	r6,48(sp)
    a06c:	d8800b15 	stw	r2,44(sp)
    a070:	d9800615 	stw	r6,24(sp)
    a074:	d8002215 	stw	zero,136(sp)
    a078:	d8000315 	stw	zero,12(sp)
    a07c:	d8800117 	ldw	r2,4(sp)
    a080:	10008e16 	blt	r2,zero,a2bc <_dtoa_r+0x9b4>
    a084:	d9000517 	ldw	r4,20(sp)
    a088:	00c00384 	movi	r3,14
    a08c:	19008b16 	blt	r3,r4,a2bc <_dtoa_r+0x9b4>
    a090:	200490fa 	slli	r2,r4,3
    a094:	00c000b4 	movhi	r3,2
    a098:	d9802217 	ldw	r6,136(sp)
    a09c:	18ef1804 	addi	r3,r3,-17312
    a0a0:	1885883a 	add	r2,r3,r2
    a0a4:	14400017 	ldw	r17,0(r2)
    a0a8:	15000117 	ldw	r20,4(r2)
    a0ac:	3001c716 	blt	r6,zero,a7cc <_dtoa_r+0xec4>
    a0b0:	880d883a 	mov	r6,r17
    a0b4:	a00f883a 	mov	r7,r20
    a0b8:	9009883a 	mov	r4,r18
    a0bc:	980b883a 	mov	r5,r19
    a0c0:	00057ac0 	call	57ac <__divdf3>
    a0c4:	180b883a 	mov	r5,r3
    a0c8:	1009883a 	mov	r4,r2
    a0cc:	00072b00 	call	72b0 <__fixdfsi>
    a0d0:	1009883a 	mov	r4,r2
    a0d4:	102d883a 	mov	r22,r2
    a0d8:	00073380 	call	7338 <__floatsidf>
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	180b883a 	mov	r5,r3
    a0e4:	880d883a 	mov	r6,r17
    a0e8:	a00f883a 	mov	r7,r20
    a0ec:	00062bc0 	call	62bc <__muldf3>
    a0f0:	9009883a 	mov	r4,r18
    a0f4:	980b883a 	mov	r5,r19
    a0f8:	100d883a 	mov	r6,r2
    a0fc:	180f883a 	mov	r7,r3
    a100:	00069e00 	call	69e0 <__subdf3>
    a104:	d9000717 	ldw	r4,28(sp)
    a108:	d9800617 	ldw	r6,24(sp)
    a10c:	180b883a 	mov	r5,r3
    a110:	b0c00c04 	addi	r3,r22,48
    a114:	20c00005 	stb	r3,0(r4)
    a118:	25c00044 	addi	r23,r4,1
    a11c:	01000044 	movi	r4,1
    a120:	1011883a 	mov	r8,r2
    a124:	2807883a 	mov	r3,r5
    a128:	31003d26 	beq	r6,r4,a220 <_dtoa_r+0x918>
    a12c:	000d883a 	mov	r6,zero
    a130:	01d00934 	movhi	r7,16420
    a134:	1009883a 	mov	r4,r2
    a138:	00062bc0 	call	62bc <__muldf3>
    a13c:	1009883a 	mov	r4,r2
    a140:	180b883a 	mov	r5,r3
    a144:	000d883a 	mov	r6,zero
    a148:	000f883a 	mov	r7,zero
    a14c:	1027883a 	mov	r19,r2
    a150:	182b883a 	mov	r21,r3
    a154:	00060780 	call	6078 <__eqdf2>
    a158:	103f9926 	beq	r2,zero,9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a15c:	d8c00617 	ldw	r3,24(sp)
    a160:	d9000717 	ldw	r4,28(sp)
    a164:	b825883a 	mov	r18,r23
    a168:	18bfffc4 	addi	r2,r3,-1
    a16c:	20ad883a 	add	r22,r4,r2
    a170:	dc000315 	stw	r16,12(sp)
    a174:	00000a06 	br	a1a0 <_dtoa_r+0x898>
    a178:	00062bc0 	call	62bc <__muldf3>
    a17c:	1009883a 	mov	r4,r2
    a180:	180b883a 	mov	r5,r3
    a184:	000d883a 	mov	r6,zero
    a188:	000f883a 	mov	r7,zero
    a18c:	1027883a 	mov	r19,r2
    a190:	182b883a 	mov	r21,r3
    a194:	b825883a 	mov	r18,r23
    a198:	00060780 	call	6078 <__eqdf2>
    a19c:	10022626 	beq	r2,zero,aa38 <_dtoa_r+0x1130>
    a1a0:	880d883a 	mov	r6,r17
    a1a4:	a00f883a 	mov	r7,r20
    a1a8:	9809883a 	mov	r4,r19
    a1ac:	a80b883a 	mov	r5,r21
    a1b0:	00057ac0 	call	57ac <__divdf3>
    a1b4:	180b883a 	mov	r5,r3
    a1b8:	1009883a 	mov	r4,r2
    a1bc:	00072b00 	call	72b0 <__fixdfsi>
    a1c0:	1009883a 	mov	r4,r2
    a1c4:	1021883a 	mov	r16,r2
    a1c8:	00073380 	call	7338 <__floatsidf>
    a1cc:	1009883a 	mov	r4,r2
    a1d0:	180b883a 	mov	r5,r3
    a1d4:	880d883a 	mov	r6,r17
    a1d8:	a00f883a 	mov	r7,r20
    a1dc:	00062bc0 	call	62bc <__muldf3>
    a1e0:	9809883a 	mov	r4,r19
    a1e4:	a80b883a 	mov	r5,r21
    a1e8:	100d883a 	mov	r6,r2
    a1ec:	180f883a 	mov	r7,r3
    a1f0:	00069e00 	call	69e0 <__subdf3>
    a1f4:	82000c04 	addi	r8,r16,48
    a1f8:	92000005 	stb	r8,0(r18)
    a1fc:	1009883a 	mov	r4,r2
    a200:	180b883a 	mov	r5,r3
    a204:	000d883a 	mov	r6,zero
    a208:	01d00934 	movhi	r7,16420
    a20c:	1011883a 	mov	r8,r2
    a210:	bdc00044 	addi	r23,r23,1
    a214:	95bfd81e 	bne	r18,r22,a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a218:	802d883a 	mov	r22,r16
    a21c:	dc000317 	ldw	r16,12(sp)
    a220:	4009883a 	mov	r4,r8
    a224:	180b883a 	mov	r5,r3
    a228:	400d883a 	mov	r6,r8
    a22c:	180f883a 	mov	r7,r3
    a230:	0004f100 	call	4f10 <__adddf3>
    a234:	8809883a 	mov	r4,r17
    a238:	a00b883a 	mov	r5,r20
    a23c:	100d883a 	mov	r6,r2
    a240:	180f883a 	mov	r7,r3
    a244:	1027883a 	mov	r19,r2
    a248:	1825883a 	mov	r18,r3
    a24c:	00061dc0 	call	61dc <__ledf2>
    a250:	10000816 	blt	r2,zero,a274 <_dtoa_r+0x96c>
    a254:	8809883a 	mov	r4,r17
    a258:	a00b883a 	mov	r5,r20
    a25c:	980d883a 	mov	r6,r19
    a260:	900f883a 	mov	r7,r18
    a264:	00060780 	call	6078 <__eqdf2>
    a268:	103f551e 	bne	r2,zero,9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a26c:	b580004c 	andi	r22,r22,1
    a270:	b03f5326 	beq	r22,zero,9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a274:	bd7fffc3 	ldbu	r21,-1(r23)
    a278:	b8bfffc4 	addi	r2,r23,-1
    a27c:	1007883a 	mov	r3,r2
    a280:	01400e44 	movi	r5,57
    a284:	d9800717 	ldw	r6,28(sp)
    a288:	00000506 	br	a2a0 <_dtoa_r+0x998>
    a28c:	18ffffc4 	addi	r3,r3,-1
    a290:	30825e26 	beq	r6,r2,ac0c <_dtoa_r+0x1304>
    a294:	1d400003 	ldbu	r21,0(r3)
    a298:	102f883a 	mov	r23,r2
    a29c:	10bfffc4 	addi	r2,r2,-1
    a2a0:	a9003fcc 	andi	r4,r21,255
    a2a4:	2100201c 	xori	r4,r4,128
    a2a8:	213fe004 	addi	r4,r4,-128
    a2ac:	217ff726 	beq	r4,r5,a28c <__alt_mem_Flash_flash_data+0xf400a28c>
    a2b0:	aa000044 	addi	r8,r21,1
    a2b4:	12000005 	stb	r8,0(r2)
    a2b8:	003f4106 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a2bc:	d8c00b17 	ldw	r3,44(sp)
    a2c0:	18006726 	beq	r3,zero,a460 <_dtoa_r+0xb58>
    a2c4:	d9000317 	ldw	r4,12(sp)
    a2c8:	00c00044 	movi	r3,1
    a2cc:	19016a0e 	bge	r3,r4,a878 <_dtoa_r+0xf70>
    a2d0:	d8800617 	ldw	r2,24(sp)
    a2d4:	d8c00917 	ldw	r3,36(sp)
    a2d8:	157fffc4 	addi	r21,r2,-1
    a2dc:	1d420716 	blt	r3,r21,aafc <_dtoa_r+0x11f4>
    a2e0:	1d6bc83a 	sub	r21,r3,r21
    a2e4:	d8800617 	ldw	r2,24(sp)
    a2e8:	1002c716 	blt	r2,zero,ae08 <_dtoa_r+0x1500>
    a2ec:	dd000817 	ldw	r20,32(sp)
    a2f0:	d8800617 	ldw	r2,24(sp)
    a2f4:	d9800817 	ldw	r6,32(sp)
    a2f8:	8009883a 	mov	r4,r16
    a2fc:	01400044 	movi	r5,1
    a300:	308d883a 	add	r6,r6,r2
    a304:	d9800815 	stw	r6,32(sp)
    a308:	b0ad883a 	add	r22,r22,r2
    a30c:	000bdac0 	call	bdac <__i2b>
    a310:	1023883a 	mov	r17,r2
    a314:	a0000826 	beq	r20,zero,a338 <_dtoa_r+0xa30>
    a318:	0580070e 	bge	zero,r22,a338 <_dtoa_r+0xa30>
    a31c:	b005883a 	mov	r2,r22
    a320:	a5812016 	blt	r20,r22,a7a4 <_dtoa_r+0xe9c>
    a324:	d8c00817 	ldw	r3,32(sp)
    a328:	a0a9c83a 	sub	r20,r20,r2
    a32c:	b0adc83a 	sub	r22,r22,r2
    a330:	1887c83a 	sub	r3,r3,r2
    a334:	d8c00815 	stw	r3,32(sp)
    a338:	d9000917 	ldw	r4,36(sp)
    a33c:	0100140e 	bge	zero,r4,a390 <_dtoa_r+0xa88>
    a340:	d9800b17 	ldw	r6,44(sp)
    a344:	3001e526 	beq	r6,zero,aadc <_dtoa_r+0x11d4>
    a348:	05400e0e 	bge	zero,r21,a384 <_dtoa_r+0xa7c>
    a34c:	880b883a 	mov	r5,r17
    a350:	8009883a 	mov	r4,r16
    a354:	a80d883a 	mov	r6,r21
    a358:	000bfe40 	call	bfe4 <__pow5mult>
    a35c:	e00d883a 	mov	r6,fp
    a360:	8009883a 	mov	r4,r16
    a364:	100b883a 	mov	r5,r2
    a368:	1023883a 	mov	r17,r2
    a36c:	000bde80 	call	bde8 <__multiply>
    a370:	102f883a 	mov	r23,r2
    a374:	e00b883a 	mov	r5,fp
    a378:	8009883a 	mov	r4,r16
    a37c:	000ba480 	call	ba48 <_Bfree>
    a380:	b839883a 	mov	fp,r23
    a384:	d8800917 	ldw	r2,36(sp)
    a388:	154dc83a 	sub	r6,r2,r21
    a38c:	3001281e 	bne	r6,zero,a830 <_dtoa_r+0xf28>
    a390:	05c00044 	movi	r23,1
    a394:	8009883a 	mov	r4,r16
    a398:	b80b883a 	mov	r5,r23
    a39c:	000bdac0 	call	bdac <__i2b>
    a3a0:	d8c00a17 	ldw	r3,40(sp)
    a3a4:	102b883a 	mov	r21,r2
    a3a8:	00c0310e 	bge	zero,r3,a470 <_dtoa_r+0xb68>
    a3ac:	8009883a 	mov	r4,r16
    a3b0:	100b883a 	mov	r5,r2
    a3b4:	180d883a 	mov	r6,r3
    a3b8:	000bfe40 	call	bfe4 <__pow5mult>
    a3bc:	d9000317 	ldw	r4,12(sp)
    a3c0:	102b883a 	mov	r21,r2
    a3c4:	b9011f0e 	bge	r23,r4,a844 <_dtoa_r+0xf3c>
    a3c8:	0027883a 	mov	r19,zero
    a3cc:	a8800417 	ldw	r2,16(r21)
    a3d0:	10800104 	addi	r2,r2,4
    a3d4:	1085883a 	add	r2,r2,r2
    a3d8:	1085883a 	add	r2,r2,r2
    a3dc:	a885883a 	add	r2,r21,r2
    a3e0:	11000017 	ldw	r4,0(r2)
    a3e4:	000bc940 	call	bc94 <__hi0bits>
    a3e8:	00c00804 	movi	r3,32
    a3ec:	1885c83a 	sub	r2,r3,r2
    a3f0:	00002506 	br	a488 <_dtoa_r+0xb80>
    a3f4:	01800044 	movi	r6,1
    a3f8:	d9800d15 	stw	r6,52(sp)
    a3fc:	003dec06 	br	9bb0 <__alt_mem_Flash_flash_data+0xf4009bb0>
    a400:	d8c00817 	ldw	r3,32(sp)
    a404:	d9000517 	ldw	r4,20(sp)
    a408:	d8000a15 	stw	zero,40(sp)
    a40c:	1907c83a 	sub	r3,r3,r4
    a410:	010dc83a 	sub	r6,zero,r4
    a414:	d8c00815 	stw	r3,32(sp)
    a418:	d9800915 	stw	r6,36(sp)
    a41c:	003ded06 	br	9bd4 <__alt_mem_Flash_flash_data+0xf4009bd4>
    a420:	05adc83a 	sub	r22,zero,r22
    a424:	dd800815 	stw	r22,32(sp)
    a428:	002d883a 	mov	r22,zero
    a42c:	003de406 	br	9bc0 <__alt_mem_Flash_flash_data+0xf4009bc0>
    a430:	d9000517 	ldw	r4,20(sp)
    a434:	00073380 	call	7338 <__floatsidf>
    a438:	1009883a 	mov	r4,r2
    a43c:	180b883a 	mov	r5,r3
    a440:	b00d883a 	mov	r6,r22
    a444:	a80f883a 	mov	r7,r21
    a448:	00060780 	call	6078 <__eqdf2>
    a44c:	103dc726 	beq	r2,zero,9b6c <__alt_mem_Flash_flash_data+0xf4009b6c>
    a450:	d8800517 	ldw	r2,20(sp)
    a454:	10bfffc4 	addi	r2,r2,-1
    a458:	d8800515 	stw	r2,20(sp)
    a45c:	003dc306 	br	9b6c <__alt_mem_Flash_flash_data+0xf4009b6c>
    a460:	dd400917 	ldw	r21,36(sp)
    a464:	dd000817 	ldw	r20,32(sp)
    a468:	0023883a 	mov	r17,zero
    a46c:	003fa906 	br	a314 <__alt_mem_Flash_flash_data+0xf400a314>
    a470:	d9800317 	ldw	r6,12(sp)
    a474:	b981670e 	bge	r23,r6,aa14 <_dtoa_r+0x110c>
    a478:	0027883a 	mov	r19,zero
    a47c:	d8c00a17 	ldw	r3,40(sp)
    a480:	183fd21e 	bne	r3,zero,a3cc <__alt_mem_Flash_flash_data+0xf400a3cc>
    a484:	00800044 	movi	r2,1
    a488:	1585883a 	add	r2,r2,r22
    a48c:	108007cc 	andi	r2,r2,31
    a490:	10005f26 	beq	r2,zero,a610 <_dtoa_r+0xd08>
    a494:	00c00804 	movi	r3,32
    a498:	1887c83a 	sub	r3,r3,r2
    a49c:	01000104 	movi	r4,4
    a4a0:	20c2dd0e 	bge	r4,r3,b018 <_dtoa_r+0x1710>
    a4a4:	d9000817 	ldw	r4,32(sp)
    a4a8:	00c00704 	movi	r3,28
    a4ac:	1885c83a 	sub	r2,r3,r2
    a4b0:	2089883a 	add	r4,r4,r2
    a4b4:	d9000815 	stw	r4,32(sp)
    a4b8:	a0a9883a 	add	r20,r20,r2
    a4bc:	b0ad883a 	add	r22,r22,r2
    a4c0:	d8800817 	ldw	r2,32(sp)
    a4c4:	0080050e 	bge	zero,r2,a4dc <_dtoa_r+0xbd4>
    a4c8:	e00b883a 	mov	r5,fp
    a4cc:	8009883a 	mov	r4,r16
    a4d0:	100d883a 	mov	r6,r2
    a4d4:	000c1240 	call	c124 <__lshift>
    a4d8:	1039883a 	mov	fp,r2
    a4dc:	0580050e 	bge	zero,r22,a4f4 <_dtoa_r+0xbec>
    a4e0:	a80b883a 	mov	r5,r21
    a4e4:	8009883a 	mov	r4,r16
    a4e8:	b00d883a 	mov	r6,r22
    a4ec:	000c1240 	call	c124 <__lshift>
    a4f0:	102b883a 	mov	r21,r2
    a4f4:	d8c00d17 	ldw	r3,52(sp)
    a4f8:	1801161e 	bne	r3,zero,a954 <_dtoa_r+0x104c>
    a4fc:	d8c00617 	ldw	r3,24(sp)
    a500:	00c12d0e 	bge	zero,r3,a9b8 <_dtoa_r+0x10b0>
    a504:	d8c00b17 	ldw	r3,44(sp)
    a508:	1800571e 	bne	r3,zero,a668 <_dtoa_r+0xd60>
    a50c:	dc800717 	ldw	r18,28(sp)
    a510:	dcc00617 	ldw	r19,24(sp)
    a514:	9029883a 	mov	r20,r18
    a518:	00000206 	br	a524 <_dtoa_r+0xc1c>
    a51c:	000ba700 	call	ba70 <__multadd>
    a520:	1039883a 	mov	fp,r2
    a524:	e009883a 	mov	r4,fp
    a528:	a80b883a 	mov	r5,r21
    a52c:	00097080 	call	9708 <quorem>
    a530:	10800c04 	addi	r2,r2,48
    a534:	90800005 	stb	r2,0(r18)
    a538:	94800044 	addi	r18,r18,1
    a53c:	9507c83a 	sub	r3,r18,r20
    a540:	8009883a 	mov	r4,r16
    a544:	e00b883a 	mov	r5,fp
    a548:	01800284 	movi	r6,10
    a54c:	000f883a 	mov	r7,zero
    a550:	1cfff216 	blt	r3,r19,a51c <__alt_mem_Flash_flash_data+0xf400a51c>
    a554:	1011883a 	mov	r8,r2
    a558:	d8800617 	ldw	r2,24(sp)
    a55c:	00822e0e 	bge	zero,r2,ae18 <_dtoa_r+0x1510>
    a560:	d9000717 	ldw	r4,28(sp)
    a564:	0025883a 	mov	r18,zero
    a568:	20af883a 	add	r23,r4,r2
    a56c:	e00b883a 	mov	r5,fp
    a570:	01800044 	movi	r6,1
    a574:	8009883a 	mov	r4,r16
    a578:	da001715 	stw	r8,92(sp)
    a57c:	000c1240 	call	c124 <__lshift>
    a580:	1009883a 	mov	r4,r2
    a584:	a80b883a 	mov	r5,r21
    a588:	1039883a 	mov	fp,r2
    a58c:	000c2740 	call	c274 <__mcmp>
    a590:	da001717 	ldw	r8,92(sp)
    a594:	00816e0e 	bge	zero,r2,ab50 <_dtoa_r+0x1248>
    a598:	b93fffc3 	ldbu	r4,-1(r23)
    a59c:	b8bfffc4 	addi	r2,r23,-1
    a5a0:	1007883a 	mov	r3,r2
    a5a4:	01800e44 	movi	r6,57
    a5a8:	d9c00717 	ldw	r7,28(sp)
    a5ac:	00000506 	br	a5c4 <_dtoa_r+0xcbc>
    a5b0:	18ffffc4 	addi	r3,r3,-1
    a5b4:	38811926 	beq	r7,r2,aa1c <_dtoa_r+0x1114>
    a5b8:	19000003 	ldbu	r4,0(r3)
    a5bc:	102f883a 	mov	r23,r2
    a5c0:	10bfffc4 	addi	r2,r2,-1
    a5c4:	21403fcc 	andi	r5,r4,255
    a5c8:	2940201c 	xori	r5,r5,128
    a5cc:	297fe004 	addi	r5,r5,-128
    a5d0:	29bff726 	beq	r5,r6,a5b0 <__alt_mem_Flash_flash_data+0xf400a5b0>
    a5d4:	21000044 	addi	r4,r4,1
    a5d8:	11000005 	stb	r4,0(r2)
    a5dc:	8009883a 	mov	r4,r16
    a5e0:	a80b883a 	mov	r5,r21
    a5e4:	000ba480 	call	ba48 <_Bfree>
    a5e8:	883e7526 	beq	r17,zero,9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a5ec:	90000426 	beq	r18,zero,a600 <_dtoa_r+0xcf8>
    a5f0:	94400326 	beq	r18,r17,a600 <_dtoa_r+0xcf8>
    a5f4:	8009883a 	mov	r4,r16
    a5f8:	900b883a 	mov	r5,r18
    a5fc:	000ba480 	call	ba48 <_Bfree>
    a600:	8009883a 	mov	r4,r16
    a604:	880b883a 	mov	r5,r17
    a608:	000ba480 	call	ba48 <_Bfree>
    a60c:	003e6c06 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a610:	00800704 	movi	r2,28
    a614:	d9800817 	ldw	r6,32(sp)
    a618:	a0a9883a 	add	r20,r20,r2
    a61c:	b0ad883a 	add	r22,r22,r2
    a620:	308d883a 	add	r6,r6,r2
    a624:	d9800815 	stw	r6,32(sp)
    a628:	003fa506 	br	a4c0 <__alt_mem_Flash_flash_data+0xf400a4c0>
    a62c:	013efb84 	movi	r4,-1042
    a630:	246bc83a 	sub	r21,r4,r17
    a634:	9548983a 	sll	r4,r18,r21
    a638:	003d1806 	br	9a9c <__alt_mem_Flash_flash_data+0xf4009a9c>
    a63c:	d8000d15 	stw	zero,52(sp)
    a640:	003d5b06 	br	9bb0 <__alt_mem_Flash_flash_data+0xf4009bb0>
    a644:	880b883a 	mov	r5,r17
    a648:	8009883a 	mov	r4,r16
    a64c:	01800284 	movi	r6,10
    a650:	000f883a 	mov	r7,zero
    a654:	000ba700 	call	ba70 <__multadd>
    a658:	1023883a 	mov	r17,r2
    a65c:	d8800c17 	ldw	r2,48(sp)
    a660:	0082550e 	bge	zero,r2,afb8 <_dtoa_r+0x16b0>
    a664:	d8800615 	stw	r2,24(sp)
    a668:	0500050e 	bge	zero,r20,a680 <_dtoa_r+0xd78>
    a66c:	880b883a 	mov	r5,r17
    a670:	8009883a 	mov	r4,r16
    a674:	a00d883a 	mov	r6,r20
    a678:	000c1240 	call	c124 <__lshift>
    a67c:	1023883a 	mov	r17,r2
    a680:	98016a1e 	bne	r19,zero,ac2c <_dtoa_r+0x1324>
    a684:	8829883a 	mov	r20,r17
    a688:	d9000617 	ldw	r4,24(sp)
    a68c:	dcc00717 	ldw	r19,28(sp)
    a690:	9480004c 	andi	r18,r18,1
    a694:	20bfffc4 	addi	r2,r4,-1
    a698:	9885883a 	add	r2,r19,r2
    a69c:	d8800415 	stw	r2,16(sp)
    a6a0:	dc800615 	stw	r18,24(sp)
    a6a4:	e009883a 	mov	r4,fp
    a6a8:	a80b883a 	mov	r5,r21
    a6ac:	00097080 	call	9708 <quorem>
    a6b0:	e009883a 	mov	r4,fp
    a6b4:	880b883a 	mov	r5,r17
    a6b8:	102f883a 	mov	r23,r2
    a6bc:	000c2740 	call	c274 <__mcmp>
    a6c0:	8009883a 	mov	r4,r16
    a6c4:	a80b883a 	mov	r5,r21
    a6c8:	a00d883a 	mov	r6,r20
    a6cc:	102d883a 	mov	r22,r2
    a6d0:	000c2d40 	call	c2d4 <__mdiff>
    a6d4:	1007883a 	mov	r3,r2
    a6d8:	10800317 	ldw	r2,12(r2)
    a6dc:	bc800c04 	addi	r18,r23,48
    a6e0:	1000971e 	bne	r2,zero,a940 <_dtoa_r+0x1038>
    a6e4:	180b883a 	mov	r5,r3
    a6e8:	e009883a 	mov	r4,fp
    a6ec:	d8c01515 	stw	r3,84(sp)
    a6f0:	000c2740 	call	c274 <__mcmp>
    a6f4:	d8c01517 	ldw	r3,84(sp)
    a6f8:	8009883a 	mov	r4,r16
    a6fc:	d8801515 	stw	r2,84(sp)
    a700:	180b883a 	mov	r5,r3
    a704:	000ba480 	call	ba48 <_Bfree>
    a708:	d8801517 	ldw	r2,84(sp)
    a70c:	1000041e 	bne	r2,zero,a720 <_dtoa_r+0xe18>
    a710:	d9800317 	ldw	r6,12(sp)
    a714:	3000021e 	bne	r6,zero,a720 <_dtoa_r+0xe18>
    a718:	d8c00617 	ldw	r3,24(sp)
    a71c:	18007626 	beq	r3,zero,a8f8 <_dtoa_r+0xff0>
    a720:	b0005b16 	blt	r22,zero,a890 <_dtoa_r+0xf88>
    a724:	b000041e 	bne	r22,zero,a738 <_dtoa_r+0xe30>
    a728:	d9000317 	ldw	r4,12(sp)
    a72c:	2000021e 	bne	r4,zero,a738 <_dtoa_r+0xe30>
    a730:	d8c00617 	ldw	r3,24(sp)
    a734:	18005626 	beq	r3,zero,a890 <_dtoa_r+0xf88>
    a738:	00814d16 	blt	zero,r2,ac70 <_dtoa_r+0x1368>
    a73c:	d8c00417 	ldw	r3,16(sp)
    a740:	9d800044 	addi	r22,r19,1
    a744:	9c800005 	stb	r18,0(r19)
    a748:	b02f883a 	mov	r23,r22
    a74c:	98c14c26 	beq	r19,r3,ac80 <_dtoa_r+0x1378>
    a750:	e00b883a 	mov	r5,fp
    a754:	8009883a 	mov	r4,r16
    a758:	01800284 	movi	r6,10
    a75c:	000f883a 	mov	r7,zero
    a760:	000ba700 	call	ba70 <__multadd>
    a764:	1039883a 	mov	fp,r2
    a768:	8d006d26 	beq	r17,r20,a920 <_dtoa_r+0x1018>
    a76c:	880b883a 	mov	r5,r17
    a770:	01800284 	movi	r6,10
    a774:	000f883a 	mov	r7,zero
    a778:	8009883a 	mov	r4,r16
    a77c:	000ba700 	call	ba70 <__multadd>
    a780:	a00b883a 	mov	r5,r20
    a784:	8009883a 	mov	r4,r16
    a788:	01800284 	movi	r6,10
    a78c:	000f883a 	mov	r7,zero
    a790:	1023883a 	mov	r17,r2
    a794:	000ba700 	call	ba70 <__multadd>
    a798:	1029883a 	mov	r20,r2
    a79c:	b027883a 	mov	r19,r22
    a7a0:	003fc006 	br	a6a4 <__alt_mem_Flash_flash_data+0xf400a6a4>
    a7a4:	a005883a 	mov	r2,r20
    a7a8:	003ede06 	br	a324 <__alt_mem_Flash_flash_data+0xf400a324>
    a7ac:	01000044 	movi	r4,1
    a7b0:	d9000b15 	stw	r4,44(sp)
    a7b4:	d9802217 	ldw	r6,136(sp)
    a7b8:	0180dc0e 	bge	zero,r6,ab2c <_dtoa_r+0x1224>
    a7bc:	3023883a 	mov	r17,r6
    a7c0:	d9800c15 	stw	r6,48(sp)
    a7c4:	d9800615 	stw	r6,24(sp)
    a7c8:	003d1e06 	br	9c44 <__alt_mem_Flash_flash_data+0xf4009c44>
    a7cc:	d8800617 	ldw	r2,24(sp)
    a7d0:	00be3716 	blt	zero,r2,a0b0 <__alt_mem_Flash_flash_data+0xf400a0b0>
    a7d4:	1000be1e 	bne	r2,zero,aad0 <_dtoa_r+0x11c8>
    a7d8:	8809883a 	mov	r4,r17
    a7dc:	a00b883a 	mov	r5,r20
    a7e0:	000d883a 	mov	r6,zero
    a7e4:	01d00534 	movhi	r7,16404
    a7e8:	00062bc0 	call	62bc <__muldf3>
    a7ec:	1009883a 	mov	r4,r2
    a7f0:	180b883a 	mov	r5,r3
    a7f4:	900d883a 	mov	r6,r18
    a7f8:	980f883a 	mov	r7,r19
    a7fc:	00060fc0 	call	60fc <__gedf2>
    a800:	002b883a 	mov	r21,zero
    a804:	0023883a 	mov	r17,zero
    a808:	10007a16 	blt	r2,zero,a9f4 <_dtoa_r+0x10ec>
    a80c:	d9002217 	ldw	r4,136(sp)
    a810:	ddc00717 	ldw	r23,28(sp)
    a814:	0108303a 	nor	r4,zero,r4
    a818:	d9000515 	stw	r4,20(sp)
    a81c:	8009883a 	mov	r4,r16
    a820:	a80b883a 	mov	r5,r21
    a824:	000ba480 	call	ba48 <_Bfree>
    a828:	883f751e 	bne	r17,zero,a600 <__alt_mem_Flash_flash_data+0xf400a600>
    a82c:	003de406 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    a830:	e00b883a 	mov	r5,fp
    a834:	8009883a 	mov	r4,r16
    a838:	000bfe40 	call	bfe4 <__pow5mult>
    a83c:	1039883a 	mov	fp,r2
    a840:	003ed306 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a844:	903ee01e 	bne	r18,zero,a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a848:	00800434 	movhi	r2,16
    a84c:	10bfffc4 	addi	r2,r2,-1
    a850:	9884703a 	and	r2,r19,r2
    a854:	103f081e 	bne	r2,zero,a478 <__alt_mem_Flash_flash_data+0xf400a478>
    a858:	9cdffc2c 	andhi	r19,r19,32752
    a85c:	983f0626 	beq	r19,zero,a478 <__alt_mem_Flash_flash_data+0xf400a478>
    a860:	d8800817 	ldw	r2,32(sp)
    a864:	b5800044 	addi	r22,r22,1
    a868:	04c00044 	movi	r19,1
    a86c:	10800044 	addi	r2,r2,1
    a870:	d8800815 	stw	r2,32(sp)
    a874:	003f0106 	br	a47c <__alt_mem_Flash_flash_data+0xf400a47c>
    a878:	d9800f17 	ldw	r6,60(sp)
    a87c:	30016826 	beq	r6,zero,ae20 <_dtoa_r+0x1518>
    a880:	10810cc4 	addi	r2,r2,1075
    a884:	dd400917 	ldw	r21,36(sp)
    a888:	dd000817 	ldw	r20,32(sp)
    a88c:	003e9906 	br	a2f4 <__alt_mem_Flash_flash_data+0xf400a2f4>
    a890:	9011883a 	mov	r8,r18
    a894:	4007883a 	mov	r3,r8
    a898:	e02d883a 	mov	r22,fp
    a89c:	0080100e 	bge	zero,r2,a8e0 <_dtoa_r+0xfd8>
    a8a0:	01800044 	movi	r6,1
    a8a4:	8009883a 	mov	r4,r16
    a8a8:	e00b883a 	mov	r5,fp
    a8ac:	da001515 	stw	r8,84(sp)
    a8b0:	da001715 	stw	r8,92(sp)
    a8b4:	000c1240 	call	c124 <__lshift>
    a8b8:	1009883a 	mov	r4,r2
    a8bc:	a80b883a 	mov	r5,r21
    a8c0:	102d883a 	mov	r22,r2
    a8c4:	000c2740 	call	c274 <__mcmp>
    a8c8:	d8c01517 	ldw	r3,84(sp)
    a8cc:	da001717 	ldw	r8,92(sp)
    a8d0:	0081a50e 	bge	zero,r2,af68 <_dtoa_r+0x1660>
    a8d4:	00800e44 	movi	r2,57
    a8d8:	40817b26 	beq	r8,r2,aec8 <_dtoa_r+0x15c0>
    a8dc:	40c00044 	addi	r3,r8,1
    a8e0:	8825883a 	mov	r18,r17
    a8e4:	9dc00044 	addi	r23,r19,1
    a8e8:	98c00005 	stb	r3,0(r19)
    a8ec:	a023883a 	mov	r17,r20
    a8f0:	b039883a 	mov	fp,r22
    a8f4:	003f3906 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a8f8:	00800e44 	movi	r2,57
    a8fc:	9011883a 	mov	r8,r18
    a900:	90817226 	beq	r18,r2,aecc <_dtoa_r+0x15c4>
    a904:	0580010e 	bge	zero,r22,a90c <_dtoa_r+0x1004>
    a908:	ba000c44 	addi	r8,r23,49
    a90c:	8825883a 	mov	r18,r17
    a910:	9dc00044 	addi	r23,r19,1
    a914:	9a000005 	stb	r8,0(r19)
    a918:	a023883a 	mov	r17,r20
    a91c:	003f2f06 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a920:	880b883a 	mov	r5,r17
    a924:	8009883a 	mov	r4,r16
    a928:	01800284 	movi	r6,10
    a92c:	000f883a 	mov	r7,zero
    a930:	000ba700 	call	ba70 <__multadd>
    a934:	1023883a 	mov	r17,r2
    a938:	1029883a 	mov	r20,r2
    a93c:	003f9706 	br	a79c <__alt_mem_Flash_flash_data+0xf400a79c>
    a940:	8009883a 	mov	r4,r16
    a944:	180b883a 	mov	r5,r3
    a948:	000ba480 	call	ba48 <_Bfree>
    a94c:	00800044 	movi	r2,1
    a950:	003f7306 	br	a720 <__alt_mem_Flash_flash_data+0xf400a720>
    a954:	e009883a 	mov	r4,fp
    a958:	a80b883a 	mov	r5,r21
    a95c:	000c2740 	call	c274 <__mcmp>
    a960:	103ee60e 	bge	r2,zero,a4fc <__alt_mem_Flash_flash_data+0xf400a4fc>
    a964:	8009883a 	mov	r4,r16
    a968:	e00b883a 	mov	r5,fp
    a96c:	01800284 	movi	r6,10
    a970:	000f883a 	mov	r7,zero
    a974:	000ba700 	call	ba70 <__multadd>
    a978:	d9000517 	ldw	r4,20(sp)
    a97c:	d9800b17 	ldw	r6,44(sp)
    a980:	1039883a 	mov	fp,r2
    a984:	213fffc4 	addi	r4,r4,-1
    a988:	d9000515 	stw	r4,20(sp)
    a98c:	303f2d1e 	bne	r6,zero,a644 <__alt_mem_Flash_flash_data+0xf400a644>
    a990:	d9000c17 	ldw	r4,48(sp)
    a994:	0101780e 	bge	zero,r4,af78 <_dtoa_r+0x1670>
    a998:	d9000615 	stw	r4,24(sp)
    a99c:	003edb06 	br	a50c <__alt_mem_Flash_flash_data+0xf400a50c>
    a9a0:	00800084 	movi	r2,2
    a9a4:	30818e1e 	bne	r6,r2,afe0 <_dtoa_r+0x16d8>
    a9a8:	d8000b15 	stw	zero,44(sp)
    a9ac:	003f8106 	br	a7b4 <__alt_mem_Flash_flash_data+0xf400a7b4>
    a9b0:	d8800717 	ldw	r2,28(sp)
    a9b4:	003c0306 	br	99c4 <__alt_mem_Flash_flash_data+0xf40099c4>
    a9b8:	d9000317 	ldw	r4,12(sp)
    a9bc:	00800084 	movi	r2,2
    a9c0:	113ed00e 	bge	r2,r4,a504 <__alt_mem_Flash_flash_data+0xf400a504>
    a9c4:	d8c00617 	ldw	r3,24(sp)
    a9c8:	183f901e 	bne	r3,zero,a80c <__alt_mem_Flash_flash_data+0xf400a80c>
    a9cc:	a80b883a 	mov	r5,r21
    a9d0:	8009883a 	mov	r4,r16
    a9d4:	01800144 	movi	r6,5
    a9d8:	000f883a 	mov	r7,zero
    a9dc:	000ba700 	call	ba70 <__multadd>
    a9e0:	e009883a 	mov	r4,fp
    a9e4:	100b883a 	mov	r5,r2
    a9e8:	102b883a 	mov	r21,r2
    a9ec:	000c2740 	call	c274 <__mcmp>
    a9f0:	00bf860e 	bge	zero,r2,a80c <__alt_mem_Flash_flash_data+0xf400a80c>
    a9f4:	d9800717 	ldw	r6,28(sp)
    a9f8:	00800c44 	movi	r2,49
    a9fc:	30800005 	stb	r2,0(r6)
    aa00:	d8800517 	ldw	r2,20(sp)
    aa04:	35c00044 	addi	r23,r6,1
    aa08:	10800044 	addi	r2,r2,1
    aa0c:	d8800515 	stw	r2,20(sp)
    aa10:	003f8206 	br	a81c <__alt_mem_Flash_flash_data+0xf400a81c>
    aa14:	903e981e 	bne	r18,zero,a478 <__alt_mem_Flash_flash_data+0xf400a478>
    aa18:	003f8b06 	br	a848 <__alt_mem_Flash_flash_data+0xf400a848>
    aa1c:	d9800517 	ldw	r6,20(sp)
    aa20:	d8c00717 	ldw	r3,28(sp)
    aa24:	00800c44 	movi	r2,49
    aa28:	31800044 	addi	r6,r6,1
    aa2c:	d9800515 	stw	r6,20(sp)
    aa30:	18800005 	stb	r2,0(r3)
    aa34:	003ee906 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    aa38:	dc000317 	ldw	r16,12(sp)
    aa3c:	003d6006 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    aa40:	8809883a 	mov	r4,r17
    aa44:	00073380 	call	7338 <__floatsidf>
    aa48:	a009883a 	mov	r4,r20
    aa4c:	a80b883a 	mov	r5,r21
    aa50:	100d883a 	mov	r6,r2
    aa54:	180f883a 	mov	r7,r3
    aa58:	00062bc0 	call	62bc <__muldf3>
    aa5c:	1009883a 	mov	r4,r2
    aa60:	180b883a 	mov	r5,r3
    aa64:	000d883a 	mov	r6,zero
    aa68:	01d00734 	movhi	r7,16412
    aa6c:	0004f100 	call	4f10 <__adddf3>
    aa70:	1023883a 	mov	r17,r2
    aa74:	00bf3034 	movhi	r2,64704
    aa78:	1885883a 	add	r2,r3,r2
    aa7c:	d8800e15 	stw	r2,56(sp)
    aa80:	a009883a 	mov	r4,r20
    aa84:	a80b883a 	mov	r5,r21
    aa88:	000d883a 	mov	r6,zero
    aa8c:	01d00534 	movhi	r7,16404
    aa90:	00069e00 	call	69e0 <__subdf3>
    aa94:	d9c00e17 	ldw	r7,56(sp)
    aa98:	1009883a 	mov	r4,r2
    aa9c:	180b883a 	mov	r5,r3
    aaa0:	880d883a 	mov	r6,r17
    aaa4:	102b883a 	mov	r21,r2
    aaa8:	1829883a 	mov	r20,r3
    aaac:	00060fc0 	call	60fc <__gedf2>
    aab0:	00807716 	blt	zero,r2,ac90 <_dtoa_r+0x1388>
    aab4:	d8800e17 	ldw	r2,56(sp)
    aab8:	a809883a 	mov	r4,r21
    aabc:	a00b883a 	mov	r5,r20
    aac0:	11e0003c 	xorhi	r7,r2,32768
    aac4:	880d883a 	mov	r6,r17
    aac8:	00061dc0 	call	61dc <__ledf2>
    aacc:	103d6b0e 	bge	r2,zero,a07c <__alt_mem_Flash_flash_data+0xf400a07c>
    aad0:	002b883a 	mov	r21,zero
    aad4:	0023883a 	mov	r17,zero
    aad8:	003f4c06 	br	a80c <__alt_mem_Flash_flash_data+0xf400a80c>
    aadc:	d9800917 	ldw	r6,36(sp)
    aae0:	e00b883a 	mov	r5,fp
    aae4:	8009883a 	mov	r4,r16
    aae8:	000bfe40 	call	bfe4 <__pow5mult>
    aaec:	1039883a 	mov	fp,r2
    aaf0:	003e2706 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    aaf4:	d8000b15 	stw	zero,44(sp)
    aaf8:	003c4906 	br	9c20 <__alt_mem_Flash_flash_data+0xf4009c20>
    aafc:	d9000917 	ldw	r4,36(sp)
    ab00:	d9800a17 	ldw	r6,40(sp)
    ab04:	dd400915 	stw	r21,36(sp)
    ab08:	a905c83a 	sub	r2,r21,r4
    ab0c:	308d883a 	add	r6,r6,r2
    ab10:	d9800a15 	stw	r6,40(sp)
    ab14:	002b883a 	mov	r21,zero
    ab18:	003df206 	br	a2e4 <__alt_mem_Flash_flash_data+0xf400a2e4>
    ab1c:	dc800e15 	stw	r18,56(sp)
    ab20:	982b883a 	mov	r21,r19
    ab24:	04400084 	movi	r17,2
    ab28:	003c7406 	br	9cfc <__alt_mem_Flash_flash_data+0xf4009cfc>
    ab2c:	04400044 	movi	r17,1
    ab30:	dc400c15 	stw	r17,48(sp)
    ab34:	dc400615 	stw	r17,24(sp)
    ab38:	dc402215 	stw	r17,136(sp)
    ab3c:	80001115 	stw	zero,68(r16)
    ab40:	000b883a 	mov	r5,zero
    ab44:	003c4a06 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    ab48:	3023883a 	mov	r17,r6
    ab4c:	003ffb06 	br	ab3c <__alt_mem_Flash_flash_data+0xf400ab3c>
    ab50:	1000021e 	bne	r2,zero,ab5c <_dtoa_r+0x1254>
    ab54:	4200004c 	andi	r8,r8,1
    ab58:	403e8f1e 	bne	r8,zero,a598 <__alt_mem_Flash_flash_data+0xf400a598>
    ab5c:	01000c04 	movi	r4,48
    ab60:	00000106 	br	ab68 <_dtoa_r+0x1260>
    ab64:	102f883a 	mov	r23,r2
    ab68:	b8bfffc4 	addi	r2,r23,-1
    ab6c:	10c00007 	ldb	r3,0(r2)
    ab70:	193ffc26 	beq	r3,r4,ab64 <__alt_mem_Flash_flash_data+0xf400ab64>
    ab74:	003e9906 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    ab78:	d9000517 	ldw	r4,20(sp)
    ab7c:	012fc83a 	sub	r23,zero,r4
    ab80:	b800ad26 	beq	r23,zero,ae38 <_dtoa_r+0x1530>
    ab84:	b88003cc 	andi	r2,r23,15
    ab88:	100490fa 	slli	r2,r2,3
    ab8c:	00c000b4 	movhi	r3,2
    ab90:	18ef1804 	addi	r3,r3,-17312
    ab94:	1885883a 	add	r2,r3,r2
    ab98:	11800017 	ldw	r6,0(r2)
    ab9c:	11c00117 	ldw	r7,4(r2)
    aba0:	b82fd13a 	srai	r23,r23,4
    aba4:	9009883a 	mov	r4,r18
    aba8:	980b883a 	mov	r5,r19
    abac:	00062bc0 	call	62bc <__muldf3>
    abb0:	1029883a 	mov	r20,r2
    abb4:	182b883a 	mov	r21,r3
    abb8:	b800f426 	beq	r23,zero,af8c <_dtoa_r+0x1684>
    abbc:	020000b4 	movhi	r8,2
    abc0:	422f0e04 	addi	r8,r8,-17352
    abc4:	8029883a 	mov	r20,r16
    abc8:	04400084 	movi	r17,2
    abcc:	4021883a 	mov	r16,r8
    abd0:	b980004c 	andi	r6,r23,1
    abd4:	1009883a 	mov	r4,r2
    abd8:	b82fd07a 	srai	r23,r23,1
    abdc:	180b883a 	mov	r5,r3
    abe0:	30000426 	beq	r6,zero,abf4 <_dtoa_r+0x12ec>
    abe4:	81800017 	ldw	r6,0(r16)
    abe8:	81c00117 	ldw	r7,4(r16)
    abec:	8c400044 	addi	r17,r17,1
    abf0:	00062bc0 	call	62bc <__muldf3>
    abf4:	84000204 	addi	r16,r16,8
    abf8:	b83ff51e 	bne	r23,zero,abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    abfc:	a021883a 	mov	r16,r20
    ac00:	182b883a 	mov	r21,r3
    ac04:	1029883a 	mov	r20,r2
    ac08:	003c5506 	br	9d60 <__alt_mem_Flash_flash_data+0xf4009d60>
    ac0c:	d9800517 	ldw	r6,20(sp)
    ac10:	d9000717 	ldw	r4,28(sp)
    ac14:	00c00c04 	movi	r3,48
    ac18:	31800044 	addi	r6,r6,1
    ac1c:	d9800515 	stw	r6,20(sp)
    ac20:	20c00005 	stb	r3,0(r4)
    ac24:	02000c44 	movi	r8,49
    ac28:	003da206 	br	a2b4 <__alt_mem_Flash_flash_data+0xf400a2b4>
    ac2c:	89400117 	ldw	r5,4(r17)
    ac30:	8009883a 	mov	r4,r16
    ac34:	000b9a00 	call	b9a0 <_Balloc>
    ac38:	89800417 	ldw	r6,16(r17)
    ac3c:	11000304 	addi	r4,r2,12
    ac40:	89400304 	addi	r5,r17,12
    ac44:	31800084 	addi	r6,r6,2
    ac48:	318d883a 	add	r6,r6,r6
    ac4c:	318d883a 	add	r6,r6,r6
    ac50:	1027883a 	mov	r19,r2
    ac54:	000757c0 	call	757c <memcpy>
    ac58:	8009883a 	mov	r4,r16
    ac5c:	980b883a 	mov	r5,r19
    ac60:	01800044 	movi	r6,1
    ac64:	000c1240 	call	c124 <__lshift>
    ac68:	1029883a 	mov	r20,r2
    ac6c:	003e8606 	br	a688 <__alt_mem_Flash_flash_data+0xf400a688>
    ac70:	00800e44 	movi	r2,57
    ac74:	90809526 	beq	r18,r2,aecc <_dtoa_r+0x15c4>
    ac78:	92000044 	addi	r8,r18,1
    ac7c:	003f2306 	br	a90c <__alt_mem_Flash_flash_data+0xf400a90c>
    ac80:	9011883a 	mov	r8,r18
    ac84:	8825883a 	mov	r18,r17
    ac88:	a023883a 	mov	r17,r20
    ac8c:	003e3706 	br	a56c <__alt_mem_Flash_flash_data+0xf400a56c>
    ac90:	002b883a 	mov	r21,zero
    ac94:	0023883a 	mov	r17,zero
    ac98:	003f5606 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ac9c:	51bfffc4 	addi	r6,r10,-1
    aca0:	300490fa 	slli	r2,r6,3
    aca4:	00c000b4 	movhi	r3,2
    aca8:	18ef1804 	addi	r3,r3,-17312
    acac:	1885883a 	add	r2,r3,r2
    acb0:	d9c00e17 	ldw	r7,56(sp)
    acb4:	11000017 	ldw	r4,0(r2)
    acb8:	11400117 	ldw	r5,4(r2)
    acbc:	d8800717 	ldw	r2,28(sp)
    acc0:	d9801015 	stw	r6,64(sp)
    acc4:	880d883a 	mov	r6,r17
    acc8:	da801615 	stw	r10,88(sp)
    accc:	15c00044 	addi	r23,r2,1
    acd0:	00062bc0 	call	62bc <__muldf3>
    acd4:	a80b883a 	mov	r5,r21
    acd8:	a009883a 	mov	r4,r20
    acdc:	d8c01115 	stw	r3,68(sp)
    ace0:	d8800e15 	stw	r2,56(sp)
    ace4:	00072b00 	call	72b0 <__fixdfsi>
    ace8:	1009883a 	mov	r4,r2
    acec:	1023883a 	mov	r17,r2
    acf0:	00073380 	call	7338 <__floatsidf>
    acf4:	a009883a 	mov	r4,r20
    acf8:	a80b883a 	mov	r5,r21
    acfc:	100d883a 	mov	r6,r2
    ad00:	180f883a 	mov	r7,r3
    ad04:	00069e00 	call	69e0 <__subdf3>
    ad08:	1813883a 	mov	r9,r3
    ad0c:	d8c00717 	ldw	r3,28(sp)
    ad10:	8c400c04 	addi	r17,r17,48
    ad14:	1011883a 	mov	r8,r2
    ad18:	1c400005 	stb	r17,0(r3)
    ad1c:	da801617 	ldw	r10,88(sp)
    ad20:	00800044 	movi	r2,1
    ad24:	50802326 	beq	r10,r2,adb4 <_dtoa_r+0x14ac>
    ad28:	d8800717 	ldw	r2,28(sp)
    ad2c:	b82b883a 	mov	r21,r23
    ad30:	dc001315 	stw	r16,76(sp)
    ad34:	12a9883a 	add	r20,r2,r10
    ad38:	4807883a 	mov	r3,r9
    ad3c:	4005883a 	mov	r2,r8
    ad40:	dc801415 	stw	r18,80(sp)
    ad44:	000d883a 	mov	r6,zero
    ad48:	01d00934 	movhi	r7,16420
    ad4c:	1009883a 	mov	r4,r2
    ad50:	180b883a 	mov	r5,r3
    ad54:	00062bc0 	call	62bc <__muldf3>
    ad58:	180b883a 	mov	r5,r3
    ad5c:	1009883a 	mov	r4,r2
    ad60:	1821883a 	mov	r16,r3
    ad64:	1025883a 	mov	r18,r2
    ad68:	00072b00 	call	72b0 <__fixdfsi>
    ad6c:	1009883a 	mov	r4,r2
    ad70:	1023883a 	mov	r17,r2
    ad74:	00073380 	call	7338 <__floatsidf>
    ad78:	9009883a 	mov	r4,r18
    ad7c:	800b883a 	mov	r5,r16
    ad80:	100d883a 	mov	r6,r2
    ad84:	180f883a 	mov	r7,r3
    ad88:	8c400c04 	addi	r17,r17,48
    ad8c:	00069e00 	call	69e0 <__subdf3>
    ad90:	ad400044 	addi	r21,r21,1
    ad94:	ac7fffc5 	stb	r17,-1(r21)
    ad98:	ad3fea1e 	bne	r21,r20,ad44 <__alt_mem_Flash_flash_data+0xf400ad44>
    ad9c:	1813883a 	mov	r9,r3
    ada0:	d8c01017 	ldw	r3,64(sp)
    ada4:	dc001317 	ldw	r16,76(sp)
    ada8:	dc801417 	ldw	r18,80(sp)
    adac:	1011883a 	mov	r8,r2
    adb0:	b8ef883a 	add	r23,r23,r3
    adb4:	d9000e17 	ldw	r4,56(sp)
    adb8:	d9401117 	ldw	r5,68(sp)
    adbc:	000d883a 	mov	r6,zero
    adc0:	01cff834 	movhi	r7,16352
    adc4:	da001715 	stw	r8,92(sp)
    adc8:	da401515 	stw	r9,84(sp)
    adcc:	0004f100 	call	4f10 <__adddf3>
    add0:	da001717 	ldw	r8,92(sp)
    add4:	da401517 	ldw	r9,84(sp)
    add8:	1009883a 	mov	r4,r2
    addc:	400d883a 	mov	r6,r8
    ade0:	480f883a 	mov	r7,r9
    ade4:	180b883a 	mov	r5,r3
    ade8:	00061dc0 	call	61dc <__ledf2>
    adec:	da001717 	ldw	r8,92(sp)
    adf0:	da401517 	ldw	r9,84(sp)
    adf4:	10003b0e 	bge	r2,zero,aee4 <_dtoa_r+0x15dc>
    adf8:	d9001217 	ldw	r4,72(sp)
    adfc:	bd7fffc3 	ldbu	r21,-1(r23)
    ae00:	d9000515 	stw	r4,20(sp)
    ae04:	003d1c06 	br	a278 <__alt_mem_Flash_flash_data+0xf400a278>
    ae08:	d8c00817 	ldw	r3,32(sp)
    ae0c:	18a9c83a 	sub	r20,r3,r2
    ae10:	0005883a 	mov	r2,zero
    ae14:	003d3706 	br	a2f4 <__alt_mem_Flash_flash_data+0xf400a2f4>
    ae18:	00800044 	movi	r2,1
    ae1c:	003dd006 	br	a560 <__alt_mem_Flash_flash_data+0xf400a560>
    ae20:	d8c00217 	ldw	r3,8(sp)
    ae24:	00800d84 	movi	r2,54
    ae28:	dd400917 	ldw	r21,36(sp)
    ae2c:	10c5c83a 	sub	r2,r2,r3
    ae30:	dd000817 	ldw	r20,32(sp)
    ae34:	003d2f06 	br	a2f4 <__alt_mem_Flash_flash_data+0xf400a2f4>
    ae38:	9029883a 	mov	r20,r18
    ae3c:	982b883a 	mov	r21,r19
    ae40:	04400084 	movi	r17,2
    ae44:	003bc606 	br	9d60 <__alt_mem_Flash_flash_data+0xf4009d60>
    ae48:	d8800617 	ldw	r2,24(sp)
    ae4c:	103efc26 	beq	r2,zero,aa40 <__alt_mem_Flash_flash_data+0xf400aa40>
    ae50:	d8c00c17 	ldw	r3,48(sp)
    ae54:	00fc890e 	bge	zero,r3,a07c <__alt_mem_Flash_flash_data+0xf400a07c>
    ae58:	a80b883a 	mov	r5,r21
    ae5c:	a009883a 	mov	r4,r20
    ae60:	000d883a 	mov	r6,zero
    ae64:	01d00934 	movhi	r7,16420
    ae68:	00062bc0 	call	62bc <__muldf3>
    ae6c:	89000044 	addi	r4,r17,1
    ae70:	1029883a 	mov	r20,r2
    ae74:	182b883a 	mov	r21,r3
    ae78:	00073380 	call	7338 <__floatsidf>
    ae7c:	a009883a 	mov	r4,r20
    ae80:	a80b883a 	mov	r5,r21
    ae84:	100d883a 	mov	r6,r2
    ae88:	180f883a 	mov	r7,r3
    ae8c:	00062bc0 	call	62bc <__muldf3>
    ae90:	1009883a 	mov	r4,r2
    ae94:	180b883a 	mov	r5,r3
    ae98:	000d883a 	mov	r6,zero
    ae9c:	01d00734 	movhi	r7,16412
    aea0:	0004f100 	call	4f10 <__adddf3>
    aea4:	d9000517 	ldw	r4,20(sp)
    aea8:	1023883a 	mov	r17,r2
    aeac:	00bf3034 	movhi	r2,64704
    aeb0:	213fffc4 	addi	r4,r4,-1
    aeb4:	1885883a 	add	r2,r3,r2
    aeb8:	d9001215 	stw	r4,72(sp)
    aebc:	d8800e15 	stw	r2,56(sp)
    aec0:	da800c17 	ldw	r10,48(sp)
    aec4:	003bc306 	br	9dd4 <__alt_mem_Flash_flash_data+0xf4009dd4>
    aec8:	b039883a 	mov	fp,r22
    aecc:	01000e44 	movi	r4,57
    aed0:	8825883a 	mov	r18,r17
    aed4:	9dc00044 	addi	r23,r19,1
    aed8:	99000005 	stb	r4,0(r19)
    aedc:	a023883a 	mov	r17,r20
    aee0:	003dae06 	br	a59c <__alt_mem_Flash_flash_data+0xf400a59c>
    aee4:	d9800e17 	ldw	r6,56(sp)
    aee8:	d9c01117 	ldw	r7,68(sp)
    aeec:	0009883a 	mov	r4,zero
    aef0:	014ff834 	movhi	r5,16352
    aef4:	da001715 	stw	r8,92(sp)
    aef8:	da401515 	stw	r9,84(sp)
    aefc:	00069e00 	call	69e0 <__subdf3>
    af00:	da001717 	ldw	r8,92(sp)
    af04:	da401517 	ldw	r9,84(sp)
    af08:	1009883a 	mov	r4,r2
    af0c:	180b883a 	mov	r5,r3
    af10:	400d883a 	mov	r6,r8
    af14:	480f883a 	mov	r7,r9
    af18:	00060fc0 	call	60fc <__gedf2>
    af1c:	00bc570e 	bge	zero,r2,a07c <__alt_mem_Flash_flash_data+0xf400a07c>
    af20:	01000c04 	movi	r4,48
    af24:	00000106 	br	af2c <_dtoa_r+0x1624>
    af28:	102f883a 	mov	r23,r2
    af2c:	b8bfffc4 	addi	r2,r23,-1
    af30:	10c00007 	ldb	r3,0(r2)
    af34:	193ffc26 	beq	r3,r4,af28 <__alt_mem_Flash_flash_data+0xf400af28>
    af38:	d9801217 	ldw	r6,72(sp)
    af3c:	d9800515 	stw	r6,20(sp)
    af40:	003c1f06 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    af44:	d8801217 	ldw	r2,72(sp)
    af48:	dc001117 	ldw	r16,68(sp)
    af4c:	d8800515 	stw	r2,20(sp)
    af50:	003cc906 	br	a278 <__alt_mem_Flash_flash_data+0xf400a278>
    af54:	dd801317 	ldw	r22,76(sp)
    af58:	dc001117 	ldw	r16,68(sp)
    af5c:	dcc01417 	ldw	r19,80(sp)
    af60:	dc801017 	ldw	r18,64(sp)
    af64:	003c4506 	br	a07c <__alt_mem_Flash_flash_data+0xf400a07c>
    af68:	103e5d1e 	bne	r2,zero,a8e0 <__alt_mem_Flash_flash_data+0xf400a8e0>
    af6c:	4080004c 	andi	r2,r8,1
    af70:	103e5b26 	beq	r2,zero,a8e0 <__alt_mem_Flash_flash_data+0xf400a8e0>
    af74:	003e5706 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    af78:	d8c00317 	ldw	r3,12(sp)
    af7c:	00800084 	movi	r2,2
    af80:	10c00a16 	blt	r2,r3,afac <_dtoa_r+0x16a4>
    af84:	d9000c17 	ldw	r4,48(sp)
    af88:	003e8306 	br	a998 <__alt_mem_Flash_flash_data+0xf400a998>
    af8c:	04400084 	movi	r17,2
    af90:	003b7306 	br	9d60 <__alt_mem_Flash_flash_data+0xf4009d60>
    af94:	d9801217 	ldw	r6,72(sp)
    af98:	d9800515 	stw	r6,20(sp)
    af9c:	003cb606 	br	a278 <__alt_mem_Flash_flash_data+0xf400a278>
    afa0:	d9001217 	ldw	r4,72(sp)
    afa4:	d9000515 	stw	r4,20(sp)
    afa8:	003c0506 	br	9fc0 <__alt_mem_Flash_flash_data+0xf4009fc0>
    afac:	d9800c17 	ldw	r6,48(sp)
    afb0:	d9800615 	stw	r6,24(sp)
    afb4:	003e8306 	br	a9c4 <__alt_mem_Flash_flash_data+0xf400a9c4>
    afb8:	d9800317 	ldw	r6,12(sp)
    afbc:	00800084 	movi	r2,2
    afc0:	11800216 	blt	r2,r6,afcc <_dtoa_r+0x16c4>
    afc4:	d8800c17 	ldw	r2,48(sp)
    afc8:	003da606 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    afcc:	d8800c17 	ldw	r2,48(sp)
    afd0:	d8800615 	stw	r2,24(sp)
    afd4:	003e7b06 	br	a9c4 <__alt_mem_Flash_flash_data+0xf400a9c4>
    afd8:	05000044 	movi	r20,1
    afdc:	003b0506 	br	9bf4 <__alt_mem_Flash_flash_data+0xf4009bf4>
    afe0:	8009883a 	mov	r4,r16
    afe4:	80001115 	stw	zero,68(r16)
    afe8:	000b883a 	mov	r5,zero
    afec:	000b9a00 	call	b9a0 <_Balloc>
    aff0:	d8800715 	stw	r2,28(sp)
    aff4:	d8c00717 	ldw	r3,28(sp)
    aff8:	00bfffc4 	movi	r2,-1
    affc:	01000044 	movi	r4,1
    b000:	d8800c15 	stw	r2,48(sp)
    b004:	80c01015 	stw	r3,64(r16)
    b008:	d9000b15 	stw	r4,44(sp)
    b00c:	d8800615 	stw	r2,24(sp)
    b010:	d8002215 	stw	zero,136(sp)
    b014:	003c1906 	br	a07c <__alt_mem_Flash_flash_data+0xf400a07c>
    b018:	193d2926 	beq	r3,r4,a4c0 <__alt_mem_Flash_flash_data+0xf400a4c0>
    b01c:	00c00f04 	movi	r3,60
    b020:	1885c83a 	sub	r2,r3,r2
    b024:	003d7b06 	br	a614 <__alt_mem_Flash_flash_data+0xf400a614>
    b028:	000b883a 	mov	r5,zero
    b02c:	003b1006 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>

0000b030 <_setlocale_r>:
    b030:	30001b26 	beq	r6,zero,b0a0 <_setlocale_r+0x70>
    b034:	014000b4 	movhi	r5,2
    b038:	defffe04 	addi	sp,sp,-8
    b03c:	296efe04 	addi	r5,r5,-17416
    b040:	3009883a 	mov	r4,r6
    b044:	dc000015 	stw	r16,0(sp)
    b048:	dfc00115 	stw	ra,4(sp)
    b04c:	3021883a 	mov	r16,r6
    b050:	000ca080 	call	ca08 <strcmp>
    b054:	1000061e 	bne	r2,zero,b070 <_setlocale_r+0x40>
    b058:	008000b4 	movhi	r2,2
    b05c:	10aefd04 	addi	r2,r2,-17420
    b060:	dfc00117 	ldw	ra,4(sp)
    b064:	dc000017 	ldw	r16,0(sp)
    b068:	dec00204 	addi	sp,sp,8
    b06c:	f800283a 	ret
    b070:	014000b4 	movhi	r5,2
    b074:	296efd04 	addi	r5,r5,-17420
    b078:	8009883a 	mov	r4,r16
    b07c:	000ca080 	call	ca08 <strcmp>
    b080:	103ff526 	beq	r2,zero,b058 <__alt_mem_Flash_flash_data+0xf400b058>
    b084:	014000b4 	movhi	r5,2
    b088:	296ee804 	addi	r5,r5,-17504
    b08c:	8009883a 	mov	r4,r16
    b090:	000ca080 	call	ca08 <strcmp>
    b094:	103ff026 	beq	r2,zero,b058 <__alt_mem_Flash_flash_data+0xf400b058>
    b098:	0005883a 	mov	r2,zero
    b09c:	003ff006 	br	b060 <__alt_mem_Flash_flash_data+0xf400b060>
    b0a0:	008000b4 	movhi	r2,2
    b0a4:	10aefd04 	addi	r2,r2,-17420
    b0a8:	f800283a 	ret

0000b0ac <__locale_charset>:
    b0ac:	008000b4 	movhi	r2,2
    b0b0:	10b11e04 	addi	r2,r2,-15240
    b0b4:	f800283a 	ret

0000b0b8 <__locale_mb_cur_max>:
    b0b8:	008000b4 	movhi	r2,2
    b0bc:	10b79e04 	addi	r2,r2,-8584
    b0c0:	10800017 	ldw	r2,0(r2)
    b0c4:	f800283a 	ret

0000b0c8 <__locale_msgcharset>:
    b0c8:	008000b4 	movhi	r2,2
    b0cc:	10b11604 	addi	r2,r2,-15272
    b0d0:	f800283a 	ret

0000b0d4 <__locale_cjk_lang>:
    b0d4:	0005883a 	mov	r2,zero
    b0d8:	f800283a 	ret

0000b0dc <_localeconv_r>:
    b0dc:	008000b4 	movhi	r2,2
    b0e0:	10b12604 	addi	r2,r2,-15208
    b0e4:	f800283a 	ret

0000b0e8 <setlocale>:
    b0e8:	00c000b4 	movhi	r3,2
    b0ec:	18f79d04 	addi	r3,r3,-8588
    b0f0:	2005883a 	mov	r2,r4
    b0f4:	19000017 	ldw	r4,0(r3)
    b0f8:	280d883a 	mov	r6,r5
    b0fc:	100b883a 	mov	r5,r2
    b100:	000b0301 	jmpi	b030 <_setlocale_r>

0000b104 <localeconv>:
    b104:	008000b4 	movhi	r2,2
    b108:	10b12604 	addi	r2,r2,-15208
    b10c:	f800283a 	ret

0000b110 <_malloc_r>:
    b110:	defff504 	addi	sp,sp,-44
    b114:	dc800315 	stw	r18,12(sp)
    b118:	dfc00a15 	stw	ra,40(sp)
    b11c:	df000915 	stw	fp,36(sp)
    b120:	ddc00815 	stw	r23,32(sp)
    b124:	dd800715 	stw	r22,28(sp)
    b128:	dd400615 	stw	r21,24(sp)
    b12c:	dd000515 	stw	r20,20(sp)
    b130:	dcc00415 	stw	r19,16(sp)
    b134:	dc400215 	stw	r17,8(sp)
    b138:	dc000115 	stw	r16,4(sp)
    b13c:	288002c4 	addi	r2,r5,11
    b140:	00c00584 	movi	r3,22
    b144:	2025883a 	mov	r18,r4
    b148:	18802a2e 	bgeu	r3,r2,b1f4 <_malloc_r+0xe4>
    b14c:	047ffe04 	movi	r17,-8
    b150:	1462703a 	and	r17,r2,r17
    b154:	88009e16 	blt	r17,zero,b3d0 <_malloc_r+0x2c0>
    b158:	89409d36 	bltu	r17,r5,b3d0 <_malloc_r+0x2c0>
    b15c:	000f9800 	call	f980 <__malloc_lock>
    b160:	00807dc4 	movi	r2,503
    b164:	14402736 	bltu	r2,r17,b204 <_malloc_r+0xf4>
    b168:	8806d0fa 	srli	r3,r17,3
    b16c:	04c000b4 	movhi	r19,2
    b170:	9cf13404 	addi	r19,r19,-15152
    b174:	18c5883a 	add	r2,r3,r3
    b178:	1085883a 	add	r2,r2,r2
    b17c:	1085883a 	add	r2,r2,r2
    b180:	9885883a 	add	r2,r19,r2
    b184:	14000317 	ldw	r16,12(r2)
    b188:	80814a26 	beq	r16,r2,b6b4 <_malloc_r+0x5a4>
    b18c:	80c00117 	ldw	r3,4(r16)
    b190:	81000317 	ldw	r4,12(r16)
    b194:	00bfff04 	movi	r2,-4
    b198:	1884703a 	and	r2,r3,r2
    b19c:	81400217 	ldw	r5,8(r16)
    b1a0:	8085883a 	add	r2,r16,r2
    b1a4:	10c00117 	ldw	r3,4(r2)
    b1a8:	29000315 	stw	r4,12(r5)
    b1ac:	21400215 	stw	r5,8(r4)
    b1b0:	18c00054 	ori	r3,r3,1
    b1b4:	10c00115 	stw	r3,4(r2)
    b1b8:	9009883a 	mov	r4,r18
    b1bc:	000faa00 	call	faa0 <__malloc_unlock>
    b1c0:	80800204 	addi	r2,r16,8
    b1c4:	dfc00a17 	ldw	ra,40(sp)
    b1c8:	df000917 	ldw	fp,36(sp)
    b1cc:	ddc00817 	ldw	r23,32(sp)
    b1d0:	dd800717 	ldw	r22,28(sp)
    b1d4:	dd400617 	ldw	r21,24(sp)
    b1d8:	dd000517 	ldw	r20,20(sp)
    b1dc:	dcc00417 	ldw	r19,16(sp)
    b1e0:	dc800317 	ldw	r18,12(sp)
    b1e4:	dc400217 	ldw	r17,8(sp)
    b1e8:	dc000117 	ldw	r16,4(sp)
    b1ec:	dec00b04 	addi	sp,sp,44
    b1f0:	f800283a 	ret
    b1f4:	04400404 	movi	r17,16
    b1f8:	89407536 	bltu	r17,r5,b3d0 <_malloc_r+0x2c0>
    b1fc:	000f9800 	call	f980 <__malloc_lock>
    b200:	003fd906 	br	b168 <__alt_mem_Flash_flash_data+0xf400b168>
    b204:	8806d27a 	srli	r3,r17,9
    b208:	18007526 	beq	r3,zero,b3e0 <_malloc_r+0x2d0>
    b20c:	00800104 	movi	r2,4
    b210:	10c0ef36 	bltu	r2,r3,b5d0 <_malloc_r+0x4c0>
    b214:	8806d1ba 	srli	r3,r17,6
    b218:	19c00e04 	addi	r7,r3,56
    b21c:	39cb883a 	add	r5,r7,r7
    b220:	04c000b4 	movhi	r19,2
    b224:	294b883a 	add	r5,r5,r5
    b228:	9cf13404 	addi	r19,r19,-15152
    b22c:	294b883a 	add	r5,r5,r5
    b230:	994b883a 	add	r5,r19,r5
    b234:	2c000317 	ldw	r16,12(r5)
    b238:	2c000e26 	beq	r5,r16,b274 <_malloc_r+0x164>
    b23c:	80800117 	ldw	r2,4(r16)
    b240:	01bfff04 	movi	r6,-4
    b244:	010003c4 	movi	r4,15
    b248:	1184703a 	and	r2,r2,r6
    b24c:	1447c83a 	sub	r3,r2,r17
    b250:	20c00716 	blt	r4,r3,b270 <_malloc_r+0x160>
    b254:	1800650e 	bge	r3,zero,b3ec <_malloc_r+0x2dc>
    b258:	84000317 	ldw	r16,12(r16)
    b25c:	2c000526 	beq	r5,r16,b274 <_malloc_r+0x164>
    b260:	80800117 	ldw	r2,4(r16)
    b264:	1184703a 	and	r2,r2,r6
    b268:	1447c83a 	sub	r3,r2,r17
    b26c:	20fff90e 	bge	r4,r3,b254 <__alt_mem_Flash_flash_data+0xf400b254>
    b270:	39ffffc4 	addi	r7,r7,-1
    b274:	38c00044 	addi	r3,r7,1
    b278:	018000b4 	movhi	r6,2
    b27c:	9c000417 	ldw	r16,16(r19)
    b280:	31b13404 	addi	r6,r6,-15152
    b284:	32400204 	addi	r9,r6,8
    b288:	82410326 	beq	r16,r9,b698 <_malloc_r+0x588>
    b28c:	81000117 	ldw	r4,4(r16)
    b290:	00bfff04 	movi	r2,-4
    b294:	208e703a 	and	r7,r4,r2
    b298:	3c45c83a 	sub	r2,r7,r17
    b29c:	010003c4 	movi	r4,15
    b2a0:	2080ee16 	blt	r4,r2,b65c <_malloc_r+0x54c>
    b2a4:	32400515 	stw	r9,20(r6)
    b2a8:	32400415 	stw	r9,16(r6)
    b2ac:	1000510e 	bge	r2,zero,b3f4 <_malloc_r+0x2e4>
    b2b0:	00807fc4 	movi	r2,511
    b2b4:	11c0ce36 	bltu	r2,r7,b5f0 <_malloc_r+0x4e0>
    b2b8:	3808d0fa 	srli	r4,r7,3
    b2bc:	01c00044 	movi	r7,1
    b2c0:	30800117 	ldw	r2,4(r6)
    b2c4:	210b883a 	add	r5,r4,r4
    b2c8:	294b883a 	add	r5,r5,r5
    b2cc:	2009d0ba 	srai	r4,r4,2
    b2d0:	294b883a 	add	r5,r5,r5
    b2d4:	298b883a 	add	r5,r5,r6
    b2d8:	2a000217 	ldw	r8,8(r5)
    b2dc:	3908983a 	sll	r4,r7,r4
    b2e0:	81400315 	stw	r5,12(r16)
    b2e4:	82000215 	stw	r8,8(r16)
    b2e8:	2088b03a 	or	r4,r4,r2
    b2ec:	2c000215 	stw	r16,8(r5)
    b2f0:	31000115 	stw	r4,4(r6)
    b2f4:	44000315 	stw	r16,12(r8)
    b2f8:	1805d0ba 	srai	r2,r3,2
    b2fc:	01400044 	movi	r5,1
    b300:	288a983a 	sll	r5,r5,r2
    b304:	21404336 	bltu	r4,r5,b414 <_malloc_r+0x304>
    b308:	2144703a 	and	r2,r4,r5
    b30c:	10000a1e 	bne	r2,zero,b338 <_malloc_r+0x228>
    b310:	00bfff04 	movi	r2,-4
    b314:	294b883a 	add	r5,r5,r5
    b318:	1886703a 	and	r3,r3,r2
    b31c:	2144703a 	and	r2,r4,r5
    b320:	18c00104 	addi	r3,r3,4
    b324:	1000041e 	bne	r2,zero,b338 <_malloc_r+0x228>
    b328:	294b883a 	add	r5,r5,r5
    b32c:	2144703a 	and	r2,r4,r5
    b330:	18c00104 	addi	r3,r3,4
    b334:	103ffc26 	beq	r2,zero,b328 <__alt_mem_Flash_flash_data+0xf400b328>
    b338:	023fff04 	movi	r8,-4
    b33c:	01c003c4 	movi	r7,15
    b340:	18c5883a 	add	r2,r3,r3
    b344:	1085883a 	add	r2,r2,r2
    b348:	1085883a 	add	r2,r2,r2
    b34c:	9895883a 	add	r10,r19,r2
    b350:	52c00304 	addi	r11,r10,12
    b354:	1819883a 	mov	r12,r3
    b358:	5c000017 	ldw	r16,0(r11)
    b35c:	59bffd04 	addi	r6,r11,-12
    b360:	8180041e 	bne	r16,r6,b374 <_malloc_r+0x264>
    b364:	0000ce06 	br	b6a0 <_malloc_r+0x590>
    b368:	2000d70e 	bge	r4,zero,b6c8 <_malloc_r+0x5b8>
    b36c:	84000317 	ldw	r16,12(r16)
    b370:	8180cb26 	beq	r16,r6,b6a0 <_malloc_r+0x590>
    b374:	80800117 	ldw	r2,4(r16)
    b378:	1204703a 	and	r2,r2,r8
    b37c:	1449c83a 	sub	r4,r2,r17
    b380:	393ff90e 	bge	r7,r4,b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b384:	80800317 	ldw	r2,12(r16)
    b388:	80c00217 	ldw	r3,8(r16)
    b38c:	89400054 	ori	r5,r17,1
    b390:	81400115 	stw	r5,4(r16)
    b394:	18800315 	stw	r2,12(r3)
    b398:	10c00215 	stw	r3,8(r2)
    b39c:	8463883a 	add	r17,r16,r17
    b3a0:	9c400515 	stw	r17,20(r19)
    b3a4:	9c400415 	stw	r17,16(r19)
    b3a8:	20800054 	ori	r2,r4,1
    b3ac:	88800115 	stw	r2,4(r17)
    b3b0:	8a400315 	stw	r9,12(r17)
    b3b4:	8a400215 	stw	r9,8(r17)
    b3b8:	8923883a 	add	r17,r17,r4
    b3bc:	89000015 	stw	r4,0(r17)
    b3c0:	9009883a 	mov	r4,r18
    b3c4:	000faa00 	call	faa0 <__malloc_unlock>
    b3c8:	80800204 	addi	r2,r16,8
    b3cc:	003f7d06 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b3d0:	00800304 	movi	r2,12
    b3d4:	90800015 	stw	r2,0(r18)
    b3d8:	0005883a 	mov	r2,zero
    b3dc:	003f7906 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b3e0:	01401f84 	movi	r5,126
    b3e4:	01c00fc4 	movi	r7,63
    b3e8:	003f8d06 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b3ec:	81000317 	ldw	r4,12(r16)
    b3f0:	003f6a06 	br	b19c <__alt_mem_Flash_flash_data+0xf400b19c>
    b3f4:	81c5883a 	add	r2,r16,r7
    b3f8:	10c00117 	ldw	r3,4(r2)
    b3fc:	9009883a 	mov	r4,r18
    b400:	18c00054 	ori	r3,r3,1
    b404:	10c00115 	stw	r3,4(r2)
    b408:	000faa00 	call	faa0 <__malloc_unlock>
    b40c:	80800204 	addi	r2,r16,8
    b410:	003f6c06 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b414:	9c000217 	ldw	r16,8(r19)
    b418:	00bfff04 	movi	r2,-4
    b41c:	85800117 	ldw	r22,4(r16)
    b420:	b0ac703a 	and	r22,r22,r2
    b424:	b4400336 	bltu	r22,r17,b434 <_malloc_r+0x324>
    b428:	b445c83a 	sub	r2,r22,r17
    b42c:	00c003c4 	movi	r3,15
    b430:	18805d16 	blt	r3,r2,b5a8 <_malloc_r+0x498>
    b434:	05c000b4 	movhi	r23,2
    b438:	008000b4 	movhi	r2,2
    b43c:	bdf79f04 	addi	r23,r23,-8580
    b440:	10bf9004 	addi	r2,r2,-448
    b444:	15400017 	ldw	r21,0(r2)
    b448:	b9000017 	ldw	r4,0(r23)
    b44c:	00ffffc4 	movi	r3,-1
    b450:	858d883a 	add	r6,r16,r22
    b454:	8d6b883a 	add	r21,r17,r21
    b458:	20c0e426 	beq	r4,r3,b7ec <_malloc_r+0x6dc>
    b45c:	ad4403c4 	addi	r21,r21,4111
    b460:	00fc0004 	movi	r3,-4096
    b464:	a8ea703a 	and	r21,r21,r3
    b468:	9009883a 	mov	r4,r18
    b46c:	a80b883a 	mov	r5,r21
    b470:	d9800015 	stw	r6,0(sp)
    b474:	000c9b40 	call	c9b4 <_sbrk_r>
    b478:	00ffffc4 	movi	r3,-1
    b47c:	1029883a 	mov	r20,r2
    b480:	d9800017 	ldw	r6,0(sp)
    b484:	10c0a426 	beq	r2,r3,b718 <_malloc_r+0x608>
    b488:	1180a236 	bltu	r2,r6,b714 <_malloc_r+0x604>
    b48c:	070000b4 	movhi	fp,2
    b490:	e73fb204 	addi	fp,fp,-312
    b494:	e0c00017 	ldw	r3,0(fp)
    b498:	a8c7883a 	add	r3,r21,r3
    b49c:	e0c00015 	stw	r3,0(fp)
    b4a0:	3500da26 	beq	r6,r20,b80c <_malloc_r+0x6fc>
    b4a4:	b9000017 	ldw	r4,0(r23)
    b4a8:	00bfffc4 	movi	r2,-1
    b4ac:	2080e426 	beq	r4,r2,b840 <_malloc_r+0x730>
    b4b0:	a185c83a 	sub	r2,r20,r6
    b4b4:	1885883a 	add	r2,r3,r2
    b4b8:	e0800015 	stw	r2,0(fp)
    b4bc:	a0c001cc 	andi	r3,r20,7
    b4c0:	1800b526 	beq	r3,zero,b798 <_malloc_r+0x688>
    b4c4:	a0e9c83a 	sub	r20,r20,r3
    b4c8:	00840204 	movi	r2,4104
    b4cc:	a5000204 	addi	r20,r20,8
    b4d0:	10c7c83a 	sub	r3,r2,r3
    b4d4:	a545883a 	add	r2,r20,r21
    b4d8:	1083ffcc 	andi	r2,r2,4095
    b4dc:	18abc83a 	sub	r21,r3,r2
    b4e0:	9009883a 	mov	r4,r18
    b4e4:	a80b883a 	mov	r5,r21
    b4e8:	000c9b40 	call	c9b4 <_sbrk_r>
    b4ec:	00ffffc4 	movi	r3,-1
    b4f0:	10c0d026 	beq	r2,r3,b834 <_malloc_r+0x724>
    b4f4:	1507c83a 	sub	r3,r2,r20
    b4f8:	a8c7883a 	add	r3,r21,r3
    b4fc:	18c00054 	ori	r3,r3,1
    b500:	e0800017 	ldw	r2,0(fp)
    b504:	9d000215 	stw	r20,8(r19)
    b508:	a0c00115 	stw	r3,4(r20)
    b50c:	a887883a 	add	r3,r21,r2
    b510:	e0c00015 	stw	r3,0(fp)
    b514:	84c00e26 	beq	r16,r19,b550 <_malloc_r+0x440>
    b518:	018003c4 	movi	r6,15
    b51c:	3580a02e 	bgeu	r6,r22,b7a0 <_malloc_r+0x690>
    b520:	81400117 	ldw	r5,4(r16)
    b524:	013ffe04 	movi	r4,-8
    b528:	b0bffd04 	addi	r2,r22,-12
    b52c:	1104703a 	and	r2,r2,r4
    b530:	2900004c 	andi	r4,r5,1
    b534:	1108b03a 	or	r4,r2,r4
    b538:	81000115 	stw	r4,4(r16)
    b53c:	01400144 	movi	r5,5
    b540:	8089883a 	add	r4,r16,r2
    b544:	21400115 	stw	r5,4(r4)
    b548:	21400215 	stw	r5,8(r4)
    b54c:	3080c036 	bltu	r6,r2,b850 <_malloc_r+0x740>
    b550:	008000b4 	movhi	r2,2
    b554:	10bf8f04 	addi	r2,r2,-452
    b558:	11000017 	ldw	r4,0(r2)
    b55c:	20c0012e 	bgeu	r4,r3,b564 <_malloc_r+0x454>
    b560:	10c00015 	stw	r3,0(r2)
    b564:	008000b4 	movhi	r2,2
    b568:	10bf8e04 	addi	r2,r2,-456
    b56c:	11000017 	ldw	r4,0(r2)
    b570:	9c000217 	ldw	r16,8(r19)
    b574:	20c0012e 	bgeu	r4,r3,b57c <_malloc_r+0x46c>
    b578:	10c00015 	stw	r3,0(r2)
    b57c:	80c00117 	ldw	r3,4(r16)
    b580:	00bfff04 	movi	r2,-4
    b584:	1886703a 	and	r3,r3,r2
    b588:	1c45c83a 	sub	r2,r3,r17
    b58c:	1c400236 	bltu	r3,r17,b598 <_malloc_r+0x488>
    b590:	00c003c4 	movi	r3,15
    b594:	18800416 	blt	r3,r2,b5a8 <_malloc_r+0x498>
    b598:	9009883a 	mov	r4,r18
    b59c:	000faa00 	call	faa0 <__malloc_unlock>
    b5a0:	0005883a 	mov	r2,zero
    b5a4:	003f0706 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b5a8:	88c00054 	ori	r3,r17,1
    b5ac:	80c00115 	stw	r3,4(r16)
    b5b0:	8463883a 	add	r17,r16,r17
    b5b4:	10800054 	ori	r2,r2,1
    b5b8:	9c400215 	stw	r17,8(r19)
    b5bc:	88800115 	stw	r2,4(r17)
    b5c0:	9009883a 	mov	r4,r18
    b5c4:	000faa00 	call	faa0 <__malloc_unlock>
    b5c8:	80800204 	addi	r2,r16,8
    b5cc:	003efd06 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b5d0:	00800504 	movi	r2,20
    b5d4:	10c0482e 	bgeu	r2,r3,b6f8 <_malloc_r+0x5e8>
    b5d8:	00801504 	movi	r2,84
    b5dc:	10c06836 	bltu	r2,r3,b780 <_malloc_r+0x670>
    b5e0:	8806d33a 	srli	r3,r17,12
    b5e4:	19c01b84 	addi	r7,r3,110
    b5e8:	39cb883a 	add	r5,r7,r7
    b5ec:	003f0c06 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b5f0:	3804d27a 	srli	r2,r7,9
    b5f4:	01000104 	movi	r4,4
    b5f8:	2080422e 	bgeu	r4,r2,b704 <_malloc_r+0x5f4>
    b5fc:	01000504 	movi	r4,20
    b600:	20807c36 	bltu	r4,r2,b7f4 <_malloc_r+0x6e4>
    b604:	110016c4 	addi	r4,r2,91
    b608:	210b883a 	add	r5,r4,r4
    b60c:	294b883a 	add	r5,r5,r5
    b610:	294b883a 	add	r5,r5,r5
    b614:	994b883a 	add	r5,r19,r5
    b618:	28800217 	ldw	r2,8(r5)
    b61c:	020000b4 	movhi	r8,2
    b620:	42313404 	addi	r8,r8,-15152
    b624:	11406326 	beq	r2,r5,b7b4 <_malloc_r+0x6a4>
    b628:	01bfff04 	movi	r6,-4
    b62c:	11000117 	ldw	r4,4(r2)
    b630:	2188703a 	and	r4,r4,r6
    b634:	3900022e 	bgeu	r7,r4,b640 <_malloc_r+0x530>
    b638:	10800217 	ldw	r2,8(r2)
    b63c:	28bffb1e 	bne	r5,r2,b62c <__alt_mem_Flash_flash_data+0xf400b62c>
    b640:	11800317 	ldw	r6,12(r2)
    b644:	99000117 	ldw	r4,4(r19)
    b648:	81800315 	stw	r6,12(r16)
    b64c:	80800215 	stw	r2,8(r16)
    b650:	34000215 	stw	r16,8(r6)
    b654:	14000315 	stw	r16,12(r2)
    b658:	003f2706 	br	b2f8 <__alt_mem_Flash_flash_data+0xf400b2f8>
    b65c:	88c00054 	ori	r3,r17,1
    b660:	80c00115 	stw	r3,4(r16)
    b664:	8463883a 	add	r17,r16,r17
    b668:	34400515 	stw	r17,20(r6)
    b66c:	34400415 	stw	r17,16(r6)
    b670:	10c00054 	ori	r3,r2,1
    b674:	8a400315 	stw	r9,12(r17)
    b678:	8a400215 	stw	r9,8(r17)
    b67c:	88c00115 	stw	r3,4(r17)
    b680:	88a3883a 	add	r17,r17,r2
    b684:	88800015 	stw	r2,0(r17)
    b688:	9009883a 	mov	r4,r18
    b68c:	000faa00 	call	faa0 <__malloc_unlock>
    b690:	80800204 	addi	r2,r16,8
    b694:	003ecb06 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b698:	31000117 	ldw	r4,4(r6)
    b69c:	003f1606 	br	b2f8 <__alt_mem_Flash_flash_data+0xf400b2f8>
    b6a0:	63000044 	addi	r12,r12,1
    b6a4:	608000cc 	andi	r2,r12,3
    b6a8:	5ac00204 	addi	r11,r11,8
    b6ac:	103f2a1e 	bne	r2,zero,b358 <__alt_mem_Flash_flash_data+0xf400b358>
    b6b0:	00002106 	br	b738 <_malloc_r+0x628>
    b6b4:	80800204 	addi	r2,r16,8
    b6b8:	84000517 	ldw	r16,20(r16)
    b6bc:	143eb31e 	bne	r2,r16,b18c <__alt_mem_Flash_flash_data+0xf400b18c>
    b6c0:	18c00084 	addi	r3,r3,2
    b6c4:	003eec06 	br	b278 <__alt_mem_Flash_flash_data+0xf400b278>
    b6c8:	8085883a 	add	r2,r16,r2
    b6cc:	10c00117 	ldw	r3,4(r2)
    b6d0:	81000317 	ldw	r4,12(r16)
    b6d4:	81400217 	ldw	r5,8(r16)
    b6d8:	18c00054 	ori	r3,r3,1
    b6dc:	10c00115 	stw	r3,4(r2)
    b6e0:	29000315 	stw	r4,12(r5)
    b6e4:	21400215 	stw	r5,8(r4)
    b6e8:	9009883a 	mov	r4,r18
    b6ec:	000faa00 	call	faa0 <__malloc_unlock>
    b6f0:	80800204 	addi	r2,r16,8
    b6f4:	003eb306 	br	b1c4 <__alt_mem_Flash_flash_data+0xf400b1c4>
    b6f8:	19c016c4 	addi	r7,r3,91
    b6fc:	39cb883a 	add	r5,r7,r7
    b700:	003ec706 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b704:	3804d1ba 	srli	r2,r7,6
    b708:	11000e04 	addi	r4,r2,56
    b70c:	210b883a 	add	r5,r4,r4
    b710:	003fbe06 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b714:	84ff5d26 	beq	r16,r19,b48c <__alt_mem_Flash_flash_data+0xf400b48c>
    b718:	9c000217 	ldw	r16,8(r19)
    b71c:	00bfff04 	movi	r2,-4
    b720:	80c00117 	ldw	r3,4(r16)
    b724:	1886703a 	and	r3,r3,r2
    b728:	003f9706 	br	b588 <__alt_mem_Flash_flash_data+0xf400b588>
    b72c:	52800017 	ldw	r10,0(r10)
    b730:	18ffffc4 	addi	r3,r3,-1
    b734:	50805c1e 	bne	r10,r2,b8a8 <_malloc_r+0x798>
    b738:	190000cc 	andi	r4,r3,3
    b73c:	50bffe04 	addi	r2,r10,-8
    b740:	203ffa1e 	bne	r4,zero,b72c <__alt_mem_Flash_flash_data+0xf400b72c>
    b744:	98800117 	ldw	r2,4(r19)
    b748:	0146303a 	nor	r3,zero,r5
    b74c:	1884703a 	and	r2,r3,r2
    b750:	98800115 	stw	r2,4(r19)
    b754:	294b883a 	add	r5,r5,r5
    b758:	117f2e36 	bltu	r2,r5,b414 <__alt_mem_Flash_flash_data+0xf400b414>
    b75c:	283f2d26 	beq	r5,zero,b414 <__alt_mem_Flash_flash_data+0xf400b414>
    b760:	1146703a 	and	r3,r2,r5
    b764:	1800521e 	bne	r3,zero,b8b0 <_malloc_r+0x7a0>
    b768:	6007883a 	mov	r3,r12
    b76c:	294b883a 	add	r5,r5,r5
    b770:	1148703a 	and	r4,r2,r5
    b774:	18c00104 	addi	r3,r3,4
    b778:	203ffc26 	beq	r4,zero,b76c <__alt_mem_Flash_flash_data+0xf400b76c>
    b77c:	003ef006 	br	b340 <__alt_mem_Flash_flash_data+0xf400b340>
    b780:	00805504 	movi	r2,340
    b784:	10c01336 	bltu	r2,r3,b7d4 <_malloc_r+0x6c4>
    b788:	8806d3fa 	srli	r3,r17,15
    b78c:	19c01dc4 	addi	r7,r3,119
    b790:	39cb883a 	add	r5,r7,r7
    b794:	003ea206 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b798:	00c40004 	movi	r3,4096
    b79c:	003f4d06 	br	b4d4 <__alt_mem_Flash_flash_data+0xf400b4d4>
    b7a0:	00800044 	movi	r2,1
    b7a4:	a0800115 	stw	r2,4(r20)
    b7a8:	a021883a 	mov	r16,r20
    b7ac:	0007883a 	mov	r3,zero
    b7b0:	003f7506 	br	b588 <__alt_mem_Flash_flash_data+0xf400b588>
    b7b4:	200bd0ba 	srai	r5,r4,2
    b7b8:	01800044 	movi	r6,1
    b7bc:	41000117 	ldw	r4,4(r8)
    b7c0:	314a983a 	sll	r5,r6,r5
    b7c4:	100d883a 	mov	r6,r2
    b7c8:	2908b03a 	or	r4,r5,r4
    b7cc:	41000115 	stw	r4,4(r8)
    b7d0:	003f9d06 	br	b648 <__alt_mem_Flash_flash_data+0xf400b648>
    b7d4:	00815504 	movi	r2,1364
    b7d8:	10c01336 	bltu	r2,r3,b828 <_malloc_r+0x718>
    b7dc:	8806d4ba 	srli	r3,r17,18
    b7e0:	19c01f04 	addi	r7,r3,124
    b7e4:	39cb883a 	add	r5,r7,r7
    b7e8:	003e8d06 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b7ec:	ad400404 	addi	r21,r21,16
    b7f0:	003f1d06 	br	b468 <__alt_mem_Flash_flash_data+0xf400b468>
    b7f4:	01001504 	movi	r4,84
    b7f8:	20801c36 	bltu	r4,r2,b86c <_malloc_r+0x75c>
    b7fc:	3804d33a 	srli	r2,r7,12
    b800:	11001b84 	addi	r4,r2,110
    b804:	210b883a 	add	r5,r4,r4
    b808:	003f8006 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b80c:	3083ffcc 	andi	r2,r6,4095
    b810:	103f241e 	bne	r2,zero,b4a4 <__alt_mem_Flash_flash_data+0xf400b4a4>
    b814:	99000217 	ldw	r4,8(r19)
    b818:	ad85883a 	add	r2,r21,r22
    b81c:	10800054 	ori	r2,r2,1
    b820:	20800115 	stw	r2,4(r4)
    b824:	003f4a06 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>
    b828:	01403f04 	movi	r5,252
    b82c:	01c01f84 	movi	r7,126
    b830:	003e7b06 	br	b220 <__alt_mem_Flash_flash_data+0xf400b220>
    b834:	00c00044 	movi	r3,1
    b838:	002b883a 	mov	r21,zero
    b83c:	003f3006 	br	b500 <__alt_mem_Flash_flash_data+0xf400b500>
    b840:	008000b4 	movhi	r2,2
    b844:	10b79f04 	addi	r2,r2,-8580
    b848:	15000015 	stw	r20,0(r2)
    b84c:	003f1b06 	br	b4bc <__alt_mem_Flash_flash_data+0xf400b4bc>
    b850:	9009883a 	mov	r4,r18
    b854:	81400204 	addi	r5,r16,8
    b858:	000df300 	call	df30 <_free_r>
    b85c:	008000b4 	movhi	r2,2
    b860:	10bfb204 	addi	r2,r2,-312
    b864:	10c00017 	ldw	r3,0(r2)
    b868:	003f3906 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>
    b86c:	01005504 	movi	r4,340
    b870:	20800436 	bltu	r4,r2,b884 <_malloc_r+0x774>
    b874:	3804d3fa 	srli	r2,r7,15
    b878:	11001dc4 	addi	r4,r2,119
    b87c:	210b883a 	add	r5,r4,r4
    b880:	003f6206 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b884:	01015504 	movi	r4,1364
    b888:	20800436 	bltu	r4,r2,b89c <_malloc_r+0x78c>
    b88c:	3804d4ba 	srli	r2,r7,18
    b890:	11001f04 	addi	r4,r2,124
    b894:	210b883a 	add	r5,r4,r4
    b898:	003f5c06 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b89c:	01403f04 	movi	r5,252
    b8a0:	01001f84 	movi	r4,126
    b8a4:	003f5906 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b8a8:	98800117 	ldw	r2,4(r19)
    b8ac:	003fa906 	br	b754 <__alt_mem_Flash_flash_data+0xf400b754>
    b8b0:	6007883a 	mov	r3,r12
    b8b4:	003ea206 	br	b340 <__alt_mem_Flash_flash_data+0xf400b340>

0000b8b8 <memchr>:
    b8b8:	208000cc 	andi	r2,r4,3
    b8bc:	280f883a 	mov	r7,r5
    b8c0:	10003526 	beq	r2,zero,b998 <memchr+0xe0>
    b8c4:	30bfffc4 	addi	r2,r6,-1
    b8c8:	30001b26 	beq	r6,zero,b938 <memchr+0x80>
    b8cc:	21800003 	ldbu	r6,0(r4)
    b8d0:	28c03fcc 	andi	r3,r5,255
    b8d4:	30c01a26 	beq	r6,r3,b940 <memchr+0x88>
    b8d8:	180d883a 	mov	r6,r3
    b8dc:	00000406 	br	b8f0 <memchr+0x38>
    b8e0:	10001526 	beq	r2,zero,b938 <memchr+0x80>
    b8e4:	20c00003 	ldbu	r3,0(r4)
    b8e8:	10bfffc4 	addi	r2,r2,-1
    b8ec:	19801426 	beq	r3,r6,b940 <memchr+0x88>
    b8f0:	21000044 	addi	r4,r4,1
    b8f4:	20c000cc 	andi	r3,r4,3
    b8f8:	183ff91e 	bne	r3,zero,b8e0 <__alt_mem_Flash_flash_data+0xf400b8e0>
    b8fc:	024000c4 	movi	r9,3
    b900:	48801136 	bltu	r9,r2,b948 <memchr+0x90>
    b904:	10000c26 	beq	r2,zero,b938 <memchr+0x80>
    b908:	20c00003 	ldbu	r3,0(r4)
    b90c:	29403fcc 	andi	r5,r5,255
    b910:	19400b26 	beq	r3,r5,b940 <memchr+0x88>
    b914:	20c00044 	addi	r3,r4,1
    b918:	2085883a 	add	r2,r4,r2
    b91c:	39803fcc 	andi	r6,r7,255
    b920:	00000306 	br	b930 <memchr+0x78>
    b924:	18c00044 	addi	r3,r3,1
    b928:	197fffc3 	ldbu	r5,-1(r3)
    b92c:	29800426 	beq	r5,r6,b940 <memchr+0x88>
    b930:	1809883a 	mov	r4,r3
    b934:	18bffb1e 	bne	r3,r2,b924 <__alt_mem_Flash_flash_data+0xf400b924>
    b938:	0005883a 	mov	r2,zero
    b93c:	f800283a 	ret
    b940:	2005883a 	mov	r2,r4
    b944:	f800283a 	ret
    b948:	28c03fcc 	andi	r3,r5,255
    b94c:	1810923a 	slli	r8,r3,8
    b950:	02ffbff4 	movhi	r11,65279
    b954:	02a02074 	movhi	r10,32897
    b958:	40c6b03a 	or	r3,r8,r3
    b95c:	1810943a 	slli	r8,r3,16
    b960:	5affbfc4 	addi	r11,r11,-257
    b964:	52a02004 	addi	r10,r10,-32640
    b968:	40d0b03a 	or	r8,r8,r3
    b96c:	20c00017 	ldw	r3,0(r4)
    b970:	40c6f03a 	xor	r3,r8,r3
    b974:	1acd883a 	add	r6,r3,r11
    b978:	00c6303a 	nor	r3,zero,r3
    b97c:	30c6703a 	and	r3,r6,r3
    b980:	1a86703a 	and	r3,r3,r10
    b984:	183fdf1e 	bne	r3,zero,b904 <__alt_mem_Flash_flash_data+0xf400b904>
    b988:	10bfff04 	addi	r2,r2,-4
    b98c:	21000104 	addi	r4,r4,4
    b990:	48bff636 	bltu	r9,r2,b96c <__alt_mem_Flash_flash_data+0xf400b96c>
    b994:	003fdb06 	br	b904 <__alt_mem_Flash_flash_data+0xf400b904>
    b998:	3005883a 	mov	r2,r6
    b99c:	003fd706 	br	b8fc <__alt_mem_Flash_flash_data+0xf400b8fc>

0000b9a0 <_Balloc>:
    b9a0:	20801317 	ldw	r2,76(r4)
    b9a4:	defffc04 	addi	sp,sp,-16
    b9a8:	dc400115 	stw	r17,4(sp)
    b9ac:	dc000015 	stw	r16,0(sp)
    b9b0:	dfc00315 	stw	ra,12(sp)
    b9b4:	dc800215 	stw	r18,8(sp)
    b9b8:	2023883a 	mov	r17,r4
    b9bc:	2821883a 	mov	r16,r5
    b9c0:	10000f26 	beq	r2,zero,ba00 <_Balloc+0x60>
    b9c4:	8407883a 	add	r3,r16,r16
    b9c8:	18c7883a 	add	r3,r3,r3
    b9cc:	10c7883a 	add	r3,r2,r3
    b9d0:	18800017 	ldw	r2,0(r3)
    b9d4:	10001126 	beq	r2,zero,ba1c <_Balloc+0x7c>
    b9d8:	11000017 	ldw	r4,0(r2)
    b9dc:	19000015 	stw	r4,0(r3)
    b9e0:	10000415 	stw	zero,16(r2)
    b9e4:	10000315 	stw	zero,12(r2)
    b9e8:	dfc00317 	ldw	ra,12(sp)
    b9ec:	dc800217 	ldw	r18,8(sp)
    b9f0:	dc400117 	ldw	r17,4(sp)
    b9f4:	dc000017 	ldw	r16,0(sp)
    b9f8:	dec00404 	addi	sp,sp,16
    b9fc:	f800283a 	ret
    ba00:	01400104 	movi	r5,4
    ba04:	01800844 	movi	r6,33
    ba08:	000dd480 	call	dd48 <_calloc_r>
    ba0c:	88801315 	stw	r2,76(r17)
    ba10:	103fec1e 	bne	r2,zero,b9c4 <__alt_mem_Flash_flash_data+0xf400b9c4>
    ba14:	0005883a 	mov	r2,zero
    ba18:	003ff306 	br	b9e8 <__alt_mem_Flash_flash_data+0xf400b9e8>
    ba1c:	01400044 	movi	r5,1
    ba20:	2c24983a 	sll	r18,r5,r16
    ba24:	8809883a 	mov	r4,r17
    ba28:	91800144 	addi	r6,r18,5
    ba2c:	318d883a 	add	r6,r6,r6
    ba30:	318d883a 	add	r6,r6,r6
    ba34:	000dd480 	call	dd48 <_calloc_r>
    ba38:	103ff626 	beq	r2,zero,ba14 <__alt_mem_Flash_flash_data+0xf400ba14>
    ba3c:	14000115 	stw	r16,4(r2)
    ba40:	14800215 	stw	r18,8(r2)
    ba44:	003fe606 	br	b9e0 <__alt_mem_Flash_flash_data+0xf400b9e0>

0000ba48 <_Bfree>:
    ba48:	28000826 	beq	r5,zero,ba6c <_Bfree+0x24>
    ba4c:	28c00117 	ldw	r3,4(r5)
    ba50:	20801317 	ldw	r2,76(r4)
    ba54:	18c7883a 	add	r3,r3,r3
    ba58:	18c7883a 	add	r3,r3,r3
    ba5c:	10c5883a 	add	r2,r2,r3
    ba60:	10c00017 	ldw	r3,0(r2)
    ba64:	28c00015 	stw	r3,0(r5)
    ba68:	11400015 	stw	r5,0(r2)
    ba6c:	f800283a 	ret

0000ba70 <__multadd>:
    ba70:	defffa04 	addi	sp,sp,-24
    ba74:	dc000115 	stw	r16,4(sp)
    ba78:	2c000417 	ldw	r16,16(r5)
    ba7c:	dc800315 	stw	r18,12(sp)
    ba80:	dc400215 	stw	r17,8(sp)
    ba84:	dfc00515 	stw	ra,20(sp)
    ba88:	dcc00415 	stw	r19,16(sp)
    ba8c:	2823883a 	mov	r17,r5
    ba90:	2025883a 	mov	r18,r4
    ba94:	2a400504 	addi	r9,r5,20
    ba98:	0015883a 	mov	r10,zero
    ba9c:	4a000017 	ldw	r8,0(r9)
    baa0:	4a400104 	addi	r9,r9,4
    baa4:	52800044 	addi	r10,r10,1
    baa8:	40ffffcc 	andi	r3,r8,65535
    baac:	1987383a 	mul	r3,r3,r6
    bab0:	4010d43a 	srli	r8,r8,16
    bab4:	19cf883a 	add	r7,r3,r7
    bab8:	4191383a 	mul	r8,r8,r6
    babc:	3816d43a 	srli	r11,r7,16
    bac0:	38ffffcc 	andi	r3,r7,65535
    bac4:	5a0f883a 	add	r7,r11,r8
    bac8:	3810943a 	slli	r8,r7,16
    bacc:	380ed43a 	srli	r7,r7,16
    bad0:	40c7883a 	add	r3,r8,r3
    bad4:	48ffff15 	stw	r3,-4(r9)
    bad8:	543ff016 	blt	r10,r16,ba9c <__alt_mem_Flash_flash_data+0xf400ba9c>
    badc:	38000926 	beq	r7,zero,bb04 <__multadd+0x94>
    bae0:	88800217 	ldw	r2,8(r17)
    bae4:	80800f0e 	bge	r16,r2,bb24 <__multadd+0xb4>
    bae8:	80800144 	addi	r2,r16,5
    baec:	1085883a 	add	r2,r2,r2
    baf0:	1085883a 	add	r2,r2,r2
    baf4:	8885883a 	add	r2,r17,r2
    baf8:	11c00015 	stw	r7,0(r2)
    bafc:	84000044 	addi	r16,r16,1
    bb00:	8c000415 	stw	r16,16(r17)
    bb04:	8805883a 	mov	r2,r17
    bb08:	dfc00517 	ldw	ra,20(sp)
    bb0c:	dcc00417 	ldw	r19,16(sp)
    bb10:	dc800317 	ldw	r18,12(sp)
    bb14:	dc400217 	ldw	r17,8(sp)
    bb18:	dc000117 	ldw	r16,4(sp)
    bb1c:	dec00604 	addi	sp,sp,24
    bb20:	f800283a 	ret
    bb24:	89400117 	ldw	r5,4(r17)
    bb28:	9009883a 	mov	r4,r18
    bb2c:	d9c00015 	stw	r7,0(sp)
    bb30:	29400044 	addi	r5,r5,1
    bb34:	000b9a00 	call	b9a0 <_Balloc>
    bb38:	89800417 	ldw	r6,16(r17)
    bb3c:	11000304 	addi	r4,r2,12
    bb40:	89400304 	addi	r5,r17,12
    bb44:	31800084 	addi	r6,r6,2
    bb48:	318d883a 	add	r6,r6,r6
    bb4c:	318d883a 	add	r6,r6,r6
    bb50:	1027883a 	mov	r19,r2
    bb54:	000757c0 	call	757c <memcpy>
    bb58:	d9c00017 	ldw	r7,0(sp)
    bb5c:	88000a26 	beq	r17,zero,bb88 <__multadd+0x118>
    bb60:	89000117 	ldw	r4,4(r17)
    bb64:	90c01317 	ldw	r3,76(r18)
    bb68:	2109883a 	add	r4,r4,r4
    bb6c:	2109883a 	add	r4,r4,r4
    bb70:	1907883a 	add	r3,r3,r4
    bb74:	18800017 	ldw	r2,0(r3)
    bb78:	88800015 	stw	r2,0(r17)
    bb7c:	1c400015 	stw	r17,0(r3)
    bb80:	9823883a 	mov	r17,r19
    bb84:	003fd806 	br	bae8 <__alt_mem_Flash_flash_data+0xf400bae8>
    bb88:	9823883a 	mov	r17,r19
    bb8c:	003fd606 	br	bae8 <__alt_mem_Flash_flash_data+0xf400bae8>

0000bb90 <__s2b>:
    bb90:	defff904 	addi	sp,sp,-28
    bb94:	dc400115 	stw	r17,4(sp)
    bb98:	dc000015 	stw	r16,0(sp)
    bb9c:	2023883a 	mov	r17,r4
    bba0:	2821883a 	mov	r16,r5
    bba4:	39000204 	addi	r4,r7,8
    bba8:	01400244 	movi	r5,9
    bbac:	dcc00315 	stw	r19,12(sp)
    bbb0:	dc800215 	stw	r18,8(sp)
    bbb4:	dfc00615 	stw	ra,24(sp)
    bbb8:	dd400515 	stw	r21,20(sp)
    bbbc:	dd000415 	stw	r20,16(sp)
    bbc0:	3825883a 	mov	r18,r7
    bbc4:	3027883a 	mov	r19,r6
    bbc8:	0004d1c0 	call	4d1c <__divsi3>
    bbcc:	00c00044 	movi	r3,1
    bbd0:	000b883a 	mov	r5,zero
    bbd4:	1880030e 	bge	r3,r2,bbe4 <__s2b+0x54>
    bbd8:	18c7883a 	add	r3,r3,r3
    bbdc:	29400044 	addi	r5,r5,1
    bbe0:	18bffd16 	blt	r3,r2,bbd8 <__alt_mem_Flash_flash_data+0xf400bbd8>
    bbe4:	8809883a 	mov	r4,r17
    bbe8:	000b9a00 	call	b9a0 <_Balloc>
    bbec:	d8c00717 	ldw	r3,28(sp)
    bbf0:	10c00515 	stw	r3,20(r2)
    bbf4:	00c00044 	movi	r3,1
    bbf8:	10c00415 	stw	r3,16(r2)
    bbfc:	00c00244 	movi	r3,9
    bc00:	1cc0210e 	bge	r3,r19,bc88 <__s2b+0xf8>
    bc04:	80eb883a 	add	r21,r16,r3
    bc08:	a829883a 	mov	r20,r21
    bc0c:	84e1883a 	add	r16,r16,r19
    bc10:	a1c00007 	ldb	r7,0(r20)
    bc14:	8809883a 	mov	r4,r17
    bc18:	a5000044 	addi	r20,r20,1
    bc1c:	100b883a 	mov	r5,r2
    bc20:	01800284 	movi	r6,10
    bc24:	39fff404 	addi	r7,r7,-48
    bc28:	000ba700 	call	ba70 <__multadd>
    bc2c:	a43ff81e 	bne	r20,r16,bc10 <__alt_mem_Flash_flash_data+0xf400bc10>
    bc30:	ace1883a 	add	r16,r21,r19
    bc34:	843ffe04 	addi	r16,r16,-8
    bc38:	9c800a0e 	bge	r19,r18,bc64 <__s2b+0xd4>
    bc3c:	94e5c83a 	sub	r18,r18,r19
    bc40:	84a5883a 	add	r18,r16,r18
    bc44:	81c00007 	ldb	r7,0(r16)
    bc48:	8809883a 	mov	r4,r17
    bc4c:	84000044 	addi	r16,r16,1
    bc50:	100b883a 	mov	r5,r2
    bc54:	01800284 	movi	r6,10
    bc58:	39fff404 	addi	r7,r7,-48
    bc5c:	000ba700 	call	ba70 <__multadd>
    bc60:	84bff81e 	bne	r16,r18,bc44 <__alt_mem_Flash_flash_data+0xf400bc44>
    bc64:	dfc00617 	ldw	ra,24(sp)
    bc68:	dd400517 	ldw	r21,20(sp)
    bc6c:	dd000417 	ldw	r20,16(sp)
    bc70:	dcc00317 	ldw	r19,12(sp)
    bc74:	dc800217 	ldw	r18,8(sp)
    bc78:	dc400117 	ldw	r17,4(sp)
    bc7c:	dc000017 	ldw	r16,0(sp)
    bc80:	dec00704 	addi	sp,sp,28
    bc84:	f800283a 	ret
    bc88:	84000284 	addi	r16,r16,10
    bc8c:	1827883a 	mov	r19,r3
    bc90:	003fe906 	br	bc38 <__alt_mem_Flash_flash_data+0xf400bc38>

0000bc94 <__hi0bits>:
    bc94:	20bfffec 	andhi	r2,r4,65535
    bc98:	1000141e 	bne	r2,zero,bcec <__hi0bits+0x58>
    bc9c:	2008943a 	slli	r4,r4,16
    bca0:	00800404 	movi	r2,16
    bca4:	20ffc02c 	andhi	r3,r4,65280
    bca8:	1800021e 	bne	r3,zero,bcb4 <__hi0bits+0x20>
    bcac:	2008923a 	slli	r4,r4,8
    bcb0:	10800204 	addi	r2,r2,8
    bcb4:	20fc002c 	andhi	r3,r4,61440
    bcb8:	1800021e 	bne	r3,zero,bcc4 <__hi0bits+0x30>
    bcbc:	2008913a 	slli	r4,r4,4
    bcc0:	10800104 	addi	r2,r2,4
    bcc4:	20f0002c 	andhi	r3,r4,49152
    bcc8:	1800031e 	bne	r3,zero,bcd8 <__hi0bits+0x44>
    bccc:	2109883a 	add	r4,r4,r4
    bcd0:	10800084 	addi	r2,r2,2
    bcd4:	2109883a 	add	r4,r4,r4
    bcd8:	20000316 	blt	r4,zero,bce8 <__hi0bits+0x54>
    bcdc:	2110002c 	andhi	r4,r4,16384
    bce0:	2000041e 	bne	r4,zero,bcf4 <__hi0bits+0x60>
    bce4:	00800804 	movi	r2,32
    bce8:	f800283a 	ret
    bcec:	0005883a 	mov	r2,zero
    bcf0:	003fec06 	br	bca4 <__alt_mem_Flash_flash_data+0xf400bca4>
    bcf4:	10800044 	addi	r2,r2,1
    bcf8:	f800283a 	ret

0000bcfc <__lo0bits>:
    bcfc:	20c00017 	ldw	r3,0(r4)
    bd00:	188001cc 	andi	r2,r3,7
    bd04:	10000826 	beq	r2,zero,bd28 <__lo0bits+0x2c>
    bd08:	1880004c 	andi	r2,r3,1
    bd0c:	1000211e 	bne	r2,zero,bd94 <__lo0bits+0x98>
    bd10:	1880008c 	andi	r2,r3,2
    bd14:	1000211e 	bne	r2,zero,bd9c <__lo0bits+0xa0>
    bd18:	1806d0ba 	srli	r3,r3,2
    bd1c:	00800084 	movi	r2,2
    bd20:	20c00015 	stw	r3,0(r4)
    bd24:	f800283a 	ret
    bd28:	18bfffcc 	andi	r2,r3,65535
    bd2c:	10001326 	beq	r2,zero,bd7c <__lo0bits+0x80>
    bd30:	0005883a 	mov	r2,zero
    bd34:	19403fcc 	andi	r5,r3,255
    bd38:	2800021e 	bne	r5,zero,bd44 <__lo0bits+0x48>
    bd3c:	1806d23a 	srli	r3,r3,8
    bd40:	10800204 	addi	r2,r2,8
    bd44:	194003cc 	andi	r5,r3,15
    bd48:	2800021e 	bne	r5,zero,bd54 <__lo0bits+0x58>
    bd4c:	1806d13a 	srli	r3,r3,4
    bd50:	10800104 	addi	r2,r2,4
    bd54:	194000cc 	andi	r5,r3,3
    bd58:	2800021e 	bne	r5,zero,bd64 <__lo0bits+0x68>
    bd5c:	1806d0ba 	srli	r3,r3,2
    bd60:	10800084 	addi	r2,r2,2
    bd64:	1940004c 	andi	r5,r3,1
    bd68:	2800081e 	bne	r5,zero,bd8c <__lo0bits+0x90>
    bd6c:	1806d07a 	srli	r3,r3,1
    bd70:	1800051e 	bne	r3,zero,bd88 <__lo0bits+0x8c>
    bd74:	00800804 	movi	r2,32
    bd78:	f800283a 	ret
    bd7c:	1806d43a 	srli	r3,r3,16
    bd80:	00800404 	movi	r2,16
    bd84:	003feb06 	br	bd34 <__alt_mem_Flash_flash_data+0xf400bd34>
    bd88:	10800044 	addi	r2,r2,1
    bd8c:	20c00015 	stw	r3,0(r4)
    bd90:	f800283a 	ret
    bd94:	0005883a 	mov	r2,zero
    bd98:	f800283a 	ret
    bd9c:	1806d07a 	srli	r3,r3,1
    bda0:	00800044 	movi	r2,1
    bda4:	20c00015 	stw	r3,0(r4)
    bda8:	f800283a 	ret

0000bdac <__i2b>:
    bdac:	defffd04 	addi	sp,sp,-12
    bdb0:	dc000015 	stw	r16,0(sp)
    bdb4:	04000044 	movi	r16,1
    bdb8:	dc400115 	stw	r17,4(sp)
    bdbc:	2823883a 	mov	r17,r5
    bdc0:	800b883a 	mov	r5,r16
    bdc4:	dfc00215 	stw	ra,8(sp)
    bdc8:	000b9a00 	call	b9a0 <_Balloc>
    bdcc:	14400515 	stw	r17,20(r2)
    bdd0:	14000415 	stw	r16,16(r2)
    bdd4:	dfc00217 	ldw	ra,8(sp)
    bdd8:	dc400117 	ldw	r17,4(sp)
    bddc:	dc000017 	ldw	r16,0(sp)
    bde0:	dec00304 	addi	sp,sp,12
    bde4:	f800283a 	ret

0000bde8 <__multiply>:
    bde8:	defffa04 	addi	sp,sp,-24
    bdec:	dcc00315 	stw	r19,12(sp)
    bdf0:	dc800215 	stw	r18,8(sp)
    bdf4:	2cc00417 	ldw	r19,16(r5)
    bdf8:	34800417 	ldw	r18,16(r6)
    bdfc:	dd000415 	stw	r20,16(sp)
    be00:	dc400115 	stw	r17,4(sp)
    be04:	dfc00515 	stw	ra,20(sp)
    be08:	dc000015 	stw	r16,0(sp)
    be0c:	2829883a 	mov	r20,r5
    be10:	3023883a 	mov	r17,r6
    be14:	9c807016 	blt	r19,r18,bfd8 <__multiply+0x1f0>
    be18:	9005883a 	mov	r2,r18
    be1c:	9825883a 	mov	r18,r19
    be20:	1027883a 	mov	r19,r2
    be24:	a0800217 	ldw	r2,8(r20)
    be28:	94e1883a 	add	r16,r18,r19
    be2c:	a1400117 	ldw	r5,4(r20)
    be30:	1400010e 	bge	r2,r16,be38 <__multiply+0x50>
    be34:	29400044 	addi	r5,r5,1
    be38:	000b9a00 	call	b9a0 <_Balloc>
    be3c:	8417883a 	add	r11,r16,r16
    be40:	13000504 	addi	r12,r2,20
    be44:	5ad7883a 	add	r11,r11,r11
    be48:	62d7883a 	add	r11,r12,r11
    be4c:	6007883a 	mov	r3,r12
    be50:	62c0032e 	bgeu	r12,r11,be60 <__multiply+0x78>
    be54:	18000015 	stw	zero,0(r3)
    be58:	18c00104 	addi	r3,r3,4
    be5c:	1afffd36 	bltu	r3,r11,be54 <__alt_mem_Flash_flash_data+0xf400be54>
    be60:	9ce7883a 	add	r19,r19,r19
    be64:	94a5883a 	add	r18,r18,r18
    be68:	89800504 	addi	r6,r17,20
    be6c:	9ce7883a 	add	r19,r19,r19
    be70:	a3800504 	addi	r14,r20,20
    be74:	94a5883a 	add	r18,r18,r18
    be78:	34db883a 	add	r13,r6,r19
    be7c:	7495883a 	add	r10,r14,r18
    be80:	3340422e 	bgeu	r6,r13,bf8c <__multiply+0x1a4>
    be84:	34400017 	ldw	r17,0(r6)
    be88:	8cbfffcc 	andi	r18,r17,65535
    be8c:	90001b26 	beq	r18,zero,befc <__multiply+0x114>
    be90:	6013883a 	mov	r9,r12
    be94:	7023883a 	mov	r17,r14
    be98:	0011883a 	mov	r8,zero
    be9c:	88c00017 	ldw	r3,0(r17)
    bea0:	4bc00017 	ldw	r15,0(r9)
    bea4:	8c400104 	addi	r17,r17,4
    bea8:	19ffffcc 	andi	r7,r3,65535
    beac:	3c8f383a 	mul	r7,r7,r18
    beb0:	1808d43a 	srli	r4,r3,16
    beb4:	797fffcc 	andi	r5,r15,65535
    beb8:	29cb883a 	add	r5,r5,r7
    bebc:	2a0b883a 	add	r5,r5,r8
    bec0:	2489383a 	mul	r4,r4,r18
    bec4:	7806d43a 	srli	r3,r15,16
    bec8:	2810d43a 	srli	r8,r5,16
    becc:	297fffcc 	andi	r5,r5,65535
    bed0:	1907883a 	add	r3,r3,r4
    bed4:	1a07883a 	add	r3,r3,r8
    bed8:	1808943a 	slli	r4,r3,16
    bedc:	480f883a 	mov	r7,r9
    bee0:	1810d43a 	srli	r8,r3,16
    bee4:	214ab03a 	or	r5,r4,r5
    bee8:	49400015 	stw	r5,0(r9)
    beec:	4a400104 	addi	r9,r9,4
    bef0:	8abfea36 	bltu	r17,r10,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    bef4:	3a000115 	stw	r8,4(r7)
    bef8:	34400017 	ldw	r17,0(r6)
    befc:	8822d43a 	srli	r17,r17,16
    bf00:	88001f26 	beq	r17,zero,bf80 <__multiply+0x198>
    bf04:	60c00017 	ldw	r3,0(r12)
    bf08:	7013883a 	mov	r9,r14
    bf0c:	601f883a 	mov	r15,r12
    bf10:	1811883a 	mov	r8,r3
    bf14:	6027883a 	mov	r19,r12
    bf18:	000f883a 	mov	r7,zero
    bf1c:	00000106 	br	bf24 <__multiply+0x13c>
    bf20:	9027883a 	mov	r19,r18
    bf24:	4940000b 	ldhu	r5,0(r9)
    bf28:	4010d43a 	srli	r8,r8,16
    bf2c:	193fffcc 	andi	r4,r3,65535
    bf30:	2c4b383a 	mul	r5,r5,r17
    bf34:	7bc00104 	addi	r15,r15,4
    bf38:	4a400104 	addi	r9,r9,4
    bf3c:	2a0b883a 	add	r5,r5,r8
    bf40:	29cb883a 	add	r5,r5,r7
    bf44:	2806943a 	slli	r3,r5,16
    bf48:	9c800104 	addi	r18,r19,4
    bf4c:	280ad43a 	srli	r5,r5,16
    bf50:	1908b03a 	or	r4,r3,r4
    bf54:	793fff15 	stw	r4,-4(r15)
    bf58:	48ffff17 	ldw	r3,-4(r9)
    bf5c:	92000017 	ldw	r8,0(r18)
    bf60:	1806d43a 	srli	r3,r3,16
    bf64:	413fffcc 	andi	r4,r8,65535
    bf68:	1c47383a 	mul	r3,r3,r17
    bf6c:	1907883a 	add	r3,r3,r4
    bf70:	1947883a 	add	r3,r3,r5
    bf74:	180ed43a 	srli	r7,r3,16
    bf78:	4abfe936 	bltu	r9,r10,bf20 <__alt_mem_Flash_flash_data+0xf400bf20>
    bf7c:	98c00115 	stw	r3,4(r19)
    bf80:	31800104 	addi	r6,r6,4
    bf84:	63000104 	addi	r12,r12,4
    bf88:	337fbe36 	bltu	r6,r13,be84 <__alt_mem_Flash_flash_data+0xf400be84>
    bf8c:	0400090e 	bge	zero,r16,bfb4 <__multiply+0x1cc>
    bf90:	58ffff17 	ldw	r3,-4(r11)
    bf94:	5affff04 	addi	r11,r11,-4
    bf98:	18000326 	beq	r3,zero,bfa8 <__multiply+0x1c0>
    bf9c:	00000506 	br	bfb4 <__multiply+0x1cc>
    bfa0:	58c00017 	ldw	r3,0(r11)
    bfa4:	1800031e 	bne	r3,zero,bfb4 <__multiply+0x1cc>
    bfa8:	843fffc4 	addi	r16,r16,-1
    bfac:	5affff04 	addi	r11,r11,-4
    bfb0:	803ffb1e 	bne	r16,zero,bfa0 <__alt_mem_Flash_flash_data+0xf400bfa0>
    bfb4:	14000415 	stw	r16,16(r2)
    bfb8:	dfc00517 	ldw	ra,20(sp)
    bfbc:	dd000417 	ldw	r20,16(sp)
    bfc0:	dcc00317 	ldw	r19,12(sp)
    bfc4:	dc800217 	ldw	r18,8(sp)
    bfc8:	dc400117 	ldw	r17,4(sp)
    bfcc:	dc000017 	ldw	r16,0(sp)
    bfd0:	dec00604 	addi	sp,sp,24
    bfd4:	f800283a 	ret
    bfd8:	3029883a 	mov	r20,r6
    bfdc:	2823883a 	mov	r17,r5
    bfe0:	003f9006 	br	be24 <__alt_mem_Flash_flash_data+0xf400be24>

0000bfe4 <__pow5mult>:
    bfe4:	defffa04 	addi	sp,sp,-24
    bfe8:	dcc00315 	stw	r19,12(sp)
    bfec:	dc800215 	stw	r18,8(sp)
    bff0:	dc000015 	stw	r16,0(sp)
    bff4:	dfc00515 	stw	ra,20(sp)
    bff8:	dd000415 	stw	r20,16(sp)
    bffc:	dc400115 	stw	r17,4(sp)
    c000:	308000cc 	andi	r2,r6,3
    c004:	3021883a 	mov	r16,r6
    c008:	2027883a 	mov	r19,r4
    c00c:	2825883a 	mov	r18,r5
    c010:	10002e1e 	bne	r2,zero,c0cc <__pow5mult+0xe8>
    c014:	8021d0ba 	srai	r16,r16,2
    c018:	80001a26 	beq	r16,zero,c084 <__pow5mult+0xa0>
    c01c:	9c401217 	ldw	r17,72(r19)
    c020:	8800061e 	bne	r17,zero,c03c <__pow5mult+0x58>
    c024:	00003406 	br	c0f8 <__pow5mult+0x114>
    c028:	8021d07a 	srai	r16,r16,1
    c02c:	80001526 	beq	r16,zero,c084 <__pow5mult+0xa0>
    c030:	88800017 	ldw	r2,0(r17)
    c034:	10001c26 	beq	r2,zero,c0a8 <__pow5mult+0xc4>
    c038:	1023883a 	mov	r17,r2
    c03c:	80c0004c 	andi	r3,r16,1
    c040:	183ff926 	beq	r3,zero,c028 <__alt_mem_Flash_flash_data+0xf400c028>
    c044:	900b883a 	mov	r5,r18
    c048:	880d883a 	mov	r6,r17
    c04c:	9809883a 	mov	r4,r19
    c050:	000bde80 	call	bde8 <__multiply>
    c054:	90001b26 	beq	r18,zero,c0c4 <__pow5mult+0xe0>
    c058:	91c00117 	ldw	r7,4(r18)
    c05c:	98c01317 	ldw	r3,76(r19)
    c060:	8021d07a 	srai	r16,r16,1
    c064:	39cf883a 	add	r7,r7,r7
    c068:	39cf883a 	add	r7,r7,r7
    c06c:	19c7883a 	add	r3,r3,r7
    c070:	19000017 	ldw	r4,0(r3)
    c074:	91000015 	stw	r4,0(r18)
    c078:	1c800015 	stw	r18,0(r3)
    c07c:	1025883a 	mov	r18,r2
    c080:	803feb1e 	bne	r16,zero,c030 <__alt_mem_Flash_flash_data+0xf400c030>
    c084:	9005883a 	mov	r2,r18
    c088:	dfc00517 	ldw	ra,20(sp)
    c08c:	dd000417 	ldw	r20,16(sp)
    c090:	dcc00317 	ldw	r19,12(sp)
    c094:	dc800217 	ldw	r18,8(sp)
    c098:	dc400117 	ldw	r17,4(sp)
    c09c:	dc000017 	ldw	r16,0(sp)
    c0a0:	dec00604 	addi	sp,sp,24
    c0a4:	f800283a 	ret
    c0a8:	9809883a 	mov	r4,r19
    c0ac:	880b883a 	mov	r5,r17
    c0b0:	880d883a 	mov	r6,r17
    c0b4:	000bde80 	call	bde8 <__multiply>
    c0b8:	88800015 	stw	r2,0(r17)
    c0bc:	10000015 	stw	zero,0(r2)
    c0c0:	003fdd06 	br	c038 <__alt_mem_Flash_flash_data+0xf400c038>
    c0c4:	1025883a 	mov	r18,r2
    c0c8:	003fd706 	br	c028 <__alt_mem_Flash_flash_data+0xf400c028>
    c0cc:	10bfffc4 	addi	r2,r2,-1
    c0d0:	1085883a 	add	r2,r2,r2
    c0d4:	00c000b4 	movhi	r3,2
    c0d8:	18ef0104 	addi	r3,r3,-17404
    c0dc:	1085883a 	add	r2,r2,r2
    c0e0:	1885883a 	add	r2,r3,r2
    c0e4:	11800017 	ldw	r6,0(r2)
    c0e8:	000f883a 	mov	r7,zero
    c0ec:	000ba700 	call	ba70 <__multadd>
    c0f0:	1025883a 	mov	r18,r2
    c0f4:	003fc706 	br	c014 <__alt_mem_Flash_flash_data+0xf400c014>
    c0f8:	05000044 	movi	r20,1
    c0fc:	9809883a 	mov	r4,r19
    c100:	a00b883a 	mov	r5,r20
    c104:	000b9a00 	call	b9a0 <_Balloc>
    c108:	1023883a 	mov	r17,r2
    c10c:	00809c44 	movi	r2,625
    c110:	88800515 	stw	r2,20(r17)
    c114:	8d000415 	stw	r20,16(r17)
    c118:	9c401215 	stw	r17,72(r19)
    c11c:	88000015 	stw	zero,0(r17)
    c120:	003fc606 	br	c03c <__alt_mem_Flash_flash_data+0xf400c03c>

0000c124 <__lshift>:
    c124:	defff904 	addi	sp,sp,-28
    c128:	dd000415 	stw	r20,16(sp)
    c12c:	dcc00315 	stw	r19,12(sp)
    c130:	3029d17a 	srai	r20,r6,5
    c134:	2cc00417 	ldw	r19,16(r5)
    c138:	28800217 	ldw	r2,8(r5)
    c13c:	dd400515 	stw	r21,20(sp)
    c140:	a4e7883a 	add	r19,r20,r19
    c144:	dc800215 	stw	r18,8(sp)
    c148:	dc400115 	stw	r17,4(sp)
    c14c:	dc000015 	stw	r16,0(sp)
    c150:	dfc00615 	stw	ra,24(sp)
    c154:	9c000044 	addi	r16,r19,1
    c158:	2823883a 	mov	r17,r5
    c15c:	302b883a 	mov	r21,r6
    c160:	2025883a 	mov	r18,r4
    c164:	29400117 	ldw	r5,4(r5)
    c168:	1400030e 	bge	r2,r16,c178 <__lshift+0x54>
    c16c:	1085883a 	add	r2,r2,r2
    c170:	29400044 	addi	r5,r5,1
    c174:	143ffd16 	blt	r2,r16,c16c <__alt_mem_Flash_flash_data+0xf400c16c>
    c178:	9009883a 	mov	r4,r18
    c17c:	000b9a00 	call	b9a0 <_Balloc>
    c180:	11c00504 	addi	r7,r2,20
    c184:	0500090e 	bge	zero,r20,c1ac <__lshift+0x88>
    c188:	3811883a 	mov	r8,r7
    c18c:	0007883a 	mov	r3,zero
    c190:	40000015 	stw	zero,0(r8)
    c194:	18c00044 	addi	r3,r3,1
    c198:	42000104 	addi	r8,r8,4
    c19c:	1d3ffc1e 	bne	r3,r20,c190 <__alt_mem_Flash_flash_data+0xf400c190>
    c1a0:	18c7883a 	add	r3,r3,r3
    c1a4:	18c7883a 	add	r3,r3,r3
    c1a8:	38cf883a 	add	r7,r7,r3
    c1ac:	89000417 	ldw	r4,16(r17)
    c1b0:	88c00504 	addi	r3,r17,20
    c1b4:	a98007cc 	andi	r6,r21,31
    c1b8:	2109883a 	add	r4,r4,r4
    c1bc:	2109883a 	add	r4,r4,r4
    c1c0:	1909883a 	add	r4,r3,r4
    c1c4:	30002326 	beq	r6,zero,c254 <__lshift+0x130>
    c1c8:	01400804 	movi	r5,32
    c1cc:	298bc83a 	sub	r5,r5,r6
    c1d0:	0013883a 	mov	r9,zero
    c1d4:	1a000017 	ldw	r8,0(r3)
    c1d8:	3815883a 	mov	r10,r7
    c1dc:	39c00104 	addi	r7,r7,4
    c1e0:	4190983a 	sll	r8,r8,r6
    c1e4:	18c00104 	addi	r3,r3,4
    c1e8:	4a10b03a 	or	r8,r9,r8
    c1ec:	3a3fff15 	stw	r8,-4(r7)
    c1f0:	1a3fff17 	ldw	r8,-4(r3)
    c1f4:	4152d83a 	srl	r9,r8,r5
    c1f8:	193ff636 	bltu	r3,r4,c1d4 <__alt_mem_Flash_flash_data+0xf400c1d4>
    c1fc:	52400115 	stw	r9,4(r10)
    c200:	48001a1e 	bne	r9,zero,c26c <__lshift+0x148>
    c204:	843fffc4 	addi	r16,r16,-1
    c208:	14000415 	stw	r16,16(r2)
    c20c:	88000826 	beq	r17,zero,c230 <__lshift+0x10c>
    c210:	89000117 	ldw	r4,4(r17)
    c214:	90c01317 	ldw	r3,76(r18)
    c218:	2109883a 	add	r4,r4,r4
    c21c:	2109883a 	add	r4,r4,r4
    c220:	1907883a 	add	r3,r3,r4
    c224:	19000017 	ldw	r4,0(r3)
    c228:	89000015 	stw	r4,0(r17)
    c22c:	1c400015 	stw	r17,0(r3)
    c230:	dfc00617 	ldw	ra,24(sp)
    c234:	dd400517 	ldw	r21,20(sp)
    c238:	dd000417 	ldw	r20,16(sp)
    c23c:	dcc00317 	ldw	r19,12(sp)
    c240:	dc800217 	ldw	r18,8(sp)
    c244:	dc400117 	ldw	r17,4(sp)
    c248:	dc000017 	ldw	r16,0(sp)
    c24c:	dec00704 	addi	sp,sp,28
    c250:	f800283a 	ret
    c254:	19400017 	ldw	r5,0(r3)
    c258:	39c00104 	addi	r7,r7,4
    c25c:	18c00104 	addi	r3,r3,4
    c260:	397fff15 	stw	r5,-4(r7)
    c264:	193ffb36 	bltu	r3,r4,c254 <__alt_mem_Flash_flash_data+0xf400c254>
    c268:	003fe606 	br	c204 <__alt_mem_Flash_flash_data+0xf400c204>
    c26c:	9c000084 	addi	r16,r19,2
    c270:	003fe406 	br	c204 <__alt_mem_Flash_flash_data+0xf400c204>

0000c274 <__mcmp>:
    c274:	20800417 	ldw	r2,16(r4)
    c278:	28c00417 	ldw	r3,16(r5)
    c27c:	10c5c83a 	sub	r2,r2,r3
    c280:	1000111e 	bne	r2,zero,c2c8 <__mcmp+0x54>
    c284:	18c7883a 	add	r3,r3,r3
    c288:	18c7883a 	add	r3,r3,r3
    c28c:	21000504 	addi	r4,r4,20
    c290:	29400504 	addi	r5,r5,20
    c294:	20c5883a 	add	r2,r4,r3
    c298:	28cb883a 	add	r5,r5,r3
    c29c:	00000106 	br	c2a4 <__mcmp+0x30>
    c2a0:	20800a2e 	bgeu	r4,r2,c2cc <__mcmp+0x58>
    c2a4:	10bfff04 	addi	r2,r2,-4
    c2a8:	297fff04 	addi	r5,r5,-4
    c2ac:	11800017 	ldw	r6,0(r2)
    c2b0:	28c00017 	ldw	r3,0(r5)
    c2b4:	30fffa26 	beq	r6,r3,c2a0 <__alt_mem_Flash_flash_data+0xf400c2a0>
    c2b8:	30c00236 	bltu	r6,r3,c2c4 <__mcmp+0x50>
    c2bc:	00800044 	movi	r2,1
    c2c0:	f800283a 	ret
    c2c4:	00bfffc4 	movi	r2,-1
    c2c8:	f800283a 	ret
    c2cc:	0005883a 	mov	r2,zero
    c2d0:	f800283a 	ret

0000c2d4 <__mdiff>:
    c2d4:	defffb04 	addi	sp,sp,-20
    c2d8:	dc000015 	stw	r16,0(sp)
    c2dc:	2821883a 	mov	r16,r5
    c2e0:	dcc00315 	stw	r19,12(sp)
    c2e4:	300b883a 	mov	r5,r6
    c2e8:	2027883a 	mov	r19,r4
    c2ec:	8009883a 	mov	r4,r16
    c2f0:	dc800215 	stw	r18,8(sp)
    c2f4:	dfc00415 	stw	ra,16(sp)
    c2f8:	dc400115 	stw	r17,4(sp)
    c2fc:	3025883a 	mov	r18,r6
    c300:	000c2740 	call	c274 <__mcmp>
    c304:	10005226 	beq	r2,zero,c450 <__mdiff+0x17c>
    c308:	10004c16 	blt	r2,zero,c43c <__mdiff+0x168>
    c30c:	0023883a 	mov	r17,zero
    c310:	81400117 	ldw	r5,4(r16)
    c314:	9809883a 	mov	r4,r19
    c318:	000b9a00 	call	b9a0 <_Balloc>
    c31c:	83400417 	ldw	r13,16(r16)
    c320:	93800417 	ldw	r14,16(r18)
    c324:	81000504 	addi	r4,r16,20
    c328:	6b59883a 	add	r12,r13,r13
    c32c:	739d883a 	add	r14,r14,r14
    c330:	6319883a 	add	r12,r12,r12
    c334:	91800504 	addi	r6,r18,20
    c338:	739d883a 	add	r14,r14,r14
    c33c:	14400315 	stw	r17,12(r2)
    c340:	2319883a 	add	r12,r4,r12
    c344:	339d883a 	add	r14,r6,r14
    c348:	12400504 	addi	r9,r2,20
    c34c:	0007883a 	mov	r3,zero
    c350:	22000017 	ldw	r8,0(r4)
    c354:	32800017 	ldw	r10,0(r6)
    c358:	4ac00104 	addi	r11,r9,4
    c35c:	41ffffcc 	andi	r7,r8,65535
    c360:	38c7883a 	add	r3,r7,r3
    c364:	51ffffcc 	andi	r7,r10,65535
    c368:	19cfc83a 	sub	r7,r3,r7
    c36c:	4010d43a 	srli	r8,r8,16
    c370:	5014d43a 	srli	r10,r10,16
    c374:	3807d43a 	srai	r3,r7,16
    c378:	39ffffcc 	andi	r7,r7,65535
    c37c:	4291c83a 	sub	r8,r8,r10
    c380:	40c7883a 	add	r3,r8,r3
    c384:	1810943a 	slli	r8,r3,16
    c388:	31800104 	addi	r6,r6,4
    c38c:	21000104 	addi	r4,r4,4
    c390:	41ceb03a 	or	r7,r8,r7
    c394:	49c00015 	stw	r7,0(r9)
    c398:	1807d43a 	srai	r3,r3,16
    c39c:	580b883a 	mov	r5,r11
    c3a0:	5813883a 	mov	r9,r11
    c3a4:	33bfea36 	bltu	r6,r14,c350 <__alt_mem_Flash_flash_data+0xf400c350>
    c3a8:	2011883a 	mov	r8,r4
    c3ac:	2300152e 	bgeu	r4,r12,c404 <__mdiff+0x130>
    c3b0:	21400017 	ldw	r5,0(r4)
    c3b4:	4a400104 	addi	r9,r9,4
    c3b8:	21000104 	addi	r4,r4,4
    c3bc:	29ffffcc 	andi	r7,r5,65535
    c3c0:	38c7883a 	add	r3,r7,r3
    c3c4:	280ad43a 	srli	r5,r5,16
    c3c8:	180dd43a 	srai	r6,r3,16
    c3cc:	19ffffcc 	andi	r7,r3,65535
    c3d0:	3147883a 	add	r3,r6,r5
    c3d4:	180a943a 	slli	r5,r3,16
    c3d8:	1807d43a 	srai	r3,r3,16
    c3dc:	29ceb03a 	or	r7,r5,r7
    c3e0:	49ffff15 	stw	r7,-4(r9)
    c3e4:	233ff236 	bltu	r4,r12,c3b0 <__alt_mem_Flash_flash_data+0xf400c3b0>
    c3e8:	0206303a 	nor	r3,zero,r8
    c3ec:	1b07883a 	add	r3,r3,r12
    c3f0:	1806d0ba 	srli	r3,r3,2
    c3f4:	18c00044 	addi	r3,r3,1
    c3f8:	18c7883a 	add	r3,r3,r3
    c3fc:	18c7883a 	add	r3,r3,r3
    c400:	58cb883a 	add	r5,r11,r3
    c404:	28ffff04 	addi	r3,r5,-4
    c408:	3800041e 	bne	r7,zero,c41c <__mdiff+0x148>
    c40c:	18ffff04 	addi	r3,r3,-4
    c410:	19000017 	ldw	r4,0(r3)
    c414:	6b7fffc4 	addi	r13,r13,-1
    c418:	203ffc26 	beq	r4,zero,c40c <__alt_mem_Flash_flash_data+0xf400c40c>
    c41c:	13400415 	stw	r13,16(r2)
    c420:	dfc00417 	ldw	ra,16(sp)
    c424:	dcc00317 	ldw	r19,12(sp)
    c428:	dc800217 	ldw	r18,8(sp)
    c42c:	dc400117 	ldw	r17,4(sp)
    c430:	dc000017 	ldw	r16,0(sp)
    c434:	dec00504 	addi	sp,sp,20
    c438:	f800283a 	ret
    c43c:	8005883a 	mov	r2,r16
    c440:	04400044 	movi	r17,1
    c444:	9021883a 	mov	r16,r18
    c448:	1025883a 	mov	r18,r2
    c44c:	003fb006 	br	c310 <__alt_mem_Flash_flash_data+0xf400c310>
    c450:	9809883a 	mov	r4,r19
    c454:	000b883a 	mov	r5,zero
    c458:	000b9a00 	call	b9a0 <_Balloc>
    c45c:	00c00044 	movi	r3,1
    c460:	10c00415 	stw	r3,16(r2)
    c464:	10000515 	stw	zero,20(r2)
    c468:	003fed06 	br	c420 <__alt_mem_Flash_flash_data+0xf400c420>

0000c46c <__ulp>:
    c46c:	295ffc2c 	andhi	r5,r5,32752
    c470:	00bf3034 	movhi	r2,64704
    c474:	2887883a 	add	r3,r5,r2
    c478:	00c0020e 	bge	zero,r3,c484 <__ulp+0x18>
    c47c:	0005883a 	mov	r2,zero
    c480:	f800283a 	ret
    c484:	00c7c83a 	sub	r3,zero,r3
    c488:	180bd53a 	srai	r5,r3,20
    c48c:	008004c4 	movi	r2,19
    c490:	11400a0e 	bge	r2,r5,c4bc <__ulp+0x50>
    c494:	00800c84 	movi	r2,50
    c498:	0007883a 	mov	r3,zero
    c49c:	11400516 	blt	r2,r5,c4b4 <__ulp+0x48>
    c4a0:	00800cc4 	movi	r2,51
    c4a4:	114bc83a 	sub	r5,r2,r5
    c4a8:	00800044 	movi	r2,1
    c4ac:	1144983a 	sll	r2,r2,r5
    c4b0:	f800283a 	ret
    c4b4:	00800044 	movi	r2,1
    c4b8:	f800283a 	ret
    c4bc:	00800234 	movhi	r2,8
    c4c0:	1147d83a 	sra	r3,r2,r5
    c4c4:	0005883a 	mov	r2,zero
    c4c8:	f800283a 	ret

0000c4cc <__b2d>:
    c4cc:	defffa04 	addi	sp,sp,-24
    c4d0:	dc000015 	stw	r16,0(sp)
    c4d4:	24000417 	ldw	r16,16(r4)
    c4d8:	dc400115 	stw	r17,4(sp)
    c4dc:	24400504 	addi	r17,r4,20
    c4e0:	8421883a 	add	r16,r16,r16
    c4e4:	8421883a 	add	r16,r16,r16
    c4e8:	8c21883a 	add	r16,r17,r16
    c4ec:	dc800215 	stw	r18,8(sp)
    c4f0:	84bfff17 	ldw	r18,-4(r16)
    c4f4:	dd000415 	stw	r20,16(sp)
    c4f8:	dcc00315 	stw	r19,12(sp)
    c4fc:	9009883a 	mov	r4,r18
    c500:	2829883a 	mov	r20,r5
    c504:	dfc00515 	stw	ra,20(sp)
    c508:	000bc940 	call	bc94 <__hi0bits>
    c50c:	00c00804 	movi	r3,32
    c510:	1887c83a 	sub	r3,r3,r2
    c514:	a0c00015 	stw	r3,0(r20)
    c518:	00c00284 	movi	r3,10
    c51c:	84ffff04 	addi	r19,r16,-4
    c520:	18801216 	blt	r3,r2,c56c <__b2d+0xa0>
    c524:	014002c4 	movi	r5,11
    c528:	2889c83a 	sub	r4,r5,r2
    c52c:	9106d83a 	srl	r3,r18,r4
    c530:	18cffc34 	orhi	r3,r3,16368
    c534:	8cc0282e 	bgeu	r17,r19,c5d8 <__b2d+0x10c>
    c538:	817ffe17 	ldw	r5,-8(r16)
    c53c:	290ad83a 	srl	r5,r5,r4
    c540:	10800544 	addi	r2,r2,21
    c544:	9084983a 	sll	r2,r18,r2
    c548:	2884b03a 	or	r2,r5,r2
    c54c:	dfc00517 	ldw	ra,20(sp)
    c550:	dd000417 	ldw	r20,16(sp)
    c554:	dcc00317 	ldw	r19,12(sp)
    c558:	dc800217 	ldw	r18,8(sp)
    c55c:	dc400117 	ldw	r17,4(sp)
    c560:	dc000017 	ldw	r16,0(sp)
    c564:	dec00604 	addi	sp,sp,24
    c568:	f800283a 	ret
    c56c:	113ffd44 	addi	r4,r2,-11
    c570:	8cc00f2e 	bgeu	r17,r19,c5b0 <__b2d+0xe4>
    c574:	81bffe04 	addi	r6,r16,-8
    c578:	817ffe17 	ldw	r5,-8(r16)
    c57c:	20001326 	beq	r4,zero,c5cc <__b2d+0x100>
    c580:	00c00ac4 	movi	r3,43
    c584:	1885c83a 	sub	r2,r3,r2
    c588:	2886d83a 	srl	r3,r5,r2
    c58c:	9124983a 	sll	r18,r18,r4
    c590:	90e4b03a 	or	r18,r18,r3
    c594:	90cffc34 	orhi	r3,r18,16368
    c598:	8980112e 	bgeu	r17,r6,c5e0 <__b2d+0x114>
    c59c:	81bffd17 	ldw	r6,-12(r16)
    c5a0:	308cd83a 	srl	r6,r6,r2
    c5a4:	2904983a 	sll	r2,r5,r4
    c5a8:	1184b03a 	or	r2,r2,r6
    c5ac:	003fe706 	br	c54c <__alt_mem_Flash_flash_data+0xf400c54c>
    c5b0:	20000526 	beq	r4,zero,c5c8 <__b2d+0xfc>
    c5b4:	9124983a 	sll	r18,r18,r4
    c5b8:	000d883a 	mov	r6,zero
    c5bc:	000b883a 	mov	r5,zero
    c5c0:	90cffc34 	orhi	r3,r18,16368
    c5c4:	003ff706 	br	c5a4 <__alt_mem_Flash_flash_data+0xf400c5a4>
    c5c8:	000b883a 	mov	r5,zero
    c5cc:	90cffc34 	orhi	r3,r18,16368
    c5d0:	2805883a 	mov	r2,r5
    c5d4:	003fdd06 	br	c54c <__alt_mem_Flash_flash_data+0xf400c54c>
    c5d8:	000b883a 	mov	r5,zero
    c5dc:	003fd806 	br	c540 <__alt_mem_Flash_flash_data+0xf400c540>
    c5e0:	000d883a 	mov	r6,zero
    c5e4:	003fef06 	br	c5a4 <__alt_mem_Flash_flash_data+0xf400c5a4>

0000c5e8 <__d2b>:
    c5e8:	defff704 	addi	sp,sp,-36
    c5ec:	dc000215 	stw	r16,8(sp)
    c5f0:	3021883a 	mov	r16,r6
    c5f4:	dc400315 	stw	r17,12(sp)
    c5f8:	8022907a 	slli	r17,r16,1
    c5fc:	dd400715 	stw	r21,28(sp)
    c600:	282b883a 	mov	r21,r5
    c604:	01400044 	movi	r5,1
    c608:	dd000615 	stw	r20,24(sp)
    c60c:	dcc00515 	stw	r19,20(sp)
    c610:	dc800415 	stw	r18,16(sp)
    c614:	dfc00815 	stw	ra,32(sp)
    c618:	3829883a 	mov	r20,r7
    c61c:	dc800917 	ldw	r18,36(sp)
    c620:	8822d57a 	srli	r17,r17,21
    c624:	000b9a00 	call	b9a0 <_Balloc>
    c628:	1027883a 	mov	r19,r2
    c62c:	00800434 	movhi	r2,16
    c630:	10bfffc4 	addi	r2,r2,-1
    c634:	808c703a 	and	r6,r16,r2
    c638:	88000126 	beq	r17,zero,c640 <__d2b+0x58>
    c63c:	31800434 	orhi	r6,r6,16
    c640:	d9800015 	stw	r6,0(sp)
    c644:	a8001f26 	beq	r21,zero,c6c4 <__d2b+0xdc>
    c648:	d9000104 	addi	r4,sp,4
    c64c:	dd400115 	stw	r21,4(sp)
    c650:	000bcfc0 	call	bcfc <__lo0bits>
    c654:	d8c00017 	ldw	r3,0(sp)
    c658:	1000291e 	bne	r2,zero,c700 <__d2b+0x118>
    c65c:	d9000117 	ldw	r4,4(sp)
    c660:	99000515 	stw	r4,20(r19)
    c664:	1820c03a 	cmpne	r16,r3,zero
    c668:	84000044 	addi	r16,r16,1
    c66c:	98c00615 	stw	r3,24(r19)
    c670:	9c000415 	stw	r16,16(r19)
    c674:	88001b1e 	bne	r17,zero,c6e4 <__d2b+0xfc>
    c678:	800690ba 	slli	r3,r16,2
    c67c:	10bef384 	addi	r2,r2,-1074
    c680:	a0800015 	stw	r2,0(r20)
    c684:	98c5883a 	add	r2,r19,r3
    c688:	11000417 	ldw	r4,16(r2)
    c68c:	8020917a 	slli	r16,r16,5
    c690:	000bc940 	call	bc94 <__hi0bits>
    c694:	8085c83a 	sub	r2,r16,r2
    c698:	90800015 	stw	r2,0(r18)
    c69c:	9805883a 	mov	r2,r19
    c6a0:	dfc00817 	ldw	ra,32(sp)
    c6a4:	dd400717 	ldw	r21,28(sp)
    c6a8:	dd000617 	ldw	r20,24(sp)
    c6ac:	dcc00517 	ldw	r19,20(sp)
    c6b0:	dc800417 	ldw	r18,16(sp)
    c6b4:	dc400317 	ldw	r17,12(sp)
    c6b8:	dc000217 	ldw	r16,8(sp)
    c6bc:	dec00904 	addi	sp,sp,36
    c6c0:	f800283a 	ret
    c6c4:	d809883a 	mov	r4,sp
    c6c8:	000bcfc0 	call	bcfc <__lo0bits>
    c6cc:	d8c00017 	ldw	r3,0(sp)
    c6d0:	04000044 	movi	r16,1
    c6d4:	9c000415 	stw	r16,16(r19)
    c6d8:	98c00515 	stw	r3,20(r19)
    c6dc:	10800804 	addi	r2,r2,32
    c6e0:	883fe526 	beq	r17,zero,c678 <__alt_mem_Flash_flash_data+0xf400c678>
    c6e4:	8c7ef344 	addi	r17,r17,-1075
    c6e8:	88a3883a 	add	r17,r17,r2
    c6ec:	00c00d44 	movi	r3,53
    c6f0:	a4400015 	stw	r17,0(r20)
    c6f4:	1885c83a 	sub	r2,r3,r2
    c6f8:	90800015 	stw	r2,0(r18)
    c6fc:	003fe706 	br	c69c <__alt_mem_Flash_flash_data+0xf400c69c>
    c700:	01000804 	movi	r4,32
    c704:	2089c83a 	sub	r4,r4,r2
    c708:	1908983a 	sll	r4,r3,r4
    c70c:	d9400117 	ldw	r5,4(sp)
    c710:	1886d83a 	srl	r3,r3,r2
    c714:	2148b03a 	or	r4,r4,r5
    c718:	99000515 	stw	r4,20(r19)
    c71c:	d8c00015 	stw	r3,0(sp)
    c720:	003fd006 	br	c664 <__alt_mem_Flash_flash_data+0xf400c664>

0000c724 <__ratio>:
    c724:	defff904 	addi	sp,sp,-28
    c728:	dc400315 	stw	r17,12(sp)
    c72c:	2823883a 	mov	r17,r5
    c730:	d9400104 	addi	r5,sp,4
    c734:	dfc00615 	stw	ra,24(sp)
    c738:	dcc00515 	stw	r19,20(sp)
    c73c:	dc800415 	stw	r18,16(sp)
    c740:	2027883a 	mov	r19,r4
    c744:	dc000215 	stw	r16,8(sp)
    c748:	000c4cc0 	call	c4cc <__b2d>
    c74c:	8809883a 	mov	r4,r17
    c750:	d80b883a 	mov	r5,sp
    c754:	1025883a 	mov	r18,r2
    c758:	1821883a 	mov	r16,r3
    c75c:	000c4cc0 	call	c4cc <__b2d>
    c760:	8a400417 	ldw	r9,16(r17)
    c764:	9a000417 	ldw	r8,16(r19)
    c768:	100d883a 	mov	r6,r2
    c76c:	d8800017 	ldw	r2,0(sp)
    c770:	4251c83a 	sub	r8,r8,r9
    c774:	4012917a 	slli	r9,r8,5
    c778:	da000117 	ldw	r8,4(sp)
    c77c:	4091c83a 	sub	r8,r8,r2
    c780:	4251883a 	add	r8,r8,r9
    c784:	02000d0e 	bge	zero,r8,c7bc <__ratio+0x98>
    c788:	4010953a 	slli	r8,r8,20
    c78c:	4421883a 	add	r16,r8,r16
    c790:	9009883a 	mov	r4,r18
    c794:	800b883a 	mov	r5,r16
    c798:	180f883a 	mov	r7,r3
    c79c:	00057ac0 	call	57ac <__divdf3>
    c7a0:	dfc00617 	ldw	ra,24(sp)
    c7a4:	dcc00517 	ldw	r19,20(sp)
    c7a8:	dc800417 	ldw	r18,16(sp)
    c7ac:	dc400317 	ldw	r17,12(sp)
    c7b0:	dc000217 	ldw	r16,8(sp)
    c7b4:	dec00704 	addi	sp,sp,28
    c7b8:	f800283a 	ret
    c7bc:	4010953a 	slli	r8,r8,20
    c7c0:	1a07c83a 	sub	r3,r3,r8
    c7c4:	003ff206 	br	c790 <__alt_mem_Flash_flash_data+0xf400c790>

0000c7c8 <_mprec_log10>:
    c7c8:	defffe04 	addi	sp,sp,-8
    c7cc:	dc000015 	stw	r16,0(sp)
    c7d0:	dfc00115 	stw	ra,4(sp)
    c7d4:	008005c4 	movi	r2,23
    c7d8:	2021883a 	mov	r16,r4
    c7dc:	11000d0e 	bge	r2,r4,c814 <_mprec_log10+0x4c>
    c7e0:	0005883a 	mov	r2,zero
    c7e4:	00cffc34 	movhi	r3,16368
    c7e8:	843fffc4 	addi	r16,r16,-1
    c7ec:	1009883a 	mov	r4,r2
    c7f0:	180b883a 	mov	r5,r3
    c7f4:	000d883a 	mov	r6,zero
    c7f8:	01d00934 	movhi	r7,16420
    c7fc:	00062bc0 	call	62bc <__muldf3>
    c800:	803ff91e 	bne	r16,zero,c7e8 <__alt_mem_Flash_flash_data+0xf400c7e8>
    c804:	dfc00117 	ldw	ra,4(sp)
    c808:	dc000017 	ldw	r16,0(sp)
    c80c:	dec00204 	addi	sp,sp,8
    c810:	f800283a 	ret
    c814:	202090fa 	slli	r16,r4,3
    c818:	008000b4 	movhi	r2,2
    c81c:	10af1804 	addi	r2,r2,-17312
    c820:	1421883a 	add	r16,r2,r16
    c824:	80800017 	ldw	r2,0(r16)
    c828:	80c00117 	ldw	r3,4(r16)
    c82c:	dfc00117 	ldw	ra,4(sp)
    c830:	dc000017 	ldw	r16,0(sp)
    c834:	dec00204 	addi	sp,sp,8
    c838:	f800283a 	ret

0000c83c <__copybits>:
    c83c:	297fffc4 	addi	r5,r5,-1
    c840:	280fd17a 	srai	r7,r5,5
    c844:	30c00417 	ldw	r3,16(r6)
    c848:	30800504 	addi	r2,r6,20
    c84c:	39c00044 	addi	r7,r7,1
    c850:	18c7883a 	add	r3,r3,r3
    c854:	39cf883a 	add	r7,r7,r7
    c858:	18c7883a 	add	r3,r3,r3
    c85c:	39cf883a 	add	r7,r7,r7
    c860:	10c7883a 	add	r3,r2,r3
    c864:	21cf883a 	add	r7,r4,r7
    c868:	10c00d2e 	bgeu	r2,r3,c8a0 <__copybits+0x64>
    c86c:	200b883a 	mov	r5,r4
    c870:	12000017 	ldw	r8,0(r2)
    c874:	29400104 	addi	r5,r5,4
    c878:	10800104 	addi	r2,r2,4
    c87c:	2a3fff15 	stw	r8,-4(r5)
    c880:	10fffb36 	bltu	r2,r3,c870 <__alt_mem_Flash_flash_data+0xf400c870>
    c884:	1985c83a 	sub	r2,r3,r6
    c888:	10bffac4 	addi	r2,r2,-21
    c88c:	1004d0ba 	srli	r2,r2,2
    c890:	10800044 	addi	r2,r2,1
    c894:	1085883a 	add	r2,r2,r2
    c898:	1085883a 	add	r2,r2,r2
    c89c:	2089883a 	add	r4,r4,r2
    c8a0:	21c0032e 	bgeu	r4,r7,c8b0 <__copybits+0x74>
    c8a4:	20000015 	stw	zero,0(r4)
    c8a8:	21000104 	addi	r4,r4,4
    c8ac:	21fffd36 	bltu	r4,r7,c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    c8b0:	f800283a 	ret

0000c8b4 <__any_on>:
    c8b4:	20c00417 	ldw	r3,16(r4)
    c8b8:	2805d17a 	srai	r2,r5,5
    c8bc:	21000504 	addi	r4,r4,20
    c8c0:	18800d0e 	bge	r3,r2,c8f8 <__any_on+0x44>
    c8c4:	18c7883a 	add	r3,r3,r3
    c8c8:	18c7883a 	add	r3,r3,r3
    c8cc:	20c7883a 	add	r3,r4,r3
    c8d0:	20c0192e 	bgeu	r4,r3,c938 <__any_on+0x84>
    c8d4:	18bfff17 	ldw	r2,-4(r3)
    c8d8:	18ffff04 	addi	r3,r3,-4
    c8dc:	1000041e 	bne	r2,zero,c8f0 <__any_on+0x3c>
    c8e0:	20c0142e 	bgeu	r4,r3,c934 <__any_on+0x80>
    c8e4:	18ffff04 	addi	r3,r3,-4
    c8e8:	19400017 	ldw	r5,0(r3)
    c8ec:	283ffc26 	beq	r5,zero,c8e0 <__alt_mem_Flash_flash_data+0xf400c8e0>
    c8f0:	00800044 	movi	r2,1
    c8f4:	f800283a 	ret
    c8f8:	10c00a0e 	bge	r2,r3,c924 <__any_on+0x70>
    c8fc:	1085883a 	add	r2,r2,r2
    c900:	1085883a 	add	r2,r2,r2
    c904:	294007cc 	andi	r5,r5,31
    c908:	2087883a 	add	r3,r4,r2
    c90c:	283ff026 	beq	r5,zero,c8d0 <__alt_mem_Flash_flash_data+0xf400c8d0>
    c910:	19800017 	ldw	r6,0(r3)
    c914:	3144d83a 	srl	r2,r6,r5
    c918:	114a983a 	sll	r5,r2,r5
    c91c:	29bff41e 	bne	r5,r6,c8f0 <__alt_mem_Flash_flash_data+0xf400c8f0>
    c920:	003feb06 	br	c8d0 <__alt_mem_Flash_flash_data+0xf400c8d0>
    c924:	1085883a 	add	r2,r2,r2
    c928:	1085883a 	add	r2,r2,r2
    c92c:	2087883a 	add	r3,r4,r2
    c930:	003fe706 	br	c8d0 <__alt_mem_Flash_flash_data+0xf400c8d0>
    c934:	f800283a 	ret
    c938:	0005883a 	mov	r2,zero
    c93c:	f800283a 	ret

0000c940 <__fpclassifyd>:
    c940:	00a00034 	movhi	r2,32768
    c944:	10bfffc4 	addi	r2,r2,-1
    c948:	2884703a 	and	r2,r5,r2
    c94c:	10000726 	beq	r2,zero,c96c <__fpclassifyd+0x2c>
    c950:	00fffc34 	movhi	r3,65520
    c954:	019ff834 	movhi	r6,32736
    c958:	28c7883a 	add	r3,r5,r3
    c95c:	31bfffc4 	addi	r6,r6,-1
    c960:	30c00536 	bltu	r6,r3,c978 <__fpclassifyd+0x38>
    c964:	00800104 	movi	r2,4
    c968:	f800283a 	ret
    c96c:	2000021e 	bne	r4,zero,c978 <__fpclassifyd+0x38>
    c970:	00800084 	movi	r2,2
    c974:	f800283a 	ret
    c978:	00dffc34 	movhi	r3,32752
    c97c:	019ff834 	movhi	r6,32736
    c980:	28cb883a 	add	r5,r5,r3
    c984:	31bfffc4 	addi	r6,r6,-1
    c988:	317ff62e 	bgeu	r6,r5,c964 <__alt_mem_Flash_flash_data+0xf400c964>
    c98c:	01400434 	movhi	r5,16
    c990:	297fffc4 	addi	r5,r5,-1
    c994:	28800236 	bltu	r5,r2,c9a0 <__fpclassifyd+0x60>
    c998:	008000c4 	movi	r2,3
    c99c:	f800283a 	ret
    c9a0:	10c00226 	beq	r2,r3,c9ac <__fpclassifyd+0x6c>
    c9a4:	0005883a 	mov	r2,zero
    c9a8:	f800283a 	ret
    c9ac:	2005003a 	cmpeq	r2,r4,zero
    c9b0:	f800283a 	ret

0000c9b4 <_sbrk_r>:
    c9b4:	defffd04 	addi	sp,sp,-12
    c9b8:	dc000015 	stw	r16,0(sp)
    c9bc:	040000b4 	movhi	r16,2
    c9c0:	dc400115 	stw	r17,4(sp)
    c9c4:	843f9104 	addi	r16,r16,-444
    c9c8:	2023883a 	mov	r17,r4
    c9cc:	2809883a 	mov	r4,r5
    c9d0:	dfc00215 	stw	ra,8(sp)
    c9d4:	80000015 	stw	zero,0(r16)
    c9d8:	000f7b40 	call	f7b4 <sbrk>
    c9dc:	00ffffc4 	movi	r3,-1
    c9e0:	10c00526 	beq	r2,r3,c9f8 <_sbrk_r+0x44>
    c9e4:	dfc00217 	ldw	ra,8(sp)
    c9e8:	dc400117 	ldw	r17,4(sp)
    c9ec:	dc000017 	ldw	r16,0(sp)
    c9f0:	dec00304 	addi	sp,sp,12
    c9f4:	f800283a 	ret
    c9f8:	80c00017 	ldw	r3,0(r16)
    c9fc:	183ff926 	beq	r3,zero,c9e4 <__alt_mem_Flash_flash_data+0xf400c9e4>
    ca00:	88c00015 	stw	r3,0(r17)
    ca04:	003ff706 	br	c9e4 <__alt_mem_Flash_flash_data+0xf400c9e4>

0000ca08 <strcmp>:
    ca08:	2144b03a 	or	r2,r4,r5
    ca0c:	108000cc 	andi	r2,r2,3
    ca10:	1000171e 	bne	r2,zero,ca70 <strcmp+0x68>
    ca14:	20800017 	ldw	r2,0(r4)
    ca18:	28c00017 	ldw	r3,0(r5)
    ca1c:	10c0141e 	bne	r2,r3,ca70 <strcmp+0x68>
    ca20:	027fbff4 	movhi	r9,65279
    ca24:	4a7fbfc4 	addi	r9,r9,-257
    ca28:	0086303a 	nor	r3,zero,r2
    ca2c:	02202074 	movhi	r8,32897
    ca30:	1245883a 	add	r2,r2,r9
    ca34:	42202004 	addi	r8,r8,-32640
    ca38:	10c4703a 	and	r2,r2,r3
    ca3c:	1204703a 	and	r2,r2,r8
    ca40:	10000226 	beq	r2,zero,ca4c <strcmp+0x44>
    ca44:	00001706 	br	caa4 <strcmp+0x9c>
    ca48:	1000161e 	bne	r2,zero,caa4 <strcmp+0x9c>
    ca4c:	21000104 	addi	r4,r4,4
    ca50:	20c00017 	ldw	r3,0(r4)
    ca54:	29400104 	addi	r5,r5,4
    ca58:	29800017 	ldw	r6,0(r5)
    ca5c:	1a4f883a 	add	r7,r3,r9
    ca60:	00c4303a 	nor	r2,zero,r3
    ca64:	3884703a 	and	r2,r7,r2
    ca68:	1204703a 	and	r2,r2,r8
    ca6c:	19bff626 	beq	r3,r6,ca48 <__alt_mem_Flash_flash_data+0xf400ca48>
    ca70:	20800007 	ldb	r2,0(r4)
    ca74:	1000051e 	bne	r2,zero,ca8c <strcmp+0x84>
    ca78:	00000606 	br	ca94 <strcmp+0x8c>
    ca7c:	21000044 	addi	r4,r4,1
    ca80:	20800007 	ldb	r2,0(r4)
    ca84:	29400044 	addi	r5,r5,1
    ca88:	10000226 	beq	r2,zero,ca94 <strcmp+0x8c>
    ca8c:	28c00007 	ldb	r3,0(r5)
    ca90:	10fffa26 	beq	r2,r3,ca7c <__alt_mem_Flash_flash_data+0xf400ca7c>
    ca94:	20800003 	ldbu	r2,0(r4)
    ca98:	28c00003 	ldbu	r3,0(r5)
    ca9c:	10c5c83a 	sub	r2,r2,r3
    caa0:	f800283a 	ret
    caa4:	0005883a 	mov	r2,zero
    caa8:	f800283a 	ret

0000caac <strlen>:
    caac:	208000cc 	andi	r2,r4,3
    cab0:	10002026 	beq	r2,zero,cb34 <strlen+0x88>
    cab4:	20800007 	ldb	r2,0(r4)
    cab8:	10002026 	beq	r2,zero,cb3c <strlen+0x90>
    cabc:	2005883a 	mov	r2,r4
    cac0:	00000206 	br	cacc <strlen+0x20>
    cac4:	10c00007 	ldb	r3,0(r2)
    cac8:	18001826 	beq	r3,zero,cb2c <strlen+0x80>
    cacc:	10800044 	addi	r2,r2,1
    cad0:	10c000cc 	andi	r3,r2,3
    cad4:	183ffb1e 	bne	r3,zero,cac4 <__alt_mem_Flash_flash_data+0xf400cac4>
    cad8:	10c00017 	ldw	r3,0(r2)
    cadc:	01ffbff4 	movhi	r7,65279
    cae0:	39ffbfc4 	addi	r7,r7,-257
    cae4:	00ca303a 	nor	r5,zero,r3
    cae8:	01a02074 	movhi	r6,32897
    caec:	19c7883a 	add	r3,r3,r7
    caf0:	31a02004 	addi	r6,r6,-32640
    caf4:	1946703a 	and	r3,r3,r5
    caf8:	1986703a 	and	r3,r3,r6
    cafc:	1800091e 	bne	r3,zero,cb24 <strlen+0x78>
    cb00:	10800104 	addi	r2,r2,4
    cb04:	10c00017 	ldw	r3,0(r2)
    cb08:	19cb883a 	add	r5,r3,r7
    cb0c:	00c6303a 	nor	r3,zero,r3
    cb10:	28c6703a 	and	r3,r5,r3
    cb14:	1986703a 	and	r3,r3,r6
    cb18:	183ff926 	beq	r3,zero,cb00 <__alt_mem_Flash_flash_data+0xf400cb00>
    cb1c:	00000106 	br	cb24 <strlen+0x78>
    cb20:	10800044 	addi	r2,r2,1
    cb24:	10c00007 	ldb	r3,0(r2)
    cb28:	183ffd1e 	bne	r3,zero,cb20 <__alt_mem_Flash_flash_data+0xf400cb20>
    cb2c:	1105c83a 	sub	r2,r2,r4
    cb30:	f800283a 	ret
    cb34:	2005883a 	mov	r2,r4
    cb38:	003fe706 	br	cad8 <__alt_mem_Flash_flash_data+0xf400cad8>
    cb3c:	0005883a 	mov	r2,zero
    cb40:	f800283a 	ret

0000cb44 <__ssprint_r>:
    cb44:	30800217 	ldw	r2,8(r6)
    cb48:	defff604 	addi	sp,sp,-40
    cb4c:	ddc00715 	stw	r23,28(sp)
    cb50:	dc800215 	stw	r18,8(sp)
    cb54:	dfc00915 	stw	ra,36(sp)
    cb58:	df000815 	stw	fp,32(sp)
    cb5c:	dd800615 	stw	r22,24(sp)
    cb60:	dd400515 	stw	r21,20(sp)
    cb64:	dd000415 	stw	r20,16(sp)
    cb68:	dcc00315 	stw	r19,12(sp)
    cb6c:	dc400115 	stw	r17,4(sp)
    cb70:	dc000015 	stw	r16,0(sp)
    cb74:	3025883a 	mov	r18,r6
    cb78:	35c00017 	ldw	r23,0(r6)
    cb7c:	10005626 	beq	r2,zero,ccd8 <__ssprint_r+0x194>
    cb80:	2027883a 	mov	r19,r4
    cb84:	28800217 	ldw	r2,8(r5)
    cb88:	29000017 	ldw	r4,0(r5)
    cb8c:	2823883a 	mov	r17,r5
    cb90:	0039883a 	mov	fp,zero
    cb94:	0021883a 	mov	r16,zero
    cb98:	80003926 	beq	r16,zero,cc80 <__ssprint_r+0x13c>
    cb9c:	102b883a 	mov	r21,r2
    cba0:	102d883a 	mov	r22,r2
    cba4:	80803a36 	bltu	r16,r2,cc90 <__ssprint_r+0x14c>
    cba8:	88c0030b 	ldhu	r3,12(r17)
    cbac:	1881200c 	andi	r2,r3,1152
    cbb0:	10002626 	beq	r2,zero,cc4c <__ssprint_r+0x108>
    cbb4:	88800517 	ldw	r2,20(r17)
    cbb8:	89400417 	ldw	r5,16(r17)
    cbbc:	81c00044 	addi	r7,r16,1
    cbc0:	108d883a 	add	r6,r2,r2
    cbc4:	3085883a 	add	r2,r6,r2
    cbc8:	100cd7fa 	srli	r6,r2,31
    cbcc:	216dc83a 	sub	r22,r4,r5
    cbd0:	3d89883a 	add	r4,r7,r22
    cbd4:	3085883a 	add	r2,r6,r2
    cbd8:	102bd07a 	srai	r21,r2,1
    cbdc:	a80d883a 	mov	r6,r21
    cbe0:	a900022e 	bgeu	r21,r4,cbec <__ssprint_r+0xa8>
    cbe4:	202b883a 	mov	r21,r4
    cbe8:	200d883a 	mov	r6,r4
    cbec:	18c1000c 	andi	r3,r3,1024
    cbf0:	9809883a 	mov	r4,r19
    cbf4:	18002926 	beq	r3,zero,cc9c <__ssprint_r+0x158>
    cbf8:	300b883a 	mov	r5,r6
    cbfc:	000b1100 	call	b110 <_malloc_r>
    cc00:	1029883a 	mov	r20,r2
    cc04:	10002b26 	beq	r2,zero,ccb4 <__ssprint_r+0x170>
    cc08:	89400417 	ldw	r5,16(r17)
    cc0c:	1009883a 	mov	r4,r2
    cc10:	b00d883a 	mov	r6,r22
    cc14:	000757c0 	call	757c <memcpy>
    cc18:	8880030b 	ldhu	r2,12(r17)
    cc1c:	00fedfc4 	movi	r3,-1153
    cc20:	10c4703a 	and	r2,r2,r3
    cc24:	10802014 	ori	r2,r2,128
    cc28:	8880030d 	sth	r2,12(r17)
    cc2c:	a589883a 	add	r4,r20,r22
    cc30:	adadc83a 	sub	r22,r21,r22
    cc34:	8d400515 	stw	r21,20(r17)
    cc38:	8d800215 	stw	r22,8(r17)
    cc3c:	8d000415 	stw	r20,16(r17)
    cc40:	89000015 	stw	r4,0(r17)
    cc44:	802b883a 	mov	r21,r16
    cc48:	802d883a 	mov	r22,r16
    cc4c:	e00b883a 	mov	r5,fp
    cc50:	b00d883a 	mov	r6,r22
    cc54:	000e2200 	call	e220 <memmove>
    cc58:	88800217 	ldw	r2,8(r17)
    cc5c:	89000017 	ldw	r4,0(r17)
    cc60:	90c00217 	ldw	r3,8(r18)
    cc64:	1545c83a 	sub	r2,r2,r21
    cc68:	2589883a 	add	r4,r4,r22
    cc6c:	88800215 	stw	r2,8(r17)
    cc70:	89000015 	stw	r4,0(r17)
    cc74:	1c21c83a 	sub	r16,r3,r16
    cc78:	94000215 	stw	r16,8(r18)
    cc7c:	80001626 	beq	r16,zero,ccd8 <__ssprint_r+0x194>
    cc80:	bf000017 	ldw	fp,0(r23)
    cc84:	bc000117 	ldw	r16,4(r23)
    cc88:	bdc00204 	addi	r23,r23,8
    cc8c:	003fc206 	br	cb98 <__alt_mem_Flash_flash_data+0xf400cb98>
    cc90:	802b883a 	mov	r21,r16
    cc94:	802d883a 	mov	r22,r16
    cc98:	003fec06 	br	cc4c <__alt_mem_Flash_flash_data+0xf400cc4c>
    cc9c:	000e4a00 	call	e4a0 <_realloc_r>
    cca0:	1029883a 	mov	r20,r2
    cca4:	103fe11e 	bne	r2,zero,cc2c <__alt_mem_Flash_flash_data+0xf400cc2c>
    cca8:	89400417 	ldw	r5,16(r17)
    ccac:	9809883a 	mov	r4,r19
    ccb0:	000df300 	call	df30 <_free_r>
    ccb4:	88c0030b 	ldhu	r3,12(r17)
    ccb8:	00800304 	movi	r2,12
    ccbc:	98800015 	stw	r2,0(r19)
    ccc0:	18c01014 	ori	r3,r3,64
    ccc4:	88c0030d 	sth	r3,12(r17)
    ccc8:	00bfffc4 	movi	r2,-1
    cccc:	90000215 	stw	zero,8(r18)
    ccd0:	90000115 	stw	zero,4(r18)
    ccd4:	00000206 	br	cce0 <__ssprint_r+0x19c>
    ccd8:	90000115 	stw	zero,4(r18)
    ccdc:	0005883a 	mov	r2,zero
    cce0:	dfc00917 	ldw	ra,36(sp)
    cce4:	df000817 	ldw	fp,32(sp)
    cce8:	ddc00717 	ldw	r23,28(sp)
    ccec:	dd800617 	ldw	r22,24(sp)
    ccf0:	dd400517 	ldw	r21,20(sp)
    ccf4:	dd000417 	ldw	r20,16(sp)
    ccf8:	dcc00317 	ldw	r19,12(sp)
    ccfc:	dc800217 	ldw	r18,8(sp)
    cd00:	dc400117 	ldw	r17,4(sp)
    cd04:	dc000017 	ldw	r16,0(sp)
    cd08:	dec00a04 	addi	sp,sp,40
    cd0c:	f800283a 	ret

0000cd10 <___svfiprintf_internal_r>:
    cd10:	2880030b 	ldhu	r2,12(r5)
    cd14:	deffc904 	addi	sp,sp,-220
    cd18:	dd403215 	stw	r21,200(sp)
    cd1c:	dfc03615 	stw	ra,216(sp)
    cd20:	df003515 	stw	fp,212(sp)
    cd24:	ddc03415 	stw	r23,208(sp)
    cd28:	dd803315 	stw	r22,204(sp)
    cd2c:	dd003115 	stw	r20,196(sp)
    cd30:	dcc03015 	stw	r19,192(sp)
    cd34:	dc802f15 	stw	r18,188(sp)
    cd38:	dc402e15 	stw	r17,184(sp)
    cd3c:	dc002d15 	stw	r16,180(sp)
    cd40:	d9402715 	stw	r5,156(sp)
    cd44:	d9002915 	stw	r4,164(sp)
    cd48:	1080200c 	andi	r2,r2,128
    cd4c:	d9c02315 	stw	r7,140(sp)
    cd50:	302b883a 	mov	r21,r6
    cd54:	10000226 	beq	r2,zero,cd60 <___svfiprintf_internal_r+0x50>
    cd58:	28800417 	ldw	r2,16(r5)
    cd5c:	1003ce26 	beq	r2,zero,dc98 <___svfiprintf_internal_r+0xf88>
    cd60:	dac01a04 	addi	r11,sp,104
    cd64:	da8019c4 	addi	r10,sp,103
    cd68:	dc802917 	ldw	r18,164(sp)
    cd6c:	dd002717 	ldw	r20,156(sp)
    cd70:	04c000b4 	movhi	r19,2
    cd74:	dac01e15 	stw	r11,120(sp)
    cd78:	5a97c83a 	sub	r11,r11,r10
    cd7c:	9cef4a04 	addi	r19,r19,-17112
    cd80:	da801f15 	stw	r10,124(sp)
    cd84:	dec01a15 	stw	sp,104(sp)
    cd88:	d8001c15 	stw	zero,112(sp)
    cd8c:	d8001b15 	stw	zero,108(sp)
    cd90:	d811883a 	mov	r8,sp
    cd94:	d8002a15 	stw	zero,168(sp)
    cd98:	d8002415 	stw	zero,144(sp)
    cd9c:	dac02b15 	stw	r11,172(sp)
    cda0:	a8800007 	ldb	r2,0(r21)
    cda4:	10026a26 	beq	r2,zero,d750 <___svfiprintf_internal_r+0xa40>
    cda8:	01000944 	movi	r4,37
    cdac:	11026826 	beq	r2,r4,d750 <___svfiprintf_internal_r+0xa40>
    cdb0:	a805883a 	mov	r2,r21
    cdb4:	00000106 	br	cdbc <___svfiprintf_internal_r+0xac>
    cdb8:	19000326 	beq	r3,r4,cdc8 <___svfiprintf_internal_r+0xb8>
    cdbc:	10800044 	addi	r2,r2,1
    cdc0:	10c00007 	ldb	r3,0(r2)
    cdc4:	183ffc1e 	bne	r3,zero,cdb8 <__alt_mem_Flash_flash_data+0xf400cdb8>
    cdc8:	1561c83a 	sub	r16,r2,r21
    cdcc:	102d883a 	mov	r22,r2
    cdd0:	80000e26 	beq	r16,zero,ce0c <___svfiprintf_internal_r+0xfc>
    cdd4:	d8c01c17 	ldw	r3,112(sp)
    cdd8:	d8801b17 	ldw	r2,108(sp)
    cddc:	45400015 	stw	r21,0(r8)
    cde0:	1c07883a 	add	r3,r3,r16
    cde4:	10800044 	addi	r2,r2,1
    cde8:	d8c01c15 	stw	r3,112(sp)
    cdec:	44000115 	stw	r16,4(r8)
    cdf0:	d8801b15 	stw	r2,108(sp)
    cdf4:	00c001c4 	movi	r3,7
    cdf8:	1882d816 	blt	r3,r2,d95c <___svfiprintf_internal_r+0xc4c>
    cdfc:	42000204 	addi	r8,r8,8
    ce00:	da802417 	ldw	r10,144(sp)
    ce04:	5415883a 	add	r10,r10,r16
    ce08:	da802415 	stw	r10,144(sp)
    ce0c:	b0800007 	ldb	r2,0(r22)
    ce10:	10027526 	beq	r2,zero,d7e8 <___svfiprintf_internal_r+0xad8>
    ce14:	b1000047 	ldb	r4,1(r22)
    ce18:	b5400044 	addi	r21,r22,1
    ce1c:	d8001d85 	stb	zero,118(sp)
    ce20:	000d883a 	mov	r6,zero
    ce24:	043fffc4 	movi	r16,-1
    ce28:	d8002115 	stw	zero,132(sp)
    ce2c:	0023883a 	mov	r17,zero
    ce30:	00c01604 	movi	r3,88
    ce34:	01400244 	movi	r5,9
    ce38:	02400a84 	movi	r9,42
    ce3c:	01c01b04 	movi	r7,108
    ce40:	ad400044 	addi	r21,r21,1
    ce44:	20bff804 	addi	r2,r4,-32
    ce48:	18819736 	bltu	r3,r2,d4a8 <___svfiprintf_internal_r+0x798>
    ce4c:	100490ba 	slli	r2,r2,2
    ce50:	02c00074 	movhi	r11,1
    ce54:	5af39904 	addi	r11,r11,-12700
    ce58:	12c5883a 	add	r2,r2,r11
    ce5c:	10800017 	ldw	r2,0(r2)
    ce60:	1000683a 	jmp	r2
    ce64:	0000d3a0 	cmpeqi	zero,zero,846
    ce68:	0000d4a8 	cmpgeui	zero,zero,850
    ce6c:	0000d4a8 	cmpgeui	zero,zero,850
    ce70:	0000d394 	movui	zero,846
    ce74:	0000d4a8 	cmpgeui	zero,zero,850
    ce78:	0000d4a8 	cmpgeui	zero,zero,850
    ce7c:	0000d4a8 	cmpgeui	zero,zero,850
    ce80:	0000d4a8 	cmpgeui	zero,zero,850
    ce84:	0000d4a8 	cmpgeui	zero,zero,850
    ce88:	0000d4a8 	cmpgeui	zero,zero,850
    ce8c:	0000d0c0 	call	d0c <drawNodesAndBeams+0x360>
    ce90:	0000d4dc 	xori	zero,zero,851
    ce94:	0000d4a8 	cmpgeui	zero,zero,850
    ce98:	0000d0e8 	cmpgeui	zero,zero,835
    ce9c:	0000d4e8 	cmpgeui	zero,zero,851
    cea0:	0000d4a8 	cmpgeui	zero,zero,850
    cea4:	0000d4d0 	cmplti	zero,zero,851
    cea8:	0000d470 	cmpltui	zero,zero,849
    ceac:	0000d470 	cmpltui	zero,zero,849
    ceb0:	0000d470 	cmpltui	zero,zero,849
    ceb4:	0000d470 	cmpltui	zero,zero,849
    ceb8:	0000d470 	cmpltui	zero,zero,849
    cebc:	0000d470 	cmpltui	zero,zero,849
    cec0:	0000d470 	cmpltui	zero,zero,849
    cec4:	0000d470 	cmpltui	zero,zero,849
    cec8:	0000d470 	cmpltui	zero,zero,849
    cecc:	0000d4a8 	cmpgeui	zero,zero,850
    ced0:	0000d4a8 	cmpgeui	zero,zero,850
    ced4:	0000d4a8 	cmpgeui	zero,zero,850
    ced8:	0000d4a8 	cmpgeui	zero,zero,850
    cedc:	0000d4a8 	cmpgeui	zero,zero,850
    cee0:	0000d4a8 	cmpgeui	zero,zero,850
    cee4:	0000d4a8 	cmpgeui	zero,zero,850
    cee8:	0000d4a8 	cmpgeui	zero,zero,850
    ceec:	0000d4a8 	cmpgeui	zero,zero,850
    cef0:	0000d4a8 	cmpgeui	zero,zero,850
    cef4:	0000d408 	cmpgei	zero,zero,848
    cef8:	0000d4a8 	cmpgeui	zero,zero,850
    cefc:	0000d4a8 	cmpgeui	zero,zero,850
    cf00:	0000d4a8 	cmpgeui	zero,zero,850
    cf04:	0000d4a8 	cmpgeui	zero,zero,850
    cf08:	0000d4a8 	cmpgeui	zero,zero,850
    cf0c:	0000d4a8 	cmpgeui	zero,zero,850
    cf10:	0000d4a8 	cmpgeui	zero,zero,850
    cf14:	0000d4a8 	cmpgeui	zero,zero,850
    cf18:	0000d4a8 	cmpgeui	zero,zero,850
    cf1c:	0000d4a8 	cmpgeui	zero,zero,850
    cf20:	0000d094 	movui	zero,834
    cf24:	0000d4a8 	cmpgeui	zero,zero,850
    cf28:	0000d4a8 	cmpgeui	zero,zero,850
    cf2c:	0000d4a8 	cmpgeui	zero,zero,850
    cf30:	0000d4a8 	cmpgeui	zero,zero,850
    cf34:	0000d4a8 	cmpgeui	zero,zero,850
    cf38:	0000cfc8 	cmpgei	zero,zero,831
    cf3c:	0000d4a8 	cmpgeui	zero,zero,850
    cf40:	0000d4a8 	cmpgeui	zero,zero,850
    cf44:	0000d2f4 	movhi	zero,843
    cf48:	0000d4a8 	cmpgeui	zero,zero,850
    cf4c:	0000d4a8 	cmpgeui	zero,zero,850
    cf50:	0000d4a8 	cmpgeui	zero,zero,850
    cf54:	0000d4a8 	cmpgeui	zero,zero,850
    cf58:	0000d4a8 	cmpgeui	zero,zero,850
    cf5c:	0000d4a8 	cmpgeui	zero,zero,850
    cf60:	0000d4a8 	cmpgeui	zero,zero,850
    cf64:	0000d4a8 	cmpgeui	zero,zero,850
    cf68:	0000d4a8 	cmpgeui	zero,zero,850
    cf6c:	0000d4a8 	cmpgeui	zero,zero,850
    cf70:	0000d1e0 	cmpeqi	zero,zero,839
    cf74:	0000d1a0 	cmpeqi	zero,zero,838
    cf78:	0000d4a8 	cmpgeui	zero,zero,850
    cf7c:	0000d4a8 	cmpgeui	zero,zero,850
    cf80:	0000d4a8 	cmpgeui	zero,zero,850
    cf84:	0000d350 	cmplti	zero,zero,845
    cf88:	0000d1a0 	cmpeqi	zero,zero,838
    cf8c:	0000d4a8 	cmpgeui	zero,zero,850
    cf90:	0000d4a8 	cmpgeui	zero,zero,850
    cf94:	0000d33c 	xorhi	zero,zero,844
    cf98:	0000d4a8 	cmpgeui	zero,zero,850
    cf9c:	0000d35c 	xori	zero,zero,845
    cfa0:	0000d098 	cmpnei	zero,zero,834
    cfa4:	0000d15c 	xori	zero,zero,837
    cfa8:	0000d150 	cmplti	zero,zero,837
    cfac:	0000d4a8 	cmpgeui	zero,zero,850
    cfb0:	0000d0f4 	movhi	zero,835
    cfb4:	0000d4a8 	cmpgeui	zero,zero,850
    cfb8:	0000cfcc 	andi	zero,zero,831
    cfbc:	0000d4a8 	cmpgeui	zero,zero,850
    cfc0:	0000d4a8 	cmpgeui	zero,zero,850
    cfc4:	0000d3bc 	xorhi	zero,zero,846
    cfc8:	8c400414 	ori	r17,r17,16
    cfcc:	8880080c 	andi	r2,r17,32
    cfd0:	10029626 	beq	r2,zero,da2c <___svfiprintf_internal_r+0xd1c>
    cfd4:	da802317 	ldw	r10,140(sp)
    cfd8:	dac02317 	ldw	r11,140(sp)
    cfdc:	00800044 	movi	r2,1
    cfe0:	52400017 	ldw	r9,0(r10)
    cfe4:	52800117 	ldw	r10,4(r10)
    cfe8:	5ac00204 	addi	r11,r11,8
    cfec:	dac02315 	stw	r11,140(sp)
    cff0:	4a86b03a 	or	r3,r9,r10
    cff4:	d8001d85 	stb	zero,118(sp)
    cff8:	8039883a 	mov	fp,r16
    cffc:	0017883a 	mov	r11,zero
    d000:	80000216 	blt	r16,zero,d00c <___svfiprintf_internal_r+0x2fc>
    d004:	013fdfc4 	movi	r4,-129
    d008:	8922703a 	and	r17,r17,r4
    d00c:	1801d21e 	bne	r3,zero,d758 <___svfiprintf_internal_r+0xa48>
    d010:	80024626 	beq	r16,zero,d92c <___svfiprintf_internal_r+0xc1c>
    d014:	10803fcc 	andi	r2,r2,255
    d018:	00c00044 	movi	r3,1
    d01c:	10c2b426 	beq	r2,r3,daf0 <___svfiprintf_internal_r+0xde0>
    d020:	00c00084 	movi	r3,2
    d024:	10c25d26 	beq	r2,r3,d99c <___svfiprintf_internal_r+0xc8c>
    d028:	d8c01a04 	addi	r3,sp,104
    d02c:	4808d0fa 	srli	r4,r9,3
    d030:	500a977a 	slli	r5,r10,29
    d034:	5014d0fa 	srli	r10,r10,3
    d038:	4a4001cc 	andi	r9,r9,7
    d03c:	48800c04 	addi	r2,r9,48
    d040:	18ffffc4 	addi	r3,r3,-1
    d044:	2912b03a 	or	r9,r5,r4
    d048:	18800005 	stb	r2,0(r3)
    d04c:	4a88b03a 	or	r4,r9,r10
    d050:	203ff61e 	bne	r4,zero,d02c <__alt_mem_Flash_flash_data+0xf400d02c>
    d054:	8900004c 	andi	r4,r17,1
    d058:	d8c02615 	stw	r3,152(sp)
    d05c:	2002961e 	bne	r4,zero,dab8 <___svfiprintf_internal_r+0xda8>
    d060:	da801e17 	ldw	r10,120(sp)
    d064:	50f9c83a 	sub	fp,r10,r3
    d068:	df002015 	stw	fp,128(sp)
    d06c:	e400010e 	bge	fp,r16,d074 <___svfiprintf_internal_r+0x364>
    d070:	dc002015 	stw	r16,128(sp)
    d074:	5ac03fcc 	andi	r11,r11,255
    d078:	5ac0201c 	xori	r11,r11,128
    d07c:	5affe004 	addi	r11,r11,-128
    d080:	58006326 	beq	r11,zero,d210 <___svfiprintf_internal_r+0x500>
    d084:	d8c02017 	ldw	r3,128(sp)
    d088:	18c00044 	addi	r3,r3,1
    d08c:	d8c02015 	stw	r3,128(sp)
    d090:	00005f06 	br	d210 <___svfiprintf_internal_r+0x500>
    d094:	8c400414 	ori	r17,r17,16
    d098:	8880080c 	andi	r2,r17,32
    d09c:	10027926 	beq	r2,zero,da84 <___svfiprintf_internal_r+0xd74>
    d0a0:	dac02317 	ldw	r11,140(sp)
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	5a400017 	ldw	r9,0(r11)
    d0ac:	5a800117 	ldw	r10,4(r11)
    d0b0:	5ac00204 	addi	r11,r11,8
    d0b4:	dac02315 	stw	r11,140(sp)
    d0b8:	4a86b03a 	or	r3,r9,r10
    d0bc:	003fcd06 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d0c0:	da802317 	ldw	r10,140(sp)
    d0c4:	dac02317 	ldw	r11,140(sp)
    d0c8:	52800017 	ldw	r10,0(r10)
    d0cc:	58800104 	addi	r2,r11,4
    d0d0:	da802115 	stw	r10,132(sp)
    d0d4:	50028c0e 	bge	r10,zero,db08 <___svfiprintf_internal_r+0xdf8>
    d0d8:	da802117 	ldw	r10,132(sp)
    d0dc:	d8802315 	stw	r2,140(sp)
    d0e0:	0295c83a 	sub	r10,zero,r10
    d0e4:	da802115 	stw	r10,132(sp)
    d0e8:	8c400114 	ori	r17,r17,4
    d0ec:	a9000007 	ldb	r4,0(r21)
    d0f0:	003f5306 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d0f4:	da802317 	ldw	r10,140(sp)
    d0f8:	dac02317 	ldw	r11,140(sp)
    d0fc:	d8001d85 	stb	zero,118(sp)
    d100:	52800017 	ldw	r10,0(r10)
    d104:	5dc00104 	addi	r23,r11,4
    d108:	da802615 	stw	r10,152(sp)
    d10c:	5002d626 	beq	r10,zero,dc68 <___svfiprintf_internal_r+0xf58>
    d110:	d9002617 	ldw	r4,152(sp)
    d114:	8002cc16 	blt	r16,zero,dc48 <___svfiprintf_internal_r+0xf38>
    d118:	000b883a 	mov	r5,zero
    d11c:	800d883a 	mov	r6,r16
    d120:	da002c15 	stw	r8,176(sp)
    d124:	000b8b80 	call	b8b8 <memchr>
    d128:	da002c17 	ldw	r8,176(sp)
    d12c:	1002f026 	beq	r2,zero,dcf0 <___svfiprintf_internal_r+0xfe0>
    d130:	d8c02617 	ldw	r3,152(sp)
    d134:	10f9c83a 	sub	fp,r2,r3
    d138:	8700010e 	bge	r16,fp,d140 <___svfiprintf_internal_r+0x430>
    d13c:	8039883a 	mov	fp,r16
    d140:	dac01d83 	ldbu	r11,118(sp)
    d144:	ddc02315 	stw	r23,140(sp)
    d148:	0021883a 	mov	r16,zero
    d14c:	003fc606 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    d150:	8c400814 	ori	r17,r17,32
    d154:	a9000007 	ldb	r4,0(r21)
    d158:	003f3906 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d15c:	da802317 	ldw	r10,140(sp)
    d160:	00800c04 	movi	r2,48
    d164:	dac02317 	ldw	r11,140(sp)
    d168:	52400017 	ldw	r9,0(r10)
    d16c:	d8801d05 	stb	r2,116(sp)
    d170:	00801e04 	movi	r2,120
    d174:	d8801d45 	stb	r2,117(sp)
    d178:	008000b4 	movhi	r2,2
    d17c:	10aee904 	addi	r2,r2,-17500
    d180:	5ac00104 	addi	r11,r11,4
    d184:	d8802a15 	stw	r2,168(sp)
    d188:	0015883a 	mov	r10,zero
    d18c:	8c400094 	ori	r17,r17,2
    d190:	dac02315 	stw	r11,140(sp)
    d194:	00800084 	movi	r2,2
    d198:	4807883a 	mov	r3,r9
    d19c:	003f9506 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d1a0:	d9801d85 	stb	r6,118(sp)
    d1a4:	8880080c 	andi	r2,r17,32
    d1a8:	d8c02317 	ldw	r3,140(sp)
    d1ac:	10009b26 	beq	r2,zero,d41c <___svfiprintf_internal_r+0x70c>
    d1b0:	dac02317 	ldw	r11,140(sp)
    d1b4:	18800117 	ldw	r2,4(r3)
    d1b8:	1a400017 	ldw	r9,0(r3)
    d1bc:	5ac00204 	addi	r11,r11,8
    d1c0:	dac02315 	stw	r11,140(sp)
    d1c4:	1015883a 	mov	r10,r2
    d1c8:	10009f16 	blt	r2,zero,d448 <___svfiprintf_internal_r+0x738>
    d1cc:	dac01d83 	ldbu	r11,118(sp)
    d1d0:	8039883a 	mov	fp,r16
    d1d4:	00800044 	movi	r2,1
    d1d8:	4a86b03a 	or	r3,r9,r10
    d1dc:	003f8806 	br	d000 <__alt_mem_Flash_flash_data+0xf400d000>
    d1e0:	dac02317 	ldw	r11,140(sp)
    d1e4:	00c00044 	movi	r3,1
    d1e8:	da801004 	addi	r10,sp,64
    d1ec:	58800017 	ldw	r2,0(r11)
    d1f0:	5ac00104 	addi	r11,r11,4
    d1f4:	d8c02015 	stw	r3,128(sp)
    d1f8:	d8001d85 	stb	zero,118(sp)
    d1fc:	d8801005 	stb	r2,64(sp)
    d200:	dac02315 	stw	r11,140(sp)
    d204:	1839883a 	mov	fp,r3
    d208:	da802615 	stw	r10,152(sp)
    d20c:	0021883a 	mov	r16,zero
    d210:	8a80008c 	andi	r10,r17,2
    d214:	da802215 	stw	r10,136(sp)
    d218:	50000326 	beq	r10,zero,d228 <___svfiprintf_internal_r+0x518>
    d21c:	dac02017 	ldw	r11,128(sp)
    d220:	5ac00084 	addi	r11,r11,2
    d224:	dac02015 	stw	r11,128(sp)
    d228:	88c0210c 	andi	r3,r17,132
    d22c:	d8c02515 	stw	r3,148(sp)
    d230:	1800bd1e 	bne	r3,zero,d528 <___svfiprintf_internal_r+0x818>
    d234:	da802117 	ldw	r10,132(sp)
    d238:	dac02017 	ldw	r11,128(sp)
    d23c:	52edc83a 	sub	r22,r10,r11
    d240:	0580b90e 	bge	zero,r22,d528 <___svfiprintf_internal_r+0x818>
    d244:	02400404 	movi	r9,16
    d248:	d8c01c17 	ldw	r3,112(sp)
    d24c:	d8801b17 	ldw	r2,108(sp)
    d250:	4d829b0e 	bge	r9,r22,dcc0 <___svfiprintf_internal_r+0xfb0>
    d254:	014000b4 	movhi	r5,2
    d258:	296f4e04 	addi	r5,r5,-17096
    d25c:	d9402815 	stw	r5,160(sp)
    d260:	05c001c4 	movi	r23,7
    d264:	00000306 	br	d274 <___svfiprintf_internal_r+0x564>
    d268:	b5bffc04 	addi	r22,r22,-16
    d26c:	42000204 	addi	r8,r8,8
    d270:	4d80150e 	bge	r9,r22,d2c8 <___svfiprintf_internal_r+0x5b8>
    d274:	028000b4 	movhi	r10,2
    d278:	18c00404 	addi	r3,r3,16
    d27c:	10800044 	addi	r2,r2,1
    d280:	52af4e04 	addi	r10,r10,-17096
    d284:	42800015 	stw	r10,0(r8)
    d288:	42400115 	stw	r9,4(r8)
    d28c:	d8c01c15 	stw	r3,112(sp)
    d290:	d8801b15 	stw	r2,108(sp)
    d294:	b8bff40e 	bge	r23,r2,d268 <__alt_mem_Flash_flash_data+0xf400d268>
    d298:	9009883a 	mov	r4,r18
    d29c:	a00b883a 	mov	r5,r20
    d2a0:	d9801a04 	addi	r6,sp,104
    d2a4:	da402c15 	stw	r9,176(sp)
    d2a8:	000cb440 	call	cb44 <__ssprint_r>
    d2ac:	da402c17 	ldw	r9,176(sp)
    d2b0:	1001531e 	bne	r2,zero,d800 <___svfiprintf_internal_r+0xaf0>
    d2b4:	b5bffc04 	addi	r22,r22,-16
    d2b8:	d8c01c17 	ldw	r3,112(sp)
    d2bc:	d8801b17 	ldw	r2,108(sp)
    d2c0:	d811883a 	mov	r8,sp
    d2c4:	4dbfeb16 	blt	r9,r22,d274 <__alt_mem_Flash_flash_data+0xf400d274>
    d2c8:	dac02817 	ldw	r11,160(sp)
    d2cc:	b0c7883a 	add	r3,r22,r3
    d2d0:	10800044 	addi	r2,r2,1
    d2d4:	42c00015 	stw	r11,0(r8)
    d2d8:	45800115 	stw	r22,4(r8)
    d2dc:	d8c01c15 	stw	r3,112(sp)
    d2e0:	d8801b15 	stw	r2,108(sp)
    d2e4:	010001c4 	movi	r4,7
    d2e8:	2081dd16 	blt	r4,r2,da60 <___svfiprintf_internal_r+0xd50>
    d2ec:	42000204 	addi	r8,r8,8
    d2f0:	00008f06 	br	d530 <___svfiprintf_internal_r+0x820>
    d2f4:	008000b4 	movhi	r2,2
    d2f8:	10aee404 	addi	r2,r2,-17520
    d2fc:	d8802a15 	stw	r2,168(sp)
    d300:	d9801d85 	stb	r6,118(sp)
    d304:	8880080c 	andi	r2,r17,32
    d308:	10003226 	beq	r2,zero,d3d4 <___svfiprintf_internal_r+0x6c4>
    d30c:	da802317 	ldw	r10,140(sp)
    d310:	dac02317 	ldw	r11,140(sp)
    d314:	52400017 	ldw	r9,0(r10)
    d318:	52800117 	ldw	r10,4(r10)
    d31c:	5ac00204 	addi	r11,r11,8
    d320:	dac02315 	stw	r11,140(sp)
    d324:	8880004c 	andi	r2,r17,1
    d328:	10003426 	beq	r2,zero,d3fc <___svfiprintf_internal_r+0x6ec>
    d32c:	4a86b03a 	or	r3,r9,r10
    d330:	1802231e 	bne	r3,zero,dbc0 <___svfiprintf_internal_r+0xeb0>
    d334:	00800084 	movi	r2,2
    d338:	003f2e06 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d33c:	a9000007 	ldb	r4,0(r21)
    d340:	a805883a 	mov	r2,r21
    d344:	21c22426 	beq	r4,r7,dbd8 <___svfiprintf_internal_r+0xec8>
    d348:	8c400414 	ori	r17,r17,16
    d34c:	003ebc06 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d350:	8c401014 	ori	r17,r17,64
    d354:	a9000007 	ldb	r4,0(r21)
    d358:	003eb906 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d35c:	d9801d85 	stb	r6,118(sp)
    d360:	8880080c 	andi	r2,r17,32
    d364:	10020d1e 	bne	r2,zero,db9c <___svfiprintf_internal_r+0xe8c>
    d368:	8880040c 	andi	r2,r17,16
    d36c:	10021e1e 	bne	r2,zero,dbe8 <___svfiprintf_internal_r+0xed8>
    d370:	8c40100c 	andi	r17,r17,64
    d374:	88021c26 	beq	r17,zero,dbe8 <___svfiprintf_internal_r+0xed8>
    d378:	dac02317 	ldw	r11,140(sp)
    d37c:	da802417 	ldw	r10,144(sp)
    d380:	58800017 	ldw	r2,0(r11)
    d384:	5ac00104 	addi	r11,r11,4
    d388:	dac02315 	stw	r11,140(sp)
    d38c:	1280000d 	sth	r10,0(r2)
    d390:	003e8306 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    d394:	8c400054 	ori	r17,r17,1
    d398:	a9000007 	ldb	r4,0(r21)
    d39c:	003ea806 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d3a0:	30803fcc 	andi	r2,r6,255
    d3a4:	1080201c 	xori	r2,r2,128
    d3a8:	10bfe004 	addi	r2,r2,-128
    d3ac:	1001f91e 	bne	r2,zero,db94 <___svfiprintf_internal_r+0xe84>
    d3b0:	01800804 	movi	r6,32
    d3b4:	a9000007 	ldb	r4,0(r21)
    d3b8:	003ea106 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d3bc:	008000b4 	movhi	r2,2
    d3c0:	10aee904 	addi	r2,r2,-17500
    d3c4:	d8802a15 	stw	r2,168(sp)
    d3c8:	d9801d85 	stb	r6,118(sp)
    d3cc:	8880080c 	andi	r2,r17,32
    d3d0:	103fce1e 	bne	r2,zero,d30c <__alt_mem_Flash_flash_data+0xf400d30c>
    d3d4:	8880040c 	andi	r2,r17,16
    d3d8:	1001e526 	beq	r2,zero,db70 <___svfiprintf_internal_r+0xe60>
    d3dc:	da802317 	ldw	r10,140(sp)
    d3e0:	dac02317 	ldw	r11,140(sp)
    d3e4:	52400017 	ldw	r9,0(r10)
    d3e8:	8880004c 	andi	r2,r17,1
    d3ec:	5ac00104 	addi	r11,r11,4
    d3f0:	dac02315 	stw	r11,140(sp)
    d3f4:	0015883a 	mov	r10,zero
    d3f8:	103fcc1e 	bne	r2,zero,d32c <__alt_mem_Flash_flash_data+0xf400d32c>
    d3fc:	00800084 	movi	r2,2
    d400:	4a86b03a 	or	r3,r9,r10
    d404:	003efb06 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d408:	8c400414 	ori	r17,r17,16
    d40c:	d9801d85 	stb	r6,118(sp)
    d410:	8880080c 	andi	r2,r17,32
    d414:	d8c02317 	ldw	r3,140(sp)
    d418:	103f651e 	bne	r2,zero,d1b0 <__alt_mem_Flash_flash_data+0xf400d1b0>
    d41c:	8880040c 	andi	r2,r17,16
    d420:	1001c61e 	bne	r2,zero,db3c <___svfiprintf_internal_r+0xe2c>
    d424:	8880100c 	andi	r2,r17,64
    d428:	1001c426 	beq	r2,zero,db3c <___svfiprintf_internal_r+0xe2c>
    d42c:	1a40000f 	ldh	r9,0(r3)
    d430:	dac02317 	ldw	r11,140(sp)
    d434:	4815d7fa 	srai	r10,r9,31
    d438:	5ac00104 	addi	r11,r11,4
    d43c:	dac02315 	stw	r11,140(sp)
    d440:	5005883a 	mov	r2,r10
    d444:	103f610e 	bge	r2,zero,d1cc <__alt_mem_Flash_flash_data+0xf400d1cc>
    d448:	0253c83a 	sub	r9,zero,r9
    d44c:	4804c03a 	cmpne	r2,r9,zero
    d450:	0295c83a 	sub	r10,zero,r10
    d454:	5095c83a 	sub	r10,r10,r2
    d458:	02c00b44 	movi	r11,45
    d45c:	dac01d85 	stb	r11,118(sp)
    d460:	8039883a 	mov	fp,r16
    d464:	00800044 	movi	r2,1
    d468:	4a86b03a 	or	r3,r9,r10
    d46c:	003ee406 	br	d000 <__alt_mem_Flash_flash_data+0xf400d000>
    d470:	a815883a 	mov	r10,r21
    d474:	d8002115 	stw	zero,132(sp)
    d478:	20bff404 	addi	r2,r4,-48
    d47c:	51000007 	ldb	r4,0(r10)
    d480:	da802117 	ldw	r10,132(sp)
    d484:	ad400044 	addi	r21,r21,1
    d488:	52c002a4 	muli	r11,r10,10
    d48c:	a815883a 	mov	r10,r21
    d490:	5885883a 	add	r2,r11,r2
    d494:	d8802115 	stw	r2,132(sp)
    d498:	20bff404 	addi	r2,r4,-48
    d49c:	28bff72e 	bgeu	r5,r2,d47c <__alt_mem_Flash_flash_data+0xf400d47c>
    d4a0:	20bff804 	addi	r2,r4,-32
    d4a4:	18be692e 	bgeu	r3,r2,ce4c <__alt_mem_Flash_flash_data+0xf400ce4c>
    d4a8:	d9801d85 	stb	r6,118(sp)
    d4ac:	2000ce26 	beq	r4,zero,d7e8 <___svfiprintf_internal_r+0xad8>
    d4b0:	02800044 	movi	r10,1
    d4b4:	dac01004 	addi	r11,sp,64
    d4b8:	da802015 	stw	r10,128(sp)
    d4bc:	d9001005 	stb	r4,64(sp)
    d4c0:	d8001d85 	stb	zero,118(sp)
    d4c4:	5039883a 	mov	fp,r10
    d4c8:	dac02615 	stw	r11,152(sp)
    d4cc:	003f4f06 	br	d20c <__alt_mem_Flash_flash_data+0xf400d20c>
    d4d0:	8c402014 	ori	r17,r17,128
    d4d4:	a9000007 	ldb	r4,0(r21)
    d4d8:	003e5906 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d4dc:	01800ac4 	movi	r6,43
    d4e0:	a9000007 	ldb	r4,0(r21)
    d4e4:	003e5606 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d4e8:	a9000007 	ldb	r4,0(r21)
    d4ec:	aa800044 	addi	r10,r21,1
    d4f0:	22420626 	beq	r4,r9,dd0c <___svfiprintf_internal_r+0xffc>
    d4f4:	20bff404 	addi	r2,r4,-48
    d4f8:	502b883a 	mov	r21,r10
    d4fc:	0021883a 	mov	r16,zero
    d500:	28be5036 	bltu	r5,r2,ce44 <__alt_mem_Flash_flash_data+0xf400ce44>
    d504:	a9000007 	ldb	r4,0(r21)
    d508:	840002a4 	muli	r16,r16,10
    d50c:	ad400044 	addi	r21,r21,1
    d510:	1421883a 	add	r16,r2,r16
    d514:	20bff404 	addi	r2,r4,-48
    d518:	28bffa2e 	bgeu	r5,r2,d504 <__alt_mem_Flash_flash_data+0xf400d504>
    d51c:	803e490e 	bge	r16,zero,ce44 <__alt_mem_Flash_flash_data+0xf400ce44>
    d520:	043fffc4 	movi	r16,-1
    d524:	003e4706 	br	ce44 <__alt_mem_Flash_flash_data+0xf400ce44>
    d528:	d8c01c17 	ldw	r3,112(sp)
    d52c:	d8801b17 	ldw	r2,108(sp)
    d530:	d9001d87 	ldb	r4,118(sp)
    d534:	20000b26 	beq	r4,zero,d564 <___svfiprintf_internal_r+0x854>
    d538:	d9001d84 	addi	r4,sp,118
    d53c:	18c00044 	addi	r3,r3,1
    d540:	10800044 	addi	r2,r2,1
    d544:	41000015 	stw	r4,0(r8)
    d548:	01000044 	movi	r4,1
    d54c:	41000115 	stw	r4,4(r8)
    d550:	d8c01c15 	stw	r3,112(sp)
    d554:	d8801b15 	stw	r2,108(sp)
    d558:	010001c4 	movi	r4,7
    d55c:	20811e16 	blt	r4,r2,d9d8 <___svfiprintf_internal_r+0xcc8>
    d560:	42000204 	addi	r8,r8,8
    d564:	da802217 	ldw	r10,136(sp)
    d568:	50000b26 	beq	r10,zero,d598 <___svfiprintf_internal_r+0x888>
    d56c:	d9001d04 	addi	r4,sp,116
    d570:	18c00084 	addi	r3,r3,2
    d574:	10800044 	addi	r2,r2,1
    d578:	41000015 	stw	r4,0(r8)
    d57c:	01000084 	movi	r4,2
    d580:	41000115 	stw	r4,4(r8)
    d584:	d8c01c15 	stw	r3,112(sp)
    d588:	d8801b15 	stw	r2,108(sp)
    d58c:	010001c4 	movi	r4,7
    d590:	20811a16 	blt	r4,r2,d9fc <___svfiprintf_internal_r+0xcec>
    d594:	42000204 	addi	r8,r8,8
    d598:	dac02517 	ldw	r11,148(sp)
    d59c:	01002004 	movi	r4,128
    d5a0:	5900a826 	beq	r11,r4,d844 <___svfiprintf_internal_r+0xb34>
    d5a4:	8721c83a 	sub	r16,r16,fp
    d5a8:	0400260e 	bge	zero,r16,d644 <___svfiprintf_internal_r+0x934>
    d5ac:	01c00404 	movi	r7,16
    d5b0:	3c019d0e 	bge	r7,r16,dc28 <___svfiprintf_internal_r+0xf18>
    d5b4:	010000b4 	movhi	r4,2
    d5b8:	212f4a04 	addi	r4,r4,-17112
    d5bc:	d9002215 	stw	r4,136(sp)
    d5c0:	382f883a 	mov	r23,r7
    d5c4:	058001c4 	movi	r22,7
    d5c8:	00000306 	br	d5d8 <___svfiprintf_internal_r+0x8c8>
    d5cc:	843ffc04 	addi	r16,r16,-16
    d5d0:	42000204 	addi	r8,r8,8
    d5d4:	bc00110e 	bge	r23,r16,d61c <___svfiprintf_internal_r+0x90c>
    d5d8:	18c00404 	addi	r3,r3,16
    d5dc:	10800044 	addi	r2,r2,1
    d5e0:	44c00015 	stw	r19,0(r8)
    d5e4:	45c00115 	stw	r23,4(r8)
    d5e8:	d8c01c15 	stw	r3,112(sp)
    d5ec:	d8801b15 	stw	r2,108(sp)
    d5f0:	b0bff60e 	bge	r22,r2,d5cc <__alt_mem_Flash_flash_data+0xf400d5cc>
    d5f4:	9009883a 	mov	r4,r18
    d5f8:	a00b883a 	mov	r5,r20
    d5fc:	d9801a04 	addi	r6,sp,104
    d600:	000cb440 	call	cb44 <__ssprint_r>
    d604:	10007e1e 	bne	r2,zero,d800 <___svfiprintf_internal_r+0xaf0>
    d608:	843ffc04 	addi	r16,r16,-16
    d60c:	d8c01c17 	ldw	r3,112(sp)
    d610:	d8801b17 	ldw	r2,108(sp)
    d614:	d811883a 	mov	r8,sp
    d618:	bc3fef16 	blt	r23,r16,d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    d61c:	da802217 	ldw	r10,136(sp)
    d620:	1c07883a 	add	r3,r3,r16
    d624:	10800044 	addi	r2,r2,1
    d628:	42800015 	stw	r10,0(r8)
    d62c:	44000115 	stw	r16,4(r8)
    d630:	d8c01c15 	stw	r3,112(sp)
    d634:	d8801b15 	stw	r2,108(sp)
    d638:	010001c4 	movi	r4,7
    d63c:	2080ce16 	blt	r4,r2,d978 <___svfiprintf_internal_r+0xc68>
    d640:	42000204 	addi	r8,r8,8
    d644:	dac02617 	ldw	r11,152(sp)
    d648:	1f07883a 	add	r3,r3,fp
    d64c:	10800044 	addi	r2,r2,1
    d650:	42c00015 	stw	r11,0(r8)
    d654:	47000115 	stw	fp,4(r8)
    d658:	d8c01c15 	stw	r3,112(sp)
    d65c:	d8801b15 	stw	r2,108(sp)
    d660:	010001c4 	movi	r4,7
    d664:	2080a316 	blt	r4,r2,d8f4 <___svfiprintf_internal_r+0xbe4>
    d668:	42000204 	addi	r8,r8,8
    d66c:	8c40010c 	andi	r17,r17,4
    d670:	88002b26 	beq	r17,zero,d720 <___svfiprintf_internal_r+0xa10>
    d674:	da802117 	ldw	r10,132(sp)
    d678:	dac02017 	ldw	r11,128(sp)
    d67c:	52e1c83a 	sub	r16,r10,r11
    d680:	0400270e 	bge	zero,r16,d720 <___svfiprintf_internal_r+0xa10>
    d684:	04400404 	movi	r17,16
    d688:	d8801b17 	ldw	r2,108(sp)
    d68c:	8c01900e 	bge	r17,r16,dcd0 <___svfiprintf_internal_r+0xfc0>
    d690:	014000b4 	movhi	r5,2
    d694:	296f4e04 	addi	r5,r5,-17096
    d698:	d9402815 	stw	r5,160(sp)
    d69c:	070001c4 	movi	fp,7
    d6a0:	00000306 	br	d6b0 <___svfiprintf_internal_r+0x9a0>
    d6a4:	843ffc04 	addi	r16,r16,-16
    d6a8:	42000204 	addi	r8,r8,8
    d6ac:	8c00130e 	bge	r17,r16,d6fc <___svfiprintf_internal_r+0x9ec>
    d6b0:	028000b4 	movhi	r10,2
    d6b4:	18c00404 	addi	r3,r3,16
    d6b8:	10800044 	addi	r2,r2,1
    d6bc:	52af4e04 	addi	r10,r10,-17096
    d6c0:	42800015 	stw	r10,0(r8)
    d6c4:	44400115 	stw	r17,4(r8)
    d6c8:	d8c01c15 	stw	r3,112(sp)
    d6cc:	d8801b15 	stw	r2,108(sp)
    d6d0:	e0bff40e 	bge	fp,r2,d6a4 <__alt_mem_Flash_flash_data+0xf400d6a4>
    d6d4:	9009883a 	mov	r4,r18
    d6d8:	a00b883a 	mov	r5,r20
    d6dc:	d9801a04 	addi	r6,sp,104
    d6e0:	000cb440 	call	cb44 <__ssprint_r>
    d6e4:	1000461e 	bne	r2,zero,d800 <___svfiprintf_internal_r+0xaf0>
    d6e8:	843ffc04 	addi	r16,r16,-16
    d6ec:	d8c01c17 	ldw	r3,112(sp)
    d6f0:	d8801b17 	ldw	r2,108(sp)
    d6f4:	d811883a 	mov	r8,sp
    d6f8:	8c3fed16 	blt	r17,r16,d6b0 <__alt_mem_Flash_flash_data+0xf400d6b0>
    d6fc:	dac02817 	ldw	r11,160(sp)
    d700:	1c07883a 	add	r3,r3,r16
    d704:	10800044 	addi	r2,r2,1
    d708:	42c00015 	stw	r11,0(r8)
    d70c:	44000115 	stw	r16,4(r8)
    d710:	d8c01c15 	stw	r3,112(sp)
    d714:	d8801b15 	stw	r2,108(sp)
    d718:	010001c4 	movi	r4,7
    d71c:	2080fd16 	blt	r4,r2,db14 <___svfiprintf_internal_r+0xe04>
    d720:	dd802017 	ldw	r22,128(sp)
    d724:	da802117 	ldw	r10,132(sp)
    d728:	b280010e 	bge	r22,r10,d730 <___svfiprintf_internal_r+0xa20>
    d72c:	502d883a 	mov	r22,r10
    d730:	dac02417 	ldw	r11,144(sp)
    d734:	5d97883a 	add	r11,r11,r22
    d738:	dac02415 	stw	r11,144(sp)
    d73c:	1800751e 	bne	r3,zero,d914 <___svfiprintf_internal_r+0xc04>
    d740:	a8800007 	ldb	r2,0(r21)
    d744:	d8001b15 	stw	zero,108(sp)
    d748:	d811883a 	mov	r8,sp
    d74c:	103d961e 	bne	r2,zero,cda8 <__alt_mem_Flash_flash_data+0xf400cda8>
    d750:	a82d883a 	mov	r22,r21
    d754:	003dad06 	br	ce0c <__alt_mem_Flash_flash_data+0xf400ce0c>
    d758:	10803fcc 	andi	r2,r2,255
    d75c:	00c00044 	movi	r3,1
    d760:	10fe2f1e 	bne	r2,r3,d020 <__alt_mem_Flash_flash_data+0xf400d020>
    d764:	5000e026 	beq	r10,zero,dae8 <___svfiprintf_internal_r+0xdd8>
    d768:	dc002015 	stw	r16,128(sp)
    d76c:	dc402215 	stw	r17,136(sp)
    d770:	dd801a04 	addi	r22,sp,104
    d774:	402f883a 	mov	r23,r8
    d778:	5839883a 	mov	fp,r11
    d77c:	4821883a 	mov	r16,r9
    d780:	5023883a 	mov	r17,r10
    d784:	8009883a 	mov	r4,r16
    d788:	880b883a 	mov	r5,r17
    d78c:	01800284 	movi	r6,10
    d790:	000f883a 	mov	r7,zero
    d794:	000efc80 	call	efc8 <__umoddi3>
    d798:	10800c04 	addi	r2,r2,48
    d79c:	b5bfffc4 	addi	r22,r22,-1
    d7a0:	8009883a 	mov	r4,r16
    d7a4:	880b883a 	mov	r5,r17
    d7a8:	01800284 	movi	r6,10
    d7ac:	000f883a 	mov	r7,zero
    d7b0:	b0800005 	stb	r2,0(r22)
    d7b4:	000ea080 	call	ea08 <__udivdi3>
    d7b8:	1021883a 	mov	r16,r2
    d7bc:	10c4b03a 	or	r2,r2,r3
    d7c0:	1823883a 	mov	r17,r3
    d7c4:	103fef1e 	bne	r2,zero,d784 <__alt_mem_Flash_flash_data+0xf400d784>
    d7c8:	da801e17 	ldw	r10,120(sp)
    d7cc:	e017883a 	mov	r11,fp
    d7d0:	dc002017 	ldw	r16,128(sp)
    d7d4:	dc402217 	ldw	r17,136(sp)
    d7d8:	b811883a 	mov	r8,r23
    d7dc:	dd802615 	stw	r22,152(sp)
    d7e0:	55b9c83a 	sub	fp,r10,r22
    d7e4:	003e2006 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    d7e8:	d8801c17 	ldw	r2,112(sp)
    d7ec:	10000426 	beq	r2,zero,d800 <___svfiprintf_internal_r+0xaf0>
    d7f0:	d9002917 	ldw	r4,164(sp)
    d7f4:	d9402717 	ldw	r5,156(sp)
    d7f8:	d9801a04 	addi	r6,sp,104
    d7fc:	000cb440 	call	cb44 <__ssprint_r>
    d800:	da802717 	ldw	r10,156(sp)
    d804:	5080030b 	ldhu	r2,12(r10)
    d808:	1080100c 	andi	r2,r2,64
    d80c:	1000511e 	bne	r2,zero,d954 <___svfiprintf_internal_r+0xc44>
    d810:	d8802417 	ldw	r2,144(sp)
    d814:	dfc03617 	ldw	ra,216(sp)
    d818:	df003517 	ldw	fp,212(sp)
    d81c:	ddc03417 	ldw	r23,208(sp)
    d820:	dd803317 	ldw	r22,204(sp)
    d824:	dd403217 	ldw	r21,200(sp)
    d828:	dd003117 	ldw	r20,196(sp)
    d82c:	dcc03017 	ldw	r19,192(sp)
    d830:	dc802f17 	ldw	r18,188(sp)
    d834:	dc402e17 	ldw	r17,184(sp)
    d838:	dc002d17 	ldw	r16,180(sp)
    d83c:	dec03704 	addi	sp,sp,220
    d840:	f800283a 	ret
    d844:	da802117 	ldw	r10,132(sp)
    d848:	dac02017 	ldw	r11,128(sp)
    d84c:	52edc83a 	sub	r22,r10,r11
    d850:	05bf540e 	bge	zero,r22,d5a4 <__alt_mem_Flash_flash_data+0xf400d5a4>
    d854:	02400404 	movi	r9,16
    d858:	4d81210e 	bge	r9,r22,dce0 <___svfiprintf_internal_r+0xfd0>
    d85c:	014000b4 	movhi	r5,2
    d860:	296f4a04 	addi	r5,r5,-17112
    d864:	d9402215 	stw	r5,136(sp)
    d868:	05c001c4 	movi	r23,7
    d86c:	00000306 	br	d87c <___svfiprintf_internal_r+0xb6c>
    d870:	b5bffc04 	addi	r22,r22,-16
    d874:	42000204 	addi	r8,r8,8
    d878:	4d80130e 	bge	r9,r22,d8c8 <___svfiprintf_internal_r+0xbb8>
    d87c:	18c00404 	addi	r3,r3,16
    d880:	10800044 	addi	r2,r2,1
    d884:	44c00015 	stw	r19,0(r8)
    d888:	42400115 	stw	r9,4(r8)
    d88c:	d8c01c15 	stw	r3,112(sp)
    d890:	d8801b15 	stw	r2,108(sp)
    d894:	b8bff60e 	bge	r23,r2,d870 <__alt_mem_Flash_flash_data+0xf400d870>
    d898:	9009883a 	mov	r4,r18
    d89c:	a00b883a 	mov	r5,r20
    d8a0:	d9801a04 	addi	r6,sp,104
    d8a4:	da402c15 	stw	r9,176(sp)
    d8a8:	000cb440 	call	cb44 <__ssprint_r>
    d8ac:	da402c17 	ldw	r9,176(sp)
    d8b0:	103fd31e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d8b4:	b5bffc04 	addi	r22,r22,-16
    d8b8:	d8c01c17 	ldw	r3,112(sp)
    d8bc:	d8801b17 	ldw	r2,108(sp)
    d8c0:	d811883a 	mov	r8,sp
    d8c4:	4dbfed16 	blt	r9,r22,d87c <__alt_mem_Flash_flash_data+0xf400d87c>
    d8c8:	da802217 	ldw	r10,136(sp)
    d8cc:	1d87883a 	add	r3,r3,r22
    d8d0:	10800044 	addi	r2,r2,1
    d8d4:	42800015 	stw	r10,0(r8)
    d8d8:	45800115 	stw	r22,4(r8)
    d8dc:	d8c01c15 	stw	r3,112(sp)
    d8e0:	d8801b15 	stw	r2,108(sp)
    d8e4:	010001c4 	movi	r4,7
    d8e8:	2080c616 	blt	r4,r2,dc04 <___svfiprintf_internal_r+0xef4>
    d8ec:	42000204 	addi	r8,r8,8
    d8f0:	003f2c06 	br	d5a4 <__alt_mem_Flash_flash_data+0xf400d5a4>
    d8f4:	9009883a 	mov	r4,r18
    d8f8:	a00b883a 	mov	r5,r20
    d8fc:	d9801a04 	addi	r6,sp,104
    d900:	000cb440 	call	cb44 <__ssprint_r>
    d904:	103fbe1e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d908:	d8c01c17 	ldw	r3,112(sp)
    d90c:	d811883a 	mov	r8,sp
    d910:	003f5606 	br	d66c <__alt_mem_Flash_flash_data+0xf400d66c>
    d914:	9009883a 	mov	r4,r18
    d918:	a00b883a 	mov	r5,r20
    d91c:	d9801a04 	addi	r6,sp,104
    d920:	000cb440 	call	cb44 <__ssprint_r>
    d924:	103f8626 	beq	r2,zero,d740 <__alt_mem_Flash_flash_data+0xf400d740>
    d928:	003fb506 	br	d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d92c:	10803fcc 	andi	r2,r2,255
    d930:	10003b1e 	bne	r2,zero,da20 <___svfiprintf_internal_r+0xd10>
    d934:	8880004c 	andi	r2,r17,1
    d938:	10007d26 	beq	r2,zero,db30 <___svfiprintf_internal_r+0xe20>
    d93c:	00800c04 	movi	r2,48
    d940:	d8c019c4 	addi	r3,sp,103
    d944:	d88019c5 	stb	r2,103(sp)
    d948:	df002b17 	ldw	fp,172(sp)
    d94c:	d8c02615 	stw	r3,152(sp)
    d950:	003dc506 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    d954:	00bfffc4 	movi	r2,-1
    d958:	003fae06 	br	d814 <__alt_mem_Flash_flash_data+0xf400d814>
    d95c:	9009883a 	mov	r4,r18
    d960:	a00b883a 	mov	r5,r20
    d964:	d9801a04 	addi	r6,sp,104
    d968:	000cb440 	call	cb44 <__ssprint_r>
    d96c:	103fa41e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d970:	d811883a 	mov	r8,sp
    d974:	003d2206 	br	ce00 <__alt_mem_Flash_flash_data+0xf400ce00>
    d978:	9009883a 	mov	r4,r18
    d97c:	a00b883a 	mov	r5,r20
    d980:	d9801a04 	addi	r6,sp,104
    d984:	000cb440 	call	cb44 <__ssprint_r>
    d988:	103f9d1e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d98c:	d8c01c17 	ldw	r3,112(sp)
    d990:	d8801b17 	ldw	r2,108(sp)
    d994:	d811883a 	mov	r8,sp
    d998:	003f2a06 	br	d644 <__alt_mem_Flash_flash_data+0xf400d644>
    d99c:	d9402a17 	ldw	r5,168(sp)
    d9a0:	d8c01a04 	addi	r3,sp,104
    d9a4:	488003cc 	andi	r2,r9,15
    d9a8:	5008973a 	slli	r4,r10,28
    d9ac:	2885883a 	add	r2,r5,r2
    d9b0:	4812d13a 	srli	r9,r9,4
    d9b4:	10800003 	ldbu	r2,0(r2)
    d9b8:	5014d13a 	srli	r10,r10,4
    d9bc:	18ffffc4 	addi	r3,r3,-1
    d9c0:	2252b03a 	or	r9,r4,r9
    d9c4:	18800005 	stb	r2,0(r3)
    d9c8:	4a84b03a 	or	r2,r9,r10
    d9cc:	103ff51e 	bne	r2,zero,d9a4 <__alt_mem_Flash_flash_data+0xf400d9a4>
    d9d0:	d8c02615 	stw	r3,152(sp)
    d9d4:	003da206 	br	d060 <__alt_mem_Flash_flash_data+0xf400d060>
    d9d8:	9009883a 	mov	r4,r18
    d9dc:	a00b883a 	mov	r5,r20
    d9e0:	d9801a04 	addi	r6,sp,104
    d9e4:	000cb440 	call	cb44 <__ssprint_r>
    d9e8:	103f851e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    d9ec:	d8c01c17 	ldw	r3,112(sp)
    d9f0:	d8801b17 	ldw	r2,108(sp)
    d9f4:	d811883a 	mov	r8,sp
    d9f8:	003eda06 	br	d564 <__alt_mem_Flash_flash_data+0xf400d564>
    d9fc:	9009883a 	mov	r4,r18
    da00:	a00b883a 	mov	r5,r20
    da04:	d9801a04 	addi	r6,sp,104
    da08:	000cb440 	call	cb44 <__ssprint_r>
    da0c:	103f7c1e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    da10:	d8c01c17 	ldw	r3,112(sp)
    da14:	d8801b17 	ldw	r2,108(sp)
    da18:	d811883a 	mov	r8,sp
    da1c:	003ede06 	br	d598 <__alt_mem_Flash_flash_data+0xf400d598>
    da20:	da801a04 	addi	r10,sp,104
    da24:	da802615 	stw	r10,152(sp)
    da28:	003d8f06 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    da2c:	8880040c 	andi	r2,r17,16
    da30:	10004c1e 	bne	r2,zero,db64 <___svfiprintf_internal_r+0xe54>
    da34:	8880100c 	andi	r2,r17,64
    da38:	da802317 	ldw	r10,140(sp)
    da3c:	10004a26 	beq	r2,zero,db68 <___svfiprintf_internal_r+0xe58>
    da40:	5240000b 	ldhu	r9,0(r10)
    da44:	dac02317 	ldw	r11,140(sp)
    da48:	0015883a 	mov	r10,zero
    da4c:	00800044 	movi	r2,1
    da50:	5ac00104 	addi	r11,r11,4
    da54:	dac02315 	stw	r11,140(sp)
    da58:	4807883a 	mov	r3,r9
    da5c:	003d6506 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    da60:	9009883a 	mov	r4,r18
    da64:	a00b883a 	mov	r5,r20
    da68:	d9801a04 	addi	r6,sp,104
    da6c:	000cb440 	call	cb44 <__ssprint_r>
    da70:	103f631e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    da74:	d8c01c17 	ldw	r3,112(sp)
    da78:	d8801b17 	ldw	r2,108(sp)
    da7c:	d811883a 	mov	r8,sp
    da80:	003eab06 	br	d530 <__alt_mem_Flash_flash_data+0xf400d530>
    da84:	8880040c 	andi	r2,r17,16
    da88:	1000331e 	bne	r2,zero,db58 <___svfiprintf_internal_r+0xe48>
    da8c:	8880100c 	andi	r2,r17,64
    da90:	da802317 	ldw	r10,140(sp)
    da94:	10003126 	beq	r2,zero,db5c <___svfiprintf_internal_r+0xe4c>
    da98:	5240000b 	ldhu	r9,0(r10)
    da9c:	dac02317 	ldw	r11,140(sp)
    daa0:	0015883a 	mov	r10,zero
    daa4:	0005883a 	mov	r2,zero
    daa8:	5ac00104 	addi	r11,r11,4
    daac:	dac02315 	stw	r11,140(sp)
    dab0:	4807883a 	mov	r3,r9
    dab4:	003d4f06 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    dab8:	10803fcc 	andi	r2,r2,255
    dabc:	1080201c 	xori	r2,r2,128
    dac0:	10bfe004 	addi	r2,r2,-128
    dac4:	01000c04 	movi	r4,48
    dac8:	11005b26 	beq	r2,r4,dc38 <___svfiprintf_internal_r+0xf28>
    dacc:	da802617 	ldw	r10,152(sp)
    dad0:	d8801e17 	ldw	r2,120(sp)
    dad4:	193fffc5 	stb	r4,-1(r3)
    dad8:	52bfffc4 	addi	r10,r10,-1
    dadc:	da802615 	stw	r10,152(sp)
    dae0:	12b9c83a 	sub	fp,r2,r10
    dae4:	003d6006 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    dae8:	00800244 	movi	r2,9
    daec:	127f1e36 	bltu	r2,r9,d768 <__alt_mem_Flash_flash_data+0xf400d768>
    daf0:	4a400c04 	addi	r9,r9,48
    daf4:	d8c019c4 	addi	r3,sp,103
    daf8:	da4019c5 	stb	r9,103(sp)
    dafc:	df002b17 	ldw	fp,172(sp)
    db00:	d8c02615 	stw	r3,152(sp)
    db04:	003d5806 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    db08:	d8802315 	stw	r2,140(sp)
    db0c:	a9000007 	ldb	r4,0(r21)
    db10:	003ccb06 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    db14:	9009883a 	mov	r4,r18
    db18:	a00b883a 	mov	r5,r20
    db1c:	d9801a04 	addi	r6,sp,104
    db20:	000cb440 	call	cb44 <__ssprint_r>
    db24:	103f361e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    db28:	d8c01c17 	ldw	r3,112(sp)
    db2c:	003efc06 	br	d720 <__alt_mem_Flash_flash_data+0xf400d720>
    db30:	d8c01a04 	addi	r3,sp,104
    db34:	d8c02615 	stw	r3,152(sp)
    db38:	003d4b06 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    db3c:	da802317 	ldw	r10,140(sp)
    db40:	1a400017 	ldw	r9,0(r3)
    db44:	52800104 	addi	r10,r10,4
    db48:	da802315 	stw	r10,140(sp)
    db4c:	4815d7fa 	srai	r10,r9,31
    db50:	5005883a 	mov	r2,r10
    db54:	003d9c06 	br	d1c8 <__alt_mem_Flash_flash_data+0xf400d1c8>
    db58:	da802317 	ldw	r10,140(sp)
    db5c:	52400017 	ldw	r9,0(r10)
    db60:	003fce06 	br	da9c <__alt_mem_Flash_flash_data+0xf400da9c>
    db64:	da802317 	ldw	r10,140(sp)
    db68:	52400017 	ldw	r9,0(r10)
    db6c:	003fb506 	br	da44 <__alt_mem_Flash_flash_data+0xf400da44>
    db70:	8880100c 	andi	r2,r17,64
    db74:	da802317 	ldw	r10,140(sp)
    db78:	103e1926 	beq	r2,zero,d3e0 <__alt_mem_Flash_flash_data+0xf400d3e0>
    db7c:	dac02317 	ldw	r11,140(sp)
    db80:	5240000b 	ldhu	r9,0(r10)
    db84:	0015883a 	mov	r10,zero
    db88:	5ac00104 	addi	r11,r11,4
    db8c:	dac02315 	stw	r11,140(sp)
    db90:	003de406 	br	d324 <__alt_mem_Flash_flash_data+0xf400d324>
    db94:	a9000007 	ldb	r4,0(r21)
    db98:	003ca906 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    db9c:	dac02317 	ldw	r11,140(sp)
    dba0:	da802417 	ldw	r10,144(sp)
    dba4:	58800017 	ldw	r2,0(r11)
    dba8:	5007d7fa 	srai	r3,r10,31
    dbac:	5ac00104 	addi	r11,r11,4
    dbb0:	dac02315 	stw	r11,140(sp)
    dbb4:	12800015 	stw	r10,0(r2)
    dbb8:	10c00115 	stw	r3,4(r2)
    dbbc:	003c7806 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    dbc0:	00800c04 	movi	r2,48
    dbc4:	d8801d05 	stb	r2,116(sp)
    dbc8:	d9001d45 	stb	r4,117(sp)
    dbcc:	8c400094 	ori	r17,r17,2
    dbd0:	00800084 	movi	r2,2
    dbd4:	003d0706 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    dbd8:	ad400044 	addi	r21,r21,1
    dbdc:	8c400814 	ori	r17,r17,32
    dbe0:	11000047 	ldb	r4,1(r2)
    dbe4:	003c9606 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    dbe8:	dac02317 	ldw	r11,140(sp)
    dbec:	da802417 	ldw	r10,144(sp)
    dbf0:	58800017 	ldw	r2,0(r11)
    dbf4:	5ac00104 	addi	r11,r11,4
    dbf8:	dac02315 	stw	r11,140(sp)
    dbfc:	12800015 	stw	r10,0(r2)
    dc00:	003c6706 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    dc04:	9009883a 	mov	r4,r18
    dc08:	a00b883a 	mov	r5,r20
    dc0c:	d9801a04 	addi	r6,sp,104
    dc10:	000cb440 	call	cb44 <__ssprint_r>
    dc14:	103efa1e 	bne	r2,zero,d800 <__alt_mem_Flash_flash_data+0xf400d800>
    dc18:	d8c01c17 	ldw	r3,112(sp)
    dc1c:	d8801b17 	ldw	r2,108(sp)
    dc20:	d811883a 	mov	r8,sp
    dc24:	003e5f06 	br	d5a4 <__alt_mem_Flash_flash_data+0xf400d5a4>
    dc28:	02c000b4 	movhi	r11,2
    dc2c:	5aef4a04 	addi	r11,r11,-17112
    dc30:	dac02215 	stw	r11,136(sp)
    dc34:	003e7906 	br	d61c <__alt_mem_Flash_flash_data+0xf400d61c>
    dc38:	da801e17 	ldw	r10,120(sp)
    dc3c:	d8c02617 	ldw	r3,152(sp)
    dc40:	50f9c83a 	sub	fp,r10,r3
    dc44:	003d0806 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    dc48:	da002c15 	stw	r8,176(sp)
    dc4c:	000caac0 	call	caac <strlen>
    dc50:	1039883a 	mov	fp,r2
    dc54:	dac01d83 	ldbu	r11,118(sp)
    dc58:	ddc02315 	stw	r23,140(sp)
    dc5c:	0021883a 	mov	r16,zero
    dc60:	da002c17 	ldw	r8,176(sp)
    dc64:	003d0006 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    dc68:	00800184 	movi	r2,6
    dc6c:	1400012e 	bgeu	r2,r16,dc74 <___svfiprintf_internal_r+0xf64>
    dc70:	1021883a 	mov	r16,r2
    dc74:	8039883a 	mov	fp,r16
    dc78:	802d883a 	mov	r22,r16
    dc7c:	80002116 	blt	r16,zero,dd04 <___svfiprintf_internal_r+0xff4>
    dc80:	008000b4 	movhi	r2,2
    dc84:	10aeee04 	addi	r2,r2,-17480
    dc88:	dd802015 	stw	r22,128(sp)
    dc8c:	ddc02315 	stw	r23,140(sp)
    dc90:	d8802615 	stw	r2,152(sp)
    dc94:	003d5d06 	br	d20c <__alt_mem_Flash_flash_data+0xf400d20c>
    dc98:	04001004 	movi	r16,64
    dc9c:	800b883a 	mov	r5,r16
    dca0:	000b1100 	call	b110 <_malloc_r>
    dca4:	da802717 	ldw	r10,156(sp)
    dca8:	50800015 	stw	r2,0(r10)
    dcac:	50800415 	stw	r2,16(r10)
    dcb0:	10002026 	beq	r2,zero,dd34 <___svfiprintf_internal_r+0x1024>
    dcb4:	da802717 	ldw	r10,156(sp)
    dcb8:	54000515 	stw	r16,20(r10)
    dcbc:	003c2806 	br	cd60 <__alt_mem_Flash_flash_data+0xf400cd60>
    dcc0:	010000b4 	movhi	r4,2
    dcc4:	212f4e04 	addi	r4,r4,-17096
    dcc8:	d9002815 	stw	r4,160(sp)
    dccc:	003d7e06 	br	d2c8 <__alt_mem_Flash_flash_data+0xf400d2c8>
    dcd0:	010000b4 	movhi	r4,2
    dcd4:	212f4e04 	addi	r4,r4,-17096
    dcd8:	d9002815 	stw	r4,160(sp)
    dcdc:	003e8706 	br	d6fc <__alt_mem_Flash_flash_data+0xf400d6fc>
    dce0:	010000b4 	movhi	r4,2
    dce4:	212f4a04 	addi	r4,r4,-17112
    dce8:	d9002215 	stw	r4,136(sp)
    dcec:	003ef606 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    dcf0:	8039883a 	mov	fp,r16
    dcf4:	dac01d83 	ldbu	r11,118(sp)
    dcf8:	ddc02315 	stw	r23,140(sp)
    dcfc:	0021883a 	mov	r16,zero
    dd00:	003cd906 	br	d068 <__alt_mem_Flash_flash_data+0xf400d068>
    dd04:	002d883a 	mov	r22,zero
    dd08:	003fdd06 	br	dc80 <__alt_mem_Flash_flash_data+0xf400dc80>
    dd0c:	dac02317 	ldw	r11,140(sp)
    dd10:	a805883a 	mov	r2,r21
    dd14:	502b883a 	mov	r21,r10
    dd18:	5c000017 	ldw	r16,0(r11)
    dd1c:	59000104 	addi	r4,r11,4
    dd20:	d9002315 	stw	r4,140(sp)
    dd24:	803fae0e 	bge	r16,zero,dbe0 <__alt_mem_Flash_flash_data+0xf400dbe0>
    dd28:	043fffc4 	movi	r16,-1
    dd2c:	11000047 	ldb	r4,1(r2)
    dd30:	003c4306 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    dd34:	dac02917 	ldw	r11,164(sp)
    dd38:	00800304 	movi	r2,12
    dd3c:	58800015 	stw	r2,0(r11)
    dd40:	00bfffc4 	movi	r2,-1
    dd44:	003eb306 	br	d814 <__alt_mem_Flash_flash_data+0xf400d814>

0000dd48 <_calloc_r>:
    dd48:	298b383a 	mul	r5,r5,r6
    dd4c:	defffe04 	addi	sp,sp,-8
    dd50:	dc000015 	stw	r16,0(sp)
    dd54:	dfc00115 	stw	ra,4(sp)
    dd58:	000b1100 	call	b110 <_malloc_r>
    dd5c:	1021883a 	mov	r16,r2
    dd60:	10002826 	beq	r2,zero,de04 <_calloc_r+0xbc>
    dd64:	11bfff17 	ldw	r6,-4(r2)
    dd68:	00bfff04 	movi	r2,-4
    dd6c:	00c00904 	movi	r3,36
    dd70:	308c703a 	and	r6,r6,r2
    dd74:	308d883a 	add	r6,r6,r2
    dd78:	19801436 	bltu	r3,r6,ddcc <_calloc_r+0x84>
    dd7c:	008004c4 	movi	r2,19
    dd80:	11800936 	bltu	r2,r6,dda8 <_calloc_r+0x60>
    dd84:	8005883a 	mov	r2,r16
    dd88:	10000015 	stw	zero,0(r2)
    dd8c:	10000115 	stw	zero,4(r2)
    dd90:	10000215 	stw	zero,8(r2)
    dd94:	8005883a 	mov	r2,r16
    dd98:	dfc00117 	ldw	ra,4(sp)
    dd9c:	dc000017 	ldw	r16,0(sp)
    dda0:	dec00204 	addi	sp,sp,8
    dda4:	f800283a 	ret
    dda8:	80000015 	stw	zero,0(r16)
    ddac:	80000115 	stw	zero,4(r16)
    ddb0:	008006c4 	movi	r2,27
    ddb4:	11800d2e 	bgeu	r2,r6,ddec <_calloc_r+0xa4>
    ddb8:	80000215 	stw	zero,8(r16)
    ddbc:	80000315 	stw	zero,12(r16)
    ddc0:	30c00c26 	beq	r6,r3,ddf4 <_calloc_r+0xac>
    ddc4:	80800404 	addi	r2,r16,16
    ddc8:	003fef06 	br	dd88 <__alt_mem_Flash_flash_data+0xf400dd88>
    ddcc:	8009883a 	mov	r4,r16
    ddd0:	000b883a 	mov	r5,zero
    ddd4:	000e37c0 	call	e37c <memset>
    ddd8:	8005883a 	mov	r2,r16
    dddc:	dfc00117 	ldw	ra,4(sp)
    dde0:	dc000017 	ldw	r16,0(sp)
    dde4:	dec00204 	addi	sp,sp,8
    dde8:	f800283a 	ret
    ddec:	80800204 	addi	r2,r16,8
    ddf0:	003fe506 	br	dd88 <__alt_mem_Flash_flash_data+0xf400dd88>
    ddf4:	80000415 	stw	zero,16(r16)
    ddf8:	80800604 	addi	r2,r16,24
    ddfc:	80000515 	stw	zero,20(r16)
    de00:	003fe106 	br	dd88 <__alt_mem_Flash_flash_data+0xf400dd88>
    de04:	0005883a 	mov	r2,zero
    de08:	003fe306 	br	dd98 <__alt_mem_Flash_flash_data+0xf400dd98>

0000de0c <_malloc_trim_r>:
    de0c:	defffb04 	addi	sp,sp,-20
    de10:	dcc00315 	stw	r19,12(sp)
    de14:	04c000b4 	movhi	r19,2
    de18:	dc800215 	stw	r18,8(sp)
    de1c:	dc400115 	stw	r17,4(sp)
    de20:	dc000015 	stw	r16,0(sp)
    de24:	dfc00415 	stw	ra,16(sp)
    de28:	2821883a 	mov	r16,r5
    de2c:	9cf13404 	addi	r19,r19,-15152
    de30:	2025883a 	mov	r18,r4
    de34:	000f9800 	call	f980 <__malloc_lock>
    de38:	98800217 	ldw	r2,8(r19)
    de3c:	14400117 	ldw	r17,4(r2)
    de40:	00bfff04 	movi	r2,-4
    de44:	88a2703a 	and	r17,r17,r2
    de48:	8c21c83a 	sub	r16,r17,r16
    de4c:	8403fbc4 	addi	r16,r16,4079
    de50:	8020d33a 	srli	r16,r16,12
    de54:	0083ffc4 	movi	r2,4095
    de58:	843fffc4 	addi	r16,r16,-1
    de5c:	8020933a 	slli	r16,r16,12
    de60:	1400060e 	bge	r2,r16,de7c <_malloc_trim_r+0x70>
    de64:	9009883a 	mov	r4,r18
    de68:	000b883a 	mov	r5,zero
    de6c:	000c9b40 	call	c9b4 <_sbrk_r>
    de70:	98c00217 	ldw	r3,8(r19)
    de74:	1c47883a 	add	r3,r3,r17
    de78:	10c00a26 	beq	r2,r3,dea4 <_malloc_trim_r+0x98>
    de7c:	9009883a 	mov	r4,r18
    de80:	000faa00 	call	faa0 <__malloc_unlock>
    de84:	0005883a 	mov	r2,zero
    de88:	dfc00417 	ldw	ra,16(sp)
    de8c:	dcc00317 	ldw	r19,12(sp)
    de90:	dc800217 	ldw	r18,8(sp)
    de94:	dc400117 	ldw	r17,4(sp)
    de98:	dc000017 	ldw	r16,0(sp)
    de9c:	dec00504 	addi	sp,sp,20
    dea0:	f800283a 	ret
    dea4:	9009883a 	mov	r4,r18
    dea8:	040bc83a 	sub	r5,zero,r16
    deac:	000c9b40 	call	c9b4 <_sbrk_r>
    deb0:	00ffffc4 	movi	r3,-1
    deb4:	10c00d26 	beq	r2,r3,deec <_malloc_trim_r+0xe0>
    deb8:	00c000b4 	movhi	r3,2
    debc:	18ffb204 	addi	r3,r3,-312
    dec0:	18800017 	ldw	r2,0(r3)
    dec4:	99000217 	ldw	r4,8(r19)
    dec8:	8c23c83a 	sub	r17,r17,r16
    decc:	8c400054 	ori	r17,r17,1
    ded0:	1421c83a 	sub	r16,r2,r16
    ded4:	24400115 	stw	r17,4(r4)
    ded8:	9009883a 	mov	r4,r18
    dedc:	1c000015 	stw	r16,0(r3)
    dee0:	000faa00 	call	faa0 <__malloc_unlock>
    dee4:	00800044 	movi	r2,1
    dee8:	003fe706 	br	de88 <__alt_mem_Flash_flash_data+0xf400de88>
    deec:	9009883a 	mov	r4,r18
    def0:	000b883a 	mov	r5,zero
    def4:	000c9b40 	call	c9b4 <_sbrk_r>
    def8:	99000217 	ldw	r4,8(r19)
    defc:	014003c4 	movi	r5,15
    df00:	1107c83a 	sub	r3,r2,r4
    df04:	28ffdd0e 	bge	r5,r3,de7c <__alt_mem_Flash_flash_data+0xf400de7c>
    df08:	014000b4 	movhi	r5,2
    df0c:	29779f04 	addi	r5,r5,-8580
    df10:	29400017 	ldw	r5,0(r5)
    df14:	18c00054 	ori	r3,r3,1
    df18:	20c00115 	stw	r3,4(r4)
    df1c:	00c000b4 	movhi	r3,2
    df20:	1145c83a 	sub	r2,r2,r5
    df24:	18ffb204 	addi	r3,r3,-312
    df28:	18800015 	stw	r2,0(r3)
    df2c:	003fd306 	br	de7c <__alt_mem_Flash_flash_data+0xf400de7c>

0000df30 <_free_r>:
    df30:	28004c26 	beq	r5,zero,e064 <_free_r+0x134>
    df34:	defffd04 	addi	sp,sp,-12
    df38:	dc400115 	stw	r17,4(sp)
    df3c:	dc000015 	stw	r16,0(sp)
    df40:	2023883a 	mov	r17,r4
    df44:	2821883a 	mov	r16,r5
    df48:	dfc00215 	stw	ra,8(sp)
    df4c:	000f9800 	call	f980 <__malloc_lock>
    df50:	813fff17 	ldw	r4,-4(r16)
    df54:	00bfff84 	movi	r2,-2
    df58:	024000b4 	movhi	r9,2
    df5c:	81bffe04 	addi	r6,r16,-8
    df60:	2084703a 	and	r2,r4,r2
    df64:	4a713404 	addi	r9,r9,-15152
    df68:	308b883a 	add	r5,r6,r2
    df6c:	2a000117 	ldw	r8,4(r5)
    df70:	49c00217 	ldw	r7,8(r9)
    df74:	00ffff04 	movi	r3,-4
    df78:	40c6703a 	and	r3,r8,r3
    df7c:	39405326 	beq	r7,r5,e0cc <_free_r+0x19c>
    df80:	28c00115 	stw	r3,4(r5)
    df84:	2100004c 	andi	r4,r4,1
    df88:	2000091e 	bne	r4,zero,dfb0 <_free_r+0x80>
    df8c:	81fffe17 	ldw	r7,-8(r16)
    df90:	4a000204 	addi	r8,r9,8
    df94:	31cdc83a 	sub	r6,r6,r7
    df98:	31000217 	ldw	r4,8(r6)
    df9c:	11c5883a 	add	r2,r2,r7
    dfa0:	22006126 	beq	r4,r8,e128 <_free_r+0x1f8>
    dfa4:	31c00317 	ldw	r7,12(r6)
    dfa8:	21c00315 	stw	r7,12(r4)
    dfac:	39000215 	stw	r4,8(r7)
    dfb0:	28c9883a 	add	r4,r5,r3
    dfb4:	21c00117 	ldw	r7,4(r4)
    dfb8:	39c0004c 	andi	r7,r7,1
    dfbc:	38000d1e 	bne	r7,zero,dff4 <_free_r+0xc4>
    dfc0:	29000217 	ldw	r4,8(r5)
    dfc4:	10c5883a 	add	r2,r2,r3
    dfc8:	00c000b4 	movhi	r3,2
    dfcc:	18f13604 	addi	r3,r3,-15144
    dfd0:	20c07526 	beq	r4,r3,e1a8 <_free_r+0x278>
    dfd4:	29c00317 	ldw	r7,12(r5)
    dfd8:	11400054 	ori	r5,r2,1
    dfdc:	3087883a 	add	r3,r6,r2
    dfe0:	21c00315 	stw	r7,12(r4)
    dfe4:	39000215 	stw	r4,8(r7)
    dfe8:	31400115 	stw	r5,4(r6)
    dfec:	18800015 	stw	r2,0(r3)
    dff0:	00000406 	br	e004 <_free_r+0xd4>
    dff4:	10c00054 	ori	r3,r2,1
    dff8:	30c00115 	stw	r3,4(r6)
    dffc:	3087883a 	add	r3,r6,r2
    e000:	18800015 	stw	r2,0(r3)
    e004:	00c07fc4 	movi	r3,511
    e008:	18801736 	bltu	r3,r2,e068 <_free_r+0x138>
    e00c:	1004d0fa 	srli	r2,r2,3
    e010:	01400044 	movi	r5,1
    e014:	49000117 	ldw	r4,4(r9)
    e018:	1087883a 	add	r3,r2,r2
    e01c:	18c7883a 	add	r3,r3,r3
    e020:	1005d0ba 	srai	r2,r2,2
    e024:	18c7883a 	add	r3,r3,r3
    e028:	1a47883a 	add	r3,r3,r9
    e02c:	19c00217 	ldw	r7,8(r3)
    e030:	2884983a 	sll	r2,r5,r2
    e034:	30c00315 	stw	r3,12(r6)
    e038:	31c00215 	stw	r7,8(r6)
    e03c:	1104b03a 	or	r2,r2,r4
    e040:	19800215 	stw	r6,8(r3)
    e044:	48800115 	stw	r2,4(r9)
    e048:	39800315 	stw	r6,12(r7)
    e04c:	8809883a 	mov	r4,r17
    e050:	dfc00217 	ldw	ra,8(sp)
    e054:	dc400117 	ldw	r17,4(sp)
    e058:	dc000017 	ldw	r16,0(sp)
    e05c:	dec00304 	addi	sp,sp,12
    e060:	000faa01 	jmpi	faa0 <__malloc_unlock>
    e064:	f800283a 	ret
    e068:	1006d27a 	srli	r3,r2,9
    e06c:	01000104 	movi	r4,4
    e070:	20c04036 	bltu	r4,r3,e174 <_free_r+0x244>
    e074:	1006d1ba 	srli	r3,r2,6
    e078:	19400e04 	addi	r5,r3,56
    e07c:	2947883a 	add	r3,r5,r5
    e080:	18c7883a 	add	r3,r3,r3
    e084:	18c7883a 	add	r3,r3,r3
    e088:	1a49883a 	add	r4,r3,r9
    e08c:	20c00217 	ldw	r3,8(r4)
    e090:	01c000b4 	movhi	r7,2
    e094:	39f13404 	addi	r7,r7,-15152
    e098:	19003b26 	beq	r3,r4,e188 <_free_r+0x258>
    e09c:	01ffff04 	movi	r7,-4
    e0a0:	19400117 	ldw	r5,4(r3)
    e0a4:	29ca703a 	and	r5,r5,r7
    e0a8:	1140022e 	bgeu	r2,r5,e0b4 <_free_r+0x184>
    e0ac:	18c00217 	ldw	r3,8(r3)
    e0b0:	20fffb1e 	bne	r4,r3,e0a0 <__alt_mem_Flash_flash_data+0xf400e0a0>
    e0b4:	18800317 	ldw	r2,12(r3)
    e0b8:	30800315 	stw	r2,12(r6)
    e0bc:	30c00215 	stw	r3,8(r6)
    e0c0:	11800215 	stw	r6,8(r2)
    e0c4:	19800315 	stw	r6,12(r3)
    e0c8:	003fe006 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e0cc:	2100004c 	andi	r4,r4,1
    e0d0:	1885883a 	add	r2,r3,r2
    e0d4:	2000071e 	bne	r4,zero,e0f4 <_free_r+0x1c4>
    e0d8:	817ffe17 	ldw	r5,-8(r16)
    e0dc:	314dc83a 	sub	r6,r6,r5
    e0e0:	30c00317 	ldw	r3,12(r6)
    e0e4:	31000217 	ldw	r4,8(r6)
    e0e8:	1145883a 	add	r2,r2,r5
    e0ec:	20c00315 	stw	r3,12(r4)
    e0f0:	19000215 	stw	r4,8(r3)
    e0f4:	10c00054 	ori	r3,r2,1
    e0f8:	30c00115 	stw	r3,4(r6)
    e0fc:	00c000b4 	movhi	r3,2
    e100:	18f7a004 	addi	r3,r3,-8576
    e104:	18c00017 	ldw	r3,0(r3)
    e108:	49800215 	stw	r6,8(r9)
    e10c:	10ffcf36 	bltu	r2,r3,e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e110:	008000b4 	movhi	r2,2
    e114:	10bf9004 	addi	r2,r2,-448
    e118:	11400017 	ldw	r5,0(r2)
    e11c:	8809883a 	mov	r4,r17
    e120:	000de0c0 	call	de0c <_malloc_trim_r>
    e124:	003fc906 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e128:	28c9883a 	add	r4,r5,r3
    e12c:	21000117 	ldw	r4,4(r4)
    e130:	2100004c 	andi	r4,r4,1
    e134:	20000a1e 	bne	r4,zero,e160 <_free_r+0x230>
    e138:	29000317 	ldw	r4,12(r5)
    e13c:	29400217 	ldw	r5,8(r5)
    e140:	10c5883a 	add	r2,r2,r3
    e144:	10c00054 	ori	r3,r2,1
    e148:	29000315 	stw	r4,12(r5)
    e14c:	21400215 	stw	r5,8(r4)
    e150:	30c00115 	stw	r3,4(r6)
    e154:	308d883a 	add	r6,r6,r2
    e158:	30800015 	stw	r2,0(r6)
    e15c:	003fbb06 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e160:	10c00054 	ori	r3,r2,1
    e164:	30c00115 	stw	r3,4(r6)
    e168:	308d883a 	add	r6,r6,r2
    e16c:	30800015 	stw	r2,0(r6)
    e170:	003fb606 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e174:	01000504 	movi	r4,20
    e178:	20c01436 	bltu	r4,r3,e1cc <_free_r+0x29c>
    e17c:	194016c4 	addi	r5,r3,91
    e180:	2947883a 	add	r3,r5,r5
    e184:	003fbe06 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e188:	280bd0ba 	srai	r5,r5,2
    e18c:	00800044 	movi	r2,1
    e190:	39000117 	ldw	r4,4(r7)
    e194:	114a983a 	sll	r5,r2,r5
    e198:	1805883a 	mov	r2,r3
    e19c:	2908b03a 	or	r4,r5,r4
    e1a0:	39000115 	stw	r4,4(r7)
    e1a4:	003fc406 	br	e0b8 <__alt_mem_Flash_flash_data+0xf400e0b8>
    e1a8:	49800515 	stw	r6,20(r9)
    e1ac:	49800415 	stw	r6,16(r9)
    e1b0:	10c00054 	ori	r3,r2,1
    e1b4:	31000315 	stw	r4,12(r6)
    e1b8:	31000215 	stw	r4,8(r6)
    e1bc:	30c00115 	stw	r3,4(r6)
    e1c0:	308d883a 	add	r6,r6,r2
    e1c4:	30800015 	stw	r2,0(r6)
    e1c8:	003fa006 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e1cc:	01001504 	movi	r4,84
    e1d0:	20c00436 	bltu	r4,r3,e1e4 <_free_r+0x2b4>
    e1d4:	1006d33a 	srli	r3,r2,12
    e1d8:	19401b84 	addi	r5,r3,110
    e1dc:	2947883a 	add	r3,r5,r5
    e1e0:	003fa706 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e1e4:	01005504 	movi	r4,340
    e1e8:	20c00436 	bltu	r4,r3,e1fc <_free_r+0x2cc>
    e1ec:	1006d3fa 	srli	r3,r2,15
    e1f0:	19401dc4 	addi	r5,r3,119
    e1f4:	2947883a 	add	r3,r5,r5
    e1f8:	003fa106 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e1fc:	01015504 	movi	r4,1364
    e200:	20c00436 	bltu	r4,r3,e214 <_free_r+0x2e4>
    e204:	1006d4ba 	srli	r3,r2,18
    e208:	19401f04 	addi	r5,r3,124
    e20c:	2947883a 	add	r3,r5,r5
    e210:	003f9b06 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e214:	00c03f04 	movi	r3,252
    e218:	01401f84 	movi	r5,126
    e21c:	003f9806 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>

0000e220 <memmove>:
    e220:	2005883a 	mov	r2,r4
    e224:	29000b2e 	bgeu	r5,r4,e254 <memmove+0x34>
    e228:	298f883a 	add	r7,r5,r6
    e22c:	21c0092e 	bgeu	r4,r7,e254 <memmove+0x34>
    e230:	2187883a 	add	r3,r4,r6
    e234:	198bc83a 	sub	r5,r3,r6
    e238:	30004b26 	beq	r6,zero,e368 <memmove+0x148>
    e23c:	39ffffc4 	addi	r7,r7,-1
    e240:	39000003 	ldbu	r4,0(r7)
    e244:	18ffffc4 	addi	r3,r3,-1
    e248:	19000005 	stb	r4,0(r3)
    e24c:	197ffb1e 	bne	r3,r5,e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e250:	f800283a 	ret
    e254:	00c003c4 	movi	r3,15
    e258:	1980412e 	bgeu	r3,r6,e360 <memmove+0x140>
    e25c:	1146b03a 	or	r3,r2,r5
    e260:	18c000cc 	andi	r3,r3,3
    e264:	1800411e 	bne	r3,zero,e36c <memmove+0x14c>
    e268:	33fffc04 	addi	r15,r6,-16
    e26c:	781ed13a 	srli	r15,r15,4
    e270:	28c00104 	addi	r3,r5,4
    e274:	13400104 	addi	r13,r2,4
    e278:	781c913a 	slli	r14,r15,4
    e27c:	2b000204 	addi	r12,r5,8
    e280:	12c00204 	addi	r11,r2,8
    e284:	73800504 	addi	r14,r14,20
    e288:	2a800304 	addi	r10,r5,12
    e28c:	12400304 	addi	r9,r2,12
    e290:	2b9d883a 	add	r14,r5,r14
    e294:	2811883a 	mov	r8,r5
    e298:	100f883a 	mov	r7,r2
    e29c:	41000017 	ldw	r4,0(r8)
    e2a0:	39c00404 	addi	r7,r7,16
    e2a4:	18c00404 	addi	r3,r3,16
    e2a8:	393ffc15 	stw	r4,-16(r7)
    e2ac:	193ffc17 	ldw	r4,-16(r3)
    e2b0:	6b400404 	addi	r13,r13,16
    e2b4:	5ac00404 	addi	r11,r11,16
    e2b8:	693ffc15 	stw	r4,-16(r13)
    e2bc:	61000017 	ldw	r4,0(r12)
    e2c0:	4a400404 	addi	r9,r9,16
    e2c4:	42000404 	addi	r8,r8,16
    e2c8:	593ffc15 	stw	r4,-16(r11)
    e2cc:	51000017 	ldw	r4,0(r10)
    e2d0:	63000404 	addi	r12,r12,16
    e2d4:	52800404 	addi	r10,r10,16
    e2d8:	493ffc15 	stw	r4,-16(r9)
    e2dc:	1bbfef1e 	bne	r3,r14,e29c <__alt_mem_Flash_flash_data+0xf400e29c>
    e2e0:	79000044 	addi	r4,r15,1
    e2e4:	2008913a 	slli	r4,r4,4
    e2e8:	328003cc 	andi	r10,r6,15
    e2ec:	02c000c4 	movi	r11,3
    e2f0:	1107883a 	add	r3,r2,r4
    e2f4:	290b883a 	add	r5,r5,r4
    e2f8:	5a801e2e 	bgeu	r11,r10,e374 <memmove+0x154>
    e2fc:	1813883a 	mov	r9,r3
    e300:	2811883a 	mov	r8,r5
    e304:	500f883a 	mov	r7,r10
    e308:	41000017 	ldw	r4,0(r8)
    e30c:	4a400104 	addi	r9,r9,4
    e310:	39ffff04 	addi	r7,r7,-4
    e314:	493fff15 	stw	r4,-4(r9)
    e318:	42000104 	addi	r8,r8,4
    e31c:	59fffa36 	bltu	r11,r7,e308 <__alt_mem_Flash_flash_data+0xf400e308>
    e320:	513fff04 	addi	r4,r10,-4
    e324:	2008d0ba 	srli	r4,r4,2
    e328:	318000cc 	andi	r6,r6,3
    e32c:	21000044 	addi	r4,r4,1
    e330:	2109883a 	add	r4,r4,r4
    e334:	2109883a 	add	r4,r4,r4
    e338:	1907883a 	add	r3,r3,r4
    e33c:	290b883a 	add	r5,r5,r4
    e340:	30000926 	beq	r6,zero,e368 <memmove+0x148>
    e344:	198d883a 	add	r6,r3,r6
    e348:	29c00003 	ldbu	r7,0(r5)
    e34c:	18c00044 	addi	r3,r3,1
    e350:	29400044 	addi	r5,r5,1
    e354:	19ffffc5 	stb	r7,-1(r3)
    e358:	19bffb1e 	bne	r3,r6,e348 <__alt_mem_Flash_flash_data+0xf400e348>
    e35c:	f800283a 	ret
    e360:	1007883a 	mov	r3,r2
    e364:	003ff606 	br	e340 <__alt_mem_Flash_flash_data+0xf400e340>
    e368:	f800283a 	ret
    e36c:	1007883a 	mov	r3,r2
    e370:	003ff406 	br	e344 <__alt_mem_Flash_flash_data+0xf400e344>
    e374:	500d883a 	mov	r6,r10
    e378:	003ff106 	br	e340 <__alt_mem_Flash_flash_data+0xf400e340>

0000e37c <memset>:
    e37c:	20c000cc 	andi	r3,r4,3
    e380:	2005883a 	mov	r2,r4
    e384:	18004326 	beq	r3,zero,e494 <memset+0x118>
    e388:	31ffffc4 	addi	r7,r6,-1
    e38c:	30004026 	beq	r6,zero,e490 <memset+0x114>
    e390:	2813883a 	mov	r9,r5
    e394:	200d883a 	mov	r6,r4
    e398:	2007883a 	mov	r3,r4
    e39c:	00000406 	br	e3b0 <memset+0x34>
    e3a0:	3a3fffc4 	addi	r8,r7,-1
    e3a4:	31800044 	addi	r6,r6,1
    e3a8:	38003926 	beq	r7,zero,e490 <memset+0x114>
    e3ac:	400f883a 	mov	r7,r8
    e3b0:	18c00044 	addi	r3,r3,1
    e3b4:	32400005 	stb	r9,0(r6)
    e3b8:	1a0000cc 	andi	r8,r3,3
    e3bc:	403ff81e 	bne	r8,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e3c0:	010000c4 	movi	r4,3
    e3c4:	21c02d2e 	bgeu	r4,r7,e47c <memset+0x100>
    e3c8:	29803fcc 	andi	r6,r5,255
    e3cc:	3008923a 	slli	r4,r6,8
    e3d0:	218cb03a 	or	r6,r4,r6
    e3d4:	3008943a 	slli	r4,r6,16
    e3d8:	218cb03a 	or	r6,r4,r6
    e3dc:	010003c4 	movi	r4,15
    e3e0:	21c0182e 	bgeu	r4,r7,e444 <memset+0xc8>
    e3e4:	3b3ffc04 	addi	r12,r7,-16
    e3e8:	6018d13a 	srli	r12,r12,4
    e3ec:	1a000104 	addi	r8,r3,4
    e3f0:	1ac00204 	addi	r11,r3,8
    e3f4:	6008913a 	slli	r4,r12,4
    e3f8:	1a800304 	addi	r10,r3,12
    e3fc:	1813883a 	mov	r9,r3
    e400:	21000504 	addi	r4,r4,20
    e404:	1909883a 	add	r4,r3,r4
    e408:	49800015 	stw	r6,0(r9)
    e40c:	41800015 	stw	r6,0(r8)
    e410:	59800015 	stw	r6,0(r11)
    e414:	51800015 	stw	r6,0(r10)
    e418:	42000404 	addi	r8,r8,16
    e41c:	4a400404 	addi	r9,r9,16
    e420:	5ac00404 	addi	r11,r11,16
    e424:	52800404 	addi	r10,r10,16
    e428:	413ff71e 	bne	r8,r4,e408 <__alt_mem_Flash_flash_data+0xf400e408>
    e42c:	63000044 	addi	r12,r12,1
    e430:	6018913a 	slli	r12,r12,4
    e434:	39c003cc 	andi	r7,r7,15
    e438:	010000c4 	movi	r4,3
    e43c:	1b07883a 	add	r3,r3,r12
    e440:	21c00e2e 	bgeu	r4,r7,e47c <memset+0x100>
    e444:	1813883a 	mov	r9,r3
    e448:	3811883a 	mov	r8,r7
    e44c:	010000c4 	movi	r4,3
    e450:	49800015 	stw	r6,0(r9)
    e454:	423fff04 	addi	r8,r8,-4
    e458:	4a400104 	addi	r9,r9,4
    e45c:	223ffc36 	bltu	r4,r8,e450 <__alt_mem_Flash_flash_data+0xf400e450>
    e460:	393fff04 	addi	r4,r7,-4
    e464:	2008d0ba 	srli	r4,r4,2
    e468:	39c000cc 	andi	r7,r7,3
    e46c:	21000044 	addi	r4,r4,1
    e470:	2109883a 	add	r4,r4,r4
    e474:	2109883a 	add	r4,r4,r4
    e478:	1907883a 	add	r3,r3,r4
    e47c:	38000426 	beq	r7,zero,e490 <memset+0x114>
    e480:	19cf883a 	add	r7,r3,r7
    e484:	19400005 	stb	r5,0(r3)
    e488:	18c00044 	addi	r3,r3,1
    e48c:	19fffd1e 	bne	r3,r7,e484 <__alt_mem_Flash_flash_data+0xf400e484>
    e490:	f800283a 	ret
    e494:	2007883a 	mov	r3,r4
    e498:	300f883a 	mov	r7,r6
    e49c:	003fc806 	br	e3c0 <__alt_mem_Flash_flash_data+0xf400e3c0>

0000e4a0 <_realloc_r>:
    e4a0:	defff604 	addi	sp,sp,-40
    e4a4:	dd000415 	stw	r20,16(sp)
    e4a8:	dc400115 	stw	r17,4(sp)
    e4ac:	dfc00915 	stw	ra,36(sp)
    e4b0:	df000815 	stw	fp,32(sp)
    e4b4:	ddc00715 	stw	r23,28(sp)
    e4b8:	dd800615 	stw	r22,24(sp)
    e4bc:	dd400515 	stw	r21,20(sp)
    e4c0:	dcc00315 	stw	r19,12(sp)
    e4c4:	dc800215 	stw	r18,8(sp)
    e4c8:	dc000015 	stw	r16,0(sp)
    e4cc:	2829883a 	mov	r20,r5
    e4d0:	3023883a 	mov	r17,r6
    e4d4:	2800ad26 	beq	r5,zero,e78c <_realloc_r+0x2ec>
    e4d8:	2025883a 	mov	r18,r4
    e4dc:	000f9800 	call	f980 <__malloc_lock>
    e4e0:	a0ffff17 	ldw	r3,-4(r20)
    e4e4:	043fff04 	movi	r16,-4
    e4e8:	890002c4 	addi	r4,r17,11
    e4ec:	01c00584 	movi	r7,22
    e4f0:	a57ffe04 	addi	r21,r20,-8
    e4f4:	1c20703a 	and	r16,r3,r16
    e4f8:	39001d2e 	bgeu	r7,r4,e570 <_realloc_r+0xd0>
    e4fc:	05bffe04 	movi	r22,-8
    e500:	25ac703a 	and	r22,r4,r22
    e504:	b00f883a 	mov	r7,r22
    e508:	b0006516 	blt	r22,zero,e6a0 <_realloc_r+0x200>
    e50c:	b4406436 	bltu	r22,r17,e6a0 <_realloc_r+0x200>
    e510:	81c01a0e 	bge	r16,r7,e57c <_realloc_r+0xdc>
    e514:	070000b4 	movhi	fp,2
    e518:	e7313404 	addi	fp,fp,-15152
    e51c:	e1400217 	ldw	r5,8(fp)
    e520:	ac11883a 	add	r8,r21,r16
    e524:	2a006226 	beq	r5,r8,e6b0 <_realloc_r+0x210>
    e528:	41800117 	ldw	r6,4(r8)
    e52c:	027fff84 	movi	r9,-2
    e530:	3252703a 	and	r9,r6,r9
    e534:	4253883a 	add	r9,r8,r9
    e538:	49000117 	ldw	r4,4(r9)
    e53c:	2100004c 	andi	r4,r4,1
    e540:	2000281e 	bne	r4,zero,e5e4 <_realloc_r+0x144>
    e544:	00bfff04 	movi	r2,-4
    e548:	3084703a 	and	r2,r6,r2
    e54c:	1409883a 	add	r4,r2,r16
    e550:	21c05e16 	blt	r4,r7,e6cc <_realloc_r+0x22c>
    e554:	40800317 	ldw	r2,12(r8)
    e558:	41400217 	ldw	r5,8(r8)
    e55c:	a023883a 	mov	r17,r20
    e560:	2021883a 	mov	r16,r4
    e564:	28800315 	stw	r2,12(r5)
    e568:	11400215 	stw	r5,8(r2)
    e56c:	00000406 	br	e580 <_realloc_r+0xe0>
    e570:	01c00404 	movi	r7,16
    e574:	382d883a 	mov	r22,r7
    e578:	003fe406 	br	e50c <__alt_mem_Flash_flash_data+0xf400e50c>
    e57c:	a023883a 	mov	r17,r20
    e580:	858fc83a 	sub	r7,r16,r22
    e584:	008003c4 	movi	r2,15
    e588:	18c0004c 	andi	r3,r3,1
    e58c:	11c07236 	bltu	r2,r7,e758 <_realloc_r+0x2b8>
    e590:	1c06b03a 	or	r3,r3,r16
    e594:	a8c00115 	stw	r3,4(r21)
    e598:	ac21883a 	add	r16,r21,r16
    e59c:	80800117 	ldw	r2,4(r16)
    e5a0:	10800054 	ori	r2,r2,1
    e5a4:	80800115 	stw	r2,4(r16)
    e5a8:	9009883a 	mov	r4,r18
    e5ac:	000faa00 	call	faa0 <__malloc_unlock>
    e5b0:	8805883a 	mov	r2,r17
    e5b4:	dfc00917 	ldw	ra,36(sp)
    e5b8:	df000817 	ldw	fp,32(sp)
    e5bc:	ddc00717 	ldw	r23,28(sp)
    e5c0:	dd800617 	ldw	r22,24(sp)
    e5c4:	dd400517 	ldw	r21,20(sp)
    e5c8:	dd000417 	ldw	r20,16(sp)
    e5cc:	dcc00317 	ldw	r19,12(sp)
    e5d0:	dc800217 	ldw	r18,8(sp)
    e5d4:	dc400117 	ldw	r17,4(sp)
    e5d8:	dc000017 	ldw	r16,0(sp)
    e5dc:	dec00a04 	addi	sp,sp,40
    e5e0:	f800283a 	ret
    e5e4:	18c0004c 	andi	r3,r3,1
    e5e8:	1800081e 	bne	r3,zero,e60c <_realloc_r+0x16c>
    e5ec:	a4fffe17 	ldw	r19,-8(r20)
    e5f0:	00bfff04 	movi	r2,-4
    e5f4:	ace7c83a 	sub	r19,r21,r19
    e5f8:	98c00117 	ldw	r3,4(r19)
    e5fc:	1886703a 	and	r3,r3,r2
    e600:	98000226 	beq	r19,zero,e60c <_realloc_r+0x16c>
    e604:	1c2f883a 	add	r23,r3,r16
    e608:	b9c06d0e 	bge	r23,r7,e7c0 <_realloc_r+0x320>
    e60c:	880b883a 	mov	r5,r17
    e610:	9009883a 	mov	r4,r18
    e614:	000b1100 	call	b110 <_malloc_r>
    e618:	1023883a 	mov	r17,r2
    e61c:	1000ef26 	beq	r2,zero,e9dc <_realloc_r+0x53c>
    e620:	a0ffff17 	ldw	r3,-4(r20)
    e624:	113ffe04 	addi	r4,r2,-8
    e628:	00bfff84 	movi	r2,-2
    e62c:	1884703a 	and	r2,r3,r2
    e630:	a885883a 	add	r2,r21,r2
    e634:	2080bf26 	beq	r4,r2,e934 <_realloc_r+0x494>
    e638:	81bfff04 	addi	r6,r16,-4
    e63c:	00800904 	movi	r2,36
    e640:	11808936 	bltu	r2,r6,e868 <_realloc_r+0x3c8>
    e644:	00c004c4 	movi	r3,19
    e648:	19806c2e 	bgeu	r3,r6,e7fc <_realloc_r+0x35c>
    e64c:	a0c00017 	ldw	r3,0(r20)
    e650:	88c00015 	stw	r3,0(r17)
    e654:	a0c00117 	ldw	r3,4(r20)
    e658:	88c00115 	stw	r3,4(r17)
    e65c:	00c006c4 	movi	r3,27
    e660:	1980ac36 	bltu	r3,r6,e914 <_realloc_r+0x474>
    e664:	88800204 	addi	r2,r17,8
    e668:	a0c00204 	addi	r3,r20,8
    e66c:	19000017 	ldw	r4,0(r3)
    e670:	11000015 	stw	r4,0(r2)
    e674:	19000117 	ldw	r4,4(r3)
    e678:	11000115 	stw	r4,4(r2)
    e67c:	18c00217 	ldw	r3,8(r3)
    e680:	10c00215 	stw	r3,8(r2)
    e684:	a00b883a 	mov	r5,r20
    e688:	9009883a 	mov	r4,r18
    e68c:	000df300 	call	df30 <_free_r>
    e690:	9009883a 	mov	r4,r18
    e694:	000faa00 	call	faa0 <__malloc_unlock>
    e698:	8805883a 	mov	r2,r17
    e69c:	003fc506 	br	e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e6a0:	00800304 	movi	r2,12
    e6a4:	90800015 	stw	r2,0(r18)
    e6a8:	0005883a 	mov	r2,zero
    e6ac:	003fc106 	br	e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e6b0:	29800117 	ldw	r6,4(r5)
    e6b4:	00bfff04 	movi	r2,-4
    e6b8:	b1000404 	addi	r4,r22,16
    e6bc:	3084703a 	and	r2,r6,r2
    e6c0:	140d883a 	add	r6,r2,r16
    e6c4:	31005b0e 	bge	r6,r4,e834 <_realloc_r+0x394>
    e6c8:	2811883a 	mov	r8,r5
    e6cc:	18c0004c 	andi	r3,r3,1
    e6d0:	183fce1e 	bne	r3,zero,e60c <__alt_mem_Flash_flash_data+0xf400e60c>
    e6d4:	a4fffe17 	ldw	r19,-8(r20)
    e6d8:	00ffff04 	movi	r3,-4
    e6dc:	ace7c83a 	sub	r19,r21,r19
    e6e0:	99000117 	ldw	r4,4(r19)
    e6e4:	20c6703a 	and	r3,r4,r3
    e6e8:	403fc526 	beq	r8,zero,e600 <__alt_mem_Flash_flash_data+0xf400e600>
    e6ec:	1c2f883a 	add	r23,r3,r16
    e6f0:	b8af883a 	add	r23,r23,r2
    e6f4:	41406026 	beq	r8,r5,e878 <_realloc_r+0x3d8>
    e6f8:	b9ffc116 	blt	r23,r7,e600 <__alt_mem_Flash_flash_data+0xf400e600>
    e6fc:	40c00217 	ldw	r3,8(r8)
    e700:	40800317 	ldw	r2,12(r8)
    e704:	81bfff04 	addi	r6,r16,-4
    e708:	01000904 	movi	r4,36
    e70c:	18800315 	stw	r2,12(r3)
    e710:	10c00215 	stw	r3,8(r2)
    e714:	99400217 	ldw	r5,8(r19)
    e718:	98c00317 	ldw	r3,12(r19)
    e71c:	9c400204 	addi	r17,r19,8
    e720:	28c00315 	stw	r3,12(r5)
    e724:	19400215 	stw	r5,8(r3)
    e728:	21802d36 	bltu	r4,r6,e7e0 <_realloc_r+0x340>
    e72c:	008004c4 	movi	r2,19
    e730:	1180352e 	bgeu	r2,r6,e808 <_realloc_r+0x368>
    e734:	a0800017 	ldw	r2,0(r20)
    e738:	98800215 	stw	r2,8(r19)
    e73c:	a0800117 	ldw	r2,4(r20)
    e740:	98800315 	stw	r2,12(r19)
    e744:	008006c4 	movi	r2,27
    e748:	11808036 	bltu	r2,r6,e94c <_realloc_r+0x4ac>
    e74c:	98c00404 	addi	r3,r19,16
    e750:	a5000204 	addi	r20,r20,8
    e754:	00002d06 	br	e80c <_realloc_r+0x36c>
    e758:	1d86b03a 	or	r3,r3,r22
    e75c:	ad8b883a 	add	r5,r21,r22
    e760:	a8c00115 	stw	r3,4(r21)
    e764:	38800054 	ori	r2,r7,1
    e768:	28800115 	stw	r2,4(r5)
    e76c:	29cf883a 	add	r7,r5,r7
    e770:	38800117 	ldw	r2,4(r7)
    e774:	9009883a 	mov	r4,r18
    e778:	29400204 	addi	r5,r5,8
    e77c:	10800054 	ori	r2,r2,1
    e780:	38800115 	stw	r2,4(r7)
    e784:	000df300 	call	df30 <_free_r>
    e788:	003f8706 	br	e5a8 <__alt_mem_Flash_flash_data+0xf400e5a8>
    e78c:	300b883a 	mov	r5,r6
    e790:	dfc00917 	ldw	ra,36(sp)
    e794:	df000817 	ldw	fp,32(sp)
    e798:	ddc00717 	ldw	r23,28(sp)
    e79c:	dd800617 	ldw	r22,24(sp)
    e7a0:	dd400517 	ldw	r21,20(sp)
    e7a4:	dd000417 	ldw	r20,16(sp)
    e7a8:	dcc00317 	ldw	r19,12(sp)
    e7ac:	dc800217 	ldw	r18,8(sp)
    e7b0:	dc400117 	ldw	r17,4(sp)
    e7b4:	dc000017 	ldw	r16,0(sp)
    e7b8:	dec00a04 	addi	sp,sp,40
    e7bc:	000b1101 	jmpi	b110 <_malloc_r>
    e7c0:	98800317 	ldw	r2,12(r19)
    e7c4:	98c00217 	ldw	r3,8(r19)
    e7c8:	81bfff04 	addi	r6,r16,-4
    e7cc:	01000904 	movi	r4,36
    e7d0:	18800315 	stw	r2,12(r3)
    e7d4:	10c00215 	stw	r3,8(r2)
    e7d8:	9c400204 	addi	r17,r19,8
    e7dc:	21bfd32e 	bgeu	r4,r6,e72c <__alt_mem_Flash_flash_data+0xf400e72c>
    e7e0:	8809883a 	mov	r4,r17
    e7e4:	a00b883a 	mov	r5,r20
    e7e8:	000e2200 	call	e220 <memmove>
    e7ec:	98c00117 	ldw	r3,4(r19)
    e7f0:	b821883a 	mov	r16,r23
    e7f4:	982b883a 	mov	r21,r19
    e7f8:	003f6106 	br	e580 <__alt_mem_Flash_flash_data+0xf400e580>
    e7fc:	8805883a 	mov	r2,r17
    e800:	a007883a 	mov	r3,r20
    e804:	003f9906 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    e808:	8807883a 	mov	r3,r17
    e80c:	a0800017 	ldw	r2,0(r20)
    e810:	b821883a 	mov	r16,r23
    e814:	982b883a 	mov	r21,r19
    e818:	18800015 	stw	r2,0(r3)
    e81c:	a0800117 	ldw	r2,4(r20)
    e820:	18800115 	stw	r2,4(r3)
    e824:	a0800217 	ldw	r2,8(r20)
    e828:	18800215 	stw	r2,8(r3)
    e82c:	98c00117 	ldw	r3,4(r19)
    e830:	003f5306 	br	e580 <__alt_mem_Flash_flash_data+0xf400e580>
    e834:	adab883a 	add	r21,r21,r22
    e838:	3585c83a 	sub	r2,r6,r22
    e83c:	e5400215 	stw	r21,8(fp)
    e840:	10800054 	ori	r2,r2,1
    e844:	a8800115 	stw	r2,4(r21)
    e848:	a0bfff17 	ldw	r2,-4(r20)
    e84c:	9009883a 	mov	r4,r18
    e850:	1080004c 	andi	r2,r2,1
    e854:	b0acb03a 	or	r22,r22,r2
    e858:	a5bfff15 	stw	r22,-4(r20)
    e85c:	000faa00 	call	faa0 <__malloc_unlock>
    e860:	a005883a 	mov	r2,r20
    e864:	003f5306 	br	e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e868:	8809883a 	mov	r4,r17
    e86c:	a00b883a 	mov	r5,r20
    e870:	000e2200 	call	e220 <memmove>
    e874:	003f8306 	br	e684 <__alt_mem_Flash_flash_data+0xf400e684>
    e878:	b0800404 	addi	r2,r22,16
    e87c:	b8bf6016 	blt	r23,r2,e600 <__alt_mem_Flash_flash_data+0xf400e600>
    e880:	98800317 	ldw	r2,12(r19)
    e884:	98c00217 	ldw	r3,8(r19)
    e888:	81bfff04 	addi	r6,r16,-4
    e88c:	01000904 	movi	r4,36
    e890:	18800315 	stw	r2,12(r3)
    e894:	10c00215 	stw	r3,8(r2)
    e898:	9c400204 	addi	r17,r19,8
    e89c:	21804336 	bltu	r4,r6,e9ac <_realloc_r+0x50c>
    e8a0:	008004c4 	movi	r2,19
    e8a4:	11803f2e 	bgeu	r2,r6,e9a4 <_realloc_r+0x504>
    e8a8:	a0800017 	ldw	r2,0(r20)
    e8ac:	98800215 	stw	r2,8(r19)
    e8b0:	a0800117 	ldw	r2,4(r20)
    e8b4:	98800315 	stw	r2,12(r19)
    e8b8:	008006c4 	movi	r2,27
    e8bc:	11803f36 	bltu	r2,r6,e9bc <_realloc_r+0x51c>
    e8c0:	98800404 	addi	r2,r19,16
    e8c4:	a5000204 	addi	r20,r20,8
    e8c8:	a0c00017 	ldw	r3,0(r20)
    e8cc:	10c00015 	stw	r3,0(r2)
    e8d0:	a0c00117 	ldw	r3,4(r20)
    e8d4:	10c00115 	stw	r3,4(r2)
    e8d8:	a0c00217 	ldw	r3,8(r20)
    e8dc:	10c00215 	stw	r3,8(r2)
    e8e0:	9d87883a 	add	r3,r19,r22
    e8e4:	bd85c83a 	sub	r2,r23,r22
    e8e8:	e0c00215 	stw	r3,8(fp)
    e8ec:	10800054 	ori	r2,r2,1
    e8f0:	18800115 	stw	r2,4(r3)
    e8f4:	98800117 	ldw	r2,4(r19)
    e8f8:	9009883a 	mov	r4,r18
    e8fc:	1080004c 	andi	r2,r2,1
    e900:	b0acb03a 	or	r22,r22,r2
    e904:	9d800115 	stw	r22,4(r19)
    e908:	000faa00 	call	faa0 <__malloc_unlock>
    e90c:	8805883a 	mov	r2,r17
    e910:	003f2806 	br	e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e914:	a0c00217 	ldw	r3,8(r20)
    e918:	88c00215 	stw	r3,8(r17)
    e91c:	a0c00317 	ldw	r3,12(r20)
    e920:	88c00315 	stw	r3,12(r17)
    e924:	30801126 	beq	r6,r2,e96c <_realloc_r+0x4cc>
    e928:	88800404 	addi	r2,r17,16
    e92c:	a0c00404 	addi	r3,r20,16
    e930:	003f4e06 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    e934:	893fff17 	ldw	r4,-4(r17)
    e938:	00bfff04 	movi	r2,-4
    e93c:	a023883a 	mov	r17,r20
    e940:	2084703a 	and	r2,r4,r2
    e944:	80a1883a 	add	r16,r16,r2
    e948:	003f0d06 	br	e580 <__alt_mem_Flash_flash_data+0xf400e580>
    e94c:	a0800217 	ldw	r2,8(r20)
    e950:	98800415 	stw	r2,16(r19)
    e954:	a0800317 	ldw	r2,12(r20)
    e958:	98800515 	stw	r2,20(r19)
    e95c:	31000a26 	beq	r6,r4,e988 <_realloc_r+0x4e8>
    e960:	98c00604 	addi	r3,r19,24
    e964:	a5000404 	addi	r20,r20,16
    e968:	003fa806 	br	e80c <__alt_mem_Flash_flash_data+0xf400e80c>
    e96c:	a1000417 	ldw	r4,16(r20)
    e970:	88800604 	addi	r2,r17,24
    e974:	a0c00604 	addi	r3,r20,24
    e978:	89000415 	stw	r4,16(r17)
    e97c:	a1000517 	ldw	r4,20(r20)
    e980:	89000515 	stw	r4,20(r17)
    e984:	003f3906 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    e988:	a0800417 	ldw	r2,16(r20)
    e98c:	a5000604 	addi	r20,r20,24
    e990:	98c00804 	addi	r3,r19,32
    e994:	98800615 	stw	r2,24(r19)
    e998:	a0bfff17 	ldw	r2,-4(r20)
    e99c:	98800715 	stw	r2,28(r19)
    e9a0:	003f9a06 	br	e80c <__alt_mem_Flash_flash_data+0xf400e80c>
    e9a4:	8805883a 	mov	r2,r17
    e9a8:	003fc706 	br	e8c8 <__alt_mem_Flash_flash_data+0xf400e8c8>
    e9ac:	8809883a 	mov	r4,r17
    e9b0:	a00b883a 	mov	r5,r20
    e9b4:	000e2200 	call	e220 <memmove>
    e9b8:	003fc906 	br	e8e0 <__alt_mem_Flash_flash_data+0xf400e8e0>
    e9bc:	a0800217 	ldw	r2,8(r20)
    e9c0:	98800415 	stw	r2,16(r19)
    e9c4:	a0800317 	ldw	r2,12(r20)
    e9c8:	98800515 	stw	r2,20(r19)
    e9cc:	31000726 	beq	r6,r4,e9ec <_realloc_r+0x54c>
    e9d0:	98800604 	addi	r2,r19,24
    e9d4:	a5000404 	addi	r20,r20,16
    e9d8:	003fbb06 	br	e8c8 <__alt_mem_Flash_flash_data+0xf400e8c8>
    e9dc:	9009883a 	mov	r4,r18
    e9e0:	000faa00 	call	faa0 <__malloc_unlock>
    e9e4:	0005883a 	mov	r2,zero
    e9e8:	003ef206 	br	e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e9ec:	a0c00417 	ldw	r3,16(r20)
    e9f0:	a5000604 	addi	r20,r20,24
    e9f4:	98800804 	addi	r2,r19,32
    e9f8:	98c00615 	stw	r3,24(r19)
    e9fc:	a0ffff17 	ldw	r3,-4(r20)
    ea00:	98c00715 	stw	r3,28(r19)
    ea04:	003fb006 	br	e8c8 <__alt_mem_Flash_flash_data+0xf400e8c8>

0000ea08 <__udivdi3>:
    ea08:	defff504 	addi	sp,sp,-44
    ea0c:	dcc00415 	stw	r19,16(sp)
    ea10:	dc000115 	stw	r16,4(sp)
    ea14:	dfc00a15 	stw	ra,40(sp)
    ea18:	df000915 	stw	fp,36(sp)
    ea1c:	ddc00815 	stw	r23,32(sp)
    ea20:	dd800715 	stw	r22,28(sp)
    ea24:	dd400615 	stw	r21,24(sp)
    ea28:	dd000515 	stw	r20,20(sp)
    ea2c:	dc800315 	stw	r18,12(sp)
    ea30:	dc400215 	stw	r17,8(sp)
    ea34:	2027883a 	mov	r19,r4
    ea38:	2821883a 	mov	r16,r5
    ea3c:	3800421e 	bne	r7,zero,eb48 <__udivdi3+0x140>
    ea40:	3025883a 	mov	r18,r6
    ea44:	2023883a 	mov	r17,r4
    ea48:	2980542e 	bgeu	r5,r6,eb9c <__udivdi3+0x194>
    ea4c:	00bfffd4 	movui	r2,65535
    ea50:	282d883a 	mov	r22,r5
    ea54:	1180a836 	bltu	r2,r6,ecf8 <__udivdi3+0x2f0>
    ea58:	00803fc4 	movi	r2,255
    ea5c:	1181422e 	bgeu	r2,r6,ef68 <__udivdi3+0x560>
    ea60:	00800204 	movi	r2,8
    ea64:	1007883a 	mov	r3,r2
    ea68:	3084d83a 	srl	r2,r6,r2
    ea6c:	010000b4 	movhi	r4,2
    ea70:	212ea004 	addi	r4,r4,-17792
    ea74:	2085883a 	add	r2,r4,r2
    ea78:	10800003 	ldbu	r2,0(r2)
    ea7c:	10c7883a 	add	r3,r2,r3
    ea80:	00800804 	movi	r2,32
    ea84:	10c5c83a 	sub	r2,r2,r3
    ea88:	10000526 	beq	r2,zero,eaa0 <__udivdi3+0x98>
    ea8c:	80a0983a 	sll	r16,r16,r2
    ea90:	98c6d83a 	srl	r3,r19,r3
    ea94:	30a4983a 	sll	r18,r6,r2
    ea98:	98a2983a 	sll	r17,r19,r2
    ea9c:	80ecb03a 	or	r22,r16,r3
    eaa0:	902ad43a 	srli	r21,r18,16
    eaa4:	b009883a 	mov	r4,r22
    eaa8:	953fffcc 	andi	r20,r18,65535
    eaac:	a80b883a 	mov	r5,r21
    eab0:	0004dd40 	call	4dd4 <__umodsi3>
    eab4:	b009883a 	mov	r4,r22
    eab8:	a80b883a 	mov	r5,r21
    eabc:	1027883a 	mov	r19,r2
    eac0:	0004dcc0 	call	4dcc <__udivsi3>
    eac4:	1021883a 	mov	r16,r2
    eac8:	8806d43a 	srli	r3,r17,16
    eacc:	9804943a 	slli	r2,r19,16
    ead0:	8527383a 	mul	r19,r16,r20
    ead4:	10c4b03a 	or	r2,r2,r3
    ead8:	14c0052e 	bgeu	r2,r19,eaf0 <__udivdi3+0xe8>
    eadc:	1485883a 	add	r2,r2,r18
    eae0:	80ffffc4 	addi	r3,r16,-1
    eae4:	14800136 	bltu	r2,r18,eaec <__udivdi3+0xe4>
    eae8:	14c13436 	bltu	r2,r19,efbc <__udivdi3+0x5b4>
    eaec:	1821883a 	mov	r16,r3
    eaf0:	14e7c83a 	sub	r19,r2,r19
    eaf4:	9809883a 	mov	r4,r19
    eaf8:	a80b883a 	mov	r5,r21
    eafc:	0004dd40 	call	4dd4 <__umodsi3>
    eb00:	102d883a 	mov	r22,r2
    eb04:	9809883a 	mov	r4,r19
    eb08:	a80b883a 	mov	r5,r21
    eb0c:	0004dcc0 	call	4dcc <__udivsi3>
    eb10:	b02c943a 	slli	r22,r22,16
    eb14:	1529383a 	mul	r20,r2,r20
    eb18:	8c7fffcc 	andi	r17,r17,65535
    eb1c:	b462b03a 	or	r17,r22,r17
    eb20:	8d00052e 	bgeu	r17,r20,eb38 <__udivdi3+0x130>
    eb24:	8ca3883a 	add	r17,r17,r18
    eb28:	10ffffc4 	addi	r3,r2,-1
    eb2c:	8c80f636 	bltu	r17,r18,ef08 <__udivdi3+0x500>
    eb30:	8d00f52e 	bgeu	r17,r20,ef08 <__udivdi3+0x500>
    eb34:	10bfff84 	addi	r2,r2,-2
    eb38:	8020943a 	slli	r16,r16,16
    eb3c:	0007883a 	mov	r3,zero
    eb40:	1404b03a 	or	r2,r2,r16
    eb44:	00005b06 	br	ecb4 <__udivdi3+0x2ac>
    eb48:	29c05836 	bltu	r5,r7,ecac <__udivdi3+0x2a4>
    eb4c:	00bfffd4 	movui	r2,65535
    eb50:	11c0642e 	bgeu	r2,r7,ece4 <__udivdi3+0x2dc>
    eb54:	00804034 	movhi	r2,256
    eb58:	10bfffc4 	addi	r2,r2,-1
    eb5c:	11c0f32e 	bgeu	r2,r7,ef2c <__udivdi3+0x524>
    eb60:	00c00604 	movi	r3,24
    eb64:	180b883a 	mov	r5,r3
    eb68:	38c6d83a 	srl	r3,r7,r3
    eb6c:	008000b4 	movhi	r2,2
    eb70:	10aea004 	addi	r2,r2,-17792
    eb74:	10c7883a 	add	r3,r2,r3
    eb78:	18c00003 	ldbu	r3,0(r3)
    eb7c:	01000804 	movi	r4,32
    eb80:	1947883a 	add	r3,r3,r5
    eb84:	20e5c83a 	sub	r18,r4,r3
    eb88:	9000661e 	bne	r18,zero,ed24 <__udivdi3+0x31c>
    eb8c:	3c00f936 	bltu	r7,r16,ef74 <__udivdi3+0x56c>
    eb90:	9985403a 	cmpgeu	r2,r19,r6
    eb94:	0007883a 	mov	r3,zero
    eb98:	00004606 	br	ecb4 <__udivdi3+0x2ac>
    eb9c:	3000041e 	bne	r6,zero,ebb0 <__udivdi3+0x1a8>
    eba0:	01000044 	movi	r4,1
    eba4:	000b883a 	mov	r5,zero
    eba8:	0004dcc0 	call	4dcc <__udivsi3>
    ebac:	1025883a 	mov	r18,r2
    ebb0:	00bfffd4 	movui	r2,65535
    ebb4:	1480562e 	bgeu	r2,r18,ed10 <__udivdi3+0x308>
    ebb8:	00804034 	movhi	r2,256
    ebbc:	10bfffc4 	addi	r2,r2,-1
    ebc0:	1480e32e 	bgeu	r2,r18,ef50 <__udivdi3+0x548>
    ebc4:	00800604 	movi	r2,24
    ebc8:	1007883a 	mov	r3,r2
    ebcc:	9084d83a 	srl	r2,r18,r2
    ebd0:	010000b4 	movhi	r4,2
    ebd4:	212ea004 	addi	r4,r4,-17792
    ebd8:	2085883a 	add	r2,r4,r2
    ebdc:	10800003 	ldbu	r2,0(r2)
    ebe0:	10c5883a 	add	r2,r2,r3
    ebe4:	00c00804 	movi	r3,32
    ebe8:	1887c83a 	sub	r3,r3,r2
    ebec:	1800911e 	bne	r3,zero,ee34 <__udivdi3+0x42c>
    ebf0:	9028d43a 	srli	r20,r18,16
    ebf4:	84a1c83a 	sub	r16,r16,r18
    ebf8:	957fffcc 	andi	r21,r18,65535
    ebfc:	00c00044 	movi	r3,1
    ec00:	8009883a 	mov	r4,r16
    ec04:	a00b883a 	mov	r5,r20
    ec08:	d8c00015 	stw	r3,0(sp)
    ec0c:	0004dd40 	call	4dd4 <__umodsi3>
    ec10:	8009883a 	mov	r4,r16
    ec14:	a00b883a 	mov	r5,r20
    ec18:	1027883a 	mov	r19,r2
    ec1c:	0004dcc0 	call	4dcc <__udivsi3>
    ec20:	1021883a 	mov	r16,r2
    ec24:	880cd43a 	srli	r6,r17,16
    ec28:	9804943a 	slli	r2,r19,16
    ec2c:	8567383a 	mul	r19,r16,r21
    ec30:	d8c00017 	ldw	r3,0(sp)
    ec34:	1188b03a 	or	r4,r2,r6
    ec38:	24c0052e 	bgeu	r4,r19,ec50 <__udivdi3+0x248>
    ec3c:	2489883a 	add	r4,r4,r18
    ec40:	80bfffc4 	addi	r2,r16,-1
    ec44:	24800136 	bltu	r4,r18,ec4c <__udivdi3+0x244>
    ec48:	24c0d936 	bltu	r4,r19,efb0 <__udivdi3+0x5a8>
    ec4c:	1021883a 	mov	r16,r2
    ec50:	24e7c83a 	sub	r19,r4,r19
    ec54:	9809883a 	mov	r4,r19
    ec58:	a00b883a 	mov	r5,r20
    ec5c:	d8c00015 	stw	r3,0(sp)
    ec60:	0004dd40 	call	4dd4 <__umodsi3>
    ec64:	102d883a 	mov	r22,r2
    ec68:	9809883a 	mov	r4,r19
    ec6c:	a00b883a 	mov	r5,r20
    ec70:	0004dcc0 	call	4dcc <__udivsi3>
    ec74:	b02c943a 	slli	r22,r22,16
    ec78:	156b383a 	mul	r21,r2,r21
    ec7c:	8c7fffcc 	andi	r17,r17,65535
    ec80:	b462b03a 	or	r17,r22,r17
    ec84:	d8c00017 	ldw	r3,0(sp)
    ec88:	8d40052e 	bgeu	r17,r21,eca0 <__udivdi3+0x298>
    ec8c:	8ca3883a 	add	r17,r17,r18
    ec90:	113fffc4 	addi	r4,r2,-1
    ec94:	8c809a36 	bltu	r17,r18,ef00 <__udivdi3+0x4f8>
    ec98:	8d40992e 	bgeu	r17,r21,ef00 <__udivdi3+0x4f8>
    ec9c:	10bfff84 	addi	r2,r2,-2
    eca0:	8020943a 	slli	r16,r16,16
    eca4:	1404b03a 	or	r2,r2,r16
    eca8:	00000206 	br	ecb4 <__udivdi3+0x2ac>
    ecac:	0007883a 	mov	r3,zero
    ecb0:	0005883a 	mov	r2,zero
    ecb4:	dfc00a17 	ldw	ra,40(sp)
    ecb8:	df000917 	ldw	fp,36(sp)
    ecbc:	ddc00817 	ldw	r23,32(sp)
    ecc0:	dd800717 	ldw	r22,28(sp)
    ecc4:	dd400617 	ldw	r21,24(sp)
    ecc8:	dd000517 	ldw	r20,20(sp)
    eccc:	dcc00417 	ldw	r19,16(sp)
    ecd0:	dc800317 	ldw	r18,12(sp)
    ecd4:	dc400217 	ldw	r17,8(sp)
    ecd8:	dc000117 	ldw	r16,4(sp)
    ecdc:	dec00b04 	addi	sp,sp,44
    ece0:	f800283a 	ret
    ece4:	00803fc4 	movi	r2,255
    ece8:	11c0932e 	bgeu	r2,r7,ef38 <__udivdi3+0x530>
    ecec:	00c00204 	movi	r3,8
    ecf0:	180b883a 	mov	r5,r3
    ecf4:	003f9c06 	br	eb68 <__alt_mem_Flash_flash_data+0xf400eb68>
    ecf8:	00804034 	movhi	r2,256
    ecfc:	10bfffc4 	addi	r2,r2,-1
    ed00:	1180902e 	bgeu	r2,r6,ef44 <__udivdi3+0x53c>
    ed04:	00800604 	movi	r2,24
    ed08:	1007883a 	mov	r3,r2
    ed0c:	003f5606 	br	ea68 <__alt_mem_Flash_flash_data+0xf400ea68>
    ed10:	00803fc4 	movi	r2,255
    ed14:	1480912e 	bgeu	r2,r18,ef5c <__udivdi3+0x554>
    ed18:	00800204 	movi	r2,8
    ed1c:	1007883a 	mov	r3,r2
    ed20:	003faa06 	br	ebcc <__alt_mem_Flash_flash_data+0xf400ebcc>
    ed24:	30eed83a 	srl	r23,r6,r3
    ed28:	3c8e983a 	sll	r7,r7,r18
    ed2c:	80f8d83a 	srl	fp,r16,r3
    ed30:	98c6d83a 	srl	r3,r19,r3
    ed34:	3deeb03a 	or	r23,r7,r23
    ed38:	b828d43a 	srli	r20,r23,16
    ed3c:	84a0983a 	sll	r16,r16,r18
    ed40:	e009883a 	mov	r4,fp
    ed44:	a00b883a 	mov	r5,r20
    ed48:	80e2b03a 	or	r17,r16,r3
    ed4c:	34aa983a 	sll	r21,r6,r18
    ed50:	0004dd40 	call	4dd4 <__umodsi3>
    ed54:	e009883a 	mov	r4,fp
    ed58:	a00b883a 	mov	r5,r20
    ed5c:	102d883a 	mov	r22,r2
    ed60:	0004dcc0 	call	4dcc <__udivsi3>
    ed64:	1021883a 	mov	r16,r2
    ed68:	bf3fffcc 	andi	fp,r23,65535
    ed6c:	b004943a 	slli	r2,r22,16
    ed70:	8808d43a 	srli	r4,r17,16
    ed74:	872d383a 	mul	r22,r16,fp
    ed78:	1104b03a 	or	r2,r2,r4
    ed7c:	1580042e 	bgeu	r2,r22,ed90 <__udivdi3+0x388>
    ed80:	15c5883a 	add	r2,r2,r23
    ed84:	80ffffc4 	addi	r3,r16,-1
    ed88:	15c0812e 	bgeu	r2,r23,ef90 <__udivdi3+0x588>
    ed8c:	1821883a 	mov	r16,r3
    ed90:	15adc83a 	sub	r22,r2,r22
    ed94:	b009883a 	mov	r4,r22
    ed98:	a00b883a 	mov	r5,r20
    ed9c:	0004dd40 	call	4dd4 <__umodsi3>
    eda0:	a00b883a 	mov	r5,r20
    eda4:	b009883a 	mov	r4,r22
    eda8:	d8800015 	stw	r2,0(sp)
    edac:	0004dcc0 	call	4dcc <__udivsi3>
    edb0:	d8c00017 	ldw	r3,0(sp)
    edb4:	170b383a 	mul	r5,r2,fp
    edb8:	8c7fffcc 	andi	r17,r17,65535
    edbc:	1806943a 	slli	r3,r3,16
    edc0:	1c46b03a 	or	r3,r3,r17
    edc4:	1940042e 	bgeu	r3,r5,edd8 <__udivdi3+0x3d0>
    edc8:	1dc7883a 	add	r3,r3,r23
    edcc:	113fffc4 	addi	r4,r2,-1
    edd0:	1dc06b2e 	bgeu	r3,r23,ef80 <__udivdi3+0x578>
    edd4:	2005883a 	mov	r2,r4
    edd8:	8020943a 	slli	r16,r16,16
    eddc:	a9ffffcc 	andi	r7,r21,65535
    ede0:	a82ad43a 	srli	r21,r21,16
    ede4:	1404b03a 	or	r2,r2,r16
    ede8:	113fffcc 	andi	r4,r2,65535
    edec:	100cd43a 	srli	r6,r2,16
    edf0:	21d3383a 	mul	r9,r4,r7
    edf4:	2549383a 	mul	r4,r4,r21
    edf8:	31cf383a 	mul	r7,r6,r7
    edfc:	4810d43a 	srli	r8,r9,16
    ee00:	1947c83a 	sub	r3,r3,r5
    ee04:	3909883a 	add	r4,r7,r4
    ee08:	2209883a 	add	r4,r4,r8
    ee0c:	354d383a 	mul	r6,r6,r21
    ee10:	21c0022e 	bgeu	r4,r7,ee1c <__udivdi3+0x414>
    ee14:	01400074 	movhi	r5,1
    ee18:	314d883a 	add	r6,r6,r5
    ee1c:	202ad43a 	srli	r21,r4,16
    ee20:	354d883a 	add	r6,r6,r21
    ee24:	19803f36 	bltu	r3,r6,ef24 <__udivdi3+0x51c>
    ee28:	19803926 	beq	r3,r6,ef10 <__udivdi3+0x508>
    ee2c:	0007883a 	mov	r3,zero
    ee30:	003fa006 	br	ecb4 <__alt_mem_Flash_flash_data+0xf400ecb4>
    ee34:	90e4983a 	sll	r18,r18,r3
    ee38:	80aad83a 	srl	r21,r16,r2
    ee3c:	80e0983a 	sll	r16,r16,r3
    ee40:	9028d43a 	srli	r20,r18,16
    ee44:	9884d83a 	srl	r2,r19,r2
    ee48:	a809883a 	mov	r4,r21
    ee4c:	a00b883a 	mov	r5,r20
    ee50:	80acb03a 	or	r22,r16,r2
    ee54:	98e2983a 	sll	r17,r19,r3
    ee58:	0004dd40 	call	4dd4 <__umodsi3>
    ee5c:	a809883a 	mov	r4,r21
    ee60:	a00b883a 	mov	r5,r20
    ee64:	1021883a 	mov	r16,r2
    ee68:	0004dcc0 	call	4dcc <__udivsi3>
    ee6c:	957fffcc 	andi	r21,r18,65535
    ee70:	8020943a 	slli	r16,r16,16
    ee74:	b00ad43a 	srli	r5,r22,16
    ee78:	1567383a 	mul	r19,r2,r21
    ee7c:	102f883a 	mov	r23,r2
    ee80:	8148b03a 	or	r4,r16,r5
    ee84:	24c0062e 	bgeu	r4,r19,eea0 <__udivdi3+0x498>
    ee88:	2489883a 	add	r4,r4,r18
    ee8c:	10bfffc4 	addi	r2,r2,-1
    ee90:	24804536 	bltu	r4,r18,efa8 <__udivdi3+0x5a0>
    ee94:	24c0442e 	bgeu	r4,r19,efa8 <__udivdi3+0x5a0>
    ee98:	bdffff84 	addi	r23,r23,-2
    ee9c:	2489883a 	add	r4,r4,r18
    eea0:	24e7c83a 	sub	r19,r4,r19
    eea4:	9809883a 	mov	r4,r19
    eea8:	a00b883a 	mov	r5,r20
    eeac:	0004dd40 	call	4dd4 <__umodsi3>
    eeb0:	1021883a 	mov	r16,r2
    eeb4:	9809883a 	mov	r4,r19
    eeb8:	a00b883a 	mov	r5,r20
    eebc:	0004dcc0 	call	4dcc <__udivsi3>
    eec0:	8020943a 	slli	r16,r16,16
    eec4:	1007883a 	mov	r3,r2
    eec8:	1545383a 	mul	r2,r2,r21
    eecc:	b13fffcc 	andi	r4,r22,65535
    eed0:	8108b03a 	or	r4,r16,r4
    eed4:	2080062e 	bgeu	r4,r2,eef0 <__udivdi3+0x4e8>
    eed8:	2489883a 	add	r4,r4,r18
    eedc:	197fffc4 	addi	r5,r3,-1
    eee0:	24802f36 	bltu	r4,r18,efa0 <__udivdi3+0x598>
    eee4:	20802e2e 	bgeu	r4,r2,efa0 <__udivdi3+0x598>
    eee8:	18ffff84 	addi	r3,r3,-2
    eeec:	2489883a 	add	r4,r4,r18
    eef0:	b82e943a 	slli	r23,r23,16
    eef4:	20a1c83a 	sub	r16,r4,r2
    eef8:	1dc6b03a 	or	r3,r3,r23
    eefc:	003f4006 	br	ec00 <__alt_mem_Flash_flash_data+0xf400ec00>
    ef00:	2005883a 	mov	r2,r4
    ef04:	003f6606 	br	eca0 <__alt_mem_Flash_flash_data+0xf400eca0>
    ef08:	1805883a 	mov	r2,r3
    ef0c:	003f0a06 	br	eb38 <__alt_mem_Flash_flash_data+0xf400eb38>
    ef10:	2006943a 	slli	r3,r4,16
    ef14:	9c88983a 	sll	r4,r19,r18
    ef18:	4a7fffcc 	andi	r9,r9,65535
    ef1c:	1a47883a 	add	r3,r3,r9
    ef20:	20ffc22e 	bgeu	r4,r3,ee2c <__alt_mem_Flash_flash_data+0xf400ee2c>
    ef24:	10bfffc4 	addi	r2,r2,-1
    ef28:	003fc006 	br	ee2c <__alt_mem_Flash_flash_data+0xf400ee2c>
    ef2c:	00c00404 	movi	r3,16
    ef30:	180b883a 	mov	r5,r3
    ef34:	003f0c06 	br	eb68 <__alt_mem_Flash_flash_data+0xf400eb68>
    ef38:	0007883a 	mov	r3,zero
    ef3c:	000b883a 	mov	r5,zero
    ef40:	003f0906 	br	eb68 <__alt_mem_Flash_flash_data+0xf400eb68>
    ef44:	00800404 	movi	r2,16
    ef48:	1007883a 	mov	r3,r2
    ef4c:	003ec606 	br	ea68 <__alt_mem_Flash_flash_data+0xf400ea68>
    ef50:	00800404 	movi	r2,16
    ef54:	1007883a 	mov	r3,r2
    ef58:	003f1c06 	br	ebcc <__alt_mem_Flash_flash_data+0xf400ebcc>
    ef5c:	0005883a 	mov	r2,zero
    ef60:	0007883a 	mov	r3,zero
    ef64:	003f1906 	br	ebcc <__alt_mem_Flash_flash_data+0xf400ebcc>
    ef68:	0005883a 	mov	r2,zero
    ef6c:	0007883a 	mov	r3,zero
    ef70:	003ebd06 	br	ea68 <__alt_mem_Flash_flash_data+0xf400ea68>
    ef74:	0007883a 	mov	r3,zero
    ef78:	00800044 	movi	r2,1
    ef7c:	003f4d06 	br	ecb4 <__alt_mem_Flash_flash_data+0xf400ecb4>
    ef80:	197f942e 	bgeu	r3,r5,edd4 <__alt_mem_Flash_flash_data+0xf400edd4>
    ef84:	10bfff84 	addi	r2,r2,-2
    ef88:	1dc7883a 	add	r3,r3,r23
    ef8c:	003f9206 	br	edd8 <__alt_mem_Flash_flash_data+0xf400edd8>
    ef90:	15bf7e2e 	bgeu	r2,r22,ed8c <__alt_mem_Flash_flash_data+0xf400ed8c>
    ef94:	843fff84 	addi	r16,r16,-2
    ef98:	15c5883a 	add	r2,r2,r23
    ef9c:	003f7c06 	br	ed90 <__alt_mem_Flash_flash_data+0xf400ed90>
    efa0:	2807883a 	mov	r3,r5
    efa4:	003fd206 	br	eef0 <__alt_mem_Flash_flash_data+0xf400eef0>
    efa8:	102f883a 	mov	r23,r2
    efac:	003fbc06 	br	eea0 <__alt_mem_Flash_flash_data+0xf400eea0>
    efb0:	843fff84 	addi	r16,r16,-2
    efb4:	2489883a 	add	r4,r4,r18
    efb8:	003f2506 	br	ec50 <__alt_mem_Flash_flash_data+0xf400ec50>
    efbc:	843fff84 	addi	r16,r16,-2
    efc0:	1485883a 	add	r2,r2,r18
    efc4:	003eca06 	br	eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>

0000efc8 <__umoddi3>:
    efc8:	defff404 	addi	sp,sp,-48
    efcc:	ddc00915 	stw	r23,36(sp)
    efd0:	dc400315 	stw	r17,12(sp)
    efd4:	dc000215 	stw	r16,8(sp)
    efd8:	dfc00b15 	stw	ra,44(sp)
    efdc:	df000a15 	stw	fp,40(sp)
    efe0:	dd800815 	stw	r22,32(sp)
    efe4:	dd400715 	stw	r21,28(sp)
    efe8:	dd000615 	stw	r20,24(sp)
    efec:	dcc00515 	stw	r19,20(sp)
    eff0:	dc800415 	stw	r18,16(sp)
    eff4:	2021883a 	mov	r16,r4
    eff8:	2823883a 	mov	r17,r5
    effc:	282f883a 	mov	r23,r5
    f000:	3800381e 	bne	r7,zero,f0e4 <__umoddi3+0x11c>
    f004:	3027883a 	mov	r19,r6
    f008:	2029883a 	mov	r20,r4
    f00c:	29804e2e 	bgeu	r5,r6,f148 <__umoddi3+0x180>
    f010:	00bfffd4 	movui	r2,65535
    f014:	11809c36 	bltu	r2,r6,f288 <__umoddi3+0x2c0>
    f018:	00803fc4 	movi	r2,255
    f01c:	11813b2e 	bgeu	r2,r6,f50c <__umoddi3+0x544>
    f020:	01400204 	movi	r5,8
    f024:	2805883a 	mov	r2,r5
    f028:	314ad83a 	srl	r5,r6,r5
    f02c:	00c000b4 	movhi	r3,2
    f030:	18eea004 	addi	r3,r3,-17792
    f034:	194b883a 	add	r5,r3,r5
    f038:	29000003 	ldbu	r4,0(r5)
    f03c:	2089883a 	add	r4,r4,r2
    f040:	00800804 	movi	r2,32
    f044:	1105c83a 	sub	r2,r2,r4
    f048:	1000ec26 	beq	r2,zero,f3fc <__umoddi3+0x434>
    f04c:	88a2983a 	sll	r17,r17,r2
    f050:	8108d83a 	srl	r4,r16,r4
    f054:	30a6983a 	sll	r19,r6,r2
    f058:	80a8983a 	sll	r20,r16,r2
    f05c:	1025883a 	mov	r18,r2
    f060:	892eb03a 	or	r23,r17,r4
    f064:	982cd43a 	srli	r22,r19,16
    f068:	b809883a 	mov	r4,r23
    f06c:	9d7fffcc 	andi	r21,r19,65535
    f070:	b00b883a 	mov	r5,r22
    f074:	0004dd40 	call	4dd4 <__umodsi3>
    f078:	b809883a 	mov	r4,r23
    f07c:	b00b883a 	mov	r5,r22
    f080:	1021883a 	mov	r16,r2
    f084:	0004dcc0 	call	4dcc <__udivsi3>
    f088:	8020943a 	slli	r16,r16,16
    f08c:	a00cd43a 	srli	r6,r20,16
    f090:	1545383a 	mul	r2,r2,r21
    f094:	8188b03a 	or	r4,r16,r6
    f098:	2080042e 	bgeu	r4,r2,f0ac <__umoddi3+0xe4>
    f09c:	24c9883a 	add	r4,r4,r19
    f0a0:	24c00236 	bltu	r4,r19,f0ac <__umoddi3+0xe4>
    f0a4:	2080012e 	bgeu	r4,r2,f0ac <__umoddi3+0xe4>
    f0a8:	24c9883a 	add	r4,r4,r19
    f0ac:	20a3c83a 	sub	r17,r4,r2
    f0b0:	8809883a 	mov	r4,r17
    f0b4:	b00b883a 	mov	r5,r22
    f0b8:	0004dd40 	call	4dd4 <__umodsi3>
    f0bc:	8809883a 	mov	r4,r17
    f0c0:	b00b883a 	mov	r5,r22
    f0c4:	1021883a 	mov	r16,r2
    f0c8:	0004dcc0 	call	4dcc <__udivsi3>
    f0cc:	8006943a 	slli	r3,r16,16
    f0d0:	1545383a 	mul	r2,r2,r21
    f0d4:	a13fffcc 	andi	r4,r20,65535
    f0d8:	1906b03a 	or	r3,r3,r4
    f0dc:	1880532e 	bgeu	r3,r2,f22c <__umoddi3+0x264>
    f0e0:	00004e06 	br	f21c <__umoddi3+0x254>
    f0e4:	29c05536 	bltu	r5,r7,f23c <__umoddi3+0x274>
    f0e8:	00bfffd4 	movui	r2,65535
    f0ec:	11c0612e 	bgeu	r2,r7,f274 <__umoddi3+0x2ac>
    f0f0:	00804034 	movhi	r2,256
    f0f4:	10bfffc4 	addi	r2,r2,-1
    f0f8:	11c0f82e 	bgeu	r2,r7,f4dc <__umoddi3+0x514>
    f0fc:	01400604 	movi	r5,24
    f100:	282b883a 	mov	r21,r5
    f104:	394ad83a 	srl	r5,r7,r5
    f108:	00c000b4 	movhi	r3,2
    f10c:	18eea004 	addi	r3,r3,-17792
    f110:	194b883a 	add	r5,r3,r5
    f114:	28800003 	ldbu	r2,0(r5)
    f118:	00c00804 	movi	r3,32
    f11c:	156b883a 	add	r21,r2,r21
    f120:	1d69c83a 	sub	r20,r3,r21
    f124:	a000631e 	bne	r20,zero,f2b4 <__umoddi3+0x2ec>
    f128:	3c400136 	bltu	r7,r17,f130 <__umoddi3+0x168>
    f12c:	81810436 	bltu	r16,r6,f540 <__umoddi3+0x578>
    f130:	8185c83a 	sub	r2,r16,r6
    f134:	89e3c83a 	sub	r17,r17,r7
    f138:	8087803a 	cmpltu	r3,r16,r2
    f13c:	88efc83a 	sub	r23,r17,r3
    f140:	b807883a 	mov	r3,r23
    f144:	00003f06 	br	f244 <__umoddi3+0x27c>
    f148:	3000041e 	bne	r6,zero,f15c <__umoddi3+0x194>
    f14c:	01000044 	movi	r4,1
    f150:	000b883a 	mov	r5,zero
    f154:	0004dcc0 	call	4dcc <__udivsi3>
    f158:	1027883a 	mov	r19,r2
    f15c:	00bfffd4 	movui	r2,65535
    f160:	14c04f2e 	bgeu	r2,r19,f2a0 <__umoddi3+0x2d8>
    f164:	00804034 	movhi	r2,256
    f168:	10bfffc4 	addi	r2,r2,-1
    f16c:	14c0e42e 	bgeu	r2,r19,f500 <__umoddi3+0x538>
    f170:	00800604 	movi	r2,24
    f174:	1007883a 	mov	r3,r2
    f178:	9884d83a 	srl	r2,r19,r2
    f17c:	010000b4 	movhi	r4,2
    f180:	212ea004 	addi	r4,r4,-17792
    f184:	2085883a 	add	r2,r4,r2
    f188:	11000003 	ldbu	r4,0(r2)
    f18c:	00800804 	movi	r2,32
    f190:	20c7883a 	add	r3,r4,r3
    f194:	10c5c83a 	sub	r2,r2,r3
    f198:	10009a1e 	bne	r2,zero,f404 <__umoddi3+0x43c>
    f19c:	982cd43a 	srli	r22,r19,16
    f1a0:	8ce3c83a 	sub	r17,r17,r19
    f1a4:	9c3fffcc 	andi	r16,r19,65535
    f1a8:	0025883a 	mov	r18,zero
    f1ac:	8809883a 	mov	r4,r17
    f1b0:	b00b883a 	mov	r5,r22
    f1b4:	0004dd40 	call	4dd4 <__umodsi3>
    f1b8:	8809883a 	mov	r4,r17
    f1bc:	b00b883a 	mov	r5,r22
    f1c0:	102b883a 	mov	r21,r2
    f1c4:	0004dcc0 	call	4dcc <__udivsi3>
    f1c8:	a806943a 	slli	r3,r21,16
    f1cc:	a008d43a 	srli	r4,r20,16
    f1d0:	1405383a 	mul	r2,r2,r16
    f1d4:	190cb03a 	or	r6,r3,r4
    f1d8:	3080032e 	bgeu	r6,r2,f1e8 <__umoddi3+0x220>
    f1dc:	34cd883a 	add	r6,r6,r19
    f1e0:	34c00136 	bltu	r6,r19,f1e8 <__umoddi3+0x220>
    f1e4:	3080d436 	bltu	r6,r2,f538 <__umoddi3+0x570>
    f1e8:	30abc83a 	sub	r21,r6,r2
    f1ec:	a809883a 	mov	r4,r21
    f1f0:	b00b883a 	mov	r5,r22
    f1f4:	0004dd40 	call	4dd4 <__umodsi3>
    f1f8:	1023883a 	mov	r17,r2
    f1fc:	a809883a 	mov	r4,r21
    f200:	b00b883a 	mov	r5,r22
    f204:	0004dcc0 	call	4dcc <__udivsi3>
    f208:	8822943a 	slli	r17,r17,16
    f20c:	1405383a 	mul	r2,r2,r16
    f210:	a13fffcc 	andi	r4,r20,65535
    f214:	8906b03a 	or	r3,r17,r4
    f218:	1880042e 	bgeu	r3,r2,f22c <__umoddi3+0x264>
    f21c:	1cc7883a 	add	r3,r3,r19
    f220:	1cc00236 	bltu	r3,r19,f22c <__umoddi3+0x264>
    f224:	1880012e 	bgeu	r3,r2,f22c <__umoddi3+0x264>
    f228:	1cc7883a 	add	r3,r3,r19
    f22c:	1887c83a 	sub	r3,r3,r2
    f230:	1c84d83a 	srl	r2,r3,r18
    f234:	0007883a 	mov	r3,zero
    f238:	00000206 	br	f244 <__umoddi3+0x27c>
    f23c:	2005883a 	mov	r2,r4
    f240:	2807883a 	mov	r3,r5
    f244:	dfc00b17 	ldw	ra,44(sp)
    f248:	df000a17 	ldw	fp,40(sp)
    f24c:	ddc00917 	ldw	r23,36(sp)
    f250:	dd800817 	ldw	r22,32(sp)
    f254:	dd400717 	ldw	r21,28(sp)
    f258:	dd000617 	ldw	r20,24(sp)
    f25c:	dcc00517 	ldw	r19,20(sp)
    f260:	dc800417 	ldw	r18,16(sp)
    f264:	dc400317 	ldw	r17,12(sp)
    f268:	dc000217 	ldw	r16,8(sp)
    f26c:	dec00c04 	addi	sp,sp,48
    f270:	f800283a 	ret
    f274:	00803fc4 	movi	r2,255
    f278:	11c0952e 	bgeu	r2,r7,f4d0 <__umoddi3+0x508>
    f27c:	01400204 	movi	r5,8
    f280:	282b883a 	mov	r21,r5
    f284:	003f9f06 	br	f104 <__alt_mem_Flash_flash_data+0xf400f104>
    f288:	00804034 	movhi	r2,256
    f28c:	10bfffc4 	addi	r2,r2,-1
    f290:	1180952e 	bgeu	r2,r6,f4e8 <__umoddi3+0x520>
    f294:	01400604 	movi	r5,24
    f298:	2805883a 	mov	r2,r5
    f29c:	003f6206 	br	f028 <__alt_mem_Flash_flash_data+0xf400f028>
    f2a0:	00803fc4 	movi	r2,255
    f2a4:	14c0932e 	bgeu	r2,r19,f4f4 <__umoddi3+0x52c>
    f2a8:	00800204 	movi	r2,8
    f2ac:	1007883a 	mov	r3,r2
    f2b0:	003fb106 	br	f178 <__alt_mem_Flash_flash_data+0xf400f178>
    f2b4:	3548d83a 	srl	r4,r6,r21
    f2b8:	3d0e983a 	sll	r7,r7,r20
    f2bc:	8d10983a 	sll	r8,r17,r20
    f2c0:	8d6cd83a 	srl	r22,r17,r21
    f2c4:	3922b03a 	or	r17,r7,r4
    f2c8:	882ed43a 	srli	r23,r17,16
    f2cc:	8564d83a 	srl	r18,r16,r21
    f2d0:	b009883a 	mov	r4,r22
    f2d4:	b80b883a 	mov	r5,r23
    f2d8:	44a4b03a 	or	r18,r8,r18
    f2dc:	3526983a 	sll	r19,r6,r20
    f2e0:	0004dd40 	call	4dd4 <__umodsi3>
    f2e4:	b009883a 	mov	r4,r22
    f2e8:	b80b883a 	mov	r5,r23
    f2ec:	1039883a 	mov	fp,r2
    f2f0:	0004dcc0 	call	4dcc <__udivsi3>
    f2f4:	102d883a 	mov	r22,r2
    f2f8:	8a3fffcc 	andi	r8,r17,65535
    f2fc:	e004943a 	slli	r2,fp,16
    f300:	900cd43a 	srli	r6,r18,16
    f304:	b239383a 	mul	fp,r22,r8
    f308:	8520983a 	sll	r16,r16,r20
    f30c:	118ab03a 	or	r5,r2,r6
    f310:	2f00042e 	bgeu	r5,fp,f324 <__umoddi3+0x35c>
    f314:	2c4b883a 	add	r5,r5,r17
    f318:	b0bfffc4 	addi	r2,r22,-1
    f31c:	2c40822e 	bgeu	r5,r17,f528 <__umoddi3+0x560>
    f320:	102d883a 	mov	r22,r2
    f324:	2f39c83a 	sub	fp,r5,fp
    f328:	e009883a 	mov	r4,fp
    f32c:	b80b883a 	mov	r5,r23
    f330:	da000115 	stw	r8,4(sp)
    f334:	0004dd40 	call	4dd4 <__umodsi3>
    f338:	e009883a 	mov	r4,fp
    f33c:	b80b883a 	mov	r5,r23
    f340:	d8800015 	stw	r2,0(sp)
    f344:	0004dcc0 	call	4dcc <__udivsi3>
    f348:	d9800017 	ldw	r6,0(sp)
    f34c:	da000117 	ldw	r8,4(sp)
    f350:	94bfffcc 	andi	r18,r18,65535
    f354:	300c943a 	slli	r6,r6,16
    f358:	1209383a 	mul	r4,r2,r8
    f35c:	3490b03a 	or	r8,r6,r18
    f360:	4100042e 	bgeu	r8,r4,f374 <__umoddi3+0x3ac>
    f364:	4451883a 	add	r8,r8,r17
    f368:	10ffffc4 	addi	r3,r2,-1
    f36c:	44406a2e 	bgeu	r8,r17,f518 <__umoddi3+0x550>
    f370:	1805883a 	mov	r2,r3
    f374:	b012943a 	slli	r9,r22,16
    f378:	9abfffcc 	andi	r10,r19,65535
    f37c:	980ed43a 	srli	r7,r19,16
    f380:	124ab03a 	or	r5,r2,r9
    f384:	2a7fffcc 	andi	r9,r5,65535
    f388:	280ad43a 	srli	r5,r5,16
    f38c:	4a8d383a 	mul	r6,r9,r10
    f390:	49d3383a 	mul	r9,r9,r7
    f394:	2a95383a 	mul	r10,r5,r10
    f398:	3004d43a 	srli	r2,r6,16
    f39c:	4111c83a 	sub	r8,r8,r4
    f3a0:	5253883a 	add	r9,r10,r9
    f3a4:	4893883a 	add	r9,r9,r2
    f3a8:	29cb383a 	mul	r5,r5,r7
    f3ac:	4a80022e 	bgeu	r9,r10,f3b8 <__umoddi3+0x3f0>
    f3b0:	00800074 	movhi	r2,1
    f3b4:	288b883a 	add	r5,r5,r2
    f3b8:	4808d43a 	srli	r4,r9,16
    f3bc:	4812943a 	slli	r9,r9,16
    f3c0:	31bfffcc 	andi	r6,r6,65535
    f3c4:	290b883a 	add	r5,r5,r4
    f3c8:	498d883a 	add	r6,r9,r6
    f3cc:	41403a36 	bltu	r8,r5,f4b8 <__umoddi3+0x4f0>
    f3d0:	41405d26 	beq	r8,r5,f548 <__umoddi3+0x580>
    f3d4:	4149c83a 	sub	r4,r8,r5
    f3d8:	300f883a 	mov	r7,r6
    f3dc:	81cfc83a 	sub	r7,r16,r7
    f3e0:	81c7803a 	cmpltu	r3,r16,r7
    f3e4:	20c7c83a 	sub	r3,r4,r3
    f3e8:	1d44983a 	sll	r2,r3,r21
    f3ec:	3d0ed83a 	srl	r7,r7,r20
    f3f0:	1d06d83a 	srl	r3,r3,r20
    f3f4:	11c4b03a 	or	r2,r2,r7
    f3f8:	003f9206 	br	f244 <__alt_mem_Flash_flash_data+0xf400f244>
    f3fc:	0025883a 	mov	r18,zero
    f400:	003f1806 	br	f064 <__alt_mem_Flash_flash_data+0xf400f064>
    f404:	98a6983a 	sll	r19,r19,r2
    f408:	88e8d83a 	srl	r20,r17,r3
    f40c:	80c6d83a 	srl	r3,r16,r3
    f410:	982cd43a 	srli	r22,r19,16
    f414:	88a2983a 	sll	r17,r17,r2
    f418:	a009883a 	mov	r4,r20
    f41c:	b00b883a 	mov	r5,r22
    f420:	88eab03a 	or	r21,r17,r3
    f424:	1025883a 	mov	r18,r2
    f428:	0004dd40 	call	4dd4 <__umodsi3>
    f42c:	a009883a 	mov	r4,r20
    f430:	b00b883a 	mov	r5,r22
    f434:	1023883a 	mov	r17,r2
    f438:	0004dcc0 	call	4dcc <__udivsi3>
    f43c:	9f3fffcc 	andi	fp,r19,65535
    f440:	8822943a 	slli	r17,r17,16
    f444:	a80ad43a 	srli	r5,r21,16
    f448:	1705383a 	mul	r2,r2,fp
    f44c:	84a8983a 	sll	r20,r16,r18
    f450:	8948b03a 	or	r4,r17,r5
    f454:	2080042e 	bgeu	r4,r2,f468 <__umoddi3+0x4a0>
    f458:	24c9883a 	add	r4,r4,r19
    f45c:	24c00236 	bltu	r4,r19,f468 <__umoddi3+0x4a0>
    f460:	2080012e 	bgeu	r4,r2,f468 <__umoddi3+0x4a0>
    f464:	24c9883a 	add	r4,r4,r19
    f468:	20afc83a 	sub	r23,r4,r2
    f46c:	b809883a 	mov	r4,r23
    f470:	b00b883a 	mov	r5,r22
    f474:	0004dd40 	call	4dd4 <__umodsi3>
    f478:	1023883a 	mov	r17,r2
    f47c:	b809883a 	mov	r4,r23
    f480:	b00b883a 	mov	r5,r22
    f484:	0004dcc0 	call	4dcc <__udivsi3>
    f488:	8822943a 	slli	r17,r17,16
    f48c:	1705383a 	mul	r2,r2,fp
    f490:	a93fffcc 	andi	r4,r21,65535
    f494:	8908b03a 	or	r4,r17,r4
    f498:	2080042e 	bgeu	r4,r2,f4ac <__umoddi3+0x4e4>
    f49c:	24c9883a 	add	r4,r4,r19
    f4a0:	24c00236 	bltu	r4,r19,f4ac <__umoddi3+0x4e4>
    f4a4:	2080012e 	bgeu	r4,r2,f4ac <__umoddi3+0x4e4>
    f4a8:	24c9883a 	add	r4,r4,r19
    f4ac:	20a3c83a 	sub	r17,r4,r2
    f4b0:	e021883a 	mov	r16,fp
    f4b4:	003f3d06 	br	f1ac <__alt_mem_Flash_flash_data+0xf400f1ac>
    f4b8:	34cfc83a 	sub	r7,r6,r19
    f4bc:	2c4bc83a 	sub	r5,r5,r17
    f4c0:	31cd803a 	cmpltu	r6,r6,r7
    f4c4:	298dc83a 	sub	r6,r5,r6
    f4c8:	4189c83a 	sub	r4,r8,r6
    f4cc:	003fc306 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f4d0:	000b883a 	mov	r5,zero
    f4d4:	002b883a 	mov	r21,zero
    f4d8:	003f0a06 	br	f104 <__alt_mem_Flash_flash_data+0xf400f104>
    f4dc:	01400404 	movi	r5,16
    f4e0:	282b883a 	mov	r21,r5
    f4e4:	003f0706 	br	f104 <__alt_mem_Flash_flash_data+0xf400f104>
    f4e8:	01400404 	movi	r5,16
    f4ec:	2805883a 	mov	r2,r5
    f4f0:	003ecd06 	br	f028 <__alt_mem_Flash_flash_data+0xf400f028>
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	0007883a 	mov	r3,zero
    f4fc:	003f1e06 	br	f178 <__alt_mem_Flash_flash_data+0xf400f178>
    f500:	00800404 	movi	r2,16
    f504:	1007883a 	mov	r3,r2
    f508:	003f1b06 	br	f178 <__alt_mem_Flash_flash_data+0xf400f178>
    f50c:	000b883a 	mov	r5,zero
    f510:	0005883a 	mov	r2,zero
    f514:	003ec406 	br	f028 <__alt_mem_Flash_flash_data+0xf400f028>
    f518:	413f952e 	bgeu	r8,r4,f370 <__alt_mem_Flash_flash_data+0xf400f370>
    f51c:	10bfff84 	addi	r2,r2,-2
    f520:	4451883a 	add	r8,r8,r17
    f524:	003f9306 	br	f374 <__alt_mem_Flash_flash_data+0xf400f374>
    f528:	2f3f7d2e 	bgeu	r5,fp,f320 <__alt_mem_Flash_flash_data+0xf400f320>
    f52c:	b5bfff84 	addi	r22,r22,-2
    f530:	2c4b883a 	add	r5,r5,r17
    f534:	003f7b06 	br	f324 <__alt_mem_Flash_flash_data+0xf400f324>
    f538:	34cd883a 	add	r6,r6,r19
    f53c:	003f2a06 	br	f1e8 <__alt_mem_Flash_flash_data+0xf400f1e8>
    f540:	8005883a 	mov	r2,r16
    f544:	003efe06 	br	f140 <__alt_mem_Flash_flash_data+0xf400f140>
    f548:	81bfdb36 	bltu	r16,r6,f4b8 <__alt_mem_Flash_flash_data+0xf400f4b8>
    f54c:	300f883a 	mov	r7,r6
    f550:	0009883a 	mov	r4,zero
    f554:	003fa106 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>

0000f558 <__floatunsidf>:
    f558:	defffe04 	addi	sp,sp,-8
    f55c:	dc000015 	stw	r16,0(sp)
    f560:	dfc00115 	stw	ra,4(sp)
    f564:	2021883a 	mov	r16,r4
    f568:	20001026 	beq	r4,zero,f5ac <__floatunsidf+0x54>
    f56c:	00075180 	call	7518 <__clzsi2>
    f570:	01410784 	movi	r5,1054
    f574:	100d883a 	mov	r6,r2
    f578:	288bc83a 	sub	r5,r5,r2
    f57c:	00800284 	movi	r2,10
    f580:	11801616 	blt	r2,r6,f5dc <__floatunsidf+0x84>
    f584:	008002c4 	movi	r2,11
    f588:	1185c83a 	sub	r2,r2,r6
    f58c:	8084d83a 	srl	r2,r16,r2
    f590:	00c00434 	movhi	r3,16
    f594:	31c00544 	addi	r7,r6,21
    f598:	18ffffc4 	addi	r3,r3,-1
    f59c:	81e0983a 	sll	r16,r16,r7
    f5a0:	10cc703a 	and	r6,r2,r3
    f5a4:	2941ffcc 	andi	r5,r5,2047
    f5a8:	00000206 	br	f5b4 <__floatunsidf+0x5c>
    f5ac:	000b883a 	mov	r5,zero
    f5b0:	000d883a 	mov	r6,zero
    f5b4:	280a953a 	slli	r5,r5,20
    f5b8:	00c00434 	movhi	r3,16
    f5bc:	18ffffc4 	addi	r3,r3,-1
    f5c0:	30c6703a 	and	r3,r6,r3
    f5c4:	8005883a 	mov	r2,r16
    f5c8:	1946b03a 	or	r3,r3,r5
    f5cc:	dfc00117 	ldw	ra,4(sp)
    f5d0:	dc000017 	ldw	r16,0(sp)
    f5d4:	dec00204 	addi	sp,sp,8
    f5d8:	f800283a 	ret
    f5dc:	31bffd44 	addi	r6,r6,-11
    f5e0:	818c983a 	sll	r6,r16,r6
    f5e4:	00800434 	movhi	r2,16
    f5e8:	10bfffc4 	addi	r2,r2,-1
    f5ec:	2941ffcc 	andi	r5,r5,2047
    f5f0:	0021883a 	mov	r16,zero
    f5f4:	308c703a 	and	r6,r6,r2
    f5f8:	003fee06 	br	f5b4 <__alt_mem_Flash_flash_data+0xf400f5b4>

0000f5fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f5fc:	defffc04 	addi	sp,sp,-16
    f600:	df000315 	stw	fp,12(sp)
    f604:	df000304 	addi	fp,sp,12
    f608:	e13ffd15 	stw	r4,-12(fp)
    f60c:	e17ffe15 	stw	r5,-8(fp)
    f610:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f614:	e0fffe17 	ldw	r3,-8(fp)
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	18800c26 	beq	r3,r2,f650 <alt_load_section+0x54>
  {
    while( to != end )
    f620:	00000806 	br	f644 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f624:	e0bffe17 	ldw	r2,-8(fp)
    f628:	10c00104 	addi	r3,r2,4
    f62c:	e0fffe15 	stw	r3,-8(fp)
    f630:	e0fffd17 	ldw	r3,-12(fp)
    f634:	19000104 	addi	r4,r3,4
    f638:	e13ffd15 	stw	r4,-12(fp)
    f63c:	18c00017 	ldw	r3,0(r3)
    f640:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f644:	e0fffe17 	ldw	r3,-8(fp)
    f648:	e0bfff17 	ldw	r2,-4(fp)
    f64c:	18bff51e 	bne	r3,r2,f624 <__alt_mem_Flash_flash_data+0xf400f624>
    {
      *to++ = *from++;
    }
  }
}
    f650:	e037883a 	mov	sp,fp
    f654:	df000017 	ldw	fp,0(sp)
    f658:	dec00104 	addi	sp,sp,4
    f65c:	f800283a 	ret

0000f660 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f660:	defffe04 	addi	sp,sp,-8
    f664:	dfc00115 	stw	ra,4(sp)
    f668:	df000015 	stw	fp,0(sp)
    f66c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f670:	010000b4 	movhi	r4,2
    f674:	2137ca04 	addi	r4,r4,-8408
    f678:	014000b4 	movhi	r5,2
    f67c:	29700d04 	addi	r5,r5,-16332
    f680:	018000b4 	movhi	r6,2
    f684:	31b7ca04 	addi	r6,r6,-8408
    f688:	000f5fc0 	call	f5fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f68c:	01000034 	movhi	r4,0
    f690:	21000804 	addi	r4,r4,32
    f694:	01400034 	movhi	r5,0
    f698:	29400804 	addi	r5,r5,32
    f69c:	01800034 	movhi	r6,0
    f6a0:	31809104 	addi	r6,r6,580
    f6a4:	000f5fc0 	call	f5fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f6a8:	010000b4 	movhi	r4,2
    f6ac:	212da304 	addi	r4,r4,-18804
    f6b0:	014000b4 	movhi	r5,2
    f6b4:	296da304 	addi	r5,r5,-18804
    f6b8:	018000b4 	movhi	r6,2
    f6bc:	31b00d04 	addi	r6,r6,-16332
    f6c0:	000f5fc0 	call	f5fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f6c4:	001a2480 	call	1a248 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f6c8:	001a4cc0 	call	1a4cc <alt_icache_flush_all>
}
    f6cc:	e037883a 	mov	sp,fp
    f6d0:	dfc00117 	ldw	ra,4(sp)
    f6d4:	df000017 	ldw	fp,0(sp)
    f6d8:	dec00204 	addi	sp,sp,8
    f6dc:	f800283a 	ret

0000f6e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f6e0:	defff904 	addi	sp,sp,-28
    f6e4:	dfc00615 	stw	ra,24(sp)
    f6e8:	df000515 	stw	fp,20(sp)
    f6ec:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f6f0:	0009883a 	mov	r4,zero
    f6f4:	00178380 	call	17838 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f6f8:	00103dc0 	call	103dc <OSInit>
    f6fc:	01000044 	movi	r4,1
    f700:	0014f4c0 	call	14f4c <OSSemCreate>
    f704:	1007883a 	mov	r3,r2
    f708:	008000b4 	movhi	r2,2
    f70c:	10bf9604 	addi	r2,r2,-424
    f710:	10c00015 	stw	r3,0(r2)
    f714:	01000044 	movi	r4,1
    f718:	0014f4c0 	call	14f4c <OSSemCreate>
    f71c:	1007883a 	mov	r3,r2
    f720:	008000b4 	movhi	r2,2
    f724:	10bf9804 	addi	r2,r2,-416
    f728:	10c00015 	stw	r3,0(r2)
    f72c:	008000b4 	movhi	r2,2
    f730:	10bfad04 	addi	r2,r2,-332
    f734:	e0bffc15 	stw	r2,-16(fp)
    f738:	00800044 	movi	r2,1
    f73c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    f740:	e0bffd0b 	ldhu	r2,-12(fp)
    f744:	1009883a 	mov	r4,r2
    f748:	0014f4c0 	call	14f4c <OSSemCreate>
    f74c:	1007883a 	mov	r3,r2
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f758:	001786c0 	call	1786c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f75c:	010000b4 	movhi	r4,2
    f760:	212f5204 	addi	r4,r4,-17080
    f764:	014000b4 	movhi	r5,2
    f768:	296f5204 	addi	r5,r5,-17080
    f76c:	018000b4 	movhi	r6,2
    f770:	31af5204 	addi	r6,r6,-17080
    f774:	001a5bc0 	call	1a5bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f778:	001a3840 	call	1a384 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f77c:	010000b4 	movhi	r4,2
    f780:	2128f804 	addi	r4,r4,-23584
    f784:	001b2e00 	call	1b2e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f788:	d127f617 	ldw	r4,-24616(gp)
    f78c:	d0e7f717 	ldw	r3,-24612(gp)
    f790:	d0a7f817 	ldw	r2,-24608(gp)
    f794:	180b883a 	mov	r5,r3
    f798:	100d883a 	mov	r6,r2
    f79c:	00020080 	call	2008 <main>
    f7a0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    f7a4:	01000044 	movi	r4,1
    f7a8:	001a1780 	call	1a178 <close>
  exit (result);
    f7ac:	e13ffb17 	ldw	r4,-20(fp)
    f7b0:	001b2f40 	call	1b2f4 <exit>

0000f7b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f7b4:	defff904 	addi	sp,sp,-28
    f7b8:	df000615 	stw	fp,24(sp)
    f7bc:	df000604 	addi	fp,sp,24
    f7c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7c4:	0005303a 	rdctl	r2,status
    f7c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7cc:	e0fffc17 	ldw	r3,-16(fp)
    f7d0:	00bfff84 	movi	r2,-2
    f7d4:	1884703a 	and	r2,r3,r2
    f7d8:	1001703a 	wrctl	status,r2
  
  return context;
    f7dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f7e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f7e4:	d0a00517 	ldw	r2,-32748(gp)
    f7e8:	10c000c4 	addi	r3,r2,3
    f7ec:	00bfff04 	movi	r2,-4
    f7f0:	1884703a 	and	r2,r3,r2
    f7f4:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f7f8:	d0e00517 	ldw	r3,-32748(gp)
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	1887883a 	add	r3,r3,r2
    f804:	00810034 	movhi	r2,1024
    f808:	10800004 	addi	r2,r2,0
    f80c:	10c0062e 	bgeu	r2,r3,f828 <sbrk+0x74>
    f810:	e0bffa17 	ldw	r2,-24(fp)
    f814:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f818:	e0bffd17 	ldw	r2,-12(fp)
    f81c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f820:	00bfffc4 	movi	r2,-1
    f824:	00000b06 	br	f854 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f828:	d0a00517 	ldw	r2,-32748(gp)
    f82c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    f830:	d0e00517 	ldw	r3,-32748(gp)
    f834:	e0bfff17 	ldw	r2,-4(fp)
    f838:	1885883a 	add	r2,r3,r2
    f83c:	d0a00515 	stw	r2,-32748(gp)
    f840:	e0bffa17 	ldw	r2,-24(fp)
    f844:	e0bffe15 	stw	r2,-8(fp)
    f848:	e0bffe17 	ldw	r2,-8(fp)
    f84c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f850:	e0bffb17 	ldw	r2,-20(fp)
} 
    f854:	e037883a 	mov	sp,fp
    f858:	df000017 	ldw	fp,0(sp)
    f85c:	dec00104 	addi	sp,sp,4
    f860:	f800283a 	ret

0000f864 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    f864:	deffdf04 	addi	sp,sp,-132
    f868:	dfc02015 	stw	ra,128(sp)
    f86c:	df001f15 	stw	fp,124(sp)
    f870:	df001f04 	addi	fp,sp,124
    f874:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    f878:	e0bfe204 	addi	r2,fp,-120
    f87c:	01003fc4 	movi	r4,255
    f880:	100b883a 	mov	r5,r2
    f884:	00171000 	call	17100 <OSTaskQuery>
    f888:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    f88c:	e0bffe83 	ldbu	r2,-6(fp)
    f890:	10803fcc 	andi	r2,r2,255
    f894:	10000126 	beq	r2,zero,f89c <__env_lock+0x38>
    return;
    f898:	00001d06 	br	f910 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    f89c:	e0bfee83 	ldbu	r2,-70(fp)
    f8a0:	10803fcc 	andi	r2,r2,255
    f8a4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    f8a8:	d0e7fa17 	ldw	r3,-24600(gp)
    f8ac:	e0bffd04 	addi	r2,fp,-12
    f8b0:	1809883a 	mov	r4,r3
    f8b4:	100b883a 	mov	r5,r2
    f8b8:	00157980 	call	15798 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    f8bc:	e0bffe43 	ldbu	r2,-7(fp)
    f8c0:	10803fcc 	andi	r2,r2,255
    f8c4:	10000726 	beq	r2,zero,f8e4 <__env_lock+0x80>
    f8c8:	d0a00617 	ldw	r2,-32744(gp)
    f8cc:	e0ffe117 	ldw	r3,-124(fp)
    f8d0:	1880041e 	bne	r3,r2,f8e4 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    f8d4:	d0a7f917 	ldw	r2,-24604(gp)
    f8d8:	10800044 	addi	r2,r2,1
    f8dc:	d0a7f915 	stw	r2,-24604(gp)
    f8e0:	00000a06 	br	f90c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    f8e4:	d0e7fa17 	ldw	r3,-24600(gp)
    f8e8:	e0bffe84 	addi	r2,fp,-6
    f8ec:	1809883a 	mov	r4,r3
    f8f0:	000b883a 	mov	r5,zero
    f8f4:	100d883a 	mov	r6,r2
    f8f8:	00152b40 	call	152b4 <OSSemPend>
    locks  = 1;
    f8fc:	00800044 	movi	r2,1
    f900:	d0a7f915 	stw	r2,-24604(gp)
    lockid = id;
    f904:	e0bfe117 	ldw	r2,-124(fp)
    f908:	d0a00615 	stw	r2,-32744(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    f90c:	0001883a 	nop
}
    f910:	e037883a 	mov	sp,fp
    f914:	dfc00117 	ldw	ra,4(sp)
    f918:	df000017 	ldw	fp,0(sp)
    f91c:	dec00204 	addi	sp,sp,8
    f920:	f800283a 	ret

0000f924 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    f924:	defffd04 	addi	sp,sp,-12
    f928:	dfc00215 	stw	ra,8(sp)
    f92c:	df000115 	stw	fp,4(sp)
    f930:	df000104 	addi	fp,sp,4
    f934:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    f938:	d0a7f917 	ldw	r2,-24604(gp)
    f93c:	1000011e 	bne	r2,zero,f944 <__env_unlock+0x20>
    return;
    f940:	00000a06 	br	f96c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    f944:	d0a7f917 	ldw	r2,-24604(gp)
    f948:	10bfffc4 	addi	r2,r2,-1
    f94c:	d0a7f915 	stw	r2,-24604(gp)
    f950:	d0a7f917 	ldw	r2,-24604(gp)
    f954:	1000051e 	bne	r2,zero,f96c <__env_unlock+0x48>
  {
    lockid = -1;
    f958:	00bfffc4 	movi	r2,-1
    f95c:	d0a00615 	stw	r2,-32744(gp)
    OSSemPost( alt_envsem );
    f960:	d0a7fa17 	ldw	r2,-24600(gp)
    f964:	1009883a 	mov	r4,r2
    f968:	00156880 	call	15688 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    f96c:	e037883a 	mov	sp,fp
    f970:	dfc00117 	ldw	ra,4(sp)
    f974:	df000017 	ldw	fp,0(sp)
    f978:	dec00204 	addi	sp,sp,8
    f97c:	f800283a 	ret

0000f980 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    f980:	deffdb04 	addi	sp,sp,-148
    f984:	dfc02415 	stw	ra,144(sp)
    f988:	df002315 	stw	fp,140(sp)
    f98c:	df002304 	addi	fp,sp,140
    f990:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f994:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    f998:	008000b4 	movhi	r2,2
    f99c:	10bf9944 	addi	r2,r2,-411
    f9a0:	10800003 	ldbu	r2,0(r2)
    f9a4:	10803fcc 	andi	r2,r2,255
    f9a8:	10800060 	cmpeqi	r2,r2,1
    f9ac:	1000011e 	bne	r2,zero,f9b4 <__malloc_lock+0x34>
      return;
    f9b0:	00003606 	br	fa8c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    f9b4:	e0bfe204 	addi	r2,fp,-120
    f9b8:	01003fc4 	movi	r4,255
    f9bc:	100b883a 	mov	r5,r2
    f9c0:	00171000 	call	17100 <OSTaskQuery>
    f9c4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    f9c8:	e0bffe83 	ldbu	r2,-6(fp)
    f9cc:	10803fcc 	andi	r2,r2,255
    f9d0:	10000126 	beq	r2,zero,f9d8 <__malloc_lock+0x58>
    return;
    f9d4:	00002d06 	br	fa8c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    f9d8:	e0bfee83 	ldbu	r2,-70(fp)
    f9dc:	10803fcc 	andi	r2,r2,255
    f9e0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    f9e4:	d0e7fc17 	ldw	r3,-24592(gp)
    f9e8:	e0bffd04 	addi	r2,fp,-12
    f9ec:	1809883a 	mov	r4,r3
    f9f0:	100b883a 	mov	r5,r2
    f9f4:	00157980 	call	15798 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9f8:	0005303a 	rdctl	r2,status
    f9fc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa00:	e0ffdf17 	ldw	r3,-132(fp)
    fa04:	00bfff84 	movi	r2,-2
    fa08:	1884703a 	and	r2,r3,r2
    fa0c:	1001703a 	wrctl	status,r2
  
  return context;
    fa10:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    fa14:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    fa18:	e0bffd0b 	ldhu	r2,-12(fp)
    fa1c:	10bfffcc 	andi	r2,r2,65535
    fa20:	10000b1e 	bne	r2,zero,fa50 <__malloc_lock+0xd0>
    fa24:	d0a00717 	ldw	r2,-32740(gp)
    fa28:	e0ffde17 	ldw	r3,-136(fp)
    fa2c:	1880081e 	bne	r3,r2,fa50 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    fa30:	d0a7fb17 	ldw	r2,-24596(gp)
    fa34:	10800044 	addi	r2,r2,1
    fa38:	d0a7fb15 	stw	r2,-24596(gp)
    fa3c:	e0bfdd17 	ldw	r2,-140(fp)
    fa40:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa44:	e0bfe017 	ldw	r2,-128(fp)
    fa48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    fa4c:	00000e06 	br	fa88 <__malloc_lock+0x108>
    fa50:	e0bfdd17 	ldw	r2,-140(fp)
    fa54:	e0bfe115 	stw	r2,-124(fp)
    fa58:	e0bfe117 	ldw	r2,-124(fp)
    fa5c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    fa60:	d0e7fc17 	ldw	r3,-24592(gp)
    fa64:	e0bffe84 	addi	r2,fp,-6
    fa68:	1809883a 	mov	r4,r3
    fa6c:	000b883a 	mov	r5,zero
    fa70:	100d883a 	mov	r6,r2
    fa74:	00152b40 	call	152b4 <OSSemPend>
    locks  = 1;
    fa78:	00800044 	movi	r2,1
    fa7c:	d0a7fb15 	stw	r2,-24596(gp)
    lockid = id;
    fa80:	e0bfde17 	ldw	r2,-136(fp)
    fa84:	d0a00715 	stw	r2,-32740(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fa88:	0001883a 	nop
}
    fa8c:	e037883a 	mov	sp,fp
    fa90:	dfc00117 	ldw	ra,4(sp)
    fa94:	df000017 	ldw	fp,0(sp)
    fa98:	dec00204 	addi	sp,sp,8
    fa9c:	f800283a 	ret

0000faa0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    faa0:	defff804 	addi	sp,sp,-32
    faa4:	dfc00715 	stw	ra,28(sp)
    faa8:	df000615 	stw	fp,24(sp)
    faac:	df000604 	addi	fp,sp,24
    fab0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fab4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    fab8:	008000b4 	movhi	r2,2
    fabc:	10bf9944 	addi	r2,r2,-411
    fac0:	10800003 	ldbu	r2,0(r2)
    fac4:	10803fcc 	andi	r2,r2,255
    fac8:	10800060 	cmpeqi	r2,r2,1
    facc:	1000011e 	bne	r2,zero,fad4 <__malloc_unlock+0x34>
      return;
    fad0:	00002206 	br	fb5c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fad4:	0005303a 	rdctl	r2,status
    fad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fadc:	e0fffb17 	ldw	r3,-20(fp)
    fae0:	00bfff84 	movi	r2,-2
    fae4:	1884703a 	and	r2,r3,r2
    fae8:	1001703a 	wrctl	status,r2
  
  return context;
    faec:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    faf0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    faf4:	d0a7fb17 	ldw	r2,-24596(gp)
    faf8:	1000051e 	bne	r2,zero,fb10 <__malloc_unlock+0x70>
    fafc:	e0bffa17 	ldw	r2,-24(fp)
    fb00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb04:	e0bffc17 	ldw	r2,-16(fp)
    fb08:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    fb0c:	00001306 	br	fb5c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    fb10:	d0a7fb17 	ldw	r2,-24596(gp)
    fb14:	10bfffc4 	addi	r2,r2,-1
    fb18:	d0a7fb15 	stw	r2,-24596(gp)
    fb1c:	d0a7fb17 	ldw	r2,-24596(gp)
    fb20:	10000a1e 	bne	r2,zero,fb4c <__malloc_unlock+0xac>
  {
    lockid = -1;
    fb24:	00bfffc4 	movi	r2,-1
    fb28:	d0a00715 	stw	r2,-32740(gp)
    fb2c:	e0bffa17 	ldw	r2,-24(fp)
    fb30:	e0bffd15 	stw	r2,-12(fp)
    fb34:	e0bffd17 	ldw	r2,-12(fp)
    fb38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    fb3c:	d0a7fc17 	ldw	r2,-24592(gp)
    fb40:	1009883a 	mov	r4,r2
    fb44:	00156880 	call	15688 <OSSemPost>
    fb48:	00000406 	br	fb5c <__malloc_unlock+0xbc>
    fb4c:	e0bffa17 	ldw	r2,-24(fp)
    fb50:	e0bffe15 	stw	r2,-8(fp)
    fb54:	e0bffe17 	ldw	r2,-8(fp)
    fb58:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    fb5c:	e037883a 	mov	sp,fp
    fb60:	dfc00117 	ldw	ra,4(sp)
    fb64:	df000017 	ldw	fp,0(sp)
    fb68:	dec00204 	addi	sp,sp,8
    fb6c:	f800283a 	ret

0000fb70 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    fb70:	defff704 	addi	sp,sp,-36
    fb74:	dfc00815 	stw	ra,32(sp)
    fb78:	df000715 	stw	fp,28(sp)
    fb7c:	df000704 	addi	fp,sp,28
    fb80:	e13ffd15 	stw	r4,-12(fp)
    fb84:	e17ffe15 	stw	r5,-8(fp)
    fb88:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb8c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fb90:	e0bfff17 	ldw	r2,-4(fp)
    fb94:	1000021e 	bne	r2,zero,fba0 <OSEventNameGet+0x30>
        return (0);
    fb98:	0005883a 	mov	r2,zero
    fb9c:	00003706 	br	fc7c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    fba0:	e0bffd17 	ldw	r2,-12(fp)
    fba4:	1000051e 	bne	r2,zero,fbbc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    fba8:	e0bfff17 	ldw	r2,-4(fp)
    fbac:	00c00104 	movi	r3,4
    fbb0:	10c00005 	stb	r3,0(r2)
        return (0);
    fbb4:	0005883a 	mov	r2,zero
    fbb8:	00003006 	br	fc7c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fbbc:	e0bffe17 	ldw	r2,-8(fp)
    fbc0:	1000051e 	bne	r2,zero,fbd8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    fbc4:	e0bfff17 	ldw	r2,-4(fp)
    fbc8:	00c00304 	movi	r3,12
    fbcc:	10c00005 	stb	r3,0(r2)
        return (0);
    fbd0:	0005883a 	mov	r2,zero
    fbd4:	00002906 	br	fc7c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fbd8:	d0a80b03 	ldbu	r2,-24532(gp)
    fbdc:	10803fcc 	andi	r2,r2,255
    fbe0:	10000526 	beq	r2,zero,fbf8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    fbe4:	e0bfff17 	ldw	r2,-4(fp)
    fbe8:	00c00444 	movi	r3,17
    fbec:	10c00005 	stb	r3,0(r2)
        return (0);
    fbf0:	0005883a 	mov	r2,zero
    fbf4:	00002106 	br	fc7c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    fbf8:	e0bffd17 	ldw	r2,-12(fp)
    fbfc:	10800003 	ldbu	r2,0(r2)
    fc00:	10803fcc 	andi	r2,r2,255
    fc04:	10bfffc4 	addi	r2,r2,-1
    fc08:	10800128 	cmpgeui	r2,r2,4
    fc0c:	10000526 	beq	r2,zero,fc24 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    fc10:	e0bfff17 	ldw	r2,-4(fp)
    fc14:	00c00044 	movi	r3,1
    fc18:	10c00005 	stb	r3,0(r2)
             return (0);
    fc1c:	0005883a 	mov	r2,zero
    fc20:	00001606 	br	fc7c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    fc24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc28:	0005303a 	rdctl	r2,status
    fc2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc30:	e0fffb17 	ldw	r3,-20(fp)
    fc34:	00bfff84 	movi	r2,-2
    fc38:	1884703a 	and	r2,r3,r2
    fc3c:	1001703a 	wrctl	status,r2
  
  return context;
    fc40:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    fc44:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    fc48:	e0bffd17 	ldw	r2,-12(fp)
    fc4c:	10800384 	addi	r2,r2,14
    fc50:	e13ffe17 	ldw	r4,-8(fp)
    fc54:	100b883a 	mov	r5,r2
    fc58:	00115c40 	call	115c4 <OS_StrCopy>
    fc5c:	e0bffa05 	stb	r2,-24(fp)
    fc60:	e0bff917 	ldw	r2,-28(fp)
    fc64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc68:	e0bffc17 	ldw	r2,-16(fp)
    fc6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fc70:	e0bfff17 	ldw	r2,-4(fp)
    fc74:	10000005 	stb	zero,0(r2)
    return (len);
    fc78:	e0bffa03 	ldbu	r2,-24(fp)
}
    fc7c:	e037883a 	mov	sp,fp
    fc80:	dfc00117 	ldw	ra,4(sp)
    fc84:	df000017 	ldw	fp,0(sp)
    fc88:	dec00204 	addi	sp,sp,8
    fc8c:	f800283a 	ret

0000fc90 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    fc90:	defff604 	addi	sp,sp,-40
    fc94:	dfc00915 	stw	ra,36(sp)
    fc98:	df000815 	stw	fp,32(sp)
    fc9c:	df000804 	addi	fp,sp,32
    fca0:	e13ffd15 	stw	r4,-12(fp)
    fca4:	e17ffe15 	stw	r5,-8(fp)
    fca8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fcac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fcb0:	e0bfff17 	ldw	r2,-4(fp)
    fcb4:	1000011e 	bne	r2,zero,fcbc <OSEventNameSet+0x2c>
        return;
    fcb8:	00003f06 	br	fdb8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    fcbc:	e0bffd17 	ldw	r2,-12(fp)
    fcc0:	1000041e 	bne	r2,zero,fcd4 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    fcc4:	e0bfff17 	ldw	r2,-4(fp)
    fcc8:	00c00104 	movi	r3,4
    fccc:	10c00005 	stb	r3,0(r2)
        return;
    fcd0:	00003906 	br	fdb8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fcd4:	e0bffe17 	ldw	r2,-8(fp)
    fcd8:	1000041e 	bne	r2,zero,fcec <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    fcdc:	e0bfff17 	ldw	r2,-4(fp)
    fce0:	00c00304 	movi	r3,12
    fce4:	10c00005 	stb	r3,0(r2)
        return;
    fce8:	00003306 	br	fdb8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fcec:	d0a80b03 	ldbu	r2,-24532(gp)
    fcf0:	10803fcc 	andi	r2,r2,255
    fcf4:	10000426 	beq	r2,zero,fd08 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    fcf8:	e0bfff17 	ldw	r2,-4(fp)
    fcfc:	00c00484 	movi	r3,18
    fd00:	10c00005 	stb	r3,0(r2)
        return;
    fd04:	00002c06 	br	fdb8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    fd08:	e0bffd17 	ldw	r2,-12(fp)
    fd0c:	10800003 	ldbu	r2,0(r2)
    fd10:	10803fcc 	andi	r2,r2,255
    fd14:	10bfffc4 	addi	r2,r2,-1
    fd18:	10800128 	cmpgeui	r2,r2,4
    fd1c:	10000426 	beq	r2,zero,fd30 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	00c00044 	movi	r3,1
    fd28:	10c00005 	stb	r3,0(r2)
             return;
    fd2c:	00002206 	br	fdb8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    fd30:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd34:	0005303a 	rdctl	r2,status
    fd38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd3c:	e0fffa17 	ldw	r3,-24(fp)
    fd40:	00bfff84 	movi	r2,-2
    fd44:	1884703a 	and	r2,r3,r2
    fd48:	1001703a 	wrctl	status,r2
  
  return context;
    fd4c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    fd50:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    fd54:	e13ffe17 	ldw	r4,-8(fp)
    fd58:	00116380 	call	11638 <OS_StrLen>
    fd5c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    fd60:	e0bff903 	ldbu	r2,-28(fp)
    fd64:	10800830 	cmpltui	r2,r2,32
    fd68:	1000081e 	bne	r2,zero,fd8c <OSEventNameSet+0xfc>
    fd6c:	e0bff817 	ldw	r2,-32(fp)
    fd70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd74:	e0bffb17 	ldw	r2,-20(fp)
    fd78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    fd7c:	e0bfff17 	ldw	r2,-4(fp)
    fd80:	00c002c4 	movi	r3,11
    fd84:	10c00005 	stb	r3,0(r2)
        return;
    fd88:	00000b06 	br	fdb8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    fd8c:	e0bffd17 	ldw	r2,-12(fp)
    fd90:	10800384 	addi	r2,r2,14
    fd94:	1009883a 	mov	r4,r2
    fd98:	e17ffe17 	ldw	r5,-8(fp)
    fd9c:	00115c40 	call	115c4 <OS_StrCopy>
    fda0:	e0bff817 	ldw	r2,-32(fp)
    fda4:	e0bffc15 	stw	r2,-16(fp)
    fda8:	e0bffc17 	ldw	r2,-16(fp)
    fdac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	10000005 	stb	zero,0(r2)
}
    fdb8:	e037883a 	mov	sp,fp
    fdbc:	dfc00117 	ldw	ra,4(sp)
    fdc0:	df000017 	ldw	fp,0(sp)
    fdc4:	dec00204 	addi	sp,sp,8
    fdc8:	f800283a 	ret

0000fdcc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    fdcc:	deffed04 	addi	sp,sp,-76
    fdd0:	dfc01215 	stw	ra,72(sp)
    fdd4:	df001115 	stw	fp,68(sp)
    fdd8:	df001104 	addi	fp,sp,68
    fddc:	e13ffc15 	stw	r4,-16(fp)
    fde0:	e17ffd15 	stw	r5,-12(fp)
    fde4:	e1bffe15 	stw	r6,-8(fp)
    fde8:	3805883a 	mov	r2,r7
    fdec:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    fdf0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    fdf4:	e0800217 	ldw	r2,8(fp)
    fdf8:	1000021e 	bne	r2,zero,fe04 <OSEventPendMulti+0x38>
        return (0);
    fdfc:	0005883a 	mov	r2,zero
    fe00:	00017106 	br	103c8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    fe04:	e0bffc17 	ldw	r2,-16(fp)
    fe08:	1000051e 	bne	r2,zero,fe20 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    fe0c:	e0800217 	ldw	r2,8(fp)
    fe10:	00c00104 	movi	r3,4
    fe14:	10c00005 	stb	r3,0(r2)
        return (0);
    fe18:	0005883a 	mov	r2,zero
    fe1c:	00016a06 	br	103c8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    fe20:	e0bffd17 	ldw	r2,-12(fp)
    fe24:	1000051e 	bne	r2,zero,fe3c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    fe28:	e0800217 	ldw	r2,8(fp)
    fe2c:	00c00104 	movi	r3,4
    fe30:	10c00005 	stb	r3,0(r2)
        return (0);
    fe34:	0005883a 	mov	r2,zero
    fe38:	00016306 	br	103c8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    fe3c:	e0bffe17 	ldw	r2,-8(fp)
    fe40:	1000051e 	bne	r2,zero,fe58 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    fe44:	e0800217 	ldw	r2,8(fp)
    fe48:	00c00104 	movi	r3,4
    fe4c:	10c00005 	stb	r3,0(r2)
        return (0);
    fe50:	0005883a 	mov	r2,zero
    fe54:	00015c06 	br	103c8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    fe58:	e0bffd17 	ldw	r2,-12(fp)
    fe5c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    fe60:	e0bffc17 	ldw	r2,-16(fp)
    fe64:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    fe68:	e0bfef17 	ldw	r2,-68(fp)
    fe6c:	10800017 	ldw	r2,0(r2)
    fe70:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    fe74:	00001906 	br	fedc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    fe78:	e0bff017 	ldw	r2,-64(fp)
    fe7c:	10800003 	ldbu	r2,0(r2)
    fe80:	10803fcc 	andi	r2,r2,255
    fe84:	10c000a0 	cmpeqi	r3,r2,2
    fe88:	1800091e 	bne	r3,zero,feb0 <OSEventPendMulti+0xe4>
    fe8c:	10c000e0 	cmpeqi	r3,r2,3
    fe90:	1800091e 	bne	r3,zero,feb8 <OSEventPendMulti+0xec>
    fe94:	10800060 	cmpeqi	r2,r2,1
    fe98:	1000091e 	bne	r2,zero,fec0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    fe9c:	e0800217 	ldw	r2,8(fp)
    fea0:	00c00044 	movi	r3,1
    fea4:	10c00005 	stb	r3,0(r2)
                 return (0);
    fea8:	0005883a 	mov	r2,zero
    feac:	00014606 	br	103c8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    feb0:	0001883a 	nop
    feb4:	00000306 	br	fec4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    feb8:	0001883a 	nop
    febc:	00000106 	br	fec4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    fec0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    fec4:	e0bfef17 	ldw	r2,-68(fp)
    fec8:	10800104 	addi	r2,r2,4
    fecc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    fed0:	e0bfef17 	ldw	r2,-68(fp)
    fed4:	10800017 	ldw	r2,0(r2)
    fed8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    fedc:	e0bff017 	ldw	r2,-64(fp)
    fee0:	103fe51e 	bne	r2,zero,fe78 <__alt_mem_Flash_flash_data+0xf400fe78>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    fee4:	d0a80b03 	ldbu	r2,-24532(gp)
    fee8:	10803fcc 	andi	r2,r2,255
    feec:	10000526 	beq	r2,zero,ff04 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    fef0:	e0800217 	ldw	r2,8(fp)
    fef4:	00c00084 	movi	r3,2
    fef8:	10c00005 	stb	r3,0(r2)
        return (0);
    fefc:	0005883a 	mov	r2,zero
    ff00:	00013106 	br	103c8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    ff04:	d0a7fd03 	ldbu	r2,-24588(gp)
    ff08:	10803fcc 	andi	r2,r2,255
    ff0c:	10000526 	beq	r2,zero,ff24 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    ff10:	e0800217 	ldw	r2,8(fp)
    ff14:	00c00344 	movi	r3,13
    ff18:	10c00005 	stb	r3,0(r2)
        return (0);
    ff1c:	0005883a 	mov	r2,zero
    ff20:	00012906 	br	103c8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff24:	0005303a 	rdctl	r2,status
    ff28:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff2c:	e0fff517 	ldw	r3,-44(fp)
    ff30:	00bfff84 	movi	r2,-2
    ff34:	1884703a 	and	r2,r3,r2
    ff38:	1001703a 	wrctl	status,r2
  
  return context;
    ff3c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    ff40:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    ff44:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    ff48:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    ff4c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    ff58:	e0bfef17 	ldw	r2,-68(fp)
    ff5c:	10800017 	ldw	r2,0(r2)
    ff60:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    ff64:	00008106 	br	1016c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    ff68:	e0bff017 	ldw	r2,-64(fp)
    ff6c:	10800003 	ldbu	r2,0(r2)
    ff70:	10803fcc 	andi	r2,r2,255
    ff74:	10c000a0 	cmpeqi	r3,r2,2
    ff78:	18003c1e 	bne	r3,zero,1006c <OSEventPendMulti+0x2a0>
    ff7c:	10c000e0 	cmpeqi	r3,r2,3
    ff80:	1800031e 	bne	r3,zero,ff90 <OSEventPendMulti+0x1c4>
    ff84:	10800060 	cmpeqi	r2,r2,1
    ff88:	10001e1e 	bne	r2,zero,10004 <OSEventPendMulti+0x238>
    ff8c:	00006606 	br	10128 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    ff90:	e0bff017 	ldw	r2,-64(fp)
    ff94:	1080020b 	ldhu	r2,8(r2)
    ff98:	10bfffcc 	andi	r2,r2,65535
    ff9c:	10001526 	beq	r2,zero,fff4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    ffa0:	e0bff017 	ldw	r2,-64(fp)
    ffa4:	1080020b 	ldhu	r2,8(r2)
    ffa8:	10bfffc4 	addi	r2,r2,-1
    ffac:	1007883a 	mov	r3,r2
    ffb0:	e0bff017 	ldw	r2,-64(fp)
    ffb4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    ffb8:	e0bffd17 	ldw	r2,-12(fp)
    ffbc:	10c00104 	addi	r3,r2,4
    ffc0:	e0fffd15 	stw	r3,-12(fp)
    ffc4:	e0fff017 	ldw	r3,-64(fp)
    ffc8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    ffcc:	00800044 	movi	r2,1
    ffd0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    ffd4:	e0bffe17 	ldw	r2,-8(fp)
    ffd8:	10c00104 	addi	r3,r2,4
    ffdc:	e0fffe15 	stw	r3,-8(fp)
    ffe0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    ffe4:	e0bff18b 	ldhu	r2,-58(fp)
    ffe8:	10800044 	addi	r2,r2,1
    ffec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    fff0:	00005806 	br	10154 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    fff4:	e0bff203 	ldbu	r2,-56(fp)
    fff8:	10800054 	ori	r2,r2,1
    fffc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10000:	00005406 	br	10154 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10004:	e0bff017 	ldw	r2,-64(fp)
   10008:	10800117 	ldw	r2,4(r2)
   1000c:	10001326 	beq	r2,zero,1005c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   10010:	e0bffe17 	ldw	r2,-8(fp)
   10014:	10c00104 	addi	r3,r2,4
   10018:	e0fffe15 	stw	r3,-8(fp)
   1001c:	e0fff017 	ldw	r3,-64(fp)
   10020:	18c00117 	ldw	r3,4(r3)
   10024:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   10028:	e0bff017 	ldw	r2,-64(fp)
   1002c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   10030:	e0bffd17 	ldw	r2,-12(fp)
   10034:	10c00104 	addi	r3,r2,4
   10038:	e0fffd15 	stw	r3,-12(fp)
   1003c:	e0fff017 	ldw	r3,-64(fp)
   10040:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   10044:	00800044 	movi	r2,1
   10048:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1004c:	e0bff18b 	ldhu	r2,-58(fp)
   10050:	10800044 	addi	r2,r2,1
   10054:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   10058:	00003e06 	br	10154 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1005c:	e0bff203 	ldbu	r2,-56(fp)
   10060:	10800094 	ori	r2,r2,2
   10064:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10068:	00003a06 	br	10154 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1006c:	e0bff017 	ldw	r2,-64(fp)
   10070:	10800117 	ldw	r2,4(r2)
   10074:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   10078:	e0bff417 	ldw	r2,-48(fp)
   1007c:	1080058b 	ldhu	r2,22(r2)
   10080:	10bfffcc 	andi	r2,r2,65535
   10084:	10002426 	beq	r2,zero,10118 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   10088:	e0bffe17 	ldw	r2,-8(fp)
   1008c:	10c00104 	addi	r3,r2,4
   10090:	e0fffe15 	stw	r3,-8(fp)
   10094:	e0fff417 	ldw	r3,-48(fp)
   10098:	18c00417 	ldw	r3,16(r3)
   1009c:	19400104 	addi	r5,r3,4
   100a0:	e13ff417 	ldw	r4,-48(fp)
   100a4:	21400415 	stw	r5,16(r4)
   100a8:	18c00017 	ldw	r3,0(r3)
   100ac:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   100b0:	e0bff417 	ldw	r2,-48(fp)
   100b4:	10c00417 	ldw	r3,16(r2)
   100b8:	e0bff417 	ldw	r2,-48(fp)
   100bc:	10800217 	ldw	r2,8(r2)
   100c0:	1880041e 	bne	r3,r2,100d4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   100c4:	e0bff417 	ldw	r2,-48(fp)
   100c8:	10c00117 	ldw	r3,4(r2)
   100cc:	e0bff417 	ldw	r2,-48(fp)
   100d0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   100d4:	e0bff417 	ldw	r2,-48(fp)
   100d8:	1080058b 	ldhu	r2,22(r2)
   100dc:	10bfffc4 	addi	r2,r2,-1
   100e0:	1007883a 	mov	r3,r2
   100e4:	e0bff417 	ldw	r2,-48(fp)
   100e8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   100ec:	e0bffd17 	ldw	r2,-12(fp)
   100f0:	10c00104 	addi	r3,r2,4
   100f4:	e0fffd15 	stw	r3,-12(fp)
   100f8:	e0fff017 	ldw	r3,-64(fp)
   100fc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   10100:	00800044 	movi	r2,1
   10104:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   10108:	e0bff18b 	ldhu	r2,-58(fp)
   1010c:	10800044 	addi	r2,r2,1
   10110:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   10114:	00000f06 	br	10154 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   10118:	e0bff203 	ldbu	r2,-56(fp)
   1011c:	10800114 	ori	r2,r2,4
   10120:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10124:	00000b06 	br	10154 <OSEventPendMulti+0x388>
   10128:	e0bff317 	ldw	r2,-52(fp)
   1012c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10130:	e0bff617 	ldw	r2,-40(fp)
   10134:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   10138:	e0bffd17 	ldw	r2,-12(fp)
   1013c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   10140:	e0800217 	ldw	r2,8(fp)
   10144:	00c00044 	movi	r3,1
   10148:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1014c:	e0bff18b 	ldhu	r2,-58(fp)
   10150:	00009d06 	br	103c8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   10154:	e0bfef17 	ldw	r2,-68(fp)
   10158:	10800104 	addi	r2,r2,4
   1015c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10160:	e0bfef17 	ldw	r2,-68(fp)
   10164:	10800017 	ldw	r2,0(r2)
   10168:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1016c:	e0bff017 	ldw	r2,-64(fp)
   10170:	103f7d1e 	bne	r2,zero,ff68 <__alt_mem_Flash_flash_data+0xf400ff68>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   10174:	e0bff103 	ldbu	r2,-60(fp)
   10178:	10800058 	cmpnei	r2,r2,1
   1017c:	10000a1e 	bne	r2,zero,101a8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   10180:	e0bffd17 	ldw	r2,-12(fp)
   10184:	10000015 	stw	zero,0(r2)
   10188:	e0bff317 	ldw	r2,-52(fp)
   1018c:	e0bff715 	stw	r2,-36(fp)
   10190:	e0bff717 	ldw	r2,-36(fp)
   10194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   10198:	e0800217 	ldw	r2,8(fp)
   1019c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   101a0:	e0bff18b 	ldhu	r2,-58(fp)
   101a4:	00008806 	br	103c8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   101a8:	d0a80c17 	ldw	r2,-24528(gp)
   101ac:	d0e80c17 	ldw	r3,-24528(gp)
   101b0:	19000c03 	ldbu	r4,48(r3)
   101b4:	e0fff203 	ldbu	r3,-56(fp)
   101b8:	20c6b03a 	or	r3,r4,r3
   101bc:	1809883a 	mov	r4,r3
   101c0:	00ffe004 	movi	r3,-128
   101c4:	20c6b03a 	or	r3,r4,r3
   101c8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   101cc:	d0a80c17 	ldw	r2,-24528(gp)
   101d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   101d4:	d0a80c17 	ldw	r2,-24528(gp)
   101d8:	e0ffff0b 	ldhu	r3,-4(fp)
   101dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   101e0:	e13ffc17 	ldw	r4,-16(fp)
   101e4:	0010d140 	call	10d14 <OS_EventTaskWaitMulti>
   101e8:	e0bff317 	ldw	r2,-52(fp)
   101ec:	e0bff815 	stw	r2,-32(fp)
   101f0:	e0bff817 	ldw	r2,-32(fp)
   101f4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   101f8:	00114880 	call	11488 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101fc:	0005303a 	rdctl	r2,status
   10200:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10204:	e0fff917 	ldw	r3,-28(fp)
   10208:	00bfff84 	movi	r2,-2
   1020c:	1884703a 	and	r2,r3,r2
   10210:	1001703a 	wrctl	status,r2
  
  return context;
   10214:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   10218:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1021c:	d0a80c17 	ldw	r2,-24528(gp)
   10220:	10800c43 	ldbu	r2,49(r2)
   10224:	10803fcc 	andi	r2,r2,255
   10228:	10000226 	beq	r2,zero,10234 <OSEventPendMulti+0x468>
   1022c:	108000a0 	cmpeqi	r2,r2,2
   10230:	10001826 	beq	r2,zero,10294 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   10234:	d0a80c17 	ldw	r2,-24528(gp)
   10238:	10800717 	ldw	r2,28(r2)
   1023c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   10240:	e0bff017 	ldw	r2,-64(fp)
   10244:	10000b26 	beq	r2,zero,10274 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   10248:	e0bffd17 	ldw	r2,-12(fp)
   1024c:	10c00104 	addi	r3,r2,4
   10250:	e0fffd15 	stw	r3,-12(fp)
   10254:	e0fff017 	ldw	r3,-64(fp)
   10258:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1025c:	e0bffd17 	ldw	r2,-12(fp)
   10260:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   10264:	e0bff18b 	ldhu	r2,-58(fp)
   10268:	10800044 	addi	r2,r2,1
   1026c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   10270:	00000d06 	br	102a8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   10274:	d0a80c17 	ldw	r2,-24528(gp)
   10278:	00c00044 	movi	r3,1
   1027c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10280:	d0a80c17 	ldw	r2,-24528(gp)
   10284:	1009883a 	mov	r4,r2
   10288:	e17ffc17 	ldw	r5,-16(fp)
   1028c:	0010f140 	call	10f14 <OS_EventTaskRemoveMulti>
             }
			 break;
   10290:	00000506 	br	102a8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10294:	d0a80c17 	ldw	r2,-24528(gp)
   10298:	1009883a 	mov	r4,r2
   1029c:	e17ffc17 	ldw	r5,-16(fp)
   102a0:	0010f140 	call	10f14 <OS_EventTaskRemoveMulti>
             break;
   102a4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   102a8:	d0a80c17 	ldw	r2,-24528(gp)
   102ac:	10800c43 	ldbu	r2,49(r2)
   102b0:	10803fcc 	andi	r2,r2,255
   102b4:	10000326 	beq	r2,zero,102c4 <OSEventPendMulti+0x4f8>
   102b8:	108000a0 	cmpeqi	r2,r2,2
   102bc:	1000231e 	bne	r2,zero,1034c <OSEventPendMulti+0x580>
   102c0:	00002a06 	br	1036c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   102c4:	e0bff017 	ldw	r2,-64(fp)
   102c8:	10800003 	ldbu	r2,0(r2)
   102cc:	10803fcc 	andi	r2,r2,255
   102d0:	0080100e 	bge	zero,r2,10314 <OSEventPendMulti+0x548>
   102d4:	10c000d0 	cmplti	r3,r2,3
   102d8:	1800071e 	bne	r3,zero,102f8 <OSEventPendMulti+0x52c>
   102dc:	108000e0 	cmpeqi	r2,r2,3
   102e0:	10000c26 	beq	r2,zero,10314 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   102e4:	e0bffe17 	ldw	r2,-8(fp)
   102e8:	10c00104 	addi	r3,r2,4
   102ec:	e0fffe15 	stw	r3,-8(fp)
   102f0:	10000015 	stw	zero,0(r2)
                      break;
   102f4:	00001206 	br	10340 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   102f8:	e0bffe17 	ldw	r2,-8(fp)
   102fc:	10c00104 	addi	r3,r2,4
   10300:	e0fffe15 	stw	r3,-8(fp)
   10304:	d0e80c17 	ldw	r3,-24528(gp)
   10308:	18c00917 	ldw	r3,36(r3)
   1030c:	10c00015 	stw	r3,0(r2)
                      break;
   10310:	00000b06 	br	10340 <OSEventPendMulti+0x574>
   10314:	e0bff317 	ldw	r2,-52(fp)
   10318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1031c:	e0bffa17 	ldw	r2,-24(fp)
   10320:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1032c:	e0800217 	ldw	r2,8(fp)
   10330:	00c00044 	movi	r3,1
   10334:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   10338:	e0bff18b 	ldhu	r2,-58(fp)
   1033c:	00002206 	br	103c8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   10340:	e0800217 	ldw	r2,8(fp)
   10344:	10000005 	stb	zero,0(r2)
             break;
   10348:	00001006 	br	1038c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1034c:	e0bffe17 	ldw	r2,-8(fp)
   10350:	10c00104 	addi	r3,r2,4
   10354:	e0fffe15 	stw	r3,-8(fp)
   10358:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1035c:	e0800217 	ldw	r2,8(fp)
   10360:	00c00384 	movi	r3,14
   10364:	10c00005 	stb	r3,0(r2)
             break;
   10368:	00000806 	br	1038c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1036c:	e0bffe17 	ldw	r2,-8(fp)
   10370:	10c00104 	addi	r3,r2,4
   10374:	e0fffe15 	stw	r3,-8(fp)
   10378:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1037c:	e0800217 	ldw	r2,8(fp)
   10380:	00c00284 	movi	r3,10
   10384:	10c00005 	stb	r3,0(r2)
             break;
   10388:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1038c:	d0a80c17 	ldw	r2,-24528(gp)
   10390:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   10394:	d0a80c17 	ldw	r2,-24528(gp)
   10398:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1039c:	d0a80c17 	ldw	r2,-24528(gp)
   103a0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   103a4:	d0a80c17 	ldw	r2,-24528(gp)
   103a8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   103ac:	d0a80c17 	ldw	r2,-24528(gp)
   103b0:	10000915 	stw	zero,36(r2)
   103b4:	e0bff317 	ldw	r2,-52(fp)
   103b8:	e0bffb15 	stw	r2,-20(fp)
   103bc:	e0bffb17 	ldw	r2,-20(fp)
   103c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   103c4:	e0bff18b 	ldhu	r2,-58(fp)
}
   103c8:	e037883a 	mov	sp,fp
   103cc:	dfc00117 	ldw	ra,4(sp)
   103d0:	df000017 	ldw	fp,0(sp)
   103d4:	dec00204 	addi	sp,sp,8
   103d8:	f800283a 	ret

000103dc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   103dc:	defffe04 	addi	sp,sp,-8
   103e0:	dfc00115 	stw	ra,4(sp)
   103e4:	df000015 	stw	fp,0(sp)
   103e8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   103ec:	001af340 	call	1af34 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   103f0:	00111500 	call	11150 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   103f4:	00111940 	call	11194 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   103f8:	00112f40 	call	112f4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   103fc:	00110740 	call	11074 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   10400:	00132740 	call	13274 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   10404:	0013bbc0 	call	13bbc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   10408:	0014df00 	call	14df0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   1040c:	00111fc0 	call	111fc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   10410:	00112780 	call	11278 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   10414:	001af500 	call	1af50 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   10418:	0011b600 	call	11b60 <OSDebugInit>
#endif
}
   1041c:	e037883a 	mov	sp,fp
   10420:	dfc00117 	ldw	ra,4(sp)
   10424:	df000017 	ldw	fp,0(sp)
   10428:	dec00204 	addi	sp,sp,8
   1042c:	f800283a 	ret

00010430 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   10430:	defffc04 	addi	sp,sp,-16
   10434:	df000315 	stw	fp,12(sp)
   10438:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1043c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   10440:	d0a7fd43 	ldbu	r2,-24587(gp)
   10444:	10803fcc 	andi	r2,r2,255
   10448:	10800058 	cmpnei	r2,r2,1
   1044c:	1000131e 	bne	r2,zero,1049c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10450:	0005303a 	rdctl	r2,status
   10454:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10458:	e0fffe17 	ldw	r3,-8(fp)
   1045c:	00bfff84 	movi	r2,-2
   10460:	1884703a 	and	r2,r3,r2
   10464:	1001703a 	wrctl	status,r2
  
  return context;
   10468:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1046c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   10470:	d0a80b03 	ldbu	r2,-24532(gp)
   10474:	10803fcc 	andi	r2,r2,255
   10478:	10803fe0 	cmpeqi	r2,r2,255
   1047c:	1000031e 	bne	r2,zero,1048c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   10480:	d0a80b03 	ldbu	r2,-24532(gp)
   10484:	10800044 	addi	r2,r2,1
   10488:	d0a80b05 	stb	r2,-24532(gp)
   1048c:	e0bffd17 	ldw	r2,-12(fp)
   10490:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10494:	e0bfff17 	ldw	r2,-4(fp)
   10498:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   1049c:	e037883a 	mov	sp,fp
   104a0:	df000017 	ldw	fp,0(sp)
   104a4:	dec00104 	addi	sp,sp,4
   104a8:	f800283a 	ret

000104ac <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   104ac:	defffb04 	addi	sp,sp,-20
   104b0:	dfc00415 	stw	ra,16(sp)
   104b4:	df000315 	stw	fp,12(sp)
   104b8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   104bc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   104c0:	d0a7fd43 	ldbu	r2,-24587(gp)
   104c4:	10803fcc 	andi	r2,r2,255
   104c8:	10800058 	cmpnei	r2,r2,1
   104cc:	10002f1e 	bne	r2,zero,1058c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104d0:	0005303a 	rdctl	r2,status
   104d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104d8:	e0fffe17 	ldw	r3,-8(fp)
   104dc:	00bfff84 	movi	r2,-2
   104e0:	1884703a 	and	r2,r3,r2
   104e4:	1001703a 	wrctl	status,r2
  
  return context;
   104e8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   104ec:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   104f0:	d0a80b03 	ldbu	r2,-24532(gp)
   104f4:	10803fcc 	andi	r2,r2,255
   104f8:	10000326 	beq	r2,zero,10508 <OSIntExit+0x5c>
            OSIntNesting--;
   104fc:	d0a80b03 	ldbu	r2,-24532(gp)
   10500:	10bfffc4 	addi	r2,r2,-1
   10504:	d0a80b05 	stb	r2,-24532(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   10508:	d0a80b03 	ldbu	r2,-24532(gp)
   1050c:	10803fcc 	andi	r2,r2,255
   10510:	10001a1e 	bne	r2,zero,1057c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   10514:	d0a7fd03 	ldbu	r2,-24588(gp)
   10518:	10803fcc 	andi	r2,r2,255
   1051c:	1000171e 	bne	r2,zero,1057c <OSIntExit+0xd0>
                OS_SchedNew();
   10520:	00115540 	call	11554 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   10524:	d0e7ff03 	ldbu	r3,-24580(gp)
   10528:	d0a7ff43 	ldbu	r2,-24579(gp)
   1052c:	18c03fcc 	andi	r3,r3,255
   10530:	10803fcc 	andi	r2,r2,255
   10534:	18801126 	beq	r3,r2,1057c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   10538:	d0a7ff03 	ldbu	r2,-24580(gp)
   1053c:	10c03fcc 	andi	r3,r2,255
   10540:	008000b4 	movhi	r2,2
   10544:	108c3004 	addi	r2,r2,12480
   10548:	18c7883a 	add	r3,r3,r3
   1054c:	18c7883a 	add	r3,r3,r3
   10550:	10c5883a 	add	r2,r2,r3
   10554:	10800017 	ldw	r2,0(r2)
   10558:	d0a80715 	stw	r2,-24548(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1055c:	d0a80717 	ldw	r2,-24548(gp)
   10560:	10c00e17 	ldw	r3,56(r2)
   10564:	18c00044 	addi	r3,r3,1
   10568:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1056c:	d0a80217 	ldw	r2,-24568(gp)
   10570:	10800044 	addi	r2,r2,1
   10574:	d0a80215 	stw	r2,-24568(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   10578:	001ac740 	call	1ac74 <OSCtxSw>
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10584:	e0bfff17 	ldw	r2,-4(fp)
   10588:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1058c:	e037883a 	mov	sp,fp
   10590:	dfc00117 	ldw	ra,4(sp)
   10594:	df000017 	ldw	fp,0(sp)
   10598:	dec00204 	addi	sp,sp,8
   1059c:	f800283a 	ret

000105a0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   105a0:	defffc04 	addi	sp,sp,-16
   105a4:	df000315 	stw	fp,12(sp)
   105a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   105ac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   105b0:	d0a7fd43 	ldbu	r2,-24587(gp)
   105b4:	10803fcc 	andi	r2,r2,255
   105b8:	10800058 	cmpnei	r2,r2,1
   105bc:	1000161e 	bne	r2,zero,10618 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105c0:	0005303a 	rdctl	r2,status
   105c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105c8:	e0fffe17 	ldw	r3,-8(fp)
   105cc:	00bfff84 	movi	r2,-2
   105d0:	1884703a 	and	r2,r3,r2
   105d4:	1001703a 	wrctl	status,r2
  
  return context;
   105d8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   105dc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   105e0:	d0a80b03 	ldbu	r2,-24532(gp)
   105e4:	10803fcc 	andi	r2,r2,255
   105e8:	1000071e 	bne	r2,zero,10608 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   105ec:	d0a7fd03 	ldbu	r2,-24588(gp)
   105f0:	10803fcc 	andi	r2,r2,255
   105f4:	10803fe0 	cmpeqi	r2,r2,255
   105f8:	1000031e 	bne	r2,zero,10608 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   105fc:	d0a7fd03 	ldbu	r2,-24588(gp)
   10600:	10800044 	addi	r2,r2,1
   10604:	d0a7fd05 	stb	r2,-24588(gp)
   10608:	e0bffd17 	ldw	r2,-12(fp)
   1060c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10610:	e0bfff17 	ldw	r2,-4(fp)
   10614:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10618:	e037883a 	mov	sp,fp
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00104 	addi	sp,sp,4
   10624:	f800283a 	ret

00010628 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   10628:	defff804 	addi	sp,sp,-32
   1062c:	dfc00715 	stw	ra,28(sp)
   10630:	df000615 	stw	fp,24(sp)
   10634:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10638:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1063c:	d0a7fd43 	ldbu	r2,-24587(gp)
   10640:	10803fcc 	andi	r2,r2,255
   10644:	10800058 	cmpnei	r2,r2,1
   10648:	1000281e 	bne	r2,zero,106ec <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1064c:	0005303a 	rdctl	r2,status
   10650:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10654:	e0fffb17 	ldw	r3,-20(fp)
   10658:	00bfff84 	movi	r2,-2
   1065c:	1884703a 	and	r2,r3,r2
   10660:	1001703a 	wrctl	status,r2
  
  return context;
   10664:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   10668:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1066c:	d0a7fd03 	ldbu	r2,-24588(gp)
   10670:	10803fcc 	andi	r2,r2,255
   10674:	10001926 	beq	r2,zero,106dc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   10678:	d0a7fd03 	ldbu	r2,-24588(gp)
   1067c:	10bfffc4 	addi	r2,r2,-1
   10680:	d0a7fd05 	stb	r2,-24588(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   10684:	d0a7fd03 	ldbu	r2,-24588(gp)
   10688:	10803fcc 	andi	r2,r2,255
   1068c:	10000e1e 	bne	r2,zero,106c8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   10690:	d0a80b03 	ldbu	r2,-24532(gp)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	1000061e 	bne	r2,zero,106b4 <OSSchedUnlock+0x8c>
   1069c:	e0bffa17 	ldw	r2,-24(fp)
   106a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106a4:	e0bffc17 	ldw	r2,-16(fp)
   106a8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   106ac:	00114880 	call	11488 <OS_Sched>
   106b0:	00000e06 	br	106ec <OSSchedUnlock+0xc4>
   106b4:	e0bffa17 	ldw	r2,-24(fp)
   106b8:	e0bffd15 	stw	r2,-12(fp)
   106bc:	e0bffd17 	ldw	r2,-12(fp)
   106c0:	1001703a 	wrctl	status,r2
   106c4:	00000906 	br	106ec <OSSchedUnlock+0xc4>
   106c8:	e0bffa17 	ldw	r2,-24(fp)
   106cc:	e0bffe15 	stw	r2,-8(fp)
   106d0:	e0bffe17 	ldw	r2,-8(fp)
   106d4:	1001703a 	wrctl	status,r2
   106d8:	00000406 	br	106ec <OSSchedUnlock+0xc4>
   106dc:	e0bffa17 	ldw	r2,-24(fp)
   106e0:	e0bfff15 	stw	r2,-4(fp)
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   106ec:	e037883a 	mov	sp,fp
   106f0:	dfc00117 	ldw	ra,4(sp)
   106f4:	df000017 	ldw	fp,0(sp)
   106f8:	dec00204 	addi	sp,sp,8
   106fc:	f800283a 	ret

00010700 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   10700:	defffe04 	addi	sp,sp,-8
   10704:	dfc00115 	stw	ra,4(sp)
   10708:	df000015 	stw	fp,0(sp)
   1070c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   10710:	d0a7fd43 	ldbu	r2,-24587(gp)
   10714:	10803fcc 	andi	r2,r2,255
   10718:	10000f1e 	bne	r2,zero,10758 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   1071c:	00115540 	call	11554 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   10720:	d0a7ff03 	ldbu	r2,-24580(gp)
   10724:	d0a7ff45 	stb	r2,-24579(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   10728:	d0a7ff03 	ldbu	r2,-24580(gp)
   1072c:	10c03fcc 	andi	r3,r2,255
   10730:	008000b4 	movhi	r2,2
   10734:	108c3004 	addi	r2,r2,12480
   10738:	18c7883a 	add	r3,r3,r3
   1073c:	18c7883a 	add	r3,r3,r3
   10740:	10c5883a 	add	r2,r2,r3
   10744:	10800017 	ldw	r2,0(r2)
   10748:	d0a80715 	stw	r2,-24548(gp)
        OSTCBCur      = OSTCBHighRdy;
   1074c:	d0a80717 	ldw	r2,-24548(gp)
   10750:	d0a80c15 	stw	r2,-24528(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   10754:	001ad000 	call	1ad00 <OSStartHighRdy>
    }
}
   10758:	e037883a 	mov	sp,fp
   1075c:	dfc00117 	ldw	ra,4(sp)
   10760:	df000017 	ldw	fp,0(sp)
   10764:	dec00204 	addi	sp,sp,8
   10768:	f800283a 	ret

0001076c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1076c:	defff904 	addi	sp,sp,-28
   10770:	dfc00615 	stw	ra,24(sp)
   10774:	df000515 	stw	fp,20(sp)
   10778:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1077c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   10780:	01000084 	movi	r4,2
   10784:	00172980 	call	17298 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10788:	0005303a 	rdctl	r2,status
   1078c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10790:	e0fffc17 	ldw	r3,-16(fp)
   10794:	00bfff84 	movi	r2,-2
   10798:	1884703a 	and	r2,r3,r2
   1079c:	1001703a 	wrctl	status,r2
  
  return context;
   107a0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   107a4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   107a8:	d027fe15 	stw	zero,-24584(gp)
   107ac:	e0bffb17 	ldw	r2,-20(fp)
   107b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107b4:	e0bffd17 	ldw	r2,-12(fp)
   107b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   107bc:	0009883a 	mov	r4,zero
   107c0:	00172980 	call	17298 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107c4:	0005303a 	rdctl	r2,status
   107c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107cc:	e0fffe17 	ldw	r3,-8(fp)
   107d0:	00bfff84 	movi	r2,-2
   107d4:	1884703a 	and	r2,r3,r2
   107d8:	1001703a 	wrctl	status,r2
  
  return context;
   107dc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   107e0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   107e4:	d0a7fe17 	ldw	r2,-24584(gp)
   107e8:	d0a80315 	stw	r2,-24564(gp)
    OSStatRdy    = OS_TRUE;
   107ec:	00800044 	movi	r2,1
   107f0:	d0a80f05 	stb	r2,-24516(gp)
   107f4:	e0bffb17 	ldw	r2,-20(fp)
   107f8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107fc:	e0bfff17 	ldw	r2,-4(fp)
   10800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   10804:	e037883a 	mov	sp,fp
   10808:	dfc00117 	ldw	ra,4(sp)
   1080c:	df000017 	ldw	fp,0(sp)
   10810:	dec00204 	addi	sp,sp,8
   10814:	f800283a 	ret

00010818 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   10818:	defff704 	addi	sp,sp,-36
   1081c:	dfc00815 	stw	ra,32(sp)
   10820:	df000715 	stw	fp,28(sp)
   10824:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10828:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1082c:	001af180 	call	1af18 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10830:	0005303a 	rdctl	r2,status
   10834:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10838:	e0fffc17 	ldw	r3,-16(fp)
   1083c:	00bfff84 	movi	r2,-2
   10840:	1884703a 	and	r2,r3,r2
   10844:	1001703a 	wrctl	status,r2
  
  return context;
   10848:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1084c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   10850:	d0a80d17 	ldw	r2,-24524(gp)
   10854:	10800044 	addi	r2,r2,1
   10858:	d0a80d15 	stw	r2,-24524(gp)
   1085c:	e0bffb17 	ldw	r2,-20(fp)
   10860:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10864:	e0bffd17 	ldw	r2,-12(fp)
   10868:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1086c:	d0a7fd43 	ldbu	r2,-24587(gp)
   10870:	10803fcc 	andi	r2,r2,255
   10874:	10800058 	cmpnei	r2,r2,1
   10878:	1000691e 	bne	r2,zero,10a20 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1087c:	d0a80103 	ldbu	r2,-24572(gp)
   10880:	10803fcc 	andi	r2,r2,255
   10884:	10c00060 	cmpeqi	r3,r2,1
   10888:	1800061e 	bne	r3,zero,108a4 <OSTimeTick+0x8c>
   1088c:	10c000a0 	cmpeqi	r3,r2,2
   10890:	1800061e 	bne	r3,zero,108ac <OSTimeTick+0x94>
   10894:	10000a1e 	bne	r2,zero,108c0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   10898:	00800044 	movi	r2,1
   1089c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   108a0:	00000b06 	br	108d0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   108a4:	e03ffa05 	stb	zero,-24(fp)
                 break;
   108a8:	00000906 	br	108d0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   108ac:	00800044 	movi	r2,1
   108b0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   108b4:	00800044 	movi	r2,1
   108b8:	d0a80105 	stb	r2,-24572(gp)
                 break;
   108bc:	00000406 	br	108d0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   108c0:	00800044 	movi	r2,1
   108c4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   108c8:	d0280105 	stb	zero,-24572(gp)
                 break;
   108cc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   108d0:	e0bffa03 	ldbu	r2,-24(fp)
   108d4:	1000011e 	bne	r2,zero,108dc <OSTimeTick+0xc4>
            return;
   108d8:	00005106 	br	10a20 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   108dc:	d0a80017 	ldw	r2,-24576(gp)
   108e0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   108e4:	00004906 	br	10a0c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108e8:	0005303a 	rdctl	r2,status
   108ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108f0:	e0fffe17 	ldw	r3,-8(fp)
   108f4:	00bfff84 	movi	r2,-2
   108f8:	1884703a 	and	r2,r3,r2
   108fc:	1001703a 	wrctl	status,r2
  
  return context;
   10900:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   10904:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   10908:	e0bff917 	ldw	r2,-28(fp)
   1090c:	10800b8b 	ldhu	r2,46(r2)
   10910:	10bfffcc 	andi	r2,r2,65535
   10914:	10003626 	beq	r2,zero,109f0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   10918:	e0bff917 	ldw	r2,-28(fp)
   1091c:	10800b8b 	ldhu	r2,46(r2)
   10920:	10bfffc4 	addi	r2,r2,-1
   10924:	1007883a 	mov	r3,r2
   10928:	e0bff917 	ldw	r2,-28(fp)
   1092c:	10c00b8d 	sth	r3,46(r2)
   10930:	e0bff917 	ldw	r2,-28(fp)
   10934:	10800b8b 	ldhu	r2,46(r2)
   10938:	10bfffcc 	andi	r2,r2,65535
   1093c:	10002c1e 	bne	r2,zero,109f0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10940:	e0bff917 	ldw	r2,-28(fp)
   10944:	10800c03 	ldbu	r2,48(r2)
   10948:	10803fcc 	andi	r2,r2,255
   1094c:	10800dcc 	andi	r2,r2,55
   10950:	10000b26 	beq	r2,zero,10980 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   10954:	e0bff917 	ldw	r2,-28(fp)
   10958:	10c00c03 	ldbu	r3,48(r2)
   1095c:	00bff204 	movi	r2,-56
   10960:	1884703a 	and	r2,r3,r2
   10964:	1007883a 	mov	r3,r2
   10968:	e0bff917 	ldw	r2,-28(fp)
   1096c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   10970:	e0bff917 	ldw	r2,-28(fp)
   10974:	00c00044 	movi	r3,1
   10978:	10c00c45 	stb	r3,49(r2)
   1097c:	00000206 	br	10988 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   10980:	e0bff917 	ldw	r2,-28(fp)
   10984:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   10988:	e0bff917 	ldw	r2,-28(fp)
   1098c:	10800c03 	ldbu	r2,48(r2)
   10990:	10803fcc 	andi	r2,r2,255
   10994:	1080020c 	andi	r2,r2,8
   10998:	1000151e 	bne	r2,zero,109f0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1099c:	e0bff917 	ldw	r2,-28(fp)
   109a0:	10c00d83 	ldbu	r3,54(r2)
   109a4:	d0a80903 	ldbu	r2,-24540(gp)
   109a8:	1884b03a 	or	r2,r3,r2
   109ac:	d0a80905 	stb	r2,-24540(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   109b0:	e0bff917 	ldw	r2,-28(fp)
   109b4:	10800d03 	ldbu	r2,52(r2)
   109b8:	10c03fcc 	andi	r3,r2,255
   109bc:	e0bff917 	ldw	r2,-28(fp)
   109c0:	10800d03 	ldbu	r2,52(r2)
   109c4:	11003fcc 	andi	r4,r2,255
   109c8:	d0a80944 	addi	r2,gp,-24539
   109cc:	2085883a 	add	r2,r4,r2
   109d0:	11000003 	ldbu	r4,0(r2)
   109d4:	e0bff917 	ldw	r2,-28(fp)
   109d8:	10800d43 	ldbu	r2,53(r2)
   109dc:	2084b03a 	or	r2,r4,r2
   109e0:	1009883a 	mov	r4,r2
   109e4:	d0a80944 	addi	r2,gp,-24539
   109e8:	1885883a 	add	r2,r3,r2
   109ec:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   109f0:	e0bff917 	ldw	r2,-28(fp)
   109f4:	10800517 	ldw	r2,20(r2)
   109f8:	e0bff915 	stw	r2,-28(fp)
   109fc:	e0bffb17 	ldw	r2,-20(fp)
   10a00:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a04:	e0bfff17 	ldw	r2,-4(fp)
   10a08:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10a0c:	e0bff917 	ldw	r2,-28(fp)
   10a10:	10800c83 	ldbu	r2,50(r2)
   10a14:	10803fcc 	andi	r2,r2,255
   10a18:	10800518 	cmpnei	r2,r2,20
   10a1c:	103fb21e 	bne	r2,zero,108e8 <__alt_mem_Flash_flash_data+0xf40108e8>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   10a20:	e037883a 	mov	sp,fp
   10a24:	dfc00117 	ldw	ra,4(sp)
   10a28:	df000017 	ldw	fp,0(sp)
   10a2c:	dec00204 	addi	sp,sp,8
   10a30:	f800283a 	ret

00010a34 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10a34:	deffff04 	addi	sp,sp,-4
   10a38:	df000015 	stw	fp,0(sp)
   10a3c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10a40:	00804784 	movi	r2,286
}
   10a44:	e037883a 	mov	sp,fp
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00104 	addi	sp,sp,4
   10a50:	f800283a 	ret

00010a54 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10a54:	deffff04 	addi	sp,sp,-4
   10a58:	df000015 	stw	fp,0(sp)
   10a5c:	d839883a 	mov	fp,sp
}
   10a60:	e037883a 	mov	sp,fp
   10a64:	df000017 	ldw	fp,0(sp)
   10a68:	dec00104 	addi	sp,sp,4
   10a6c:	f800283a 	ret

00010a70 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10a70:	defff804 	addi	sp,sp,-32
   10a74:	dfc00715 	stw	ra,28(sp)
   10a78:	df000615 	stw	fp,24(sp)
   10a7c:	df000604 	addi	fp,sp,24
   10a80:	e13ffc15 	stw	r4,-16(fp)
   10a84:	e17ffd15 	stw	r5,-12(fp)
   10a88:	3007883a 	mov	r3,r6
   10a8c:	3805883a 	mov	r2,r7
   10a90:	e0fffe05 	stb	r3,-8(fp)
   10a94:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10a98:	e0bffc17 	ldw	r2,-16(fp)
   10a9c:	10800283 	ldbu	r2,10(r2)
   10aa0:	10c03fcc 	andi	r3,r2,255
   10aa4:	008000b4 	movhi	r2,2
   10aa8:	10af5604 	addi	r2,r2,-17064
   10aac:	10c5883a 	add	r2,r2,r3
   10ab0:	10800003 	ldbu	r2,0(r2)
   10ab4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   10ab8:	e0bffa03 	ldbu	r2,-24(fp)
   10abc:	e0fffc17 	ldw	r3,-16(fp)
   10ac0:	1885883a 	add	r2,r3,r2
   10ac4:	10800204 	addi	r2,r2,8
   10ac8:	108000c3 	ldbu	r2,3(r2)
   10acc:	10c03fcc 	andi	r3,r2,255
   10ad0:	008000b4 	movhi	r2,2
   10ad4:	10af5604 	addi	r2,r2,-17064
   10ad8:	10c5883a 	add	r2,r2,r3
   10adc:	10800003 	ldbu	r2,0(r2)
   10ae0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   10ae4:	e0bffa03 	ldbu	r2,-24(fp)
   10ae8:	100490fa 	slli	r2,r2,3
   10aec:	1007883a 	mov	r3,r2
   10af0:	e0bffa43 	ldbu	r2,-23(fp)
   10af4:	1885883a 	add	r2,r3,r2
   10af8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   10afc:	e0fffa83 	ldbu	r3,-22(fp)
   10b00:	008000b4 	movhi	r2,2
   10b04:	108c3004 	addi	r2,r2,12480
   10b08:	18c7883a 	add	r3,r3,r3
   10b0c:	18c7883a 	add	r3,r3,r3
   10b10:	10c5883a 	add	r2,r2,r3
   10b14:	10800017 	ldw	r2,0(r2)
   10b18:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   10b1c:	e0bffb17 	ldw	r2,-20(fp)
   10b20:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   10b24:	e0bffb17 	ldw	r2,-20(fp)
   10b28:	e0fffd17 	ldw	r3,-12(fp)
   10b2c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   10b30:	e0bffb17 	ldw	r2,-20(fp)
   10b34:	10800c03 	ldbu	r2,48(r2)
   10b38:	1007883a 	mov	r3,r2
   10b3c:	e0bffe03 	ldbu	r2,-8(fp)
   10b40:	0084303a 	nor	r2,zero,r2
   10b44:	1884703a 	and	r2,r3,r2
   10b48:	1007883a 	mov	r3,r2
   10b4c:	e0bffb17 	ldw	r2,-20(fp)
   10b50:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   10b54:	e0bffb17 	ldw	r2,-20(fp)
   10b58:	e0ffff03 	ldbu	r3,-4(fp)
   10b5c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   10b60:	e0bffb17 	ldw	r2,-20(fp)
   10b64:	10800c03 	ldbu	r2,48(r2)
   10b68:	10803fcc 	andi	r2,r2,255
   10b6c:	1080020c 	andi	r2,r2,8
   10b70:	1000111e 	bne	r2,zero,10bb8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   10b74:	e0bffb17 	ldw	r2,-20(fp)
   10b78:	10c00d83 	ldbu	r3,54(r2)
   10b7c:	d0a80903 	ldbu	r2,-24540(gp)
   10b80:	1884b03a 	or	r2,r3,r2
   10b84:	d0a80905 	stb	r2,-24540(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   10b88:	e0fffa03 	ldbu	r3,-24(fp)
   10b8c:	e13ffa03 	ldbu	r4,-24(fp)
   10b90:	d0a80944 	addi	r2,gp,-24539
   10b94:	2085883a 	add	r2,r4,r2
   10b98:	11000003 	ldbu	r4,0(r2)
   10b9c:	e0bffb17 	ldw	r2,-20(fp)
   10ba0:	10800d43 	ldbu	r2,53(r2)
   10ba4:	2084b03a 	or	r2,r4,r2
   10ba8:	1009883a 	mov	r4,r2
   10bac:	d0a80944 	addi	r2,gp,-24539
   10bb0:	1885883a 	add	r2,r3,r2
   10bb4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   10bb8:	e13ffb17 	ldw	r4,-20(fp)
   10bbc:	e17ffc17 	ldw	r5,-16(fp)
   10bc0:	0010e600 	call	10e60 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   10bc4:	e0bffb17 	ldw	r2,-20(fp)
   10bc8:	10800817 	ldw	r2,32(r2)
   10bcc:	10000826 	beq	r2,zero,10bf0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   10bd0:	e0bffb17 	ldw	r2,-20(fp)
   10bd4:	10800817 	ldw	r2,32(r2)
   10bd8:	e13ffb17 	ldw	r4,-20(fp)
   10bdc:	100b883a 	mov	r5,r2
   10be0:	0010f140 	call	10f14 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   10be4:	e0bffb17 	ldw	r2,-20(fp)
   10be8:	e0fffc17 	ldw	r3,-16(fp)
   10bec:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   10bf0:	e0bffa83 	ldbu	r2,-22(fp)
}
   10bf4:	e037883a 	mov	sp,fp
   10bf8:	dfc00117 	ldw	ra,4(sp)
   10bfc:	df000017 	ldw	fp,0(sp)
   10c00:	dec00204 	addi	sp,sp,8
   10c04:	f800283a 	ret

00010c08 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   10c08:	defffd04 	addi	sp,sp,-12
   10c0c:	df000215 	stw	fp,8(sp)
   10c10:	df000204 	addi	fp,sp,8
   10c14:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   10c18:	d0a80c17 	ldw	r2,-24528(gp)
   10c1c:	e0ffff17 	ldw	r3,-4(fp)
   10c20:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   10c24:	d0a80c17 	ldw	r2,-24528(gp)
   10c28:	10800d03 	ldbu	r2,52(r2)
   10c2c:	10803fcc 	andi	r2,r2,255
   10c30:	d0e80c17 	ldw	r3,-24528(gp)
   10c34:	18c00d03 	ldbu	r3,52(r3)
   10c38:	18c03fcc 	andi	r3,r3,255
   10c3c:	e13fff17 	ldw	r4,-4(fp)
   10c40:	20c7883a 	add	r3,r4,r3
   10c44:	18c00204 	addi	r3,r3,8
   10c48:	190000c3 	ldbu	r4,3(r3)
   10c4c:	d0e80c17 	ldw	r3,-24528(gp)
   10c50:	18c00d43 	ldbu	r3,53(r3)
   10c54:	20c6b03a 	or	r3,r4,r3
   10c58:	1809883a 	mov	r4,r3
   10c5c:	e0ffff17 	ldw	r3,-4(fp)
   10c60:	1885883a 	add	r2,r3,r2
   10c64:	10800204 	addi	r2,r2,8
   10c68:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10c6c:	e0bfff17 	ldw	r2,-4(fp)
   10c70:	10c00283 	ldbu	r3,10(r2)
   10c74:	d0a80c17 	ldw	r2,-24528(gp)
   10c78:	10800d83 	ldbu	r2,54(r2)
   10c7c:	1884b03a 	or	r2,r3,r2
   10c80:	1007883a 	mov	r3,r2
   10c84:	e0bfff17 	ldw	r2,-4(fp)
   10c88:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10c8c:	d0a80c17 	ldw	r2,-24528(gp)
   10c90:	10800d03 	ldbu	r2,52(r2)
   10c94:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10c98:	e0fffe03 	ldbu	r3,-8(fp)
   10c9c:	e13ffe03 	ldbu	r4,-8(fp)
   10ca0:	d0a80944 	addi	r2,gp,-24539
   10ca4:	2085883a 	add	r2,r4,r2
   10ca8:	10800003 	ldbu	r2,0(r2)
   10cac:	1009883a 	mov	r4,r2
   10cb0:	d0a80c17 	ldw	r2,-24528(gp)
   10cb4:	10800d43 	ldbu	r2,53(r2)
   10cb8:	0084303a 	nor	r2,zero,r2
   10cbc:	2084703a 	and	r2,r4,r2
   10cc0:	1009883a 	mov	r4,r2
   10cc4:	d0a80944 	addi	r2,gp,-24539
   10cc8:	1885883a 	add	r2,r3,r2
   10ccc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10cd0:	e0fffe03 	ldbu	r3,-8(fp)
   10cd4:	d0a80944 	addi	r2,gp,-24539
   10cd8:	1885883a 	add	r2,r3,r2
   10cdc:	10800003 	ldbu	r2,0(r2)
   10ce0:	10803fcc 	andi	r2,r2,255
   10ce4:	1000071e 	bne	r2,zero,10d04 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   10ce8:	d0a80c17 	ldw	r2,-24528(gp)
   10cec:	10800d83 	ldbu	r2,54(r2)
   10cf0:	0084303a 	nor	r2,zero,r2
   10cf4:	1007883a 	mov	r3,r2
   10cf8:	d0a80903 	ldbu	r2,-24540(gp)
   10cfc:	1884703a 	and	r2,r3,r2
   10d00:	d0a80905 	stb	r2,-24540(gp)
    }
}
   10d04:	e037883a 	mov	sp,fp
   10d08:	df000017 	ldw	fp,0(sp)
   10d0c:	dec00104 	addi	sp,sp,4
   10d10:	f800283a 	ret

00010d14 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   10d14:	defffb04 	addi	sp,sp,-20
   10d18:	df000415 	stw	fp,16(sp)
   10d1c:	df000404 	addi	fp,sp,16
   10d20:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   10d24:	d0a80c17 	ldw	r2,-24528(gp)
   10d28:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   10d2c:	d0a80c17 	ldw	r2,-24528(gp)
   10d30:	e0ffff17 	ldw	r3,-4(fp)
   10d34:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   10d40:	e0bffc17 	ldw	r2,-16(fp)
   10d44:	10800017 	ldw	r2,0(r2)
   10d48:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   10d4c:	00002006 	br	10dd0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   10d50:	d0a80c17 	ldw	r2,-24528(gp)
   10d54:	10800d03 	ldbu	r2,52(r2)
   10d58:	10803fcc 	andi	r2,r2,255
   10d5c:	d0e80c17 	ldw	r3,-24528(gp)
   10d60:	18c00d03 	ldbu	r3,52(r3)
   10d64:	18c03fcc 	andi	r3,r3,255
   10d68:	e13ffd17 	ldw	r4,-12(fp)
   10d6c:	20c7883a 	add	r3,r4,r3
   10d70:	18c00204 	addi	r3,r3,8
   10d74:	190000c3 	ldbu	r4,3(r3)
   10d78:	d0e80c17 	ldw	r3,-24528(gp)
   10d7c:	18c00d43 	ldbu	r3,53(r3)
   10d80:	20c6b03a 	or	r3,r4,r3
   10d84:	1809883a 	mov	r4,r3
   10d88:	e0fffd17 	ldw	r3,-12(fp)
   10d8c:	1885883a 	add	r2,r3,r2
   10d90:	10800204 	addi	r2,r2,8
   10d94:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10d98:	e0bffd17 	ldw	r2,-12(fp)
   10d9c:	10c00283 	ldbu	r3,10(r2)
   10da0:	d0a80c17 	ldw	r2,-24528(gp)
   10da4:	10800d83 	ldbu	r2,54(r2)
   10da8:	1884b03a 	or	r2,r3,r2
   10dac:	1007883a 	mov	r3,r2
   10db0:	e0bffd17 	ldw	r2,-12(fp)
   10db4:	10c00285 	stb	r3,10(r2)
        pevents++;
   10db8:	e0bffc17 	ldw	r2,-16(fp)
   10dbc:	10800104 	addi	r2,r2,4
   10dc0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   10dc4:	e0bffc17 	ldw	r2,-16(fp)
   10dc8:	10800017 	ldw	r2,0(r2)
   10dcc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   10dd0:	e0bffd17 	ldw	r2,-12(fp)
   10dd4:	103fde1e 	bne	r2,zero,10d50 <__alt_mem_Flash_flash_data+0xf4010d50>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10dd8:	d0a80c17 	ldw	r2,-24528(gp)
   10ddc:	10800d03 	ldbu	r2,52(r2)
   10de0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10de4:	e0fffe03 	ldbu	r3,-8(fp)
   10de8:	e13ffe03 	ldbu	r4,-8(fp)
   10dec:	d0a80944 	addi	r2,gp,-24539
   10df0:	2085883a 	add	r2,r4,r2
   10df4:	10800003 	ldbu	r2,0(r2)
   10df8:	1009883a 	mov	r4,r2
   10dfc:	d0a80c17 	ldw	r2,-24528(gp)
   10e00:	10800d43 	ldbu	r2,53(r2)
   10e04:	0084303a 	nor	r2,zero,r2
   10e08:	2084703a 	and	r2,r4,r2
   10e0c:	1009883a 	mov	r4,r2
   10e10:	d0a80944 	addi	r2,gp,-24539
   10e14:	1885883a 	add	r2,r3,r2
   10e18:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10e1c:	e0fffe03 	ldbu	r3,-8(fp)
   10e20:	d0a80944 	addi	r2,gp,-24539
   10e24:	1885883a 	add	r2,r3,r2
   10e28:	10800003 	ldbu	r2,0(r2)
   10e2c:	10803fcc 	andi	r2,r2,255
   10e30:	1000071e 	bne	r2,zero,10e50 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   10e34:	d0a80c17 	ldw	r2,-24528(gp)
   10e38:	10800d83 	ldbu	r2,54(r2)
   10e3c:	0084303a 	nor	r2,zero,r2
   10e40:	1007883a 	mov	r3,r2
   10e44:	d0a80903 	ldbu	r2,-24540(gp)
   10e48:	1884703a 	and	r2,r3,r2
   10e4c:	d0a80905 	stb	r2,-24540(gp)
    }
}
   10e50:	e037883a 	mov	sp,fp
   10e54:	df000017 	ldw	fp,0(sp)
   10e58:	dec00104 	addi	sp,sp,4
   10e5c:	f800283a 	ret

00010e60 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   10e60:	defffc04 	addi	sp,sp,-16
   10e64:	df000315 	stw	fp,12(sp)
   10e68:	df000304 	addi	fp,sp,12
   10e6c:	e13ffe15 	stw	r4,-8(fp)
   10e70:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   10e74:	e0bffe17 	ldw	r2,-8(fp)
   10e78:	10800d03 	ldbu	r2,52(r2)
   10e7c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   10e80:	e0bffd03 	ldbu	r2,-12(fp)
   10e84:	e0fffd03 	ldbu	r3,-12(fp)
   10e88:	e13fff17 	ldw	r4,-4(fp)
   10e8c:	20c7883a 	add	r3,r4,r3
   10e90:	18c00204 	addi	r3,r3,8
   10e94:	18c000c3 	ldbu	r3,3(r3)
   10e98:	1809883a 	mov	r4,r3
   10e9c:	e0fffe17 	ldw	r3,-8(fp)
   10ea0:	18c00d43 	ldbu	r3,53(r3)
   10ea4:	00c6303a 	nor	r3,zero,r3
   10ea8:	20c6703a 	and	r3,r4,r3
   10eac:	1809883a 	mov	r4,r3
   10eb0:	e0ffff17 	ldw	r3,-4(fp)
   10eb4:	1885883a 	add	r2,r3,r2
   10eb8:	10800204 	addi	r2,r2,8
   10ebc:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   10ec0:	e0bffd03 	ldbu	r2,-12(fp)
   10ec4:	e0ffff17 	ldw	r3,-4(fp)
   10ec8:	1885883a 	add	r2,r3,r2
   10ecc:	10800204 	addi	r2,r2,8
   10ed0:	108000c3 	ldbu	r2,3(r2)
   10ed4:	10803fcc 	andi	r2,r2,255
   10ed8:	10000a1e 	bne	r2,zero,10f04 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   10edc:	e0bfff17 	ldw	r2,-4(fp)
   10ee0:	10800283 	ldbu	r2,10(r2)
   10ee4:	1007883a 	mov	r3,r2
   10ee8:	e0bffe17 	ldw	r2,-8(fp)
   10eec:	10800d83 	ldbu	r2,54(r2)
   10ef0:	0084303a 	nor	r2,zero,r2
   10ef4:	1884703a 	and	r2,r3,r2
   10ef8:	1007883a 	mov	r3,r2
   10efc:	e0bfff17 	ldw	r2,-4(fp)
   10f00:	10c00285 	stb	r3,10(r2)
    }
}
   10f04:	e037883a 	mov	sp,fp
   10f08:	df000017 	ldw	fp,0(sp)
   10f0c:	dec00104 	addi	sp,sp,4
   10f10:	f800283a 	ret

00010f14 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   10f14:	defffa04 	addi	sp,sp,-24
   10f18:	df000515 	stw	fp,20(sp)
   10f1c:	df000504 	addi	fp,sp,20
   10f20:	e13ffe15 	stw	r4,-8(fp)
   10f24:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   10f28:	e0bffe17 	ldw	r2,-8(fp)
   10f2c:	10800d03 	ldbu	r2,52(r2)
   10f30:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   10f34:	e0bffe17 	ldw	r2,-8(fp)
   10f38:	10800d83 	ldbu	r2,54(r2)
   10f3c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   10f40:	e0bffe17 	ldw	r2,-8(fp)
   10f44:	10800d43 	ldbu	r2,53(r2)
   10f48:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   10f54:	e0bffb17 	ldw	r2,-20(fp)
   10f58:	10800017 	ldw	r2,0(r2)
   10f5c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10f60:	00002506 	br	10ff8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   10f64:	e0bffd03 	ldbu	r2,-12(fp)
   10f68:	e0fffd03 	ldbu	r3,-12(fp)
   10f6c:	e13ffc17 	ldw	r4,-16(fp)
   10f70:	20c7883a 	add	r3,r4,r3
   10f74:	18c00204 	addi	r3,r3,8
   10f78:	18c000c3 	ldbu	r3,3(r3)
   10f7c:	1809883a 	mov	r4,r3
   10f80:	e0fffd83 	ldbu	r3,-10(fp)
   10f84:	00c6303a 	nor	r3,zero,r3
   10f88:	20c6703a 	and	r3,r4,r3
   10f8c:	1809883a 	mov	r4,r3
   10f90:	e0fffc17 	ldw	r3,-16(fp)
   10f94:	1885883a 	add	r2,r3,r2
   10f98:	10800204 	addi	r2,r2,8
   10f9c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   10fa0:	e0bffd03 	ldbu	r2,-12(fp)
   10fa4:	e0fffc17 	ldw	r3,-16(fp)
   10fa8:	1885883a 	add	r2,r3,r2
   10fac:	10800204 	addi	r2,r2,8
   10fb0:	108000c3 	ldbu	r2,3(r2)
   10fb4:	10803fcc 	andi	r2,r2,255
   10fb8:	1000091e 	bne	r2,zero,10fe0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10800283 	ldbu	r2,10(r2)
   10fc4:	1007883a 	mov	r3,r2
   10fc8:	e0bffd43 	ldbu	r2,-11(fp)
   10fcc:	0084303a 	nor	r2,zero,r2
   10fd0:	1884703a 	and	r2,r3,r2
   10fd4:	1007883a 	mov	r3,r2
   10fd8:	e0bffc17 	ldw	r2,-16(fp)
   10fdc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   10fe0:	e0bffb17 	ldw	r2,-20(fp)
   10fe4:	10800104 	addi	r2,r2,4
   10fe8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   10fec:	e0bffb17 	ldw	r2,-20(fp)
   10ff0:	10800017 	ldw	r2,0(r2)
   10ff4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10ff8:	e0bffc17 	ldw	r2,-16(fp)
   10ffc:	103fd91e 	bne	r2,zero,10f64 <__alt_mem_Flash_flash_data+0xf4010f64>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   11000:	e037883a 	mov	sp,fp
   11004:	df000017 	ldw	fp,0(sp)
   11008:	dec00104 	addi	sp,sp,4
   1100c:	f800283a 	ret

00011010 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   11010:	defffc04 	addi	sp,sp,-16
   11014:	df000315 	stw	fp,12(sp)
   11018:	df000304 	addi	fp,sp,12
   1101c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11020:	e0bfff17 	ldw	r2,-4(fp)
   11024:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   11028:	e0bfff17 	ldw	r2,-4(fp)
   1102c:	108002c4 	addi	r2,r2,11
   11030:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11034:	e03ffe05 	stb	zero,-8(fp)
   11038:	00000706 	br	11058 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1103c:	e0bffd17 	ldw	r2,-12(fp)
   11040:	10c00044 	addi	r3,r2,1
   11044:	e0fffd15 	stw	r3,-12(fp)
   11048:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1104c:	e0bffe03 	ldbu	r2,-8(fp)
   11050:	10800044 	addi	r2,r2,1
   11054:	e0bffe05 	stb	r2,-8(fp)
   11058:	e0bffe03 	ldbu	r2,-8(fp)
   1105c:	108000f0 	cmpltui	r2,r2,3
   11060:	103ff61e 	bne	r2,zero,1103c <__alt_mem_Flash_flash_data+0xf401103c>
        *ptbl++ = 0;
    }
}
   11064:	e037883a 	mov	sp,fp
   11068:	df000017 	ldw	fp,0(sp)
   1106c:	dec00104 	addi	sp,sp,4
   11070:	f800283a 	ret

00011074 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   11074:	defffb04 	addi	sp,sp,-20
   11078:	dfc00415 	stw	ra,16(sp)
   1107c:	df000315 	stw	fp,12(sp)
   11080:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   11084:	010000b4 	movhi	r4,2
   11088:	21081c04 	addi	r4,r4,8304
   1108c:	0142d004 	movi	r5,2880
   11090:	00113d40 	call	113d4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   11094:	008000b4 	movhi	r2,2
   11098:	10881c04 	addi	r2,r2,8304
   1109c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   110a0:	008000b4 	movhi	r2,2
   110a4:	10882804 	addi	r2,r2,8352
   110a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   110ac:	e03ffd0d 	sth	zero,-12(fp)
   110b0:	00001306 	br	11100 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   110b4:	e0bffe17 	ldw	r2,-8(fp)
   110b8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   110bc:	e0bffe17 	ldw	r2,-8(fp)
   110c0:	e0ffff17 	ldw	r3,-4(fp)
   110c4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   110c8:	e0bffe17 	ldw	r2,-8(fp)
   110cc:	00c00fc4 	movi	r3,63
   110d0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   110d4:	e0bffe17 	ldw	r2,-8(fp)
   110d8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   110dc:	e0bffe17 	ldw	r2,-8(fp)
   110e0:	10800c04 	addi	r2,r2,48
   110e4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   110e8:	e0bfff17 	ldw	r2,-4(fp)
   110ec:	10800c04 	addi	r2,r2,48
   110f0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   110f4:	e0bffd0b 	ldhu	r2,-12(fp)
   110f8:	10800044 	addi	r2,r2,1
   110fc:	e0bffd0d 	sth	r2,-12(fp)
   11100:	e0bffd0b 	ldhu	r2,-12(fp)
   11104:	10800ef0 	cmpltui	r2,r2,59
   11108:	103fea1e 	bne	r2,zero,110b4 <__alt_mem_Flash_flash_data+0xf40110b4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   11114:	e0bffe17 	ldw	r2,-8(fp)
   11118:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	00c00fc4 	movi	r3,63
   11124:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   11128:	e0bffe17 	ldw	r2,-8(fp)
   1112c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   11130:	008000b4 	movhi	r2,2
   11134:	10881c04 	addi	r2,r2,8304
   11138:	d0a80a15 	stw	r2,-24536(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1113c:	e037883a 	mov	sp,fp
   11140:	dfc00117 	ldw	ra,4(sp)
   11144:	df000017 	ldw	fp,0(sp)
   11148:	dec00204 	addi	sp,sp,8
   1114c:	f800283a 	ret

00011150 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   11150:	deffff04 	addi	sp,sp,-4
   11154:	df000015 	stw	fp,0(sp)
   11158:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1115c:	d0280d15 	stw	zero,-24524(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   11160:	d0280b05 	stb	zero,-24532(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   11164:	d027fd05 	stb	zero,-24588(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   11168:	d0280545 	stb	zero,-24555(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1116c:	d027fd45 	stb	zero,-24587(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   11170:	d0280215 	stw	zero,-24568(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   11174:	d027fe15 	stw	zero,-24584(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   11178:	d0281015 	stw	zero,-24512(gp)
    OSIdleCtrMax  = 0L;
   1117c:	d0280315 	stw	zero,-24564(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   11180:	d0280f05 	stb	zero,-24516(gp)
#endif
}
   11184:	e037883a 	mov	sp,fp
   11188:	df000017 	ldw	fp,0(sp)
   1118c:	dec00104 	addi	sp,sp,4
   11190:	f800283a 	ret

00011194 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   11194:	defffd04 	addi	sp,sp,-12
   11198:	df000215 	stw	fp,8(sp)
   1119c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   111a0:	d0280905 	stb	zero,-24540(gp)
    prdytbl       = &OSRdyTbl[0];
   111a4:	d0a80944 	addi	r2,gp,-24539
   111a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   111ac:	e03ffe05 	stb	zero,-8(fp)
   111b0:	00000706 	br	111d0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   111b4:	e0bfff17 	ldw	r2,-4(fp)
   111b8:	10c00044 	addi	r3,r2,1
   111bc:	e0ffff15 	stw	r3,-4(fp)
   111c0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   111c4:	e0bffe03 	ldbu	r2,-8(fp)
   111c8:	10800044 	addi	r2,r2,1
   111cc:	e0bffe05 	stb	r2,-8(fp)
   111d0:	e0bffe03 	ldbu	r2,-8(fp)
   111d4:	108000f0 	cmpltui	r2,r2,3
   111d8:	103ff61e 	bne	r2,zero,111b4 <__alt_mem_Flash_flash_data+0xf40111b4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   111dc:	d027ff45 	stb	zero,-24579(gp)
    OSPrioHighRdy = 0;
   111e0:	d027ff05 	stb	zero,-24580(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   111e4:	d0280715 	stw	zero,-24548(gp)
    OSTCBCur      = (OS_TCB *)0;
   111e8:	d0280c15 	stw	zero,-24528(gp)
}
   111ec:	e037883a 	mov	sp,fp
   111f0:	df000017 	ldw	fp,0(sp)
   111f4:	dec00104 	addi	sp,sp,4
   111f8:	f800283a 	ret

000111fc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   111fc:	defff804 	addi	sp,sp,-32
   11200:	dfc00715 	stw	ra,28(sp)
   11204:	df000615 	stw	fp,24(sp)
   11208:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1120c:	00bfffd4 	movui	r2,65535
   11210:	d8800015 	stw	r2,0(sp)
   11214:	008000b4 	movhi	r2,2
   11218:	10861c04 	addi	r2,r2,6256
   1121c:	d8800115 	stw	r2,4(sp)
   11220:	00808004 	movi	r2,512
   11224:	d8800215 	stw	r2,8(sp)
   11228:	d8000315 	stw	zero,12(sp)
   1122c:	008000c4 	movi	r2,3
   11230:	d8800415 	stw	r2,16(sp)
   11234:	01000074 	movhi	r4,1
   11238:	2105a304 	addi	r4,r4,5772
   1123c:	000b883a 	mov	r5,zero
   11240:	018000b4 	movhi	r6,2
   11244:	31881b04 	addi	r6,r6,8300
   11248:	01c00504 	movi	r7,20
   1124c:	00160a00 	call	160a0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   11250:	01000504 	movi	r4,20
   11254:	014000b4 	movhi	r5,2
   11258:	296f9604 	addi	r5,r5,-16808
   1125c:	e1bfff04 	addi	r6,fp,-4
   11260:	001696c0 	call	1696c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   11264:	e037883a 	mov	sp,fp
   11268:	dfc00117 	ldw	ra,4(sp)
   1126c:	df000017 	ldw	fp,0(sp)
   11270:	dec00204 	addi	sp,sp,8
   11274:	f800283a 	ret

00011278 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   11278:	defff804 	addi	sp,sp,-32
   1127c:	dfc00715 	stw	ra,28(sp)
   11280:	df000615 	stw	fp,24(sp)
   11284:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   11288:	00bfff94 	movui	r2,65534
   1128c:	d8800015 	stw	r2,0(sp)
   11290:	008000b4 	movhi	r2,2
   11294:	1083a404 	addi	r2,r2,3728
   11298:	d8800115 	stw	r2,4(sp)
   1129c:	00808004 	movi	r2,512
   112a0:	d8800215 	stw	r2,8(sp)
   112a4:	d8000315 	stw	zero,12(sp)
   112a8:	008000c4 	movi	r2,3
   112ac:	d8800415 	stw	r2,16(sp)
   112b0:	01000074 	movhi	r4,1
   112b4:	2105ba04 	addi	r4,r4,5864
   112b8:	000b883a 	mov	r5,zero
   112bc:	018000b4 	movhi	r6,2
   112c0:	3185a304 	addi	r6,r6,5772
   112c4:	01c004c4 	movi	r7,19
   112c8:	00160a00 	call	160a0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   112cc:	010004c4 	movi	r4,19
   112d0:	014000b4 	movhi	r5,2
   112d4:	296f9a04 	addi	r5,r5,-16792
   112d8:	e1bfff04 	addi	r6,fp,-4
   112dc:	001696c0 	call	1696c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   112e0:	e037883a 	mov	sp,fp
   112e4:	dfc00117 	ldw	ra,4(sp)
   112e8:	df000017 	ldw	fp,0(sp)
   112ec:	dec00204 	addi	sp,sp,8
   112f0:	f800283a 	ret

000112f4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   112f4:	defffb04 	addi	sp,sp,-20
   112f8:	dfc00415 	stw	ra,16(sp)
   112fc:	df000315 	stw	fp,12(sp)
   11300:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   11304:	010000b4 	movhi	r4,2
   11308:	210aec04 	addi	r4,r4,11184
   1130c:	01414404 	movi	r5,1296
   11310:	00113d40 	call	113d4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   11314:	010000b4 	movhi	r4,2
   11318:	210c3004 	addi	r4,r4,12480
   1131c:	01401504 	movi	r5,84
   11320:	00113d40 	call	113d4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   11324:	008000b4 	movhi	r2,2
   11328:	108aec04 	addi	r2,r2,11184
   1132c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   11330:	008000b4 	movhi	r2,2
   11334:	108b0704 	addi	r2,r2,11292
   11338:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1133c:	e03ffd05 	stb	zero,-12(fp)
   11340:	00001106 	br	11388 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   11344:	e0bffe17 	ldw	r2,-8(fp)
   11348:	e0ffff17 	ldw	r3,-4(fp)
   1134c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   11350:	e0bffe17 	ldw	r2,-8(fp)
   11354:	00c00fc4 	movi	r3,63
   11358:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1135c:	e0bffe17 	ldw	r2,-8(fp)
   11360:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   11364:	e0bffe17 	ldw	r2,-8(fp)
   11368:	10801b04 	addi	r2,r2,108
   1136c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   11370:	e0bfff17 	ldw	r2,-4(fp)
   11374:	10801b04 	addi	r2,r2,108
   11378:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1137c:	e0bffd03 	ldbu	r2,-12(fp)
   11380:	10800044 	addi	r2,r2,1
   11384:	e0bffd05 	stb	r2,-12(fp)
   11388:	e0bffd03 	ldbu	r2,-12(fp)
   1138c:	108002f0 	cmpltui	r2,r2,11
   11390:	103fec1e 	bne	r2,zero,11344 <__alt_mem_Flash_flash_data+0xf4011344>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   11394:	e0bffe17 	ldw	r2,-8(fp)
   11398:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1139c:	e0bffe17 	ldw	r2,-8(fp)
   113a0:	00c00fc4 	movi	r3,63
   113a4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   113b0:	d0280015 	stw	zero,-24576(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   113b4:	008000b4 	movhi	r2,2
   113b8:	108aec04 	addi	r2,r2,11184
   113bc:	d0a80415 	stw	r2,-24560(gp)
}
   113c0:	e037883a 	mov	sp,fp
   113c4:	dfc00117 	ldw	ra,4(sp)
   113c8:	df000017 	ldw	fp,0(sp)
   113cc:	dec00204 	addi	sp,sp,8
   113d0:	f800283a 	ret

000113d4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   113d4:	defffd04 	addi	sp,sp,-12
   113d8:	df000215 	stw	fp,8(sp)
   113dc:	df000204 	addi	fp,sp,8
   113e0:	e13ffe15 	stw	r4,-8(fp)
   113e4:	2805883a 	mov	r2,r5
   113e8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   113ec:	00000706 	br	1140c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   113f0:	e0bffe17 	ldw	r2,-8(fp)
   113f4:	10c00044 	addi	r3,r2,1
   113f8:	e0fffe15 	stw	r3,-8(fp)
   113fc:	10000005 	stb	zero,0(r2)
        size--;
   11400:	e0bfff0b 	ldhu	r2,-4(fp)
   11404:	10bfffc4 	addi	r2,r2,-1
   11408:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1140c:	e0bfff0b 	ldhu	r2,-4(fp)
   11410:	103ff71e 	bne	r2,zero,113f0 <__alt_mem_Flash_flash_data+0xf40113f0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   11414:	e037883a 	mov	sp,fp
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00104 	addi	sp,sp,4
   11420:	f800283a 	ret

00011424 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   11424:	defffc04 	addi	sp,sp,-16
   11428:	df000315 	stw	fp,12(sp)
   1142c:	df000304 	addi	fp,sp,12
   11430:	e13ffd15 	stw	r4,-12(fp)
   11434:	e17ffe15 	stw	r5,-8(fp)
   11438:	3005883a 	mov	r2,r6
   1143c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   11440:	00000b06 	br	11470 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   11444:	e0bffd17 	ldw	r2,-12(fp)
   11448:	10c00044 	addi	r3,r2,1
   1144c:	e0fffd15 	stw	r3,-12(fp)
   11450:	e0fffe17 	ldw	r3,-8(fp)
   11454:	19000044 	addi	r4,r3,1
   11458:	e13ffe15 	stw	r4,-8(fp)
   1145c:	18c00003 	ldbu	r3,0(r3)
   11460:	10c00005 	stb	r3,0(r2)
        size--;
   11464:	e0bfff0b 	ldhu	r2,-4(fp)
   11468:	10bfffc4 	addi	r2,r2,-1
   1146c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   11470:	e0bfff0b 	ldhu	r2,-4(fp)
   11474:	103ff31e 	bne	r2,zero,11444 <__alt_mem_Flash_flash_data+0xf4011444>
        *pdest++ = *psrc++;
        size--;
    }
}
   11478:	e037883a 	mov	sp,fp
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00104 	addi	sp,sp,4
   11484:	f800283a 	ret

00011488 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   11488:	defffb04 	addi	sp,sp,-20
   1148c:	dfc00415 	stw	ra,16(sp)
   11490:	df000315 	stw	fp,12(sp)
   11494:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11498:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1149c:	0005303a 	rdctl	r2,status
   114a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114a4:	e0fffe17 	ldw	r3,-8(fp)
   114a8:	00bfff84 	movi	r2,-2
   114ac:	1884703a 	and	r2,r3,r2
   114b0:	1001703a 	wrctl	status,r2
  
  return context;
   114b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   114b8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   114bc:	d0a80b03 	ldbu	r2,-24532(gp)
   114c0:	10803fcc 	andi	r2,r2,255
   114c4:	10001a1e 	bne	r2,zero,11530 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   114c8:	d0a7fd03 	ldbu	r2,-24588(gp)
   114cc:	10803fcc 	andi	r2,r2,255
   114d0:	1000171e 	bne	r2,zero,11530 <OS_Sched+0xa8>
            OS_SchedNew();
   114d4:	00115540 	call	11554 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   114d8:	d0e7ff03 	ldbu	r3,-24580(gp)
   114dc:	d0a7ff43 	ldbu	r2,-24579(gp)
   114e0:	18c03fcc 	andi	r3,r3,255
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	18801126 	beq	r3,r2,11530 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   114ec:	d0a7ff03 	ldbu	r2,-24580(gp)
   114f0:	10c03fcc 	andi	r3,r2,255
   114f4:	008000b4 	movhi	r2,2
   114f8:	108c3004 	addi	r2,r2,12480
   114fc:	18c7883a 	add	r3,r3,r3
   11500:	18c7883a 	add	r3,r3,r3
   11504:	10c5883a 	add	r2,r2,r3
   11508:	10800017 	ldw	r2,0(r2)
   1150c:	d0a80715 	stw	r2,-24548(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   11510:	d0a80717 	ldw	r2,-24548(gp)
   11514:	10c00e17 	ldw	r3,56(r2)
   11518:	18c00044 	addi	r3,r3,1
   1151c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   11520:	d0a80217 	ldw	r2,-24568(gp)
   11524:	10800044 	addi	r2,r2,1
   11528:	d0a80215 	stw	r2,-24568(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1152c:	001ac740 	call	1ac74 <OSCtxSw>
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11538:	e0bfff17 	ldw	r2,-4(fp)
   1153c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   11540:	e037883a 	mov	sp,fp
   11544:	dfc00117 	ldw	ra,4(sp)
   11548:	df000017 	ldw	fp,0(sp)
   1154c:	dec00204 	addi	sp,sp,8
   11550:	f800283a 	ret

00011554 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   11554:	defffe04 	addi	sp,sp,-8
   11558:	df000115 	stw	fp,4(sp)
   1155c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   11560:	d0a80903 	ldbu	r2,-24540(gp)
   11564:	10c03fcc 	andi	r3,r2,255
   11568:	008000b4 	movhi	r2,2
   1156c:	10af5604 	addi	r2,r2,-17064
   11570:	10c5883a 	add	r2,r2,r3
   11574:	10800003 	ldbu	r2,0(r2)
   11578:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1157c:	e0bfff03 	ldbu	r2,-4(fp)
   11580:	100490fa 	slli	r2,r2,3
   11584:	1009883a 	mov	r4,r2
   11588:	e0ffff03 	ldbu	r3,-4(fp)
   1158c:	d0a80944 	addi	r2,gp,-24539
   11590:	1885883a 	add	r2,r3,r2
   11594:	10800003 	ldbu	r2,0(r2)
   11598:	10c03fcc 	andi	r3,r2,255
   1159c:	008000b4 	movhi	r2,2
   115a0:	10af5604 	addi	r2,r2,-17064
   115a4:	10c5883a 	add	r2,r2,r3
   115a8:	10800003 	ldbu	r2,0(r2)
   115ac:	2085883a 	add	r2,r4,r2
   115b0:	d0a7ff05 	stb	r2,-24580(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   115b4:	e037883a 	mov	sp,fp
   115b8:	df000017 	ldw	fp,0(sp)
   115bc:	dec00104 	addi	sp,sp,4
   115c0:	f800283a 	ret

000115c4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   115c4:	defffc04 	addi	sp,sp,-16
   115c8:	df000315 	stw	fp,12(sp)
   115cc:	df000304 	addi	fp,sp,12
   115d0:	e13ffe15 	stw	r4,-8(fp)
   115d4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   115d8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   115dc:	00000b06 	br	1160c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   115e0:	e0bffe17 	ldw	r2,-8(fp)
   115e4:	10c00044 	addi	r3,r2,1
   115e8:	e0fffe15 	stw	r3,-8(fp)
   115ec:	e0ffff17 	ldw	r3,-4(fp)
   115f0:	19000044 	addi	r4,r3,1
   115f4:	e13fff15 	stw	r4,-4(fp)
   115f8:	18c00003 	ldbu	r3,0(r3)
   115fc:	10c00005 	stb	r3,0(r2)
        len++;
   11600:	e0bffd03 	ldbu	r2,-12(fp)
   11604:	10800044 	addi	r2,r2,1
   11608:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1160c:	e0bfff17 	ldw	r2,-4(fp)
   11610:	10800003 	ldbu	r2,0(r2)
   11614:	10803fcc 	andi	r2,r2,255
   11618:	103ff11e 	bne	r2,zero,115e0 <__alt_mem_Flash_flash_data+0xf40115e0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1161c:	e0bffe17 	ldw	r2,-8(fp)
   11620:	10000005 	stb	zero,0(r2)
    return (len);
   11624:	e0bffd03 	ldbu	r2,-12(fp)
}
   11628:	e037883a 	mov	sp,fp
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00104 	addi	sp,sp,4
   11634:	f800283a 	ret

00011638 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   11638:	defffd04 	addi	sp,sp,-12
   1163c:	df000215 	stw	fp,8(sp)
   11640:	df000204 	addi	fp,sp,8
   11644:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   11648:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1164c:	00000606 	br	11668 <OS_StrLen+0x30>
        psrc++;
   11650:	e0bfff17 	ldw	r2,-4(fp)
   11654:	10800044 	addi	r2,r2,1
   11658:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1165c:	e0bffe03 	ldbu	r2,-8(fp)
   11660:	10800044 	addi	r2,r2,1
   11664:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11668:	e0bfff17 	ldw	r2,-4(fp)
   1166c:	10800003 	ldbu	r2,0(r2)
   11670:	10803fcc 	andi	r2,r2,255
   11674:	103ff61e 	bne	r2,zero,11650 <__alt_mem_Flash_flash_data+0xf4011650>
        psrc++;
        len++;
    }
    return (len);
   11678:	e0bffe03 	ldbu	r2,-8(fp)
}
   1167c:	e037883a 	mov	sp,fp
   11680:	df000017 	ldw	fp,0(sp)
   11684:	dec00104 	addi	sp,sp,4
   11688:	f800283a 	ret

0001168c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1168c:	defffa04 	addi	sp,sp,-24
   11690:	dfc00515 	stw	ra,20(sp)
   11694:	df000415 	stw	fp,16(sp)
   11698:	df000404 	addi	fp,sp,16
   1169c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   116a0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116a4:	0005303a 	rdctl	r2,status
   116a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116ac:	e0fffd17 	ldw	r3,-12(fp)
   116b0:	00bfff84 	movi	r2,-2
   116b4:	1884703a 	and	r2,r3,r2
   116b8:	1001703a 	wrctl	status,r2
  
  return context;
   116bc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   116c0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   116c4:	d0a7fe17 	ldw	r2,-24584(gp)
   116c8:	10800044 	addi	r2,r2,1
   116cc:	d0a7fe15 	stw	r2,-24584(gp)
   116d0:	e0bffc17 	ldw	r2,-16(fp)
   116d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116d8:	e0bffe17 	ldw	r2,-8(fp)
   116dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   116e0:	001af6c0 	call	1af6c <OSTaskIdleHook>
    }
   116e4:	003fef06 	br	116a4 <__alt_mem_Flash_flash_data+0xf40116a4>

000116e8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   116e8:	defff804 	addi	sp,sp,-32
   116ec:	dfc00715 	stw	ra,28(sp)
   116f0:	df000615 	stw	fp,24(sp)
   116f4:	dc400515 	stw	r17,20(sp)
   116f8:	dc000415 	stw	r16,16(sp)
   116fc:	df000604 	addi	fp,sp,24
   11700:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11704:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11708:	00000206 	br	11714 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1170c:	01000044 	movi	r4,1
   11710:	00172980 	call	17298 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11714:	d0a80f03 	ldbu	r2,-24516(gp)
   11718:	10803fcc 	andi	r2,r2,255
   1171c:	103ffb26 	beq	r2,zero,1170c <__alt_mem_Flash_flash_data+0xf401170c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   11720:	d0e80317 	ldw	r3,-24564(gp)
   11724:	00947b34 	movhi	r2,20972
   11728:	10a147c4 	addi	r2,r2,-31457
   1172c:	1888383a 	mulxuu	r4,r3,r2
   11730:	1885383a 	mul	r2,r3,r2
   11734:	1021883a 	mov	r16,r2
   11738:	2023883a 	mov	r17,r4
   1173c:	8804d17a 	srli	r2,r17,5
   11740:	d0a80315 	stw	r2,-24564(gp)
    if (OSIdleCtrMax == 0L) {
   11744:	d0a80317 	ldw	r2,-24564(gp)
   11748:	1000031e 	bne	r2,zero,11758 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1174c:	d0280505 	stb	zero,-24556(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   11750:	01003fc4 	movi	r4,255
   11754:	0016eec0 	call	16eec <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11758:	0005303a 	rdctl	r2,status
   1175c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11760:	e0fffb17 	ldw	r3,-20(fp)
   11764:	00bfff84 	movi	r2,-2
   11768:	1884703a 	and	r2,r3,r2
   1176c:	1001703a 	wrctl	status,r2
  
  return context;
   11770:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   11774:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   11778:	d0a7fe17 	ldw	r2,-24584(gp)
   1177c:	d0a81015 	stw	r2,-24512(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   11780:	d027fe15 	stw	zero,-24584(gp)
   11784:	e0bffa17 	ldw	r2,-24(fp)
   11788:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1178c:	e0bffc17 	ldw	r2,-16(fp)
   11790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   11794:	d0e81017 	ldw	r3,-24512(gp)
   11798:	d0a80317 	ldw	r2,-24564(gp)
   1179c:	1885203a 	divu	r2,r3,r2
   117a0:	1007883a 	mov	r3,r2
   117a4:	00801904 	movi	r2,100
   117a8:	10c5c83a 	sub	r2,r2,r3
   117ac:	d0a80505 	stb	r2,-24556(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   117b0:	001aefc0 	call	1aefc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   117b4:	00117c40 	call	117c4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   117b8:	0009883a 	mov	r4,zero
   117bc:	00172980 	call	17298 <OSTimeDly>
    }
   117c0:	003fe506 	br	11758 <__alt_mem_Flash_flash_data+0xf4011758>

000117c4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   117c4:	defffa04 	addi	sp,sp,-24
   117c8:	dfc00515 	stw	ra,20(sp)
   117cc:	df000415 	stw	fp,16(sp)
   117d0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   117d4:	e03ffc05 	stb	zero,-16(fp)
   117d8:	00002406 	br	1186c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   117dc:	e0fffc03 	ldbu	r3,-16(fp)
   117e0:	e0bffe04 	addi	r2,fp,-8
   117e4:	1809883a 	mov	r4,r3
   117e8:	100b883a 	mov	r5,r2
   117ec:	0016d240 	call	16d24 <OSTaskStkChk>
   117f0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   117f4:	e0bffc43 	ldbu	r2,-15(fp)
   117f8:	1000191e 	bne	r2,zero,11860 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   117fc:	e0fffc03 	ldbu	r3,-16(fp)
   11800:	008000b4 	movhi	r2,2
   11804:	108c3004 	addi	r2,r2,12480
   11808:	18c7883a 	add	r3,r3,r3
   1180c:	18c7883a 	add	r3,r3,r3
   11810:	10c5883a 	add	r2,r2,r3
   11814:	10800017 	ldw	r2,0(r2)
   11818:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1181c:	e0bffd17 	ldw	r2,-12(fp)
   11820:	10000f26 	beq	r2,zero,11860 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   11824:	e0bffd17 	ldw	r2,-12(fp)
   11828:	10800060 	cmpeqi	r2,r2,1
   1182c:	10000c1e 	bne	r2,zero,11860 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   11830:	e0bffd17 	ldw	r2,-12(fp)
   11834:	10c00217 	ldw	r3,8(r2)
   11838:	e0bffd17 	ldw	r2,-12(fp)
   1183c:	10800317 	ldw	r2,12(r2)
   11840:	1085883a 	add	r2,r2,r2
   11844:	1085883a 	add	r2,r2,r2
   11848:	1887883a 	add	r3,r3,r2
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   11854:	e0ffff17 	ldw	r3,-4(fp)
   11858:	e0bffd17 	ldw	r2,-12(fp)
   1185c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11860:	e0bffc03 	ldbu	r2,-16(fp)
   11864:	10800044 	addi	r2,r2,1
   11868:	e0bffc05 	stb	r2,-16(fp)
   1186c:	e0bffc03 	ldbu	r2,-16(fp)
   11870:	10800570 	cmpltui	r2,r2,21
   11874:	103fd91e 	bne	r2,zero,117dc <__alt_mem_Flash_flash_data+0xf40117dc>
#endif
                }
            }
        }
    }
}
   11878:	e037883a 	mov	sp,fp
   1187c:	dfc00117 	ldw	ra,4(sp)
   11880:	df000017 	ldw	fp,0(sp)
   11884:	dec00204 	addi	sp,sp,8
   11888:	f800283a 	ret

0001188c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1188c:	defff204 	addi	sp,sp,-56
   11890:	dfc00d15 	stw	ra,52(sp)
   11894:	df000c15 	stw	fp,48(sp)
   11898:	df000c04 	addi	fp,sp,48
   1189c:	e17ffc15 	stw	r5,-16(fp)
   118a0:	e1bffd15 	stw	r6,-12(fp)
   118a4:	3807883a 	mov	r3,r7
   118a8:	e0800417 	ldw	r2,16(fp)
   118ac:	e13ffb05 	stb	r4,-20(fp)
   118b0:	e0fffe0d 	sth	r3,-8(fp)
   118b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   118b8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118bc:	0005303a 	rdctl	r2,status
   118c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118c4:	e0fff617 	ldw	r3,-40(fp)
   118c8:	00bfff84 	movi	r2,-2
   118cc:	1884703a 	and	r2,r3,r2
   118d0:	1001703a 	wrctl	status,r2
  
  return context;
   118d4:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   118d8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   118dc:	d0a80417 	ldw	r2,-24560(gp)
   118e0:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   118e4:	e0bff517 	ldw	r2,-44(fp)
   118e8:	10009326 	beq	r2,zero,11b38 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   118ec:	e0bff517 	ldw	r2,-44(fp)
   118f0:	10800517 	ldw	r2,20(r2)
   118f4:	d0a80415 	stw	r2,-24560(gp)
   118f8:	e0bff417 	ldw	r2,-48(fp)
   118fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11900:	e0bff717 	ldw	r2,-36(fp)
   11904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   11908:	e0bff517 	ldw	r2,-44(fp)
   1190c:	e0fffc17 	ldw	r3,-16(fp)
   11910:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11914:	e0bff517 	ldw	r2,-44(fp)
   11918:	e0fffb03 	ldbu	r3,-20(fp)
   1191c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   11920:	e0bff517 	ldw	r2,-44(fp)
   11924:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   11928:	e0bff517 	ldw	r2,-44(fp)
   1192c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   11930:	e0bff517 	ldw	r2,-44(fp)
   11934:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   11938:	e0bff517 	ldw	r2,-44(fp)
   1193c:	e0c00317 	ldw	r3,12(fp)
   11940:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   11944:	e0bff517 	ldw	r2,-44(fp)
   11948:	e0c00217 	ldw	r3,8(fp)
   1194c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   11950:	e0bff517 	ldw	r2,-44(fp)
   11954:	e0fffd17 	ldw	r3,-12(fp)
   11958:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1195c:	e0bff517 	ldw	r2,-44(fp)
   11960:	e0ffff0b 	ldhu	r3,-4(fp)
   11964:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   11968:	e0bff517 	ldw	r2,-44(fp)
   1196c:	e0fffe0b 	ldhu	r3,-8(fp)
   11970:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   11974:	e0bff517 	ldw	r2,-44(fp)
   11978:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1197c:	e0bffb03 	ldbu	r2,-20(fp)
   11980:	1004d0fa 	srli	r2,r2,3
   11984:	1007883a 	mov	r3,r2
   11988:	e0bff517 	ldw	r2,-44(fp)
   1198c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11990:	e0bffb03 	ldbu	r2,-20(fp)
   11994:	108001cc 	andi	r2,r2,7
   11998:	1007883a 	mov	r3,r2
   1199c:	e0bff517 	ldw	r2,-44(fp)
   119a0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   119a4:	e0bff517 	ldw	r2,-44(fp)
   119a8:	10800d03 	ldbu	r2,52(r2)
   119ac:	10803fcc 	andi	r2,r2,255
   119b0:	00c00044 	movi	r3,1
   119b4:	1884983a 	sll	r2,r3,r2
   119b8:	1007883a 	mov	r3,r2
   119bc:	e0bff517 	ldw	r2,-44(fp)
   119c0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   119c4:	e0bff517 	ldw	r2,-44(fp)
   119c8:	10800cc3 	ldbu	r2,51(r2)
   119cc:	10803fcc 	andi	r2,r2,255
   119d0:	00c00044 	movi	r3,1
   119d4:	1884983a 	sll	r2,r3,r2
   119d8:	1007883a 	mov	r3,r2
   119dc:	e0bff517 	ldw	r2,-44(fp)
   119e0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   119e4:	e0bff517 	ldw	r2,-44(fp)
   119e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   119ec:	e0bff517 	ldw	r2,-44(fp)
   119f0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   119f4:	e0bff517 	ldw	r2,-44(fp)
   119f8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   119fc:	e0bff517 	ldw	r2,-44(fp)
   11a00:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11a04:	e0bff517 	ldw	r2,-44(fp)
   11a08:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   11a0c:	e0bff517 	ldw	r2,-44(fp)
   11a10:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11a14:	e0bff517 	ldw	r2,-44(fp)
   11a18:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   11a1c:	e0bff517 	ldw	r2,-44(fp)
   11a20:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11a24:	e0bff517 	ldw	r2,-44(fp)
   11a28:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   11a2c:	e0bff517 	ldw	r2,-44(fp)
   11a30:	00c00fc4 	movi	r3,63
   11a34:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11a38:	e0bff517 	ldw	r2,-44(fp)
   11a3c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11a40:	e13ff517 	ldw	r4,-44(fp)
   11a44:	001af880 	call	1af88 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11a48:	e13ff517 	ldw	r4,-44(fp)
   11a4c:	001aea00 	call	1aea0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a50:	0005303a 	rdctl	r2,status
   11a54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a58:	e0fff817 	ldw	r3,-32(fp)
   11a5c:	00bfff84 	movi	r2,-2
   11a60:	1884703a 	and	r2,r3,r2
   11a64:	1001703a 	wrctl	status,r2
  
  return context;
   11a68:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   11a6c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   11a70:	e0fffb03 	ldbu	r3,-20(fp)
   11a74:	008000b4 	movhi	r2,2
   11a78:	108c3004 	addi	r2,r2,12480
   11a7c:	18c7883a 	add	r3,r3,r3
   11a80:	18c7883a 	add	r3,r3,r3
   11a84:	10c5883a 	add	r2,r2,r3
   11a88:	e0fff517 	ldw	r3,-44(fp)
   11a8c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   11a90:	d0e80017 	ldw	r3,-24576(gp)
   11a94:	e0bff517 	ldw	r2,-44(fp)
   11a98:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   11a9c:	e0bff517 	ldw	r2,-44(fp)
   11aa0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   11aa4:	d0a80017 	ldw	r2,-24576(gp)
   11aa8:	10000326 	beq	r2,zero,11ab8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   11aac:	d0a80017 	ldw	r2,-24576(gp)
   11ab0:	e0fff517 	ldw	r3,-44(fp)
   11ab4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   11ab8:	e0bff517 	ldw	r2,-44(fp)
   11abc:	d0a80015 	stw	r2,-24576(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   11ac0:	e0bff517 	ldw	r2,-44(fp)
   11ac4:	10c00d83 	ldbu	r3,54(r2)
   11ac8:	d0a80903 	ldbu	r2,-24540(gp)
   11acc:	1884b03a 	or	r2,r3,r2
   11ad0:	d0a80905 	stb	r2,-24540(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11ad4:	e0bff517 	ldw	r2,-44(fp)
   11ad8:	10800d03 	ldbu	r2,52(r2)
   11adc:	10c03fcc 	andi	r3,r2,255
   11ae0:	e0bff517 	ldw	r2,-44(fp)
   11ae4:	10800d03 	ldbu	r2,52(r2)
   11ae8:	11003fcc 	andi	r4,r2,255
   11aec:	d0a80944 	addi	r2,gp,-24539
   11af0:	2085883a 	add	r2,r4,r2
   11af4:	11000003 	ldbu	r4,0(r2)
   11af8:	e0bff517 	ldw	r2,-44(fp)
   11afc:	10800d43 	ldbu	r2,53(r2)
   11b00:	2084b03a 	or	r2,r4,r2
   11b04:	1009883a 	mov	r4,r2
   11b08:	d0a80944 	addi	r2,gp,-24539
   11b0c:	1885883a 	add	r2,r3,r2
   11b10:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   11b14:	d0a80543 	ldbu	r2,-24555(gp)
   11b18:	10800044 	addi	r2,r2,1
   11b1c:	d0a80545 	stb	r2,-24555(gp)
   11b20:	e0bff417 	ldw	r2,-48(fp)
   11b24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b28:	e0bff917 	ldw	r2,-28(fp)
   11b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   11b30:	0005883a 	mov	r2,zero
   11b34:	00000506 	br	11b4c <OS_TCBInit+0x2c0>
   11b38:	e0bff417 	ldw	r2,-48(fp)
   11b3c:	e0bffa15 	stw	r2,-24(fp)
   11b40:	e0bffa17 	ldw	r2,-24(fp)
   11b44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   11b48:	00801084 	movi	r2,66
}
   11b4c:	e037883a 	mov	sp,fp
   11b50:	dfc00117 	ldw	ra,4(sp)
   11b54:	df000017 	ldw	fp,0(sp)
   11b58:	dec00204 	addi	sp,sp,8
   11b5c:	f800283a 	ret

00011b60 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   11b60:	defffe04 	addi	sp,sp,-8
   11b64:	df000115 	stw	fp,4(sp)
   11b68:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   11b6c:	d0a00804 	addi	r2,gp,-32736
   11b70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   11b74:	d0a00904 	addi	r2,gp,-32732
   11b78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   11b7c:	d0a00a84 	addi	r2,gp,-32726
   11b80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   11b84:	d0a00b04 	addi	r2,gp,-32724
   11b88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   11b8c:	d0a00a04 	addi	r2,gp,-32728
   11b90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   11b94:	d0a00b84 	addi	r2,gp,-32722
   11b98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   11b9c:	d0a00c04 	addi	r2,gp,-32720
   11ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   11ba4:	d0a00c84 	addi	r2,gp,-32718
   11ba8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   11bac:	d0a00d04 	addi	r2,gp,-32716
   11bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   11bb4:	d0a00d84 	addi	r2,gp,-32714
   11bb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   11bbc:	d0a00e04 	addi	r2,gp,-32712
   11bc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   11bc4:	d0a00e84 	addi	r2,gp,-32710
   11bc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   11bcc:	d0a00f04 	addi	r2,gp,-32708
   11bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   11bd4:	d0a00f84 	addi	r2,gp,-32706
   11bd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   11bdc:	d0a01004 	addi	r2,gp,-32704
   11be0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   11be4:	d0a01084 	addi	r2,gp,-32702
   11be8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   11bec:	d0a01104 	addi	r2,gp,-32700
   11bf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   11bf4:	d0a01184 	addi	r2,gp,-32698
   11bf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   11bfc:	d0a01204 	addi	r2,gp,-32696
   11c00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   11c04:	d0a01284 	addi	r2,gp,-32694
   11c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   11c0c:	d0a01304 	addi	r2,gp,-32692
   11c10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   11c14:	d0a01384 	addi	r2,gp,-32690
   11c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   11c1c:	d0a01404 	addi	r2,gp,-32688
   11c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   11c24:	d0a01484 	addi	r2,gp,-32686
   11c28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   11c2c:	d0a01504 	addi	r2,gp,-32684
   11c30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   11c34:	d0a01584 	addi	r2,gp,-32682
   11c38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   11c3c:	d0a01604 	addi	r2,gp,-32680
   11c40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   11c44:	d0a01684 	addi	r2,gp,-32678
   11c48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   11c4c:	d0a01704 	addi	r2,gp,-32676
   11c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   11c54:	d0a01784 	addi	r2,gp,-32674
   11c58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   11c5c:	d0a01804 	addi	r2,gp,-32672
   11c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   11c64:	d0a01884 	addi	r2,gp,-32670
   11c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   11c6c:	d0a01904 	addi	r2,gp,-32668
   11c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   11c74:	d0a01984 	addi	r2,gp,-32666
   11c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   11c7c:	d0a01a04 	addi	r2,gp,-32664
   11c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   11c84:	d0a01a84 	addi	r2,gp,-32662
   11c88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   11c8c:	d0a01b04 	addi	r2,gp,-32660
   11c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   11c94:	d0a01b84 	addi	r2,gp,-32658
   11c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   11c9c:	d0a01c04 	addi	r2,gp,-32656
   11ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   11ca4:	d0a01c84 	addi	r2,gp,-32654
   11ca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   11cac:	d0a01d04 	addi	r2,gp,-32652
   11cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   11cb4:	d0a01d84 	addi	r2,gp,-32650
   11cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   11cbc:	d0a01e04 	addi	r2,gp,-32648
   11cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   11cc4:	d0a01e84 	addi	r2,gp,-32646
   11cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   11ccc:	d0a01f04 	addi	r2,gp,-32644
   11cd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   11cd4:	d0a02404 	addi	r2,gp,-32624
   11cd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   11cdc:	e037883a 	mov	sp,fp
   11ce0:	df000017 	ldw	fp,0(sp)
   11ce4:	dec00104 	addi	sp,sp,4
   11ce8:	f800283a 	ret

00011cec <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   11cec:	defff204 	addi	sp,sp,-56
   11cf0:	df000d15 	stw	fp,52(sp)
   11cf4:	df000d04 	addi	fp,sp,52
   11cf8:	e13ffc15 	stw	r4,-16(fp)
   11cfc:	2807883a 	mov	r3,r5
   11d00:	3005883a 	mov	r2,r6
   11d04:	e1ffff15 	stw	r7,-4(fp)
   11d08:	e0fffd0d 	sth	r3,-12(fp)
   11d0c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11d10:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11d14:	e0bfff17 	ldw	r2,-4(fp)
   11d18:	1000021e 	bne	r2,zero,11d24 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   11d1c:	0005883a 	mov	r2,zero
   11d20:	0000b006 	br	11fe4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11d24:	e0bffc17 	ldw	r2,-16(fp)
   11d28:	1000051e 	bne	r2,zero,11d40 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11d2c:	e0bfff17 	ldw	r2,-4(fp)
   11d30:	00c01b84 	movi	r3,110
   11d34:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d38:	0005883a 	mov	r2,zero
   11d3c:	0000a906 	br	11fe4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11d40:	e0bffc17 	ldw	r2,-16(fp)
   11d44:	10800003 	ldbu	r2,0(r2)
   11d48:	10803fcc 	andi	r2,r2,255
   11d4c:	10800160 	cmpeqi	r2,r2,5
   11d50:	1000051e 	bne	r2,zero,11d68 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   11d54:	e0bfff17 	ldw	r2,-4(fp)
   11d58:	00c00044 	movi	r3,1
   11d5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d60:	0005883a 	mov	r2,zero
   11d64:	00009f06 	br	11fe4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11d68:	e0fffe03 	ldbu	r3,-8(fp)
   11d6c:	00bfe004 	movi	r2,-128
   11d70:	1884703a 	and	r2,r3,r2
   11d74:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   11d78:	e0bff503 	ldbu	r2,-44(fp)
   11d7c:	10000626 	beq	r2,zero,11d98 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   11d80:	e0bffe03 	ldbu	r2,-8(fp)
   11d84:	10801fcc 	andi	r2,r2,127
   11d88:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11d8c:	00800044 	movi	r2,1
   11d90:	e0bff385 	stb	r2,-50(fp)
   11d94:	00000106 	br	11d9c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   11d98:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   11d9c:	e0bfff17 	ldw	r2,-4(fp)
   11da0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11da4:	0005303a 	rdctl	r2,status
   11da8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dac:	e0fff617 	ldw	r3,-40(fp)
   11db0:	00bfff84 	movi	r2,-2
   11db4:	1884703a 	and	r2,r3,r2
   11db8:	1001703a 	wrctl	status,r2
  
  return context;
   11dbc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   11dc0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   11dc4:	e0bffe03 	ldbu	r2,-8(fp)
   11dc8:	10c00060 	cmpeqi	r3,r2,1
   11dcc:	18005f1e 	bne	r3,zero,11f4c <OSFlagAccept+0x260>
   11dd0:	10c00088 	cmpgei	r3,r2,2
   11dd4:	1800021e 	bne	r3,zero,11de0 <OSFlagAccept+0xf4>
   11dd8:	10003f26 	beq	r2,zero,11ed8 <OSFlagAccept+0x1ec>
   11ddc:	00007706 	br	11fbc <OSFlagAccept+0x2d0>
   11de0:	10c000a0 	cmpeqi	r3,r2,2
   11de4:	1800031e 	bne	r3,zero,11df4 <OSFlagAccept+0x108>
   11de8:	108000e0 	cmpeqi	r2,r2,3
   11dec:	10001e1e 	bne	r2,zero,11e68 <OSFlagAccept+0x17c>
   11df0:	00007206 	br	11fbc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11df4:	e0bffc17 	ldw	r2,-16(fp)
   11df8:	10c0020b 	ldhu	r3,8(r2)
   11dfc:	e0bffd0b 	ldhu	r2,-12(fp)
   11e00:	1884703a 	and	r2,r3,r2
   11e04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11e08:	e0fff30b 	ldhu	r3,-52(fp)
   11e0c:	e0bffd0b 	ldhu	r2,-12(fp)
   11e10:	18800d1e 	bne	r3,r2,11e48 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11e14:	e0bff383 	ldbu	r2,-50(fp)
   11e18:	10800058 	cmpnei	r2,r2,1
   11e1c:	10000d1e 	bne	r2,zero,11e54 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11e20:	e0bffc17 	ldw	r2,-16(fp)
   11e24:	1080020b 	ldhu	r2,8(r2)
   11e28:	1007883a 	mov	r3,r2
   11e2c:	e0bff30b 	ldhu	r2,-52(fp)
   11e30:	0084303a 	nor	r2,zero,r2
   11e34:	1884703a 	and	r2,r3,r2
   11e38:	1007883a 	mov	r3,r2
   11e3c:	e0bffc17 	ldw	r2,-16(fp)
   11e40:	10c0020d 	sth	r3,8(r2)
   11e44:	00000306 	br	11e54 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	00c01c04 	movi	r3,112
   11e50:	10c00005 	stb	r3,0(r2)
   11e54:	e0bff417 	ldw	r2,-48(fp)
   11e58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e5c:	e0bff717 	ldw	r2,-36(fp)
   11e60:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11e64:	00005e06 	br	11fe0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11e68:	e0bffc17 	ldw	r2,-16(fp)
   11e6c:	10c0020b 	ldhu	r3,8(r2)
   11e70:	e0bffd0b 	ldhu	r2,-12(fp)
   11e74:	1884703a 	and	r2,r3,r2
   11e78:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11e7c:	e0bff30b 	ldhu	r2,-52(fp)
   11e80:	10000d26 	beq	r2,zero,11eb8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11e84:	e0bff383 	ldbu	r2,-50(fp)
   11e88:	10800058 	cmpnei	r2,r2,1
   11e8c:	10000d1e 	bne	r2,zero,11ec4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11e90:	e0bffc17 	ldw	r2,-16(fp)
   11e94:	1080020b 	ldhu	r2,8(r2)
   11e98:	1007883a 	mov	r3,r2
   11e9c:	e0bff30b 	ldhu	r2,-52(fp)
   11ea0:	0084303a 	nor	r2,zero,r2
   11ea4:	1884703a 	and	r2,r3,r2
   11ea8:	1007883a 	mov	r3,r2
   11eac:	e0bffc17 	ldw	r2,-16(fp)
   11eb0:	10c0020d 	sth	r3,8(r2)
   11eb4:	00000306 	br	11ec4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	00c01c04 	movi	r3,112
   11ec0:	10c00005 	stb	r3,0(r2)
   11ec4:	e0bff417 	ldw	r2,-48(fp)
   11ec8:	e0bff815 	stw	r2,-32(fp)
   11ecc:	e0bff817 	ldw	r2,-32(fp)
   11ed0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11ed4:	00004206 	br	11fe0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11ed8:	e0bffc17 	ldw	r2,-16(fp)
   11edc:	1080020b 	ldhu	r2,8(r2)
   11ee0:	0084303a 	nor	r2,zero,r2
   11ee4:	1007883a 	mov	r3,r2
   11ee8:	e0bffd0b 	ldhu	r2,-12(fp)
   11eec:	1884703a 	and	r2,r3,r2
   11ef0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11ef4:	e0fff30b 	ldhu	r3,-52(fp)
   11ef8:	e0bffd0b 	ldhu	r2,-12(fp)
   11efc:	18800b1e 	bne	r3,r2,11f2c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f00:	e0bff383 	ldbu	r2,-50(fp)
   11f04:	10800058 	cmpnei	r2,r2,1
   11f08:	10000b1e 	bne	r2,zero,11f38 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
   11f10:	10c0020b 	ldhu	r3,8(r2)
   11f14:	e0bff30b 	ldhu	r2,-52(fp)
   11f18:	1884b03a 	or	r2,r3,r2
   11f1c:	1007883a 	mov	r3,r2
   11f20:	e0bffc17 	ldw	r2,-16(fp)
   11f24:	10c0020d 	sth	r3,8(r2)
   11f28:	00000306 	br	11f38 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11f2c:	e0bfff17 	ldw	r2,-4(fp)
   11f30:	00c01c04 	movi	r3,112
   11f34:	10c00005 	stb	r3,0(r2)
   11f38:	e0bff417 	ldw	r2,-48(fp)
   11f3c:	e0bff915 	stw	r2,-28(fp)
   11f40:	e0bff917 	ldw	r2,-28(fp)
   11f44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11f48:	00002506 	br	11fe0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11f4c:	e0bffc17 	ldw	r2,-16(fp)
   11f50:	1080020b 	ldhu	r2,8(r2)
   11f54:	0084303a 	nor	r2,zero,r2
   11f58:	1007883a 	mov	r3,r2
   11f5c:	e0bffd0b 	ldhu	r2,-12(fp)
   11f60:	1884703a 	and	r2,r3,r2
   11f64:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11f68:	e0bff30b 	ldhu	r2,-52(fp)
   11f6c:	10000b26 	beq	r2,zero,11f9c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f70:	e0bff383 	ldbu	r2,-50(fp)
   11f74:	10800058 	cmpnei	r2,r2,1
   11f78:	10000b1e 	bne	r2,zero,11fa8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11f7c:	e0bffc17 	ldw	r2,-16(fp)
   11f80:	10c0020b 	ldhu	r3,8(r2)
   11f84:	e0bff30b 	ldhu	r2,-52(fp)
   11f88:	1884b03a 	or	r2,r3,r2
   11f8c:	1007883a 	mov	r3,r2
   11f90:	e0bffc17 	ldw	r2,-16(fp)
   11f94:	10c0020d 	sth	r3,8(r2)
   11f98:	00000306 	br	11fa8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11f9c:	e0bfff17 	ldw	r2,-4(fp)
   11fa0:	00c01c04 	movi	r3,112
   11fa4:	10c00005 	stb	r3,0(r2)
   11fa8:	e0bff417 	ldw	r2,-48(fp)
   11fac:	e0bffa15 	stw	r2,-24(fp)
   11fb0:	e0bffa17 	ldw	r2,-24(fp)
   11fb4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11fb8:	00000906 	br	11fe0 <OSFlagAccept+0x2f4>
   11fbc:	e0bff417 	ldw	r2,-48(fp)
   11fc0:	e0bffb15 	stw	r2,-20(fp)
   11fc4:	e0bffb17 	ldw	r2,-20(fp)
   11fc8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11fcc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   11fd0:	e0bfff17 	ldw	r2,-4(fp)
   11fd4:	00c01bc4 	movi	r3,111
   11fd8:	10c00005 	stb	r3,0(r2)
             break;
   11fdc:	0001883a 	nop
    }
    return (flags_rdy);
   11fe0:	e0bff30b 	ldhu	r2,-52(fp)
}
   11fe4:	e037883a 	mov	sp,fp
   11fe8:	df000017 	ldw	fp,0(sp)
   11fec:	dec00104 	addi	sp,sp,4
   11ff0:	f800283a 	ret

00011ff4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   11ff4:	defff804 	addi	sp,sp,-32
   11ff8:	df000715 	stw	fp,28(sp)
   11ffc:	df000704 	addi	fp,sp,28
   12000:	2005883a 	mov	r2,r4
   12004:	e17fff15 	stw	r5,-4(fp)
   12008:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1200c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   12010:	e0bfff17 	ldw	r2,-4(fp)
   12014:	1000021e 	bne	r2,zero,12020 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   12018:	0005883a 	mov	r2,zero
   1201c:	00003b06 	br	1210c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   12020:	008000b4 	movhi	r2,2
   12024:	10bfa704 	addi	r2,r2,-356
   12028:	10800003 	ldbu	r2,0(r2)
   1202c:	10803fcc 	andi	r2,r2,255
   12030:	10000526 	beq	r2,zero,12048 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   12034:	e0bfff17 	ldw	r2,-4(fp)
   12038:	00c00404 	movi	r3,16
   1203c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   12040:	0005883a 	mov	r2,zero
   12044:	00003106 	br	1210c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12048:	0005303a 	rdctl	r2,status
   1204c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12050:	e0fffb17 	ldw	r3,-20(fp)
   12054:	00bfff84 	movi	r2,-2
   12058:	1884703a 	and	r2,r3,r2
   1205c:	1001703a 	wrctl	status,r2
  
  return context;
   12060:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   12064:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   12068:	008000b4 	movhi	r2,2
   1206c:	10bfaa04 	addi	r2,r2,-344
   12070:	10800017 	ldw	r2,0(r2)
   12074:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   12078:	e0bffa17 	ldw	r2,-24(fp)
   1207c:	10001b26 	beq	r2,zero,120ec <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   12080:	008000b4 	movhi	r2,2
   12084:	10bfaa04 	addi	r2,r2,-344
   12088:	10800017 	ldw	r2,0(r2)
   1208c:	10c00117 	ldw	r3,4(r2)
   12090:	008000b4 	movhi	r2,2
   12094:	10bfaa04 	addi	r2,r2,-344
   12098:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1209c:	e0bffa17 	ldw	r2,-24(fp)
   120a0:	00c00144 	movi	r3,5
   120a4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   120a8:	e0bffa17 	ldw	r2,-24(fp)
   120ac:	e0fffe0b 	ldhu	r3,-8(fp)
   120b0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   120b4:	e0bffa17 	ldw	r2,-24(fp)
   120b8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   120bc:	e0bffa17 	ldw	r2,-24(fp)
   120c0:	00c00fc4 	movi	r3,63
   120c4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   120c8:	e0bffa17 	ldw	r2,-24(fp)
   120cc:	100002c5 	stb	zero,11(r2)
   120d0:	e0bff917 	ldw	r2,-28(fp)
   120d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120d8:	e0bffc17 	ldw	r2,-16(fp)
   120dc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   120e0:	e0bfff17 	ldw	r2,-4(fp)
   120e4:	10000005 	stb	zero,0(r2)
   120e8:	00000706 	br	12108 <OSFlagCreate+0x114>
   120ec:	e0bff917 	ldw	r2,-28(fp)
   120f0:	e0bffd15 	stw	r2,-12(fp)
   120f4:	e0bffd17 	ldw	r2,-12(fp)
   120f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   120fc:	e0bfff17 	ldw	r2,-4(fp)
   12100:	00c01c84 	movi	r3,114
   12104:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   12108:	e0bffa17 	ldw	r2,-24(fp)
}
   1210c:	e037883a 	mov	sp,fp
   12110:	df000017 	ldw	fp,0(sp)
   12114:	dec00104 	addi	sp,sp,4
   12118:	f800283a 	ret

0001211c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1211c:	defff204 	addi	sp,sp,-56
   12120:	dfc00d15 	stw	ra,52(sp)
   12124:	df000c15 	stw	fp,48(sp)
   12128:	df000c04 	addi	fp,sp,48
   1212c:	e13ffd15 	stw	r4,-12(fp)
   12130:	2805883a 	mov	r2,r5
   12134:	e1bfff15 	stw	r6,-4(fp)
   12138:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1213c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12140:	e0bfff17 	ldw	r2,-4(fp)
   12144:	1000021e 	bne	r2,zero,12150 <OSFlagDel+0x34>
        return (pgrp);
   12148:	e0bffd17 	ldw	r2,-12(fp)
   1214c:	00008a06 	br	12378 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12150:	e0bffd17 	ldw	r2,-12(fp)
   12154:	1000051e 	bne	r2,zero,1216c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12158:	e0bfff17 	ldw	r2,-4(fp)
   1215c:	00c01b84 	movi	r3,110
   12160:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12164:	e0bffd17 	ldw	r2,-12(fp)
   12168:	00008306 	br	12378 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1216c:	008000b4 	movhi	r2,2
   12170:	10bfa704 	addi	r2,r2,-356
   12174:	10800003 	ldbu	r2,0(r2)
   12178:	10803fcc 	andi	r2,r2,255
   1217c:	10000526 	beq	r2,zero,12194 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12180:	e0bfff17 	ldw	r2,-4(fp)
   12184:	00c003c4 	movi	r3,15
   12188:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1218c:	e0bffd17 	ldw	r2,-12(fp)
   12190:	00007906 	br	12378 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   12194:	e0bffd17 	ldw	r2,-12(fp)
   12198:	10800003 	ldbu	r2,0(r2)
   1219c:	10803fcc 	andi	r2,r2,255
   121a0:	10800160 	cmpeqi	r2,r2,5
   121a4:	1000051e 	bne	r2,zero,121bc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   121a8:	e0bfff17 	ldw	r2,-4(fp)
   121ac:	00c00044 	movi	r3,1
   121b0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   121b4:	e0bffd17 	ldw	r2,-12(fp)
   121b8:	00006f06 	br	12378 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121bc:	0005303a 	rdctl	r2,status
   121c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121c4:	e0fff817 	ldw	r3,-32(fp)
   121c8:	00bfff84 	movi	r2,-2
   121cc:	1884703a 	and	r2,r3,r2
   121d0:	1001703a 	wrctl	status,r2
  
  return context;
   121d4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   121d8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   121dc:	e0bffd17 	ldw	r2,-12(fp)
   121e0:	10800117 	ldw	r2,4(r2)
   121e4:	10000326 	beq	r2,zero,121f4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   121e8:	00800044 	movi	r2,1
   121ec:	e0bff405 	stb	r2,-48(fp)
   121f0:	00000106 	br	121f8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   121f4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   121f8:	e0bffe03 	ldbu	r2,-8(fp)
   121fc:	10000326 	beq	r2,zero,1220c <OSFlagDel+0xf0>
   12200:	10800060 	cmpeqi	r2,r2,1
   12204:	1000271e 	bne	r2,zero,122a4 <OSFlagDel+0x188>
   12208:	00005006 	br	1234c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1220c:	e0bff403 	ldbu	r2,-48(fp)
   12210:	10001a1e 	bne	r2,zero,1227c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   12214:	e0bffd17 	ldw	r2,-12(fp)
   12218:	00c00fc4 	movi	r3,63
   1221c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12220:	e0bffd17 	ldw	r2,-12(fp)
   12224:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12228:	e0bffd17 	ldw	r2,-12(fp)
   1222c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   12230:	008000b4 	movhi	r2,2
   12234:	10bfaa04 	addi	r2,r2,-344
   12238:	10c00017 	ldw	r3,0(r2)
   1223c:	e0bffd17 	ldw	r2,-12(fp)
   12240:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   12244:	e0bffd17 	ldw	r2,-12(fp)
   12248:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1224c:	008000b4 	movhi	r2,2
   12250:	10bfaa04 	addi	r2,r2,-344
   12254:	e0fffd17 	ldw	r3,-12(fp)
   12258:	10c00015 	stw	r3,0(r2)
   1225c:	e0bff717 	ldw	r2,-36(fp)
   12260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12264:	e0bff917 	ldw	r2,-28(fp)
   12268:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1226c:	e0bfff17 	ldw	r2,-4(fp)
   12270:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   12274:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   12278:	00003e06 	br	12374 <OSFlagDel+0x258>
   1227c:	e0bff717 	ldw	r2,-36(fp)
   12280:	e0bffa15 	stw	r2,-24(fp)
   12284:	e0bffa17 	ldw	r2,-24(fp)
   12288:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1228c:	e0bfff17 	ldw	r2,-4(fp)
   12290:	00c01244 	movi	r3,73
   12294:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   12298:	e0bffd17 	ldw	r2,-12(fp)
   1229c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   122a0:	00003406 	br	12374 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   122a4:	e0bffd17 	ldw	r2,-12(fp)
   122a8:	10800117 	ldw	r2,4(r2)
   122ac:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   122b0:	00000606 	br	122cc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   122b4:	e13ff517 	ldw	r4,-44(fp)
   122b8:	000b883a 	mov	r5,zero
   122bc:	00133580 	call	13358 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   122c0:	e0bff517 	ldw	r2,-44(fp)
   122c4:	10800017 	ldw	r2,0(r2)
   122c8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   122cc:	e0bff517 	ldw	r2,-44(fp)
   122d0:	103ff81e 	bne	r2,zero,122b4 <__alt_mem_Flash_flash_data+0xf40122b4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   122d4:	e0bffd17 	ldw	r2,-12(fp)
   122d8:	00c00fc4 	movi	r3,63
   122dc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   122e0:	e0bffd17 	ldw	r2,-12(fp)
   122e4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   122f0:	008000b4 	movhi	r2,2
   122f4:	10bfaa04 	addi	r2,r2,-344
   122f8:	10c00017 	ldw	r3,0(r2)
   122fc:	e0bffd17 	ldw	r2,-12(fp)
   12300:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   12304:	e0bffd17 	ldw	r2,-12(fp)
   12308:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1230c:	008000b4 	movhi	r2,2
   12310:	10bfaa04 	addi	r2,r2,-344
   12314:	e0fffd17 	ldw	r3,-12(fp)
   12318:	10c00015 	stw	r3,0(r2)
   1231c:	e0bff717 	ldw	r2,-36(fp)
   12320:	e0bffb15 	stw	r2,-20(fp)
   12324:	e0bffb17 	ldw	r2,-20(fp)
   12328:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1232c:	e0bff403 	ldbu	r2,-48(fp)
   12330:	10800058 	cmpnei	r2,r2,1
   12334:	1000011e 	bne	r2,zero,1233c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12338:	00114880 	call	11488 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   12344:	e03ff615 	stw	zero,-40(fp)
             break;
   12348:	00000a06 	br	12374 <OSFlagDel+0x258>
   1234c:	e0bff717 	ldw	r2,-36(fp)
   12350:	e0bffc15 	stw	r2,-16(fp)
   12354:	e0bffc17 	ldw	r2,-16(fp)
   12358:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1235c:	e0bfff17 	ldw	r2,-4(fp)
   12360:	00c001c4 	movi	r3,7
   12364:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   12368:	e0bffd17 	ldw	r2,-12(fp)
   1236c:	e0bff615 	stw	r2,-40(fp)
             break;
   12370:	0001883a 	nop
    }
    return (pgrp_return);
   12374:	e0bff617 	ldw	r2,-40(fp)
}
   12378:	e037883a 	mov	sp,fp
   1237c:	dfc00117 	ldw	ra,4(sp)
   12380:	df000017 	ldw	fp,0(sp)
   12384:	dec00204 	addi	sp,sp,8
   12388:	f800283a 	ret

0001238c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1238c:	defff604 	addi	sp,sp,-40
   12390:	dfc00915 	stw	ra,36(sp)
   12394:	df000815 	stw	fp,32(sp)
   12398:	df000804 	addi	fp,sp,32
   1239c:	e13ffd15 	stw	r4,-12(fp)
   123a0:	e17ffe15 	stw	r5,-8(fp)
   123a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   123a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   123ac:	e0bfff17 	ldw	r2,-4(fp)
   123b0:	1000021e 	bne	r2,zero,123bc <OSFlagNameGet+0x30>
        return (0);
   123b4:	0005883a 	mov	r2,zero
   123b8:	00003b06 	br	124a8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   123bc:	e0bffd17 	ldw	r2,-12(fp)
   123c0:	1000051e 	bne	r2,zero,123d8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   123c4:	e0bfff17 	ldw	r2,-4(fp)
   123c8:	00c01b84 	movi	r3,110
   123cc:	10c00005 	stb	r3,0(r2)
        return (0);
   123d0:	0005883a 	mov	r2,zero
   123d4:	00003406 	br	124a8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   123d8:	e0bffe17 	ldw	r2,-8(fp)
   123dc:	1000051e 	bne	r2,zero,123f4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   123e0:	e0bfff17 	ldw	r2,-4(fp)
   123e4:	00c00304 	movi	r3,12
   123e8:	10c00005 	stb	r3,0(r2)
        return (0);
   123ec:	0005883a 	mov	r2,zero
   123f0:	00002d06 	br	124a8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   123f4:	008000b4 	movhi	r2,2
   123f8:	10bfa704 	addi	r2,r2,-356
   123fc:	10800003 	ldbu	r2,0(r2)
   12400:	10803fcc 	andi	r2,r2,255
   12404:	10000526 	beq	r2,zero,1241c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   12408:	e0bfff17 	ldw	r2,-4(fp)
   1240c:	00c00444 	movi	r3,17
   12410:	10c00005 	stb	r3,0(r2)
        return (0);
   12414:	0005883a 	mov	r2,zero
   12418:	00002306 	br	124a8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1241c:	0005303a 	rdctl	r2,status
   12420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12424:	e0fffa17 	ldw	r3,-24(fp)
   12428:	00bfff84 	movi	r2,-2
   1242c:	1884703a 	and	r2,r3,r2
   12430:	1001703a 	wrctl	status,r2
  
  return context;
   12434:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12438:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1243c:	e0bffd17 	ldw	r2,-12(fp)
   12440:	10800003 	ldbu	r2,0(r2)
   12444:	10803fcc 	andi	r2,r2,255
   12448:	10800160 	cmpeqi	r2,r2,5
   1244c:	1000091e 	bne	r2,zero,12474 <OSFlagNameGet+0xe8>
   12450:	e0bff817 	ldw	r2,-32(fp)
   12454:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12458:	e0bffb17 	ldw	r2,-20(fp)
   1245c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12460:	e0bfff17 	ldw	r2,-4(fp)
   12464:	00c00044 	movi	r3,1
   12468:	10c00005 	stb	r3,0(r2)
        return (0);
   1246c:	0005883a 	mov	r2,zero
   12470:	00000d06 	br	124a8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   12474:	e0bffd17 	ldw	r2,-12(fp)
   12478:	10800284 	addi	r2,r2,10
   1247c:	e13ffe17 	ldw	r4,-8(fp)
   12480:	100b883a 	mov	r5,r2
   12484:	00115c40 	call	115c4 <OS_StrCopy>
   12488:	e0bff905 	stb	r2,-28(fp)
   1248c:	e0bff817 	ldw	r2,-32(fp)
   12490:	e0bffc15 	stw	r2,-16(fp)
   12494:	e0bffc17 	ldw	r2,-16(fp)
   12498:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1249c:	e0bfff17 	ldw	r2,-4(fp)
   124a0:	10000005 	stb	zero,0(r2)
    return (len);
   124a4:	e0bff903 	ldbu	r2,-28(fp)
}
   124a8:	e037883a 	mov	sp,fp
   124ac:	dfc00117 	ldw	ra,4(sp)
   124b0:	df000017 	ldw	fp,0(sp)
   124b4:	dec00204 	addi	sp,sp,8
   124b8:	f800283a 	ret

000124bc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   124bc:	defff504 	addi	sp,sp,-44
   124c0:	dfc00a15 	stw	ra,40(sp)
   124c4:	df000915 	stw	fp,36(sp)
   124c8:	df000904 	addi	fp,sp,36
   124cc:	e13ffd15 	stw	r4,-12(fp)
   124d0:	e17ffe15 	stw	r5,-8(fp)
   124d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   124d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   124dc:	e0bfff17 	ldw	r2,-4(fp)
   124e0:	1000011e 	bne	r2,zero,124e8 <OSFlagNameSet+0x2c>
        return;
   124e4:	00004406 	br	125f8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   124e8:	e0bffd17 	ldw	r2,-12(fp)
   124ec:	1000041e 	bne	r2,zero,12500 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   124f0:	e0bfff17 	ldw	r2,-4(fp)
   124f4:	00c01b84 	movi	r3,110
   124f8:	10c00005 	stb	r3,0(r2)
        return;
   124fc:	00003e06 	br	125f8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12500:	e0bffe17 	ldw	r2,-8(fp)
   12504:	1000041e 	bne	r2,zero,12518 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   12508:	e0bfff17 	ldw	r2,-4(fp)
   1250c:	00c00304 	movi	r3,12
   12510:	10c00005 	stb	r3,0(r2)
        return;
   12514:	00003806 	br	125f8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12518:	008000b4 	movhi	r2,2
   1251c:	10bfa704 	addi	r2,r2,-356
   12520:	10800003 	ldbu	r2,0(r2)
   12524:	10803fcc 	andi	r2,r2,255
   12528:	10000426 	beq	r2,zero,1253c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1252c:	e0bfff17 	ldw	r2,-4(fp)
   12530:	00c00484 	movi	r3,18
   12534:	10c00005 	stb	r3,0(r2)
        return;
   12538:	00002f06 	br	125f8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1253c:	0005303a 	rdctl	r2,status
   12540:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12544:	e0fff917 	ldw	r3,-28(fp)
   12548:	00bfff84 	movi	r2,-2
   1254c:	1884703a 	and	r2,r3,r2
   12550:	1001703a 	wrctl	status,r2
  
  return context;
   12554:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12558:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1255c:	e0bffd17 	ldw	r2,-12(fp)
   12560:	10800003 	ldbu	r2,0(r2)
   12564:	10803fcc 	andi	r2,r2,255
   12568:	10800160 	cmpeqi	r2,r2,5
   1256c:	1000081e 	bne	r2,zero,12590 <OSFlagNameSet+0xd4>
   12570:	e0bff717 	ldw	r2,-36(fp)
   12574:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12578:	e0bffa17 	ldw	r2,-24(fp)
   1257c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	00c00044 	movi	r3,1
   12588:	10c00005 	stb	r3,0(r2)
        return;
   1258c:	00001a06 	br	125f8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   12590:	e13ffe17 	ldw	r4,-8(fp)
   12594:	00116380 	call	11638 <OS_StrLen>
   12598:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1259c:	e0bff803 	ldbu	r2,-32(fp)
   125a0:	10800830 	cmpltui	r2,r2,32
   125a4:	1000081e 	bne	r2,zero,125c8 <OSFlagNameSet+0x10c>
   125a8:	e0bff717 	ldw	r2,-36(fp)
   125ac:	e0bffb15 	stw	r2,-20(fp)
   125b0:	e0bffb17 	ldw	r2,-20(fp)
   125b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   125b8:	e0bfff17 	ldw	r2,-4(fp)
   125bc:	00c01cc4 	movi	r3,115
   125c0:	10c00005 	stb	r3,0(r2)
        return;
   125c4:	00000c06 	br	125f8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   125c8:	e0bffd17 	ldw	r2,-12(fp)
   125cc:	10800284 	addi	r2,r2,10
   125d0:	1009883a 	mov	r4,r2
   125d4:	e17ffe17 	ldw	r5,-8(fp)
   125d8:	00115c40 	call	115c4 <OS_StrCopy>
   125dc:	e0bff717 	ldw	r2,-36(fp)
   125e0:	e0bffc15 	stw	r2,-16(fp)
   125e4:	e0bffc17 	ldw	r2,-16(fp)
   125e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   125ec:	e0bfff17 	ldw	r2,-4(fp)
   125f0:	10000005 	stb	zero,0(r2)
    return;
   125f4:	0001883a 	nop
}
   125f8:	e037883a 	mov	sp,fp
   125fc:	dfc00117 	ldw	ra,4(sp)
   12600:	df000017 	ldw	fp,0(sp)
   12604:	dec00204 	addi	sp,sp,8
   12608:	f800283a 	ret

0001260c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1260c:	deffe204 	addi	sp,sp,-120
   12610:	dfc01d15 	stw	ra,116(sp)
   12614:	df001c15 	stw	fp,112(sp)
   12618:	df001c04 	addi	fp,sp,112
   1261c:	e13ffc15 	stw	r4,-16(fp)
   12620:	2809883a 	mov	r4,r5
   12624:	3007883a 	mov	r3,r6
   12628:	3805883a 	mov	r2,r7
   1262c:	e13ffd0d 	sth	r4,-12(fp)
   12630:	e0fffe05 	stb	r3,-8(fp)
   12634:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12638:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1263c:	e0800217 	ldw	r2,8(fp)
   12640:	1000021e 	bne	r2,zero,1264c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   12644:	0005883a 	mov	r2,zero
   12648:	00016706 	br	12be8 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1264c:	e0bffc17 	ldw	r2,-16(fp)
   12650:	1000051e 	bne	r2,zero,12668 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12654:	e0800217 	ldw	r2,8(fp)
   12658:	00c01b84 	movi	r3,110
   1265c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12660:	0005883a 	mov	r2,zero
   12664:	00016006 	br	12be8 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12668:	008000b4 	movhi	r2,2
   1266c:	10bfa704 	addi	r2,r2,-356
   12670:	10800003 	ldbu	r2,0(r2)
   12674:	10803fcc 	andi	r2,r2,255
   12678:	10000526 	beq	r2,zero,12690 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1267c:	e0800217 	ldw	r2,8(fp)
   12680:	00c00084 	movi	r3,2
   12684:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12688:	0005883a 	mov	r2,zero
   1268c:	00015606 	br	12be8 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   12690:	008000b4 	movhi	r2,2
   12694:	10bf9904 	addi	r2,r2,-412
   12698:	10800003 	ldbu	r2,0(r2)
   1269c:	10803fcc 	andi	r2,r2,255
   126a0:	10000526 	beq	r2,zero,126b8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   126a4:	e0800217 	ldw	r2,8(fp)
   126a8:	00c00344 	movi	r3,13
   126ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   126b0:	0005883a 	mov	r2,zero
   126b4:	00014c06 	br	12be8 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   126b8:	e0bffc17 	ldw	r2,-16(fp)
   126bc:	10800003 	ldbu	r2,0(r2)
   126c0:	10803fcc 	andi	r2,r2,255
   126c4:	10800160 	cmpeqi	r2,r2,5
   126c8:	1000051e 	bne	r2,zero,126e0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   126cc:	e0800217 	ldw	r2,8(fp)
   126d0:	00c00044 	movi	r3,1
   126d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   126d8:	0005883a 	mov	r2,zero
   126dc:	00014206 	br	12be8 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   126e0:	e0fffe03 	ldbu	r3,-8(fp)
   126e4:	00bfe004 	movi	r2,-128
   126e8:	1884703a 	and	r2,r3,r2
   126ec:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   126f0:	e0bfe703 	ldbu	r2,-100(fp)
   126f4:	10000626 	beq	r2,zero,12710 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   126f8:	e0bffe03 	ldbu	r2,-8(fp)
   126fc:	10801fcc 	andi	r2,r2,127
   12700:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12704:	00800044 	movi	r2,1
   12708:	e0bfe505 	stb	r2,-108(fp)
   1270c:	00000106 	br	12714 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   12710:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12714:	0005303a 	rdctl	r2,status
   12718:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1271c:	e0ffe917 	ldw	r3,-92(fp)
   12720:	00bfff84 	movi	r2,-2
   12724:	1884703a 	and	r2,r3,r2
   12728:	1001703a 	wrctl	status,r2
  
  return context;
   1272c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12730:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   12734:	e0bffe03 	ldbu	r2,-8(fp)
   12738:	10c00060 	cmpeqi	r3,r2,1
   1273c:	1800921e 	bne	r3,zero,12988 <OSFlagPend+0x37c>
   12740:	10c00088 	cmpgei	r3,r2,2
   12744:	1800021e 	bne	r3,zero,12750 <OSFlagPend+0x144>
   12748:	10006126 	beq	r2,zero,128d0 <OSFlagPend+0x2c4>
   1274c:	0000bb06 	br	12a3c <OSFlagPend+0x430>
   12750:	10c000a0 	cmpeqi	r3,r2,2
   12754:	1800031e 	bne	r3,zero,12764 <OSFlagPend+0x158>
   12758:	108000e0 	cmpeqi	r2,r2,3
   1275c:	10002f1e 	bne	r2,zero,1281c <OSFlagPend+0x210>
   12760:	0000b606 	br	12a3c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   12764:	e0bffc17 	ldw	r2,-16(fp)
   12768:	10c0020b 	ldhu	r3,8(r2)
   1276c:	e0bffd0b 	ldhu	r2,-12(fp)
   12770:	1884703a 	and	r2,r3,r2
   12774:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12778:	e0ffe78b 	ldhu	r3,-98(fp)
   1277c:	e0bffd0b 	ldhu	r2,-12(fp)
   12780:	1880191e 	bne	r3,r2,127e8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12784:	e0bfe503 	ldbu	r2,-108(fp)
   12788:	10800058 	cmpnei	r2,r2,1
   1278c:	1000091e 	bne	r2,zero,127b4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12790:	e0bffc17 	ldw	r2,-16(fp)
   12794:	1080020b 	ldhu	r2,8(r2)
   12798:	1007883a 	mov	r3,r2
   1279c:	e0bfe78b 	ldhu	r2,-98(fp)
   127a0:	0084303a 	nor	r2,zero,r2
   127a4:	1884703a 	and	r2,r3,r2
   127a8:	1007883a 	mov	r3,r2
   127ac:	e0bffc17 	ldw	r2,-16(fp)
   127b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   127b4:	008000b4 	movhi	r2,2
   127b8:	10bfa804 	addi	r2,r2,-352
   127bc:	10800017 	ldw	r2,0(r2)
   127c0:	e0ffe78b 	ldhu	r3,-98(fp)
   127c4:	10c00b0d 	sth	r3,44(r2)
   127c8:	e0bfe617 	ldw	r2,-104(fp)
   127cc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127d0:	e0bfea17 	ldw	r2,-88(fp)
   127d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   127d8:	e0800217 	ldw	r2,8(fp)
   127dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   127e0:	e0bfe78b 	ldhu	r2,-98(fp)
   127e4:	00010006 	br	12be8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   127e8:	e1bffd0b 	ldhu	r6,-12(fp)
   127ec:	e0fffe03 	ldbu	r3,-8(fp)
   127f0:	e0bfff0b 	ldhu	r2,-4(fp)
   127f4:	e17ff704 	addi	r5,fp,-36
   127f8:	d8800015 	stw	r2,0(sp)
   127fc:	e13ffc17 	ldw	r4,-16(fp)
   12800:	180f883a 	mov	r7,r3
   12804:	00130b00 	call	130b0 <OS_FlagBlock>
   12808:	e0bfe617 	ldw	r2,-104(fp)
   1280c:	e0bfeb15 	stw	r2,-84(fp)
   12810:	e0bfeb17 	ldw	r2,-84(fp)
   12814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12818:	00009206 	br	12a64 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1281c:	e0bffc17 	ldw	r2,-16(fp)
   12820:	10c0020b 	ldhu	r3,8(r2)
   12824:	e0bffd0b 	ldhu	r2,-12(fp)
   12828:	1884703a 	and	r2,r3,r2
   1282c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12830:	e0bfe78b 	ldhu	r2,-98(fp)
   12834:	10001926 	beq	r2,zero,1289c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12838:	e0bfe503 	ldbu	r2,-108(fp)
   1283c:	10800058 	cmpnei	r2,r2,1
   12840:	1000091e 	bne	r2,zero,12868 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12844:	e0bffc17 	ldw	r2,-16(fp)
   12848:	1080020b 	ldhu	r2,8(r2)
   1284c:	1007883a 	mov	r3,r2
   12850:	e0bfe78b 	ldhu	r2,-98(fp)
   12854:	0084303a 	nor	r2,zero,r2
   12858:	1884703a 	and	r2,r3,r2
   1285c:	1007883a 	mov	r3,r2
   12860:	e0bffc17 	ldw	r2,-16(fp)
   12864:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12868:	008000b4 	movhi	r2,2
   1286c:	10bfa804 	addi	r2,r2,-352
   12870:	10800017 	ldw	r2,0(r2)
   12874:	e0ffe78b 	ldhu	r3,-98(fp)
   12878:	10c00b0d 	sth	r3,44(r2)
   1287c:	e0bfe617 	ldw	r2,-104(fp)
   12880:	e0bfec15 	stw	r2,-80(fp)
   12884:	e0bfec17 	ldw	r2,-80(fp)
   12888:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1288c:	e0800217 	ldw	r2,8(fp)
   12890:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12894:	e0bfe78b 	ldhu	r2,-98(fp)
   12898:	0000d306 	br	12be8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1289c:	e1bffd0b 	ldhu	r6,-12(fp)
   128a0:	e0fffe03 	ldbu	r3,-8(fp)
   128a4:	e0bfff0b 	ldhu	r2,-4(fp)
   128a8:	e17ff704 	addi	r5,fp,-36
   128ac:	d8800015 	stw	r2,0(sp)
   128b0:	e13ffc17 	ldw	r4,-16(fp)
   128b4:	180f883a 	mov	r7,r3
   128b8:	00130b00 	call	130b0 <OS_FlagBlock>
   128bc:	e0bfe617 	ldw	r2,-104(fp)
   128c0:	e0bfed15 	stw	r2,-76(fp)
   128c4:	e0bfed17 	ldw	r2,-76(fp)
   128c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   128cc:	00006506 	br	12a64 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   128d0:	e0bffc17 	ldw	r2,-16(fp)
   128d4:	1080020b 	ldhu	r2,8(r2)
   128d8:	0084303a 	nor	r2,zero,r2
   128dc:	1007883a 	mov	r3,r2
   128e0:	e0bffd0b 	ldhu	r2,-12(fp)
   128e4:	1884703a 	and	r2,r3,r2
   128e8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   128ec:	e0ffe78b 	ldhu	r3,-98(fp)
   128f0:	e0bffd0b 	ldhu	r2,-12(fp)
   128f4:	1880171e 	bne	r3,r2,12954 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   128f8:	e0bfe503 	ldbu	r2,-108(fp)
   128fc:	10800058 	cmpnei	r2,r2,1
   12900:	1000071e 	bne	r2,zero,12920 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12904:	e0bffc17 	ldw	r2,-16(fp)
   12908:	10c0020b 	ldhu	r3,8(r2)
   1290c:	e0bfe78b 	ldhu	r2,-98(fp)
   12910:	1884b03a 	or	r2,r3,r2
   12914:	1007883a 	mov	r3,r2
   12918:	e0bffc17 	ldw	r2,-16(fp)
   1291c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12920:	008000b4 	movhi	r2,2
   12924:	10bfa804 	addi	r2,r2,-352
   12928:	10800017 	ldw	r2,0(r2)
   1292c:	e0ffe78b 	ldhu	r3,-98(fp)
   12930:	10c00b0d 	sth	r3,44(r2)
   12934:	e0bfe617 	ldw	r2,-104(fp)
   12938:	e0bfee15 	stw	r2,-72(fp)
   1293c:	e0bfee17 	ldw	r2,-72(fp)
   12940:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12944:	e0800217 	ldw	r2,8(fp)
   12948:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1294c:	e0bfe78b 	ldhu	r2,-98(fp)
   12950:	0000a506 	br	12be8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12954:	e1bffd0b 	ldhu	r6,-12(fp)
   12958:	e0fffe03 	ldbu	r3,-8(fp)
   1295c:	e0bfff0b 	ldhu	r2,-4(fp)
   12960:	e17ff704 	addi	r5,fp,-36
   12964:	d8800015 	stw	r2,0(sp)
   12968:	e13ffc17 	ldw	r4,-16(fp)
   1296c:	180f883a 	mov	r7,r3
   12970:	00130b00 	call	130b0 <OS_FlagBlock>
   12974:	e0bfe617 	ldw	r2,-104(fp)
   12978:	e0bfef15 	stw	r2,-68(fp)
   1297c:	e0bfef17 	ldw	r2,-68(fp)
   12980:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12984:	00003706 	br	12a64 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12988:	e0bffc17 	ldw	r2,-16(fp)
   1298c:	1080020b 	ldhu	r2,8(r2)
   12990:	0084303a 	nor	r2,zero,r2
   12994:	1007883a 	mov	r3,r2
   12998:	e0bffd0b 	ldhu	r2,-12(fp)
   1299c:	1884703a 	and	r2,r3,r2
   129a0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   129a4:	e0bfe78b 	ldhu	r2,-98(fp)
   129a8:	10001726 	beq	r2,zero,12a08 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   129ac:	e0bfe503 	ldbu	r2,-108(fp)
   129b0:	10800058 	cmpnei	r2,r2,1
   129b4:	1000071e 	bne	r2,zero,129d4 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   129b8:	e0bffc17 	ldw	r2,-16(fp)
   129bc:	10c0020b 	ldhu	r3,8(r2)
   129c0:	e0bfe78b 	ldhu	r2,-98(fp)
   129c4:	1884b03a 	or	r2,r3,r2
   129c8:	1007883a 	mov	r3,r2
   129cc:	e0bffc17 	ldw	r2,-16(fp)
   129d0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   129d4:	008000b4 	movhi	r2,2
   129d8:	10bfa804 	addi	r2,r2,-352
   129dc:	10800017 	ldw	r2,0(r2)
   129e0:	e0ffe78b 	ldhu	r3,-98(fp)
   129e4:	10c00b0d 	sth	r3,44(r2)
   129e8:	e0bfe617 	ldw	r2,-104(fp)
   129ec:	e0bff015 	stw	r2,-64(fp)
   129f0:	e0bff017 	ldw	r2,-64(fp)
   129f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   129f8:	e0800217 	ldw	r2,8(fp)
   129fc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12a00:	e0bfe78b 	ldhu	r2,-98(fp)
   12a04:	00007806 	br	12be8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12a08:	e1bffd0b 	ldhu	r6,-12(fp)
   12a0c:	e0fffe03 	ldbu	r3,-8(fp)
   12a10:	e0bfff0b 	ldhu	r2,-4(fp)
   12a14:	e17ff704 	addi	r5,fp,-36
   12a18:	d8800015 	stw	r2,0(sp)
   12a1c:	e13ffc17 	ldw	r4,-16(fp)
   12a20:	180f883a 	mov	r7,r3
   12a24:	00130b00 	call	130b0 <OS_FlagBlock>
   12a28:	e0bfe617 	ldw	r2,-104(fp)
   12a2c:	e0bff115 	stw	r2,-60(fp)
   12a30:	e0bff117 	ldw	r2,-60(fp)
   12a34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12a38:	00000a06 	br	12a64 <OSFlagPend+0x458>
   12a3c:	e0bfe617 	ldw	r2,-104(fp)
   12a40:	e0bff215 	stw	r2,-56(fp)
   12a44:	e0bff217 	ldw	r2,-56(fp)
   12a48:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12a4c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12a50:	e0800217 	ldw	r2,8(fp)
   12a54:	00c01bc4 	movi	r3,111
   12a58:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12a5c:	e0bfe78b 	ldhu	r2,-98(fp)
   12a60:	00006106 	br	12be8 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12a64:	00114880 	call	11488 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a68:	0005303a 	rdctl	r2,status
   12a6c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a70:	e0fff317 	ldw	r3,-52(fp)
   12a74:	00bfff84 	movi	r2,-2
   12a78:	1884703a 	and	r2,r3,r2
   12a7c:	1001703a 	wrctl	status,r2
  
  return context;
   12a80:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   12a84:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12a88:	008000b4 	movhi	r2,2
   12a8c:	10bfa804 	addi	r2,r2,-352
   12a90:	10800017 	ldw	r2,0(r2)
   12a94:	10800c43 	ldbu	r2,49(r2)
   12a98:	10803fcc 	andi	r2,r2,255
   12a9c:	10002226 	beq	r2,zero,12b28 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   12aa0:	008000b4 	movhi	r2,2
   12aa4:	10bfa804 	addi	r2,r2,-352
   12aa8:	10800017 	ldw	r2,0(r2)
   12aac:	10800c43 	ldbu	r2,49(r2)
   12ab0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12ab4:	008000b4 	movhi	r2,2
   12ab8:	10bfa804 	addi	r2,r2,-352
   12abc:	10800017 	ldw	r2,0(r2)
   12ac0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   12ac4:	e0bff704 	addi	r2,fp,-36
   12ac8:	1009883a 	mov	r4,r2
   12acc:	00134680 	call	13468 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   12ad0:	008000b4 	movhi	r2,2
   12ad4:	10bfa804 	addi	r2,r2,-352
   12ad8:	10800017 	ldw	r2,0(r2)
   12adc:	10000c05 	stb	zero,48(r2)
   12ae0:	e0bfe617 	ldw	r2,-104(fp)
   12ae4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ae8:	e0bff417 	ldw	r2,-48(fp)
   12aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   12af0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   12af4:	e0bfe803 	ldbu	r2,-96(fp)
   12af8:	108000a0 	cmpeqi	r2,r2,2
   12afc:	10000426 	beq	r2,zero,12b10 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   12b00:	e0800217 	ldw	r2,8(fp)
   12b04:	00c00384 	movi	r3,14
   12b08:	10c00005 	stb	r3,0(r2)
                 break;
   12b0c:	00000406 	br	12b20 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   12b10:	e0800217 	ldw	r2,8(fp)
   12b14:	00c00284 	movi	r3,10
   12b18:	10c00005 	stb	r3,0(r2)
                 break;
   12b1c:	0001883a 	nop
        }
        return (flags_rdy);
   12b20:	e0bfe78b 	ldhu	r2,-98(fp)
   12b24:	00003006 	br	12be8 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   12b28:	008000b4 	movhi	r2,2
   12b2c:	10bfa804 	addi	r2,r2,-352
   12b30:	10800017 	ldw	r2,0(r2)
   12b34:	10800b0b 	ldhu	r2,44(r2)
   12b38:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   12b3c:	e0bfe503 	ldbu	r2,-108(fp)
   12b40:	10800058 	cmpnei	r2,r2,1
   12b44:	1000211e 	bne	r2,zero,12bcc <OSFlagPend+0x5c0>
        switch (wait_type) {
   12b48:	e0bffe03 	ldbu	r2,-8(fp)
   12b4c:	10001616 	blt	r2,zero,12ba8 <OSFlagPend+0x59c>
   12b50:	10c00090 	cmplti	r3,r2,2
   12b54:	18000c1e 	bne	r3,zero,12b88 <OSFlagPend+0x57c>
   12b58:	10800108 	cmpgei	r2,r2,4
   12b5c:	1000121e 	bne	r2,zero,12ba8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   12b60:	e0bffc17 	ldw	r2,-16(fp)
   12b64:	1080020b 	ldhu	r2,8(r2)
   12b68:	1007883a 	mov	r3,r2
   12b6c:	e0bfe78b 	ldhu	r2,-98(fp)
   12b70:	0084303a 	nor	r2,zero,r2
   12b74:	1884703a 	and	r2,r3,r2
   12b78:	1007883a 	mov	r3,r2
   12b7c:	e0bffc17 	ldw	r2,-16(fp)
   12b80:	10c0020d 	sth	r3,8(r2)
                 break;
   12b84:	00001106 	br	12bcc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   12b88:	e0bffc17 	ldw	r2,-16(fp)
   12b8c:	10c0020b 	ldhu	r3,8(r2)
   12b90:	e0bfe78b 	ldhu	r2,-98(fp)
   12b94:	1884b03a 	or	r2,r3,r2
   12b98:	1007883a 	mov	r3,r2
   12b9c:	e0bffc17 	ldw	r2,-16(fp)
   12ba0:	10c0020d 	sth	r3,8(r2)
                 break;
   12ba4:	00000906 	br	12bcc <OSFlagPend+0x5c0>
   12ba8:	e0bfe617 	ldw	r2,-104(fp)
   12bac:	e0bff515 	stw	r2,-44(fp)
   12bb0:	e0bff517 	ldw	r2,-44(fp)
   12bb4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12bb8:	e0800217 	ldw	r2,8(fp)
   12bbc:	00c01bc4 	movi	r3,111
   12bc0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12bc4:	0005883a 	mov	r2,zero
   12bc8:	00000706 	br	12be8 <OSFlagPend+0x5dc>
   12bcc:	e0bfe617 	ldw	r2,-104(fp)
   12bd0:	e0bff615 	stw	r2,-40(fp)
   12bd4:	e0bff617 	ldw	r2,-40(fp)
   12bd8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   12bdc:	e0800217 	ldw	r2,8(fp)
   12be0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   12be4:	e0bfe78b 	ldhu	r2,-98(fp)
}
   12be8:	e037883a 	mov	sp,fp
   12bec:	dfc00117 	ldw	ra,4(sp)
   12bf0:	df000017 	ldw	fp,0(sp)
   12bf4:	dec00204 	addi	sp,sp,8
   12bf8:	f800283a 	ret

00012bfc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   12bfc:	defffb04 	addi	sp,sp,-20
   12c00:	df000415 	stw	fp,16(sp)
   12c04:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12c08:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c0c:	0005303a 	rdctl	r2,status
   12c10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c14:	e0fffe17 	ldw	r3,-8(fp)
   12c18:	00bfff84 	movi	r2,-2
   12c1c:	1884703a 	and	r2,r3,r2
   12c20:	1001703a 	wrctl	status,r2
  
  return context;
   12c24:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   12c28:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   12c2c:	008000b4 	movhi	r2,2
   12c30:	10bfa804 	addi	r2,r2,-352
   12c34:	10800017 	ldw	r2,0(r2)
   12c38:	10800b0b 	ldhu	r2,44(r2)
   12c3c:	e0bffd0d 	sth	r2,-12(fp)
   12c40:	e0bffc17 	ldw	r2,-16(fp)
   12c44:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c48:	e0bfff17 	ldw	r2,-4(fp)
   12c4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   12c50:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12c54:	e037883a 	mov	sp,fp
   12c58:	df000017 	ldw	fp,0(sp)
   12c5c:	dec00104 	addi	sp,sp,4
   12c60:	f800283a 	ret

00012c64 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   12c64:	deffef04 	addi	sp,sp,-68
   12c68:	dfc01015 	stw	ra,64(sp)
   12c6c:	df000f15 	stw	fp,60(sp)
   12c70:	df000f04 	addi	fp,sp,60
   12c74:	e13ffc15 	stw	r4,-16(fp)
   12c78:	2807883a 	mov	r3,r5
   12c7c:	3005883a 	mov	r2,r6
   12c80:	e1ffff15 	stw	r7,-4(fp)
   12c84:	e0fffd0d 	sth	r3,-12(fp)
   12c88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   12c8c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   12c90:	e0bfff17 	ldw	r2,-4(fp)
   12c94:	1000021e 	bne	r2,zero,12ca0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   12c98:	0005883a 	mov	r2,zero
   12c9c:	0000ce06 	br	12fd8 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   12ca0:	e0bffc17 	ldw	r2,-16(fp)
   12ca4:	1000051e 	bne	r2,zero,12cbc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12ca8:	e0bfff17 	ldw	r2,-4(fp)
   12cac:	00c01b84 	movi	r3,110
   12cb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12cb4:	0005883a 	mov	r2,zero
   12cb8:	0000c706 	br	12fd8 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   12cbc:	e0bffc17 	ldw	r2,-16(fp)
   12cc0:	10800003 	ldbu	r2,0(r2)
   12cc4:	10803fcc 	andi	r2,r2,255
   12cc8:	10800160 	cmpeqi	r2,r2,5
   12ccc:	1000051e 	bne	r2,zero,12ce4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   12cd0:	e0bfff17 	ldw	r2,-4(fp)
   12cd4:	00c00044 	movi	r3,1
   12cd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12cdc:	0005883a 	mov	r2,zero
   12ce0:	0000bd06 	br	12fd8 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ce4:	0005303a 	rdctl	r2,status
   12ce8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cec:	e0fff617 	ldw	r3,-40(fp)
   12cf0:	00bfff84 	movi	r2,-2
   12cf4:	1884703a 	and	r2,r3,r2
   12cf8:	1001703a 	wrctl	status,r2
  
  return context;
   12cfc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12d00:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   12d04:	e0bffe03 	ldbu	r2,-8(fp)
   12d08:	10000326 	beq	r2,zero,12d18 <OSFlagPost+0xb4>
   12d0c:	10800060 	cmpeqi	r2,r2,1
   12d10:	10000b1e 	bne	r2,zero,12d40 <OSFlagPost+0xdc>
   12d14:	00001206 	br	12d60 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   12d18:	e0bffc17 	ldw	r2,-16(fp)
   12d1c:	1080020b 	ldhu	r2,8(r2)
   12d20:	1007883a 	mov	r3,r2
   12d24:	e0bffd0b 	ldhu	r2,-12(fp)
   12d28:	0084303a 	nor	r2,zero,r2
   12d2c:	1884703a 	and	r2,r3,r2
   12d30:	1007883a 	mov	r3,r2
   12d34:	e0bffc17 	ldw	r2,-16(fp)
   12d38:	10c0020d 	sth	r3,8(r2)
             break;
   12d3c:	00001106 	br	12d84 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   12d40:	e0bffc17 	ldw	r2,-16(fp)
   12d44:	10c0020b 	ldhu	r3,8(r2)
   12d48:	e0bffd0b 	ldhu	r2,-12(fp)
   12d4c:	1884b03a 	or	r2,r3,r2
   12d50:	1007883a 	mov	r3,r2
   12d54:	e0bffc17 	ldw	r2,-16(fp)
   12d58:	10c0020d 	sth	r3,8(r2)
             break;
   12d5c:	00000906 	br	12d84 <OSFlagPost+0x120>
   12d60:	e0bff317 	ldw	r2,-52(fp)
   12d64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d68:	e0bff717 	ldw	r2,-36(fp)
   12d6c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   12d70:	e0bfff17 	ldw	r2,-4(fp)
   12d74:	00c01c44 	movi	r3,113
   12d78:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   12d7c:	0005883a 	mov	r2,zero
   12d80:	00009506 	br	12fd8 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   12d84:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12d88:	e0bffc17 	ldw	r2,-16(fp)
   12d8c:	10800117 	ldw	r2,4(r2)
   12d90:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12d94:	00007406 	br	12f68 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   12d98:	e0bff117 	ldw	r2,-60(fp)
   12d9c:	10800483 	ldbu	r2,18(r2)
   12da0:	10803fcc 	andi	r2,r2,255
   12da4:	10c00060 	cmpeqi	r3,r2,1
   12da8:	18004d1e 	bne	r3,zero,12ee0 <OSFlagPost+0x27c>
   12dac:	10c00088 	cmpgei	r3,r2,2
   12db0:	1800021e 	bne	r3,zero,12dbc <OSFlagPost+0x158>
   12db4:	10003126 	beq	r2,zero,12e7c <OSFlagPost+0x218>
   12db8:	00005f06 	br	12f38 <OSFlagPost+0x2d4>
   12dbc:	10c000a0 	cmpeqi	r3,r2,2
   12dc0:	1800031e 	bne	r3,zero,12dd0 <OSFlagPost+0x16c>
   12dc4:	108000e0 	cmpeqi	r2,r2,3
   12dc8:	1000181e 	bne	r2,zero,12e2c <OSFlagPost+0x1c8>
   12dcc:	00005a06 	br	12f38 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12dd0:	e0bffc17 	ldw	r2,-16(fp)
   12dd4:	10c0020b 	ldhu	r3,8(r2)
   12dd8:	e0bff117 	ldw	r2,-60(fp)
   12ddc:	1080040b 	ldhu	r2,16(r2)
   12de0:	1884703a 	and	r2,r3,r2
   12de4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12de8:	e0bff117 	ldw	r2,-60(fp)
   12dec:	1080040b 	ldhu	r2,16(r2)
   12df0:	10ffffcc 	andi	r3,r2,65535
   12df4:	e0bff40b 	ldhu	r2,-48(fp)
   12df8:	18800b1e 	bne	r3,r2,12e28 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12dfc:	e0bff40b 	ldhu	r2,-48(fp)
   12e00:	e13ff117 	ldw	r4,-60(fp)
   12e04:	100b883a 	mov	r5,r2
   12e08:	00133580 	call	13358 <OS_FlagTaskRdy>
   12e0c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12e10:	e0bff483 	ldbu	r2,-46(fp)
   12e14:	10800058 	cmpnei	r2,r2,1
   12e18:	1000031e 	bne	r2,zero,12e28 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12e1c:	00800044 	movi	r2,1
   12e20:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12e24:	00004d06 	br	12f5c <OSFlagPost+0x2f8>
   12e28:	00004c06 	br	12f5c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12e2c:	e0bffc17 	ldw	r2,-16(fp)
   12e30:	10c0020b 	ldhu	r3,8(r2)
   12e34:	e0bff117 	ldw	r2,-60(fp)
   12e38:	1080040b 	ldhu	r2,16(r2)
   12e3c:	1884703a 	and	r2,r3,r2
   12e40:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12e44:	e0bff40b 	ldhu	r2,-48(fp)
   12e48:	10000b26 	beq	r2,zero,12e78 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12e4c:	e0bff40b 	ldhu	r2,-48(fp)
   12e50:	e13ff117 	ldw	r4,-60(fp)
   12e54:	100b883a 	mov	r5,r2
   12e58:	00133580 	call	13358 <OS_FlagTaskRdy>
   12e5c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12e60:	e0bff483 	ldbu	r2,-46(fp)
   12e64:	10800058 	cmpnei	r2,r2,1
   12e68:	1000031e 	bne	r2,zero,12e78 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12e6c:	00800044 	movi	r2,1
   12e70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12e74:	00003906 	br	12f5c <OSFlagPost+0x2f8>
   12e78:	00003806 	br	12f5c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12e7c:	e0bffc17 	ldw	r2,-16(fp)
   12e80:	1080020b 	ldhu	r2,8(r2)
   12e84:	0084303a 	nor	r2,zero,r2
   12e88:	1007883a 	mov	r3,r2
   12e8c:	e0bff117 	ldw	r2,-60(fp)
   12e90:	1080040b 	ldhu	r2,16(r2)
   12e94:	1884703a 	and	r2,r3,r2
   12e98:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12e9c:	e0bff117 	ldw	r2,-60(fp)
   12ea0:	1080040b 	ldhu	r2,16(r2)
   12ea4:	10ffffcc 	andi	r3,r2,65535
   12ea8:	e0bff40b 	ldhu	r2,-48(fp)
   12eac:	18800b1e 	bne	r3,r2,12edc <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12eb0:	e0bff40b 	ldhu	r2,-48(fp)
   12eb4:	e13ff117 	ldw	r4,-60(fp)
   12eb8:	100b883a 	mov	r5,r2
   12ebc:	00133580 	call	13358 <OS_FlagTaskRdy>
   12ec0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12ec4:	e0bff483 	ldbu	r2,-46(fp)
   12ec8:	10800058 	cmpnei	r2,r2,1
   12ecc:	1000031e 	bne	r2,zero,12edc <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12ed0:	00800044 	movi	r2,1
   12ed4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12ed8:	00002006 	br	12f5c <OSFlagPost+0x2f8>
   12edc:	00001f06 	br	12f5c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12ee0:	e0bffc17 	ldw	r2,-16(fp)
   12ee4:	1080020b 	ldhu	r2,8(r2)
   12ee8:	0084303a 	nor	r2,zero,r2
   12eec:	1007883a 	mov	r3,r2
   12ef0:	e0bff117 	ldw	r2,-60(fp)
   12ef4:	1080040b 	ldhu	r2,16(r2)
   12ef8:	1884703a 	and	r2,r3,r2
   12efc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12f00:	e0bff40b 	ldhu	r2,-48(fp)
   12f04:	10000b26 	beq	r2,zero,12f34 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12f08:	e0bff40b 	ldhu	r2,-48(fp)
   12f0c:	e13ff117 	ldw	r4,-60(fp)
   12f10:	100b883a 	mov	r5,r2
   12f14:	00133580 	call	13358 <OS_FlagTaskRdy>
   12f18:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12f1c:	e0bff483 	ldbu	r2,-46(fp)
   12f20:	10800058 	cmpnei	r2,r2,1
   12f24:	1000031e 	bne	r2,zero,12f34 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12f28:	00800044 	movi	r2,1
   12f2c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12f30:	00000a06 	br	12f5c <OSFlagPost+0x2f8>
   12f34:	00000906 	br	12f5c <OSFlagPost+0x2f8>
   12f38:	e0bff317 	ldw	r2,-52(fp)
   12f3c:	e0bff815 	stw	r2,-32(fp)
   12f40:	e0bff817 	ldw	r2,-32(fp)
   12f44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12f48:	e0bfff17 	ldw	r2,-4(fp)
   12f4c:	00c01bc4 	movi	r3,111
   12f50:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12f54:	0005883a 	mov	r2,zero
   12f58:	00001f06 	br	12fd8 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   12f5c:	e0bff117 	ldw	r2,-60(fp)
   12f60:	10800017 	ldw	r2,0(r2)
   12f64:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12f68:	e0bff117 	ldw	r2,-60(fp)
   12f6c:	103f8a1e 	bne	r2,zero,12d98 <__alt_mem_Flash_flash_data+0xf4012d98>
   12f70:	e0bff317 	ldw	r2,-52(fp)
   12f74:	e0bff915 	stw	r2,-28(fp)
   12f78:	e0bff917 	ldw	r2,-28(fp)
   12f7c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   12f80:	e0bff203 	ldbu	r2,-56(fp)
   12f84:	10800058 	cmpnei	r2,r2,1
   12f88:	1000011e 	bne	r2,zero,12f90 <OSFlagPost+0x32c>
        OS_Sched();
   12f8c:	00114880 	call	11488 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f90:	0005303a 	rdctl	r2,status
   12f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f98:	e0fffa17 	ldw	r3,-24(fp)
   12f9c:	00bfff84 	movi	r2,-2
   12fa0:	1884703a 	and	r2,r3,r2
   12fa4:	1001703a 	wrctl	status,r2
  
  return context;
   12fa8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12fac:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   12fb0:	e0bffc17 	ldw	r2,-16(fp)
   12fb4:	1080020b 	ldhu	r2,8(r2)
   12fb8:	e0bff50d 	sth	r2,-44(fp)
   12fbc:	e0bff317 	ldw	r2,-52(fp)
   12fc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fc4:	e0bffb17 	ldw	r2,-20(fp)
   12fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   12fcc:	e0bfff17 	ldw	r2,-4(fp)
   12fd0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   12fd4:	e0bff50b 	ldhu	r2,-44(fp)
}
   12fd8:	e037883a 	mov	sp,fp
   12fdc:	dfc00117 	ldw	ra,4(sp)
   12fe0:	df000017 	ldw	fp,0(sp)
   12fe4:	dec00204 	addi	sp,sp,8
   12fe8:	f800283a 	ret

00012fec <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   12fec:	defff904 	addi	sp,sp,-28
   12ff0:	df000615 	stw	fp,24(sp)
   12ff4:	df000604 	addi	fp,sp,24
   12ff8:	e13ffe15 	stw	r4,-8(fp)
   12ffc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13000:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	1000021e 	bne	r2,zero,13014 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1300c:	0005883a 	mov	r2,zero
   13010:	00002306 	br	130a0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13014:	e0bffe17 	ldw	r2,-8(fp)
   13018:	1000051e 	bne	r2,zero,13030 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1301c:	e0bfff17 	ldw	r2,-4(fp)
   13020:	00c01b84 	movi	r3,110
   13024:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13028:	0005883a 	mov	r2,zero
   1302c:	00001c06 	br	130a0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   13030:	e0bffe17 	ldw	r2,-8(fp)
   13034:	10800003 	ldbu	r2,0(r2)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	10800160 	cmpeqi	r2,r2,5
   13040:	1000051e 	bne	r2,zero,13058 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13044:	e0bfff17 	ldw	r2,-4(fp)
   13048:	00c00044 	movi	r3,1
   1304c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13050:	0005883a 	mov	r2,zero
   13054:	00001206 	br	130a0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13058:	0005303a 	rdctl	r2,status
   1305c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13060:	e0fffc17 	ldw	r3,-16(fp)
   13064:	00bfff84 	movi	r2,-2
   13068:	1884703a 	and	r2,r3,r2
   1306c:	1001703a 	wrctl	status,r2
  
  return context;
   13070:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13074:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   13078:	e0bffe17 	ldw	r2,-8(fp)
   1307c:	1080020b 	ldhu	r2,8(r2)
   13080:	e0bffb0d 	sth	r2,-20(fp)
   13084:	e0bffa17 	ldw	r2,-24(fp)
   13088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1308c:	e0bffd17 	ldw	r2,-12(fp)
   13090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13094:	e0bfff17 	ldw	r2,-4(fp)
   13098:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1309c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   130a0:	e037883a 	mov	sp,fp
   130a4:	df000017 	ldw	fp,0(sp)
   130a8:	dec00104 	addi	sp,sp,4
   130ac:	f800283a 	ret

000130b0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   130b0:	defff804 	addi	sp,sp,-32
   130b4:	df000715 	stw	fp,28(sp)
   130b8:	df000704 	addi	fp,sp,28
   130bc:	e13ffb15 	stw	r4,-20(fp)
   130c0:	e17ffc15 	stw	r5,-16(fp)
   130c4:	3009883a 	mov	r4,r6
   130c8:	3807883a 	mov	r3,r7
   130cc:	e0800117 	ldw	r2,4(fp)
   130d0:	e13ffd0d 	sth	r4,-12(fp)
   130d4:	e0fffe05 	stb	r3,-8(fp)
   130d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   130dc:	008000b4 	movhi	r2,2
   130e0:	10bfa804 	addi	r2,r2,-352
   130e4:	10c00017 	ldw	r3,0(r2)
   130e8:	008000b4 	movhi	r2,2
   130ec:	10bfa804 	addi	r2,r2,-352
   130f0:	10800017 	ldw	r2,0(r2)
   130f4:	10800c03 	ldbu	r2,48(r2)
   130f8:	10800814 	ori	r2,r2,32
   130fc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   13100:	008000b4 	movhi	r2,2
   13104:	10bfa804 	addi	r2,r2,-352
   13108:	10800017 	ldw	r2,0(r2)
   1310c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   13110:	008000b4 	movhi	r2,2
   13114:	10bfa804 	addi	r2,r2,-352
   13118:	10800017 	ldw	r2,0(r2)
   1311c:	e0ffff0b 	ldhu	r3,-4(fp)
   13120:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   13124:	008000b4 	movhi	r2,2
   13128:	10bfa804 	addi	r2,r2,-352
   1312c:	10800017 	ldw	r2,0(r2)
   13130:	e0fffc17 	ldw	r3,-16(fp)
   13134:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   13138:	e0bffc17 	ldw	r2,-16(fp)
   1313c:	e0fffd0b 	ldhu	r3,-12(fp)
   13140:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   13144:	e0bffc17 	ldw	r2,-16(fp)
   13148:	e0fffe03 	ldbu	r3,-8(fp)
   1314c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   13150:	008000b4 	movhi	r2,2
   13154:	10bfa804 	addi	r2,r2,-352
   13158:	10c00017 	ldw	r3,0(r2)
   1315c:	e0bffc17 	ldw	r2,-16(fp)
   13160:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   13164:	e0bffb17 	ldw	r2,-20(fp)
   13168:	10c00117 	ldw	r3,4(r2)
   1316c:	e0bffc17 	ldw	r2,-16(fp)
   13170:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   13174:	e0bffc17 	ldw	r2,-16(fp)
   13178:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1317c:	e0bffc17 	ldw	r2,-16(fp)
   13180:	e0fffb17 	ldw	r3,-20(fp)
   13184:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13188:	e0bffb17 	ldw	r2,-20(fp)
   1318c:	10800117 	ldw	r2,4(r2)
   13190:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   13194:	e0bff917 	ldw	r2,-28(fp)
   13198:	10000326 	beq	r2,zero,131a8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1319c:	e0bff917 	ldw	r2,-28(fp)
   131a0:	e0fffc17 	ldw	r3,-16(fp)
   131a4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   131a8:	e0bffb17 	ldw	r2,-20(fp)
   131ac:	e0fffc17 	ldw	r3,-16(fp)
   131b0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   131b4:	008000b4 	movhi	r2,2
   131b8:	10bfa804 	addi	r2,r2,-352
   131bc:	10800017 	ldw	r2,0(r2)
   131c0:	10800d03 	ldbu	r2,52(r2)
   131c4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   131c8:	e0fffa03 	ldbu	r3,-24(fp)
   131cc:	e13ffa03 	ldbu	r4,-24(fp)
   131d0:	008000b4 	movhi	r2,2
   131d4:	10bfa544 	addi	r2,r2,-363
   131d8:	1105883a 	add	r2,r2,r4
   131dc:	10800003 	ldbu	r2,0(r2)
   131e0:	1009883a 	mov	r4,r2
   131e4:	008000b4 	movhi	r2,2
   131e8:	10bfa804 	addi	r2,r2,-352
   131ec:	10800017 	ldw	r2,0(r2)
   131f0:	10800d43 	ldbu	r2,53(r2)
   131f4:	0084303a 	nor	r2,zero,r2
   131f8:	2084703a 	and	r2,r4,r2
   131fc:	1009883a 	mov	r4,r2
   13200:	008000b4 	movhi	r2,2
   13204:	10bfa544 	addi	r2,r2,-363
   13208:	10c5883a 	add	r2,r2,r3
   1320c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   13210:	e0fffa03 	ldbu	r3,-24(fp)
   13214:	008000b4 	movhi	r2,2
   13218:	10bfa544 	addi	r2,r2,-363
   1321c:	10c5883a 	add	r2,r2,r3
   13220:	10800003 	ldbu	r2,0(r2)
   13224:	10803fcc 	andi	r2,r2,255
   13228:	10000e1e 	bne	r2,zero,13264 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1322c:	008000b4 	movhi	r2,2
   13230:	10bfa804 	addi	r2,r2,-352
   13234:	10800017 	ldw	r2,0(r2)
   13238:	10800d83 	ldbu	r2,54(r2)
   1323c:	0084303a 	nor	r2,zero,r2
   13240:	1007883a 	mov	r3,r2
   13244:	008000b4 	movhi	r2,2
   13248:	10bfa504 	addi	r2,r2,-364
   1324c:	10800003 	ldbu	r2,0(r2)
   13250:	1884703a 	and	r2,r3,r2
   13254:	1007883a 	mov	r3,r2
   13258:	008000b4 	movhi	r2,2
   1325c:	10bfa504 	addi	r2,r2,-364
   13260:	10c00005 	stb	r3,0(r2)
    }
}
   13264:	e037883a 	mov	sp,fp
   13268:	df000017 	ldw	fp,0(sp)
   1326c:	dec00104 	addi	sp,sp,4
   13270:	f800283a 	ret

00013274 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   13274:	defffb04 	addi	sp,sp,-20
   13278:	dfc00415 	stw	ra,16(sp)
   1327c:	df000315 	stw	fp,12(sp)
   13280:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   13284:	010000b4 	movhi	r4,2
   13288:	213fbc04 	addi	r4,r4,-272
   1328c:	0140dc04 	movi	r5,880
   13290:	00113d40 	call	113d4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   13294:	008000b4 	movhi	r2,2
   13298:	10bfbc04 	addi	r2,r2,-272
   1329c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   132a0:	008000b4 	movhi	r2,2
   132a4:	10bfc704 	addi	r2,r2,-228
   132a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   132ac:	e03ffd0d 	sth	zero,-12(fp)
   132b0:	00001306 	br	13300 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   132b4:	e0bffe17 	ldw	r2,-8(fp)
   132b8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   132bc:	e0bffe17 	ldw	r2,-8(fp)
   132c0:	e0ffff17 	ldw	r3,-4(fp)
   132c4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   132c8:	e0bffe17 	ldw	r2,-8(fp)
   132cc:	00c00fc4 	movi	r3,63
   132d0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   132d4:	e0bffe17 	ldw	r2,-8(fp)
   132d8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   132dc:	e0bffe17 	ldw	r2,-8(fp)
   132e0:	10800b04 	addi	r2,r2,44
   132e4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   132e8:	e0bfff17 	ldw	r2,-4(fp)
   132ec:	10800b04 	addi	r2,r2,44
   132f0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   132f4:	e0bffd0b 	ldhu	r2,-12(fp)
   132f8:	10800044 	addi	r2,r2,1
   132fc:	e0bffd0d 	sth	r2,-12(fp)
   13300:	e0bffd0b 	ldhu	r2,-12(fp)
   13304:	108004f0 	cmpltui	r2,r2,19
   13308:	103fea1e 	bne	r2,zero,132b4 <__alt_mem_Flash_flash_data+0xf40132b4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1330c:	e0bffe17 	ldw	r2,-8(fp)
   13310:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   13314:	e0bffe17 	ldw	r2,-8(fp)
   13318:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1331c:	e0bffe17 	ldw	r2,-8(fp)
   13320:	00c00fc4 	movi	r3,63
   13324:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13328:	e0bffe17 	ldw	r2,-8(fp)
   1332c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   13330:	008000b4 	movhi	r2,2
   13334:	10bfaa04 	addi	r2,r2,-344
   13338:	00c000b4 	movhi	r3,2
   1333c:	18ffbc04 	addi	r3,r3,-272
   13340:	10c00015 	stw	r3,0(r2)
#endif
}
   13344:	e037883a 	mov	sp,fp
   13348:	dfc00117 	ldw	ra,4(sp)
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00204 	addi	sp,sp,8
   13354:	f800283a 	ret

00013358 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   13358:	defffa04 	addi	sp,sp,-24
   1335c:	dfc00515 	stw	ra,20(sp)
   13360:	df000415 	stw	fp,16(sp)
   13364:	df000404 	addi	fp,sp,16
   13368:	e13ffe15 	stw	r4,-8(fp)
   1336c:	2805883a 	mov	r2,r5
   13370:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   13374:	e0bffe17 	ldw	r2,-8(fp)
   13378:	10800217 	ldw	r2,8(r2)
   1337c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   13380:	e0bffd17 	ldw	r2,-12(fp)
   13384:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   13388:	e0bffd17 	ldw	r2,-12(fp)
   1338c:	e0ffff0b 	ldhu	r3,-4(fp)
   13390:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   13394:	e0bffd17 	ldw	r2,-12(fp)
   13398:	10c00c03 	ldbu	r3,48(r2)
   1339c:	00bff7c4 	movi	r2,-33
   133a0:	1884703a 	and	r2,r3,r2
   133a4:	1007883a 	mov	r3,r2
   133a8:	e0bffd17 	ldw	r2,-12(fp)
   133ac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   133b0:	e0bffd17 	ldw	r2,-12(fp)
   133b4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   133b8:	e0bffd17 	ldw	r2,-12(fp)
   133bc:	10800c03 	ldbu	r2,48(r2)
   133c0:	10803fcc 	andi	r2,r2,255
   133c4:	10001f1e 	bne	r2,zero,13444 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   133c8:	e0bffd17 	ldw	r2,-12(fp)
   133cc:	10c00d83 	ldbu	r3,54(r2)
   133d0:	008000b4 	movhi	r2,2
   133d4:	10bfa504 	addi	r2,r2,-364
   133d8:	10800003 	ldbu	r2,0(r2)
   133dc:	1884b03a 	or	r2,r3,r2
   133e0:	1007883a 	mov	r3,r2
   133e4:	008000b4 	movhi	r2,2
   133e8:	10bfa504 	addi	r2,r2,-364
   133ec:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   133f0:	e0bffd17 	ldw	r2,-12(fp)
   133f4:	10800d03 	ldbu	r2,52(r2)
   133f8:	10c03fcc 	andi	r3,r2,255
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	10800d03 	ldbu	r2,52(r2)
   13404:	11003fcc 	andi	r4,r2,255
   13408:	008000b4 	movhi	r2,2
   1340c:	10bfa544 	addi	r2,r2,-363
   13410:	1105883a 	add	r2,r2,r4
   13414:	11000003 	ldbu	r4,0(r2)
   13418:	e0bffd17 	ldw	r2,-12(fp)
   1341c:	10800d43 	ldbu	r2,53(r2)
   13420:	2084b03a 	or	r2,r4,r2
   13424:	1009883a 	mov	r4,r2
   13428:	008000b4 	movhi	r2,2
   1342c:	10bfa544 	addi	r2,r2,-363
   13430:	10c5883a 	add	r2,r2,r3
   13434:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   13438:	00800044 	movi	r2,1
   1343c:	e0bffc05 	stb	r2,-16(fp)
   13440:	00000106 	br	13448 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   13444:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   13448:	e13ffe17 	ldw	r4,-8(fp)
   1344c:	00134680 	call	13468 <OS_FlagUnlink>
    return (sched);
   13450:	e0bffc03 	ldbu	r2,-16(fp)
}
   13454:	e037883a 	mov	sp,fp
   13458:	dfc00117 	ldw	ra,4(sp)
   1345c:	df000017 	ldw	fp,0(sp)
   13460:	dec00204 	addi	sp,sp,8
   13464:	f800283a 	ret

00013468 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   13468:	defffa04 	addi	sp,sp,-24
   1346c:	df000515 	stw	fp,20(sp)
   13470:	df000504 	addi	fp,sp,20
   13474:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	10800117 	ldw	r2,4(r2)
   13480:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13484:	e0bfff17 	ldw	r2,-4(fp)
   13488:	10800017 	ldw	r2,0(r2)
   1348c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   13490:	e0bffb17 	ldw	r2,-20(fp)
   13494:	10000b1e 	bne	r2,zero,134c4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   13498:	e0bfff17 	ldw	r2,-4(fp)
   1349c:	10800317 	ldw	r2,12(r2)
   134a0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   134a4:	e0bffd17 	ldw	r2,-12(fp)
   134a8:	e0fffc17 	ldw	r3,-16(fp)
   134ac:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   134b0:	e0bffc17 	ldw	r2,-16(fp)
   134b4:	10000b26 	beq	r2,zero,134e4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   134b8:	e0bffc17 	ldw	r2,-16(fp)
   134bc:	10000115 	stw	zero,4(r2)
   134c0:	00000806 	br	134e4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   134c4:	e0bffb17 	ldw	r2,-20(fp)
   134c8:	e0fffc17 	ldw	r3,-16(fp)
   134cc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   134d0:	e0bffc17 	ldw	r2,-16(fp)
   134d4:	10000326 	beq	r2,zero,134e4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   134d8:	e0bffc17 	ldw	r2,-16(fp)
   134dc:	e0fffb17 	ldw	r3,-20(fp)
   134e0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   134e4:	e0bfff17 	ldw	r2,-4(fp)
   134e8:	10800217 	ldw	r2,8(r2)
   134ec:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   134f0:	e0bffe17 	ldw	r2,-8(fp)
   134f4:	10000a15 	stw	zero,40(r2)
#endif
}
   134f8:	e037883a 	mov	sp,fp
   134fc:	df000017 	ldw	fp,0(sp)
   13500:	dec00104 	addi	sp,sp,4
   13504:	f800283a 	ret

00013508 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   13508:	defff404 	addi	sp,sp,-48
   1350c:	df000b15 	stw	fp,44(sp)
   13510:	df000b04 	addi	fp,sp,44
   13514:	e13ffc15 	stw	r4,-16(fp)
   13518:	e17ffd15 	stw	r5,-12(fp)
   1351c:	e1bffe15 	stw	r6,-8(fp)
   13520:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13524:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	1000021e 	bne	r2,zero,13538 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   13530:	0005883a 	mov	r2,zero
   13534:	00006d06 	br	136ec <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   13538:	e0bffc17 	ldw	r2,-16(fp)
   1353c:	1000051e 	bne	r2,zero,13554 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   13540:	e0bfff17 	ldw	r2,-4(fp)
   13544:	00c01884 	movi	r3,98
   13548:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1354c:	0005883a 	mov	r2,zero
   13550:	00006606 	br	136ec <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   13554:	e0bffc17 	ldw	r2,-16(fp)
   13558:	108000cc 	andi	r2,r2,3
   1355c:	10000526 	beq	r2,zero,13574 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   13560:	e0bfff17 	ldw	r2,-4(fp)
   13564:	00c01884 	movi	r3,98
   13568:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1356c:	0005883a 	mov	r2,zero
   13570:	00005e06 	br	136ec <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   13574:	e0bffd17 	ldw	r2,-12(fp)
   13578:	108000a8 	cmpgeui	r2,r2,2
   1357c:	1000051e 	bne	r2,zero,13594 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   13580:	e0bfff17 	ldw	r2,-4(fp)
   13584:	00c016c4 	movi	r3,91
   13588:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1358c:	0005883a 	mov	r2,zero
   13590:	00005606 	br	136ec <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   13594:	e0bffe17 	ldw	r2,-8(fp)
   13598:	10800128 	cmpgeui	r2,r2,4
   1359c:	1000051e 	bne	r2,zero,135b4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   135a0:	e0bfff17 	ldw	r2,-4(fp)
   135a4:	00c01704 	movi	r3,92
   135a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   135ac:	0005883a 	mov	r2,zero
   135b0:	00004e06 	br	136ec <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135b4:	0005303a 	rdctl	r2,status
   135b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135bc:	e0fffa17 	ldw	r3,-24(fp)
   135c0:	00bfff84 	movi	r2,-2
   135c4:	1884703a 	and	r2,r3,r2
   135c8:	1001703a 	wrctl	status,r2
  
  return context;
   135cc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   135d0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   135d4:	008000b4 	movhi	r2,2
   135d8:	10bfa204 	addi	r2,r2,-376
   135dc:	10800017 	ldw	r2,0(r2)
   135e0:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   135e4:	008000b4 	movhi	r2,2
   135e8:	10bfa204 	addi	r2,r2,-376
   135ec:	10800017 	ldw	r2,0(r2)
   135f0:	10000726 	beq	r2,zero,13610 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   135f4:	008000b4 	movhi	r2,2
   135f8:	10bfa204 	addi	r2,r2,-376
   135fc:	10800017 	ldw	r2,0(r2)
   13600:	10c00117 	ldw	r3,4(r2)
   13604:	008000b4 	movhi	r2,2
   13608:	10bfa204 	addi	r2,r2,-376
   1360c:	10c00015 	stw	r3,0(r2)
   13610:	e0bff817 	ldw	r2,-32(fp)
   13614:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13618:	e0bffb17 	ldw	r2,-20(fp)
   1361c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   13620:	e0bff917 	ldw	r2,-28(fp)
   13624:	1000051e 	bne	r2,zero,1363c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   13628:	e0bfff17 	ldw	r2,-4(fp)
   1362c:	00c01684 	movi	r3,90
   13630:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13634:	0005883a 	mov	r2,zero
   13638:	00002c06 	br	136ec <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   13644:	e0fffc17 	ldw	r3,-16(fp)
   13648:	e0bffe17 	ldw	r2,-8(fp)
   1364c:	1885883a 	add	r2,r3,r2
   13650:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   13654:	e03ff715 	stw	zero,-36(fp)
   13658:	00000c06 	br	1368c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1365c:	e0bff617 	ldw	r2,-40(fp)
   13660:	e0fff517 	ldw	r3,-44(fp)
   13664:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   13668:	e0bff517 	ldw	r2,-44(fp)
   1366c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   13670:	e0fff517 	ldw	r3,-44(fp)
   13674:	e0bffe17 	ldw	r2,-8(fp)
   13678:	1885883a 	add	r2,r3,r2
   1367c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   13680:	e0bff717 	ldw	r2,-36(fp)
   13684:	10800044 	addi	r2,r2,1
   13688:	e0bff715 	stw	r2,-36(fp)
   1368c:	e0bffd17 	ldw	r2,-12(fp)
   13690:	10bfffc4 	addi	r2,r2,-1
   13694:	e0fff717 	ldw	r3,-36(fp)
   13698:	18bff036 	bltu	r3,r2,1365c <__alt_mem_Flash_flash_data+0xf401365c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1369c:	e0bff617 	ldw	r2,-40(fp)
   136a0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   136a4:	e0bff917 	ldw	r2,-28(fp)
   136a8:	e0fffc17 	ldw	r3,-16(fp)
   136ac:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   136b0:	e0bff917 	ldw	r2,-28(fp)
   136b4:	e0fffc17 	ldw	r3,-16(fp)
   136b8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   136bc:	e0bff917 	ldw	r2,-28(fp)
   136c0:	e0fffd17 	ldw	r3,-12(fp)
   136c4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   136c8:	e0bff917 	ldw	r2,-28(fp)
   136cc:	e0fffd17 	ldw	r3,-12(fp)
   136d0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   136d4:	e0bff917 	ldw	r2,-28(fp)
   136d8:	e0fffe17 	ldw	r3,-8(fp)
   136dc:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   136e0:	e0bfff17 	ldw	r2,-4(fp)
   136e4:	10000005 	stb	zero,0(r2)
    return (pmem);
   136e8:	e0bff917 	ldw	r2,-28(fp)
}
   136ec:	e037883a 	mov	sp,fp
   136f0:	df000017 	ldw	fp,0(sp)
   136f4:	dec00104 	addi	sp,sp,4
   136f8:	f800283a 	ret

000136fc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   136fc:	defff804 	addi	sp,sp,-32
   13700:	df000715 	stw	fp,28(sp)
   13704:	df000704 	addi	fp,sp,28
   13708:	e13ffe15 	stw	r4,-8(fp)
   1370c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13710:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	1000021e 	bne	r2,zero,13724 <OSMemGet+0x28>
        return ((void *)0);
   1371c:	0005883a 	mov	r2,zero
   13720:	00002e06 	br	137dc <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   13724:	e0bffe17 	ldw	r2,-8(fp)
   13728:	1000051e 	bne	r2,zero,13740 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	00c01804 	movi	r3,96
   13734:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13738:	0005883a 	mov	r2,zero
   1373c:	00002706 	br	137dc <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13740:	0005303a 	rdctl	r2,status
   13744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13748:	e0fffb17 	ldw	r3,-20(fp)
   1374c:	00bfff84 	movi	r2,-2
   13750:	1884703a 	and	r2,r3,r2
   13754:	1001703a 	wrctl	status,r2
  
  return context;
   13758:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1375c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   13760:	e0bffe17 	ldw	r2,-8(fp)
   13764:	10800417 	ldw	r2,16(r2)
   13768:	10001426 	beq	r2,zero,137bc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1376c:	e0bffe17 	ldw	r2,-8(fp)
   13770:	10800117 	ldw	r2,4(r2)
   13774:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   13778:	e0bffa17 	ldw	r2,-24(fp)
   1377c:	10c00017 	ldw	r3,0(r2)
   13780:	e0bffe17 	ldw	r2,-8(fp)
   13784:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   13788:	e0bffe17 	ldw	r2,-8(fp)
   1378c:	10800417 	ldw	r2,16(r2)
   13790:	10ffffc4 	addi	r3,r2,-1
   13794:	e0bffe17 	ldw	r2,-8(fp)
   13798:	10c00415 	stw	r3,16(r2)
   1379c:	e0bff917 	ldw	r2,-28(fp)
   137a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137a4:	e0bffc17 	ldw	r2,-16(fp)
   137a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   137b4:	e0bffa17 	ldw	r2,-24(fp)
   137b8:	00000806 	br	137dc <OSMemGet+0xe0>
   137bc:	e0bff917 	ldw	r2,-28(fp)
   137c0:	e0bffd15 	stw	r2,-12(fp)
   137c4:	e0bffd17 	ldw	r2,-12(fp)
   137c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   137cc:	e0bfff17 	ldw	r2,-4(fp)
   137d0:	00c01744 	movi	r3,93
   137d4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   137d8:	0005883a 	mov	r2,zero
}
   137dc:	e037883a 	mov	sp,fp
   137e0:	df000017 	ldw	fp,0(sp)
   137e4:	dec00104 	addi	sp,sp,4
   137e8:	f800283a 	ret

000137ec <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   137ec:	defff704 	addi	sp,sp,-36
   137f0:	dfc00815 	stw	ra,32(sp)
   137f4:	df000715 	stw	fp,28(sp)
   137f8:	df000704 	addi	fp,sp,28
   137fc:	e13ffd15 	stw	r4,-12(fp)
   13800:	e17ffe15 	stw	r5,-8(fp)
   13804:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13808:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1380c:	e0bfff17 	ldw	r2,-4(fp)
   13810:	1000021e 	bne	r2,zero,1381c <OSMemNameGet+0x30>
        return (0);
   13814:	0005883a 	mov	r2,zero
   13818:	00002d06 	br	138d0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1381c:	e0bffd17 	ldw	r2,-12(fp)
   13820:	1000051e 	bne	r2,zero,13838 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13824:	e0bfff17 	ldw	r2,-4(fp)
   13828:	00c01804 	movi	r3,96
   1382c:	10c00005 	stb	r3,0(r2)
        return (0);
   13830:	0005883a 	mov	r2,zero
   13834:	00002606 	br	138d0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13838:	e0bffe17 	ldw	r2,-8(fp)
   1383c:	1000051e 	bne	r2,zero,13854 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13840:	e0bfff17 	ldw	r2,-4(fp)
   13844:	00c00304 	movi	r3,12
   13848:	10c00005 	stb	r3,0(r2)
        return (0);
   1384c:	0005883a 	mov	r2,zero
   13850:	00001f06 	br	138d0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13854:	008000b4 	movhi	r2,2
   13858:	10bfa704 	addi	r2,r2,-356
   1385c:	10800003 	ldbu	r2,0(r2)
   13860:	10803fcc 	andi	r2,r2,255
   13864:	10000526 	beq	r2,zero,1387c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   13868:	e0bfff17 	ldw	r2,-4(fp)
   1386c:	00c00444 	movi	r3,17
   13870:	10c00005 	stb	r3,0(r2)
        return (0);
   13874:	0005883a 	mov	r2,zero
   13878:	00001506 	br	138d0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1387c:	0005303a 	rdctl	r2,status
   13880:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13884:	e0fffb17 	ldw	r3,-20(fp)
   13888:	00bfff84 	movi	r2,-2
   1388c:	1884703a 	and	r2,r3,r2
   13890:	1001703a 	wrctl	status,r2
  
  return context;
   13894:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13898:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1389c:	e0bffd17 	ldw	r2,-12(fp)
   138a0:	10800504 	addi	r2,r2,20
   138a4:	e13ffe17 	ldw	r4,-8(fp)
   138a8:	100b883a 	mov	r5,r2
   138ac:	00115c40 	call	115c4 <OS_StrCopy>
   138b0:	e0bffa05 	stb	r2,-24(fp)
   138b4:	e0bff917 	ldw	r2,-28(fp)
   138b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138bc:	e0bffc17 	ldw	r2,-16(fp)
   138c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   138c4:	e0bfff17 	ldw	r2,-4(fp)
   138c8:	10000005 	stb	zero,0(r2)
    return (len);
   138cc:	e0bffa03 	ldbu	r2,-24(fp)
}
   138d0:	e037883a 	mov	sp,fp
   138d4:	dfc00117 	ldw	ra,4(sp)
   138d8:	df000017 	ldw	fp,0(sp)
   138dc:	dec00204 	addi	sp,sp,8
   138e0:	f800283a 	ret

000138e4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   138e4:	defff604 	addi	sp,sp,-40
   138e8:	dfc00915 	stw	ra,36(sp)
   138ec:	df000815 	stw	fp,32(sp)
   138f0:	df000804 	addi	fp,sp,32
   138f4:	e13ffd15 	stw	r4,-12(fp)
   138f8:	e17ffe15 	stw	r5,-8(fp)
   138fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13900:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13904:	e0bfff17 	ldw	r2,-4(fp)
   13908:	1000011e 	bne	r2,zero,13910 <OSMemNameSet+0x2c>
        return;
   1390c:	00003606 	br	139e8 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13910:	e0bffd17 	ldw	r2,-12(fp)
   13914:	1000041e 	bne	r2,zero,13928 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13918:	e0bfff17 	ldw	r2,-4(fp)
   1391c:	00c01804 	movi	r3,96
   13920:	10c00005 	stb	r3,0(r2)
        return;
   13924:	00003006 	br	139e8 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13928:	e0bffe17 	ldw	r2,-8(fp)
   1392c:	1000041e 	bne	r2,zero,13940 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13930:	e0bfff17 	ldw	r2,-4(fp)
   13934:	00c00304 	movi	r3,12
   13938:	10c00005 	stb	r3,0(r2)
        return;
   1393c:	00002a06 	br	139e8 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13940:	008000b4 	movhi	r2,2
   13944:	10bfa704 	addi	r2,r2,-356
   13948:	10800003 	ldbu	r2,0(r2)
   1394c:	10803fcc 	andi	r2,r2,255
   13950:	10000426 	beq	r2,zero,13964 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   13954:	e0bfff17 	ldw	r2,-4(fp)
   13958:	00c00484 	movi	r3,18
   1395c:	10c00005 	stb	r3,0(r2)
        return;
   13960:	00002106 	br	139e8 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13964:	0005303a 	rdctl	r2,status
   13968:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1396c:	e0fffa17 	ldw	r3,-24(fp)
   13970:	00bfff84 	movi	r2,-2
   13974:	1884703a 	and	r2,r3,r2
   13978:	1001703a 	wrctl	status,r2
  
  return context;
   1397c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13980:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13984:	e13ffe17 	ldw	r4,-8(fp)
   13988:	00116380 	call	11638 <OS_StrLen>
   1398c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   13990:	e0bff903 	ldbu	r2,-28(fp)
   13994:	10800830 	cmpltui	r2,r2,32
   13998:	1000081e 	bne	r2,zero,139bc <OSMemNameSet+0xd8>
   1399c:	e0bff817 	ldw	r2,-32(fp)
   139a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139a4:	e0bffb17 	ldw	r2,-20(fp)
   139a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	00c018c4 	movi	r3,99
   139b4:	10c00005 	stb	r3,0(r2)
        return;
   139b8:	00000b06 	br	139e8 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	10800504 	addi	r2,r2,20
   139c4:	1009883a 	mov	r4,r2
   139c8:	e17ffe17 	ldw	r5,-8(fp)
   139cc:	00115c40 	call	115c4 <OS_StrCopy>
   139d0:	e0bff817 	ldw	r2,-32(fp)
   139d4:	e0bffc15 	stw	r2,-16(fp)
   139d8:	e0bffc17 	ldw	r2,-16(fp)
   139dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	10000005 	stb	zero,0(r2)
}
   139e8:	e037883a 	mov	sp,fp
   139ec:	dfc00117 	ldw	ra,4(sp)
   139f0:	df000017 	ldw	fp,0(sp)
   139f4:	dec00204 	addi	sp,sp,8
   139f8:	f800283a 	ret

000139fc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   139fc:	defff904 	addi	sp,sp,-28
   13a00:	df000615 	stw	fp,24(sp)
   13a04:	df000604 	addi	fp,sp,24
   13a08:	e13ffe15 	stw	r4,-8(fp)
   13a0c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13a14:	e0bffe17 	ldw	r2,-8(fp)
   13a18:	1000021e 	bne	r2,zero,13a24 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13a1c:	00801804 	movi	r2,96
   13a20:	00002806 	br	13ac4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   13a24:	e0bfff17 	ldw	r2,-4(fp)
   13a28:	1000021e 	bne	r2,zero,13a34 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   13a2c:	008017c4 	movi	r2,95
   13a30:	00002406 	br	13ac4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a34:	0005303a 	rdctl	r2,status
   13a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a3c:	e0fffb17 	ldw	r3,-20(fp)
   13a40:	00bfff84 	movi	r2,-2
   13a44:	1884703a 	and	r2,r3,r2
   13a48:	1001703a 	wrctl	status,r2
  
  return context;
   13a4c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13a50:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   13a54:	e0bffe17 	ldw	r2,-8(fp)
   13a58:	10c00417 	ldw	r3,16(r2)
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	10800317 	ldw	r2,12(r2)
   13a64:	18800636 	bltu	r3,r2,13a80 <OSMemPut+0x84>
   13a68:	e0bffa17 	ldw	r2,-24(fp)
   13a6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a70:	e0bffc17 	ldw	r2,-16(fp)
   13a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   13a78:	00801784 	movi	r2,94
   13a7c:	00001106 	br	13ac4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   13a80:	e0bffe17 	ldw	r2,-8(fp)
   13a84:	10c00117 	ldw	r3,4(r2)
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   13a90:	e0bffe17 	ldw	r2,-8(fp)
   13a94:	e0ffff17 	ldw	r3,-4(fp)
   13a98:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   13a9c:	e0bffe17 	ldw	r2,-8(fp)
   13aa0:	10800417 	ldw	r2,16(r2)
   13aa4:	10c00044 	addi	r3,r2,1
   13aa8:	e0bffe17 	ldw	r2,-8(fp)
   13aac:	10c00415 	stw	r3,16(r2)
   13ab0:	e0bffa17 	ldw	r2,-24(fp)
   13ab4:	e0bffd15 	stw	r2,-12(fp)
   13ab8:	e0bffd17 	ldw	r2,-12(fp)
   13abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13ac0:	0005883a 	mov	r2,zero
}
   13ac4:	e037883a 	mov	sp,fp
   13ac8:	df000017 	ldw	fp,0(sp)
   13acc:	dec00104 	addi	sp,sp,4
   13ad0:	f800283a 	ret

00013ad4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13ad4:	defffa04 	addi	sp,sp,-24
   13ad8:	df000515 	stw	fp,20(sp)
   13adc:	df000504 	addi	fp,sp,20
   13ae0:	e13ffe15 	stw	r4,-8(fp)
   13ae4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ae8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13aec:	e0bffe17 	ldw	r2,-8(fp)
   13af0:	1000021e 	bne	r2,zero,13afc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13af4:	00801804 	movi	r2,96
   13af8:	00002c06 	br	13bac <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   13afc:	e0bfff17 	ldw	r2,-4(fp)
   13b00:	1000021e 	bne	r2,zero,13b0c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   13b04:	00801844 	movi	r2,97
   13b08:	00002806 	br	13bac <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b0c:	0005303a 	rdctl	r2,status
   13b10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b14:	e0fffc17 	ldw	r3,-16(fp)
   13b18:	00bfff84 	movi	r2,-2
   13b1c:	1884703a 	and	r2,r3,r2
   13b20:	1001703a 	wrctl	status,r2
  
  return context;
   13b24:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13b28:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   13b2c:	e0bffe17 	ldw	r2,-8(fp)
   13b30:	10c00017 	ldw	r3,0(r2)
   13b34:	e0bfff17 	ldw	r2,-4(fp)
   13b38:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   13b3c:	e0bffe17 	ldw	r2,-8(fp)
   13b40:	10c00117 	ldw	r3,4(r2)
   13b44:	e0bfff17 	ldw	r2,-4(fp)
   13b48:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	10c00217 	ldw	r3,8(r2)
   13b54:	e0bfff17 	ldw	r2,-4(fp)
   13b58:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   13b5c:	e0bffe17 	ldw	r2,-8(fp)
   13b60:	10c00317 	ldw	r3,12(r2)
   13b64:	e0bfff17 	ldw	r2,-4(fp)
   13b68:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   13b6c:	e0bffe17 	ldw	r2,-8(fp)
   13b70:	10c00417 	ldw	r3,16(r2)
   13b74:	e0bfff17 	ldw	r2,-4(fp)
   13b78:	10c00415 	stw	r3,16(r2)
   13b7c:	e0bffb17 	ldw	r2,-20(fp)
   13b80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b84:	e0bffd17 	ldw	r2,-12(fp)
   13b88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   13b8c:	e0bfff17 	ldw	r2,-4(fp)
   13b90:	10c00317 	ldw	r3,12(r2)
   13b94:	e0bfff17 	ldw	r2,-4(fp)
   13b98:	10800417 	ldw	r2,16(r2)
   13b9c:	1887c83a 	sub	r3,r3,r2
   13ba0:	e0bfff17 	ldw	r2,-4(fp)
   13ba4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   13ba8:	0005883a 	mov	r2,zero
}
   13bac:	e037883a 	mov	sp,fp
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00104 	addi	sp,sp,4
   13bb8:	f800283a 	ret

00013bbc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   13bbc:	defffc04 	addi	sp,sp,-16
   13bc0:	dfc00315 	stw	ra,12(sp)
   13bc4:	df000215 	stw	fp,8(sp)
   13bc8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   13bcc:	010000b4 	movhi	r4,2
   13bd0:	21009804 	addi	r4,r4,608
   13bd4:	01430c04 	movi	r5,3120
   13bd8:	00113d40 	call	113d4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   13bdc:	008000b4 	movhi	r2,2
   13be0:	10809804 	addi	r2,r2,608
   13be4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13be8:	e03fff0d 	sth	zero,-4(fp)
   13bec:	00001306 	br	13c3c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   13bf0:	e0bfff0b 	ldhu	r2,-4(fp)
   13bf4:	10800044 	addi	r2,r2,1
   13bf8:	10c00d24 	muli	r3,r2,52
   13bfc:	008000b4 	movhi	r2,2
   13c00:	10809804 	addi	r2,r2,608
   13c04:	1887883a 	add	r3,r3,r2
   13c08:	e0bffe17 	ldw	r2,-8(fp)
   13c0c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   13c10:	e0bffe17 	ldw	r2,-8(fp)
   13c14:	00c00fc4 	movi	r3,63
   13c18:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   13c1c:	e0bffe17 	ldw	r2,-8(fp)
   13c20:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   13c24:	e0bffe17 	ldw	r2,-8(fp)
   13c28:	10800d04 	addi	r2,r2,52
   13c2c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13c30:	e0bfff0b 	ldhu	r2,-4(fp)
   13c34:	10800044 	addi	r2,r2,1
   13c38:	e0bfff0d 	sth	r2,-4(fp)
   13c3c:	e0bfff0b 	ldhu	r2,-4(fp)
   13c40:	10800ef0 	cmpltui	r2,r2,59
   13c44:	103fea1e 	bne	r2,zero,13bf0 <__alt_mem_Flash_flash_data+0xf4013bf0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   13c48:	e0bffe17 	ldw	r2,-8(fp)
   13c4c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   13c50:	e0bffe17 	ldw	r2,-8(fp)
   13c54:	00c00fc4 	movi	r3,63
   13c58:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   13c5c:	e0bffe17 	ldw	r2,-8(fp)
   13c60:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   13c64:	008000b4 	movhi	r2,2
   13c68:	10bfa204 	addi	r2,r2,-376
   13c6c:	00c000b4 	movhi	r3,2
   13c70:	18c09804 	addi	r3,r3,608
   13c74:	10c00015 	stw	r3,0(r2)
#endif
}
   13c78:	e037883a 	mov	sp,fp
   13c7c:	dfc00117 	ldw	ra,4(sp)
   13c80:	df000017 	ldw	fp,0(sp)
   13c84:	dec00204 	addi	sp,sp,8
   13c88:	f800283a 	ret

00013c8c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   13c8c:	defff804 	addi	sp,sp,-32
   13c90:	df000715 	stw	fp,28(sp)
   13c94:	df000704 	addi	fp,sp,28
   13c98:	e13ffe15 	stw	r4,-8(fp)
   13c9c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ca0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13ca4:	e0bfff17 	ldw	r2,-4(fp)
   13ca8:	1000021e 	bne	r2,zero,13cb4 <OSQAccept+0x28>
        return ((void *)0);
   13cac:	0005883a 	mov	r2,zero
   13cb0:	00004206 	br	13dbc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   13cb4:	e0bffe17 	ldw	r2,-8(fp)
   13cb8:	1000051e 	bne	r2,zero,13cd0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13cbc:	e0bfff17 	ldw	r2,-4(fp)
   13cc0:	00c00104 	movi	r3,4
   13cc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13cc8:	0005883a 	mov	r2,zero
   13ccc:	00003b06 	br	13dbc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   13cd0:	e0bffe17 	ldw	r2,-8(fp)
   13cd4:	10800003 	ldbu	r2,0(r2)
   13cd8:	10803fcc 	andi	r2,r2,255
   13cdc:	108000a0 	cmpeqi	r2,r2,2
   13ce0:	1000051e 	bne	r2,zero,13cf8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13ce4:	e0bfff17 	ldw	r2,-4(fp)
   13ce8:	00c00044 	movi	r3,1
   13cec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13cf0:	0005883a 	mov	r2,zero
   13cf4:	00003106 	br	13dbc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cf8:	0005303a 	rdctl	r2,status
   13cfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d00:	e0fffc17 	ldw	r3,-16(fp)
   13d04:	00bfff84 	movi	r2,-2
   13d08:	1884703a 	and	r2,r3,r2
   13d0c:	1001703a 	wrctl	status,r2
  
  return context;
   13d10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d14:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   13d18:	e0bffe17 	ldw	r2,-8(fp)
   13d1c:	10800117 	ldw	r2,4(r2)
   13d20:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   13d24:	e0bffb17 	ldw	r2,-20(fp)
   13d28:	1080058b 	ldhu	r2,22(r2)
   13d2c:	10bfffcc 	andi	r2,r2,65535
   13d30:	10001926 	beq	r2,zero,13d98 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   13d34:	e0bffb17 	ldw	r2,-20(fp)
   13d38:	10800417 	ldw	r2,16(r2)
   13d3c:	11000104 	addi	r4,r2,4
   13d40:	e0fffb17 	ldw	r3,-20(fp)
   13d44:	19000415 	stw	r4,16(r3)
   13d48:	10800017 	ldw	r2,0(r2)
   13d4c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   13d50:	e0bffb17 	ldw	r2,-20(fp)
   13d54:	1080058b 	ldhu	r2,22(r2)
   13d58:	10bfffc4 	addi	r2,r2,-1
   13d5c:	1007883a 	mov	r3,r2
   13d60:	e0bffb17 	ldw	r2,-20(fp)
   13d64:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   13d68:	e0bffb17 	ldw	r2,-20(fp)
   13d6c:	10c00417 	ldw	r3,16(r2)
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	10800217 	ldw	r2,8(r2)
   13d78:	1880041e 	bne	r3,r2,13d8c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   13d7c:	e0bffb17 	ldw	r2,-20(fp)
   13d80:	10c00117 	ldw	r3,4(r2)
   13d84:	e0bffb17 	ldw	r2,-20(fp)
   13d88:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	10000005 	stb	zero,0(r2)
   13d94:	00000406 	br	13da8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   13d98:	e0bfff17 	ldw	r2,-4(fp)
   13d9c:	00c007c4 	movi	r3,31
   13da0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   13da4:	e03ff915 	stw	zero,-28(fp)
   13da8:	e0bffa17 	ldw	r2,-24(fp)
   13dac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13db0:	e0bffd17 	ldw	r2,-12(fp)
   13db4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   13db8:	e0bff917 	ldw	r2,-28(fp)
}
   13dbc:	e037883a 	mov	sp,fp
   13dc0:	df000017 	ldw	fp,0(sp)
   13dc4:	dec00104 	addi	sp,sp,4
   13dc8:	f800283a 	ret

00013dcc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   13dcc:	defff404 	addi	sp,sp,-48
   13dd0:	dfc00b15 	stw	ra,44(sp)
   13dd4:	df000a15 	stw	fp,40(sp)
   13dd8:	df000a04 	addi	fp,sp,40
   13ddc:	e13ffe15 	stw	r4,-8(fp)
   13de0:	2805883a 	mov	r2,r5
   13de4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13de8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   13dec:	008000b4 	movhi	r2,2
   13df0:	10bfa704 	addi	r2,r2,-356
   13df4:	10800003 	ldbu	r2,0(r2)
   13df8:	10803fcc 	andi	r2,r2,255
   13dfc:	10000226 	beq	r2,zero,13e08 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   13e00:	0005883a 	mov	r2,zero
   13e04:	00006b06 	br	13fb4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e08:	0005303a 	rdctl	r2,status
   13e0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e10:	e0fff917 	ldw	r3,-28(fp)
   13e14:	00bfff84 	movi	r2,-2
   13e18:	1884703a 	and	r2,r3,r2
   13e1c:	1001703a 	wrctl	status,r2
  
  return context;
   13e20:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13e24:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   13e28:	008000b4 	movhi	r2,2
   13e2c:	10bfa604 	addi	r2,r2,-360
   13e30:	10800017 	ldw	r2,0(r2)
   13e34:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   13e38:	008000b4 	movhi	r2,2
   13e3c:	10bfa604 	addi	r2,r2,-360
   13e40:	10800017 	ldw	r2,0(r2)
   13e44:	10000726 	beq	r2,zero,13e64 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13e48:	008000b4 	movhi	r2,2
   13e4c:	10bfa604 	addi	r2,r2,-360
   13e50:	10800017 	ldw	r2,0(r2)
   13e54:	10c00117 	ldw	r3,4(r2)
   13e58:	008000b4 	movhi	r2,2
   13e5c:	10bfa604 	addi	r2,r2,-360
   13e60:	10c00015 	stw	r3,0(r2)
   13e64:	e0bff717 	ldw	r2,-36(fp)
   13e68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e6c:	e0bffa17 	ldw	r2,-24(fp)
   13e70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   13e74:	e0bff617 	ldw	r2,-40(fp)
   13e78:	10004d26 	beq	r2,zero,13fb0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e7c:	0005303a 	rdctl	r2,status
   13e80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e84:	e0fffb17 	ldw	r3,-20(fp)
   13e88:	00bfff84 	movi	r2,-2
   13e8c:	1884703a 	and	r2,r3,r2
   13e90:	1001703a 	wrctl	status,r2
  
  return context;
   13e94:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   13e98:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   13e9c:	008000b4 	movhi	r2,2
   13ea0:	10bfa404 	addi	r2,r2,-368
   13ea4:	10800017 	ldw	r2,0(r2)
   13ea8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   13eac:	e0bff817 	ldw	r2,-32(fp)
   13eb0:	10003126 	beq	r2,zero,13f78 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   13eb4:	008000b4 	movhi	r2,2
   13eb8:	10bfa404 	addi	r2,r2,-368
   13ebc:	10800017 	ldw	r2,0(r2)
   13ec0:	10c00017 	ldw	r3,0(r2)
   13ec4:	008000b4 	movhi	r2,2
   13ec8:	10bfa404 	addi	r2,r2,-368
   13ecc:	10c00015 	stw	r3,0(r2)
   13ed0:	e0bff717 	ldw	r2,-36(fp)
   13ed4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ed8:	e0bffc17 	ldw	r2,-16(fp)
   13edc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   13ee0:	e0bff817 	ldw	r2,-32(fp)
   13ee4:	e0fffe17 	ldw	r3,-8(fp)
   13ee8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   13eec:	e0bfff0b 	ldhu	r2,-4(fp)
   13ef0:	1085883a 	add	r2,r2,r2
   13ef4:	1085883a 	add	r2,r2,r2
   13ef8:	1007883a 	mov	r3,r2
   13efc:	e0bffe17 	ldw	r2,-8(fp)
   13f00:	10c7883a 	add	r3,r2,r3
   13f04:	e0bff817 	ldw	r2,-32(fp)
   13f08:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   13f0c:	e0bff817 	ldw	r2,-32(fp)
   13f10:	e0fffe17 	ldw	r3,-8(fp)
   13f14:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   13f18:	e0bff817 	ldw	r2,-32(fp)
   13f1c:	e0fffe17 	ldw	r3,-8(fp)
   13f20:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   13f24:	e0bff817 	ldw	r2,-32(fp)
   13f28:	e0ffff0b 	ldhu	r3,-4(fp)
   13f2c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   13f30:	e0bff817 	ldw	r2,-32(fp)
   13f34:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   13f38:	e0bff617 	ldw	r2,-40(fp)
   13f3c:	00c00084 	movi	r3,2
   13f40:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   13f44:	e0bff617 	ldw	r2,-40(fp)
   13f48:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   13f4c:	e0bff617 	ldw	r2,-40(fp)
   13f50:	e0fff817 	ldw	r3,-32(fp)
   13f54:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   13f58:	e0bff617 	ldw	r2,-40(fp)
   13f5c:	00c00fc4 	movi	r3,63
   13f60:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   13f64:	e0bff617 	ldw	r2,-40(fp)
   13f68:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   13f6c:	e13ff617 	ldw	r4,-40(fp)
   13f70:	00110100 	call	11010 <OS_EventWaitListInit>
   13f74:	00000e06 	br	13fb0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   13f78:	008000b4 	movhi	r2,2
   13f7c:	10bfa604 	addi	r2,r2,-360
   13f80:	10c00017 	ldw	r3,0(r2)
   13f84:	e0bff617 	ldw	r2,-40(fp)
   13f88:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   13f8c:	008000b4 	movhi	r2,2
   13f90:	10bfa604 	addi	r2,r2,-360
   13f94:	e0fff617 	ldw	r3,-40(fp)
   13f98:	10c00015 	stw	r3,0(r2)
   13f9c:	e0bff717 	ldw	r2,-36(fp)
   13fa0:	e0bffd15 	stw	r2,-12(fp)
   13fa4:	e0bffd17 	ldw	r2,-12(fp)
   13fa8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   13fac:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   13fb0:	e0bff617 	ldw	r2,-40(fp)
}
   13fb4:	e037883a 	mov	sp,fp
   13fb8:	dfc00117 	ldw	ra,4(sp)
   13fbc:	df000017 	ldw	fp,0(sp)
   13fc0:	dec00204 	addi	sp,sp,8
   13fc4:	f800283a 	ret

00013fc8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13fc8:	defff204 	addi	sp,sp,-56
   13fcc:	dfc00d15 	stw	ra,52(sp)
   13fd0:	df000c15 	stw	fp,48(sp)
   13fd4:	df000c04 	addi	fp,sp,48
   13fd8:	e13ffd15 	stw	r4,-12(fp)
   13fdc:	2805883a 	mov	r2,r5
   13fe0:	e1bfff15 	stw	r6,-4(fp)
   13fe4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13fe8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13fec:	e0bfff17 	ldw	r2,-4(fp)
   13ff0:	1000021e 	bne	r2,zero,13ffc <OSQDel+0x34>
        return (pevent);
   13ff4:	e0bffd17 	ldw	r2,-12(fp)
   13ff8:	0000a006 	br	1427c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13ffc:	e0bffd17 	ldw	r2,-12(fp)
   14000:	1000051e 	bne	r2,zero,14018 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14004:	e0bfff17 	ldw	r2,-4(fp)
   14008:	00c00104 	movi	r3,4
   1400c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14010:	e0bffd17 	ldw	r2,-12(fp)
   14014:	00009906 	br	1427c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14018:	e0bffd17 	ldw	r2,-12(fp)
   1401c:	10800003 	ldbu	r2,0(r2)
   14020:	10803fcc 	andi	r2,r2,255
   14024:	108000a0 	cmpeqi	r2,r2,2
   14028:	1000051e 	bne	r2,zero,14040 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1402c:	e0bfff17 	ldw	r2,-4(fp)
   14030:	00c00044 	movi	r3,1
   14034:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14038:	e0bffd17 	ldw	r2,-12(fp)
   1403c:	00008f06 	br	1427c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14040:	008000b4 	movhi	r2,2
   14044:	10bfa704 	addi	r2,r2,-356
   14048:	10800003 	ldbu	r2,0(r2)
   1404c:	10803fcc 	andi	r2,r2,255
   14050:	10000526 	beq	r2,zero,14068 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   14054:	e0bfff17 	ldw	r2,-4(fp)
   14058:	00c003c4 	movi	r3,15
   1405c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14060:	e0bffd17 	ldw	r2,-12(fp)
   14064:	00008506 	br	1427c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14068:	0005303a 	rdctl	r2,status
   1406c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14070:	e0fff817 	ldw	r3,-32(fp)
   14074:	00bfff84 	movi	r2,-2
   14078:	1884703a 	and	r2,r3,r2
   1407c:	1001703a 	wrctl	status,r2
  
  return context;
   14080:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14084:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   14088:	e0bffd17 	ldw	r2,-12(fp)
   1408c:	10800283 	ldbu	r2,10(r2)
   14090:	10803fcc 	andi	r2,r2,255
   14094:	10000326 	beq	r2,zero,140a4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14098:	00800044 	movi	r2,1
   1409c:	e0bff405 	stb	r2,-48(fp)
   140a0:	00000106 	br	140a8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   140a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   140a8:	e0bffe03 	ldbu	r2,-8(fp)
   140ac:	10000326 	beq	r2,zero,140bc <OSQDel+0xf4>
   140b0:	10800060 	cmpeqi	r2,r2,1
   140b4:	1000381e 	bne	r2,zero,14198 <OSQDel+0x1d0>
   140b8:	00006506 	br	14250 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   140bc:	e0bff403 	ldbu	r2,-48(fp)
   140c0:	1000261e 	bne	r2,zero,1415c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   140c4:	e0bffd17 	ldw	r2,-12(fp)
   140c8:	00c00fc4 	movi	r3,63
   140cc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   140d0:	e0bffd17 	ldw	r2,-12(fp)
   140d4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   140d8:	e0bffd17 	ldw	r2,-12(fp)
   140dc:	10800117 	ldw	r2,4(r2)
   140e0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   140e4:	008000b4 	movhi	r2,2
   140e8:	10bfa404 	addi	r2,r2,-368
   140ec:	10c00017 	ldw	r3,0(r2)
   140f0:	e0bff717 	ldw	r2,-36(fp)
   140f4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   140f8:	008000b4 	movhi	r2,2
   140fc:	10bfa404 	addi	r2,r2,-368
   14100:	e0fff717 	ldw	r3,-36(fp)
   14104:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14108:	e0bffd17 	ldw	r2,-12(fp)
   1410c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14110:	008000b4 	movhi	r2,2
   14114:	10bfa604 	addi	r2,r2,-360
   14118:	10c00017 	ldw	r3,0(r2)
   1411c:	e0bffd17 	ldw	r2,-12(fp)
   14120:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14124:	e0bffd17 	ldw	r2,-12(fp)
   14128:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1412c:	008000b4 	movhi	r2,2
   14130:	10bfa604 	addi	r2,r2,-360
   14134:	e0fffd17 	ldw	r3,-12(fp)
   14138:	10c00015 	stw	r3,0(r2)
   1413c:	e0bff617 	ldw	r2,-40(fp)
   14140:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14144:	e0bff917 	ldw	r2,-28(fp)
   14148:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1414c:	e0bfff17 	ldw	r2,-4(fp)
   14150:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   14154:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   14158:	00004706 	br	14278 <OSQDel+0x2b0>
   1415c:	e0bff617 	ldw	r2,-40(fp)
   14160:	e0bffa15 	stw	r2,-24(fp)
   14164:	e0bffa17 	ldw	r2,-24(fp)
   14168:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1416c:	e0bfff17 	ldw	r2,-4(fp)
   14170:	00c01244 	movi	r3,73
   14174:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   14178:	e0bffd17 	ldw	r2,-12(fp)
   1417c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   14180:	00003d06 	br	14278 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   14184:	e13ffd17 	ldw	r4,-12(fp)
   14188:	000b883a 	mov	r5,zero
   1418c:	01800104 	movi	r6,4
   14190:	000f883a 	mov	r7,zero
   14194:	0010a700 	call	10a70 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   14198:	e0bffd17 	ldw	r2,-12(fp)
   1419c:	10800283 	ldbu	r2,10(r2)
   141a0:	10803fcc 	andi	r2,r2,255
   141a4:	103ff71e 	bne	r2,zero,14184 <__alt_mem_Flash_flash_data+0xf4014184>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   141a8:	e0bffd17 	ldw	r2,-12(fp)
   141ac:	00c00fc4 	movi	r3,63
   141b0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   141b4:	e0bffd17 	ldw	r2,-12(fp)
   141b8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   141bc:	e0bffd17 	ldw	r2,-12(fp)
   141c0:	10800117 	ldw	r2,4(r2)
   141c4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   141c8:	008000b4 	movhi	r2,2
   141cc:	10bfa404 	addi	r2,r2,-368
   141d0:	10c00017 	ldw	r3,0(r2)
   141d4:	e0bff717 	ldw	r2,-36(fp)
   141d8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   141dc:	008000b4 	movhi	r2,2
   141e0:	10bfa404 	addi	r2,r2,-368
   141e4:	e0fff717 	ldw	r3,-36(fp)
   141e8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   141ec:	e0bffd17 	ldw	r2,-12(fp)
   141f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   141f4:	008000b4 	movhi	r2,2
   141f8:	10bfa604 	addi	r2,r2,-360
   141fc:	10c00017 	ldw	r3,0(r2)
   14200:	e0bffd17 	ldw	r2,-12(fp)
   14204:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   14208:	e0bffd17 	ldw	r2,-12(fp)
   1420c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   14210:	008000b4 	movhi	r2,2
   14214:	10bfa604 	addi	r2,r2,-360
   14218:	e0fffd17 	ldw	r3,-12(fp)
   1421c:	10c00015 	stw	r3,0(r2)
   14220:	e0bff617 	ldw	r2,-40(fp)
   14224:	e0bffb15 	stw	r2,-20(fp)
   14228:	e0bffb17 	ldw	r2,-20(fp)
   1422c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14230:	e0bff403 	ldbu	r2,-48(fp)
   14234:	10800058 	cmpnei	r2,r2,1
   14238:	1000011e 	bne	r2,zero,14240 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1423c:	00114880 	call	11488 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14240:	e0bfff17 	ldw	r2,-4(fp)
   14244:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   14248:	e03ff515 	stw	zero,-44(fp)
             break;
   1424c:	00000a06 	br	14278 <OSQDel+0x2b0>
   14250:	e0bff617 	ldw	r2,-40(fp)
   14254:	e0bffc15 	stw	r2,-16(fp)
   14258:	e0bffc17 	ldw	r2,-16(fp)
   1425c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14260:	e0bfff17 	ldw	r2,-4(fp)
   14264:	00c001c4 	movi	r3,7
   14268:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1426c:	e0bffd17 	ldw	r2,-12(fp)
   14270:	e0bff515 	stw	r2,-44(fp)
             break;
   14274:	0001883a 	nop
    }
    return (pevent_return);
   14278:	e0bff517 	ldw	r2,-44(fp)
}
   1427c:	e037883a 	mov	sp,fp
   14280:	dfc00117 	ldw	ra,4(sp)
   14284:	df000017 	ldw	fp,0(sp)
   14288:	dec00204 	addi	sp,sp,8
   1428c:	f800283a 	ret

00014290 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   14290:	defffa04 	addi	sp,sp,-24
   14294:	df000515 	stw	fp,20(sp)
   14298:	df000504 	addi	fp,sp,20
   1429c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   142a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   142a4:	e0bfff17 	ldw	r2,-4(fp)
   142a8:	1000021e 	bne	r2,zero,142b4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   142ac:	00800104 	movi	r2,4
   142b0:	00002106 	br	14338 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   142b4:	e0bfff17 	ldw	r2,-4(fp)
   142b8:	10800003 	ldbu	r2,0(r2)
   142bc:	10803fcc 	andi	r2,r2,255
   142c0:	108000a0 	cmpeqi	r2,r2,2
   142c4:	1000021e 	bne	r2,zero,142d0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   142c8:	00800044 	movi	r2,1
   142cc:	00001a06 	br	14338 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142d0:	0005303a 	rdctl	r2,status
   142d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142d8:	e0fffd17 	ldw	r3,-12(fp)
   142dc:	00bfff84 	movi	r2,-2
   142e0:	1884703a 	and	r2,r3,r2
   142e4:	1001703a 	wrctl	status,r2
  
  return context;
   142e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   142ec:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	10800117 	ldw	r2,4(r2)
   142f8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   142fc:	e0bffc17 	ldw	r2,-16(fp)
   14300:	10c00117 	ldw	r3,4(r2)
   14304:	e0bffc17 	ldw	r2,-16(fp)
   14308:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1430c:	e0bffc17 	ldw	r2,-16(fp)
   14310:	10c00117 	ldw	r3,4(r2)
   14314:	e0bffc17 	ldw	r2,-16(fp)
   14318:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1431c:	e0bffc17 	ldw	r2,-16(fp)
   14320:	1000058d 	sth	zero,22(r2)
   14324:	e0bffb17 	ldw	r2,-20(fp)
   14328:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1432c:	e0bffe17 	ldw	r2,-8(fp)
   14330:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14334:	0005883a 	mov	r2,zero
}
   14338:	e037883a 	mov	sp,fp
   1433c:	df000017 	ldw	fp,0(sp)
   14340:	dec00104 	addi	sp,sp,4
   14344:	f800283a 	ret

00014348 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   14348:	defff304 	addi	sp,sp,-52
   1434c:	dfc00c15 	stw	ra,48(sp)
   14350:	df000b15 	stw	fp,44(sp)
   14354:	df000b04 	addi	fp,sp,44
   14358:	e13ffd15 	stw	r4,-12(fp)
   1435c:	2805883a 	mov	r2,r5
   14360:	e1bfff15 	stw	r6,-4(fp)
   14364:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14368:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1436c:	e0bfff17 	ldw	r2,-4(fp)
   14370:	1000021e 	bne	r2,zero,1437c <OSQPend+0x34>
        return ((void *)0);
   14374:	0005883a 	mov	r2,zero
   14378:	0000ad06 	br	14630 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1437c:	e0bffd17 	ldw	r2,-12(fp)
   14380:	1000051e 	bne	r2,zero,14398 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14384:	e0bfff17 	ldw	r2,-4(fp)
   14388:	00c00104 	movi	r3,4
   1438c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14390:	0005883a 	mov	r2,zero
   14394:	0000a606 	br	14630 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14398:	e0bffd17 	ldw	r2,-12(fp)
   1439c:	10800003 	ldbu	r2,0(r2)
   143a0:	10803fcc 	andi	r2,r2,255
   143a4:	108000a0 	cmpeqi	r2,r2,2
   143a8:	1000051e 	bne	r2,zero,143c0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   143ac:	e0bfff17 	ldw	r2,-4(fp)
   143b0:	00c00044 	movi	r3,1
   143b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   143b8:	0005883a 	mov	r2,zero
   143bc:	00009c06 	br	14630 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   143c0:	008000b4 	movhi	r2,2
   143c4:	10bfa704 	addi	r2,r2,-356
   143c8:	10800003 	ldbu	r2,0(r2)
   143cc:	10803fcc 	andi	r2,r2,255
   143d0:	10000526 	beq	r2,zero,143e8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   143d4:	e0bfff17 	ldw	r2,-4(fp)
   143d8:	00c00084 	movi	r3,2
   143dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   143e0:	0005883a 	mov	r2,zero
   143e4:	00009206 	br	14630 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   143e8:	008000b4 	movhi	r2,2
   143ec:	10bf9904 	addi	r2,r2,-412
   143f0:	10800003 	ldbu	r2,0(r2)
   143f4:	10803fcc 	andi	r2,r2,255
   143f8:	10000526 	beq	r2,zero,14410 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   143fc:	e0bfff17 	ldw	r2,-4(fp)
   14400:	00c00344 	movi	r3,13
   14404:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14408:	0005883a 	mov	r2,zero
   1440c:	00008806 	br	14630 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14410:	0005303a 	rdctl	r2,status
   14414:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14418:	e0fff817 	ldw	r3,-32(fp)
   1441c:	00bfff84 	movi	r2,-2
   14420:	1884703a 	and	r2,r3,r2
   14424:	1001703a 	wrctl	status,r2
  
  return context;
   14428:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1442c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14430:	e0bffd17 	ldw	r2,-12(fp)
   14434:	10800117 	ldw	r2,4(r2)
   14438:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1443c:	e0bff717 	ldw	r2,-36(fp)
   14440:	1080058b 	ldhu	r2,22(r2)
   14444:	10bfffcc 	andi	r2,r2,65535
   14448:	10001e26 	beq	r2,zero,144c4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1444c:	e0bff717 	ldw	r2,-36(fp)
   14450:	10800417 	ldw	r2,16(r2)
   14454:	11000104 	addi	r4,r2,4
   14458:	e0fff717 	ldw	r3,-36(fp)
   1445c:	19000415 	stw	r4,16(r3)
   14460:	10800017 	ldw	r2,0(r2)
   14464:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14468:	e0bff717 	ldw	r2,-36(fp)
   1446c:	1080058b 	ldhu	r2,22(r2)
   14470:	10bfffc4 	addi	r2,r2,-1
   14474:	1007883a 	mov	r3,r2
   14478:	e0bff717 	ldw	r2,-36(fp)
   1447c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14480:	e0bff717 	ldw	r2,-36(fp)
   14484:	10c00417 	ldw	r3,16(r2)
   14488:	e0bff717 	ldw	r2,-36(fp)
   1448c:	10800217 	ldw	r2,8(r2)
   14490:	1880041e 	bne	r3,r2,144a4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   14494:	e0bff717 	ldw	r2,-36(fp)
   14498:	10c00117 	ldw	r3,4(r2)
   1449c:	e0bff717 	ldw	r2,-36(fp)
   144a0:	10c00415 	stw	r3,16(r2)
   144a4:	e0bff617 	ldw	r2,-40(fp)
   144a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144ac:	e0bff917 	ldw	r2,-28(fp)
   144b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   144b4:	e0bfff17 	ldw	r2,-4(fp)
   144b8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   144bc:	e0bff517 	ldw	r2,-44(fp)
   144c0:	00005b06 	br	14630 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   144c4:	008000b4 	movhi	r2,2
   144c8:	10bfa804 	addi	r2,r2,-352
   144cc:	10c00017 	ldw	r3,0(r2)
   144d0:	008000b4 	movhi	r2,2
   144d4:	10bfa804 	addi	r2,r2,-352
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	10800c03 	ldbu	r2,48(r2)
   144e0:	10800114 	ori	r2,r2,4
   144e4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   144e8:	008000b4 	movhi	r2,2
   144ec:	10bfa804 	addi	r2,r2,-352
   144f0:	10800017 	ldw	r2,0(r2)
   144f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   144f8:	008000b4 	movhi	r2,2
   144fc:	10bfa804 	addi	r2,r2,-352
   14500:	10800017 	ldw	r2,0(r2)
   14504:	e0fffe0b 	ldhu	r3,-8(fp)
   14508:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1450c:	e13ffd17 	ldw	r4,-12(fp)
   14510:	0010c080 	call	10c08 <OS_EventTaskWait>
   14514:	e0bff617 	ldw	r2,-40(fp)
   14518:	e0bffa15 	stw	r2,-24(fp)
   1451c:	e0bffa17 	ldw	r2,-24(fp)
   14520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   14524:	00114880 	call	11488 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14528:	0005303a 	rdctl	r2,status
   1452c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14530:	e0fffb17 	ldw	r3,-20(fp)
   14534:	00bfff84 	movi	r2,-2
   14538:	1884703a 	and	r2,r3,r2
   1453c:	1001703a 	wrctl	status,r2
  
  return context;
   14540:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   14544:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   14548:	008000b4 	movhi	r2,2
   1454c:	10bfa804 	addi	r2,r2,-352
   14550:	10800017 	ldw	r2,0(r2)
   14554:	10800c43 	ldbu	r2,49(r2)
   14558:	10803fcc 	andi	r2,r2,255
   1455c:	10000326 	beq	r2,zero,1456c <OSQPend+0x224>
   14560:	108000a0 	cmpeqi	r2,r2,2
   14564:	1000091e 	bne	r2,zero,1458c <OSQPend+0x244>
   14568:	00000d06 	br	145a0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1456c:	008000b4 	movhi	r2,2
   14570:	10bfa804 	addi	r2,r2,-352
   14574:	10800017 	ldw	r2,0(r2)
   14578:	10800917 	ldw	r2,36(r2)
   1457c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   14580:	e0bfff17 	ldw	r2,-4(fp)
   14584:	10000005 	stb	zero,0(r2)
             break;
   14588:	00001006 	br	145cc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1458c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14590:	e0bfff17 	ldw	r2,-4(fp)
   14594:	00c00384 	movi	r3,14
   14598:	10c00005 	stb	r3,0(r2)
             break;
   1459c:	00000b06 	br	145cc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   145a0:	008000b4 	movhi	r2,2
   145a4:	10bfa804 	addi	r2,r2,-352
   145a8:	10800017 	ldw	r2,0(r2)
   145ac:	1009883a 	mov	r4,r2
   145b0:	e17ffd17 	ldw	r5,-12(fp)
   145b4:	0010e600 	call	10e60 <OS_EventTaskRemove>
             pmsg = (void *)0;
   145b8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   145bc:	e0bfff17 	ldw	r2,-4(fp)
   145c0:	00c00284 	movi	r3,10
   145c4:	10c00005 	stb	r3,0(r2)
             break;
   145c8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   145cc:	008000b4 	movhi	r2,2
   145d0:	10bfa804 	addi	r2,r2,-352
   145d4:	10800017 	ldw	r2,0(r2)
   145d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   145dc:	008000b4 	movhi	r2,2
   145e0:	10bfa804 	addi	r2,r2,-352
   145e4:	10800017 	ldw	r2,0(r2)
   145e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   145ec:	008000b4 	movhi	r2,2
   145f0:	10bfa804 	addi	r2,r2,-352
   145f4:	10800017 	ldw	r2,0(r2)
   145f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   145fc:	008000b4 	movhi	r2,2
   14600:	10bfa804 	addi	r2,r2,-352
   14604:	10800017 	ldw	r2,0(r2)
   14608:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1460c:	008000b4 	movhi	r2,2
   14610:	10bfa804 	addi	r2,r2,-352
   14614:	10800017 	ldw	r2,0(r2)
   14618:	10000915 	stw	zero,36(r2)
   1461c:	e0bff617 	ldw	r2,-40(fp)
   14620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14624:	e0bffc17 	ldw	r2,-16(fp)
   14628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1462c:	e0bff517 	ldw	r2,-44(fp)
}
   14630:	e037883a 	mov	sp,fp
   14634:	dfc00117 	ldw	ra,4(sp)
   14638:	df000017 	ldw	fp,0(sp)
   1463c:	dec00204 	addi	sp,sp,8
   14640:	f800283a 	ret

00014644 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14644:	defff604 	addi	sp,sp,-40
   14648:	dfc00915 	stw	ra,36(sp)
   1464c:	df000815 	stw	fp,32(sp)
   14650:	df000804 	addi	fp,sp,32
   14654:	e13ffd15 	stw	r4,-12(fp)
   14658:	2805883a 	mov	r2,r5
   1465c:	e1bfff15 	stw	r6,-4(fp)
   14660:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14664:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14668:	e0bfff17 	ldw	r2,-4(fp)
   1466c:	1000021e 	bne	r2,zero,14678 <OSQPendAbort+0x34>
        return (0);
   14670:	0005883a 	mov	r2,zero
   14674:	00004906 	br	1479c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14678:	e0bffd17 	ldw	r2,-12(fp)
   1467c:	1000051e 	bne	r2,zero,14694 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14680:	e0bfff17 	ldw	r2,-4(fp)
   14684:	00c00104 	movi	r3,4
   14688:	10c00005 	stb	r3,0(r2)
        return (0);
   1468c:	0005883a 	mov	r2,zero
   14690:	00004206 	br	1479c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14694:	e0bffd17 	ldw	r2,-12(fp)
   14698:	10800003 	ldbu	r2,0(r2)
   1469c:	10803fcc 	andi	r2,r2,255
   146a0:	108000a0 	cmpeqi	r2,r2,2
   146a4:	1000051e 	bne	r2,zero,146bc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   146a8:	e0bfff17 	ldw	r2,-4(fp)
   146ac:	00c00044 	movi	r3,1
   146b0:	10c00005 	stb	r3,0(r2)
        return (0);
   146b4:	0005883a 	mov	r2,zero
   146b8:	00003806 	br	1479c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146bc:	0005303a 	rdctl	r2,status
   146c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146c4:	e0fffa17 	ldw	r3,-24(fp)
   146c8:	00bfff84 	movi	r2,-2
   146cc:	1884703a 	and	r2,r3,r2
   146d0:	1001703a 	wrctl	status,r2
  
  return context;
   146d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   146d8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   146dc:	e0bffd17 	ldw	r2,-12(fp)
   146e0:	10800283 	ldbu	r2,10(r2)
   146e4:	10803fcc 	andi	r2,r2,255
   146e8:	10002526 	beq	r2,zero,14780 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   146ec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   146f0:	e0bffe03 	ldbu	r2,-8(fp)
   146f4:	10800060 	cmpeqi	r2,r2,1
   146f8:	10000e26 	beq	r2,zero,14734 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   146fc:	00000806 	br	14720 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14700:	e13ffd17 	ldw	r4,-12(fp)
   14704:	000b883a 	mov	r5,zero
   14708:	01800104 	movi	r6,4
   1470c:	01c00084 	movi	r7,2
   14710:	0010a700 	call	10a70 <OS_EventTaskRdy>
                     nbr_tasks++;
   14714:	e0bff803 	ldbu	r2,-32(fp)
   14718:	10800044 	addi	r2,r2,1
   1471c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14720:	e0bffd17 	ldw	r2,-12(fp)
   14724:	10800283 	ldbu	r2,10(r2)
   14728:	10803fcc 	andi	r2,r2,255
   1472c:	103ff41e 	bne	r2,zero,14700 <__alt_mem_Flash_flash_data+0xf4014700>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14730:	00000906 	br	14758 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14734:	e13ffd17 	ldw	r4,-12(fp)
   14738:	000b883a 	mov	r5,zero
   1473c:	01800104 	movi	r6,4
   14740:	01c00084 	movi	r7,2
   14744:	0010a700 	call	10a70 <OS_EventTaskRdy>
                 nbr_tasks++;
   14748:	e0bff803 	ldbu	r2,-32(fp)
   1474c:	10800044 	addi	r2,r2,1
   14750:	e0bff805 	stb	r2,-32(fp)
                 break;
   14754:	0001883a 	nop
   14758:	e0bff917 	ldw	r2,-28(fp)
   1475c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14760:	e0bffb17 	ldw	r2,-20(fp)
   14764:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   14768:	00114880 	call	11488 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1476c:	e0bfff17 	ldw	r2,-4(fp)
   14770:	00c00384 	movi	r3,14
   14774:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   14778:	e0bff803 	ldbu	r2,-32(fp)
   1477c:	00000706 	br	1479c <OSQPendAbort+0x158>
   14780:	e0bff917 	ldw	r2,-28(fp)
   14784:	e0bffc15 	stw	r2,-16(fp)
   14788:	e0bffc17 	ldw	r2,-16(fp)
   1478c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14790:	e0bfff17 	ldw	r2,-4(fp)
   14794:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   14798:	0005883a 	mov	r2,zero
}
   1479c:	e037883a 	mov	sp,fp
   147a0:	dfc00117 	ldw	ra,4(sp)
   147a4:	df000017 	ldw	fp,0(sp)
   147a8:	dec00204 	addi	sp,sp,8
   147ac:	f800283a 	ret

000147b0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   147b0:	defff604 	addi	sp,sp,-40
   147b4:	dfc00915 	stw	ra,36(sp)
   147b8:	df000815 	stw	fp,32(sp)
   147bc:	df000804 	addi	fp,sp,32
   147c0:	e13ffe15 	stw	r4,-8(fp)
   147c4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   147c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   147cc:	e0bffe17 	ldw	r2,-8(fp)
   147d0:	1000021e 	bne	r2,zero,147dc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   147d4:	00800104 	movi	r2,4
   147d8:	00004a06 	br	14904 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   147dc:	e0bffe17 	ldw	r2,-8(fp)
   147e0:	10800003 	ldbu	r2,0(r2)
   147e4:	10803fcc 	andi	r2,r2,255
   147e8:	108000a0 	cmpeqi	r2,r2,2
   147ec:	1000021e 	bne	r2,zero,147f8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   147f0:	00800044 	movi	r2,1
   147f4:	00004306 	br	14904 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147f8:	0005303a 	rdctl	r2,status
   147fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14800:	e0fffa17 	ldw	r3,-24(fp)
   14804:	00bfff84 	movi	r2,-2
   14808:	1884703a 	and	r2,r3,r2
   1480c:	1001703a 	wrctl	status,r2
  
  return context;
   14810:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14814:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	10800283 	ldbu	r2,10(r2)
   14820:	10803fcc 	andi	r2,r2,255
   14824:	10000c26 	beq	r2,zero,14858 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14828:	e13ffe17 	ldw	r4,-8(fp)
   1482c:	e17fff17 	ldw	r5,-4(fp)
   14830:	01800104 	movi	r6,4
   14834:	000f883a 	mov	r7,zero
   14838:	0010a700 	call	10a70 <OS_EventTaskRdy>
   1483c:	e0bff817 	ldw	r2,-32(fp)
   14840:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14844:	e0bffb17 	ldw	r2,-20(fp)
   14848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1484c:	00114880 	call	11488 <OS_Sched>
        return (OS_ERR_NONE);
   14850:	0005883a 	mov	r2,zero
   14854:	00002b06 	br	14904 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   14858:	e0bffe17 	ldw	r2,-8(fp)
   1485c:	10800117 	ldw	r2,4(r2)
   14860:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   14864:	e0bff917 	ldw	r2,-28(fp)
   14868:	10c0058b 	ldhu	r3,22(r2)
   1486c:	e0bff917 	ldw	r2,-28(fp)
   14870:	1080050b 	ldhu	r2,20(r2)
   14874:	18ffffcc 	andi	r3,r3,65535
   14878:	10bfffcc 	andi	r2,r2,65535
   1487c:	18800636 	bltu	r3,r2,14898 <OSQPost+0xe8>
   14880:	e0bff817 	ldw	r2,-32(fp)
   14884:	e0bffc15 	stw	r2,-16(fp)
   14888:	e0bffc17 	ldw	r2,-16(fp)
   1488c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14890:	00800784 	movi	r2,30
   14894:	00001b06 	br	14904 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   14898:	e0bff917 	ldw	r2,-28(fp)
   1489c:	10800317 	ldw	r2,12(r2)
   148a0:	11000104 	addi	r4,r2,4
   148a4:	e0fff917 	ldw	r3,-28(fp)
   148a8:	19000315 	stw	r4,12(r3)
   148ac:	e0ffff17 	ldw	r3,-4(fp)
   148b0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   148b4:	e0bff917 	ldw	r2,-28(fp)
   148b8:	1080058b 	ldhu	r2,22(r2)
   148bc:	10800044 	addi	r2,r2,1
   148c0:	1007883a 	mov	r3,r2
   148c4:	e0bff917 	ldw	r2,-28(fp)
   148c8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   148cc:	e0bff917 	ldw	r2,-28(fp)
   148d0:	10c00317 	ldw	r3,12(r2)
   148d4:	e0bff917 	ldw	r2,-28(fp)
   148d8:	10800217 	ldw	r2,8(r2)
   148dc:	1880041e 	bne	r3,r2,148f0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   148e0:	e0bff917 	ldw	r2,-28(fp)
   148e4:	10c00117 	ldw	r3,4(r2)
   148e8:	e0bff917 	ldw	r2,-28(fp)
   148ec:	10c00315 	stw	r3,12(r2)
   148f0:	e0bff817 	ldw	r2,-32(fp)
   148f4:	e0bffd15 	stw	r2,-12(fp)
   148f8:	e0bffd17 	ldw	r2,-12(fp)
   148fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14900:	0005883a 	mov	r2,zero
}
   14904:	e037883a 	mov	sp,fp
   14908:	dfc00117 	ldw	ra,4(sp)
   1490c:	df000017 	ldw	fp,0(sp)
   14910:	dec00204 	addi	sp,sp,8
   14914:	f800283a 	ret

00014918 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   14918:	defff604 	addi	sp,sp,-40
   1491c:	dfc00915 	stw	ra,36(sp)
   14920:	df000815 	stw	fp,32(sp)
   14924:	df000804 	addi	fp,sp,32
   14928:	e13ffe15 	stw	r4,-8(fp)
   1492c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14930:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14934:	e0bffe17 	ldw	r2,-8(fp)
   14938:	1000021e 	bne	r2,zero,14944 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1493c:	00800104 	movi	r2,4
   14940:	00004c06 	br	14a74 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14944:	e0bffe17 	ldw	r2,-8(fp)
   14948:	10800003 	ldbu	r2,0(r2)
   1494c:	10803fcc 	andi	r2,r2,255
   14950:	108000a0 	cmpeqi	r2,r2,2
   14954:	1000021e 	bne	r2,zero,14960 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   14958:	00800044 	movi	r2,1
   1495c:	00004506 	br	14a74 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14960:	0005303a 	rdctl	r2,status
   14964:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14968:	e0fffa17 	ldw	r3,-24(fp)
   1496c:	00bfff84 	movi	r2,-2
   14970:	1884703a 	and	r2,r3,r2
   14974:	1001703a 	wrctl	status,r2
  
  return context;
   14978:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1497c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   14980:	e0bffe17 	ldw	r2,-8(fp)
   14984:	10800283 	ldbu	r2,10(r2)
   14988:	10803fcc 	andi	r2,r2,255
   1498c:	10000c26 	beq	r2,zero,149c0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14990:	e13ffe17 	ldw	r4,-8(fp)
   14994:	e17fff17 	ldw	r5,-4(fp)
   14998:	01800104 	movi	r6,4
   1499c:	000f883a 	mov	r7,zero
   149a0:	0010a700 	call	10a70 <OS_EventTaskRdy>
   149a4:	e0bff817 	ldw	r2,-32(fp)
   149a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149ac:	e0bffb17 	ldw	r2,-20(fp)
   149b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   149b4:	00114880 	call	11488 <OS_Sched>
        return (OS_ERR_NONE);
   149b8:	0005883a 	mov	r2,zero
   149bc:	00002d06 	br	14a74 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   149c0:	e0bffe17 	ldw	r2,-8(fp)
   149c4:	10800117 	ldw	r2,4(r2)
   149c8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   149cc:	e0bff917 	ldw	r2,-28(fp)
   149d0:	10c0058b 	ldhu	r3,22(r2)
   149d4:	e0bff917 	ldw	r2,-28(fp)
   149d8:	1080050b 	ldhu	r2,20(r2)
   149dc:	18ffffcc 	andi	r3,r3,65535
   149e0:	10bfffcc 	andi	r2,r2,65535
   149e4:	18800636 	bltu	r3,r2,14a00 <OSQPostFront+0xe8>
   149e8:	e0bff817 	ldw	r2,-32(fp)
   149ec:	e0bffc15 	stw	r2,-16(fp)
   149f0:	e0bffc17 	ldw	r2,-16(fp)
   149f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   149f8:	00800784 	movi	r2,30
   149fc:	00001d06 	br	14a74 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   14a00:	e0bff917 	ldw	r2,-28(fp)
   14a04:	10c00417 	ldw	r3,16(r2)
   14a08:	e0bff917 	ldw	r2,-28(fp)
   14a0c:	10800117 	ldw	r2,4(r2)
   14a10:	1880041e 	bne	r3,r2,14a24 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   14a14:	e0bff917 	ldw	r2,-28(fp)
   14a18:	10c00217 	ldw	r3,8(r2)
   14a1c:	e0bff917 	ldw	r2,-28(fp)
   14a20:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   14a24:	e0bff917 	ldw	r2,-28(fp)
   14a28:	10800417 	ldw	r2,16(r2)
   14a2c:	10ffff04 	addi	r3,r2,-4
   14a30:	e0bff917 	ldw	r2,-28(fp)
   14a34:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   14a38:	e0bff917 	ldw	r2,-28(fp)
   14a3c:	10800417 	ldw	r2,16(r2)
   14a40:	e0ffff17 	ldw	r3,-4(fp)
   14a44:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14a48:	e0bff917 	ldw	r2,-28(fp)
   14a4c:	1080058b 	ldhu	r2,22(r2)
   14a50:	10800044 	addi	r2,r2,1
   14a54:	1007883a 	mov	r3,r2
   14a58:	e0bff917 	ldw	r2,-28(fp)
   14a5c:	10c0058d 	sth	r3,22(r2)
   14a60:	e0bff817 	ldw	r2,-32(fp)
   14a64:	e0bffd15 	stw	r2,-12(fp)
   14a68:	e0bffd17 	ldw	r2,-12(fp)
   14a6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14a70:	0005883a 	mov	r2,zero
}
   14a74:	e037883a 	mov	sp,fp
   14a78:	dfc00117 	ldw	ra,4(sp)
   14a7c:	df000017 	ldw	fp,0(sp)
   14a80:	dec00204 	addi	sp,sp,8
   14a84:	f800283a 	ret

00014a88 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   14a88:	defff504 	addi	sp,sp,-44
   14a8c:	dfc00a15 	stw	ra,40(sp)
   14a90:	df000915 	stw	fp,36(sp)
   14a94:	df000904 	addi	fp,sp,36
   14a98:	e13ffd15 	stw	r4,-12(fp)
   14a9c:	e17ffe15 	stw	r5,-8(fp)
   14aa0:	3005883a 	mov	r2,r6
   14aa4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14aa8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14aac:	e0bffd17 	ldw	r2,-12(fp)
   14ab0:	1000021e 	bne	r2,zero,14abc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   14ab4:	00800104 	movi	r2,4
   14ab8:	00007106 	br	14c80 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14abc:	e0bffd17 	ldw	r2,-12(fp)
   14ac0:	10800003 	ldbu	r2,0(r2)
   14ac4:	10803fcc 	andi	r2,r2,255
   14ac8:	108000a0 	cmpeqi	r2,r2,2
   14acc:	1000021e 	bne	r2,zero,14ad8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   14ad0:	00800044 	movi	r2,1
   14ad4:	00006a06 	br	14c80 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ad8:	0005303a 	rdctl	r2,status
   14adc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ae0:	e0fff917 	ldw	r3,-28(fp)
   14ae4:	00bfff84 	movi	r2,-2
   14ae8:	1884703a 	and	r2,r3,r2
   14aec:	1001703a 	wrctl	status,r2
  
  return context;
   14af0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14af4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   14af8:	e0bffd17 	ldw	r2,-12(fp)
   14afc:	10800283 	ldbu	r2,10(r2)
   14b00:	10803fcc 	andi	r2,r2,255
   14b04:	10001d26 	beq	r2,zero,14b7c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   14b08:	e0bfff03 	ldbu	r2,-4(fp)
   14b0c:	1080004c 	andi	r2,r2,1
   14b10:	10000b26 	beq	r2,zero,14b40 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14b14:	00000506 	br	14b2c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14b18:	e13ffd17 	ldw	r4,-12(fp)
   14b1c:	e17ffe17 	ldw	r5,-8(fp)
   14b20:	01800104 	movi	r6,4
   14b24:	000f883a 	mov	r7,zero
   14b28:	0010a700 	call	10a70 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14b2c:	e0bffd17 	ldw	r2,-12(fp)
   14b30:	10800283 	ldbu	r2,10(r2)
   14b34:	10803fcc 	andi	r2,r2,255
   14b38:	103ff71e 	bne	r2,zero,14b18 <__alt_mem_Flash_flash_data+0xf4014b18>
   14b3c:	00000506 	br	14b54 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14b40:	e13ffd17 	ldw	r4,-12(fp)
   14b44:	e17ffe17 	ldw	r5,-8(fp)
   14b48:	01800104 	movi	r6,4
   14b4c:	000f883a 	mov	r7,zero
   14b50:	0010a700 	call	10a70 <OS_EventTaskRdy>
   14b54:	e0bff717 	ldw	r2,-36(fp)
   14b58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b5c:	e0bffa17 	ldw	r2,-24(fp)
   14b60:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   14b64:	e0bfff03 	ldbu	r2,-4(fp)
   14b68:	1080010c 	andi	r2,r2,4
   14b6c:	1000011e 	bne	r2,zero,14b74 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   14b70:	00114880 	call	11488 <OS_Sched>
        }
        return (OS_ERR_NONE);
   14b74:	0005883a 	mov	r2,zero
   14b78:	00004106 	br	14c80 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14b7c:	e0bffd17 	ldw	r2,-12(fp)
   14b80:	10800117 	ldw	r2,4(r2)
   14b84:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14b88:	e0bff817 	ldw	r2,-32(fp)
   14b8c:	10c0058b 	ldhu	r3,22(r2)
   14b90:	e0bff817 	ldw	r2,-32(fp)
   14b94:	1080050b 	ldhu	r2,20(r2)
   14b98:	18ffffcc 	andi	r3,r3,65535
   14b9c:	10bfffcc 	andi	r2,r2,65535
   14ba0:	18800636 	bltu	r3,r2,14bbc <OSQPostOpt+0x134>
   14ba4:	e0bff717 	ldw	r2,-36(fp)
   14ba8:	e0bffb15 	stw	r2,-20(fp)
   14bac:	e0bffb17 	ldw	r2,-20(fp)
   14bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14bb4:	00800784 	movi	r2,30
   14bb8:	00003106 	br	14c80 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   14bbc:	e0bfff03 	ldbu	r2,-4(fp)
   14bc0:	1080008c 	andi	r2,r2,2
   14bc4:	10001326 	beq	r2,zero,14c14 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   14bc8:	e0bff817 	ldw	r2,-32(fp)
   14bcc:	10c00417 	ldw	r3,16(r2)
   14bd0:	e0bff817 	ldw	r2,-32(fp)
   14bd4:	10800117 	ldw	r2,4(r2)
   14bd8:	1880041e 	bne	r3,r2,14bec <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   14bdc:	e0bff817 	ldw	r2,-32(fp)
   14be0:	10c00217 	ldw	r3,8(r2)
   14be4:	e0bff817 	ldw	r2,-32(fp)
   14be8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   14bec:	e0bff817 	ldw	r2,-32(fp)
   14bf0:	10800417 	ldw	r2,16(r2)
   14bf4:	10ffff04 	addi	r3,r2,-4
   14bf8:	e0bff817 	ldw	r2,-32(fp)
   14bfc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   14c00:	e0bff817 	ldw	r2,-32(fp)
   14c04:	10800417 	ldw	r2,16(r2)
   14c08:	e0fffe17 	ldw	r3,-8(fp)
   14c0c:	10c00015 	stw	r3,0(r2)
   14c10:	00001006 	br	14c54 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   14c14:	e0bff817 	ldw	r2,-32(fp)
   14c18:	10800317 	ldw	r2,12(r2)
   14c1c:	11000104 	addi	r4,r2,4
   14c20:	e0fff817 	ldw	r3,-32(fp)
   14c24:	19000315 	stw	r4,12(r3)
   14c28:	e0fffe17 	ldw	r3,-8(fp)
   14c2c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   14c30:	e0bff817 	ldw	r2,-32(fp)
   14c34:	10c00317 	ldw	r3,12(r2)
   14c38:	e0bff817 	ldw	r2,-32(fp)
   14c3c:	10800217 	ldw	r2,8(r2)
   14c40:	1880041e 	bne	r3,r2,14c54 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   14c44:	e0bff817 	ldw	r2,-32(fp)
   14c48:	10c00117 	ldw	r3,4(r2)
   14c4c:	e0bff817 	ldw	r2,-32(fp)
   14c50:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14c54:	e0bff817 	ldw	r2,-32(fp)
   14c58:	1080058b 	ldhu	r2,22(r2)
   14c5c:	10800044 	addi	r2,r2,1
   14c60:	1007883a 	mov	r3,r2
   14c64:	e0bff817 	ldw	r2,-32(fp)
   14c68:	10c0058d 	sth	r3,22(r2)
   14c6c:	e0bff717 	ldw	r2,-36(fp)
   14c70:	e0bffc15 	stw	r2,-16(fp)
   14c74:	e0bffc17 	ldw	r2,-16(fp)
   14c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14c7c:	0005883a 	mov	r2,zero
}
   14c80:	e037883a 	mov	sp,fp
   14c84:	dfc00117 	ldw	ra,4(sp)
   14c88:	df000017 	ldw	fp,0(sp)
   14c8c:	dec00204 	addi	sp,sp,8
   14c90:	f800283a 	ret

00014c94 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   14c94:	defff604 	addi	sp,sp,-40
   14c98:	df000915 	stw	fp,36(sp)
   14c9c:	df000904 	addi	fp,sp,36
   14ca0:	e13ffe15 	stw	r4,-8(fp)
   14ca4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14ca8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14cac:	e0bffe17 	ldw	r2,-8(fp)
   14cb0:	1000021e 	bne	r2,zero,14cbc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14cb4:	00800104 	movi	r2,4
   14cb8:	00004906 	br	14de0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   14cbc:	e0bfff17 	ldw	r2,-4(fp)
   14cc0:	1000021e 	bne	r2,zero,14ccc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14cc4:	00800244 	movi	r2,9
   14cc8:	00004506 	br	14de0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14ccc:	e0bffe17 	ldw	r2,-8(fp)
   14cd0:	10800003 	ldbu	r2,0(r2)
   14cd4:	10803fcc 	andi	r2,r2,255
   14cd8:	108000a0 	cmpeqi	r2,r2,2
   14cdc:	1000021e 	bne	r2,zero,14ce8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14ce0:	00800044 	movi	r2,1
   14ce4:	00003e06 	br	14de0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ce8:	0005303a 	rdctl	r2,status
   14cec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cf0:	e0fffc17 	ldw	r3,-16(fp)
   14cf4:	00bfff84 	movi	r2,-2
   14cf8:	1884703a 	and	r2,r3,r2
   14cfc:	1001703a 	wrctl	status,r2
  
  return context;
   14d00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14d04:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	10c00283 	ldbu	r3,10(r2)
   14d10:	e0bfff17 	ldw	r2,-4(fp)
   14d14:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   14d18:	e0bffe17 	ldw	r2,-8(fp)
   14d1c:	108002c4 	addi	r2,r2,11
   14d20:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   14d24:	e0bfff17 	ldw	r2,-4(fp)
   14d28:	10800204 	addi	r2,r2,8
   14d2c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14d30:	e03ff705 	stb	zero,-36(fp)
   14d34:	00000b06 	br	14d64 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   14d38:	e0bff917 	ldw	r2,-28(fp)
   14d3c:	10c00044 	addi	r3,r2,1
   14d40:	e0fff915 	stw	r3,-28(fp)
   14d44:	e0fff817 	ldw	r3,-32(fp)
   14d48:	19000044 	addi	r4,r3,1
   14d4c:	e13ff815 	stw	r4,-32(fp)
   14d50:	18c00003 	ldbu	r3,0(r3)
   14d54:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14d58:	e0bff703 	ldbu	r2,-36(fp)
   14d5c:	10800044 	addi	r2,r2,1
   14d60:	e0bff705 	stb	r2,-36(fp)
   14d64:	e0bff703 	ldbu	r2,-36(fp)
   14d68:	108000f0 	cmpltui	r2,r2,3
   14d6c:	103ff21e 	bne	r2,zero,14d38 <__alt_mem_Flash_flash_data+0xf4014d38>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   14d70:	e0bffe17 	ldw	r2,-8(fp)
   14d74:	10800117 	ldw	r2,4(r2)
   14d78:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   14d7c:	e0bffb17 	ldw	r2,-20(fp)
   14d80:	1080058b 	ldhu	r2,22(r2)
   14d84:	10bfffcc 	andi	r2,r2,65535
   14d88:	10000626 	beq	r2,zero,14da4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   14d8c:	e0bffb17 	ldw	r2,-20(fp)
   14d90:	10800417 	ldw	r2,16(r2)
   14d94:	10c00017 	ldw	r3,0(r2)
   14d98:	e0bfff17 	ldw	r2,-4(fp)
   14d9c:	10c00015 	stw	r3,0(r2)
   14da0:	00000206 	br	14dac <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   14da4:	e0bfff17 	ldw	r2,-4(fp)
   14da8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   14dac:	e0bffb17 	ldw	r2,-20(fp)
   14db0:	10c0058b 	ldhu	r3,22(r2)
   14db4:	e0bfff17 	ldw	r2,-4(fp)
   14db8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   14dbc:	e0bffb17 	ldw	r2,-20(fp)
   14dc0:	10c0050b 	ldhu	r3,20(r2)
   14dc4:	e0bfff17 	ldw	r2,-4(fp)
   14dc8:	10c0018d 	sth	r3,6(r2)
   14dcc:	e0bffa17 	ldw	r2,-24(fp)
   14dd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dd4:	e0bffd17 	ldw	r2,-12(fp)
   14dd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14ddc:	0005883a 	mov	r2,zero
}
   14de0:	e037883a 	mov	sp,fp
   14de4:	df000017 	ldw	fp,0(sp)
   14de8:	dec00104 	addi	sp,sp,4
   14dec:	f800283a 	ret

00014df0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   14df0:	defffb04 	addi	sp,sp,-20
   14df4:	dfc00415 	stw	ra,16(sp)
   14df8:	df000315 	stw	fp,12(sp)
   14dfc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   14e00:	010000b4 	movhi	r4,2
   14e04:	2105a404 	addi	r4,r4,5776
   14e08:	01407804 	movi	r5,480
   14e0c:	00113d40 	call	113d4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   14e10:	008000b4 	movhi	r2,2
   14e14:	1085a404 	addi	r2,r2,5776
   14e18:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   14e1c:	008000b4 	movhi	r2,2
   14e20:	1085aa04 	addi	r2,r2,5800
   14e24:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14e28:	e03ffd0d 	sth	zero,-12(fp)
   14e2c:	00000c06 	br	14e60 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   14e30:	e0bffe17 	ldw	r2,-8(fp)
   14e34:	e0ffff17 	ldw	r3,-4(fp)
   14e38:	10c00015 	stw	r3,0(r2)
        pq1++;
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10800604 	addi	r2,r2,24
   14e44:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   14e48:	e0bfff17 	ldw	r2,-4(fp)
   14e4c:	10800604 	addi	r2,r2,24
   14e50:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14e54:	e0bffd0b 	ldhu	r2,-12(fp)
   14e58:	10800044 	addi	r2,r2,1
   14e5c:	e0bffd0d 	sth	r2,-12(fp)
   14e60:	e0bffd0b 	ldhu	r2,-12(fp)
   14e64:	108004f0 	cmpltui	r2,r2,19
   14e68:	103ff11e 	bne	r2,zero,14e30 <__alt_mem_Flash_flash_data+0xf4014e30>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   14e6c:	e0bffe17 	ldw	r2,-8(fp)
   14e70:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   14e74:	008000b4 	movhi	r2,2
   14e78:	10bfa404 	addi	r2,r2,-368
   14e7c:	00c000b4 	movhi	r3,2
   14e80:	18c5a404 	addi	r3,r3,5776
   14e84:	10c00015 	stw	r3,0(r2)
#endif
}
   14e88:	e037883a 	mov	sp,fp
   14e8c:	dfc00117 	ldw	ra,4(sp)
   14e90:	df000017 	ldw	fp,0(sp)
   14e94:	dec00204 	addi	sp,sp,8
   14e98:	f800283a 	ret

00014e9c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   14e9c:	defffa04 	addi	sp,sp,-24
   14ea0:	df000515 	stw	fp,20(sp)
   14ea4:	df000504 	addi	fp,sp,20
   14ea8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14eac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14eb0:	e0bfff17 	ldw	r2,-4(fp)
   14eb4:	1000021e 	bne	r2,zero,14ec0 <OSSemAccept+0x24>
        return (0);
   14eb8:	0005883a 	mov	r2,zero
   14ebc:	00001f06 	br	14f3c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14ec0:	e0bfff17 	ldw	r2,-4(fp)
   14ec4:	10800003 	ldbu	r2,0(r2)
   14ec8:	10803fcc 	andi	r2,r2,255
   14ecc:	108000e0 	cmpeqi	r2,r2,3
   14ed0:	1000021e 	bne	r2,zero,14edc <OSSemAccept+0x40>
        return (0);
   14ed4:	0005883a 	mov	r2,zero
   14ed8:	00001806 	br	14f3c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14edc:	0005303a 	rdctl	r2,status
   14ee0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ee4:	e0fffd17 	ldw	r3,-12(fp)
   14ee8:	00bfff84 	movi	r2,-2
   14eec:	1884703a 	and	r2,r3,r2
   14ef0:	1001703a 	wrctl	status,r2
  
  return context;
   14ef4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14ef8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   14efc:	e0bfff17 	ldw	r2,-4(fp)
   14f00:	1080020b 	ldhu	r2,8(r2)
   14f04:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   14f08:	e0bffc0b 	ldhu	r2,-16(fp)
   14f0c:	10000626 	beq	r2,zero,14f28 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   14f10:	e0bfff17 	ldw	r2,-4(fp)
   14f14:	1080020b 	ldhu	r2,8(r2)
   14f18:	10bfffc4 	addi	r2,r2,-1
   14f1c:	1007883a 	mov	r3,r2
   14f20:	e0bfff17 	ldw	r2,-4(fp)
   14f24:	10c0020d 	sth	r3,8(r2)
   14f28:	e0bffb17 	ldw	r2,-20(fp)
   14f2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f30:	e0bffe17 	ldw	r2,-8(fp)
   14f34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   14f38:	e0bffc0b 	ldhu	r2,-16(fp)
}
   14f3c:	e037883a 	mov	sp,fp
   14f40:	df000017 	ldw	fp,0(sp)
   14f44:	dec00104 	addi	sp,sp,4
   14f48:	f800283a 	ret

00014f4c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   14f4c:	defff904 	addi	sp,sp,-28
   14f50:	dfc00615 	stw	ra,24(sp)
   14f54:	df000515 	stw	fp,20(sp)
   14f58:	df000504 	addi	fp,sp,20
   14f5c:	2005883a 	mov	r2,r4
   14f60:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14f64:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14f68:	008000b4 	movhi	r2,2
   14f6c:	10bfa704 	addi	r2,r2,-356
   14f70:	10800003 	ldbu	r2,0(r2)
   14f74:	10803fcc 	andi	r2,r2,255
   14f78:	10000226 	beq	r2,zero,14f84 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   14f7c:	0005883a 	mov	r2,zero
   14f80:	00002d06 	br	15038 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f84:	0005303a 	rdctl	r2,status
   14f88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f8c:	e0fffd17 	ldw	r3,-12(fp)
   14f90:	00bfff84 	movi	r2,-2
   14f94:	1884703a 	and	r2,r3,r2
   14f98:	1001703a 	wrctl	status,r2
  
  return context;
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14fa0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   14fa4:	008000b4 	movhi	r2,2
   14fa8:	10bfa604 	addi	r2,r2,-360
   14fac:	10800017 	ldw	r2,0(r2)
   14fb0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   14fb4:	008000b4 	movhi	r2,2
   14fb8:	10bfa604 	addi	r2,r2,-360
   14fbc:	10800017 	ldw	r2,0(r2)
   14fc0:	10000726 	beq	r2,zero,14fe0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14fc4:	008000b4 	movhi	r2,2
   14fc8:	10bfa604 	addi	r2,r2,-360
   14fcc:	10800017 	ldw	r2,0(r2)
   14fd0:	10c00117 	ldw	r3,4(r2)
   14fd4:	008000b4 	movhi	r2,2
   14fd8:	10bfa604 	addi	r2,r2,-360
   14fdc:	10c00015 	stw	r3,0(r2)
   14fe0:	e0bffb17 	ldw	r2,-20(fp)
   14fe4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fe8:	e0bffe17 	ldw	r2,-8(fp)
   14fec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   14ff0:	e0bffc17 	ldw	r2,-16(fp)
   14ff4:	10000f26 	beq	r2,zero,15034 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   14ff8:	e0bffc17 	ldw	r2,-16(fp)
   14ffc:	00c000c4 	movi	r3,3
   15000:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15004:	e0bffc17 	ldw	r2,-16(fp)
   15008:	e0ffff0b 	ldhu	r3,-4(fp)
   1500c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   15010:	e0bffc17 	ldw	r2,-16(fp)
   15014:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   15018:	e0bffc17 	ldw	r2,-16(fp)
   1501c:	00c00fc4 	movi	r3,63
   15020:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15024:	e0bffc17 	ldw	r2,-16(fp)
   15028:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1502c:	e13ffc17 	ldw	r4,-16(fp)
   15030:	00110100 	call	11010 <OS_EventWaitListInit>
    }
    return (pevent);
   15034:	e0bffc17 	ldw	r2,-16(fp)
}
   15038:	e037883a 	mov	sp,fp
   1503c:	dfc00117 	ldw	ra,4(sp)
   15040:	df000017 	ldw	fp,0(sp)
   15044:	dec00204 	addi	sp,sp,8
   15048:	f800283a 	ret

0001504c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1504c:	defff304 	addi	sp,sp,-52
   15050:	dfc00c15 	stw	ra,48(sp)
   15054:	df000b15 	stw	fp,44(sp)
   15058:	df000b04 	addi	fp,sp,44
   1505c:	e13ffd15 	stw	r4,-12(fp)
   15060:	2805883a 	mov	r2,r5
   15064:	e1bfff15 	stw	r6,-4(fp)
   15068:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1506c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15070:	e0bfff17 	ldw	r2,-4(fp)
   15074:	1000021e 	bne	r2,zero,15080 <OSSemDel+0x34>
        return (pevent);
   15078:	e0bffd17 	ldw	r2,-12(fp)
   1507c:	00008806 	br	152a0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15080:	e0bffd17 	ldw	r2,-12(fp)
   15084:	1000051e 	bne	r2,zero,1509c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15088:	e0bfff17 	ldw	r2,-4(fp)
   1508c:	00c00104 	movi	r3,4
   15090:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15094:	e0bffd17 	ldw	r2,-12(fp)
   15098:	00008106 	br	152a0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1509c:	e0bffd17 	ldw	r2,-12(fp)
   150a0:	10800003 	ldbu	r2,0(r2)
   150a4:	10803fcc 	andi	r2,r2,255
   150a8:	108000e0 	cmpeqi	r2,r2,3
   150ac:	1000051e 	bne	r2,zero,150c4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   150b0:	e0bfff17 	ldw	r2,-4(fp)
   150b4:	00c00044 	movi	r3,1
   150b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   150bc:	e0bffd17 	ldw	r2,-12(fp)
   150c0:	00007706 	br	152a0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   150c4:	008000b4 	movhi	r2,2
   150c8:	10bfa704 	addi	r2,r2,-356
   150cc:	10800003 	ldbu	r2,0(r2)
   150d0:	10803fcc 	andi	r2,r2,255
   150d4:	10000526 	beq	r2,zero,150ec <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   150d8:	e0bfff17 	ldw	r2,-4(fp)
   150dc:	00c003c4 	movi	r3,15
   150e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   150e4:	e0bffd17 	ldw	r2,-12(fp)
   150e8:	00006d06 	br	152a0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150ec:	0005303a 	rdctl	r2,status
   150f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150f4:	e0fff817 	ldw	r3,-32(fp)
   150f8:	00bfff84 	movi	r2,-2
   150fc:	1884703a 	and	r2,r3,r2
   15100:	1001703a 	wrctl	status,r2
  
  return context;
   15104:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15108:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1510c:	e0bffd17 	ldw	r2,-12(fp)
   15110:	10800283 	ldbu	r2,10(r2)
   15114:	10803fcc 	andi	r2,r2,255
   15118:	10000326 	beq	r2,zero,15128 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1511c:	00800044 	movi	r2,1
   15120:	e0bff505 	stb	r2,-44(fp)
   15124:	00000106 	br	1512c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15128:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1512c:	e0bffe03 	ldbu	r2,-8(fp)
   15130:	10000326 	beq	r2,zero,15140 <OSSemDel+0xf4>
   15134:	10800060 	cmpeqi	r2,r2,1
   15138:	10002c1e 	bne	r2,zero,151ec <OSSemDel+0x1a0>
   1513c:	00004d06 	br	15274 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   15140:	e0bff503 	ldbu	r2,-44(fp)
   15144:	10001a1e 	bne	r2,zero,151b0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15148:	e0bffd17 	ldw	r2,-12(fp)
   1514c:	00c00fc4 	movi	r3,63
   15150:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1515c:	e0bffd17 	ldw	r2,-12(fp)
   15160:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15164:	008000b4 	movhi	r2,2
   15168:	10bfa604 	addi	r2,r2,-360
   1516c:	10c00017 	ldw	r3,0(r2)
   15170:	e0bffd17 	ldw	r2,-12(fp)
   15174:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15178:	e0bffd17 	ldw	r2,-12(fp)
   1517c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15180:	008000b4 	movhi	r2,2
   15184:	10bfa604 	addi	r2,r2,-360
   15188:	e0fffd17 	ldw	r3,-12(fp)
   1518c:	10c00015 	stw	r3,0(r2)
   15190:	e0bff717 	ldw	r2,-36(fp)
   15194:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15198:	e0bff917 	ldw	r2,-28(fp)
   1519c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   151a0:	e0bfff17 	ldw	r2,-4(fp)
   151a4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   151a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   151ac:	00003b06 	br	1529c <OSSemDel+0x250>
   151b0:	e0bff717 	ldw	r2,-36(fp)
   151b4:	e0bffa15 	stw	r2,-24(fp)
   151b8:	e0bffa17 	ldw	r2,-24(fp)
   151bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   151c0:	e0bfff17 	ldw	r2,-4(fp)
   151c4:	00c01244 	movi	r3,73
   151c8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   151cc:	e0bffd17 	ldw	r2,-12(fp)
   151d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   151d4:	00003106 	br	1529c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   151d8:	e13ffd17 	ldw	r4,-12(fp)
   151dc:	000b883a 	mov	r5,zero
   151e0:	01800044 	movi	r6,1
   151e4:	000f883a 	mov	r7,zero
   151e8:	0010a700 	call	10a70 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	10800283 	ldbu	r2,10(r2)
   151f4:	10803fcc 	andi	r2,r2,255
   151f8:	103ff71e 	bne	r2,zero,151d8 <__alt_mem_Flash_flash_data+0xf40151d8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   151fc:	e0bffd17 	ldw	r2,-12(fp)
   15200:	00c00fc4 	movi	r3,63
   15204:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15208:	e0bffd17 	ldw	r2,-12(fp)
   1520c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15218:	008000b4 	movhi	r2,2
   1521c:	10bfa604 	addi	r2,r2,-360
   15220:	10c00017 	ldw	r3,0(r2)
   15224:	e0bffd17 	ldw	r2,-12(fp)
   15228:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1522c:	e0bffd17 	ldw	r2,-12(fp)
   15230:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15234:	008000b4 	movhi	r2,2
   15238:	10bfa604 	addi	r2,r2,-360
   1523c:	e0fffd17 	ldw	r3,-12(fp)
   15240:	10c00015 	stw	r3,0(r2)
   15244:	e0bff717 	ldw	r2,-36(fp)
   15248:	e0bffb15 	stw	r2,-20(fp)
   1524c:	e0bffb17 	ldw	r2,-20(fp)
   15250:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15254:	e0bff503 	ldbu	r2,-44(fp)
   15258:	10800058 	cmpnei	r2,r2,1
   1525c:	1000011e 	bne	r2,zero,15264 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15260:	00114880 	call	11488 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15264:	e0bfff17 	ldw	r2,-4(fp)
   15268:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1526c:	e03ff615 	stw	zero,-40(fp)
             break;
   15270:	00000a06 	br	1529c <OSSemDel+0x250>
   15274:	e0bff717 	ldw	r2,-36(fp)
   15278:	e0bffc15 	stw	r2,-16(fp)
   1527c:	e0bffc17 	ldw	r2,-16(fp)
   15280:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15284:	e0bfff17 	ldw	r2,-4(fp)
   15288:	00c001c4 	movi	r3,7
   1528c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15290:	e0bffd17 	ldw	r2,-12(fp)
   15294:	e0bff615 	stw	r2,-40(fp)
             break;
   15298:	0001883a 	nop
    }
    return (pevent_return);
   1529c:	e0bff617 	ldw	r2,-40(fp)
}
   152a0:	e037883a 	mov	sp,fp
   152a4:	dfc00117 	ldw	ra,4(sp)
   152a8:	df000017 	ldw	fp,0(sp)
   152ac:	dec00204 	addi	sp,sp,8
   152b0:	f800283a 	ret

000152b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   152b4:	defff504 	addi	sp,sp,-44
   152b8:	dfc00a15 	stw	ra,40(sp)
   152bc:	df000915 	stw	fp,36(sp)
   152c0:	df000904 	addi	fp,sp,36
   152c4:	e13ffd15 	stw	r4,-12(fp)
   152c8:	2805883a 	mov	r2,r5
   152cc:	e1bfff15 	stw	r6,-4(fp)
   152d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   152d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   152d8:	e0bfff17 	ldw	r2,-4(fp)
   152dc:	1000011e 	bne	r2,zero,152e4 <OSSemPend+0x30>
        return;
   152e0:	00008906 	br	15508 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   152e4:	e0bffd17 	ldw	r2,-12(fp)
   152e8:	1000041e 	bne	r2,zero,152fc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   152ec:	e0bfff17 	ldw	r2,-4(fp)
   152f0:	00c00104 	movi	r3,4
   152f4:	10c00005 	stb	r3,0(r2)
        return;
   152f8:	00008306 	br	15508 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   152fc:	e0bffd17 	ldw	r2,-12(fp)
   15300:	10800003 	ldbu	r2,0(r2)
   15304:	10803fcc 	andi	r2,r2,255
   15308:	108000e0 	cmpeqi	r2,r2,3
   1530c:	1000041e 	bne	r2,zero,15320 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   15310:	e0bfff17 	ldw	r2,-4(fp)
   15314:	00c00044 	movi	r3,1
   15318:	10c00005 	stb	r3,0(r2)
        return;
   1531c:	00007a06 	br	15508 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   15320:	008000b4 	movhi	r2,2
   15324:	10bfa704 	addi	r2,r2,-356
   15328:	10800003 	ldbu	r2,0(r2)
   1532c:	10803fcc 	andi	r2,r2,255
   15330:	10000426 	beq	r2,zero,15344 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   15334:	e0bfff17 	ldw	r2,-4(fp)
   15338:	00c00084 	movi	r3,2
   1533c:	10c00005 	stb	r3,0(r2)
        return;
   15340:	00007106 	br	15508 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   15344:	008000b4 	movhi	r2,2
   15348:	10bf9904 	addi	r2,r2,-412
   1534c:	10800003 	ldbu	r2,0(r2)
   15350:	10803fcc 	andi	r2,r2,255
   15354:	10000426 	beq	r2,zero,15368 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15358:	e0bfff17 	ldw	r2,-4(fp)
   1535c:	00c00344 	movi	r3,13
   15360:	10c00005 	stb	r3,0(r2)
        return;
   15364:	00006806 	br	15508 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15368:	0005303a 	rdctl	r2,status
   1536c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15370:	e0fff817 	ldw	r3,-32(fp)
   15374:	00bfff84 	movi	r2,-2
   15378:	1884703a 	and	r2,r3,r2
   1537c:	1001703a 	wrctl	status,r2
  
  return context;
   15380:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15384:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   15388:	e0bffd17 	ldw	r2,-12(fp)
   1538c:	1080020b 	ldhu	r2,8(r2)
   15390:	10bfffcc 	andi	r2,r2,65535
   15394:	10000d26 	beq	r2,zero,153cc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   15398:	e0bffd17 	ldw	r2,-12(fp)
   1539c:	1080020b 	ldhu	r2,8(r2)
   153a0:	10bfffc4 	addi	r2,r2,-1
   153a4:	1007883a 	mov	r3,r2
   153a8:	e0bffd17 	ldw	r2,-12(fp)
   153ac:	10c0020d 	sth	r3,8(r2)
   153b0:	e0bff717 	ldw	r2,-36(fp)
   153b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153b8:	e0bff917 	ldw	r2,-28(fp)
   153bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   153c0:	e0bfff17 	ldw	r2,-4(fp)
   153c4:	10000005 	stb	zero,0(r2)
        return;
   153c8:	00004f06 	br	15508 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   153cc:	008000b4 	movhi	r2,2
   153d0:	10bfa804 	addi	r2,r2,-352
   153d4:	10c00017 	ldw	r3,0(r2)
   153d8:	008000b4 	movhi	r2,2
   153dc:	10bfa804 	addi	r2,r2,-352
   153e0:	10800017 	ldw	r2,0(r2)
   153e4:	10800c03 	ldbu	r2,48(r2)
   153e8:	10800054 	ori	r2,r2,1
   153ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   153f0:	008000b4 	movhi	r2,2
   153f4:	10bfa804 	addi	r2,r2,-352
   153f8:	10800017 	ldw	r2,0(r2)
   153fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   15400:	008000b4 	movhi	r2,2
   15404:	10bfa804 	addi	r2,r2,-352
   15408:	10800017 	ldw	r2,0(r2)
   1540c:	e0fffe0b 	ldhu	r3,-8(fp)
   15410:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   15414:	e13ffd17 	ldw	r4,-12(fp)
   15418:	0010c080 	call	10c08 <OS_EventTaskWait>
   1541c:	e0bff717 	ldw	r2,-36(fp)
   15420:	e0bffa15 	stw	r2,-24(fp)
   15424:	e0bffa17 	ldw	r2,-24(fp)
   15428:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1542c:	00114880 	call	11488 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15430:	0005303a 	rdctl	r2,status
   15434:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15438:	e0fffb17 	ldw	r3,-20(fp)
   1543c:	00bfff84 	movi	r2,-2
   15440:	1884703a 	and	r2,r3,r2
   15444:	1001703a 	wrctl	status,r2
  
  return context;
   15448:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1544c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15450:	008000b4 	movhi	r2,2
   15454:	10bfa804 	addi	r2,r2,-352
   15458:	10800017 	ldw	r2,0(r2)
   1545c:	10800c43 	ldbu	r2,49(r2)
   15460:	10803fcc 	andi	r2,r2,255
   15464:	10000326 	beq	r2,zero,15474 <OSSemPend+0x1c0>
   15468:	108000a0 	cmpeqi	r2,r2,2
   1546c:	1000041e 	bne	r2,zero,15480 <OSSemPend+0x1cc>
   15470:	00000706 	br	15490 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   15474:	e0bfff17 	ldw	r2,-4(fp)
   15478:	10000005 	stb	zero,0(r2)
             break;
   1547c:	00000e06 	br	154b8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	00c00384 	movi	r3,14
   15488:	10c00005 	stb	r3,0(r2)
             break;
   1548c:	00000a06 	br	154b8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   15490:	008000b4 	movhi	r2,2
   15494:	10bfa804 	addi	r2,r2,-352
   15498:	10800017 	ldw	r2,0(r2)
   1549c:	1009883a 	mov	r4,r2
   154a0:	e17ffd17 	ldw	r5,-12(fp)
   154a4:	0010e600 	call	10e60 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   154a8:	e0bfff17 	ldw	r2,-4(fp)
   154ac:	00c00284 	movi	r3,10
   154b0:	10c00005 	stb	r3,0(r2)
             break;
   154b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   154b8:	008000b4 	movhi	r2,2
   154bc:	10bfa804 	addi	r2,r2,-352
   154c0:	10800017 	ldw	r2,0(r2)
   154c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   154c8:	008000b4 	movhi	r2,2
   154cc:	10bfa804 	addi	r2,r2,-352
   154d0:	10800017 	ldw	r2,0(r2)
   154d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   154d8:	008000b4 	movhi	r2,2
   154dc:	10bfa804 	addi	r2,r2,-352
   154e0:	10800017 	ldw	r2,0(r2)
   154e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   154e8:	008000b4 	movhi	r2,2
   154ec:	10bfa804 	addi	r2,r2,-352
   154f0:	10800017 	ldw	r2,0(r2)
   154f4:	10000815 	stw	zero,32(r2)
   154f8:	e0bff717 	ldw	r2,-36(fp)
   154fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15500:	e0bffc17 	ldw	r2,-16(fp)
   15504:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   15508:	e037883a 	mov	sp,fp
   1550c:	dfc00117 	ldw	ra,4(sp)
   15510:	df000017 	ldw	fp,0(sp)
   15514:	dec00204 	addi	sp,sp,8
   15518:	f800283a 	ret

0001551c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1551c:	defff604 	addi	sp,sp,-40
   15520:	dfc00915 	stw	ra,36(sp)
   15524:	df000815 	stw	fp,32(sp)
   15528:	df000804 	addi	fp,sp,32
   1552c:	e13ffd15 	stw	r4,-12(fp)
   15530:	2805883a 	mov	r2,r5
   15534:	e1bfff15 	stw	r6,-4(fp)
   15538:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1553c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15540:	e0bfff17 	ldw	r2,-4(fp)
   15544:	1000021e 	bne	r2,zero,15550 <OSSemPendAbort+0x34>
        return (0);
   15548:	0005883a 	mov	r2,zero
   1554c:	00004906 	br	15674 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	1000051e 	bne	r2,zero,1556c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15558:	e0bfff17 	ldw	r2,-4(fp)
   1555c:	00c00104 	movi	r3,4
   15560:	10c00005 	stb	r3,0(r2)
        return (0);
   15564:	0005883a 	mov	r2,zero
   15568:	00004206 	br	15674 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1556c:	e0bffd17 	ldw	r2,-12(fp)
   15570:	10800003 	ldbu	r2,0(r2)
   15574:	10803fcc 	andi	r2,r2,255
   15578:	108000e0 	cmpeqi	r2,r2,3
   1557c:	1000051e 	bne	r2,zero,15594 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15580:	e0bfff17 	ldw	r2,-4(fp)
   15584:	00c00044 	movi	r3,1
   15588:	10c00005 	stb	r3,0(r2)
        return (0);
   1558c:	0005883a 	mov	r2,zero
   15590:	00003806 	br	15674 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15594:	0005303a 	rdctl	r2,status
   15598:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1559c:	e0fffa17 	ldw	r3,-24(fp)
   155a0:	00bfff84 	movi	r2,-2
   155a4:	1884703a 	and	r2,r3,r2
   155a8:	1001703a 	wrctl	status,r2
  
  return context;
   155ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   155b0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   155b4:	e0bffd17 	ldw	r2,-12(fp)
   155b8:	10800283 	ldbu	r2,10(r2)
   155bc:	10803fcc 	andi	r2,r2,255
   155c0:	10002526 	beq	r2,zero,15658 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   155c4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   155c8:	e0bffe03 	ldbu	r2,-8(fp)
   155cc:	10800060 	cmpeqi	r2,r2,1
   155d0:	10000e26 	beq	r2,zero,1560c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   155d4:	00000806 	br	155f8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   155d8:	e13ffd17 	ldw	r4,-12(fp)
   155dc:	000b883a 	mov	r5,zero
   155e0:	01800044 	movi	r6,1
   155e4:	01c00084 	movi	r7,2
   155e8:	0010a700 	call	10a70 <OS_EventTaskRdy>
                     nbr_tasks++;
   155ec:	e0bff803 	ldbu	r2,-32(fp)
   155f0:	10800044 	addi	r2,r2,1
   155f4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   155f8:	e0bffd17 	ldw	r2,-12(fp)
   155fc:	10800283 	ldbu	r2,10(r2)
   15600:	10803fcc 	andi	r2,r2,255
   15604:	103ff41e 	bne	r2,zero,155d8 <__alt_mem_Flash_flash_data+0xf40155d8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15608:	00000906 	br	15630 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1560c:	e13ffd17 	ldw	r4,-12(fp)
   15610:	000b883a 	mov	r5,zero
   15614:	01800044 	movi	r6,1
   15618:	01c00084 	movi	r7,2
   1561c:	0010a700 	call	10a70 <OS_EventTaskRdy>
                 nbr_tasks++;
   15620:	e0bff803 	ldbu	r2,-32(fp)
   15624:	10800044 	addi	r2,r2,1
   15628:	e0bff805 	stb	r2,-32(fp)
                 break;
   1562c:	0001883a 	nop
   15630:	e0bff917 	ldw	r2,-28(fp)
   15634:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15638:	e0bffb17 	ldw	r2,-20(fp)
   1563c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15640:	00114880 	call	11488 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	00c00384 	movi	r3,14
   1564c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15650:	e0bff803 	ldbu	r2,-32(fp)
   15654:	00000706 	br	15674 <OSSemPendAbort+0x158>
   15658:	e0bff917 	ldw	r2,-28(fp)
   1565c:	e0bffc15 	stw	r2,-16(fp)
   15660:	e0bffc17 	ldw	r2,-16(fp)
   15664:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15668:	e0bfff17 	ldw	r2,-4(fp)
   1566c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15670:	0005883a 	mov	r2,zero
}
   15674:	e037883a 	mov	sp,fp
   15678:	dfc00117 	ldw	ra,4(sp)
   1567c:	df000017 	ldw	fp,0(sp)
   15680:	dec00204 	addi	sp,sp,8
   15684:	f800283a 	ret

00015688 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   15688:	defff804 	addi	sp,sp,-32
   1568c:	dfc00715 	stw	ra,28(sp)
   15690:	df000615 	stw	fp,24(sp)
   15694:	df000604 	addi	fp,sp,24
   15698:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1569c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   156a0:	e0bfff17 	ldw	r2,-4(fp)
   156a4:	1000021e 	bne	r2,zero,156b0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   156a8:	00800104 	movi	r2,4
   156ac:	00003506 	br	15784 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	10800003 	ldbu	r2,0(r2)
   156b8:	10803fcc 	andi	r2,r2,255
   156bc:	108000e0 	cmpeqi	r2,r2,3
   156c0:	1000021e 	bne	r2,zero,156cc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   156c4:	00800044 	movi	r2,1
   156c8:	00002e06 	br	15784 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156cc:	0005303a 	rdctl	r2,status
   156d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156d4:	e0fffb17 	ldw	r3,-20(fp)
   156d8:	00bfff84 	movi	r2,-2
   156dc:	1884703a 	and	r2,r3,r2
   156e0:	1001703a 	wrctl	status,r2
  
  return context;
   156e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   156e8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   156ec:	e0bfff17 	ldw	r2,-4(fp)
   156f0:	10800283 	ldbu	r2,10(r2)
   156f4:	10803fcc 	andi	r2,r2,255
   156f8:	10000c26 	beq	r2,zero,1572c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   156fc:	e13fff17 	ldw	r4,-4(fp)
   15700:	000b883a 	mov	r5,zero
   15704:	01800044 	movi	r6,1
   15708:	000f883a 	mov	r7,zero
   1570c:	0010a700 	call	10a70 <OS_EventTaskRdy>
   15710:	e0bffa17 	ldw	r2,-24(fp)
   15714:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15718:	e0bffc17 	ldw	r2,-16(fp)
   1571c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15720:	00114880 	call	11488 <OS_Sched>
        return (OS_ERR_NONE);
   15724:	0005883a 	mov	r2,zero
   15728:	00001606 	br	15784 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1572c:	e0bfff17 	ldw	r2,-4(fp)
   15730:	1080020b 	ldhu	r2,8(r2)
   15734:	10ffffcc 	andi	r3,r2,65535
   15738:	00bfffd4 	movui	r2,65535
   1573c:	18800c26 	beq	r3,r2,15770 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   15740:	e0bfff17 	ldw	r2,-4(fp)
   15744:	1080020b 	ldhu	r2,8(r2)
   15748:	10800044 	addi	r2,r2,1
   1574c:	1007883a 	mov	r3,r2
   15750:	e0bfff17 	ldw	r2,-4(fp)
   15754:	10c0020d 	sth	r3,8(r2)
   15758:	e0bffa17 	ldw	r2,-24(fp)
   1575c:	e0bffd15 	stw	r2,-12(fp)
   15760:	e0bffd17 	ldw	r2,-12(fp)
   15764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15768:	0005883a 	mov	r2,zero
   1576c:	00000506 	br	15784 <OSSemPost+0xfc>
   15770:	e0bffa17 	ldw	r2,-24(fp)
   15774:	e0bffe15 	stw	r2,-8(fp)
   15778:	e0bffe17 	ldw	r2,-8(fp)
   1577c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   15780:	00800c84 	movi	r2,50
}
   15784:	e037883a 	mov	sp,fp
   15788:	dfc00117 	ldw	ra,4(sp)
   1578c:	df000017 	ldw	fp,0(sp)
   15790:	dec00204 	addi	sp,sp,8
   15794:	f800283a 	ret

00015798 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   15798:	defff704 	addi	sp,sp,-36
   1579c:	df000815 	stw	fp,32(sp)
   157a0:	df000804 	addi	fp,sp,32
   157a4:	e13ffe15 	stw	r4,-8(fp)
   157a8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   157ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   157b0:	e0bffe17 	ldw	r2,-8(fp)
   157b4:	1000021e 	bne	r2,zero,157c0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   157b8:	00800104 	movi	r2,4
   157bc:	00003606 	br	15898 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   157c0:	e0bfff17 	ldw	r2,-4(fp)
   157c4:	1000021e 	bne	r2,zero,157d0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   157c8:	00800244 	movi	r2,9
   157cc:	00003206 	br	15898 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   157d0:	e0bffe17 	ldw	r2,-8(fp)
   157d4:	10800003 	ldbu	r2,0(r2)
   157d8:	10803fcc 	andi	r2,r2,255
   157dc:	108000e0 	cmpeqi	r2,r2,3
   157e0:	1000021e 	bne	r2,zero,157ec <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   157e4:	00800044 	movi	r2,1
   157e8:	00002b06 	br	15898 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157ec:	0005303a 	rdctl	r2,status
   157f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157f4:	e0fffc17 	ldw	r3,-16(fp)
   157f8:	00bfff84 	movi	r2,-2
   157fc:	1884703a 	and	r2,r3,r2
   15800:	1001703a 	wrctl	status,r2
  
  return context;
   15804:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15808:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1580c:	e0bffe17 	ldw	r2,-8(fp)
   15810:	10c00283 	ldbu	r3,10(r2)
   15814:	e0bfff17 	ldw	r2,-4(fp)
   15818:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1581c:	e0bffe17 	ldw	r2,-8(fp)
   15820:	108002c4 	addi	r2,r2,11
   15824:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   15828:	e0bfff17 	ldw	r2,-4(fp)
   1582c:	10800084 	addi	r2,r2,2
   15830:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15834:	e03ffa05 	stb	zero,-24(fp)
   15838:	00000b06 	br	15868 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1583c:	e0bff917 	ldw	r2,-28(fp)
   15840:	10c00044 	addi	r3,r2,1
   15844:	e0fff915 	stw	r3,-28(fp)
   15848:	e0fff817 	ldw	r3,-32(fp)
   1584c:	19000044 	addi	r4,r3,1
   15850:	e13ff815 	stw	r4,-32(fp)
   15854:	18c00003 	ldbu	r3,0(r3)
   15858:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1585c:	e0bffa03 	ldbu	r2,-24(fp)
   15860:	10800044 	addi	r2,r2,1
   15864:	e0bffa05 	stb	r2,-24(fp)
   15868:	e0bffa03 	ldbu	r2,-24(fp)
   1586c:	108000f0 	cmpltui	r2,r2,3
   15870:	103ff21e 	bne	r2,zero,1583c <__alt_mem_Flash_flash_data+0xf401583c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15874:	e0bffe17 	ldw	r2,-8(fp)
   15878:	10c0020b 	ldhu	r3,8(r2)
   1587c:	e0bfff17 	ldw	r2,-4(fp)
   15880:	10c0000d 	sth	r3,0(r2)
   15884:	e0bffb17 	ldw	r2,-20(fp)
   15888:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1588c:	e0bffd17 	ldw	r2,-12(fp)
   15890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15894:	0005883a 	mov	r2,zero
}
   15898:	e037883a 	mov	sp,fp
   1589c:	df000017 	ldw	fp,0(sp)
   158a0:	dec00104 	addi	sp,sp,4
   158a4:	f800283a 	ret

000158a8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   158a8:	defff904 	addi	sp,sp,-28
   158ac:	df000615 	stw	fp,24(sp)
   158b0:	df000604 	addi	fp,sp,24
   158b4:	e13ffd15 	stw	r4,-12(fp)
   158b8:	2805883a 	mov	r2,r5
   158bc:	e1bfff15 	stw	r6,-4(fp)
   158c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   158c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   158c8:	e0bfff17 	ldw	r2,-4(fp)
   158cc:	1000011e 	bne	r2,zero,158d4 <OSSemSet+0x2c>
        return;
   158d0:	00003006 	br	15994 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   158d4:	e0bffd17 	ldw	r2,-12(fp)
   158d8:	1000041e 	bne	r2,zero,158ec <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   158dc:	e0bfff17 	ldw	r2,-4(fp)
   158e0:	00c00104 	movi	r3,4
   158e4:	10c00005 	stb	r3,0(r2)
        return;
   158e8:	00002a06 	br	15994 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   158ec:	e0bffd17 	ldw	r2,-12(fp)
   158f0:	10800003 	ldbu	r2,0(r2)
   158f4:	10803fcc 	andi	r2,r2,255
   158f8:	108000e0 	cmpeqi	r2,r2,3
   158fc:	1000041e 	bne	r2,zero,15910 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   15900:	e0bfff17 	ldw	r2,-4(fp)
   15904:	00c00044 	movi	r3,1
   15908:	10c00005 	stb	r3,0(r2)
        return;
   1590c:	00002106 	br	15994 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15910:	0005303a 	rdctl	r2,status
   15914:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15918:	e0fffb17 	ldw	r3,-20(fp)
   1591c:	00bfff84 	movi	r2,-2
   15920:	1884703a 	and	r2,r3,r2
   15924:	1001703a 	wrctl	status,r2
  
  return context;
   15928:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1592c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   15930:	e0bfff17 	ldw	r2,-4(fp)
   15934:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	1080020b 	ldhu	r2,8(r2)
   15940:	10bfffcc 	andi	r2,r2,65535
   15944:	10000426 	beq	r2,zero,15958 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   15948:	e0bffd17 	ldw	r2,-12(fp)
   1594c:	e0fffe0b 	ldhu	r3,-8(fp)
   15950:	10c0020d 	sth	r3,8(r2)
   15954:	00000b06 	br	15984 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   15958:	e0bffd17 	ldw	r2,-12(fp)
   1595c:	10800283 	ldbu	r2,10(r2)
   15960:	10803fcc 	andi	r2,r2,255
   15964:	1000041e 	bne	r2,zero,15978 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15968:	e0bffd17 	ldw	r2,-12(fp)
   1596c:	e0fffe0b 	ldhu	r3,-8(fp)
   15970:	10c0020d 	sth	r3,8(r2)
   15974:	00000306 	br	15984 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15978:	e0bfff17 	ldw	r2,-4(fp)
   1597c:	00c01244 	movi	r3,73
   15980:	10c00005 	stb	r3,0(r2)
   15984:	e0bffa17 	ldw	r2,-24(fp)
   15988:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1598c:	e0bffc17 	ldw	r2,-16(fp)
   15990:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   15994:	e037883a 	mov	sp,fp
   15998:	df000017 	ldw	fp,0(sp)
   1599c:	dec00104 	addi	sp,sp,4
   159a0:	f800283a 	ret

000159a4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   159a4:	defff104 	addi	sp,sp,-60
   159a8:	dfc00e15 	stw	ra,56(sp)
   159ac:	df000d15 	stw	fp,52(sp)
   159b0:	df000d04 	addi	fp,sp,52
   159b4:	2007883a 	mov	r3,r4
   159b8:	2805883a 	mov	r2,r5
   159bc:	e0fffe05 	stb	r3,-8(fp)
   159c0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   159c4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   159c8:	e0bffe03 	ldbu	r2,-8(fp)
   159cc:	10800530 	cmpltui	r2,r2,20
   159d0:	1000051e 	bne	r2,zero,159e8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   159d4:	e0bffe03 	ldbu	r2,-8(fp)
   159d8:	10803fe0 	cmpeqi	r2,r2,255
   159dc:	1000021e 	bne	r2,zero,159e8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   159e0:	00800a84 	movi	r2,42
   159e4:	00013a06 	br	15ed0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   159e8:	e0bfff03 	ldbu	r2,-4(fp)
   159ec:	10800530 	cmpltui	r2,r2,20
   159f0:	1000021e 	bne	r2,zero,159fc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   159f4:	00800a84 	movi	r2,42
   159f8:	00013506 	br	15ed0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159fc:	0005303a 	rdctl	r2,status
   15a00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a04:	e0fff917 	ldw	r3,-28(fp)
   15a08:	00bfff84 	movi	r2,-2
   15a0c:	1884703a 	and	r2,r3,r2
   15a10:	1001703a 	wrctl	status,r2
  
  return context;
   15a14:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15a18:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   15a1c:	e0ffff03 	ldbu	r3,-4(fp)
   15a20:	008000b4 	movhi	r2,2
   15a24:	108c3004 	addi	r2,r2,12480
   15a28:	18c7883a 	add	r3,r3,r3
   15a2c:	18c7883a 	add	r3,r3,r3
   15a30:	10c5883a 	add	r2,r2,r3
   15a34:	10800017 	ldw	r2,0(r2)
   15a38:	10000626 	beq	r2,zero,15a54 <OSTaskChangePrio+0xb0>
   15a3c:	e0bff517 	ldw	r2,-44(fp)
   15a40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a44:	e0bffa17 	ldw	r2,-24(fp)
   15a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   15a4c:	00800a04 	movi	r2,40
   15a50:	00011f06 	br	15ed0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   15a54:	e0bffe03 	ldbu	r2,-8(fp)
   15a58:	10803fd8 	cmpnei	r2,r2,255
   15a5c:	1000051e 	bne	r2,zero,15a74 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   15a60:	008000b4 	movhi	r2,2
   15a64:	10bfa804 	addi	r2,r2,-352
   15a68:	10800017 	ldw	r2,0(r2)
   15a6c:	10800c83 	ldbu	r2,50(r2)
   15a70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   15a74:	e0fffe03 	ldbu	r3,-8(fp)
   15a78:	008000b4 	movhi	r2,2
   15a7c:	108c3004 	addi	r2,r2,12480
   15a80:	18c7883a 	add	r3,r3,r3
   15a84:	18c7883a 	add	r3,r3,r3
   15a88:	10c5883a 	add	r2,r2,r3
   15a8c:	10800017 	ldw	r2,0(r2)
   15a90:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   15a94:	e0bff617 	ldw	r2,-40(fp)
   15a98:	1000061e 	bne	r2,zero,15ab4 <OSTaskChangePrio+0x110>
   15a9c:	e0bff517 	ldw	r2,-44(fp)
   15aa0:	e0bffb15 	stw	r2,-20(fp)
   15aa4:	e0bffb17 	ldw	r2,-20(fp)
   15aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   15aac:	00800a44 	movi	r2,41
   15ab0:	00010706 	br	15ed0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   15ab4:	e0bff617 	ldw	r2,-40(fp)
   15ab8:	10800058 	cmpnei	r2,r2,1
   15abc:	1000061e 	bne	r2,zero,15ad8 <OSTaskChangePrio+0x134>
   15ac0:	e0bff517 	ldw	r2,-44(fp)
   15ac4:	e0bffc15 	stw	r2,-16(fp)
   15ac8:	e0bffc17 	ldw	r2,-16(fp)
   15acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   15ad0:	008010c4 	movi	r2,67
   15ad4:	0000fe06 	br	15ed0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   15ad8:	e0bfff03 	ldbu	r2,-4(fp)
   15adc:	1004d0fa 	srli	r2,r2,3
   15ae0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   15ae4:	e0bfff03 	ldbu	r2,-4(fp)
   15ae8:	108001cc 	andi	r2,r2,7
   15aec:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   15af0:	e0bff703 	ldbu	r2,-36(fp)
   15af4:	00c00044 	movi	r3,1
   15af8:	1884983a 	sll	r2,r3,r2
   15afc:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   15b00:	e0bff743 	ldbu	r2,-35(fp)
   15b04:	00c00044 	movi	r3,1
   15b08:	1884983a 	sll	r2,r3,r2
   15b0c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   15b10:	e0fffe03 	ldbu	r3,-8(fp)
   15b14:	008000b4 	movhi	r2,2
   15b18:	108c3004 	addi	r2,r2,12480
   15b1c:	18c7883a 	add	r3,r3,r3
   15b20:	18c7883a 	add	r3,r3,r3
   15b24:	10c5883a 	add	r2,r2,r3
   15b28:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   15b2c:	e0ffff03 	ldbu	r3,-4(fp)
   15b30:	008000b4 	movhi	r2,2
   15b34:	108c3004 	addi	r2,r2,12480
   15b38:	18c7883a 	add	r3,r3,r3
   15b3c:	18c7883a 	add	r3,r3,r3
   15b40:	10c5883a 	add	r2,r2,r3
   15b44:	e0fff617 	ldw	r3,-40(fp)
   15b48:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   15b4c:	e0bff617 	ldw	r2,-40(fp)
   15b50:	10800d03 	ldbu	r2,52(r2)
   15b54:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   15b58:	e0bff617 	ldw	r2,-40(fp)
   15b5c:	10800d83 	ldbu	r2,54(r2)
   15b60:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   15b64:	e0bff617 	ldw	r2,-40(fp)
   15b68:	10800d43 	ldbu	r2,53(r2)
   15b6c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   15b70:	e0fff803 	ldbu	r3,-32(fp)
   15b74:	008000b4 	movhi	r2,2
   15b78:	10bfa544 	addi	r2,r2,-363
   15b7c:	10c5883a 	add	r2,r2,r3
   15b80:	10c00003 	ldbu	r3,0(r2)
   15b84:	e0bff883 	ldbu	r2,-30(fp)
   15b88:	1884703a 	and	r2,r3,r2
   15b8c:	10803fcc 	andi	r2,r2,255
   15b90:	10003726 	beq	r2,zero,15c70 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   15b94:	e0fff803 	ldbu	r3,-32(fp)
   15b98:	e13ff803 	ldbu	r4,-32(fp)
   15b9c:	008000b4 	movhi	r2,2
   15ba0:	10bfa544 	addi	r2,r2,-363
   15ba4:	1105883a 	add	r2,r2,r4
   15ba8:	10800003 	ldbu	r2,0(r2)
   15bac:	1009883a 	mov	r4,r2
   15bb0:	e0bff883 	ldbu	r2,-30(fp)
   15bb4:	0084303a 	nor	r2,zero,r2
   15bb8:	2084703a 	and	r2,r4,r2
   15bbc:	1009883a 	mov	r4,r2
   15bc0:	008000b4 	movhi	r2,2
   15bc4:	10bfa544 	addi	r2,r2,-363
   15bc8:	10c5883a 	add	r2,r2,r3
   15bcc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   15bd0:	e0fff803 	ldbu	r3,-32(fp)
   15bd4:	008000b4 	movhi	r2,2
   15bd8:	10bfa544 	addi	r2,r2,-363
   15bdc:	10c5883a 	add	r2,r2,r3
   15be0:	10800003 	ldbu	r2,0(r2)
   15be4:	10803fcc 	andi	r2,r2,255
   15be8:	10000b1e 	bne	r2,zero,15c18 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   15bec:	e0bff843 	ldbu	r2,-31(fp)
   15bf0:	0084303a 	nor	r2,zero,r2
   15bf4:	1007883a 	mov	r3,r2
   15bf8:	008000b4 	movhi	r2,2
   15bfc:	10bfa504 	addi	r2,r2,-364
   15c00:	10800003 	ldbu	r2,0(r2)
   15c04:	1884703a 	and	r2,r3,r2
   15c08:	1007883a 	mov	r3,r2
   15c0c:	008000b4 	movhi	r2,2
   15c10:	10bfa504 	addi	r2,r2,-364
   15c14:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   15c18:	008000b4 	movhi	r2,2
   15c1c:	10bfa504 	addi	r2,r2,-364
   15c20:	10c00003 	ldbu	r3,0(r2)
   15c24:	e0bff783 	ldbu	r2,-34(fp)
   15c28:	1884b03a 	or	r2,r3,r2
   15c2c:	1007883a 	mov	r3,r2
   15c30:	008000b4 	movhi	r2,2
   15c34:	10bfa504 	addi	r2,r2,-364
   15c38:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   15c3c:	e0fff703 	ldbu	r3,-36(fp)
   15c40:	e13ff703 	ldbu	r4,-36(fp)
   15c44:	008000b4 	movhi	r2,2
   15c48:	10bfa544 	addi	r2,r2,-363
   15c4c:	1105883a 	add	r2,r2,r4
   15c50:	11000003 	ldbu	r4,0(r2)
   15c54:	e0bff7c3 	ldbu	r2,-33(fp)
   15c58:	2084b03a 	or	r2,r4,r2
   15c5c:	1009883a 	mov	r4,r2
   15c60:	008000b4 	movhi	r2,2
   15c64:	10bfa544 	addi	r2,r2,-363
   15c68:	10c5883a 	add	r2,r2,r3
   15c6c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   15c70:	e0bff617 	ldw	r2,-40(fp)
   15c74:	10800717 	ldw	r2,28(r2)
   15c78:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   15c7c:	e0bff317 	ldw	r2,-52(fp)
   15c80:	10003326 	beq	r2,zero,15d50 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   15c84:	e0bff803 	ldbu	r2,-32(fp)
   15c88:	e0fff803 	ldbu	r3,-32(fp)
   15c8c:	e13ff317 	ldw	r4,-52(fp)
   15c90:	20c7883a 	add	r3,r4,r3
   15c94:	18c00204 	addi	r3,r3,8
   15c98:	18c000c3 	ldbu	r3,3(r3)
   15c9c:	1809883a 	mov	r4,r3
   15ca0:	e0fff883 	ldbu	r3,-30(fp)
   15ca4:	00c6303a 	nor	r3,zero,r3
   15ca8:	20c6703a 	and	r3,r4,r3
   15cac:	1809883a 	mov	r4,r3
   15cb0:	e0fff317 	ldw	r3,-52(fp)
   15cb4:	1885883a 	add	r2,r3,r2
   15cb8:	10800204 	addi	r2,r2,8
   15cbc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   15cc0:	e0bff803 	ldbu	r2,-32(fp)
   15cc4:	e0fff317 	ldw	r3,-52(fp)
   15cc8:	1885883a 	add	r2,r3,r2
   15ccc:	10800204 	addi	r2,r2,8
   15cd0:	108000c3 	ldbu	r2,3(r2)
   15cd4:	10803fcc 	andi	r2,r2,255
   15cd8:	1000091e 	bne	r2,zero,15d00 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   15cdc:	e0bff317 	ldw	r2,-52(fp)
   15ce0:	10800283 	ldbu	r2,10(r2)
   15ce4:	1007883a 	mov	r3,r2
   15ce8:	e0bff843 	ldbu	r2,-31(fp)
   15cec:	0084303a 	nor	r2,zero,r2
   15cf0:	1884703a 	and	r2,r3,r2
   15cf4:	1007883a 	mov	r3,r2
   15cf8:	e0bff317 	ldw	r2,-52(fp)
   15cfc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   15d00:	e0bff317 	ldw	r2,-52(fp)
   15d04:	10c00283 	ldbu	r3,10(r2)
   15d08:	e0bff783 	ldbu	r2,-34(fp)
   15d0c:	1884b03a 	or	r2,r3,r2
   15d10:	1007883a 	mov	r3,r2
   15d14:	e0bff317 	ldw	r2,-52(fp)
   15d18:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   15d1c:	e0bff703 	ldbu	r2,-36(fp)
   15d20:	e0fff703 	ldbu	r3,-36(fp)
   15d24:	e13ff317 	ldw	r4,-52(fp)
   15d28:	20c7883a 	add	r3,r4,r3
   15d2c:	18c00204 	addi	r3,r3,8
   15d30:	190000c3 	ldbu	r4,3(r3)
   15d34:	e0fff7c3 	ldbu	r3,-33(fp)
   15d38:	20c6b03a 	or	r3,r4,r3
   15d3c:	1809883a 	mov	r4,r3
   15d40:	e0fff317 	ldw	r3,-52(fp)
   15d44:	1885883a 	add	r2,r3,r2
   15d48:	10800204 	addi	r2,r2,8
   15d4c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   15d50:	e0bff617 	ldw	r2,-40(fp)
   15d54:	10800817 	ldw	r2,32(r2)
   15d58:	10004226 	beq	r2,zero,15e64 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   15d5c:	e0bff617 	ldw	r2,-40(fp)
   15d60:	10800817 	ldw	r2,32(r2)
   15d64:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   15d68:	e0bff417 	ldw	r2,-48(fp)
   15d6c:	10800017 	ldw	r2,0(r2)
   15d70:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   15d74:	00003906 	br	15e5c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   15d78:	e0bff803 	ldbu	r2,-32(fp)
   15d7c:	e0fff803 	ldbu	r3,-32(fp)
   15d80:	e13ff317 	ldw	r4,-52(fp)
   15d84:	20c7883a 	add	r3,r4,r3
   15d88:	18c00204 	addi	r3,r3,8
   15d8c:	18c000c3 	ldbu	r3,3(r3)
   15d90:	1809883a 	mov	r4,r3
   15d94:	e0fff883 	ldbu	r3,-30(fp)
   15d98:	00c6303a 	nor	r3,zero,r3
   15d9c:	20c6703a 	and	r3,r4,r3
   15da0:	1809883a 	mov	r4,r3
   15da4:	e0fff317 	ldw	r3,-52(fp)
   15da8:	1885883a 	add	r2,r3,r2
   15dac:	10800204 	addi	r2,r2,8
   15db0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   15db4:	e0bff803 	ldbu	r2,-32(fp)
   15db8:	e0fff317 	ldw	r3,-52(fp)
   15dbc:	1885883a 	add	r2,r3,r2
   15dc0:	10800204 	addi	r2,r2,8
   15dc4:	108000c3 	ldbu	r2,3(r2)
   15dc8:	10803fcc 	andi	r2,r2,255
   15dcc:	1000091e 	bne	r2,zero,15df4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   15dd0:	e0bff317 	ldw	r2,-52(fp)
   15dd4:	10800283 	ldbu	r2,10(r2)
   15dd8:	1007883a 	mov	r3,r2
   15ddc:	e0bff843 	ldbu	r2,-31(fp)
   15de0:	0084303a 	nor	r2,zero,r2
   15de4:	1884703a 	and	r2,r3,r2
   15de8:	1007883a 	mov	r3,r2
   15dec:	e0bff317 	ldw	r2,-52(fp)
   15df0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   15df4:	e0bff317 	ldw	r2,-52(fp)
   15df8:	10c00283 	ldbu	r3,10(r2)
   15dfc:	e0bff783 	ldbu	r2,-34(fp)
   15e00:	1884b03a 	or	r2,r3,r2
   15e04:	1007883a 	mov	r3,r2
   15e08:	e0bff317 	ldw	r2,-52(fp)
   15e0c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   15e10:	e0bff703 	ldbu	r2,-36(fp)
   15e14:	e0fff703 	ldbu	r3,-36(fp)
   15e18:	e13ff317 	ldw	r4,-52(fp)
   15e1c:	20c7883a 	add	r3,r4,r3
   15e20:	18c00204 	addi	r3,r3,8
   15e24:	190000c3 	ldbu	r4,3(r3)
   15e28:	e0fff7c3 	ldbu	r3,-33(fp)
   15e2c:	20c6b03a 	or	r3,r4,r3
   15e30:	1809883a 	mov	r4,r3
   15e34:	e0fff317 	ldw	r3,-52(fp)
   15e38:	1885883a 	add	r2,r3,r2
   15e3c:	10800204 	addi	r2,r2,8
   15e40:	110000c5 	stb	r4,3(r2)
            pevents++;
   15e44:	e0bff417 	ldw	r2,-48(fp)
   15e48:	10800104 	addi	r2,r2,4
   15e4c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   15e50:	e0bff417 	ldw	r2,-48(fp)
   15e54:	10800017 	ldw	r2,0(r2)
   15e58:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   15e5c:	e0bff317 	ldw	r2,-52(fp)
   15e60:	103fc51e 	bne	r2,zero,15d78 <__alt_mem_Flash_flash_data+0xf4015d78>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   15e64:	e0bff617 	ldw	r2,-40(fp)
   15e68:	e0ffff03 	ldbu	r3,-4(fp)
   15e6c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   15e70:	e0bff617 	ldw	r2,-40(fp)
   15e74:	e0fff703 	ldbu	r3,-36(fp)
   15e78:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   15e7c:	e0bff617 	ldw	r2,-40(fp)
   15e80:	e0fff743 	ldbu	r3,-35(fp)
   15e84:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   15e88:	e0bff617 	ldw	r2,-40(fp)
   15e8c:	e0fff783 	ldbu	r3,-34(fp)
   15e90:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   15e94:	e0bff617 	ldw	r2,-40(fp)
   15e98:	e0fff7c3 	ldbu	r3,-33(fp)
   15e9c:	10c00d45 	stb	r3,53(r2)
   15ea0:	e0bff517 	ldw	r2,-44(fp)
   15ea4:	e0bffd15 	stw	r2,-12(fp)
   15ea8:	e0bffd17 	ldw	r2,-12(fp)
   15eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   15eb0:	008000b4 	movhi	r2,2
   15eb4:	10bf9944 	addi	r2,r2,-411
   15eb8:	10800003 	ldbu	r2,0(r2)
   15ebc:	10803fcc 	andi	r2,r2,255
   15ec0:	10800058 	cmpnei	r2,r2,1
   15ec4:	1000011e 	bne	r2,zero,15ecc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   15ec8:	00114880 	call	11488 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15ecc:	0005883a 	mov	r2,zero
}
   15ed0:	e037883a 	mov	sp,fp
   15ed4:	dfc00117 	ldw	ra,4(sp)
   15ed8:	df000017 	ldw	fp,0(sp)
   15edc:	dec00204 	addi	sp,sp,8
   15ee0:	f800283a 	ret

00015ee4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   15ee4:	deffee04 	addi	sp,sp,-72
   15ee8:	dfc01115 	stw	ra,68(sp)
   15eec:	df001015 	stw	fp,64(sp)
   15ef0:	df001004 	addi	fp,sp,64
   15ef4:	e13ffc15 	stw	r4,-16(fp)
   15ef8:	e17ffd15 	stw	r5,-12(fp)
   15efc:	e1bffe15 	stw	r6,-8(fp)
   15f00:	3805883a 	mov	r2,r7
   15f04:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   15f08:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   15f0c:	e0bfff03 	ldbu	r2,-4(fp)
   15f10:	10800570 	cmpltui	r2,r2,21
   15f14:	1000021e 	bne	r2,zero,15f20 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   15f18:	00800a84 	movi	r2,42
   15f1c:	00005b06 	br	1608c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f20:	0005303a 	rdctl	r2,status
   15f24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f28:	e0fff617 	ldw	r3,-40(fp)
   15f2c:	00bfff84 	movi	r2,-2
   15f30:	1884703a 	and	r2,r3,r2
   15f34:	1001703a 	wrctl	status,r2
  
  return context;
   15f38:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15f3c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   15f40:	008000b4 	movhi	r2,2
   15f44:	10bfa704 	addi	r2,r2,-356
   15f48:	10800003 	ldbu	r2,0(r2)
   15f4c:	10803fcc 	andi	r2,r2,255
   15f50:	10000626 	beq	r2,zero,15f6c <OSTaskCreate+0x88>
   15f54:	e0bff317 	ldw	r2,-52(fp)
   15f58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f5c:	e0bff717 	ldw	r2,-36(fp)
   15f60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   15f64:	00800f04 	movi	r2,60
   15f68:	00004806 	br	1608c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   15f6c:	e0ffff03 	ldbu	r3,-4(fp)
   15f70:	008000b4 	movhi	r2,2
   15f74:	108c3004 	addi	r2,r2,12480
   15f78:	18c7883a 	add	r3,r3,r3
   15f7c:	18c7883a 	add	r3,r3,r3
   15f80:	10c5883a 	add	r2,r2,r3
   15f84:	10800017 	ldw	r2,0(r2)
   15f88:	10003b1e 	bne	r2,zero,16078 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   15f8c:	e0ffff03 	ldbu	r3,-4(fp)
   15f90:	008000b4 	movhi	r2,2
   15f94:	108c3004 	addi	r2,r2,12480
   15f98:	18c7883a 	add	r3,r3,r3
   15f9c:	18c7883a 	add	r3,r3,r3
   15fa0:	10c5883a 	add	r2,r2,r3
   15fa4:	00c00044 	movi	r3,1
   15fa8:	10c00015 	stw	r3,0(r2)
   15fac:	e0bff317 	ldw	r2,-52(fp)
   15fb0:	e0bff815 	stw	r2,-32(fp)
   15fb4:	e0bff817 	ldw	r2,-32(fp)
   15fb8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   15fbc:	e13ffc17 	ldw	r4,-16(fp)
   15fc0:	e17ffd17 	ldw	r5,-12(fp)
   15fc4:	e1bffe17 	ldw	r6,-8(fp)
   15fc8:	000f883a 	mov	r7,zero
   15fcc:	001ad440 	call	1ad44 <OSTaskStkInit>
   15fd0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   15fd4:	e0bfff03 	ldbu	r2,-4(fp)
   15fd8:	d8000015 	stw	zero,0(sp)
   15fdc:	d8000115 	stw	zero,4(sp)
   15fe0:	d8000215 	stw	zero,8(sp)
   15fe4:	1009883a 	mov	r4,r2
   15fe8:	e17ff417 	ldw	r5,-48(fp)
   15fec:	000d883a 	mov	r6,zero
   15ff0:	000f883a 	mov	r7,zero
   15ff4:	001188c0 	call	1188c <OS_TCBInit>
   15ff8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   15ffc:	e0bff503 	ldbu	r2,-44(fp)
   16000:	1000081e 	bne	r2,zero,16024 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16004:	008000b4 	movhi	r2,2
   16008:	10bf9944 	addi	r2,r2,-411
   1600c:	10800003 	ldbu	r2,0(r2)
   16010:	10803fcc 	andi	r2,r2,255
   16014:	10800058 	cmpnei	r2,r2,1
   16018:	1000151e 	bne	r2,zero,16070 <OSTaskCreate+0x18c>
                OS_Sched();
   1601c:	00114880 	call	11488 <OS_Sched>
   16020:	00001306 	br	16070 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16024:	0005303a 	rdctl	r2,status
   16028:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1602c:	e0fff917 	ldw	r3,-28(fp)
   16030:	00bfff84 	movi	r2,-2
   16034:	1884703a 	and	r2,r3,r2
   16038:	1001703a 	wrctl	status,r2
  
  return context;
   1603c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16040:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   16044:	e0ffff03 	ldbu	r3,-4(fp)
   16048:	008000b4 	movhi	r2,2
   1604c:	108c3004 	addi	r2,r2,12480
   16050:	18c7883a 	add	r3,r3,r3
   16054:	18c7883a 	add	r3,r3,r3
   16058:	10c5883a 	add	r2,r2,r3
   1605c:	10000015 	stw	zero,0(r2)
   16060:	e0bff317 	ldw	r2,-52(fp)
   16064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16068:	e0bffa17 	ldw	r2,-24(fp)
   1606c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16070:	e0bff503 	ldbu	r2,-44(fp)
   16074:	00000506 	br	1608c <OSTaskCreate+0x1a8>
   16078:	e0bff317 	ldw	r2,-52(fp)
   1607c:	e0bffb15 	stw	r2,-20(fp)
   16080:	e0bffb17 	ldw	r2,-20(fp)
   16084:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16088:	00800a04 	movi	r2,40
}
   1608c:	e037883a 	mov	sp,fp
   16090:	dfc00117 	ldw	ra,4(sp)
   16094:	df000017 	ldw	fp,0(sp)
   16098:	dec00204 	addi	sp,sp,8
   1609c:	f800283a 	ret

000160a0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   160a0:	deffec04 	addi	sp,sp,-80
   160a4:	dfc01315 	stw	ra,76(sp)
   160a8:	df001215 	stw	fp,72(sp)
   160ac:	df001204 	addi	fp,sp,72
   160b0:	e13ffa15 	stw	r4,-24(fp)
   160b4:	e17ffb15 	stw	r5,-20(fp)
   160b8:	e1bffc15 	stw	r6,-16(fp)
   160bc:	3809883a 	mov	r4,r7
   160c0:	e0c00217 	ldw	r3,8(fp)
   160c4:	e0800617 	ldw	r2,24(fp)
   160c8:	e13ffd05 	stb	r4,-12(fp)
   160cc:	e0fffe0d 	sth	r3,-8(fp)
   160d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   160d4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   160d8:	e0bffd03 	ldbu	r2,-12(fp)
   160dc:	10800570 	cmpltui	r2,r2,21
   160e0:	1000021e 	bne	r2,zero,160ec <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   160e4:	00800a84 	movi	r2,42
   160e8:	00006306 	br	16278 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160ec:	0005303a 	rdctl	r2,status
   160f0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160f4:	e0fff417 	ldw	r3,-48(fp)
   160f8:	00bfff84 	movi	r2,-2
   160fc:	1884703a 	and	r2,r3,r2
   16100:	1001703a 	wrctl	status,r2
  
  return context;
   16104:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16108:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1610c:	008000b4 	movhi	r2,2
   16110:	10bfa704 	addi	r2,r2,-356
   16114:	10800003 	ldbu	r2,0(r2)
   16118:	10803fcc 	andi	r2,r2,255
   1611c:	10000626 	beq	r2,zero,16138 <OSTaskCreateExt+0x98>
   16120:	e0bff117 	ldw	r2,-60(fp)
   16124:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16128:	e0bff517 	ldw	r2,-44(fp)
   1612c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16130:	00800f04 	movi	r2,60
   16134:	00005006 	br	16278 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16138:	e0fffd03 	ldbu	r3,-12(fp)
   1613c:	008000b4 	movhi	r2,2
   16140:	108c3004 	addi	r2,r2,12480
   16144:	18c7883a 	add	r3,r3,r3
   16148:	18c7883a 	add	r3,r3,r3
   1614c:	10c5883a 	add	r2,r2,r3
   16150:	10800017 	ldw	r2,0(r2)
   16154:	1000431e 	bne	r2,zero,16264 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16158:	e0fffd03 	ldbu	r3,-12(fp)
   1615c:	008000b4 	movhi	r2,2
   16160:	108c3004 	addi	r2,r2,12480
   16164:	18c7883a 	add	r3,r3,r3
   16168:	18c7883a 	add	r3,r3,r3
   1616c:	10c5883a 	add	r2,r2,r3
   16170:	00c00044 	movi	r3,1
   16174:	10c00015 	stw	r3,0(r2)
   16178:	e0bff117 	ldw	r2,-60(fp)
   1617c:	e0bff615 	stw	r2,-40(fp)
   16180:	e0bff617 	ldw	r2,-40(fp)
   16184:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   16188:	e0bfff0b 	ldhu	r2,-4(fp)
   1618c:	e1000317 	ldw	r4,12(fp)
   16190:	e1400417 	ldw	r5,16(fp)
   16194:	100d883a 	mov	r6,r2
   16198:	001722c0 	call	1722c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1619c:	e0bfff0b 	ldhu	r2,-4(fp)
   161a0:	e13ffa17 	ldw	r4,-24(fp)
   161a4:	e17ffb17 	ldw	r5,-20(fp)
   161a8:	e1bffc17 	ldw	r6,-16(fp)
   161ac:	100f883a 	mov	r7,r2
   161b0:	001ad440 	call	1ad44 <OSTaskStkInit>
   161b4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   161b8:	e13ffd03 	ldbu	r4,-12(fp)
   161bc:	e1fffe0b 	ldhu	r7,-8(fp)
   161c0:	e0bfff0b 	ldhu	r2,-4(fp)
   161c4:	e0c00417 	ldw	r3,16(fp)
   161c8:	d8c00015 	stw	r3,0(sp)
   161cc:	e0c00517 	ldw	r3,20(fp)
   161d0:	d8c00115 	stw	r3,4(sp)
   161d4:	d8800215 	stw	r2,8(sp)
   161d8:	e17ff217 	ldw	r5,-56(fp)
   161dc:	e1800317 	ldw	r6,12(fp)
   161e0:	001188c0 	call	1188c <OS_TCBInit>
   161e4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   161e8:	e0bff303 	ldbu	r2,-52(fp)
   161ec:	1000081e 	bne	r2,zero,16210 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   161f0:	008000b4 	movhi	r2,2
   161f4:	10bf9944 	addi	r2,r2,-411
   161f8:	10800003 	ldbu	r2,0(r2)
   161fc:	10803fcc 	andi	r2,r2,255
   16200:	10800058 	cmpnei	r2,r2,1
   16204:	1000151e 	bne	r2,zero,1625c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   16208:	00114880 	call	11488 <OS_Sched>
   1620c:	00001306 	br	1625c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16210:	0005303a 	rdctl	r2,status
   16214:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16218:	e0fff717 	ldw	r3,-36(fp)
   1621c:	00bfff84 	movi	r2,-2
   16220:	1884703a 	and	r2,r3,r2
   16224:	1001703a 	wrctl	status,r2
  
  return context;
   16228:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1622c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   16230:	e0fffd03 	ldbu	r3,-12(fp)
   16234:	008000b4 	movhi	r2,2
   16238:	108c3004 	addi	r2,r2,12480
   1623c:	18c7883a 	add	r3,r3,r3
   16240:	18c7883a 	add	r3,r3,r3
   16244:	10c5883a 	add	r2,r2,r3
   16248:	10000015 	stw	zero,0(r2)
   1624c:	e0bff117 	ldw	r2,-60(fp)
   16250:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16254:	e0bff817 	ldw	r2,-32(fp)
   16258:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1625c:	e0bff303 	ldbu	r2,-52(fp)
   16260:	00000506 	br	16278 <OSTaskCreateExt+0x1d8>
   16264:	e0bff117 	ldw	r2,-60(fp)
   16268:	e0bff915 	stw	r2,-28(fp)
   1626c:	e0bff917 	ldw	r2,-28(fp)
   16270:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16274:	00800a04 	movi	r2,40
}
   16278:	e037883a 	mov	sp,fp
   1627c:	dfc00117 	ldw	ra,4(sp)
   16280:	df000017 	ldw	fp,0(sp)
   16284:	dec00204 	addi	sp,sp,8
   16288:	f800283a 	ret

0001628c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1628c:	defff404 	addi	sp,sp,-48
   16290:	dfc00b15 	stw	ra,44(sp)
   16294:	df000a15 	stw	fp,40(sp)
   16298:	df000a04 	addi	fp,sp,40
   1629c:	2005883a 	mov	r2,r4
   162a0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   162a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   162a8:	008000b4 	movhi	r2,2
   162ac:	10bfa704 	addi	r2,r2,-356
   162b0:	10800003 	ldbu	r2,0(r2)
   162b4:	10803fcc 	andi	r2,r2,255
   162b8:	10000226 	beq	r2,zero,162c4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   162bc:	00801004 	movi	r2,64
   162c0:	0000e506 	br	16658 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   162c4:	e0bfff03 	ldbu	r2,-4(fp)
   162c8:	10800518 	cmpnei	r2,r2,20
   162cc:	1000021e 	bne	r2,zero,162d8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   162d0:	00800f84 	movi	r2,62
   162d4:	0000e006 	br	16658 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   162d8:	e0bfff03 	ldbu	r2,-4(fp)
   162dc:	10800530 	cmpltui	r2,r2,20
   162e0:	1000051e 	bne	r2,zero,162f8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   162e4:	e0bfff03 	ldbu	r2,-4(fp)
   162e8:	10803fe0 	cmpeqi	r2,r2,255
   162ec:	1000021e 	bne	r2,zero,162f8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   162f0:	00800a84 	movi	r2,42
   162f4:	0000d806 	br	16658 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162f8:	0005303a 	rdctl	r2,status
   162fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16300:	e0fff917 	ldw	r3,-28(fp)
   16304:	00bfff84 	movi	r2,-2
   16308:	1884703a 	and	r2,r3,r2
   1630c:	1001703a 	wrctl	status,r2
  
  return context;
   16310:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   16314:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   16318:	e0bfff03 	ldbu	r2,-4(fp)
   1631c:	10803fd8 	cmpnei	r2,r2,255
   16320:	1000051e 	bne	r2,zero,16338 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   16324:	008000b4 	movhi	r2,2
   16328:	10bfa804 	addi	r2,r2,-352
   1632c:	10800017 	ldw	r2,0(r2)
   16330:	10800c83 	ldbu	r2,50(r2)
   16334:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16338:	e0ffff03 	ldbu	r3,-4(fp)
   1633c:	008000b4 	movhi	r2,2
   16340:	108c3004 	addi	r2,r2,12480
   16344:	18c7883a 	add	r3,r3,r3
   16348:	18c7883a 	add	r3,r3,r3
   1634c:	10c5883a 	add	r2,r2,r3
   16350:	10800017 	ldw	r2,0(r2)
   16354:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   16358:	e0bff717 	ldw	r2,-36(fp)
   1635c:	1000061e 	bne	r2,zero,16378 <OSTaskDel+0xec>
   16360:	e0bff617 	ldw	r2,-40(fp)
   16364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16368:	e0bffa17 	ldw	r2,-24(fp)
   1636c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16370:	008010c4 	movi	r2,67
   16374:	0000b806 	br	16658 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   16378:	e0bff717 	ldw	r2,-36(fp)
   1637c:	10800058 	cmpnei	r2,r2,1
   16380:	1000061e 	bne	r2,zero,1639c <OSTaskDel+0x110>
   16384:	e0bff617 	ldw	r2,-40(fp)
   16388:	e0bffb15 	stw	r2,-20(fp)
   1638c:	e0bffb17 	ldw	r2,-20(fp)
   16390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16394:	00800f44 	movi	r2,61
   16398:	0000af06 	br	16658 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1639c:	e0bff717 	ldw	r2,-36(fp)
   163a0:	10800d03 	ldbu	r2,52(r2)
   163a4:	10c03fcc 	andi	r3,r2,255
   163a8:	e0bff717 	ldw	r2,-36(fp)
   163ac:	10800d03 	ldbu	r2,52(r2)
   163b0:	11003fcc 	andi	r4,r2,255
   163b4:	008000b4 	movhi	r2,2
   163b8:	10bfa544 	addi	r2,r2,-363
   163bc:	1105883a 	add	r2,r2,r4
   163c0:	10800003 	ldbu	r2,0(r2)
   163c4:	1009883a 	mov	r4,r2
   163c8:	e0bff717 	ldw	r2,-36(fp)
   163cc:	10800d43 	ldbu	r2,53(r2)
   163d0:	0084303a 	nor	r2,zero,r2
   163d4:	2084703a 	and	r2,r4,r2
   163d8:	1009883a 	mov	r4,r2
   163dc:	008000b4 	movhi	r2,2
   163e0:	10bfa544 	addi	r2,r2,-363
   163e4:	10c5883a 	add	r2,r2,r3
   163e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   163ec:	e0bff717 	ldw	r2,-36(fp)
   163f0:	10800d03 	ldbu	r2,52(r2)
   163f4:	10c03fcc 	andi	r3,r2,255
   163f8:	008000b4 	movhi	r2,2
   163fc:	10bfa544 	addi	r2,r2,-363
   16400:	10c5883a 	add	r2,r2,r3
   16404:	10800003 	ldbu	r2,0(r2)
   16408:	10803fcc 	andi	r2,r2,255
   1640c:	10000c1e 	bne	r2,zero,16440 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   16410:	e0bff717 	ldw	r2,-36(fp)
   16414:	10800d83 	ldbu	r2,54(r2)
   16418:	0084303a 	nor	r2,zero,r2
   1641c:	1007883a 	mov	r3,r2
   16420:	008000b4 	movhi	r2,2
   16424:	10bfa504 	addi	r2,r2,-364
   16428:	10800003 	ldbu	r2,0(r2)
   1642c:	1884703a 	and	r2,r3,r2
   16430:	1007883a 	mov	r3,r2
   16434:	008000b4 	movhi	r2,2
   16438:	10bfa504 	addi	r2,r2,-364
   1643c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   16440:	e0bff717 	ldw	r2,-36(fp)
   16444:	10800717 	ldw	r2,28(r2)
   16448:	10000526 	beq	r2,zero,16460 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1644c:	e0bff717 	ldw	r2,-36(fp)
   16450:	10800717 	ldw	r2,28(r2)
   16454:	e13ff717 	ldw	r4,-36(fp)
   16458:	100b883a 	mov	r5,r2
   1645c:	0010e600 	call	10e60 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   16460:	e0bff717 	ldw	r2,-36(fp)
   16464:	10800817 	ldw	r2,32(r2)
   16468:	10000526 	beq	r2,zero,16480 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1646c:	e0bff717 	ldw	r2,-36(fp)
   16470:	10800817 	ldw	r2,32(r2)
   16474:	e13ff717 	ldw	r4,-36(fp)
   16478:	100b883a 	mov	r5,r2
   1647c:	0010f140 	call	10f14 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   16480:	e0bff717 	ldw	r2,-36(fp)
   16484:	10800a17 	ldw	r2,40(r2)
   16488:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1648c:	e0bff817 	ldw	r2,-32(fp)
   16490:	10000226 	beq	r2,zero,1649c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   16494:	e13ff817 	ldw	r4,-32(fp)
   16498:	00134680 	call	13468 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1649c:	e0bff717 	ldw	r2,-36(fp)
   164a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   164a4:	e0bff717 	ldw	r2,-36(fp)
   164a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   164ac:	e0bff717 	ldw	r2,-36(fp)
   164b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   164b4:	008000b4 	movhi	r2,2
   164b8:	10bf9904 	addi	r2,r2,-412
   164bc:	10800003 	ldbu	r2,0(r2)
   164c0:	10803fcc 	andi	r2,r2,255
   164c4:	10803fe0 	cmpeqi	r2,r2,255
   164c8:	1000081e 	bne	r2,zero,164ec <OSTaskDel+0x260>
        OSLockNesting++;
   164cc:	008000b4 	movhi	r2,2
   164d0:	10bf9904 	addi	r2,r2,-412
   164d4:	10800003 	ldbu	r2,0(r2)
   164d8:	10800044 	addi	r2,r2,1
   164dc:	1007883a 	mov	r3,r2
   164e0:	008000b4 	movhi	r2,2
   164e4:	10bf9904 	addi	r2,r2,-412
   164e8:	10c00005 	stb	r3,0(r2)
   164ec:	e0bff617 	ldw	r2,-40(fp)
   164f0:	e0bffc15 	stw	r2,-16(fp)
   164f4:	e0bffc17 	ldw	r2,-16(fp)
   164f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   164fc:	0010a540 	call	10a54 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16500:	0005303a 	rdctl	r2,status
   16504:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16508:	e0fffd17 	ldw	r3,-12(fp)
   1650c:	00bfff84 	movi	r2,-2
   16510:	1884703a 	and	r2,r3,r2
   16514:	1001703a 	wrctl	status,r2
  
  return context;
   16518:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1651c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16520:	008000b4 	movhi	r2,2
   16524:	10bf9904 	addi	r2,r2,-412
   16528:	10800003 	ldbu	r2,0(r2)
   1652c:	10803fcc 	andi	r2,r2,255
   16530:	10000826 	beq	r2,zero,16554 <OSTaskDel+0x2c8>
        OSLockNesting--;
   16534:	008000b4 	movhi	r2,2
   16538:	10bf9904 	addi	r2,r2,-412
   1653c:	10800003 	ldbu	r2,0(r2)
   16540:	10bfffc4 	addi	r2,r2,-1
   16544:	1007883a 	mov	r3,r2
   16548:	008000b4 	movhi	r2,2
   1654c:	10bf9904 	addi	r2,r2,-412
   16550:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   16554:	e13ff717 	ldw	r4,-36(fp)
   16558:	001aec00 	call	1aec0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1655c:	008000b4 	movhi	r2,2
   16560:	10bfa144 	addi	r2,r2,-379
   16564:	10800003 	ldbu	r2,0(r2)
   16568:	10bfffc4 	addi	r2,r2,-1
   1656c:	1007883a 	mov	r3,r2
   16570:	008000b4 	movhi	r2,2
   16574:	10bfa144 	addi	r2,r2,-379
   16578:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1657c:	e0ffff03 	ldbu	r3,-4(fp)
   16580:	008000b4 	movhi	r2,2
   16584:	108c3004 	addi	r2,r2,12480
   16588:	18c7883a 	add	r3,r3,r3
   1658c:	18c7883a 	add	r3,r3,r3
   16590:	10c5883a 	add	r2,r2,r3
   16594:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   16598:	e0bff717 	ldw	r2,-36(fp)
   1659c:	10800617 	ldw	r2,24(r2)
   165a0:	1000091e 	bne	r2,zero,165c8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   165a4:	e0bff717 	ldw	r2,-36(fp)
   165a8:	10800517 	ldw	r2,20(r2)
   165ac:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   165b0:	e0bff717 	ldw	r2,-36(fp)
   165b4:	10c00517 	ldw	r3,20(r2)
   165b8:	008000b4 	movhi	r2,2
   165bc:	10bf9c04 	addi	r2,r2,-400
   165c0:	10c00015 	stw	r3,0(r2)
   165c4:	00000a06 	br	165f0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   165c8:	e0bff717 	ldw	r2,-36(fp)
   165cc:	10800617 	ldw	r2,24(r2)
   165d0:	e0fff717 	ldw	r3,-36(fp)
   165d4:	18c00517 	ldw	r3,20(r3)
   165d8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   165dc:	e0bff717 	ldw	r2,-36(fp)
   165e0:	10800517 	ldw	r2,20(r2)
   165e4:	e0fff717 	ldw	r3,-36(fp)
   165e8:	18c00617 	ldw	r3,24(r3)
   165ec:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   165f0:	008000b4 	movhi	r2,2
   165f4:	10bfa004 	addi	r2,r2,-384
   165f8:	10c00017 	ldw	r3,0(r2)
   165fc:	e0bff717 	ldw	r2,-36(fp)
   16600:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   16604:	008000b4 	movhi	r2,2
   16608:	10bfa004 	addi	r2,r2,-384
   1660c:	e0fff717 	ldw	r3,-36(fp)
   16610:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   16614:	e0bff717 	ldw	r2,-36(fp)
   16618:	00c00fc4 	movi	r3,63
   1661c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   16620:	e0bff717 	ldw	r2,-36(fp)
   16624:	10001345 	stb	zero,77(r2)
   16628:	e0bff617 	ldw	r2,-40(fp)
   1662c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16630:	e0bffe17 	ldw	r2,-8(fp)
   16634:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16638:	008000b4 	movhi	r2,2
   1663c:	10bf9944 	addi	r2,r2,-411
   16640:	10800003 	ldbu	r2,0(r2)
   16644:	10803fcc 	andi	r2,r2,255
   16648:	10800058 	cmpnei	r2,r2,1
   1664c:	1000011e 	bne	r2,zero,16654 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   16650:	00114880 	call	11488 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16654:	0005883a 	mov	r2,zero
}
   16658:	e037883a 	mov	sp,fp
   1665c:	dfc00117 	ldw	ra,4(sp)
   16660:	df000017 	ldw	fp,0(sp)
   16664:	dec00204 	addi	sp,sp,8
   16668:	f800283a 	ret

0001666c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1666c:	defff504 	addi	sp,sp,-44
   16670:	df000a15 	stw	fp,40(sp)
   16674:	df000a04 	addi	fp,sp,40
   16678:	2005883a 	mov	r2,r4
   1667c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16680:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   16684:	e0bfff03 	ldbu	r2,-4(fp)
   16688:	10800518 	cmpnei	r2,r2,20
   1668c:	1000021e 	bne	r2,zero,16698 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   16690:	00800f84 	movi	r2,62
   16694:	00004706 	br	167b4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16698:	e0bfff03 	ldbu	r2,-4(fp)
   1669c:	10800530 	cmpltui	r2,r2,20
   166a0:	1000051e 	bne	r2,zero,166b8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   166a4:	e0bfff03 	ldbu	r2,-4(fp)
   166a8:	10803fe0 	cmpeqi	r2,r2,255
   166ac:	1000021e 	bne	r2,zero,166b8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   166b0:	00800a84 	movi	r2,42
   166b4:	00003f06 	br	167b4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   166b8:	e0bfff03 	ldbu	r2,-4(fp)
   166bc:	10803fd8 	cmpnei	r2,r2,255
   166c0:	1000131e 	bne	r2,zero,16710 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166c4:	0005303a 	rdctl	r2,status
   166c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166cc:	e0fff917 	ldw	r3,-28(fp)
   166d0:	00bfff84 	movi	r2,-2
   166d4:	1884703a 	and	r2,r3,r2
   166d8:	1001703a 	wrctl	status,r2
  
  return context;
   166dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   166e0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   166e4:	008000b4 	movhi	r2,2
   166e8:	10bfa804 	addi	r2,r2,-352
   166ec:	10800017 	ldw	r2,0(r2)
   166f0:	10800dc3 	ldbu	r2,55(r2)
   166f4:	e0bff705 	stb	r2,-36(fp)
   166f8:	e0bff617 	ldw	r2,-40(fp)
   166fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16700:	e0bffa17 	ldw	r2,-24(fp)
   16704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   16708:	e0bff703 	ldbu	r2,-36(fp)
   1670c:	00002906 	br	167b4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16710:	0005303a 	rdctl	r2,status
   16714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16718:	e0fffb17 	ldw	r3,-20(fp)
   1671c:	00bfff84 	movi	r2,-2
   16720:	1884703a 	and	r2,r3,r2
   16724:	1001703a 	wrctl	status,r2
  
  return context;
   16728:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1672c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16730:	e0ffff03 	ldbu	r3,-4(fp)
   16734:	008000b4 	movhi	r2,2
   16738:	108c3004 	addi	r2,r2,12480
   1673c:	18c7883a 	add	r3,r3,r3
   16740:	18c7883a 	add	r3,r3,r3
   16744:	10c5883a 	add	r2,r2,r3
   16748:	10800017 	ldw	r2,0(r2)
   1674c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   16750:	e0bff817 	ldw	r2,-32(fp)
   16754:	1000061e 	bne	r2,zero,16770 <OSTaskDelReq+0x104>
   16758:	e0bff617 	ldw	r2,-40(fp)
   1675c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16760:	e0bffc17 	ldw	r2,-16(fp)
   16764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   16768:	008010c4 	movi	r2,67
   1676c:	00001106 	br	167b4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   16770:	e0bff817 	ldw	r2,-32(fp)
   16774:	10800058 	cmpnei	r2,r2,1
   16778:	1000061e 	bne	r2,zero,16794 <OSTaskDelReq+0x128>
   1677c:	e0bff617 	ldw	r2,-40(fp)
   16780:	e0bffd15 	stw	r2,-12(fp)
   16784:	e0bffd17 	ldw	r2,-12(fp)
   16788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1678c:	00800f44 	movi	r2,61
   16790:	00000806 	br	167b4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   16794:	e0bff817 	ldw	r2,-32(fp)
   16798:	00c00fc4 	movi	r3,63
   1679c:	10c00dc5 	stb	r3,55(r2)
   167a0:	e0bff617 	ldw	r2,-40(fp)
   167a4:	e0bffe15 	stw	r2,-8(fp)
   167a8:	e0bffe17 	ldw	r2,-8(fp)
   167ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   167b0:	0005883a 	mov	r2,zero
}
   167b4:	e037883a 	mov	sp,fp
   167b8:	df000017 	ldw	fp,0(sp)
   167bc:	dec00104 	addi	sp,sp,4
   167c0:	f800283a 	ret

000167c4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   167c4:	defff404 	addi	sp,sp,-48
   167c8:	dfc00b15 	stw	ra,44(sp)
   167cc:	df000a15 	stw	fp,40(sp)
   167d0:	df000a04 	addi	fp,sp,40
   167d4:	2005883a 	mov	r2,r4
   167d8:	e17ffe15 	stw	r5,-8(fp)
   167dc:	e1bfff15 	stw	r6,-4(fp)
   167e0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   167e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   167e8:	e0bfff17 	ldw	r2,-4(fp)
   167ec:	1000021e 	bne	r2,zero,167f8 <OSTaskNameGet+0x34>
        return (0);
   167f0:	0005883a 	mov	r2,zero
   167f4:	00005806 	br	16958 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   167f8:	e0bffd03 	ldbu	r2,-12(fp)
   167fc:	10800570 	cmpltui	r2,r2,21
   16800:	1000081e 	bne	r2,zero,16824 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   16804:	e0bffd03 	ldbu	r2,-12(fp)
   16808:	10803fe0 	cmpeqi	r2,r2,255
   1680c:	1000051e 	bne	r2,zero,16824 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   16810:	e0bfff17 	ldw	r2,-4(fp)
   16814:	00c00a84 	movi	r3,42
   16818:	10c00005 	stb	r3,0(r2)
            return (0);
   1681c:	0005883a 	mov	r2,zero
   16820:	00004d06 	br	16958 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   16824:	e0bffe17 	ldw	r2,-8(fp)
   16828:	1000051e 	bne	r2,zero,16840 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1682c:	e0bfff17 	ldw	r2,-4(fp)
   16830:	00c00304 	movi	r3,12
   16834:	10c00005 	stb	r3,0(r2)
        return (0);
   16838:	0005883a 	mov	r2,zero
   1683c:	00004606 	br	16958 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   16840:	008000b4 	movhi	r2,2
   16844:	10bfa704 	addi	r2,r2,-356
   16848:	10800003 	ldbu	r2,0(r2)
   1684c:	10803fcc 	andi	r2,r2,255
   16850:	10000526 	beq	r2,zero,16868 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   16854:	e0bfff17 	ldw	r2,-4(fp)
   16858:	00c00444 	movi	r3,17
   1685c:	10c00005 	stb	r3,0(r2)
        return (0);
   16860:	0005883a 	mov	r2,zero
   16864:	00003c06 	br	16958 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16868:	0005303a 	rdctl	r2,status
   1686c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16870:	e0fff917 	ldw	r3,-28(fp)
   16874:	00bfff84 	movi	r2,-2
   16878:	1884703a 	and	r2,r3,r2
   1687c:	1001703a 	wrctl	status,r2
  
  return context;
   16880:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   16884:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   16888:	e0bffd03 	ldbu	r2,-12(fp)
   1688c:	10803fd8 	cmpnei	r2,r2,255
   16890:	1000051e 	bne	r2,zero,168a8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   16894:	008000b4 	movhi	r2,2
   16898:	10bfa804 	addi	r2,r2,-352
   1689c:	10800017 	ldw	r2,0(r2)
   168a0:	10800c83 	ldbu	r2,50(r2)
   168a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   168a8:	e0fffd03 	ldbu	r3,-12(fp)
   168ac:	008000b4 	movhi	r2,2
   168b0:	108c3004 	addi	r2,r2,12480
   168b4:	18c7883a 	add	r3,r3,r3
   168b8:	18c7883a 	add	r3,r3,r3
   168bc:	10c5883a 	add	r2,r2,r3
   168c0:	10800017 	ldw	r2,0(r2)
   168c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   168c8:	e0bff717 	ldw	r2,-36(fp)
   168cc:	1000091e 	bne	r2,zero,168f4 <OSTaskNameGet+0x130>
   168d0:	e0bff617 	ldw	r2,-40(fp)
   168d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168d8:	e0bffa17 	ldw	r2,-24(fp)
   168dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   168e0:	e0bfff17 	ldw	r2,-4(fp)
   168e4:	00c010c4 	movi	r3,67
   168e8:	10c00005 	stb	r3,0(r2)
        return (0);
   168ec:	0005883a 	mov	r2,zero
   168f0:	00001906 	br	16958 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   168f4:	e0bff717 	ldw	r2,-36(fp)
   168f8:	10800058 	cmpnei	r2,r2,1
   168fc:	1000091e 	bne	r2,zero,16924 <OSTaskNameGet+0x160>
   16900:	e0bff617 	ldw	r2,-40(fp)
   16904:	e0bffb15 	stw	r2,-20(fp)
   16908:	e0bffb17 	ldw	r2,-20(fp)
   1690c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16910:	e0bfff17 	ldw	r2,-4(fp)
   16914:	00c010c4 	movi	r3,67
   16918:	10c00005 	stb	r3,0(r2)
        return (0);
   1691c:	0005883a 	mov	r2,zero
   16920:	00000d06 	br	16958 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   16924:	e0bff717 	ldw	r2,-36(fp)
   16928:	10801304 	addi	r2,r2,76
   1692c:	e13ffe17 	ldw	r4,-8(fp)
   16930:	100b883a 	mov	r5,r2
   16934:	00115c40 	call	115c4 <OS_StrCopy>
   16938:	e0bff805 	stb	r2,-32(fp)
   1693c:	e0bff617 	ldw	r2,-40(fp)
   16940:	e0bffc15 	stw	r2,-16(fp)
   16944:	e0bffc17 	ldw	r2,-16(fp)
   16948:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1694c:	e0bfff17 	ldw	r2,-4(fp)
   16950:	10000005 	stb	zero,0(r2)
    return (len);
   16954:	e0bff803 	ldbu	r2,-32(fp)
}
   16958:	e037883a 	mov	sp,fp
   1695c:	dfc00117 	ldw	ra,4(sp)
   16960:	df000017 	ldw	fp,0(sp)
   16964:	dec00204 	addi	sp,sp,8
   16968:	f800283a 	ret

0001696c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1696c:	defff304 	addi	sp,sp,-52
   16970:	dfc00c15 	stw	ra,48(sp)
   16974:	df000b15 	stw	fp,44(sp)
   16978:	df000b04 	addi	fp,sp,44
   1697c:	2005883a 	mov	r2,r4
   16980:	e17ffe15 	stw	r5,-8(fp)
   16984:	e1bfff15 	stw	r6,-4(fp)
   16988:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1698c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16990:	e0bfff17 	ldw	r2,-4(fp)
   16994:	1000011e 	bne	r2,zero,1699c <OSTaskNameSet+0x30>
        return;
   16998:	00005f06 	br	16b18 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1699c:	e0bffd03 	ldbu	r2,-12(fp)
   169a0:	10800570 	cmpltui	r2,r2,21
   169a4:	1000071e 	bne	r2,zero,169c4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   169a8:	e0bffd03 	ldbu	r2,-12(fp)
   169ac:	10803fe0 	cmpeqi	r2,r2,255
   169b0:	1000041e 	bne	r2,zero,169c4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   169b4:	e0bfff17 	ldw	r2,-4(fp)
   169b8:	00c00a84 	movi	r3,42
   169bc:	10c00005 	stb	r3,0(r2)
            return;
   169c0:	00005506 	br	16b18 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   169c4:	e0bffe17 	ldw	r2,-8(fp)
   169c8:	1000041e 	bne	r2,zero,169dc <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   169cc:	e0bfff17 	ldw	r2,-4(fp)
   169d0:	00c00304 	movi	r3,12
   169d4:	10c00005 	stb	r3,0(r2)
        return;
   169d8:	00004f06 	br	16b18 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   169dc:	008000b4 	movhi	r2,2
   169e0:	10bfa704 	addi	r2,r2,-356
   169e4:	10800003 	ldbu	r2,0(r2)
   169e8:	10803fcc 	andi	r2,r2,255
   169ec:	10000426 	beq	r2,zero,16a00 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   169f0:	e0bfff17 	ldw	r2,-4(fp)
   169f4:	00c00484 	movi	r3,18
   169f8:	10c00005 	stb	r3,0(r2)
        return;
   169fc:	00004606 	br	16b18 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a00:	0005303a 	rdctl	r2,status
   16a04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a08:	e0fff817 	ldw	r3,-32(fp)
   16a0c:	00bfff84 	movi	r2,-2
   16a10:	1884703a 	and	r2,r3,r2
   16a14:	1001703a 	wrctl	status,r2
  
  return context;
   16a18:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16a1c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   16a20:	e0bffd03 	ldbu	r2,-12(fp)
   16a24:	10803fd8 	cmpnei	r2,r2,255
   16a28:	1000051e 	bne	r2,zero,16a40 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   16a2c:	008000b4 	movhi	r2,2
   16a30:	10bfa804 	addi	r2,r2,-352
   16a34:	10800017 	ldw	r2,0(r2)
   16a38:	10800c83 	ldbu	r2,50(r2)
   16a3c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16a40:	e0fffd03 	ldbu	r3,-12(fp)
   16a44:	008000b4 	movhi	r2,2
   16a48:	108c3004 	addi	r2,r2,12480
   16a4c:	18c7883a 	add	r3,r3,r3
   16a50:	18c7883a 	add	r3,r3,r3
   16a54:	10c5883a 	add	r2,r2,r3
   16a58:	10800017 	ldw	r2,0(r2)
   16a5c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   16a60:	e0bff617 	ldw	r2,-40(fp)
   16a64:	1000081e 	bne	r2,zero,16a88 <OSTaskNameSet+0x11c>
   16a68:	e0bff517 	ldw	r2,-44(fp)
   16a6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a70:	e0bff917 	ldw	r2,-28(fp)
   16a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16a78:	e0bfff17 	ldw	r2,-4(fp)
   16a7c:	00c010c4 	movi	r3,67
   16a80:	10c00005 	stb	r3,0(r2)
        return;
   16a84:	00002406 	br	16b18 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16a88:	e0bff617 	ldw	r2,-40(fp)
   16a8c:	10800058 	cmpnei	r2,r2,1
   16a90:	1000081e 	bne	r2,zero,16ab4 <OSTaskNameSet+0x148>
   16a94:	e0bff517 	ldw	r2,-44(fp)
   16a98:	e0bffa15 	stw	r2,-24(fp)
   16a9c:	e0bffa17 	ldw	r2,-24(fp)
   16aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16aa4:	e0bfff17 	ldw	r2,-4(fp)
   16aa8:	00c010c4 	movi	r3,67
   16aac:	10c00005 	stb	r3,0(r2)
        return;
   16ab0:	00001906 	br	16b18 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   16ab4:	e13ffe17 	ldw	r4,-8(fp)
   16ab8:	00116380 	call	11638 <OS_StrLen>
   16abc:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16ac0:	e0bff703 	ldbu	r2,-36(fp)
   16ac4:	10800830 	cmpltui	r2,r2,32
   16ac8:	1000081e 	bne	r2,zero,16aec <OSTaskNameSet+0x180>
   16acc:	e0bff517 	ldw	r2,-44(fp)
   16ad0:	e0bffb15 	stw	r2,-20(fp)
   16ad4:	e0bffb17 	ldw	r2,-20(fp)
   16ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   16adc:	e0bfff17 	ldw	r2,-4(fp)
   16ae0:	00c01044 	movi	r3,65
   16ae4:	10c00005 	stb	r3,0(r2)
        return;
   16ae8:	00000b06 	br	16b18 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   16aec:	e0bff617 	ldw	r2,-40(fp)
   16af0:	10801304 	addi	r2,r2,76
   16af4:	1009883a 	mov	r4,r2
   16af8:	e17ffe17 	ldw	r5,-8(fp)
   16afc:	00115c40 	call	115c4 <OS_StrCopy>
   16b00:	e0bff517 	ldw	r2,-44(fp)
   16b04:	e0bffc15 	stw	r2,-16(fp)
   16b08:	e0bffc17 	ldw	r2,-16(fp)
   16b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16b10:	e0bfff17 	ldw	r2,-4(fp)
   16b14:	10000005 	stb	zero,0(r2)
}
   16b18:	e037883a 	mov	sp,fp
   16b1c:	dfc00117 	ldw	ra,4(sp)
   16b20:	df000017 	ldw	fp,0(sp)
   16b24:	dec00204 	addi	sp,sp,8
   16b28:	f800283a 	ret

00016b2c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   16b2c:	defff404 	addi	sp,sp,-48
   16b30:	dfc00b15 	stw	ra,44(sp)
   16b34:	df000a15 	stw	fp,40(sp)
   16b38:	df000a04 	addi	fp,sp,40
   16b3c:	2005883a 	mov	r2,r4
   16b40:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16b44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   16b48:	e0bfff03 	ldbu	r2,-4(fp)
   16b4c:	10800530 	cmpltui	r2,r2,20
   16b50:	1000021e 	bne	r2,zero,16b5c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   16b54:	00800a84 	movi	r2,42
   16b58:	00006d06 	br	16d10 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b5c:	0005303a 	rdctl	r2,status
   16b60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b64:	e0fff817 	ldw	r3,-32(fp)
   16b68:	00bfff84 	movi	r2,-2
   16b6c:	1884703a 	and	r2,r3,r2
   16b70:	1001703a 	wrctl	status,r2
  
  return context;
   16b74:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16b78:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16b7c:	e0ffff03 	ldbu	r3,-4(fp)
   16b80:	008000b4 	movhi	r2,2
   16b84:	108c3004 	addi	r2,r2,12480
   16b88:	18c7883a 	add	r3,r3,r3
   16b8c:	18c7883a 	add	r3,r3,r3
   16b90:	10c5883a 	add	r2,r2,r3
   16b94:	10800017 	ldw	r2,0(r2)
   16b98:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   16b9c:	e0bff717 	ldw	r2,-36(fp)
   16ba0:	1000061e 	bne	r2,zero,16bbc <OSTaskResume+0x90>
   16ba4:	e0bff617 	ldw	r2,-40(fp)
   16ba8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bac:	e0bff917 	ldw	r2,-28(fp)
   16bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   16bb4:	00801184 	movi	r2,70
   16bb8:	00005506 	br	16d10 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   16bbc:	e0bff717 	ldw	r2,-36(fp)
   16bc0:	10800058 	cmpnei	r2,r2,1
   16bc4:	1000061e 	bne	r2,zero,16be0 <OSTaskResume+0xb4>
   16bc8:	e0bff617 	ldw	r2,-40(fp)
   16bcc:	e0bffa15 	stw	r2,-24(fp)
   16bd0:	e0bffa17 	ldw	r2,-24(fp)
   16bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16bd8:	008010c4 	movi	r2,67
   16bdc:	00004c06 	br	16d10 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   16be0:	e0bff717 	ldw	r2,-36(fp)
   16be4:	10800c03 	ldbu	r2,48(r2)
   16be8:	10803fcc 	andi	r2,r2,255
   16bec:	1080020c 	andi	r2,r2,8
   16bf0:	10004226 	beq	r2,zero,16cfc <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   16bf4:	e0bff717 	ldw	r2,-36(fp)
   16bf8:	10c00c03 	ldbu	r3,48(r2)
   16bfc:	00bffdc4 	movi	r2,-9
   16c00:	1884703a 	and	r2,r3,r2
   16c04:	1007883a 	mov	r3,r2
   16c08:	e0bff717 	ldw	r2,-36(fp)
   16c0c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   16c10:	e0bff717 	ldw	r2,-36(fp)
   16c14:	10800c03 	ldbu	r2,48(r2)
   16c18:	10803fcc 	andi	r2,r2,255
   16c1c:	1000311e 	bne	r2,zero,16ce4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   16c20:	e0bff717 	ldw	r2,-36(fp)
   16c24:	10800b8b 	ldhu	r2,46(r2)
   16c28:	10bfffcc 	andi	r2,r2,65535
   16c2c:	1000281e 	bne	r2,zero,16cd0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   16c30:	e0bff717 	ldw	r2,-36(fp)
   16c34:	10c00d83 	ldbu	r3,54(r2)
   16c38:	008000b4 	movhi	r2,2
   16c3c:	10bfa504 	addi	r2,r2,-364
   16c40:	10800003 	ldbu	r2,0(r2)
   16c44:	1884b03a 	or	r2,r3,r2
   16c48:	1007883a 	mov	r3,r2
   16c4c:	008000b4 	movhi	r2,2
   16c50:	10bfa504 	addi	r2,r2,-364
   16c54:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16c58:	e0bff717 	ldw	r2,-36(fp)
   16c5c:	10800d03 	ldbu	r2,52(r2)
   16c60:	10c03fcc 	andi	r3,r2,255
   16c64:	e0bff717 	ldw	r2,-36(fp)
   16c68:	10800d03 	ldbu	r2,52(r2)
   16c6c:	11003fcc 	andi	r4,r2,255
   16c70:	008000b4 	movhi	r2,2
   16c74:	10bfa544 	addi	r2,r2,-363
   16c78:	1105883a 	add	r2,r2,r4
   16c7c:	11000003 	ldbu	r4,0(r2)
   16c80:	e0bff717 	ldw	r2,-36(fp)
   16c84:	10800d43 	ldbu	r2,53(r2)
   16c88:	2084b03a 	or	r2,r4,r2
   16c8c:	1009883a 	mov	r4,r2
   16c90:	008000b4 	movhi	r2,2
   16c94:	10bfa544 	addi	r2,r2,-363
   16c98:	10c5883a 	add	r2,r2,r3
   16c9c:	11000005 	stb	r4,0(r2)
   16ca0:	e0bff617 	ldw	r2,-40(fp)
   16ca4:	e0bffb15 	stw	r2,-20(fp)
   16ca8:	e0bffb17 	ldw	r2,-20(fp)
   16cac:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   16cb0:	008000b4 	movhi	r2,2
   16cb4:	10bf9944 	addi	r2,r2,-411
   16cb8:	10800003 	ldbu	r2,0(r2)
   16cbc:	10803fcc 	andi	r2,r2,255
   16cc0:	10800058 	cmpnei	r2,r2,1
   16cc4:	10000b1e 	bne	r2,zero,16cf4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   16cc8:	00114880 	call	11488 <OS_Sched>
   16ccc:	00000906 	br	16cf4 <OSTaskResume+0x1c8>
   16cd0:	e0bff617 	ldw	r2,-40(fp)
   16cd4:	e0bffc15 	stw	r2,-16(fp)
   16cd8:	e0bffc17 	ldw	r2,-16(fp)
   16cdc:	1001703a 	wrctl	status,r2
   16ce0:	00000406 	br	16cf4 <OSTaskResume+0x1c8>
   16ce4:	e0bff617 	ldw	r2,-40(fp)
   16ce8:	e0bffd15 	stw	r2,-12(fp)
   16cec:	e0bffd17 	ldw	r2,-12(fp)
   16cf0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   16cf4:	0005883a 	mov	r2,zero
   16cf8:	00000506 	br	16d10 <OSTaskResume+0x1e4>
   16cfc:	e0bff617 	ldw	r2,-40(fp)
   16d00:	e0bffe15 	stw	r2,-8(fp)
   16d04:	e0bffe17 	ldw	r2,-8(fp)
   16d08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   16d0c:	00801104 	movi	r2,68
}
   16d10:	e037883a 	mov	sp,fp
   16d14:	dfc00117 	ldw	ra,4(sp)
   16d18:	df000017 	ldw	fp,0(sp)
   16d1c:	dec00204 	addi	sp,sp,8
   16d20:	f800283a 	ret

00016d24 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   16d24:	defff304 	addi	sp,sp,-52
   16d28:	df000c15 	stw	fp,48(sp)
   16d2c:	df000c04 	addi	fp,sp,48
   16d30:	2005883a 	mov	r2,r4
   16d34:	e17fff15 	stw	r5,-4(fp)
   16d38:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16d3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   16d40:	e0bffe03 	ldbu	r2,-8(fp)
   16d44:	10800570 	cmpltui	r2,r2,21
   16d48:	1000051e 	bne	r2,zero,16d60 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   16d4c:	e0bffe03 	ldbu	r2,-8(fp)
   16d50:	10803fe0 	cmpeqi	r2,r2,255
   16d54:	1000021e 	bne	r2,zero,16d60 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   16d58:	00800a84 	movi	r2,42
   16d5c:	00005f06 	br	16edc <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   16d60:	e0bfff17 	ldw	r2,-4(fp)
   16d64:	1000021e 	bne	r2,zero,16d70 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   16d68:	00800244 	movi	r2,9
   16d6c:	00005b06 	br	16edc <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   16d70:	e0bfff17 	ldw	r2,-4(fp)
   16d74:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   16d78:	e0bfff17 	ldw	r2,-4(fp)
   16d7c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d80:	0005303a 	rdctl	r2,status
   16d84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d88:	e0fff917 	ldw	r3,-28(fp)
   16d8c:	00bfff84 	movi	r2,-2
   16d90:	1884703a 	and	r2,r3,r2
   16d94:	1001703a 	wrctl	status,r2
  
  return context;
   16d98:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   16d9c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   16da0:	e0bffe03 	ldbu	r2,-8(fp)
   16da4:	10803fd8 	cmpnei	r2,r2,255
   16da8:	1000051e 	bne	r2,zero,16dc0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   16dac:	008000b4 	movhi	r2,2
   16db0:	10bfa804 	addi	r2,r2,-352
   16db4:	10800017 	ldw	r2,0(r2)
   16db8:	10800c83 	ldbu	r2,50(r2)
   16dbc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16dc0:	e0fffe03 	ldbu	r3,-8(fp)
   16dc4:	008000b4 	movhi	r2,2
   16dc8:	108c3004 	addi	r2,r2,12480
   16dcc:	18c7883a 	add	r3,r3,r3
   16dd0:	18c7883a 	add	r3,r3,r3
   16dd4:	10c5883a 	add	r2,r2,r3
   16dd8:	10800017 	ldw	r2,0(r2)
   16ddc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   16de0:	e0bff717 	ldw	r2,-36(fp)
   16de4:	1000061e 	bne	r2,zero,16e00 <OSTaskStkChk+0xdc>
   16de8:	e0bff617 	ldw	r2,-40(fp)
   16dec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16df0:	e0bffa17 	ldw	r2,-24(fp)
   16df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16df8:	008010c4 	movi	r2,67
   16dfc:	00003706 	br	16edc <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16e00:	e0bff717 	ldw	r2,-36(fp)
   16e04:	10800058 	cmpnei	r2,r2,1
   16e08:	1000061e 	bne	r2,zero,16e24 <OSTaskStkChk+0x100>
   16e0c:	e0bff617 	ldw	r2,-40(fp)
   16e10:	e0bffb15 	stw	r2,-20(fp)
   16e14:	e0bffb17 	ldw	r2,-20(fp)
   16e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16e1c:	008010c4 	movi	r2,67
   16e20:	00002e06 	br	16edc <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   16e24:	e0bff717 	ldw	r2,-36(fp)
   16e28:	1080040b 	ldhu	r2,16(r2)
   16e2c:	10bfffcc 	andi	r2,r2,65535
   16e30:	1080004c 	andi	r2,r2,1
   16e34:	1000061e 	bne	r2,zero,16e50 <OSTaskStkChk+0x12c>
   16e38:	e0bff617 	ldw	r2,-40(fp)
   16e3c:	e0bffc15 	stw	r2,-16(fp)
   16e40:	e0bffc17 	ldw	r2,-16(fp)
   16e44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   16e48:	00801144 	movi	r2,69
   16e4c:	00002306 	br	16edc <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   16e50:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   16e54:	e0bff717 	ldw	r2,-36(fp)
   16e58:	10800317 	ldw	r2,12(r2)
   16e5c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   16e60:	e0bff717 	ldw	r2,-36(fp)
   16e64:	10800217 	ldw	r2,8(r2)
   16e68:	e0bff415 	stw	r2,-48(fp)
   16e6c:	e0bff617 	ldw	r2,-40(fp)
   16e70:	e0bffd15 	stw	r2,-12(fp)
   16e74:	e0bffd17 	ldw	r2,-12(fp)
   16e78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16e7c:	00000306 	br	16e8c <OSTaskStkChk+0x168>
        nfree++;
   16e80:	e0bff517 	ldw	r2,-44(fp)
   16e84:	10800044 	addi	r2,r2,1
   16e88:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16e8c:	e0bff417 	ldw	r2,-48(fp)
   16e90:	10c00104 	addi	r3,r2,4
   16e94:	e0fff415 	stw	r3,-48(fp)
   16e98:	10800017 	ldw	r2,0(r2)
   16e9c:	103ff826 	beq	r2,zero,16e80 <__alt_mem_Flash_flash_data+0xf4016e80>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   16ea0:	e0bff517 	ldw	r2,-44(fp)
   16ea4:	1085883a 	add	r2,r2,r2
   16ea8:	1085883a 	add	r2,r2,r2
   16eac:	1007883a 	mov	r3,r2
   16eb0:	e0bfff17 	ldw	r2,-4(fp)
   16eb4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   16eb8:	e0fff817 	ldw	r3,-32(fp)
   16ebc:	e0bff517 	ldw	r2,-44(fp)
   16ec0:	1885c83a 	sub	r2,r3,r2
   16ec4:	1085883a 	add	r2,r2,r2
   16ec8:	1085883a 	add	r2,r2,r2
   16ecc:	1007883a 	mov	r3,r2
   16ed0:	e0bfff17 	ldw	r2,-4(fp)
   16ed4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   16ed8:	0005883a 	mov	r2,zero
}
   16edc:	e037883a 	mov	sp,fp
   16ee0:	df000017 	ldw	fp,0(sp)
   16ee4:	dec00104 	addi	sp,sp,4
   16ee8:	f800283a 	ret

00016eec <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   16eec:	defff504 	addi	sp,sp,-44
   16ef0:	dfc00a15 	stw	ra,40(sp)
   16ef4:	df000915 	stw	fp,36(sp)
   16ef8:	df000904 	addi	fp,sp,36
   16efc:	2005883a 	mov	r2,r4
   16f00:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16f04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   16f08:	e0bfff03 	ldbu	r2,-4(fp)
   16f0c:	10800518 	cmpnei	r2,r2,20
   16f10:	1000021e 	bne	r2,zero,16f1c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   16f14:	008011c4 	movi	r2,71
   16f18:	00007406 	br	170ec <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16f1c:	e0bfff03 	ldbu	r2,-4(fp)
   16f20:	10800530 	cmpltui	r2,r2,20
   16f24:	1000051e 	bne	r2,zero,16f3c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   16f28:	e0bfff03 	ldbu	r2,-4(fp)
   16f2c:	10803fe0 	cmpeqi	r2,r2,255
   16f30:	1000021e 	bne	r2,zero,16f3c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   16f34:	00800a84 	movi	r2,42
   16f38:	00006c06 	br	170ec <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f3c:	0005303a 	rdctl	r2,status
   16f40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f44:	e0fffb17 	ldw	r3,-20(fp)
   16f48:	00bfff84 	movi	r2,-2
   16f4c:	1884703a 	and	r2,r3,r2
   16f50:	1001703a 	wrctl	status,r2
  
  return context;
   16f54:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   16f58:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   16f5c:	e0bfff03 	ldbu	r2,-4(fp)
   16f60:	10803fd8 	cmpnei	r2,r2,255
   16f64:	1000081e 	bne	r2,zero,16f88 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   16f68:	008000b4 	movhi	r2,2
   16f6c:	10bfa804 	addi	r2,r2,-352
   16f70:	10800017 	ldw	r2,0(r2)
   16f74:	10800c83 	ldbu	r2,50(r2)
   16f78:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   16f7c:	00800044 	movi	r2,1
   16f80:	e0bff705 	stb	r2,-36(fp)
   16f84:	00000b06 	br	16fb4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   16f88:	008000b4 	movhi	r2,2
   16f8c:	10bfa804 	addi	r2,r2,-352
   16f90:	10800017 	ldw	r2,0(r2)
   16f94:	10800c83 	ldbu	r2,50(r2)
   16f98:	10c03fcc 	andi	r3,r2,255
   16f9c:	e0bfff03 	ldbu	r2,-4(fp)
   16fa0:	1880031e 	bne	r3,r2,16fb0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   16fa4:	00800044 	movi	r2,1
   16fa8:	e0bff705 	stb	r2,-36(fp)
   16fac:	00000106 	br	16fb4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   16fb0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16fb4:	e0ffff03 	ldbu	r3,-4(fp)
   16fb8:	008000b4 	movhi	r2,2
   16fbc:	108c3004 	addi	r2,r2,12480
   16fc0:	18c7883a 	add	r3,r3,r3
   16fc4:	18c7883a 	add	r3,r3,r3
   16fc8:	10c5883a 	add	r2,r2,r3
   16fcc:	10800017 	ldw	r2,0(r2)
   16fd0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   16fd4:	e0bff917 	ldw	r2,-28(fp)
   16fd8:	1000061e 	bne	r2,zero,16ff4 <OSTaskSuspend+0x108>
   16fdc:	e0bff817 	ldw	r2,-32(fp)
   16fe0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fe4:	e0bffc17 	ldw	r2,-16(fp)
   16fe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   16fec:	00801204 	movi	r2,72
   16ff0:	00003e06 	br	170ec <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   16ff4:	e0bff917 	ldw	r2,-28(fp)
   16ff8:	10800058 	cmpnei	r2,r2,1
   16ffc:	1000061e 	bne	r2,zero,17018 <OSTaskSuspend+0x12c>
   17000:	e0bff817 	ldw	r2,-32(fp)
   17004:	e0bffd15 	stw	r2,-12(fp)
   17008:	e0bffd17 	ldw	r2,-12(fp)
   1700c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17010:	008010c4 	movi	r2,67
   17014:	00003506 	br	170ec <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   17018:	e0bff917 	ldw	r2,-28(fp)
   1701c:	10800d03 	ldbu	r2,52(r2)
   17020:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   17024:	e0fffa03 	ldbu	r3,-24(fp)
   17028:	e13ffa03 	ldbu	r4,-24(fp)
   1702c:	008000b4 	movhi	r2,2
   17030:	10bfa544 	addi	r2,r2,-363
   17034:	1105883a 	add	r2,r2,r4
   17038:	10800003 	ldbu	r2,0(r2)
   1703c:	1009883a 	mov	r4,r2
   17040:	e0bff917 	ldw	r2,-28(fp)
   17044:	10800d43 	ldbu	r2,53(r2)
   17048:	0084303a 	nor	r2,zero,r2
   1704c:	2084703a 	and	r2,r4,r2
   17050:	1009883a 	mov	r4,r2
   17054:	008000b4 	movhi	r2,2
   17058:	10bfa544 	addi	r2,r2,-363
   1705c:	10c5883a 	add	r2,r2,r3
   17060:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   17064:	e0fffa03 	ldbu	r3,-24(fp)
   17068:	008000b4 	movhi	r2,2
   1706c:	10bfa544 	addi	r2,r2,-363
   17070:	10c5883a 	add	r2,r2,r3
   17074:	10800003 	ldbu	r2,0(r2)
   17078:	10803fcc 	andi	r2,r2,255
   1707c:	10000c1e 	bne	r2,zero,170b0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   17080:	e0bff917 	ldw	r2,-28(fp)
   17084:	10800d83 	ldbu	r2,54(r2)
   17088:	0084303a 	nor	r2,zero,r2
   1708c:	1007883a 	mov	r3,r2
   17090:	008000b4 	movhi	r2,2
   17094:	10bfa504 	addi	r2,r2,-364
   17098:	10800003 	ldbu	r2,0(r2)
   1709c:	1884703a 	and	r2,r3,r2
   170a0:	1007883a 	mov	r3,r2
   170a4:	008000b4 	movhi	r2,2
   170a8:	10bfa504 	addi	r2,r2,-364
   170ac:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   170b0:	e0bff917 	ldw	r2,-28(fp)
   170b4:	10800c03 	ldbu	r2,48(r2)
   170b8:	10800214 	ori	r2,r2,8
   170bc:	1007883a 	mov	r3,r2
   170c0:	e0bff917 	ldw	r2,-28(fp)
   170c4:	10c00c05 	stb	r3,48(r2)
   170c8:	e0bff817 	ldw	r2,-32(fp)
   170cc:	e0bffe15 	stw	r2,-8(fp)
   170d0:	e0bffe17 	ldw	r2,-8(fp)
   170d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   170d8:	e0bff703 	ldbu	r2,-36(fp)
   170dc:	10800058 	cmpnei	r2,r2,1
   170e0:	1000011e 	bne	r2,zero,170e8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   170e4:	00114880 	call	11488 <OS_Sched>
    }
    return (OS_ERR_NONE);
   170e8:	0005883a 	mov	r2,zero
}
   170ec:	e037883a 	mov	sp,fp
   170f0:	dfc00117 	ldw	ra,4(sp)
   170f4:	df000017 	ldw	fp,0(sp)
   170f8:	dec00204 	addi	sp,sp,8
   170fc:	f800283a 	ret

00017100 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   17100:	defff604 	addi	sp,sp,-40
   17104:	dfc00915 	stw	ra,36(sp)
   17108:	df000815 	stw	fp,32(sp)
   1710c:	df000804 	addi	fp,sp,32
   17110:	2005883a 	mov	r2,r4
   17114:	e17fff15 	stw	r5,-4(fp)
   17118:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1711c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   17120:	e0bffe03 	ldbu	r2,-8(fp)
   17124:	10800570 	cmpltui	r2,r2,21
   17128:	1000051e 	bne	r2,zero,17140 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1712c:	e0bffe03 	ldbu	r2,-8(fp)
   17130:	10803fe0 	cmpeqi	r2,r2,255
   17134:	1000021e 	bne	r2,zero,17140 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   17138:	00800a84 	movi	r2,42
   1713c:	00003606 	br	17218 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   17140:	e0bfff17 	ldw	r2,-4(fp)
   17144:	1000021e 	bne	r2,zero,17150 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   17148:	00800244 	movi	r2,9
   1714c:	00003206 	br	17218 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17150:	0005303a 	rdctl	r2,status
   17154:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17158:	e0fffa17 	ldw	r3,-24(fp)
   1715c:	00bfff84 	movi	r2,-2
   17160:	1884703a 	and	r2,r3,r2
   17164:	1001703a 	wrctl	status,r2
  
  return context;
   17168:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1716c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   17170:	e0bffe03 	ldbu	r2,-8(fp)
   17174:	10803fd8 	cmpnei	r2,r2,255
   17178:	1000051e 	bne	r2,zero,17190 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1717c:	008000b4 	movhi	r2,2
   17180:	10bfa804 	addi	r2,r2,-352
   17184:	10800017 	ldw	r2,0(r2)
   17188:	10800c83 	ldbu	r2,50(r2)
   1718c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17190:	e0fffe03 	ldbu	r3,-8(fp)
   17194:	008000b4 	movhi	r2,2
   17198:	108c3004 	addi	r2,r2,12480
   1719c:	18c7883a 	add	r3,r3,r3
   171a0:	18c7883a 	add	r3,r3,r3
   171a4:	10c5883a 	add	r2,r2,r3
   171a8:	10800017 	ldw	r2,0(r2)
   171ac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   171b0:	e0bff917 	ldw	r2,-28(fp)
   171b4:	1000061e 	bne	r2,zero,171d0 <OSTaskQuery+0xd0>
   171b8:	e0bff817 	ldw	r2,-32(fp)
   171bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171c0:	e0bffb17 	ldw	r2,-20(fp)
   171c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   171c8:	00800a44 	movi	r2,41
   171cc:	00001206 	br	17218 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   171d0:	e0bff917 	ldw	r2,-28(fp)
   171d4:	10800058 	cmpnei	r2,r2,1
   171d8:	1000061e 	bne	r2,zero,171f4 <OSTaskQuery+0xf4>
   171dc:	e0bff817 	ldw	r2,-32(fp)
   171e0:	e0bffc15 	stw	r2,-16(fp)
   171e4:	e0bffc17 	ldw	r2,-16(fp)
   171e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   171ec:	008010c4 	movi	r2,67
   171f0:	00000906 	br	17218 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   171f4:	e13fff17 	ldw	r4,-4(fp)
   171f8:	e17ff917 	ldw	r5,-28(fp)
   171fc:	01801b04 	movi	r6,108
   17200:	00114240 	call	11424 <OS_MemCopy>
   17204:	e0bff817 	ldw	r2,-32(fp)
   17208:	e0bffd15 	stw	r2,-12(fp)
   1720c:	e0bffd17 	ldw	r2,-12(fp)
   17210:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17214:	0005883a 	mov	r2,zero
}
   17218:	e037883a 	mov	sp,fp
   1721c:	dfc00117 	ldw	ra,4(sp)
   17220:	df000017 	ldw	fp,0(sp)
   17224:	dec00204 	addi	sp,sp,8
   17228:	f800283a 	ret

0001722c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1722c:	defffc04 	addi	sp,sp,-16
   17230:	df000315 	stw	fp,12(sp)
   17234:	df000304 	addi	fp,sp,12
   17238:	e13ffd15 	stw	r4,-12(fp)
   1723c:	e17ffe15 	stw	r5,-8(fp)
   17240:	3005883a 	mov	r2,r6
   17244:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   17248:	e0bfff0b 	ldhu	r2,-4(fp)
   1724c:	1080004c 	andi	r2,r2,1
   17250:	10000d26 	beq	r2,zero,17288 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   17254:	e0bfff0b 	ldhu	r2,-4(fp)
   17258:	1080008c 	andi	r2,r2,2
   1725c:	10000a26 	beq	r2,zero,17288 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17260:	00000706 	br	17280 <OS_TaskStkClr+0x54>
                size--;
   17264:	e0bffe17 	ldw	r2,-8(fp)
   17268:	10bfffc4 	addi	r2,r2,-1
   1726c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   17270:	e0bffd17 	ldw	r2,-12(fp)
   17274:	10c00104 	addi	r3,r2,4
   17278:	e0fffd15 	stw	r3,-12(fp)
   1727c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17280:	e0bffe17 	ldw	r2,-8(fp)
   17284:	103ff71e 	bne	r2,zero,17264 <__alt_mem_Flash_flash_data+0xf4017264>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   17288:	e037883a 	mov	sp,fp
   1728c:	df000017 	ldw	fp,0(sp)
   17290:	dec00104 	addi	sp,sp,4
   17294:	f800283a 	ret

00017298 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   17298:	defff904 	addi	sp,sp,-28
   1729c:	dfc00615 	stw	ra,24(sp)
   172a0:	df000515 	stw	fp,20(sp)
   172a4:	df000504 	addi	fp,sp,20
   172a8:	2005883a 	mov	r2,r4
   172ac:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   172b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   172b4:	008000b4 	movhi	r2,2
   172b8:	10bfa704 	addi	r2,r2,-356
   172bc:	10800003 	ldbu	r2,0(r2)
   172c0:	10803fcc 	andi	r2,r2,255
   172c4:	10000126 	beq	r2,zero,172cc <OSTimeDly+0x34>
        return;
   172c8:	00004006 	br	173cc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   172cc:	e0bfff0b 	ldhu	r2,-4(fp)
   172d0:	10003e26 	beq	r2,zero,173cc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172d4:	0005303a 	rdctl	r2,status
   172d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172dc:	e0fffd17 	ldw	r3,-12(fp)
   172e0:	00bfff84 	movi	r2,-2
   172e4:	1884703a 	and	r2,r3,r2
   172e8:	1001703a 	wrctl	status,r2
  
  return context;
   172ec:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   172f0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   172f4:	008000b4 	movhi	r2,2
   172f8:	10bfa804 	addi	r2,r2,-352
   172fc:	10800017 	ldw	r2,0(r2)
   17300:	10800d03 	ldbu	r2,52(r2)
   17304:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17308:	e0fffc03 	ldbu	r3,-16(fp)
   1730c:	e13ffc03 	ldbu	r4,-16(fp)
   17310:	008000b4 	movhi	r2,2
   17314:	10bfa544 	addi	r2,r2,-363
   17318:	1105883a 	add	r2,r2,r4
   1731c:	10800003 	ldbu	r2,0(r2)
   17320:	1009883a 	mov	r4,r2
   17324:	008000b4 	movhi	r2,2
   17328:	10bfa804 	addi	r2,r2,-352
   1732c:	10800017 	ldw	r2,0(r2)
   17330:	10800d43 	ldbu	r2,53(r2)
   17334:	0084303a 	nor	r2,zero,r2
   17338:	2084703a 	and	r2,r4,r2
   1733c:	1009883a 	mov	r4,r2
   17340:	008000b4 	movhi	r2,2
   17344:	10bfa544 	addi	r2,r2,-363
   17348:	10c5883a 	add	r2,r2,r3
   1734c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   17350:	e0fffc03 	ldbu	r3,-16(fp)
   17354:	008000b4 	movhi	r2,2
   17358:	10bfa544 	addi	r2,r2,-363
   1735c:	10c5883a 	add	r2,r2,r3
   17360:	10800003 	ldbu	r2,0(r2)
   17364:	10803fcc 	andi	r2,r2,255
   17368:	10000e1e 	bne	r2,zero,173a4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1736c:	008000b4 	movhi	r2,2
   17370:	10bfa804 	addi	r2,r2,-352
   17374:	10800017 	ldw	r2,0(r2)
   17378:	10800d83 	ldbu	r2,54(r2)
   1737c:	0084303a 	nor	r2,zero,r2
   17380:	1007883a 	mov	r3,r2
   17384:	008000b4 	movhi	r2,2
   17388:	10bfa504 	addi	r2,r2,-364
   1738c:	10800003 	ldbu	r2,0(r2)
   17390:	1884703a 	and	r2,r3,r2
   17394:	1007883a 	mov	r3,r2
   17398:	008000b4 	movhi	r2,2
   1739c:	10bfa504 	addi	r2,r2,-364
   173a0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   173a4:	008000b4 	movhi	r2,2
   173a8:	10bfa804 	addi	r2,r2,-352
   173ac:	10800017 	ldw	r2,0(r2)
   173b0:	e0ffff0b 	ldhu	r3,-4(fp)
   173b4:	10c00b8d 	sth	r3,46(r2)
   173b8:	e0bffb17 	ldw	r2,-20(fp)
   173bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173c0:	e0bffe17 	ldw	r2,-8(fp)
   173c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   173c8:	00114880 	call	11488 <OS_Sched>
    }
}
   173cc:	e037883a 	mov	sp,fp
   173d0:	dfc00117 	ldw	ra,4(sp)
   173d4:	df000017 	ldw	fp,0(sp)
   173d8:	dec00204 	addi	sp,sp,8
   173dc:	f800283a 	ret

000173e0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   173e0:	defff804 	addi	sp,sp,-32
   173e4:	dfc00715 	stw	ra,28(sp)
   173e8:	df000615 	stw	fp,24(sp)
   173ec:	df000604 	addi	fp,sp,24
   173f0:	2015883a 	mov	r10,r4
   173f4:	2809883a 	mov	r4,r5
   173f8:	3007883a 	mov	r3,r6
   173fc:	3805883a 	mov	r2,r7
   17400:	e2bffc05 	stb	r10,-16(fp)
   17404:	e13ffd05 	stb	r4,-12(fp)
   17408:	e0fffe05 	stb	r3,-8(fp)
   1740c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17410:	008000b4 	movhi	r2,2
   17414:	10bfa704 	addi	r2,r2,-356
   17418:	10800003 	ldbu	r2,0(r2)
   1741c:	10803fcc 	andi	r2,r2,255
   17420:	10000226 	beq	r2,zero,1742c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   17424:	00801544 	movi	r2,85
   17428:	00004206 	br	17534 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1742c:	e0bffc03 	ldbu	r2,-16(fp)
   17430:	1000081e 	bne	r2,zero,17454 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   17434:	e0bffd03 	ldbu	r2,-12(fp)
   17438:	1000061e 	bne	r2,zero,17454 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1743c:	e0bffe03 	ldbu	r2,-8(fp)
   17440:	1000041e 	bne	r2,zero,17454 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   17444:	e0bfff0b 	ldhu	r2,-4(fp)
   17448:	1000021e 	bne	r2,zero,17454 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1744c:	00801504 	movi	r2,84
   17450:	00003806 	br	17534 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   17454:	e0bffd03 	ldbu	r2,-12(fp)
   17458:	10800f30 	cmpltui	r2,r2,60
   1745c:	1000021e 	bne	r2,zero,17468 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   17460:	00801444 	movi	r2,81
   17464:	00003306 	br	17534 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   17468:	e0bffe03 	ldbu	r2,-8(fp)
   1746c:	10800f30 	cmpltui	r2,r2,60
   17470:	1000021e 	bne	r2,zero,1747c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   17474:	00801484 	movi	r2,82
   17478:	00002e06 	br	17534 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1747c:	e0bfff0b 	ldhu	r2,-4(fp)
   17480:	1080fa30 	cmpltui	r2,r2,1000
   17484:	1000021e 	bne	r2,zero,17490 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   17488:	008014c4 	movi	r2,83
   1748c:	00002906 	br	17534 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17490:	e0bffc03 	ldbu	r2,-16(fp)
   17494:	10c38424 	muli	r3,r2,3600
   17498:	e0bffd03 	ldbu	r2,-12(fp)
   1749c:	10800f24 	muli	r2,r2,60
   174a0:	1887883a 	add	r3,r3,r2
   174a4:	e0bffe03 	ldbu	r2,-8(fp)
   174a8:	1885883a 	add	r2,r3,r2
   174ac:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   174b0:	e0bfff0b 	ldhu	r2,-4(fp)
   174b4:	10800f84 	addi	r2,r2,62
   174b8:	100690fa 	slli	r3,r2,3
   174bc:	008418b4 	movhi	r2,4194
   174c0:	109374c4 	addi	r2,r2,19923
   174c4:	188a383a 	mulxuu	r5,r3,r2
   174c8:	1885383a 	mul	r2,r3,r2
   174cc:	1011883a 	mov	r8,r2
   174d0:	2813883a 	mov	r9,r5
   174d4:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   174d8:	2085883a 	add	r2,r4,r2
   174dc:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   174e0:	e0bffb17 	ldw	r2,-20(fp)
   174e4:	1004d43a 	srli	r2,r2,16
   174e8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   174ec:	e0bffb17 	ldw	r2,-20(fp)
   174f0:	10bfffcc 	andi	r2,r2,65535
   174f4:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   174f8:	e0bffb17 	ldw	r2,-20(fp)
   174fc:	10bfffcc 	andi	r2,r2,65535
   17500:	1009883a 	mov	r4,r2
   17504:	00172980 	call	17298 <OSTimeDly>
    while (loops > 0) {
   17508:	00000706 	br	17528 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1750c:	01200014 	movui	r4,32768
   17510:	00172980 	call	17298 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   17514:	01200014 	movui	r4,32768
   17518:	00172980 	call	17298 <OSTimeDly>
        loops--;
   1751c:	e0bffa0b 	ldhu	r2,-24(fp)
   17520:	10bfffc4 	addi	r2,r2,-1
   17524:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   17528:	e0bffa0b 	ldhu	r2,-24(fp)
   1752c:	103ff71e 	bne	r2,zero,1750c <__alt_mem_Flash_flash_data+0xf401750c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   17530:	0005883a 	mov	r2,zero
}
   17534:	e037883a 	mov	sp,fp
   17538:	dfc00117 	ldw	ra,4(sp)
   1753c:	df000017 	ldw	fp,0(sp)
   17540:	dec00204 	addi	sp,sp,8
   17544:	f800283a 	ret

00017548 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   17548:	defff504 	addi	sp,sp,-44
   1754c:	dfc00a15 	stw	ra,40(sp)
   17550:	df000915 	stw	fp,36(sp)
   17554:	df000904 	addi	fp,sp,36
   17558:	2005883a 	mov	r2,r4
   1755c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17560:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   17564:	e0bfff03 	ldbu	r2,-4(fp)
   17568:	10800530 	cmpltui	r2,r2,20
   1756c:	1000021e 	bne	r2,zero,17578 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17570:	00800a84 	movi	r2,42
   17574:	00006b06 	br	17724 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17578:	0005303a 	rdctl	r2,status
   1757c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17580:	e0fff917 	ldw	r3,-28(fp)
   17584:	00bfff84 	movi	r2,-2
   17588:	1884703a 	and	r2,r3,r2
   1758c:	1001703a 	wrctl	status,r2
  
  return context;
   17590:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17594:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   17598:	e0ffff03 	ldbu	r3,-4(fp)
   1759c:	008000b4 	movhi	r2,2
   175a0:	108c3004 	addi	r2,r2,12480
   175a4:	18c7883a 	add	r3,r3,r3
   175a8:	18c7883a 	add	r3,r3,r3
   175ac:	10c5883a 	add	r2,r2,r3
   175b0:	10800017 	ldw	r2,0(r2)
   175b4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   175b8:	e0bff817 	ldw	r2,-32(fp)
   175bc:	1000061e 	bne	r2,zero,175d8 <OSTimeDlyResume+0x90>
   175c0:	e0bff717 	ldw	r2,-36(fp)
   175c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175c8:	e0bffa17 	ldw	r2,-24(fp)
   175cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   175d0:	008010c4 	movi	r2,67
   175d4:	00005306 	br	17724 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   175d8:	e0bff817 	ldw	r2,-32(fp)
   175dc:	10800058 	cmpnei	r2,r2,1
   175e0:	1000061e 	bne	r2,zero,175fc <OSTimeDlyResume+0xb4>
   175e4:	e0bff717 	ldw	r2,-36(fp)
   175e8:	e0bffb15 	stw	r2,-20(fp)
   175ec:	e0bffb17 	ldw	r2,-20(fp)
   175f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   175f4:	008010c4 	movi	r2,67
   175f8:	00004a06 	br	17724 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   175fc:	e0bff817 	ldw	r2,-32(fp)
   17600:	10800b8b 	ldhu	r2,46(r2)
   17604:	10bfffcc 	andi	r2,r2,65535
   17608:	1000061e 	bne	r2,zero,17624 <OSTimeDlyResume+0xdc>
   1760c:	e0bff717 	ldw	r2,-36(fp)
   17610:	e0bffc15 	stw	r2,-16(fp)
   17614:	e0bffc17 	ldw	r2,-16(fp)
   17618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1761c:	00801404 	movi	r2,80
   17620:	00004006 	br	17724 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   17624:	e0bff817 	ldw	r2,-32(fp)
   17628:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1762c:	e0bff817 	ldw	r2,-32(fp)
   17630:	10800c03 	ldbu	r2,48(r2)
   17634:	10803fcc 	andi	r2,r2,255
   17638:	10800dcc 	andi	r2,r2,55
   1763c:	10000b26 	beq	r2,zero,1766c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17640:	e0bff817 	ldw	r2,-32(fp)
   17644:	10c00c03 	ldbu	r3,48(r2)
   17648:	00bff204 	movi	r2,-56
   1764c:	1884703a 	and	r2,r3,r2
   17650:	1007883a 	mov	r3,r2
   17654:	e0bff817 	ldw	r2,-32(fp)
   17658:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1765c:	e0bff817 	ldw	r2,-32(fp)
   17660:	00c00044 	movi	r3,1
   17664:	10c00c45 	stb	r3,49(r2)
   17668:	00000206 	br	17674 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1766c:	e0bff817 	ldw	r2,-32(fp)
   17670:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   17674:	e0bff817 	ldw	r2,-32(fp)
   17678:	10800c03 	ldbu	r2,48(r2)
   1767c:	10803fcc 	andi	r2,r2,255
   17680:	1080020c 	andi	r2,r2,8
   17684:	1000221e 	bne	r2,zero,17710 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   17688:	e0bff817 	ldw	r2,-32(fp)
   1768c:	10c00d83 	ldbu	r3,54(r2)
   17690:	008000b4 	movhi	r2,2
   17694:	10bfa504 	addi	r2,r2,-364
   17698:	10800003 	ldbu	r2,0(r2)
   1769c:	1884b03a 	or	r2,r3,r2
   176a0:	1007883a 	mov	r3,r2
   176a4:	008000b4 	movhi	r2,2
   176a8:	10bfa504 	addi	r2,r2,-364
   176ac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   176b0:	e0bff817 	ldw	r2,-32(fp)
   176b4:	10800d03 	ldbu	r2,52(r2)
   176b8:	10c03fcc 	andi	r3,r2,255
   176bc:	e0bff817 	ldw	r2,-32(fp)
   176c0:	10800d03 	ldbu	r2,52(r2)
   176c4:	11003fcc 	andi	r4,r2,255
   176c8:	008000b4 	movhi	r2,2
   176cc:	10bfa544 	addi	r2,r2,-363
   176d0:	1105883a 	add	r2,r2,r4
   176d4:	11000003 	ldbu	r4,0(r2)
   176d8:	e0bff817 	ldw	r2,-32(fp)
   176dc:	10800d43 	ldbu	r2,53(r2)
   176e0:	2084b03a 	or	r2,r4,r2
   176e4:	1009883a 	mov	r4,r2
   176e8:	008000b4 	movhi	r2,2
   176ec:	10bfa544 	addi	r2,r2,-363
   176f0:	10c5883a 	add	r2,r2,r3
   176f4:	11000005 	stb	r4,0(r2)
   176f8:	e0bff717 	ldw	r2,-36(fp)
   176fc:	e0bffd15 	stw	r2,-12(fp)
   17700:	e0bffd17 	ldw	r2,-12(fp)
   17704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   17708:	00114880 	call	11488 <OS_Sched>
   1770c:	00000406 	br	17720 <OSTimeDlyResume+0x1d8>
   17710:	e0bff717 	ldw	r2,-36(fp)
   17714:	e0bffe15 	stw	r2,-8(fp)
   17718:	e0bffe17 	ldw	r2,-8(fp)
   1771c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   17720:	0005883a 	mov	r2,zero
}
   17724:	e037883a 	mov	sp,fp
   17728:	dfc00117 	ldw	ra,4(sp)
   1772c:	df000017 	ldw	fp,0(sp)
   17730:	dec00204 	addi	sp,sp,8
   17734:	f800283a 	ret

00017738 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   17738:	defffb04 	addi	sp,sp,-20
   1773c:	df000415 	stw	fp,16(sp)
   17740:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17744:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17748:	0005303a 	rdctl	r2,status
   1774c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17750:	e0fffe17 	ldw	r3,-8(fp)
   17754:	00bfff84 	movi	r2,-2
   17758:	1884703a 	and	r2,r3,r2
   1775c:	1001703a 	wrctl	status,r2
  
  return context;
   17760:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   17764:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   17768:	008000b4 	movhi	r2,2
   1776c:	10bfa904 	addi	r2,r2,-348
   17770:	10800017 	ldw	r2,0(r2)
   17774:	e0bffd15 	stw	r2,-12(fp)
   17778:	e0bffc17 	ldw	r2,-16(fp)
   1777c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17780:	e0bfff17 	ldw	r2,-4(fp)
   17784:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   17788:	e0bffd17 	ldw	r2,-12(fp)
}
   1778c:	e037883a 	mov	sp,fp
   17790:	df000017 	ldw	fp,0(sp)
   17794:	dec00104 	addi	sp,sp,4
   17798:	f800283a 	ret

0001779c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1779c:	defffb04 	addi	sp,sp,-20
   177a0:	df000415 	stw	fp,16(sp)
   177a4:	df000404 	addi	fp,sp,16
   177a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177b0:	0005303a 	rdctl	r2,status
   177b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177b8:	e0fffd17 	ldw	r3,-12(fp)
   177bc:	00bfff84 	movi	r2,-2
   177c0:	1884703a 	and	r2,r3,r2
   177c4:	1001703a 	wrctl	status,r2
  
  return context;
   177c8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   177cc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   177d0:	008000b4 	movhi	r2,2
   177d4:	10bfa904 	addi	r2,r2,-348
   177d8:	e0ffff17 	ldw	r3,-4(fp)
   177dc:	10c00015 	stw	r3,0(r2)
   177e0:	e0bffc17 	ldw	r2,-16(fp)
   177e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177e8:	e0bffe17 	ldw	r2,-8(fp)
   177ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   177f0:	e037883a 	mov	sp,fp
   177f4:	df000017 	ldw	fp,0(sp)
   177f8:	dec00104 	addi	sp,sp,4
   177fc:	f800283a 	ret

00017800 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17800:	defffd04 	addi	sp,sp,-12
   17804:	dfc00215 	stw	ra,8(sp)
   17808:	df000115 	stw	fp,4(sp)
   1780c:	df000104 	addi	fp,sp,4
   17810:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17814:	e13fff17 	ldw	r4,-4(fp)
   17818:	014000b4 	movhi	r5,2
   1781c:	2977c304 	addi	r5,r5,-8436
   17820:	001a2e00 	call	1a2e0 <alt_dev_llist_insert>
}
   17824:	e037883a 	mov	sp,fp
   17828:	dfc00117 	ldw	ra,4(sp)
   1782c:	df000017 	ldw	fp,0(sp)
   17830:	dec00204 	addi	sp,sp,8
   17834:	f800283a 	ret

00017838 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17838:	defffd04 	addi	sp,sp,-12
   1783c:	dfc00215 	stw	ra,8(sp)
   17840:	df000115 	stw	fp,4(sp)
   17844:	df000104 	addi	fp,sp,4
   17848:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1784c:	001ac540 	call	1ac54 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17850:	00800044 	movi	r2,1
   17854:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   17858:	e037883a 	mov	sp,fp
   1785c:	dfc00117 	ldw	ra,4(sp)
   17860:	df000017 	ldw	fp,0(sp)
   17864:	dec00204 	addi	sp,sp,8
   17868:	f800283a 	ret

0001786c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1786c:	defffd04 	addi	sp,sp,-12
   17870:	dfc00215 	stw	ra,8(sp)
   17874:	df000115 	stw	fp,4(sp)
   17878:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1787c:	01040034 	movhi	r4,4096
   17880:	21080004 	addi	r4,r4,8192
   17884:	000b883a 	mov	r5,zero
   17888:	000d883a 	mov	r6,zero
   1788c:	01c00204 	movi	r7,8
   17890:	00189e00 	call	189e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   17894:	010000b4 	movhi	r4,2
   17898:	21324004 	addi	r4,r4,-14080
   1789c:	000b883a 	mov	r5,zero
   178a0:	01800204 	movi	r6,8
   178a4:	0017da80 	call	17da8 <altera_avalon_jtag_uart_init>
   178a8:	010000b4 	movhi	r4,2
   178ac:	21323604 	addi	r4,r4,-14120
   178b0:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   178b4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   178b8:	010000b4 	movhi	r4,2
   178bc:	21365104 	addi	r4,r4,-9916
   178c0:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   178c4:	010000b4 	movhi	r4,2
   178c8:	21365d04 	addi	r4,r4,-9868
   178cc:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   178d0:	010000b4 	movhi	r4,2
   178d4:	21366904 	addi	r4,r4,-9820
   178d8:	0018b100 	call	18b10 <alt_up_character_lcd_init>
   178dc:	010000b4 	movhi	r4,2
   178e0:	21366904 	addi	r4,r4,-9820
   178e4:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   178e8:	010000b4 	movhi	r4,2
   178ec:	21367404 	addi	r4,r4,-9776
   178f0:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   178f4:	010000b4 	movhi	r4,2
   178f8:	21367f04 	addi	r4,r4,-9732
   178fc:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   17900:	010000b4 	movhi	r4,2
   17904:	21368a04 	addi	r4,r4,-9688
   17908:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1790c:	010000b4 	movhi	r4,2
   17910:	21369504 	addi	r4,r4,-9644
   17914:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   17918:	010000b4 	movhi	r4,2
   1791c:	2136a004 	addi	r4,r4,-9600
   17920:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   17924:	010000b4 	movhi	r4,2
   17928:	2136ab04 	addi	r4,r4,-9556
   1792c:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   17930:	010000b4 	movhi	r4,2
   17934:	2136b604 	addi	r4,r4,-9512
   17938:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1793c:	010000b4 	movhi	r4,2
   17940:	2136c104 	addi	r4,r4,-9468
   17944:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   17948:	010000b4 	movhi	r4,2
   1794c:	2136cc04 	addi	r4,r4,-9424
   17950:	00193e80 	call	193e8 <alt_up_ps2_init>
   17954:	010000b4 	movhi	r4,2
   17958:	2136cc04 	addi	r4,r4,-9424
   1795c:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   17960:	010000b4 	movhi	r4,2
   17964:	2136da04 	addi	r4,r4,-9368
   17968:	00193e80 	call	193e8 <alt_up_ps2_init>
   1796c:	010000b4 	movhi	r4,2
   17970:	2136da04 	addi	r4,r4,-9368
   17974:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   17978:	010000b4 	movhi	r4,2
   1797c:	2136e804 	addi	r4,r4,-9312
   17980:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   17984:	010000b4 	movhi	r4,2
   17988:	2136f304 	addi	r4,r4,-9268
   1798c:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   17990:	008000b4 	movhi	r2,2
   17994:	10b70004 	addi	r2,r2,-9216
   17998:	10800a17 	ldw	r2,40(r2)
   1799c:	10800104 	addi	r2,r2,4
   179a0:	10800017 	ldw	r2,0(r2)
   179a4:	10ffffcc 	andi	r3,r2,65535
   179a8:	008000b4 	movhi	r2,2
   179ac:	10b70004 	addi	r2,r2,-9216
   179b0:	10c00c15 	stw	r3,48(r2)
   179b4:	008000b4 	movhi	r2,2
   179b8:	10b70004 	addi	r2,r2,-9216
   179bc:	10800a17 	ldw	r2,40(r2)
   179c0:	10800104 	addi	r2,r2,4
   179c4:	10800017 	ldw	r2,0(r2)
   179c8:	1006d43a 	srli	r3,r2,16
   179cc:	008000b4 	movhi	r2,2
   179d0:	10b70004 	addi	r2,r2,-9216
   179d4:	10c00d15 	stw	r3,52(r2)
   179d8:	008000b4 	movhi	r2,2
   179dc:	10b70004 	addi	r2,r2,-9216
   179e0:	10800c17 	ldw	r2,48(r2)
   179e4:	10801068 	cmpgeui	r2,r2,65
   179e8:	1000081e 	bne	r2,zero,17a0c <alt_sys_init+0x1a0>
   179ec:	008000b4 	movhi	r2,2
   179f0:	10b70004 	addi	r2,r2,-9216
   179f4:	00c00fc4 	movi	r3,63
   179f8:	10c00f15 	stw	r3,60(r2)
   179fc:	008000b4 	movhi	r2,2
   17a00:	10b70004 	addi	r2,r2,-9216
   17a04:	00c00184 	movi	r3,6
   17a08:	10c01015 	stw	r3,64(r2)
   17a0c:	008000b4 	movhi	r2,2
   17a10:	10b70004 	addi	r2,r2,-9216
   17a14:	10800d17 	ldw	r2,52(r2)
   17a18:	10800868 	cmpgeui	r2,r2,33
   17a1c:	1000041e 	bne	r2,zero,17a30 <alt_sys_init+0x1c4>
   17a20:	008000b4 	movhi	r2,2
   17a24:	10b70004 	addi	r2,r2,-9216
   17a28:	00c007c4 	movi	r3,31
   17a2c:	10c01115 	stw	r3,68(r2)
   17a30:	010000b4 	movhi	r4,2
   17a34:	21370004 	addi	r4,r4,-9216
   17a38:	0019d000 	call	19d00 <alt_up_char_buffer_init>
   17a3c:	010000b4 	movhi	r4,2
   17a40:	21370004 	addi	r4,r4,-9216
   17a44:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   17a48:	008000b4 	movhi	r2,2
   17a4c:	10b71204 	addi	r2,r2,-9144
   17a50:	10800a17 	ldw	r2,40(r2)
   17a54:	10800017 	ldw	r2,0(r2)
   17a58:	1007883a 	mov	r3,r2
   17a5c:	008000b4 	movhi	r2,2
   17a60:	10b71204 	addi	r2,r2,-9144
   17a64:	10c00b15 	stw	r3,44(r2)
   17a68:	008000b4 	movhi	r2,2
   17a6c:	10b71204 	addi	r2,r2,-9144
   17a70:	10800a17 	ldw	r2,40(r2)
   17a74:	10800104 	addi	r2,r2,4
   17a78:	10800017 	ldw	r2,0(r2)
   17a7c:	1007883a 	mov	r3,r2
   17a80:	008000b4 	movhi	r2,2
   17a84:	10b71204 	addi	r2,r2,-9144
   17a88:	10c00c15 	stw	r3,48(r2)
   17a8c:	008000b4 	movhi	r2,2
   17a90:	10b71204 	addi	r2,r2,-9144
   17a94:	10800a17 	ldw	r2,40(r2)
   17a98:	10800204 	addi	r2,r2,8
   17a9c:	10800017 	ldw	r2,0(r2)
   17aa0:	10ffffcc 	andi	r3,r2,65535
   17aa4:	008000b4 	movhi	r2,2
   17aa8:	10b71204 	addi	r2,r2,-9144
   17aac:	10c00f15 	stw	r3,60(r2)
   17ab0:	008000b4 	movhi	r2,2
   17ab4:	10b71204 	addi	r2,r2,-9144
   17ab8:	10800a17 	ldw	r2,40(r2)
   17abc:	10800204 	addi	r2,r2,8
   17ac0:	10800017 	ldw	r2,0(r2)
   17ac4:	1006d43a 	srli	r3,r2,16
   17ac8:	008000b4 	movhi	r2,2
   17acc:	10b71204 	addi	r2,r2,-9144
   17ad0:	10c01015 	stw	r3,64(r2)
   17ad4:	008000b4 	movhi	r2,2
   17ad8:	10b71204 	addi	r2,r2,-9144
   17adc:	10800a17 	ldw	r2,40(r2)
   17ae0:	10800304 	addi	r2,r2,12
   17ae4:	10800017 	ldw	r2,0(r2)
   17ae8:	1005d07a 	srai	r2,r2,1
   17aec:	10c0004c 	andi	r3,r2,1
   17af0:	008000b4 	movhi	r2,2
   17af4:	10b71204 	addi	r2,r2,-9144
   17af8:	10c00d15 	stw	r3,52(r2)
   17afc:	008000b4 	movhi	r2,2
   17b00:	10b71204 	addi	r2,r2,-9144
   17b04:	10800a17 	ldw	r2,40(r2)
   17b08:	10800304 	addi	r2,r2,12
   17b0c:	10800017 	ldw	r2,0(r2)
   17b10:	1005d13a 	srai	r2,r2,4
   17b14:	10c003cc 	andi	r3,r2,15
   17b18:	008000b4 	movhi	r2,2
   17b1c:	10b71204 	addi	r2,r2,-9144
   17b20:	10c00e15 	stw	r3,56(r2)
   17b24:	008000b4 	movhi	r2,2
   17b28:	10b71204 	addi	r2,r2,-9144
   17b2c:	10800a17 	ldw	r2,40(r2)
   17b30:	10800304 	addi	r2,r2,12
   17b34:	10800017 	ldw	r2,0(r2)
   17b38:	1005d43a 	srai	r2,r2,16
   17b3c:	e0bfff05 	stb	r2,-4(fp)
   17b40:	008000b4 	movhi	r2,2
   17b44:	10b71204 	addi	r2,r2,-9144
   17b48:	10800a17 	ldw	r2,40(r2)
   17b4c:	10800304 	addi	r2,r2,12
   17b50:	10800017 	ldw	r2,0(r2)
   17b54:	1004d63a 	srli	r2,r2,24
   17b58:	e0bfff45 	stb	r2,-3(fp)
   17b5c:	008000b4 	movhi	r2,2
   17b60:	10b71204 	addi	r2,r2,-9144
   17b64:	10800e17 	ldw	r2,56(r2)
   17b68:	10800058 	cmpnei	r2,r2,1
   17b6c:	1000041e 	bne	r2,zero,17b80 <alt_sys_init+0x314>
   17b70:	008000b4 	movhi	r2,2
   17b74:	10b71204 	addi	r2,r2,-9144
   17b78:	10001115 	stw	zero,68(r2)
   17b7c:	00000e06 	br	17bb8 <alt_sys_init+0x34c>
   17b80:	008000b4 	movhi	r2,2
   17b84:	10b71204 	addi	r2,r2,-9144
   17b88:	10800e17 	ldw	r2,56(r2)
   17b8c:	10800098 	cmpnei	r2,r2,2
   17b90:	1000051e 	bne	r2,zero,17ba8 <alt_sys_init+0x33c>
   17b94:	008000b4 	movhi	r2,2
   17b98:	10b71204 	addi	r2,r2,-9144
   17b9c:	00c00044 	movi	r3,1
   17ba0:	10c01115 	stw	r3,68(r2)
   17ba4:	00000406 	br	17bb8 <alt_sys_init+0x34c>
   17ba8:	008000b4 	movhi	r2,2
   17bac:	10b71204 	addi	r2,r2,-9144
   17bb0:	00c00084 	movi	r3,2
   17bb4:	10c01115 	stw	r3,68(r2)
   17bb8:	e0bfff03 	ldbu	r2,-4(fp)
   17bbc:	00c00804 	movi	r3,32
   17bc0:	1885c83a 	sub	r2,r3,r2
   17bc4:	00ffffc4 	movi	r3,-1
   17bc8:	1886d83a 	srl	r3,r3,r2
   17bcc:	008000b4 	movhi	r2,2
   17bd0:	10b71204 	addi	r2,r2,-9144
   17bd4:	10c01215 	stw	r3,72(r2)
   17bd8:	e0ffff03 	ldbu	r3,-4(fp)
   17bdc:	008000b4 	movhi	r2,2
   17be0:	10b71204 	addi	r2,r2,-9144
   17be4:	10801117 	ldw	r2,68(r2)
   17be8:	1887883a 	add	r3,r3,r2
   17bec:	008000b4 	movhi	r2,2
   17bf0:	10b71204 	addi	r2,r2,-9144
   17bf4:	10c01315 	stw	r3,76(r2)
   17bf8:	e0bfff43 	ldbu	r2,-3(fp)
   17bfc:	00c00804 	movi	r3,32
   17c00:	1885c83a 	sub	r2,r3,r2
   17c04:	00ffffc4 	movi	r3,-1
   17c08:	1886d83a 	srl	r3,r3,r2
   17c0c:	008000b4 	movhi	r2,2
   17c10:	10b71204 	addi	r2,r2,-9144
   17c14:	10c01415 	stw	r3,80(r2)
   17c18:	010000b4 	movhi	r4,2
   17c1c:	21371204 	addi	r4,r4,-9144
   17c20:	00178000 	call	17800 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   17c24:	010000b4 	movhi	r4,2
   17c28:	21372704 	addi	r4,r4,-9060
   17c2c:	00178000 	call	17800 <alt_dev_reg>
}
   17c30:	e037883a 	mov	sp,fp
   17c34:	dfc00117 	ldw	ra,4(sp)
   17c38:	df000017 	ldw	fp,0(sp)
   17c3c:	dec00204 	addi	sp,sp,8
   17c40:	f800283a 	ret

00017c44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17c44:	defffa04 	addi	sp,sp,-24
   17c48:	dfc00515 	stw	ra,20(sp)
   17c4c:	df000415 	stw	fp,16(sp)
   17c50:	df000404 	addi	fp,sp,16
   17c54:	e13ffd15 	stw	r4,-12(fp)
   17c58:	e17ffe15 	stw	r5,-8(fp)
   17c5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17c60:	e0bffd17 	ldw	r2,-12(fp)
   17c64:	10800017 	ldw	r2,0(r2)
   17c68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17c6c:	e0bffc17 	ldw	r2,-16(fp)
   17c70:	10c00a04 	addi	r3,r2,40
   17c74:	e0bffd17 	ldw	r2,-12(fp)
   17c78:	10800217 	ldw	r2,8(r2)
   17c7c:	1809883a 	mov	r4,r3
   17c80:	e17ffe17 	ldw	r5,-8(fp)
   17c84:	e1bfff17 	ldw	r6,-4(fp)
   17c88:	100f883a 	mov	r7,r2
   17c8c:	00183f40 	call	183f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17c90:	e037883a 	mov	sp,fp
   17c94:	dfc00117 	ldw	ra,4(sp)
   17c98:	df000017 	ldw	fp,0(sp)
   17c9c:	dec00204 	addi	sp,sp,8
   17ca0:	f800283a 	ret

00017ca4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17ca4:	defffa04 	addi	sp,sp,-24
   17ca8:	dfc00515 	stw	ra,20(sp)
   17cac:	df000415 	stw	fp,16(sp)
   17cb0:	df000404 	addi	fp,sp,16
   17cb4:	e13ffd15 	stw	r4,-12(fp)
   17cb8:	e17ffe15 	stw	r5,-8(fp)
   17cbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17cc0:	e0bffd17 	ldw	r2,-12(fp)
   17cc4:	10800017 	ldw	r2,0(r2)
   17cc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17ccc:	e0bffc17 	ldw	r2,-16(fp)
   17cd0:	10c00a04 	addi	r3,r2,40
   17cd4:	e0bffd17 	ldw	r2,-12(fp)
   17cd8:	10800217 	ldw	r2,8(r2)
   17cdc:	1809883a 	mov	r4,r3
   17ce0:	e17ffe17 	ldw	r5,-8(fp)
   17ce4:	e1bfff17 	ldw	r6,-4(fp)
   17ce8:	100f883a 	mov	r7,r2
   17cec:	00186a80 	call	186a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17cf0:	e037883a 	mov	sp,fp
   17cf4:	dfc00117 	ldw	ra,4(sp)
   17cf8:	df000017 	ldw	fp,0(sp)
   17cfc:	dec00204 	addi	sp,sp,8
   17d00:	f800283a 	ret

00017d04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   17d04:	defffc04 	addi	sp,sp,-16
   17d08:	dfc00315 	stw	ra,12(sp)
   17d0c:	df000215 	stw	fp,8(sp)
   17d10:	df000204 	addi	fp,sp,8
   17d14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17d18:	e0bfff17 	ldw	r2,-4(fp)
   17d1c:	10800017 	ldw	r2,0(r2)
   17d20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   17d24:	e0bffe17 	ldw	r2,-8(fp)
   17d28:	10c00a04 	addi	r3,r2,40
   17d2c:	e0bfff17 	ldw	r2,-4(fp)
   17d30:	10800217 	ldw	r2,8(r2)
   17d34:	1809883a 	mov	r4,r3
   17d38:	100b883a 	mov	r5,r2
   17d3c:	00182a00 	call	182a0 <altera_avalon_jtag_uart_close>
}
   17d40:	e037883a 	mov	sp,fp
   17d44:	dfc00117 	ldw	ra,4(sp)
   17d48:	df000017 	ldw	fp,0(sp)
   17d4c:	dec00204 	addi	sp,sp,8
   17d50:	f800283a 	ret

00017d54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   17d54:	defffa04 	addi	sp,sp,-24
   17d58:	dfc00515 	stw	ra,20(sp)
   17d5c:	df000415 	stw	fp,16(sp)
   17d60:	df000404 	addi	fp,sp,16
   17d64:	e13ffd15 	stw	r4,-12(fp)
   17d68:	e17ffe15 	stw	r5,-8(fp)
   17d6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   17d70:	e0bffd17 	ldw	r2,-12(fp)
   17d74:	10800017 	ldw	r2,0(r2)
   17d78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   17d7c:	e0bffc17 	ldw	r2,-16(fp)
   17d80:	10800a04 	addi	r2,r2,40
   17d84:	1009883a 	mov	r4,r2
   17d88:	e17ffe17 	ldw	r5,-8(fp)
   17d8c:	e1bfff17 	ldw	r6,-4(fp)
   17d90:	00183080 	call	18308 <altera_avalon_jtag_uart_ioctl>
}
   17d94:	e037883a 	mov	sp,fp
   17d98:	dfc00117 	ldw	ra,4(sp)
   17d9c:	df000017 	ldw	fp,0(sp)
   17da0:	dec00204 	addi	sp,sp,8
   17da4:	f800283a 	ret

00017da8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   17da8:	defff104 	addi	sp,sp,-60
   17dac:	dfc00e15 	stw	ra,56(sp)
   17db0:	df000d15 	stw	fp,52(sp)
   17db4:	df000d04 	addi	fp,sp,52
   17db8:	e13ff915 	stw	r4,-28(fp)
   17dbc:	e17ffa15 	stw	r5,-24(fp)
   17dc0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   17dc4:	e0bff917 	ldw	r2,-28(fp)
   17dc8:	10800c04 	addi	r2,r2,48
   17dcc:	e0bff315 	stw	r2,-52(fp)
   17dd0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   17dd4:	e0fff40b 	ldhu	r3,-48(fp)
   17dd8:	e0bff884 	addi	r2,fp,-30
   17ddc:	1809883a 	mov	r4,r3
   17de0:	100b883a 	mov	r5,r2
   17de4:	0011ff40 	call	11ff4 <OSFlagCreate>
   17de8:	1007883a 	mov	r3,r2
   17dec:	e0bff317 	ldw	r2,-52(fp)
   17df0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   17df4:	e0bff917 	ldw	r2,-28(fp)
   17df8:	10800a04 	addi	r2,r2,40
   17dfc:	e0bff515 	stw	r2,-44(fp)
   17e00:	00800044 	movi	r2,1
   17e04:	e0bff60d 	sth	r2,-40(fp)
   17e08:	e0bff60b 	ldhu	r2,-40(fp)
   17e0c:	1009883a 	mov	r4,r2
   17e10:	0014f4c0 	call	14f4c <OSSemCreate>
   17e14:	1007883a 	mov	r3,r2
   17e18:	e0bff517 	ldw	r2,-44(fp)
   17e1c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   17e20:	e0bff917 	ldw	r2,-28(fp)
   17e24:	10800b04 	addi	r2,r2,44
   17e28:	e0bff715 	stw	r2,-36(fp)
   17e2c:	00800044 	movi	r2,1
   17e30:	e0bff80d 	sth	r2,-32(fp)
   17e34:	e0bff80b 	ldhu	r2,-32(fp)
   17e38:	1009883a 	mov	r4,r2
   17e3c:	0014f4c0 	call	14f4c <OSSemCreate>
   17e40:	1007883a 	mov	r3,r2
   17e44:	e0bff717 	ldw	r2,-36(fp)
   17e48:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17e4c:	e0bff917 	ldw	r2,-28(fp)
   17e50:	00c00044 	movi	r3,1
   17e54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   17e58:	e0bff917 	ldw	r2,-28(fp)
   17e5c:	10800017 	ldw	r2,0(r2)
   17e60:	10800104 	addi	r2,r2,4
   17e64:	1007883a 	mov	r3,r2
   17e68:	e0bff917 	ldw	r2,-28(fp)
   17e6c:	10800817 	ldw	r2,32(r2)
   17e70:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   17e74:	e0bffb17 	ldw	r2,-20(fp)
   17e78:	1009883a 	mov	r4,r2
   17e7c:	e17ff917 	ldw	r5,-28(fp)
   17e80:	01800074 	movhi	r6,1
   17e84:	319fba04 	addi	r6,r6,32488
   17e88:	001a6340 	call	1a634 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   17e8c:	e0bff917 	ldw	r2,-28(fp)
   17e90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   17e94:	e0bff917 	ldw	r2,-28(fp)
   17e98:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17e9c:	008000b4 	movhi	r2,2
   17ea0:	10bfaf04 	addi	r2,r2,-324
   17ea4:	10800017 	ldw	r2,0(r2)
   17ea8:	1809883a 	mov	r4,r3
   17eac:	100b883a 	mov	r5,r2
   17eb0:	018000b4 	movhi	r6,2
   17eb4:	31a06404 	addi	r6,r6,-32368
   17eb8:	e1fff917 	ldw	r7,-28(fp)
   17ebc:	0019fe80 	call	19fe8 <alt_alarm_start>
   17ec0:	1000040e 	bge	r2,zero,17ed4 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   17ec4:	e0fff917 	ldw	r3,-28(fp)
   17ec8:	00a00034 	movhi	r2,32768
   17ecc:	10bfffc4 	addi	r2,r2,-1
   17ed0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   17ed4:	e037883a 	mov	sp,fp
   17ed8:	dfc00117 	ldw	ra,4(sp)
   17edc:	df000017 	ldw	fp,0(sp)
   17ee0:	dec00204 	addi	sp,sp,8
   17ee4:	f800283a 	ret

00017ee8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   17ee8:	defff104 	addi	sp,sp,-60
   17eec:	dfc00e15 	stw	ra,56(sp)
   17ef0:	df000d15 	stw	fp,52(sp)
   17ef4:	df000d04 	addi	fp,sp,52
   17ef8:	e13ffe15 	stw	r4,-8(fp)
   17efc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   17f00:	e0bffe17 	ldw	r2,-8(fp)
   17f04:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   17f08:	e0bff517 	ldw	r2,-44(fp)
   17f0c:	10800017 	ldw	r2,0(r2)
   17f10:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17f14:	e0bff617 	ldw	r2,-40(fp)
   17f18:	10800104 	addi	r2,r2,4
   17f1c:	10800037 	ldwio	r2,0(r2)
   17f20:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   17f24:	e0bff717 	ldw	r2,-36(fp)
   17f28:	1080c00c 	andi	r2,r2,768
   17f2c:	1000011e 	bne	r2,zero,17f34 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   17f30:	00009206 	br	1817c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   17f34:	e0bff717 	ldw	r2,-36(fp)
   17f38:	1080400c 	andi	r2,r2,256
   17f3c:	10004726 	beq	r2,zero,1805c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   17f40:	00800074 	movhi	r2,1
   17f44:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17f48:	e0bff517 	ldw	r2,-44(fp)
   17f4c:	10800d17 	ldw	r2,52(r2)
   17f50:	10800044 	addi	r2,r2,1
   17f54:	1081ffcc 	andi	r2,r2,2047
   17f58:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   17f5c:	e0bff517 	ldw	r2,-44(fp)
   17f60:	10c00e17 	ldw	r3,56(r2)
   17f64:	e0bff817 	ldw	r2,-32(fp)
   17f68:	1880011e 	bne	r3,r2,17f70 <altera_avalon_jtag_uart_irq+0x88>
          break;
   17f6c:	00002906 	br	18014 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17f70:	e0bff617 	ldw	r2,-40(fp)
   17f74:	10800037 	ldwio	r2,0(r2)
   17f78:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   17f7c:	e0bff317 	ldw	r2,-52(fp)
   17f80:	10a0000c 	andi	r2,r2,32768
   17f84:	1000011e 	bne	r2,zero,17f8c <altera_avalon_jtag_uart_irq+0xa4>
          break;
   17f88:	00002206 	br	18014 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17f8c:	e0bff517 	ldw	r2,-44(fp)
   17f90:	10800d17 	ldw	r2,52(r2)
   17f94:	e0fff317 	ldw	r3,-52(fp)
   17f98:	1809883a 	mov	r4,r3
   17f9c:	e0fff517 	ldw	r3,-44(fp)
   17fa0:	1885883a 	add	r2,r3,r2
   17fa4:	10801104 	addi	r2,r2,68
   17fa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17fac:	e0bff517 	ldw	r2,-44(fp)
   17fb0:	10800d17 	ldw	r2,52(r2)
   17fb4:	10800044 	addi	r2,r2,1
   17fb8:	10c1ffcc 	andi	r3,r2,2047
   17fbc:	e0bff517 	ldw	r2,-44(fp)
   17fc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   17fc4:	e0bff517 	ldw	r2,-44(fp)
   17fc8:	10800c17 	ldw	r2,48(r2)
   17fcc:	e0bff915 	stw	r2,-28(fp)
   17fd0:	00800044 	movi	r2,1
   17fd4:	e0bffa0d 	sth	r2,-24(fp)
   17fd8:	00800044 	movi	r2,1
   17fdc:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17fe0:	008000b4 	movhi	r2,2
   17fe4:	10bf9944 	addi	r2,r2,-411
   17fe8:	10800003 	ldbu	r2,0(r2)
   17fec:	10803fcc 	andi	r2,r2,255
   17ff0:	103fd526 	beq	r2,zero,17f48 <__alt_mem_Flash_flash_data+0xf4017f48>
  {
    OSFlagPost (group, flags, opt, &err);
   17ff4:	e17ffa0b 	ldhu	r5,-24(fp)
   17ff8:	e0fffa83 	ldbu	r3,-22(fp)
   17ffc:	e0bffcc4 	addi	r2,fp,-13
   18000:	e13ff917 	ldw	r4,-28(fp)
   18004:	180d883a 	mov	r6,r3
   18008:	100f883a 	mov	r7,r2
   1800c:	0012c640 	call	12c64 <OSFlagPost>
      }
   18010:	003fcd06 	br	17f48 <__alt_mem_Flash_flash_data+0xf4017f48>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18014:	e0bff317 	ldw	r2,-52(fp)
   18018:	10bfffec 	andhi	r2,r2,65535
   1801c:	10000f26 	beq	r2,zero,1805c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18020:	e0bff517 	ldw	r2,-44(fp)
   18024:	10c00817 	ldw	r3,32(r2)
   18028:	00bfff84 	movi	r2,-2
   1802c:	1886703a 	and	r3,r3,r2
   18030:	e0bff517 	ldw	r2,-44(fp)
   18034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   18038:	e0bff617 	ldw	r2,-40(fp)
   1803c:	10800104 	addi	r2,r2,4
   18040:	1007883a 	mov	r3,r2
   18044:	e0bff517 	ldw	r2,-44(fp)
   18048:	10800817 	ldw	r2,32(r2)
   1804c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18050:	e0bff617 	ldw	r2,-40(fp)
   18054:	10800104 	addi	r2,r2,4
   18058:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1805c:	e0bff717 	ldw	r2,-36(fp)
   18060:	1080800c 	andi	r2,r2,512
   18064:	10004426 	beq	r2,zero,18178 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   18068:	e0bff717 	ldw	r2,-36(fp)
   1806c:	1004d43a 	srli	r2,r2,16
   18070:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   18074:	00002706 	br	18114 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   18078:	e0bff617 	ldw	r2,-40(fp)
   1807c:	e0fff517 	ldw	r3,-44(fp)
   18080:	18c01017 	ldw	r3,64(r3)
   18084:	e13ff517 	ldw	r4,-44(fp)
   18088:	20c7883a 	add	r3,r4,r3
   1808c:	18c21104 	addi	r3,r3,2116
   18090:	18c00003 	ldbu	r3,0(r3)
   18094:	18c03fcc 	andi	r3,r3,255
   18098:	18c0201c 	xori	r3,r3,128
   1809c:	18ffe004 	addi	r3,r3,-128
   180a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   180a4:	e0bff517 	ldw	r2,-44(fp)
   180a8:	10801017 	ldw	r2,64(r2)
   180ac:	10800044 	addi	r2,r2,1
   180b0:	10c1ffcc 	andi	r3,r2,2047
   180b4:	e0bff517 	ldw	r2,-44(fp)
   180b8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   180bc:	e0bff517 	ldw	r2,-44(fp)
   180c0:	10800c17 	ldw	r2,48(r2)
   180c4:	e0bffb15 	stw	r2,-20(fp)
   180c8:	00800084 	movi	r2,2
   180cc:	e0bffc0d 	sth	r2,-16(fp)
   180d0:	00800044 	movi	r2,1
   180d4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   180d8:	008000b4 	movhi	r2,2
   180dc:	10bf9944 	addi	r2,r2,-411
   180e0:	10800003 	ldbu	r2,0(r2)
   180e4:	10803fcc 	andi	r2,r2,255
   180e8:	10000726 	beq	r2,zero,18108 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   180ec:	e17ffc0b 	ldhu	r5,-16(fp)
   180f0:	e0fffc83 	ldbu	r3,-14(fp)
   180f4:	e0bffd04 	addi	r2,fp,-12
   180f8:	e13ffb17 	ldw	r4,-20(fp)
   180fc:	180d883a 	mov	r6,r3
   18100:	100f883a 	mov	r7,r2
   18104:	0012c640 	call	12c64 <OSFlagPost>

        space--;
   18108:	e0bff417 	ldw	r2,-48(fp)
   1810c:	10bfffc4 	addi	r2,r2,-1
   18110:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   18114:	e0bff417 	ldw	r2,-48(fp)
   18118:	10000526 	beq	r2,zero,18130 <altera_avalon_jtag_uart_irq+0x248>
   1811c:	e0bff517 	ldw	r2,-44(fp)
   18120:	10c01017 	ldw	r3,64(r2)
   18124:	e0bff517 	ldw	r2,-44(fp)
   18128:	10800f17 	ldw	r2,60(r2)
   1812c:	18bfd21e 	bne	r3,r2,18078 <__alt_mem_Flash_flash_data+0xf4018078>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   18130:	e0bff417 	ldw	r2,-48(fp)
   18134:	10001026 	beq	r2,zero,18178 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18138:	e0bff517 	ldw	r2,-44(fp)
   1813c:	10c00817 	ldw	r3,32(r2)
   18140:	00bfff44 	movi	r2,-3
   18144:	1886703a 	and	r3,r3,r2
   18148:	e0bff517 	ldw	r2,-44(fp)
   1814c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18150:	e0bff517 	ldw	r2,-44(fp)
   18154:	10800017 	ldw	r2,0(r2)
   18158:	10800104 	addi	r2,r2,4
   1815c:	1007883a 	mov	r3,r2
   18160:	e0bff517 	ldw	r2,-44(fp)
   18164:	10800817 	ldw	r2,32(r2)
   18168:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1816c:	e0bff617 	ldw	r2,-40(fp)
   18170:	10800104 	addi	r2,r2,4
   18174:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   18178:	003f6606 	br	17f14 <__alt_mem_Flash_flash_data+0xf4017f14>
}
   1817c:	e037883a 	mov	sp,fp
   18180:	dfc00117 	ldw	ra,4(sp)
   18184:	df000017 	ldw	fp,0(sp)
   18188:	dec00204 	addi	sp,sp,8
   1818c:	f800283a 	ret

00018190 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   18190:	defff904 	addi	sp,sp,-28
   18194:	dfc00615 	stw	ra,24(sp)
   18198:	df000515 	stw	fp,20(sp)
   1819c:	df000504 	addi	fp,sp,20
   181a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   181a4:	e0bfff17 	ldw	r2,-4(fp)
   181a8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   181ac:	e0bffb17 	ldw	r2,-20(fp)
   181b0:	10800017 	ldw	r2,0(r2)
   181b4:	10800104 	addi	r2,r2,4
   181b8:	10800037 	ldwio	r2,0(r2)
   181bc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   181c0:	e0bffc17 	ldw	r2,-16(fp)
   181c4:	1081000c 	andi	r2,r2,1024
   181c8:	10000b26 	beq	r2,zero,181f8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   181cc:	e0bffb17 	ldw	r2,-20(fp)
   181d0:	10800017 	ldw	r2,0(r2)
   181d4:	10800104 	addi	r2,r2,4
   181d8:	1007883a 	mov	r3,r2
   181dc:	e0bffb17 	ldw	r2,-20(fp)
   181e0:	10800817 	ldw	r2,32(r2)
   181e4:	10810014 	ori	r2,r2,1024
   181e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   181ec:	e0bffb17 	ldw	r2,-20(fp)
   181f0:	10000915 	stw	zero,36(r2)
   181f4:	00002206 	br	18280 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   181f8:	e0bffb17 	ldw	r2,-20(fp)
   181fc:	10c00917 	ldw	r3,36(r2)
   18200:	00a00034 	movhi	r2,32768
   18204:	10bfff04 	addi	r2,r2,-4
   18208:	10c01d36 	bltu	r2,r3,18280 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1820c:	e0bffb17 	ldw	r2,-20(fp)
   18210:	10800917 	ldw	r2,36(r2)
   18214:	10c00044 	addi	r3,r2,1
   18218:	e0bffb17 	ldw	r2,-20(fp)
   1821c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18220:	e0bffb17 	ldw	r2,-20(fp)
   18224:	10c00917 	ldw	r3,36(r2)
   18228:	e0bffb17 	ldw	r2,-20(fp)
   1822c:	10800117 	ldw	r2,4(r2)
   18230:	18801336 	bltu	r3,r2,18280 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   18234:	e0bffb17 	ldw	r2,-20(fp)
   18238:	10800c17 	ldw	r2,48(r2)
   1823c:	e0bffd15 	stw	r2,-12(fp)
   18240:	00800104 	movi	r2,4
   18244:	e0bffe0d 	sth	r2,-8(fp)
   18248:	00800044 	movi	r2,1
   1824c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18250:	008000b4 	movhi	r2,2
   18254:	10bf9944 	addi	r2,r2,-411
   18258:	10800003 	ldbu	r2,0(r2)
   1825c:	10803fcc 	andi	r2,r2,255
   18260:	10000726 	beq	r2,zero,18280 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   18264:	e17ffe0b 	ldhu	r5,-8(fp)
   18268:	e0fffe83 	ldbu	r3,-6(fp)
   1826c:	e0bffec4 	addi	r2,fp,-5
   18270:	e13ffd17 	ldw	r4,-12(fp)
   18274:	180d883a 	mov	r6,r3
   18278:	100f883a 	mov	r7,r2
   1827c:	0012c640 	call	12c64 <OSFlagPost>
   18280:	008000b4 	movhi	r2,2
   18284:	10bfaf04 	addi	r2,r2,-324
   18288:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1828c:	e037883a 	mov	sp,fp
   18290:	dfc00117 	ldw	ra,4(sp)
   18294:	df000017 	ldw	fp,0(sp)
   18298:	dec00204 	addi	sp,sp,8
   1829c:	f800283a 	ret

000182a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   182a0:	defffd04 	addi	sp,sp,-12
   182a4:	df000215 	stw	fp,8(sp)
   182a8:	df000204 	addi	fp,sp,8
   182ac:	e13ffe15 	stw	r4,-8(fp)
   182b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   182b4:	00000506 	br	182cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   182b8:	e0bfff17 	ldw	r2,-4(fp)
   182bc:	1090000c 	andi	r2,r2,16384
   182c0:	10000226 	beq	r2,zero,182cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   182c4:	00bffd44 	movi	r2,-11
   182c8:	00000b06 	br	182f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   182cc:	e0bffe17 	ldw	r2,-8(fp)
   182d0:	10c01017 	ldw	r3,64(r2)
   182d4:	e0bffe17 	ldw	r2,-8(fp)
   182d8:	10800f17 	ldw	r2,60(r2)
   182dc:	18800526 	beq	r3,r2,182f4 <altera_avalon_jtag_uart_close+0x54>
   182e0:	e0bffe17 	ldw	r2,-8(fp)
   182e4:	10c00917 	ldw	r3,36(r2)
   182e8:	e0bffe17 	ldw	r2,-8(fp)
   182ec:	10800117 	ldw	r2,4(r2)
   182f0:	18bff136 	bltu	r3,r2,182b8 <__alt_mem_Flash_flash_data+0xf40182b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   182f4:	0005883a 	mov	r2,zero
}
   182f8:	e037883a 	mov	sp,fp
   182fc:	df000017 	ldw	fp,0(sp)
   18300:	dec00104 	addi	sp,sp,4
   18304:	f800283a 	ret

00018308 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   18308:	defffa04 	addi	sp,sp,-24
   1830c:	df000515 	stw	fp,20(sp)
   18310:	df000504 	addi	fp,sp,20
   18314:	e13ffd15 	stw	r4,-12(fp)
   18318:	e17ffe15 	stw	r5,-8(fp)
   1831c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   18320:	00bff9c4 	movi	r2,-25
   18324:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   18328:	e0bffe17 	ldw	r2,-8(fp)
   1832c:	10da8060 	cmpeqi	r3,r2,27137
   18330:	1800031e 	bne	r3,zero,18340 <altera_avalon_jtag_uart_ioctl+0x38>
   18334:	109a80a0 	cmpeqi	r2,r2,27138
   18338:	1000191e 	bne	r2,zero,183a0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1833c:	00002806 	br	183e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   18340:	e0bffd17 	ldw	r2,-12(fp)
   18344:	10c00117 	ldw	r3,4(r2)
   18348:	00a00034 	movhi	r2,32768
   1834c:	10bfffc4 	addi	r2,r2,-1
   18350:	18801226 	beq	r3,r2,1839c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	10800017 	ldw	r2,0(r2)
   1835c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   18360:	e0bffc17 	ldw	r2,-16(fp)
   18364:	10800090 	cmplti	r2,r2,2
   18368:	1000061e 	bne	r2,zero,18384 <altera_avalon_jtag_uart_ioctl+0x7c>
   1836c:	e0fffc17 	ldw	r3,-16(fp)
   18370:	00a00034 	movhi	r2,32768
   18374:	10bfffc4 	addi	r2,r2,-1
   18378:	18800226 	beq	r3,r2,18384 <altera_avalon_jtag_uart_ioctl+0x7c>
   1837c:	e0bffc17 	ldw	r2,-16(fp)
   18380:	00000206 	br	1838c <altera_avalon_jtag_uart_ioctl+0x84>
   18384:	00a00034 	movhi	r2,32768
   18388:	10bfff84 	addi	r2,r2,-2
   1838c:	e0fffd17 	ldw	r3,-12(fp)
   18390:	18800115 	stw	r2,4(r3)
      rc = 0;
   18394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   18398:	00001106 	br	183e0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1839c:	00001006 	br	183e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   183a0:	e0bffd17 	ldw	r2,-12(fp)
   183a4:	10c00117 	ldw	r3,4(r2)
   183a8:	00a00034 	movhi	r2,32768
   183ac:	10bfffc4 	addi	r2,r2,-1
   183b0:	18800a26 	beq	r3,r2,183dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   183b4:	e0bffd17 	ldw	r2,-12(fp)
   183b8:	10c00917 	ldw	r3,36(r2)
   183bc:	e0bffd17 	ldw	r2,-12(fp)
   183c0:	10800117 	ldw	r2,4(r2)
   183c4:	1885803a 	cmpltu	r2,r3,r2
   183c8:	10c03fcc 	andi	r3,r2,255
   183cc:	e0bfff17 	ldw	r2,-4(fp)
   183d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   183d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   183d8:	00000006 	br	183dc <altera_avalon_jtag_uart_ioctl+0xd4>
   183dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   183e0:	e0bffb17 	ldw	r2,-20(fp)
}
   183e4:	e037883a 	mov	sp,fp
   183e8:	df000017 	ldw	fp,0(sp)
   183ec:	dec00104 	addi	sp,sp,4
   183f0:	f800283a 	ret

000183f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   183f4:	deffec04 	addi	sp,sp,-80
   183f8:	dfc01315 	stw	ra,76(sp)
   183fc:	df001215 	stw	fp,72(sp)
   18400:	df001204 	addi	fp,sp,72
   18404:	e13ffc15 	stw	r4,-16(fp)
   18408:	e17ffd15 	stw	r5,-12(fp)
   1840c:	e1bffe15 	stw	r6,-8(fp)
   18410:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   18414:	e0bffd17 	ldw	r2,-12(fp)
   18418:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1841c:	e0bffc17 	ldw	r2,-16(fp)
   18420:	10800a17 	ldw	r2,40(r2)
   18424:	e0bff415 	stw	r2,-48(fp)
   18428:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1842c:	e0fff50b 	ldhu	r3,-44(fp)
   18430:	e0bffb04 	addi	r2,fp,-20
   18434:	e13ff417 	ldw	r4,-48(fp)
   18438:	180b883a 	mov	r5,r3
   1843c:	100d883a 	mov	r6,r2
   18440:	00152b40 	call	152b4 <OSSemPend>

  while (space > 0)
   18444:	00006506 	br	185dc <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   18448:	e0bffc17 	ldw	r2,-16(fp)
   1844c:	10800d17 	ldw	r2,52(r2)
   18450:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   18454:	e0bffc17 	ldw	r2,-16(fp)
   18458:	10800e17 	ldw	r2,56(r2)
   1845c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   18460:	e0fff117 	ldw	r3,-60(fp)
   18464:	e0bff217 	ldw	r2,-56(fp)
   18468:	18800536 	bltu	r3,r2,18480 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1846c:	e0fff117 	ldw	r3,-60(fp)
   18470:	e0bff217 	ldw	r2,-56(fp)
   18474:	1885c83a 	sub	r2,r3,r2
   18478:	e0bff015 	stw	r2,-64(fp)
   1847c:	00000406 	br	18490 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   18480:	00c20004 	movi	r3,2048
   18484:	e0bff217 	ldw	r2,-56(fp)
   18488:	1885c83a 	sub	r2,r3,r2
   1848c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   18490:	e0bff017 	ldw	r2,-64(fp)
   18494:	1000011e 	bne	r2,zero,1849c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   18498:	00001d06 	br	18510 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1849c:	e0fffe17 	ldw	r3,-8(fp)
   184a0:	e0bff017 	ldw	r2,-64(fp)
   184a4:	1880022e 	bgeu	r3,r2,184b0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   184a8:	e0bffe17 	ldw	r2,-8(fp)
   184ac:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   184b0:	e0bff217 	ldw	r2,-56(fp)
   184b4:	10801104 	addi	r2,r2,68
   184b8:	e0fffc17 	ldw	r3,-16(fp)
   184bc:	1885883a 	add	r2,r3,r2
   184c0:	e13fef17 	ldw	r4,-68(fp)
   184c4:	100b883a 	mov	r5,r2
   184c8:	e1bff017 	ldw	r6,-64(fp)
   184cc:	000757c0 	call	757c <memcpy>
      ptr   += n;
   184d0:	e0ffef17 	ldw	r3,-68(fp)
   184d4:	e0bff017 	ldw	r2,-64(fp)
   184d8:	1885883a 	add	r2,r3,r2
   184dc:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   184e0:	e0fffe17 	ldw	r3,-8(fp)
   184e4:	e0bff017 	ldw	r2,-64(fp)
   184e8:	1885c83a 	sub	r2,r3,r2
   184ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   184f0:	e0fff217 	ldw	r3,-56(fp)
   184f4:	e0bff017 	ldw	r2,-64(fp)
   184f8:	1885883a 	add	r2,r3,r2
   184fc:	10c1ffcc 	andi	r3,r2,2047
   18500:	e0bffc17 	ldw	r2,-16(fp)
   18504:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   18508:	e0bffe17 	ldw	r2,-8(fp)
   1850c:	00bfce16 	blt	zero,r2,18448 <__alt_mem_Flash_flash_data+0xf4018448>

    /* If we read any data then return it */
    if (ptr != buffer)
   18510:	e0ffef17 	ldw	r3,-68(fp)
   18514:	e0bffd17 	ldw	r2,-12(fp)
   18518:	18800126 	beq	r3,r2,18520 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1851c:	00003106 	br	185e4 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   18520:	e0bfff17 	ldw	r2,-4(fp)
   18524:	1090000c 	andi	r2,r2,16384
   18528:	10000126 	beq	r2,zero,18530 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1852c:	00002d06 	br	185e4 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18530:	008000b4 	movhi	r2,2
   18534:	10bf9944 	addi	r2,r2,-411
   18538:	10800003 	ldbu	r2,0(r2)
   1853c:	10803fcc 	andi	r2,r2,255
   18540:	10800058 	cmpnei	r2,r2,1
   18544:	1000161e 	bne	r2,zero,185a0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   18548:	e0bffc17 	ldw	r2,-16(fp)
   1854c:	10800c17 	ldw	r2,48(r2)
   18550:	e0bff615 	stw	r2,-40(fp)
   18554:	00800144 	movi	r2,5
   18558:	e0bff70d 	sth	r2,-36(fp)
   1855c:	00bfe0c4 	movi	r2,-125
   18560:	e0bff785 	stb	r2,-34(fp)
   18564:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18568:	008000b4 	movhi	r2,2
   1856c:	10bf9944 	addi	r2,r2,-411
   18570:	10800003 	ldbu	r2,0(r2)
   18574:	10803fcc 	andi	r2,r2,255
   18578:	10001326 	beq	r2,zero,185c8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1857c:	e17ff70b 	ldhu	r5,-36(fp)
   18580:	e1bff783 	ldbu	r6,-34(fp)
   18584:	e0fff80b 	ldhu	r3,-32(fp)
   18588:	e0bffb44 	addi	r2,fp,-19
   1858c:	d8800015 	stw	r2,0(sp)
   18590:	e13ff617 	ldw	r4,-40(fp)
   18594:	180f883a 	mov	r7,r3
   18598:	001260c0 	call	1260c <OSFlagPend>
   1859c:	00000a06 	br	185c8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   185a0:	0001883a 	nop
   185a4:	e0bffc17 	ldw	r2,-16(fp)
   185a8:	10c00d17 	ldw	r3,52(r2)
   185ac:	e0bff117 	ldw	r2,-60(fp)
   185b0:	1880051e 	bne	r3,r2,185c8 <altera_avalon_jtag_uart_read+0x1d4>
   185b4:	e0bffc17 	ldw	r2,-16(fp)
   185b8:	10c00917 	ldw	r3,36(r2)
   185bc:	e0bffc17 	ldw	r2,-16(fp)
   185c0:	10800117 	ldw	r2,4(r2)
   185c4:	18bff736 	bltu	r3,r2,185a4 <__alt_mem_Flash_flash_data+0xf40185a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   185c8:	e0bffc17 	ldw	r2,-16(fp)
   185cc:	10c00d17 	ldw	r3,52(r2)
   185d0:	e0bff117 	ldw	r2,-60(fp)
   185d4:	1880011e 	bne	r3,r2,185dc <altera_avalon_jtag_uart_read+0x1e8>
      break;
   185d8:	00000206 	br	185e4 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   185dc:	e0bffe17 	ldw	r2,-8(fp)
   185e0:	00bf9916 	blt	zero,r2,18448 <__alt_mem_Flash_flash_data+0xf4018448>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   185e4:	e0bffc17 	ldw	r2,-16(fp)
   185e8:	10800a17 	ldw	r2,40(r2)
   185ec:	1009883a 	mov	r4,r2
   185f0:	00156880 	call	15688 <OSSemPost>

  if (ptr != buffer)
   185f4:	e0ffef17 	ldw	r3,-68(fp)
   185f8:	e0bffd17 	ldw	r2,-12(fp)
   185fc:	18801826 	beq	r3,r2,18660 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18600:	0005303a 	rdctl	r2,status
   18604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18608:	e0fff917 	ldw	r3,-28(fp)
   1860c:	00bfff84 	movi	r2,-2
   18610:	1884703a 	and	r2,r3,r2
   18614:	1001703a 	wrctl	status,r2
  
  return context;
   18618:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1861c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18620:	e0bffc17 	ldw	r2,-16(fp)
   18624:	10800817 	ldw	r2,32(r2)
   18628:	10c00054 	ori	r3,r2,1
   1862c:	e0bffc17 	ldw	r2,-16(fp)
   18630:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18634:	e0bffc17 	ldw	r2,-16(fp)
   18638:	10800017 	ldw	r2,0(r2)
   1863c:	10800104 	addi	r2,r2,4
   18640:	1007883a 	mov	r3,r2
   18644:	e0bffc17 	ldw	r2,-16(fp)
   18648:	10800817 	ldw	r2,32(r2)
   1864c:	18800035 	stwio	r2,0(r3)
   18650:	e0bff317 	ldw	r2,-52(fp)
   18654:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18658:	e0bffa17 	ldw	r2,-24(fp)
   1865c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18660:	e0ffef17 	ldw	r3,-68(fp)
   18664:	e0bffd17 	ldw	r2,-12(fp)
   18668:	18800426 	beq	r3,r2,1867c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1866c:	e0ffef17 	ldw	r3,-68(fp)
   18670:	e0bffd17 	ldw	r2,-12(fp)
   18674:	1885c83a 	sub	r2,r3,r2
   18678:	00000606 	br	18694 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1867c:	e0bfff17 	ldw	r2,-4(fp)
   18680:	1090000c 	andi	r2,r2,16384
   18684:	10000226 	beq	r2,zero,18690 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   18688:	00bffd44 	movi	r2,-11
   1868c:	00000106 	br	18694 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   18690:	00bffec4 	movi	r2,-5
}
   18694:	e037883a 	mov	sp,fp
   18698:	dfc00117 	ldw	ra,4(sp)
   1869c:	df000017 	ldw	fp,0(sp)
   186a0:	dec00204 	addi	sp,sp,8
   186a4:	f800283a 	ret

000186a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   186a8:	deffed04 	addi	sp,sp,-76
   186ac:	dfc01215 	stw	ra,72(sp)
   186b0:	df001115 	stw	fp,68(sp)
   186b4:	df001104 	addi	fp,sp,68
   186b8:	e13ffc15 	stw	r4,-16(fp)
   186bc:	e17ffd15 	stw	r5,-12(fp)
   186c0:	e1bffe15 	stw	r6,-8(fp)
   186c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   186c8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   186cc:	e0bffd17 	ldw	r2,-12(fp)
   186d0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   186d4:	e0bffc17 	ldw	r2,-16(fp)
   186d8:	10800b17 	ldw	r2,44(r2)
   186dc:	e0bff515 	stw	r2,-44(fp)
   186e0:	e03ff60d 	sth	zero,-40(fp)
   186e4:	e0fff60b 	ldhu	r3,-40(fp)
   186e8:	e0bffbc4 	addi	r2,fp,-17
   186ec:	e13ff517 	ldw	r4,-44(fp)
   186f0:	180b883a 	mov	r5,r3
   186f4:	100d883a 	mov	r6,r2
   186f8:	00152b40 	call	152b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   186fc:	00003806 	br	187e0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18700:	e0bffc17 	ldw	r2,-16(fp)
   18704:	10800f17 	ldw	r2,60(r2)
   18708:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1870c:	e0bffc17 	ldw	r2,-16(fp)
   18710:	10801017 	ldw	r2,64(r2)
   18714:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   18718:	e0fff317 	ldw	r3,-52(fp)
   1871c:	e0bff017 	ldw	r2,-64(fp)
   18720:	1880062e 	bgeu	r3,r2,1873c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18724:	e0fff017 	ldw	r3,-64(fp)
   18728:	e0bff317 	ldw	r2,-52(fp)
   1872c:	1885c83a 	sub	r2,r3,r2
   18730:	10bfffc4 	addi	r2,r2,-1
   18734:	e0bff115 	stw	r2,-60(fp)
   18738:	00000b06 	br	18768 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1873c:	e0bff017 	ldw	r2,-64(fp)
   18740:	10000526 	beq	r2,zero,18758 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18744:	00c20004 	movi	r3,2048
   18748:	e0bff317 	ldw	r2,-52(fp)
   1874c:	1885c83a 	sub	r2,r3,r2
   18750:	e0bff115 	stw	r2,-60(fp)
   18754:	00000406 	br	18768 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   18758:	00c1ffc4 	movi	r3,2047
   1875c:	e0bff317 	ldw	r2,-52(fp)
   18760:	1885c83a 	sub	r2,r3,r2
   18764:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18768:	e0bff117 	ldw	r2,-60(fp)
   1876c:	1000011e 	bne	r2,zero,18774 <altera_avalon_jtag_uart_write+0xcc>
        break;
   18770:	00001d06 	br	187e8 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   18774:	e0fffe17 	ldw	r3,-8(fp)
   18778:	e0bff117 	ldw	r2,-60(fp)
   1877c:	1880022e 	bgeu	r3,r2,18788 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   18780:	e0bffe17 	ldw	r2,-8(fp)
   18784:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   18788:	e0bff317 	ldw	r2,-52(fp)
   1878c:	10821104 	addi	r2,r2,2116
   18790:	e0fffc17 	ldw	r3,-16(fp)
   18794:	1885883a 	add	r2,r3,r2
   18798:	1009883a 	mov	r4,r2
   1879c:	e17ffd17 	ldw	r5,-12(fp)
   187a0:	e1bff117 	ldw	r6,-60(fp)
   187a4:	000757c0 	call	757c <memcpy>
      ptr   += n;
   187a8:	e0fffd17 	ldw	r3,-12(fp)
   187ac:	e0bff117 	ldw	r2,-60(fp)
   187b0:	1885883a 	add	r2,r3,r2
   187b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   187b8:	e0fffe17 	ldw	r3,-8(fp)
   187bc:	e0bff117 	ldw	r2,-60(fp)
   187c0:	1885c83a 	sub	r2,r3,r2
   187c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   187c8:	e0fff317 	ldw	r3,-52(fp)
   187cc:	e0bff117 	ldw	r2,-60(fp)
   187d0:	1885883a 	add	r2,r3,r2
   187d4:	10c1ffcc 	andi	r3,r2,2047
   187d8:	e0bffc17 	ldw	r2,-16(fp)
   187dc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   187e0:	e0bffe17 	ldw	r2,-8(fp)
   187e4:	00bfc616 	blt	zero,r2,18700 <__alt_mem_Flash_flash_data+0xf4018700>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187e8:	0005303a 	rdctl	r2,status
   187ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187f0:	e0fff717 	ldw	r3,-36(fp)
   187f4:	00bfff84 	movi	r2,-2
   187f8:	1884703a 	and	r2,r3,r2
   187fc:	1001703a 	wrctl	status,r2
  
  return context;
   18800:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18804:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18808:	e0bffc17 	ldw	r2,-16(fp)
   1880c:	10800817 	ldw	r2,32(r2)
   18810:	10c00094 	ori	r3,r2,2
   18814:	e0bffc17 	ldw	r2,-16(fp)
   18818:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1881c:	e0bffc17 	ldw	r2,-16(fp)
   18820:	10800017 	ldw	r2,0(r2)
   18824:	10800104 	addi	r2,r2,4
   18828:	1007883a 	mov	r3,r2
   1882c:	e0bffc17 	ldw	r2,-16(fp)
   18830:	10800817 	ldw	r2,32(r2)
   18834:	18800035 	stwio	r2,0(r3)
   18838:	e0bff417 	ldw	r2,-48(fp)
   1883c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18840:	e0bff817 	ldw	r2,-32(fp)
   18844:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   18848:	e0bffe17 	ldw	r2,-8(fp)
   1884c:	00802e0e 	bge	zero,r2,18908 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   18850:	e0bfff17 	ldw	r2,-4(fp)
   18854:	1090000c 	andi	r2,r2,16384
   18858:	10000126 	beq	r2,zero,18860 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1885c:	00002c06 	br	18910 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   18860:	008000b4 	movhi	r2,2
   18864:	10bf9944 	addi	r2,r2,-411
   18868:	10800003 	ldbu	r2,0(r2)
   1886c:	10803fcc 	andi	r2,r2,255
   18870:	10800058 	cmpnei	r2,r2,1
   18874:	1000161e 	bne	r2,zero,188d0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   18878:	e0bffc17 	ldw	r2,-16(fp)
   1887c:	10800c17 	ldw	r2,48(r2)
   18880:	e0bff915 	stw	r2,-28(fp)
   18884:	00800184 	movi	r2,6
   18888:	e0bffa0d 	sth	r2,-24(fp)
   1888c:	00bfe0c4 	movi	r2,-125
   18890:	e0bffa85 	stb	r2,-22(fp)
   18894:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18898:	008000b4 	movhi	r2,2
   1889c:	10bf9944 	addi	r2,r2,-411
   188a0:	10800003 	ldbu	r2,0(r2)
   188a4:	10803fcc 	andi	r2,r2,255
   188a8:	10001326 	beq	r2,zero,188f8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   188ac:	e17ffa0b 	ldhu	r5,-24(fp)
   188b0:	e1bffa83 	ldbu	r6,-22(fp)
   188b4:	e0fffb0b 	ldhu	r3,-20(fp)
   188b8:	e0bffb84 	addi	r2,fp,-18
   188bc:	d8800015 	stw	r2,0(sp)
   188c0:	e13ff917 	ldw	r4,-28(fp)
   188c4:	180f883a 	mov	r7,r3
   188c8:	001260c0 	call	1260c <OSFlagPend>
   188cc:	00000a06 	br	188f8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   188d0:	0001883a 	nop
   188d4:	e0bffc17 	ldw	r2,-16(fp)
   188d8:	10c01017 	ldw	r3,64(r2)
   188dc:	e0bff017 	ldw	r2,-64(fp)
   188e0:	1880051e 	bne	r3,r2,188f8 <altera_avalon_jtag_uart_write+0x250>
   188e4:	e0bffc17 	ldw	r2,-16(fp)
   188e8:	10c00917 	ldw	r3,36(r2)
   188ec:	e0bffc17 	ldw	r2,-16(fp)
   188f0:	10800117 	ldw	r2,4(r2)
   188f4:	18bff736 	bltu	r3,r2,188d4 <__alt_mem_Flash_flash_data+0xf40188d4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   188f8:	e0bffc17 	ldw	r2,-16(fp)
   188fc:	10800917 	ldw	r2,36(r2)
   18900:	10000126 	beq	r2,zero,18908 <altera_avalon_jtag_uart_write+0x260>
         break;
   18904:	00000206 	br	18910 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   18908:	e0bffe17 	ldw	r2,-8(fp)
   1890c:	00bf7b16 	blt	zero,r2,186fc <__alt_mem_Flash_flash_data+0xf40186fc>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   18910:	e0bffc17 	ldw	r2,-16(fp)
   18914:	10800b17 	ldw	r2,44(r2)
   18918:	1009883a 	mov	r4,r2
   1891c:	00156880 	call	15688 <OSSemPost>

  if (ptr != start)
   18920:	e0fffd17 	ldw	r3,-12(fp)
   18924:	e0bff217 	ldw	r2,-56(fp)
   18928:	18800426 	beq	r3,r2,1893c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1892c:	e0fffd17 	ldw	r3,-12(fp)
   18930:	e0bff217 	ldw	r2,-56(fp)
   18934:	1885c83a 	sub	r2,r3,r2
   18938:	00000606 	br	18954 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1893c:	e0bfff17 	ldw	r2,-4(fp)
   18940:	1090000c 	andi	r2,r2,16384
   18944:	10000226 	beq	r2,zero,18950 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   18948:	00bffd44 	movi	r2,-11
   1894c:	00000106 	br	18954 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   18950:	00bffec4 	movi	r2,-5
}
   18954:	e037883a 	mov	sp,fp
   18958:	dfc00117 	ldw	ra,4(sp)
   1895c:	df000017 	ldw	fp,0(sp)
   18960:	dec00204 	addi	sp,sp,8
   18964:	f800283a 	ret

00018968 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   18968:	defff904 	addi	sp,sp,-28
   1896c:	dfc00615 	stw	ra,24(sp)
   18970:	df000515 	stw	fp,20(sp)
   18974:	df000504 	addi	fp,sp,20
   18978:	e13ffe15 	stw	r4,-8(fp)
   1897c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   18980:	0007883a 	mov	r3,zero
   18984:	e0bffe17 	ldw	r2,-8(fp)
   18988:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1898c:	e0bffe17 	ldw	r2,-8(fp)
   18990:	10800104 	addi	r2,r2,4
   18994:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18998:	0005303a 	rdctl	r2,status
   1899c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189a0:	e0fffc17 	ldw	r3,-16(fp)
   189a4:	00bfff84 	movi	r2,-2
   189a8:	1884703a 	and	r2,r3,r2
   189ac:	1001703a 	wrctl	status,r2
  
  return context;
   189b0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   189b4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   189b8:	001ab500 	call	1ab50 <alt_tick>
   189bc:	e0bffb17 	ldw	r2,-20(fp)
   189c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189c4:	e0bffd17 	ldw	r2,-12(fp)
   189c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   189cc:	e037883a 	mov	sp,fp
   189d0:	dfc00117 	ldw	ra,4(sp)
   189d4:	df000017 	ldw	fp,0(sp)
   189d8:	dec00204 	addi	sp,sp,8
   189dc:	f800283a 	ret

000189e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   189e0:	defff904 	addi	sp,sp,-28
   189e4:	dfc00615 	stw	ra,24(sp)
   189e8:	df000515 	stw	fp,20(sp)
   189ec:	df000504 	addi	fp,sp,20
   189f0:	e13ffc15 	stw	r4,-16(fp)
   189f4:	e17ffd15 	stw	r5,-12(fp)
   189f8:	e1bffe15 	stw	r6,-8(fp)
   189fc:	e1ffff15 	stw	r7,-4(fp)
   18a00:	e0bfff17 	ldw	r2,-4(fp)
   18a04:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18a08:	008000b4 	movhi	r2,2
   18a0c:	10bfaf04 	addi	r2,r2,-324
   18a10:	10800017 	ldw	r2,0(r2)
   18a14:	1000041e 	bne	r2,zero,18a28 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   18a18:	008000b4 	movhi	r2,2
   18a1c:	10bfaf04 	addi	r2,r2,-324
   18a20:	e0fffb17 	ldw	r3,-20(fp)
   18a24:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18a28:	e0bffc17 	ldw	r2,-16(fp)
   18a2c:	10800104 	addi	r2,r2,4
   18a30:	00c001c4 	movi	r3,7
   18a34:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   18a38:	e13ffe17 	ldw	r4,-8(fp)
   18a3c:	e17ffc17 	ldw	r5,-16(fp)
   18a40:	018000b4 	movhi	r6,2
   18a44:	31a25a04 	addi	r6,r6,-30360
   18a48:	001a6340 	call	1a634 <alt_irq_register>
#endif  
}
   18a4c:	e037883a 	mov	sp,fp
   18a50:	dfc00117 	ldw	ra,4(sp)
   18a54:	df000017 	ldw	fp,0(sp)
   18a58:	dec00204 	addi	sp,sp,8
   18a5c:	f800283a 	ret

00018a60 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   18a60:	defffc04 	addi	sp,sp,-16
   18a64:	df000315 	stw	fp,12(sp)
   18a68:	df000304 	addi	fp,sp,12
   18a6c:	e13ffe15 	stw	r4,-8(fp)
   18a70:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   18a74:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   18a78:	e0bfff17 	ldw	r2,-4(fp)
   18a7c:	1000061e 	bne	r2,zero,18a98 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   18a80:	e0bffe17 	ldw	r2,-8(fp)
   18a84:	1007883a 	mov	r3,r2
   18a88:	e0bffd03 	ldbu	r2,-12(fp)
   18a8c:	1884b03a 	or	r2,r3,r2
   18a90:	e0bffd05 	stb	r2,-12(fp)
   18a94:	00000806 	br	18ab8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   18a98:	e0bffe17 	ldw	r2,-8(fp)
   18a9c:	1007883a 	mov	r3,r2
   18aa0:	e0bffd03 	ldbu	r2,-12(fp)
   18aa4:	1884b03a 	or	r2,r3,r2
   18aa8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   18aac:	e0bffd03 	ldbu	r2,-12(fp)
   18ab0:	10801014 	ori	r2,r2,64
   18ab4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   18ab8:	e0fffd03 	ldbu	r3,-12(fp)
   18abc:	00bfe004 	movi	r2,-128
   18ac0:	1884b03a 	or	r2,r3,r2
}
   18ac4:	e037883a 	mov	sp,fp
   18ac8:	df000017 	ldw	fp,0(sp)
   18acc:	dec00104 	addi	sp,sp,4
   18ad0:	f800283a 	ret

00018ad4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   18ad4:	defffd04 	addi	sp,sp,-12
   18ad8:	df000215 	stw	fp,8(sp)
   18adc:	df000204 	addi	fp,sp,8
   18ae0:	e13ffe15 	stw	r4,-8(fp)
   18ae4:	2805883a 	mov	r2,r5
   18ae8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   18aec:	e0bffe17 	ldw	r2,-8(fp)
   18af0:	10800a17 	ldw	r2,40(r2)
   18af4:	1007883a 	mov	r3,r2
   18af8:	e0bfff03 	ldbu	r2,-4(fp)
   18afc:	18800025 	stbio	r2,0(r3)
}
   18b00:	e037883a 	mov	sp,fp
   18b04:	df000017 	ldw	fp,0(sp)
   18b08:	dec00104 	addi	sp,sp,4
   18b0c:	f800283a 	ret

00018b10 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   18b10:	defffe04 	addi	sp,sp,-8
   18b14:	df000115 	stw	fp,4(sp)
   18b18:	df000104 	addi	fp,sp,4
   18b1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   18b20:	e0bfff17 	ldw	r2,-4(fp)
   18b24:	10800a17 	ldw	r2,40(r2)
   18b28:	1007883a 	mov	r3,r2
   18b2c:	00800044 	movi	r2,1
   18b30:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   18b34:	e037883a 	mov	sp,fp
   18b38:	df000017 	ldw	fp,0(sp)
   18b3c:	dec00104 	addi	sp,sp,4
   18b40:	f800283a 	ret

00018b44 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   18b44:	defffc04 	addi	sp,sp,-16
   18b48:	dfc00315 	stw	ra,12(sp)
   18b4c:	df000215 	stw	fp,8(sp)
   18b50:	df000204 	addi	fp,sp,8
   18b54:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   18b58:	e13fff17 	ldw	r4,-4(fp)
   18b5c:	014000b4 	movhi	r5,2
   18b60:	2977c304 	addi	r5,r5,-8436
   18b64:	001a43c0 	call	1a43c <alt_find_dev>
   18b68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18b6c:	e0bffe17 	ldw	r2,-8(fp)
}
   18b70:	e037883a 	mov	sp,fp
   18b74:	dfc00117 	ldw	ra,4(sp)
   18b78:	df000017 	ldw	fp,0(sp)
   18b7c:	dec00204 	addi	sp,sp,8
   18b80:	f800283a 	ret

00018b84 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   18b84:	defffb04 	addi	sp,sp,-20
   18b88:	df000415 	stw	fp,16(sp)
   18b8c:	df000404 	addi	fp,sp,16
   18b90:	e13ffd15 	stw	r4,-12(fp)
   18b94:	e17ffe15 	stw	r5,-8(fp)
   18b98:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   18b9c:	e03ffc15 	stw	zero,-16(fp)
   18ba0:	00000f06 	br	18be0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   18ba4:	e0bffd17 	ldw	r2,-12(fp)
   18ba8:	10800a17 	ldw	r2,40(r2)
   18bac:	10800044 	addi	r2,r2,1
   18bb0:	1009883a 	mov	r4,r2
   18bb4:	e0fffe17 	ldw	r3,-8(fp)
   18bb8:	e0bffc17 	ldw	r2,-16(fp)
   18bbc:	1885883a 	add	r2,r3,r2
   18bc0:	10800003 	ldbu	r2,0(r2)
   18bc4:	10803fcc 	andi	r2,r2,255
   18bc8:	1080201c 	xori	r2,r2,128
   18bcc:	10bfe004 	addi	r2,r2,-128
   18bd0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   18bd4:	e0bffc17 	ldw	r2,-16(fp)
   18bd8:	10800044 	addi	r2,r2,1
   18bdc:	e0bffc15 	stw	r2,-16(fp)
   18be0:	e0fffc17 	ldw	r3,-16(fp)
   18be4:	e0bfff17 	ldw	r2,-4(fp)
   18be8:	18bfee36 	bltu	r3,r2,18ba4 <__alt_mem_Flash_flash_data+0xf4018ba4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   18bec:	e037883a 	mov	sp,fp
   18bf0:	df000017 	ldw	fp,0(sp)
   18bf4:	dec00104 	addi	sp,sp,4
   18bf8:	f800283a 	ret

00018bfc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   18bfc:	defffd04 	addi	sp,sp,-12
   18c00:	df000215 	stw	fp,8(sp)
   18c04:	df000204 	addi	fp,sp,8
   18c08:	e13ffe15 	stw	r4,-8(fp)
   18c0c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   18c10:	00000d06 	br	18c48 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   18c14:	e0bffe17 	ldw	r2,-8(fp)
   18c18:	10800a17 	ldw	r2,40(r2)
   18c1c:	10800044 	addi	r2,r2,1
   18c20:	1007883a 	mov	r3,r2
   18c24:	e0bfff17 	ldw	r2,-4(fp)
   18c28:	10800003 	ldbu	r2,0(r2)
   18c2c:	10803fcc 	andi	r2,r2,255
   18c30:	1080201c 	xori	r2,r2,128
   18c34:	10bfe004 	addi	r2,r2,-128
   18c38:	18800025 	stbio	r2,0(r3)
		++ptr;
   18c3c:	e0bfff17 	ldw	r2,-4(fp)
   18c40:	10800044 	addi	r2,r2,1
   18c44:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   18c48:	e0bfff17 	ldw	r2,-4(fp)
   18c4c:	10800003 	ldbu	r2,0(r2)
   18c50:	10803fcc 	andi	r2,r2,255
   18c54:	1080201c 	xori	r2,r2,128
   18c58:	10bfe004 	addi	r2,r2,-128
   18c5c:	103fed1e 	bne	r2,zero,18c14 <__alt_mem_Flash_flash_data+0xf4018c14>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   18c60:	e037883a 	mov	sp,fp
   18c64:	df000017 	ldw	fp,0(sp)
   18c68:	dec00104 	addi	sp,sp,4
   18c6c:	f800283a 	ret

00018c70 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   18c70:	defffb04 	addi	sp,sp,-20
   18c74:	dfc00415 	stw	ra,16(sp)
   18c78:	df000315 	stw	fp,12(sp)
   18c7c:	df000304 	addi	fp,sp,12
   18c80:	e13ffd15 	stw	r4,-12(fp)
   18c84:	e17ffe15 	stw	r5,-8(fp)
   18c88:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   18c8c:	e0bffd17 	ldw	r2,-12(fp)
   18c90:	10c00017 	ldw	r3,0(r2)
   18c94:	e0bfff17 	ldw	r2,-4(fp)
   18c98:	1809883a 	mov	r4,r3
   18c9c:	e17ffe17 	ldw	r5,-8(fp)
   18ca0:	100d883a 	mov	r6,r2
   18ca4:	0018b840 	call	18b84 <alt_up_character_lcd_write>
	return 0;
   18ca8:	0005883a 	mov	r2,zero
}
   18cac:	e037883a 	mov	sp,fp
   18cb0:	dfc00117 	ldw	ra,4(sp)
   18cb4:	df000017 	ldw	fp,0(sp)
   18cb8:	dec00204 	addi	sp,sp,8
   18cbc:	f800283a 	ret

00018cc0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   18cc0:	defffa04 	addi	sp,sp,-24
   18cc4:	dfc00515 	stw	ra,20(sp)
   18cc8:	df000415 	stw	fp,16(sp)
   18ccc:	df000404 	addi	fp,sp,16
   18cd0:	e13ffd15 	stw	r4,-12(fp)
   18cd4:	e17ffe15 	stw	r5,-8(fp)
   18cd8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   18cdc:	e0bffe17 	ldw	r2,-8(fp)
   18ce0:	10800a28 	cmpgeui	r2,r2,40
   18ce4:	1000031e 	bne	r2,zero,18cf4 <alt_up_character_lcd_set_cursor_pos+0x34>
   18ce8:	e0bfff17 	ldw	r2,-4(fp)
   18cec:	108000b0 	cmpltui	r2,r2,2
   18cf0:	1000021e 	bne	r2,zero,18cfc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   18cf4:	00bfffc4 	movi	r2,-1
   18cf8:	00000906 	br	18d20 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18cfc:	e13ffe17 	ldw	r4,-8(fp)
   18d00:	e17fff17 	ldw	r5,-4(fp)
   18d04:	0018a600 	call	18a60 <get_DDRAM_addr>
   18d08:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   18d0c:	e0bffc03 	ldbu	r2,-16(fp)
   18d10:	e13ffd17 	ldw	r4,-12(fp)
   18d14:	100b883a 	mov	r5,r2
   18d18:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
	return 0;
   18d1c:	0005883a 	mov	r2,zero
}
   18d20:	e037883a 	mov	sp,fp
   18d24:	dfc00117 	ldw	ra,4(sp)
   18d28:	df000017 	ldw	fp,0(sp)
   18d2c:	dec00204 	addi	sp,sp,8
   18d30:	f800283a 	ret

00018d34 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   18d34:	defffb04 	addi	sp,sp,-20
   18d38:	dfc00415 	stw	ra,16(sp)
   18d3c:	df000315 	stw	fp,12(sp)
   18d40:	df000304 	addi	fp,sp,12
   18d44:	e13ffe15 	stw	r4,-8(fp)
   18d48:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   18d4c:	e0bfff17 	ldw	r2,-4(fp)
   18d50:	1000011e 	bne	r2,zero,18d58 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   18d54:	00001406 	br	18da8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   18d58:	e0bfff17 	ldw	r2,-4(fp)
   18d5c:	0080020e 	bge	zero,r2,18d68 <alt_up_character_lcd_shift_cursor+0x34>
   18d60:	00800504 	movi	r2,20
   18d64:	00000106 	br	18d6c <alt_up_character_lcd_shift_cursor+0x38>
   18d68:	00800404 	movi	r2,16
   18d6c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18d70:	e0bfff17 	ldw	r2,-4(fp)
   18d74:	1000010e 	bge	r2,zero,18d7c <alt_up_character_lcd_shift_cursor+0x48>
   18d78:	0085c83a 	sub	r2,zero,r2
   18d7c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18d80:	00000406 	br	18d94 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18d84:	e0bffd43 	ldbu	r2,-11(fp)
   18d88:	e13ffe17 	ldw	r4,-8(fp)
   18d8c:	100b883a 	mov	r5,r2
   18d90:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18d94:	e0bffd03 	ldbu	r2,-12(fp)
   18d98:	10ffffc4 	addi	r3,r2,-1
   18d9c:	e0fffd05 	stb	r3,-12(fp)
   18da0:	10803fcc 	andi	r2,r2,255
   18da4:	103ff71e 	bne	r2,zero,18d84 <__alt_mem_Flash_flash_data+0xf4018d84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   18da8:	e037883a 	mov	sp,fp
   18dac:	dfc00117 	ldw	ra,4(sp)
   18db0:	df000017 	ldw	fp,0(sp)
   18db4:	dec00204 	addi	sp,sp,8
   18db8:	f800283a 	ret

00018dbc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   18dbc:	defffb04 	addi	sp,sp,-20
   18dc0:	dfc00415 	stw	ra,16(sp)
   18dc4:	df000315 	stw	fp,12(sp)
   18dc8:	df000304 	addi	fp,sp,12
   18dcc:	e13ffe15 	stw	r4,-8(fp)
   18dd0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   18dd4:	e0bfff17 	ldw	r2,-4(fp)
   18dd8:	1000011e 	bne	r2,zero,18de0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   18ddc:	00001406 	br	18e30 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   18de0:	e0bfff17 	ldw	r2,-4(fp)
   18de4:	0080020e 	bge	zero,r2,18df0 <alt_up_character_lcd_shift_display+0x34>
   18de8:	00800704 	movi	r2,28
   18dec:	00000106 	br	18df4 <alt_up_character_lcd_shift_display+0x38>
   18df0:	00800604 	movi	r2,24
   18df4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18df8:	e0bfff17 	ldw	r2,-4(fp)
   18dfc:	1000010e 	bge	r2,zero,18e04 <alt_up_character_lcd_shift_display+0x48>
   18e00:	0085c83a 	sub	r2,zero,r2
   18e04:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18e08:	00000406 	br	18e1c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18e0c:	e0bffd43 	ldbu	r2,-11(fp)
   18e10:	e13ffe17 	ldw	r4,-8(fp)
   18e14:	100b883a 	mov	r5,r2
   18e18:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18e1c:	e0bffd03 	ldbu	r2,-12(fp)
   18e20:	10ffffc4 	addi	r3,r2,-1
   18e24:	e0fffd05 	stb	r3,-12(fp)
   18e28:	10803fcc 	andi	r2,r2,255
   18e2c:	103ff71e 	bne	r2,zero,18e0c <__alt_mem_Flash_flash_data+0xf4018e0c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   18e30:	e037883a 	mov	sp,fp
   18e34:	dfc00117 	ldw	ra,4(sp)
   18e38:	df000017 	ldw	fp,0(sp)
   18e3c:	dec00204 	addi	sp,sp,8
   18e40:	f800283a 	ret

00018e44 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   18e44:	defffa04 	addi	sp,sp,-24
   18e48:	dfc00515 	stw	ra,20(sp)
   18e4c:	df000415 	stw	fp,16(sp)
   18e50:	df000404 	addi	fp,sp,16
   18e54:	e13ffd15 	stw	r4,-12(fp)
   18e58:	e17ffe15 	stw	r5,-8(fp)
   18e5c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   18e60:	e0bffe17 	ldw	r2,-8(fp)
   18e64:	10800a28 	cmpgeui	r2,r2,40
   18e68:	1000031e 	bne	r2,zero,18e78 <alt_up_character_lcd_erase_pos+0x34>
   18e6c:	e0bfff17 	ldw	r2,-4(fp)
   18e70:	108000b0 	cmpltui	r2,r2,2
   18e74:	1000021e 	bne	r2,zero,18e80 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   18e78:	00bfffc4 	movi	r2,-1
   18e7c:	00000f06 	br	18ebc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18e80:	e13ffe17 	ldw	r4,-8(fp)
   18e84:	e17fff17 	ldw	r5,-4(fp)
   18e88:	0018a600 	call	18a60 <get_DDRAM_addr>
   18e8c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   18e90:	e0bffc03 	ldbu	r2,-16(fp)
   18e94:	e13ffd17 	ldw	r4,-12(fp)
   18e98:	100b883a 	mov	r5,r2
   18e9c:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   18ea0:	e0bffd17 	ldw	r2,-12(fp)
   18ea4:	10800a17 	ldw	r2,40(r2)
   18ea8:	10800044 	addi	r2,r2,1
   18eac:	1007883a 	mov	r3,r2
   18eb0:	00800084 	movi	r2,2
   18eb4:	18800025 	stbio	r2,0(r3)
	return 0;
   18eb8:	0005883a 	mov	r2,zero
}
   18ebc:	e037883a 	mov	sp,fp
   18ec0:	dfc00117 	ldw	ra,4(sp)
   18ec4:	df000017 	ldw	fp,0(sp)
   18ec8:	dec00204 	addi	sp,sp,8
   18ecc:	f800283a 	ret

00018ed0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   18ed0:	defffd04 	addi	sp,sp,-12
   18ed4:	dfc00215 	stw	ra,8(sp)
   18ed8:	df000115 	stw	fp,4(sp)
   18edc:	df000104 	addi	fp,sp,4
   18ee0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   18ee4:	e13fff17 	ldw	r4,-4(fp)
   18ee8:	01400304 	movi	r5,12
   18eec:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
}
   18ef0:	e037883a 	mov	sp,fp
   18ef4:	dfc00117 	ldw	ra,4(sp)
   18ef8:	df000017 	ldw	fp,0(sp)
   18efc:	dec00204 	addi	sp,sp,8
   18f00:	f800283a 	ret

00018f04 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   18f04:	defffd04 	addi	sp,sp,-12
   18f08:	dfc00215 	stw	ra,8(sp)
   18f0c:	df000115 	stw	fp,4(sp)
   18f10:	df000104 	addi	fp,sp,4
   18f14:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   18f18:	e13fff17 	ldw	r4,-4(fp)
   18f1c:	014003c4 	movi	r5,15
   18f20:	0018ad40 	call	18ad4 <alt_up_character_lcd_send_cmd>
}
   18f24:	e037883a 	mov	sp,fp
   18f28:	dfc00117 	ldw	ra,4(sp)
   18f2c:	df000017 	ldw	fp,0(sp)
   18f30:	dec00204 	addi	sp,sp,8
   18f34:	f800283a 	ret

00018f38 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   18f38:	defffd04 	addi	sp,sp,-12
   18f3c:	df000215 	stw	fp,8(sp)
   18f40:	df000204 	addi	fp,sp,8
   18f44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   18f48:	e0bfff17 	ldw	r2,-4(fp)
   18f4c:	10800a17 	ldw	r2,40(r2)
   18f50:	10800104 	addi	r2,r2,4
   18f54:	10800037 	ldwio	r2,0(r2)
   18f58:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   18f5c:	e0bffe17 	ldw	r2,-8(fp)
   18f60:	10800054 	ori	r2,r2,1
   18f64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   18f68:	e0bfff17 	ldw	r2,-4(fp)
   18f6c:	10800a17 	ldw	r2,40(r2)
   18f70:	10800104 	addi	r2,r2,4
   18f74:	1007883a 	mov	r3,r2
   18f78:	e0bffe17 	ldw	r2,-8(fp)
   18f7c:	18800035 	stwio	r2,0(r3)
}
   18f80:	e037883a 	mov	sp,fp
   18f84:	df000017 	ldw	fp,0(sp)
   18f88:	dec00104 	addi	sp,sp,4
   18f8c:	f800283a 	ret

00018f90 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   18f90:	defffd04 	addi	sp,sp,-12
   18f94:	df000215 	stw	fp,8(sp)
   18f98:	df000204 	addi	fp,sp,8
   18f9c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   18fa0:	e0bfff17 	ldw	r2,-4(fp)
   18fa4:	10800a17 	ldw	r2,40(r2)
   18fa8:	10800104 	addi	r2,r2,4
   18fac:	10800037 	ldwio	r2,0(r2)
   18fb0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   18fb4:	e0fffe17 	ldw	r3,-8(fp)
   18fb8:	00bfff84 	movi	r2,-2
   18fbc:	1884703a 	and	r2,r3,r2
   18fc0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   18fc4:	e0bfff17 	ldw	r2,-4(fp)
   18fc8:	10800a17 	ldw	r2,40(r2)
   18fcc:	10800104 	addi	r2,r2,4
   18fd0:	1007883a 	mov	r3,r2
   18fd4:	e0bffe17 	ldw	r2,-8(fp)
   18fd8:	18800035 	stwio	r2,0(r3)
}
   18fdc:	e037883a 	mov	sp,fp
   18fe0:	df000017 	ldw	fp,0(sp)
   18fe4:	dec00104 	addi	sp,sp,4
   18fe8:	f800283a 	ret

00018fec <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   18fec:	defffd04 	addi	sp,sp,-12
   18ff0:	df000215 	stw	fp,8(sp)
   18ff4:	df000204 	addi	fp,sp,8
   18ff8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   18ffc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   19000:	e0bfff17 	ldw	r2,-4(fp)
   19004:	10800a17 	ldw	r2,40(r2)
   19008:	10800084 	addi	r2,r2,2
   1900c:	1080002b 	ldhuio	r2,0(r2)
   19010:	10bfffcc 	andi	r2,r2,65535
   19014:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   19018:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1901c:	e037883a 	mov	sp,fp
   19020:	df000017 	ldw	fp,0(sp)
   19024:	dec00104 	addi	sp,sp,4
   19028:	f800283a 	ret

0001902c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1902c:	defffd04 	addi	sp,sp,-12
   19030:	df000215 	stw	fp,8(sp)
   19034:	df000204 	addi	fp,sp,8
   19038:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1903c:	e0bfff17 	ldw	r2,-4(fp)
   19040:	10800a17 	ldw	r2,40(r2)
   19044:	10800104 	addi	r2,r2,4
   19048:	10800037 	ldwio	r2,0(r2)
   1904c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   19050:	e0bffe17 	ldw	r2,-8(fp)
   19054:	1004d43a 	srli	r2,r2,16
}
   19058:	e037883a 	mov	sp,fp
   1905c:	df000017 	ldw	fp,0(sp)
   19060:	dec00104 	addi	sp,sp,4
   19064:	f800283a 	ret

00019068 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   19068:	defffd04 	addi	sp,sp,-12
   1906c:	df000215 	stw	fp,8(sp)
   19070:	df000204 	addi	fp,sp,8
   19074:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   19078:	e0bfff17 	ldw	r2,-4(fp)
   1907c:	1080800c 	andi	r2,r2,512
   19080:	1004d27a 	srli	r2,r2,9
   19084:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   19088:	e0bffe17 	ldw	r2,-8(fp)
   1908c:	10000226 	beq	r2,zero,19098 <alt_up_irda_check_parity+0x30>
   19090:	00bfffc4 	movi	r2,-1
   19094:	00000106 	br	1909c <alt_up_irda_check_parity+0x34>
   19098:	0005883a 	mov	r2,zero
}
   1909c:	e037883a 	mov	sp,fp
   190a0:	df000017 	ldw	fp,0(sp)
   190a4:	dec00104 	addi	sp,sp,4
   190a8:	f800283a 	ret

000190ac <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   190ac:	defffd04 	addi	sp,sp,-12
   190b0:	df000215 	stw	fp,8(sp)
   190b4:	df000204 	addi	fp,sp,8
   190b8:	e13ffe15 	stw	r4,-8(fp)
   190bc:	2805883a 	mov	r2,r5
   190c0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   190c4:	e0bffe17 	ldw	r2,-8(fp)
   190c8:	10800a17 	ldw	r2,40(r2)
   190cc:	1007883a 	mov	r3,r2
   190d0:	e0bfff03 	ldbu	r2,-4(fp)
   190d4:	18800035 	stwio	r2,0(r3)
	return 0;
   190d8:	0005883a 	mov	r2,zero
}
   190dc:	e037883a 	mov	sp,fp
   190e0:	df000017 	ldw	fp,0(sp)
   190e4:	dec00104 	addi	sp,sp,4
   190e8:	f800283a 	ret

000190ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   190ec:	defffa04 	addi	sp,sp,-24
   190f0:	dfc00515 	stw	ra,20(sp)
   190f4:	df000415 	stw	fp,16(sp)
   190f8:	df000404 	addi	fp,sp,16
   190fc:	e13ffd15 	stw	r4,-12(fp)
   19100:	e17ffe15 	stw	r5,-8(fp)
   19104:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   19108:	e0bffd17 	ldw	r2,-12(fp)
   1910c:	10800a17 	ldw	r2,40(r2)
   19110:	10800037 	ldwio	r2,0(r2)
   19114:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   19118:	e0bffc17 	ldw	r2,-16(fp)
   1911c:	1007883a 	mov	r3,r2
   19120:	e0bffe17 	ldw	r2,-8(fp)
   19124:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   19128:	e13ffc17 	ldw	r4,-16(fp)
   1912c:	00190680 	call	19068 <alt_up_irda_check_parity>
   19130:	1007883a 	mov	r3,r2
   19134:	e0bfff17 	ldw	r2,-4(fp)
   19138:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1913c:	e0bffc17 	ldw	r2,-16(fp)
   19140:	10a0000c 	andi	r2,r2,32768
   19144:	1004d3fa 	srli	r2,r2,15
   19148:	10bfffc4 	addi	r2,r2,-1
}
   1914c:	e037883a 	mov	sp,fp
   19150:	dfc00117 	ldw	ra,4(sp)
   19154:	df000017 	ldw	fp,0(sp)
   19158:	dec00204 	addi	sp,sp,8
   1915c:	f800283a 	ret

00019160 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   19160:	defff804 	addi	sp,sp,-32
   19164:	dfc00715 	stw	ra,28(sp)
   19168:	df000615 	stw	fp,24(sp)
   1916c:	df000604 	addi	fp,sp,24
   19170:	e13ffd15 	stw	r4,-12(fp)
   19174:	e17ffe15 	stw	r5,-8(fp)
   19178:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1917c:	e0bffd17 	ldw	r2,-12(fp)
   19180:	10800017 	ldw	r2,0(r2)
   19184:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   19188:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1918c:	00000e06 	br	191c8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   19190:	e0bffe17 	ldw	r2,-8(fp)
   19194:	10c00044 	addi	r3,r2,1
   19198:	e0fffe15 	stw	r3,-8(fp)
   1919c:	e0fffc04 	addi	r3,fp,-16
   191a0:	e13ffb17 	ldw	r4,-20(fp)
   191a4:	100b883a 	mov	r5,r2
   191a8:	180d883a 	mov	r6,r3
   191ac:	00190ec0 	call	190ec <alt_up_irda_read_data>
   191b0:	1000041e 	bne	r2,zero,191c4 <alt_up_irda_read_fd+0x64>
			count++;
   191b4:	e0bffa17 	ldw	r2,-24(fp)
   191b8:	10800044 	addi	r2,r2,1
   191bc:	e0bffa15 	stw	r2,-24(fp)
   191c0:	00000106 	br	191c8 <alt_up_irda_read_fd+0x68>
		else
			break;
   191c4:	00000406 	br	191d8 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   191c8:	e0bfff17 	ldw	r2,-4(fp)
   191cc:	10ffffc4 	addi	r3,r2,-1
   191d0:	e0ffff15 	stw	r3,-4(fp)
   191d4:	103fee1e 	bne	r2,zero,19190 <__alt_mem_Flash_flash_data+0xf4019190>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   191d8:	e0bffa17 	ldw	r2,-24(fp)
}
   191dc:	e037883a 	mov	sp,fp
   191e0:	dfc00117 	ldw	ra,4(sp)
   191e4:	df000017 	ldw	fp,0(sp)
   191e8:	dec00204 	addi	sp,sp,8
   191ec:	f800283a 	ret

000191f0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   191f0:	defff904 	addi	sp,sp,-28
   191f4:	dfc00615 	stw	ra,24(sp)
   191f8:	df000515 	stw	fp,20(sp)
   191fc:	df000504 	addi	fp,sp,20
   19200:	e13ffd15 	stw	r4,-12(fp)
   19204:	e17ffe15 	stw	r5,-8(fp)
   19208:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1920c:	e0bffd17 	ldw	r2,-12(fp)
   19210:	10800017 	ldw	r2,0(r2)
   19214:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   19218:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1921c:	00000e06 	br	19258 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   19220:	e0bffe17 	ldw	r2,-8(fp)
   19224:	10c00044 	addi	r3,r2,1
   19228:	e0fffe15 	stw	r3,-8(fp)
   1922c:	10800003 	ldbu	r2,0(r2)
   19230:	10803fcc 	andi	r2,r2,255
   19234:	e13ffc17 	ldw	r4,-16(fp)
   19238:	100b883a 	mov	r5,r2
   1923c:	00190ac0 	call	190ac <alt_up_irda_write_data>
   19240:	1000041e 	bne	r2,zero,19254 <alt_up_irda_write_fd+0x64>
			count++;
   19244:	e0bffb17 	ldw	r2,-20(fp)
   19248:	10800044 	addi	r2,r2,1
   1924c:	e0bffb15 	stw	r2,-20(fp)
   19250:	00000106 	br	19258 <alt_up_irda_write_fd+0x68>
		else
			break;
   19254:	00000406 	br	19268 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   19258:	e0bfff17 	ldw	r2,-4(fp)
   1925c:	10ffffc4 	addi	r3,r2,-1
   19260:	e0ffff15 	stw	r3,-4(fp)
   19264:	103fee1e 	bne	r2,zero,19220 <__alt_mem_Flash_flash_data+0xf4019220>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   19268:	e0bffb17 	ldw	r2,-20(fp)
}
   1926c:	e037883a 	mov	sp,fp
   19270:	dfc00117 	ldw	ra,4(sp)
   19274:	df000017 	ldw	fp,0(sp)
   19278:	dec00204 	addi	sp,sp,8
   1927c:	f800283a 	ret

00019280 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   19280:	defffc04 	addi	sp,sp,-16
   19284:	dfc00315 	stw	ra,12(sp)
   19288:	df000215 	stw	fp,8(sp)
   1928c:	df000204 	addi	fp,sp,8
   19290:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   19294:	e13fff17 	ldw	r4,-4(fp)
   19298:	014000b4 	movhi	r5,2
   1929c:	2977c304 	addi	r5,r5,-8436
   192a0:	001a43c0 	call	1a43c <alt_find_dev>
   192a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   192a8:	e0bffe17 	ldw	r2,-8(fp)
}
   192ac:	e037883a 	mov	sp,fp
   192b0:	dfc00117 	ldw	ra,4(sp)
   192b4:	df000017 	ldw	fp,0(sp)
   192b8:	dec00204 	addi	sp,sp,8
   192bc:	f800283a 	ret

000192c0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   192c0:	defffd04 	addi	sp,sp,-12
   192c4:	df000215 	stw	fp,8(sp)
   192c8:	df000204 	addi	fp,sp,8
   192cc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   192d0:	e0bfff17 	ldw	r2,-4(fp)
   192d4:	1080400c 	andi	r2,r2,256
   192d8:	1004d23a 	srli	r2,r2,8
   192dc:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   192e0:	e0bffe03 	ldbu	r2,-8(fp)
}
   192e4:	e037883a 	mov	sp,fp
   192e8:	df000017 	ldw	fp,0(sp)
   192ec:	dec00104 	addi	sp,sp,4
   192f0:	f800283a 	ret

000192f4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   192f4:	defffd04 	addi	sp,sp,-12
   192f8:	df000215 	stw	fp,8(sp)
   192fc:	df000204 	addi	fp,sp,8
   19300:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   19304:	e0bfff17 	ldw	r2,-4(fp)
   19308:	1080004c 	andi	r2,r2,1
   1930c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19310:	e0bffe03 	ldbu	r2,-8(fp)
}
   19314:	e037883a 	mov	sp,fp
   19318:	df000017 	ldw	fp,0(sp)
   1931c:	dec00104 	addi	sp,sp,4
   19320:	f800283a 	ret

00019324 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   19324:	defffd04 	addi	sp,sp,-12
   19328:	df000215 	stw	fp,8(sp)
   1932c:	df000204 	addi	fp,sp,8
   19330:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   19334:	e0bfff17 	ldw	r2,-4(fp)
   19338:	1081000c 	andi	r2,r2,1024
   1933c:	1004d2ba 	srli	r2,r2,10
   19340:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19344:	e0bffe03 	ldbu	r2,-8(fp)
}
   19348:	e037883a 	mov	sp,fp
   1934c:	df000017 	ldw	fp,0(sp)
   19350:	dec00104 	addi	sp,sp,4
   19354:	f800283a 	ret

00019358 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   19358:	defffd04 	addi	sp,sp,-12
   1935c:	df000215 	stw	fp,8(sp)
   19360:	df000204 	addi	fp,sp,8
   19364:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   19368:	e0bfff17 	ldw	r2,-4(fp)
   1936c:	1004d43a 	srli	r2,r2,16
   19370:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   19374:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19378:	e037883a 	mov	sp,fp
   1937c:	df000017 	ldw	fp,0(sp)
   19380:	dec00104 	addi	sp,sp,4
   19384:	f800283a 	ret

00019388 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   19388:	defffd04 	addi	sp,sp,-12
   1938c:	df000215 	stw	fp,8(sp)
   19390:	df000204 	addi	fp,sp,8
   19394:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   19398:	e0bfff17 	ldw	r2,-4(fp)
   1939c:	10a0000c 	andi	r2,r2,32768
   193a0:	1004d3fa 	srli	r2,r2,15
   193a4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   193a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   193ac:	e037883a 	mov	sp,fp
   193b0:	df000017 	ldw	fp,0(sp)
   193b4:	dec00104 	addi	sp,sp,4
   193b8:	f800283a 	ret

000193bc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   193bc:	defffd04 	addi	sp,sp,-12
   193c0:	df000215 	stw	fp,8(sp)
   193c4:	df000204 	addi	fp,sp,8
   193c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   193cc:	e0bfff17 	ldw	r2,-4(fp)
   193d0:	e0bffe05 	stb	r2,-8(fp)
	return data;
   193d4:	e0bffe03 	ldbu	r2,-8(fp)
}
   193d8:	e037883a 	mov	sp,fp
   193dc:	df000017 	ldw	fp,0(sp)
   193e0:	dec00104 	addi	sp,sp,4
   193e4:	f800283a 	ret

000193e8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   193e8:	defffb04 	addi	sp,sp,-20
   193ec:	dfc00415 	stw	ra,16(sp)
   193f0:	df000315 	stw	fp,12(sp)
   193f4:	df000304 	addi	fp,sp,12
   193f8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   193fc:	e13fff17 	ldw	r4,-4(fp)
   19400:	01403fc4 	movi	r5,255
   19404:	00196440 	call	19644 <alt_up_ps2_write_data_byte_with_ack>
   19408:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1940c:	e0bffd17 	ldw	r2,-12(fp)
   19410:	1000211e 	bne	r2,zero,19498 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19414:	e0bffe04 	addi	r2,fp,-8
   19418:	e13fff17 	ldw	r4,-4(fp)
   1941c:	100b883a 	mov	r5,r2
   19420:	00196a80 	call	196a8 <alt_up_ps2_read_data_byte_timeout>
   19424:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   19428:	e0bffd17 	ldw	r2,-12(fp)
   1942c:	10001a1e 	bne	r2,zero,19498 <alt_up_ps2_init+0xb0>
   19430:	e0bffe03 	ldbu	r2,-8(fp)
   19434:	10803fcc 	andi	r2,r2,255
   19438:	10802a98 	cmpnei	r2,r2,170
   1943c:	1000161e 	bne	r2,zero,19498 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19440:	e0bffe04 	addi	r2,fp,-8
   19444:	e13fff17 	ldw	r4,-4(fp)
   19448:	100b883a 	mov	r5,r2
   1944c:	00196a80 	call	196a8 <alt_up_ps2_read_data_byte_timeout>
   19450:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   19454:	e0bffd17 	ldw	r2,-12(fp)
   19458:	10bfe318 	cmpnei	r2,r2,-116
   1945c:	1000041e 	bne	r2,zero,19470 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   19460:	e0bfff17 	ldw	r2,-4(fp)
   19464:	00c00044 	movi	r3,1
   19468:	10c00d15 	stw	r3,52(r2)
   1946c:	00000a06 	br	19498 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   19470:	e0bffd17 	ldw	r2,-12(fp)
   19474:	1000081e 	bne	r2,zero,19498 <alt_up_ps2_init+0xb0>
   19478:	e0bffe03 	ldbu	r2,-8(fp)
   1947c:	10803fcc 	andi	r2,r2,255
   19480:	1000051e 	bne	r2,zero,19498 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   19484:	e0bfff17 	ldw	r2,-4(fp)
   19488:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1948c:	e13fff17 	ldw	r4,-4(fp)
   19490:	01403d04 	movi	r5,244
   19494:	00195600 	call	19560 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   19498:	e037883a 	mov	sp,fp
   1949c:	dfc00117 	ldw	ra,4(sp)
   194a0:	df000017 	ldw	fp,0(sp)
   194a4:	dec00204 	addi	sp,sp,8
   194a8:	f800283a 	ret

000194ac <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   194ac:	defffd04 	addi	sp,sp,-12
   194b0:	df000215 	stw	fp,8(sp)
   194b4:	df000204 	addi	fp,sp,8
   194b8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   194bc:	e0bfff17 	ldw	r2,-4(fp)
   194c0:	10800a17 	ldw	r2,40(r2)
   194c4:	10800104 	addi	r2,r2,4
   194c8:	10800037 	ldwio	r2,0(r2)
   194cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   194d0:	e0bffe17 	ldw	r2,-8(fp)
   194d4:	10800054 	ori	r2,r2,1
   194d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   194dc:	e0bfff17 	ldw	r2,-4(fp)
   194e0:	10800a17 	ldw	r2,40(r2)
   194e4:	10800104 	addi	r2,r2,4
   194e8:	1007883a 	mov	r3,r2
   194ec:	e0bffe17 	ldw	r2,-8(fp)
   194f0:	18800035 	stwio	r2,0(r3)
}
   194f4:	e037883a 	mov	sp,fp
   194f8:	df000017 	ldw	fp,0(sp)
   194fc:	dec00104 	addi	sp,sp,4
   19500:	f800283a 	ret

00019504 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19504:	defffd04 	addi	sp,sp,-12
   19508:	df000215 	stw	fp,8(sp)
   1950c:	df000204 	addi	fp,sp,8
   19510:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19514:	e0bfff17 	ldw	r2,-4(fp)
   19518:	10800a17 	ldw	r2,40(r2)
   1951c:	10800104 	addi	r2,r2,4
   19520:	10800037 	ldwio	r2,0(r2)
   19524:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19528:	e0fffe17 	ldw	r3,-8(fp)
   1952c:	00bfff84 	movi	r2,-2
   19530:	1884703a 	and	r2,r3,r2
   19534:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19538:	e0bfff17 	ldw	r2,-4(fp)
   1953c:	10800a17 	ldw	r2,40(r2)
   19540:	10800104 	addi	r2,r2,4
   19544:	1007883a 	mov	r3,r2
   19548:	e0bffe17 	ldw	r2,-8(fp)
   1954c:	18800035 	stwio	r2,0(r3)
}
   19550:	e037883a 	mov	sp,fp
   19554:	df000017 	ldw	fp,0(sp)
   19558:	dec00104 	addi	sp,sp,4
   1955c:	f800283a 	ret

00019560 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19560:	defffb04 	addi	sp,sp,-20
   19564:	dfc00415 	stw	ra,16(sp)
   19568:	df000315 	stw	fp,12(sp)
   1956c:	df000304 	addi	fp,sp,12
   19570:	e13ffe15 	stw	r4,-8(fp)
   19574:	2805883a 	mov	r2,r5
   19578:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1957c:	e0bffe17 	ldw	r2,-8(fp)
   19580:	10800a17 	ldw	r2,40(r2)
   19584:	1007883a 	mov	r3,r2
   19588:	e0bfff03 	ldbu	r2,-4(fp)
   1958c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   19590:	e0bffe17 	ldw	r2,-8(fp)
   19594:	10800a17 	ldw	r2,40(r2)
   19598:	10800104 	addi	r2,r2,4
   1959c:	10800037 	ldwio	r2,0(r2)
   195a0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   195a4:	e13ffd17 	ldw	r4,-12(fp)
   195a8:	00193240 	call	19324 <read_CE_bit>
   195ac:	10803fcc 	andi	r2,r2,255
   195b0:	10000226 	beq	r2,zero,195bc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   195b4:	00bffec4 	movi	r2,-5
   195b8:	00000106 	br	195c0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   195bc:	0005883a 	mov	r2,zero
}
   195c0:	e037883a 	mov	sp,fp
   195c4:	dfc00117 	ldw	ra,4(sp)
   195c8:	df000017 	ldw	fp,0(sp)
   195cc:	dec00204 	addi	sp,sp,8
   195d0:	f800283a 	ret

000195d4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   195d4:	defffc04 	addi	sp,sp,-16
   195d8:	dfc00315 	stw	ra,12(sp)
   195dc:	df000215 	stw	fp,8(sp)
   195e0:	df000204 	addi	fp,sp,8
   195e4:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   195e8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   195ec:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   195f0:	e0bffe44 	addi	r2,fp,-7
   195f4:	e13fff17 	ldw	r4,-4(fp)
   195f8:	100b883a 	mov	r5,r2
   195fc:	00196a80 	call	196a8 <alt_up_ps2_read_data_byte_timeout>
   19600:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   19604:	e0bffe03 	ldbu	r2,-8(fp)
   19608:	1000061e 	bne	r2,zero,19624 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1960c:	e0bffe43 	ldbu	r2,-7(fp)
   19610:	10803fcc 	andi	r2,r2,255
   19614:	10803e98 	cmpnei	r2,r2,250
   19618:	1000041e 	bne	r2,zero,1962c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1961c:	0005883a 	mov	r2,zero
   19620:	00000306 	br	19630 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   19624:	e0bffe03 	ldbu	r2,-8(fp)
   19628:	00000106 	br	19630 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1962c:	003ff006 	br	195f0 <__alt_mem_Flash_flash_data+0xf40195f0>
	return -ETIMEDOUT;
}
   19630:	e037883a 	mov	sp,fp
   19634:	dfc00117 	ldw	ra,4(sp)
   19638:	df000017 	ldw	fp,0(sp)
   1963c:	dec00204 	addi	sp,sp,8
   19640:	f800283a 	ret

00019644 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19644:	defffa04 	addi	sp,sp,-24
   19648:	dfc00515 	stw	ra,20(sp)
   1964c:	df000415 	stw	fp,16(sp)
   19650:	df000404 	addi	fp,sp,16
   19654:	e13ffe15 	stw	r4,-8(fp)
   19658:	2805883a 	mov	r2,r5
   1965c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   19660:	e0bfff03 	ldbu	r2,-4(fp)
   19664:	e13ffe17 	ldw	r4,-8(fp)
   19668:	100b883a 	mov	r5,r2
   1966c:	00195600 	call	19560 <alt_up_ps2_write_data_byte>
   19670:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   19674:	e0bffc17 	ldw	r2,-16(fp)
   19678:	10000226 	beq	r2,zero,19684 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1967c:	e0bffc17 	ldw	r2,-16(fp)
   19680:	00000406 	br	19694 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   19684:	e13ffe17 	ldw	r4,-8(fp)
   19688:	00195d40 	call	195d4 <alt_up_ps2_wait_for_ack>
   1968c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   19690:	e0bffd17 	ldw	r2,-12(fp)
}
   19694:	e037883a 	mov	sp,fp
   19698:	dfc00117 	ldw	ra,4(sp)
   1969c:	df000017 	ldw	fp,0(sp)
   196a0:	dec00204 	addi	sp,sp,8
   196a4:	f800283a 	ret

000196a8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   196a8:	defffa04 	addi	sp,sp,-24
   196ac:	dfc00515 	stw	ra,20(sp)
   196b0:	df000415 	stw	fp,16(sp)
   196b4:	df000404 	addi	fp,sp,16
   196b8:	e13ffe15 	stw	r4,-8(fp)
   196bc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   196c0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   196c4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   196c8:	e0bffc17 	ldw	r2,-16(fp)
   196cc:	10800044 	addi	r2,r2,1
   196d0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   196d4:	e0bffe17 	ldw	r2,-8(fp)
   196d8:	10800a17 	ldw	r2,40(r2)
   196dc:	10800037 	ldwio	r2,0(r2)
   196e0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   196e4:	e13ffd17 	ldw	r4,-12(fp)
   196e8:	00193880 	call	19388 <read_data_valid>
   196ec:	10803fcc 	andi	r2,r2,255
   196f0:	10000726 	beq	r2,zero,19710 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   196f4:	e13ffd17 	ldw	r4,-12(fp)
   196f8:	00193bc0 	call	193bc <read_data_byte>
   196fc:	1007883a 	mov	r3,r2
   19700:	e0bfff17 	ldw	r2,-4(fp)
   19704:	10c00005 	stb	r3,0(r2)
			return 0;
   19708:	0005883a 	mov	r2,zero
   1970c:	00000a06 	br	19738 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   19710:	e0bffe17 	ldw	r2,-8(fp)
   19714:	10800c17 	ldw	r2,48(r2)
   19718:	10000626 	beq	r2,zero,19734 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1971c:	e0bffe17 	ldw	r2,-8(fp)
   19720:	10c00c17 	ldw	r3,48(r2)
   19724:	e0bffc17 	ldw	r2,-16(fp)
   19728:	1880022e 	bgeu	r3,r2,19734 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1972c:	00bfe304 	movi	r2,-116
   19730:	00000106 	br	19738 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   19734:	003fe406 	br	196c8 <__alt_mem_Flash_flash_data+0xf40196c8>
}
   19738:	e037883a 	mov	sp,fp
   1973c:	dfc00117 	ldw	ra,4(sp)
   19740:	df000017 	ldw	fp,0(sp)
   19744:	dec00204 	addi	sp,sp,8
   19748:	f800283a 	ret

0001974c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1974c:	defffb04 	addi	sp,sp,-20
   19750:	dfc00415 	stw	ra,16(sp)
   19754:	df000315 	stw	fp,12(sp)
   19758:	df000304 	addi	fp,sp,12
   1975c:	e13ffe15 	stw	r4,-8(fp)
   19760:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19764:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19768:	e0bffe17 	ldw	r2,-8(fp)
   1976c:	10800a17 	ldw	r2,40(r2)
   19770:	10800037 	ldwio	r2,0(r2)
   19774:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   19778:	e13ffd17 	ldw	r4,-12(fp)
   1977c:	00193880 	call	19388 <read_data_valid>
   19780:	10803fcc 	andi	r2,r2,255
   19784:	10000726 	beq	r2,zero,197a4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   19788:	e13ffd17 	ldw	r4,-12(fp)
   1978c:	00193bc0 	call	193bc <read_data_byte>
   19790:	1007883a 	mov	r3,r2
   19794:	e0bfff17 	ldw	r2,-4(fp)
   19798:	10c00005 	stb	r3,0(r2)
		return 0;
   1979c:	0005883a 	mov	r2,zero
   197a0:	00000106 	br	197a8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   197a4:	00bfffc4 	movi	r2,-1
}
   197a8:	e037883a 	mov	sp,fp
   197ac:	dfc00117 	ldw	ra,4(sp)
   197b0:	df000017 	ldw	fp,0(sp)
   197b4:	dec00204 	addi	sp,sp,8
   197b8:	f800283a 	ret

000197bc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   197bc:	defffb04 	addi	sp,sp,-20
   197c0:	dfc00415 	stw	ra,16(sp)
   197c4:	df000315 	stw	fp,12(sp)
   197c8:	df000304 	addi	fp,sp,12
   197cc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   197d0:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   197d4:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   197d8:	e0bfff17 	ldw	r2,-4(fp)
   197dc:	10800a17 	ldw	r2,40(r2)
   197e0:	10800037 	ldwio	r2,0(r2)
   197e4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   197e8:	e13ffe17 	ldw	r4,-8(fp)
   197ec:	00193580 	call	19358 <read_num_bytes_available>
   197f0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   197f4:	e0bffd0b 	ldhu	r2,-12(fp)
   197f8:	103ff71e 	bne	r2,zero,197d8 <__alt_mem_Flash_flash_data+0xf40197d8>
}
   197fc:	e037883a 	mov	sp,fp
   19800:	dfc00117 	ldw	ra,4(sp)
   19804:	df000017 	ldw	fp,0(sp)
   19808:	dec00204 	addi	sp,sp,8
   1980c:	f800283a 	ret

00019810 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   19810:	defff804 	addi	sp,sp,-32
   19814:	dfc00715 	stw	ra,28(sp)
   19818:	df000615 	stw	fp,24(sp)
   1981c:	df000604 	addi	fp,sp,24
   19820:	e13ffd15 	stw	r4,-12(fp)
   19824:	e17ffe15 	stw	r5,-8(fp)
   19828:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1982c:	e0bffd17 	ldw	r2,-12(fp)
   19830:	10800017 	ldw	r2,0(r2)
   19834:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   19838:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1983c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   19840:	e0fffc17 	ldw	r3,-16(fp)
   19844:	e0bfff17 	ldw	r2,-4(fp)
   19848:	18bffd16 	blt	r3,r2,19840 <__alt_mem_Flash_flash_data+0xf4019840>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1984c:	e0bffe17 	ldw	r2,-8(fp)
   19850:	10c00044 	addi	r3,r2,1
   19854:	e0fffe15 	stw	r3,-8(fp)
   19858:	e13ffa17 	ldw	r4,-24(fp)
   1985c:	100b883a 	mov	r5,r2
   19860:	00196a80 	call	196a8 <alt_up_ps2_read_data_byte_timeout>
   19864:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   19868:	e0bffb17 	ldw	r2,-20(fp)
   1986c:	10000226 	beq	r2,zero,19878 <alt_up_ps2_read_fd+0x68>
			return count;
   19870:	e0bffc17 	ldw	r2,-16(fp)
   19874:	00000406 	br	19888 <alt_up_ps2_read_fd+0x78>
		count++;
   19878:	e0bffc17 	ldw	r2,-16(fp)
   1987c:	10800044 	addi	r2,r2,1
   19880:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   19884:	e0bffc17 	ldw	r2,-16(fp)
}
   19888:	e037883a 	mov	sp,fp
   1988c:	dfc00117 	ldw	ra,4(sp)
   19890:	df000017 	ldw	fp,0(sp)
   19894:	dec00204 	addi	sp,sp,8
   19898:	f800283a 	ret

0001989c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1989c:	defff804 	addi	sp,sp,-32
   198a0:	dfc00715 	stw	ra,28(sp)
   198a4:	df000615 	stw	fp,24(sp)
   198a8:	df000604 	addi	fp,sp,24
   198ac:	e13ffd15 	stw	r4,-12(fp)
   198b0:	e17ffe15 	stw	r5,-8(fp)
   198b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   198b8:	e0bffd17 	ldw	r2,-12(fp)
   198bc:	10800017 	ldw	r2,0(r2)
   198c0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   198c4:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   198c8:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   198cc:	00001006 	br	19910 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   198d0:	e0bffe17 	ldw	r2,-8(fp)
   198d4:	10c00044 	addi	r3,r2,1
   198d8:	e0fffe15 	stw	r3,-8(fp)
   198dc:	10800003 	ldbu	r2,0(r2)
   198e0:	10803fcc 	andi	r2,r2,255
   198e4:	e13ffb17 	ldw	r4,-20(fp)
   198e8:	100b883a 	mov	r5,r2
   198ec:	00195600 	call	19560 <alt_up_ps2_write_data_byte>
   198f0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   198f4:	e0bffc17 	ldw	r2,-16(fp)
   198f8:	10000226 	beq	r2,zero,19904 <alt_up_ps2_write_fd+0x68>
			return count;
   198fc:	e0bffa17 	ldw	r2,-24(fp)
   19900:	00000706 	br	19920 <alt_up_ps2_write_fd+0x84>
		count++;
   19904:	e0bffa17 	ldw	r2,-24(fp)
   19908:	10800044 	addi	r2,r2,1
   1990c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   19910:	e0fffa17 	ldw	r3,-24(fp)
   19914:	e0bfff17 	ldw	r2,-4(fp)
   19918:	18bfed16 	blt	r3,r2,198d0 <__alt_mem_Flash_flash_data+0xf40198d0>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1991c:	e0bffa17 	ldw	r2,-24(fp)
}
   19920:	e037883a 	mov	sp,fp
   19924:	dfc00117 	ldw	ra,4(sp)
   19928:	df000017 	ldw	fp,0(sp)
   1992c:	dec00204 	addi	sp,sp,8
   19930:	f800283a 	ret

00019934 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   19934:	defffc04 	addi	sp,sp,-16
   19938:	dfc00315 	stw	ra,12(sp)
   1993c:	df000215 	stw	fp,8(sp)
   19940:	df000204 	addi	fp,sp,8
   19944:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   19948:	e13fff17 	ldw	r4,-4(fp)
   1994c:	014000b4 	movhi	r5,2
   19950:	2977c304 	addi	r5,r5,-8436
   19954:	001a43c0 	call	1a43c <alt_find_dev>
   19958:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1995c:	e0bffe17 	ldw	r2,-8(fp)
}
   19960:	e037883a 	mov	sp,fp
   19964:	dfc00117 	ldw	ra,4(sp)
   19968:	df000017 	ldw	fp,0(sp)
   1996c:	dec00204 	addi	sp,sp,8
   19970:	f800283a 	ret

00019974 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19974:	defffd04 	addi	sp,sp,-12
   19978:	df000215 	stw	fp,8(sp)
   1997c:	df000204 	addi	fp,sp,8
   19980:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19984:	e0bfff17 	ldw	r2,-4(fp)
   19988:	10800a17 	ldw	r2,40(r2)
   1998c:	10800104 	addi	r2,r2,4
   19990:	10800037 	ldwio	r2,0(r2)
   19994:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   19998:	e0bffe17 	ldw	r2,-8(fp)
   1999c:	10800054 	ori	r2,r2,1
   199a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   199a4:	e0bfff17 	ldw	r2,-4(fp)
   199a8:	10800a17 	ldw	r2,40(r2)
   199ac:	10800104 	addi	r2,r2,4
   199b0:	1007883a 	mov	r3,r2
   199b4:	e0bffe17 	ldw	r2,-8(fp)
   199b8:	18800035 	stwio	r2,0(r3)
}
   199bc:	e037883a 	mov	sp,fp
   199c0:	df000017 	ldw	fp,0(sp)
   199c4:	dec00104 	addi	sp,sp,4
   199c8:	f800283a 	ret

000199cc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   199cc:	defffd04 	addi	sp,sp,-12
   199d0:	df000215 	stw	fp,8(sp)
   199d4:	df000204 	addi	fp,sp,8
   199d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   199dc:	e0bfff17 	ldw	r2,-4(fp)
   199e0:	10800a17 	ldw	r2,40(r2)
   199e4:	10800104 	addi	r2,r2,4
   199e8:	10800037 	ldwio	r2,0(r2)
   199ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   199f0:	e0fffe17 	ldw	r3,-8(fp)
   199f4:	00bfff84 	movi	r2,-2
   199f8:	1884703a 	and	r2,r3,r2
   199fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19a00:	e0bfff17 	ldw	r2,-4(fp)
   19a04:	10800a17 	ldw	r2,40(r2)
   19a08:	10800104 	addi	r2,r2,4
   19a0c:	1007883a 	mov	r3,r2
   19a10:	e0bffe17 	ldw	r2,-8(fp)
   19a14:	18800035 	stwio	r2,0(r3)
}
   19a18:	e037883a 	mov	sp,fp
   19a1c:	df000017 	ldw	fp,0(sp)
   19a20:	dec00104 	addi	sp,sp,4
   19a24:	f800283a 	ret

00019a28 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   19a28:	defffd04 	addi	sp,sp,-12
   19a2c:	df000215 	stw	fp,8(sp)
   19a30:	df000204 	addi	fp,sp,8
   19a34:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19a38:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   19a3c:	e0bfff17 	ldw	r2,-4(fp)
   19a40:	10800a17 	ldw	r2,40(r2)
   19a44:	10800084 	addi	r2,r2,2
   19a48:	1080002b 	ldhuio	r2,0(r2)
   19a4c:	10bfffcc 	andi	r2,r2,65535
   19a50:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   19a54:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19a58:	e037883a 	mov	sp,fp
   19a5c:	df000017 	ldw	fp,0(sp)
   19a60:	dec00104 	addi	sp,sp,4
   19a64:	f800283a 	ret

00019a68 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   19a68:	defffd04 	addi	sp,sp,-12
   19a6c:	df000215 	stw	fp,8(sp)
   19a70:	df000204 	addi	fp,sp,8
   19a74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19a78:	e0bfff17 	ldw	r2,-4(fp)
   19a7c:	10800a17 	ldw	r2,40(r2)
   19a80:	10800104 	addi	r2,r2,4
   19a84:	10800037 	ldwio	r2,0(r2)
   19a88:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   19a8c:	e0bffe17 	ldw	r2,-8(fp)
   19a90:	1004d43a 	srli	r2,r2,16
}
   19a94:	e037883a 	mov	sp,fp
   19a98:	df000017 	ldw	fp,0(sp)
   19a9c:	dec00104 	addi	sp,sp,4
   19aa0:	f800283a 	ret

00019aa4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   19aa4:	defffd04 	addi	sp,sp,-12
   19aa8:	df000215 	stw	fp,8(sp)
   19aac:	df000204 	addi	fp,sp,8
   19ab0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   19ab4:	e0bfff17 	ldw	r2,-4(fp)
   19ab8:	1080800c 	andi	r2,r2,512
   19abc:	1004d27a 	srli	r2,r2,9
   19ac0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   19ac4:	e0bffe17 	ldw	r2,-8(fp)
   19ac8:	10000226 	beq	r2,zero,19ad4 <alt_up_rs232_check_parity+0x30>
   19acc:	00bfffc4 	movi	r2,-1
   19ad0:	00000106 	br	19ad8 <alt_up_rs232_check_parity+0x34>
   19ad4:	0005883a 	mov	r2,zero
}
   19ad8:	e037883a 	mov	sp,fp
   19adc:	df000017 	ldw	fp,0(sp)
   19ae0:	dec00104 	addi	sp,sp,4
   19ae4:	f800283a 	ret

00019ae8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   19ae8:	defffd04 	addi	sp,sp,-12
   19aec:	df000215 	stw	fp,8(sp)
   19af0:	df000204 	addi	fp,sp,8
   19af4:	e13ffe15 	stw	r4,-8(fp)
   19af8:	2805883a 	mov	r2,r5
   19afc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   19b00:	e0bffe17 	ldw	r2,-8(fp)
   19b04:	10800a17 	ldw	r2,40(r2)
   19b08:	1007883a 	mov	r3,r2
   19b0c:	e0bfff03 	ldbu	r2,-4(fp)
   19b10:	18800035 	stwio	r2,0(r3)
	return 0;
   19b14:	0005883a 	mov	r2,zero
}
   19b18:	e037883a 	mov	sp,fp
   19b1c:	df000017 	ldw	fp,0(sp)
   19b20:	dec00104 	addi	sp,sp,4
   19b24:	f800283a 	ret

00019b28 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   19b28:	defffa04 	addi	sp,sp,-24
   19b2c:	dfc00515 	stw	ra,20(sp)
   19b30:	df000415 	stw	fp,16(sp)
   19b34:	df000404 	addi	fp,sp,16
   19b38:	e13ffd15 	stw	r4,-12(fp)
   19b3c:	e17ffe15 	stw	r5,-8(fp)
   19b40:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   19b44:	e0bffd17 	ldw	r2,-12(fp)
   19b48:	10800a17 	ldw	r2,40(r2)
   19b4c:	10800037 	ldwio	r2,0(r2)
   19b50:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   19b54:	e0bffc17 	ldw	r2,-16(fp)
   19b58:	1007883a 	mov	r3,r2
   19b5c:	e0bffe17 	ldw	r2,-8(fp)
   19b60:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   19b64:	e13ffc17 	ldw	r4,-16(fp)
   19b68:	0019aa40 	call	19aa4 <alt_up_rs232_check_parity>
   19b6c:	1007883a 	mov	r3,r2
   19b70:	e0bfff17 	ldw	r2,-4(fp)
   19b74:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   19b78:	e0bffc17 	ldw	r2,-16(fp)
   19b7c:	10a0000c 	andi	r2,r2,32768
   19b80:	1004d3fa 	srli	r2,r2,15
   19b84:	10bfffc4 	addi	r2,r2,-1
}
   19b88:	e037883a 	mov	sp,fp
   19b8c:	dfc00117 	ldw	ra,4(sp)
   19b90:	df000017 	ldw	fp,0(sp)
   19b94:	dec00204 	addi	sp,sp,8
   19b98:	f800283a 	ret

00019b9c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   19b9c:	defff804 	addi	sp,sp,-32
   19ba0:	dfc00715 	stw	ra,28(sp)
   19ba4:	df000615 	stw	fp,24(sp)
   19ba8:	df000604 	addi	fp,sp,24
   19bac:	e13ffd15 	stw	r4,-12(fp)
   19bb0:	e17ffe15 	stw	r5,-8(fp)
   19bb4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   19bb8:	e0bffd17 	ldw	r2,-12(fp)
   19bbc:	10800017 	ldw	r2,0(r2)
   19bc0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   19bc4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   19bc8:	00000e06 	br	19c04 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   19bcc:	e0bffe17 	ldw	r2,-8(fp)
   19bd0:	10c00044 	addi	r3,r2,1
   19bd4:	e0fffe15 	stw	r3,-8(fp)
   19bd8:	e0fffc04 	addi	r3,fp,-16
   19bdc:	e13ffb17 	ldw	r4,-20(fp)
   19be0:	100b883a 	mov	r5,r2
   19be4:	180d883a 	mov	r6,r3
   19be8:	0019b280 	call	19b28 <alt_up_rs232_read_data>
   19bec:	1000041e 	bne	r2,zero,19c00 <alt_up_rs232_read_fd+0x64>
			count++;
   19bf0:	e0bffa17 	ldw	r2,-24(fp)
   19bf4:	10800044 	addi	r2,r2,1
   19bf8:	e0bffa15 	stw	r2,-24(fp)
   19bfc:	00000106 	br	19c04 <alt_up_rs232_read_fd+0x68>
		else
			break;
   19c00:	00000406 	br	19c14 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   19c04:	e0bfff17 	ldw	r2,-4(fp)
   19c08:	10ffffc4 	addi	r3,r2,-1
   19c0c:	e0ffff15 	stw	r3,-4(fp)
   19c10:	103fee1e 	bne	r2,zero,19bcc <__alt_mem_Flash_flash_data+0xf4019bcc>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   19c14:	e0bffa17 	ldw	r2,-24(fp)
}
   19c18:	e037883a 	mov	sp,fp
   19c1c:	dfc00117 	ldw	ra,4(sp)
   19c20:	df000017 	ldw	fp,0(sp)
   19c24:	dec00204 	addi	sp,sp,8
   19c28:	f800283a 	ret

00019c2c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19c2c:	defff904 	addi	sp,sp,-28
   19c30:	dfc00615 	stw	ra,24(sp)
   19c34:	df000515 	stw	fp,20(sp)
   19c38:	df000504 	addi	fp,sp,20
   19c3c:	e13ffd15 	stw	r4,-12(fp)
   19c40:	e17ffe15 	stw	r5,-8(fp)
   19c44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   19c48:	e0bffd17 	ldw	r2,-12(fp)
   19c4c:	10800017 	ldw	r2,0(r2)
   19c50:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   19c54:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   19c58:	00000f06 	br	19c98 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   19c5c:	e0bffe17 	ldw	r2,-8(fp)
   19c60:	10800003 	ldbu	r2,0(r2)
   19c64:	10803fcc 	andi	r2,r2,255
   19c68:	e13ffc17 	ldw	r4,-16(fp)
   19c6c:	100b883a 	mov	r5,r2
   19c70:	0019ae80 	call	19ae8 <alt_up_rs232_write_data>
   19c74:	1000071e 	bne	r2,zero,19c94 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   19c78:	e0bffb17 	ldw	r2,-20(fp)
   19c7c:	10800044 	addi	r2,r2,1
   19c80:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   19c84:	e0bffe17 	ldw	r2,-8(fp)
   19c88:	10800044 	addi	r2,r2,1
   19c8c:	e0bffe15 	stw	r2,-8(fp)
   19c90:	00000106 	br	19c98 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   19c94:	00000406 	br	19ca8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   19c98:	e0bfff17 	ldw	r2,-4(fp)
   19c9c:	10ffffc4 	addi	r3,r2,-1
   19ca0:	e0ffff15 	stw	r3,-4(fp)
   19ca4:	103fed1e 	bne	r2,zero,19c5c <__alt_mem_Flash_flash_data+0xf4019c5c>
			ptr++;
		}
		else
			break;
	}
	return count;
   19ca8:	e0bffb17 	ldw	r2,-20(fp)
}
   19cac:	e037883a 	mov	sp,fp
   19cb0:	dfc00117 	ldw	ra,4(sp)
   19cb4:	df000017 	ldw	fp,0(sp)
   19cb8:	dec00204 	addi	sp,sp,8
   19cbc:	f800283a 	ret

00019cc0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   19cc0:	defffc04 	addi	sp,sp,-16
   19cc4:	dfc00315 	stw	ra,12(sp)
   19cc8:	df000215 	stw	fp,8(sp)
   19ccc:	df000204 	addi	fp,sp,8
   19cd0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   19cd4:	e13fff17 	ldw	r4,-4(fp)
   19cd8:	014000b4 	movhi	r5,2
   19cdc:	2977c304 	addi	r5,r5,-8436
   19ce0:	001a43c0 	call	1a43c <alt_find_dev>
   19ce4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19ce8:	e0bffe17 	ldw	r2,-8(fp)
}
   19cec:	e037883a 	mov	sp,fp
   19cf0:	dfc00117 	ldw	ra,4(sp)
   19cf4:	df000017 	ldw	fp,0(sp)
   19cf8:	dec00204 	addi	sp,sp,8
   19cfc:	f800283a 	ret

00019d00 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   19d00:	defffc04 	addi	sp,sp,-16
   19d04:	dfc00315 	stw	ra,12(sp)
   19d08:	df000215 	stw	fp,8(sp)
   19d0c:	df000204 	addi	fp,sp,8
   19d10:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   19d14:	e0bfff17 	ldw	r2,-4(fp)
   19d18:	10800217 	ldw	r2,8(r2)
   19d1c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   19d20:	00000b06 	br	19d50 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   19d24:	e13ffe17 	ldw	r4,-8(fp)
   19d28:	014000b4 	movhi	r5,2
   19d2c:	29700204 	addi	r5,r5,-16376
   19d30:	000ca080 	call	ca08 <strcmp>
   19d34:	1000031e 	bne	r2,zero,19d44 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   19d38:	e0bffe17 	ldw	r2,-8(fp)
   19d3c:	10000005 	stb	zero,0(r2)
			break;
   19d40:	00000906 	br	19d68 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   19d44:	e0bffe17 	ldw	r2,-8(fp)
   19d48:	10800044 	addi	r2,r2,1
   19d4c:	e0bffe15 	stw	r2,-8(fp)
   19d50:	e0bffe17 	ldw	r2,-8(fp)
   19d54:	10800003 	ldbu	r2,0(r2)
   19d58:	10803fcc 	andi	r2,r2,255
   19d5c:	1080201c 	xori	r2,r2,128
   19d60:	10bfe004 	addi	r2,r2,-128
   19d64:	103fef1e 	bne	r2,zero,19d24 <__alt_mem_Flash_flash_data+0xf4019d24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   19d68:	0001883a 	nop
}
   19d6c:	e037883a 	mov	sp,fp
   19d70:	dfc00117 	ldw	ra,4(sp)
   19d74:	df000017 	ldw	fp,0(sp)
   19d78:	dec00204 	addi	sp,sp,8
   19d7c:	f800283a 	ret

00019d80 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   19d80:	defffc04 	addi	sp,sp,-16
   19d84:	dfc00315 	stw	ra,12(sp)
   19d88:	df000215 	stw	fp,8(sp)
   19d8c:	df000204 	addi	fp,sp,8
   19d90:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   19d94:	e13fff17 	ldw	r4,-4(fp)
   19d98:	014000b4 	movhi	r5,2
   19d9c:	2977c304 	addi	r5,r5,-8436
   19da0:	001a43c0 	call	1a43c <alt_find_dev>
   19da4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19da8:	e0bffe17 	ldw	r2,-8(fp)
}
   19dac:	e037883a 	mov	sp,fp
   19db0:	dfc00117 	ldw	ra,4(sp)
   19db4:	df000017 	ldw	fp,0(sp)
   19db8:	dec00204 	addi	sp,sp,8
   19dbc:	f800283a 	ret

00019dc0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   19dc0:	defffa04 	addi	sp,sp,-24
   19dc4:	df000515 	stw	fp,20(sp)
   19dc8:	df000504 	addi	fp,sp,20
   19dcc:	e13ffc15 	stw	r4,-16(fp)
   19dd0:	2805883a 	mov	r2,r5
   19dd4:	e1bffe15 	stw	r6,-8(fp)
   19dd8:	e1ffff15 	stw	r7,-4(fp)
   19ddc:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   19de0:	e0bffc17 	ldw	r2,-16(fp)
   19de4:	10800c17 	ldw	r2,48(r2)
   19de8:	e0fffe17 	ldw	r3,-8(fp)
   19dec:	1880042e 	bgeu	r3,r2,19e00 <alt_up_char_buffer_draw+0x40>
   19df0:	e0bffc17 	ldw	r2,-16(fp)
   19df4:	10800d17 	ldw	r2,52(r2)
   19df8:	e0ffff17 	ldw	r3,-4(fp)
   19dfc:	18800236 	bltu	r3,r2,19e08 <alt_up_char_buffer_draw+0x48>
		return -1;
   19e00:	00bfffc4 	movi	r2,-1
   19e04:	00001d06 	br	19e7c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   19e08:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   19e0c:	e0bffc17 	ldw	r2,-16(fp)
   19e10:	10c00f17 	ldw	r3,60(r2)
   19e14:	e0bffe17 	ldw	r2,-8(fp)
   19e18:	1884703a 	and	r2,r3,r2
   19e1c:	e0fffc17 	ldw	r3,-16(fp)
   19e20:	18c00e17 	ldw	r3,56(r3)
   19e24:	10c4983a 	sll	r2,r2,r3
   19e28:	e0fffb17 	ldw	r3,-20(fp)
   19e2c:	1884b03a 	or	r2,r3,r2
   19e30:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   19e34:	e0bffc17 	ldw	r2,-16(fp)
   19e38:	10c01117 	ldw	r3,68(r2)
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	1884703a 	and	r2,r3,r2
   19e44:	e0fffc17 	ldw	r3,-16(fp)
   19e48:	18c01017 	ldw	r3,64(r3)
   19e4c:	10c4983a 	sll	r2,r2,r3
   19e50:	e0fffb17 	ldw	r3,-20(fp)
   19e54:	1884b03a 	or	r2,r3,r2
   19e58:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   19e5c:	e0bffc17 	ldw	r2,-16(fp)
   19e60:	10c00b17 	ldw	r3,44(r2)
   19e64:	e0bffb17 	ldw	r2,-20(fp)
   19e68:	1885883a 	add	r2,r3,r2
   19e6c:	1007883a 	mov	r3,r2
   19e70:	e0bffd03 	ldbu	r2,-12(fp)
   19e74:	18800025 	stbio	r2,0(r3)

	return 0;
   19e78:	0005883a 	mov	r2,zero
}
   19e7c:	e037883a 	mov	sp,fp
   19e80:	df000017 	ldw	fp,0(sp)
   19e84:	dec00104 	addi	sp,sp,4
   19e88:	f800283a 	ret

00019e8c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   19e8c:	defffa04 	addi	sp,sp,-24
   19e90:	df000515 	stw	fp,20(sp)
   19e94:	df000504 	addi	fp,sp,20
   19e98:	e13ffc15 	stw	r4,-16(fp)
   19e9c:	e17ffd15 	stw	r5,-12(fp)
   19ea0:	e1bffe15 	stw	r6,-8(fp)
   19ea4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   19ea8:	e0bffc17 	ldw	r2,-16(fp)
   19eac:	10800c17 	ldw	r2,48(r2)
   19eb0:	e0fffe17 	ldw	r3,-8(fp)
   19eb4:	1880042e 	bgeu	r3,r2,19ec8 <alt_up_char_buffer_string+0x3c>
   19eb8:	e0bffc17 	ldw	r2,-16(fp)
   19ebc:	10800d17 	ldw	r2,52(r2)
   19ec0:	e0ffff17 	ldw	r3,-4(fp)
   19ec4:	18800236 	bltu	r3,r2,19ed0 <alt_up_char_buffer_string+0x44>
		return -1;
   19ec8:	00bfffc4 	movi	r2,-1
   19ecc:	00002b06 	br	19f7c <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   19ed0:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   19ed4:	e0bffc17 	ldw	r2,-16(fp)
   19ed8:	10801017 	ldw	r2,64(r2)
   19edc:	1007883a 	mov	r3,r2
   19ee0:	e0bfff17 	ldw	r2,-4(fp)
   19ee4:	10c6983a 	sll	r3,r2,r3
   19ee8:	e0bffe17 	ldw	r2,-8(fp)
   19eec:	1885883a 	add	r2,r3,r2
   19ef0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   19ef4:	00001a06 	br	19f60 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   19ef8:	e0bffc17 	ldw	r2,-16(fp)
   19efc:	10c00b17 	ldw	r3,44(r2)
   19f00:	e0bffb17 	ldw	r2,-20(fp)
   19f04:	1885883a 	add	r2,r3,r2
   19f08:	1007883a 	mov	r3,r2
   19f0c:	e0bffd17 	ldw	r2,-12(fp)
   19f10:	10800003 	ldbu	r2,0(r2)
   19f14:	10803fcc 	andi	r2,r2,255
   19f18:	1080201c 	xori	r2,r2,128
   19f1c:	10bfe004 	addi	r2,r2,-128
   19f20:	18800025 	stbio	r2,0(r3)
		++ptr;
   19f24:	e0bffd17 	ldw	r2,-12(fp)
   19f28:	10800044 	addi	r2,r2,1
   19f2c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   19f30:	e0bffe17 	ldw	r2,-8(fp)
   19f34:	10800044 	addi	r2,r2,1
   19f38:	e0bffe15 	stw	r2,-8(fp)
   19f3c:	e0bffc17 	ldw	r2,-16(fp)
   19f40:	10800c17 	ldw	r2,48(r2)
   19f44:	e0fffe17 	ldw	r3,-8(fp)
   19f48:	18800236 	bltu	r3,r2,19f54 <alt_up_char_buffer_string+0xc8>
			return -1;
   19f4c:	00bfffc4 	movi	r2,-1
   19f50:	00000a06 	br	19f7c <alt_up_char_buffer_string+0xf0>
		++offset;
   19f54:	e0bffb17 	ldw	r2,-20(fp)
   19f58:	10800044 	addi	r2,r2,1
   19f5c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   19f60:	e0bffd17 	ldw	r2,-12(fp)
   19f64:	10800003 	ldbu	r2,0(r2)
   19f68:	10803fcc 	andi	r2,r2,255
   19f6c:	1080201c 	xori	r2,r2,128
   19f70:	10bfe004 	addi	r2,r2,-128
   19f74:	103fe01e 	bne	r2,zero,19ef8 <__alt_mem_Flash_flash_data+0xf4019ef8>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   19f78:	0005883a 	mov	r2,zero
}
   19f7c:	e037883a 	mov	sp,fp
   19f80:	df000017 	ldw	fp,0(sp)
   19f84:	dec00104 	addi	sp,sp,4
   19f88:	f800283a 	ret

00019f8c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   19f8c:	defffe04 	addi	sp,sp,-8
   19f90:	df000115 	stw	fp,4(sp)
   19f94:	df000104 	addi	fp,sp,4
   19f98:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   19f9c:	e0bfff17 	ldw	r2,-4(fp)
   19fa0:	10800a17 	ldw	r2,40(r2)
   19fa4:	10800084 	addi	r2,r2,2
   19fa8:	1007883a 	mov	r3,r2
   19fac:	00800044 	movi	r2,1
   19fb0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   19fb4:	0001883a 	nop
   19fb8:	e0bfff17 	ldw	r2,-4(fp)
   19fbc:	10800a17 	ldw	r2,40(r2)
   19fc0:	10800084 	addi	r2,r2,2
   19fc4:	10800023 	ldbuio	r2,0(r2)
   19fc8:	10803fcc 	andi	r2,r2,255
   19fcc:	1080004c 	andi	r2,r2,1
   19fd0:	103ff91e 	bne	r2,zero,19fb8 <__alt_mem_Flash_flash_data+0xf4019fb8>
	return 0;
   19fd4:	0005883a 	mov	r2,zero
}
   19fd8:	e037883a 	mov	sp,fp
   19fdc:	df000017 	ldw	fp,0(sp)
   19fe0:	dec00104 	addi	sp,sp,4
   19fe4:	f800283a 	ret

00019fe8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   19fe8:	defff504 	addi	sp,sp,-44
   19fec:	df000a15 	stw	fp,40(sp)
   19ff0:	df000a04 	addi	fp,sp,40
   19ff4:	e13ffc15 	stw	r4,-16(fp)
   19ff8:	e17ffd15 	stw	r5,-12(fp)
   19ffc:	e1bffe15 	stw	r6,-8(fp)
   1a000:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a004:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a008:	008000b4 	movhi	r2,2
   1a00c:	10bfaf04 	addi	r2,r2,-324
   1a010:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1a014:	10003f26 	beq	r2,zero,1a114 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1a018:	e0bffc17 	ldw	r2,-16(fp)
   1a01c:	10003b26 	beq	r2,zero,1a10c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1a020:	e0bffc17 	ldw	r2,-16(fp)
   1a024:	e0fffe17 	ldw	r3,-8(fp)
   1a028:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1a02c:	e0bffc17 	ldw	r2,-16(fp)
   1a030:	e0ffff17 	ldw	r3,-4(fp)
   1a034:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a038:	0005303a 	rdctl	r2,status
   1a03c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a040:	e0fff817 	ldw	r3,-32(fp)
   1a044:	00bfff84 	movi	r2,-2
   1a048:	1884703a 	and	r2,r3,r2
   1a04c:	1001703a 	wrctl	status,r2
  
  return context;
   1a050:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1a054:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1a058:	008000b4 	movhi	r2,2
   1a05c:	10bfb004 	addi	r2,r2,-320
   1a060:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1a064:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a068:	e0fffd17 	ldw	r3,-12(fp)
   1a06c:	e0bff617 	ldw	r2,-40(fp)
   1a070:	1885883a 	add	r2,r3,r2
   1a074:	10c00044 	addi	r3,r2,1
   1a078:	e0bffc17 	ldw	r2,-16(fp)
   1a07c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a080:	e0bffc17 	ldw	r2,-16(fp)
   1a084:	10c00217 	ldw	r3,8(r2)
   1a088:	e0bff617 	ldw	r2,-40(fp)
   1a08c:	1880042e 	bgeu	r3,r2,1a0a0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1a090:	e0bffc17 	ldw	r2,-16(fp)
   1a094:	00c00044 	movi	r3,1
   1a098:	10c00405 	stb	r3,16(r2)
   1a09c:	00000206 	br	1a0a8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1a0a0:	e0bffc17 	ldw	r2,-16(fp)
   1a0a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a0a8:	e0fffc17 	ldw	r3,-16(fp)
   1a0ac:	008000b4 	movhi	r2,2
   1a0b0:	10b7c804 	addi	r2,r2,-8416
   1a0b4:	e0bff915 	stw	r2,-28(fp)
   1a0b8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a0bc:	e0bffa17 	ldw	r2,-24(fp)
   1a0c0:	e0fff917 	ldw	r3,-28(fp)
   1a0c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a0c8:	e0bff917 	ldw	r2,-28(fp)
   1a0cc:	10c00017 	ldw	r3,0(r2)
   1a0d0:	e0bffa17 	ldw	r2,-24(fp)
   1a0d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a0d8:	e0bff917 	ldw	r2,-28(fp)
   1a0dc:	10800017 	ldw	r2,0(r2)
   1a0e0:	e0fffa17 	ldw	r3,-24(fp)
   1a0e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a0e8:	e0bff917 	ldw	r2,-28(fp)
   1a0ec:	e0fffa17 	ldw	r3,-24(fp)
   1a0f0:	10c00015 	stw	r3,0(r2)
   1a0f4:	e0bff717 	ldw	r2,-36(fp)
   1a0f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a0fc:	e0bffb17 	ldw	r2,-20(fp)
   1a100:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1a104:	0005883a 	mov	r2,zero
   1a108:	00000306 	br	1a118 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1a10c:	00bffa84 	movi	r2,-22
   1a110:	00000106 	br	1a118 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1a114:	00bfde84 	movi	r2,-134
  }
}
   1a118:	e037883a 	mov	sp,fp
   1a11c:	df000017 	ldw	fp,0(sp)
   1a120:	dec00104 	addi	sp,sp,4
   1a124:	f800283a 	ret

0001a128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a128:	defffe04 	addi	sp,sp,-8
   1a12c:	dfc00115 	stw	ra,4(sp)
   1a130:	df000015 	stw	fp,0(sp)
   1a134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a138:	008000b4 	movhi	r2,2
   1a13c:	10b7c604 	addi	r2,r2,-8424
   1a140:	10800017 	ldw	r2,0(r2)
   1a144:	10000526 	beq	r2,zero,1a15c <alt_get_errno+0x34>
   1a148:	008000b4 	movhi	r2,2
   1a14c:	10b7c604 	addi	r2,r2,-8424
   1a150:	10800017 	ldw	r2,0(r2)
   1a154:	103ee83a 	callr	r2
   1a158:	00000206 	br	1a164 <alt_get_errno+0x3c>
   1a15c:	008000b4 	movhi	r2,2
   1a160:	10bf9104 	addi	r2,r2,-444
}
   1a164:	e037883a 	mov	sp,fp
   1a168:	dfc00117 	ldw	ra,4(sp)
   1a16c:	df000017 	ldw	fp,0(sp)
   1a170:	dec00204 	addi	sp,sp,8
   1a174:	f800283a 	ret

0001a178 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1a178:	defffb04 	addi	sp,sp,-20
   1a17c:	dfc00415 	stw	ra,16(sp)
   1a180:	df000315 	stw	fp,12(sp)
   1a184:	df000304 	addi	fp,sp,12
   1a188:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1a18c:	e0bfff17 	ldw	r2,-4(fp)
   1a190:	10000616 	blt	r2,zero,1a1ac <close+0x34>
   1a194:	e0bfff17 	ldw	r2,-4(fp)
   1a198:	10c00324 	muli	r3,r2,12
   1a19c:	008000b4 	movhi	r2,2
   1a1a0:	10b73c04 	addi	r2,r2,-8976
   1a1a4:	1885883a 	add	r2,r3,r2
   1a1a8:	00000106 	br	1a1b0 <close+0x38>
   1a1ac:	0005883a 	mov	r2,zero
   1a1b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1a1b4:	e0bffd17 	ldw	r2,-12(fp)
   1a1b8:	10001926 	beq	r2,zero,1a220 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1a1bc:	e0bffd17 	ldw	r2,-12(fp)
   1a1c0:	10800017 	ldw	r2,0(r2)
   1a1c4:	10800417 	ldw	r2,16(r2)
   1a1c8:	10000626 	beq	r2,zero,1a1e4 <close+0x6c>
   1a1cc:	e0bffd17 	ldw	r2,-12(fp)
   1a1d0:	10800017 	ldw	r2,0(r2)
   1a1d4:	10800417 	ldw	r2,16(r2)
   1a1d8:	e13ffd17 	ldw	r4,-12(fp)
   1a1dc:	103ee83a 	callr	r2
   1a1e0:	00000106 	br	1a1e8 <close+0x70>
   1a1e4:	0005883a 	mov	r2,zero
   1a1e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1a1ec:	e13fff17 	ldw	r4,-4(fp)
   1a1f0:	001aa580 	call	1aa58 <alt_release_fd>
    if (rval < 0)
   1a1f4:	e0bffe17 	ldw	r2,-8(fp)
   1a1f8:	1000070e 	bge	r2,zero,1a218 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1a1fc:	001a1280 	call	1a128 <alt_get_errno>
   1a200:	1007883a 	mov	r3,r2
   1a204:	e0bffe17 	ldw	r2,-8(fp)
   1a208:	0085c83a 	sub	r2,zero,r2
   1a20c:	18800015 	stw	r2,0(r3)
      return -1;
   1a210:	00bfffc4 	movi	r2,-1
   1a214:	00000706 	br	1a234 <close+0xbc>
    }
    return 0;
   1a218:	0005883a 	mov	r2,zero
   1a21c:	00000506 	br	1a234 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a220:	001a1280 	call	1a128 <alt_get_errno>
   1a224:	1007883a 	mov	r3,r2
   1a228:	00801444 	movi	r2,81
   1a22c:	18800015 	stw	r2,0(r3)
    return -1;
   1a230:	00bfffc4 	movi	r2,-1
  }
}
   1a234:	e037883a 	mov	sp,fp
   1a238:	dfc00117 	ldw	ra,4(sp)
   1a23c:	df000017 	ldw	fp,0(sp)
   1a240:	dec00204 	addi	sp,sp,8
   1a244:	f800283a 	ret

0001a248 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a248:	deffff04 	addi	sp,sp,-4
   1a24c:	df000015 	stw	fp,0(sp)
   1a250:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a254:	e037883a 	mov	sp,fp
   1a258:	df000017 	ldw	fp,0(sp)
   1a25c:	dec00104 	addi	sp,sp,4
   1a260:	f800283a 	ret

0001a264 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1a264:	defffc04 	addi	sp,sp,-16
   1a268:	df000315 	stw	fp,12(sp)
   1a26c:	df000304 	addi	fp,sp,12
   1a270:	e13ffd15 	stw	r4,-12(fp)
   1a274:	e17ffe15 	stw	r5,-8(fp)
   1a278:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1a27c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a280:	e037883a 	mov	sp,fp
   1a284:	df000017 	ldw	fp,0(sp)
   1a288:	dec00104 	addi	sp,sp,4
   1a28c:	f800283a 	ret

0001a290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a290:	defffe04 	addi	sp,sp,-8
   1a294:	dfc00115 	stw	ra,4(sp)
   1a298:	df000015 	stw	fp,0(sp)
   1a29c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a2a0:	008000b4 	movhi	r2,2
   1a2a4:	10b7c604 	addi	r2,r2,-8424
   1a2a8:	10800017 	ldw	r2,0(r2)
   1a2ac:	10000526 	beq	r2,zero,1a2c4 <alt_get_errno+0x34>
   1a2b0:	008000b4 	movhi	r2,2
   1a2b4:	10b7c604 	addi	r2,r2,-8424
   1a2b8:	10800017 	ldw	r2,0(r2)
   1a2bc:	103ee83a 	callr	r2
   1a2c0:	00000206 	br	1a2cc <alt_get_errno+0x3c>
   1a2c4:	008000b4 	movhi	r2,2
   1a2c8:	10bf9104 	addi	r2,r2,-444
}
   1a2cc:	e037883a 	mov	sp,fp
   1a2d0:	dfc00117 	ldw	ra,4(sp)
   1a2d4:	df000017 	ldw	fp,0(sp)
   1a2d8:	dec00204 	addi	sp,sp,8
   1a2dc:	f800283a 	ret

0001a2e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1a2e0:	defffa04 	addi	sp,sp,-24
   1a2e4:	dfc00515 	stw	ra,20(sp)
   1a2e8:	df000415 	stw	fp,16(sp)
   1a2ec:	df000404 	addi	fp,sp,16
   1a2f0:	e13ffe15 	stw	r4,-8(fp)
   1a2f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1a2f8:	e0bffe17 	ldw	r2,-8(fp)
   1a2fc:	10000326 	beq	r2,zero,1a30c <alt_dev_llist_insert+0x2c>
   1a300:	e0bffe17 	ldw	r2,-8(fp)
   1a304:	10800217 	ldw	r2,8(r2)
   1a308:	1000061e 	bne	r2,zero,1a324 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1a30c:	001a2900 	call	1a290 <alt_get_errno>
   1a310:	1007883a 	mov	r3,r2
   1a314:	00800584 	movi	r2,22
   1a318:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1a31c:	00bffa84 	movi	r2,-22
   1a320:	00001306 	br	1a370 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1a324:	e0bffe17 	ldw	r2,-8(fp)
   1a328:	e0ffff17 	ldw	r3,-4(fp)
   1a32c:	e0fffc15 	stw	r3,-16(fp)
   1a330:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a334:	e0bffd17 	ldw	r2,-12(fp)
   1a338:	e0fffc17 	ldw	r3,-16(fp)
   1a33c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a340:	e0bffc17 	ldw	r2,-16(fp)
   1a344:	10c00017 	ldw	r3,0(r2)
   1a348:	e0bffd17 	ldw	r2,-12(fp)
   1a34c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a350:	e0bffc17 	ldw	r2,-16(fp)
   1a354:	10800017 	ldw	r2,0(r2)
   1a358:	e0fffd17 	ldw	r3,-12(fp)
   1a35c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a360:	e0bffc17 	ldw	r2,-16(fp)
   1a364:	e0fffd17 	ldw	r3,-12(fp)
   1a368:	10c00015 	stw	r3,0(r2)

  return 0;  
   1a36c:	0005883a 	mov	r2,zero
}
   1a370:	e037883a 	mov	sp,fp
   1a374:	dfc00117 	ldw	ra,4(sp)
   1a378:	df000017 	ldw	fp,0(sp)
   1a37c:	dec00204 	addi	sp,sp,8
   1a380:	f800283a 	ret

0001a384 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1a384:	defffd04 	addi	sp,sp,-12
   1a388:	dfc00215 	stw	ra,8(sp)
   1a38c:	df000115 	stw	fp,4(sp)
   1a390:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a394:	008000b4 	movhi	r2,2
   1a398:	10ada204 	addi	r2,r2,-18808
   1a39c:	e0bfff15 	stw	r2,-4(fp)
   1a3a0:	00000606 	br	1a3bc <_do_ctors+0x38>
        (*ctor) (); 
   1a3a4:	e0bfff17 	ldw	r2,-4(fp)
   1a3a8:	10800017 	ldw	r2,0(r2)
   1a3ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a3b0:	e0bfff17 	ldw	r2,-4(fp)
   1a3b4:	10bfff04 	addi	r2,r2,-4
   1a3b8:	e0bfff15 	stw	r2,-4(fp)
   1a3bc:	e0ffff17 	ldw	r3,-4(fp)
   1a3c0:	008000b4 	movhi	r2,2
   1a3c4:	10ada304 	addi	r2,r2,-18804
   1a3c8:	18bff62e 	bgeu	r3,r2,1a3a4 <__alt_mem_Flash_flash_data+0xf401a3a4>
        (*ctor) (); 
}
   1a3cc:	e037883a 	mov	sp,fp
   1a3d0:	dfc00117 	ldw	ra,4(sp)
   1a3d4:	df000017 	ldw	fp,0(sp)
   1a3d8:	dec00204 	addi	sp,sp,8
   1a3dc:	f800283a 	ret

0001a3e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1a3e0:	defffd04 	addi	sp,sp,-12
   1a3e4:	dfc00215 	stw	ra,8(sp)
   1a3e8:	df000115 	stw	fp,4(sp)
   1a3ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a3f0:	008000b4 	movhi	r2,2
   1a3f4:	10ada204 	addi	r2,r2,-18808
   1a3f8:	e0bfff15 	stw	r2,-4(fp)
   1a3fc:	00000606 	br	1a418 <_do_dtors+0x38>
        (*dtor) (); 
   1a400:	e0bfff17 	ldw	r2,-4(fp)
   1a404:	10800017 	ldw	r2,0(r2)
   1a408:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a40c:	e0bfff17 	ldw	r2,-4(fp)
   1a410:	10bfff04 	addi	r2,r2,-4
   1a414:	e0bfff15 	stw	r2,-4(fp)
   1a418:	e0ffff17 	ldw	r3,-4(fp)
   1a41c:	008000b4 	movhi	r2,2
   1a420:	10ada304 	addi	r2,r2,-18804
   1a424:	18bff62e 	bgeu	r3,r2,1a400 <__alt_mem_Flash_flash_data+0xf401a400>
        (*dtor) (); 
}
   1a428:	e037883a 	mov	sp,fp
   1a42c:	dfc00117 	ldw	ra,4(sp)
   1a430:	df000017 	ldw	fp,0(sp)
   1a434:	dec00204 	addi	sp,sp,8
   1a438:	f800283a 	ret

0001a43c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a43c:	defffa04 	addi	sp,sp,-24
   1a440:	dfc00515 	stw	ra,20(sp)
   1a444:	df000415 	stw	fp,16(sp)
   1a448:	df000404 	addi	fp,sp,16
   1a44c:	e13ffe15 	stw	r4,-8(fp)
   1a450:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a454:	e0bfff17 	ldw	r2,-4(fp)
   1a458:	10800017 	ldw	r2,0(r2)
   1a45c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a460:	e13ffe17 	ldw	r4,-8(fp)
   1a464:	000caac0 	call	caac <strlen>
   1a468:	10800044 	addi	r2,r2,1
   1a46c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a470:	00000d06 	br	1a4a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a474:	e0bffc17 	ldw	r2,-16(fp)
   1a478:	10c00217 	ldw	r3,8(r2)
   1a47c:	e0bffd17 	ldw	r2,-12(fp)
   1a480:	1809883a 	mov	r4,r3
   1a484:	e17ffe17 	ldw	r5,-8(fp)
   1a488:	100d883a 	mov	r6,r2
   1a48c:	001b32c0 	call	1b32c <memcmp>
   1a490:	1000021e 	bne	r2,zero,1a49c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a494:	e0bffc17 	ldw	r2,-16(fp)
   1a498:	00000706 	br	1a4b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a49c:	e0bffc17 	ldw	r2,-16(fp)
   1a4a0:	10800017 	ldw	r2,0(r2)
   1a4a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a4a8:	e0fffc17 	ldw	r3,-16(fp)
   1a4ac:	e0bfff17 	ldw	r2,-4(fp)
   1a4b0:	18bff01e 	bne	r3,r2,1a474 <__alt_mem_Flash_flash_data+0xf401a474>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a4b4:	0005883a 	mov	r2,zero
}
   1a4b8:	e037883a 	mov	sp,fp
   1a4bc:	dfc00117 	ldw	ra,4(sp)
   1a4c0:	df000017 	ldw	fp,0(sp)
   1a4c4:	dec00204 	addi	sp,sp,8
   1a4c8:	f800283a 	ret

0001a4cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a4cc:	defffe04 	addi	sp,sp,-8
   1a4d0:	dfc00115 	stw	ra,4(sp)
   1a4d4:	df000015 	stw	fp,0(sp)
   1a4d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1a4dc:	0009883a 	mov	r4,zero
   1a4e0:	01440004 	movi	r5,4096
   1a4e4:	001b1b80 	call	1b1b8 <alt_icache_flush>
#endif
}
   1a4e8:	e037883a 	mov	sp,fp
   1a4ec:	dfc00117 	ldw	ra,4(sp)
   1a4f0:	df000017 	ldw	fp,0(sp)
   1a4f4:	dec00204 	addi	sp,sp,8
   1a4f8:	f800283a 	ret

0001a4fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a4fc:	defff904 	addi	sp,sp,-28
   1a500:	dfc00615 	stw	ra,24(sp)
   1a504:	df000515 	stw	fp,20(sp)
   1a508:	df000504 	addi	fp,sp,20
   1a50c:	e13ffc15 	stw	r4,-16(fp)
   1a510:	e17ffd15 	stw	r5,-12(fp)
   1a514:	e1bffe15 	stw	r6,-8(fp)
   1a518:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1a51c:	e13ffd17 	ldw	r4,-12(fp)
   1a520:	e17ffe17 	ldw	r5,-8(fp)
   1a524:	e1bfff17 	ldw	r6,-4(fp)
   1a528:	001a9000 	call	1a900 <open>
   1a52c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1a530:	e0bffb17 	ldw	r2,-20(fp)
   1a534:	10001c16 	blt	r2,zero,1a5a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a538:	008000b4 	movhi	r2,2
   1a53c:	10b73c04 	addi	r2,r2,-8976
   1a540:	e0fffb17 	ldw	r3,-20(fp)
   1a544:	18c00324 	muli	r3,r3,12
   1a548:	10c5883a 	add	r2,r2,r3
   1a54c:	10c00017 	ldw	r3,0(r2)
   1a550:	e0bffc17 	ldw	r2,-16(fp)
   1a554:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a558:	008000b4 	movhi	r2,2
   1a55c:	10b73c04 	addi	r2,r2,-8976
   1a560:	e0fffb17 	ldw	r3,-20(fp)
   1a564:	18c00324 	muli	r3,r3,12
   1a568:	18c00104 	addi	r3,r3,4
   1a56c:	10c5883a 	add	r2,r2,r3
   1a570:	10c00017 	ldw	r3,0(r2)
   1a574:	e0bffc17 	ldw	r2,-16(fp)
   1a578:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1a57c:	008000b4 	movhi	r2,2
   1a580:	10b73c04 	addi	r2,r2,-8976
   1a584:	e0fffb17 	ldw	r3,-20(fp)
   1a588:	18c00324 	muli	r3,r3,12
   1a58c:	18c00204 	addi	r3,r3,8
   1a590:	10c5883a 	add	r2,r2,r3
   1a594:	10c00017 	ldw	r3,0(r2)
   1a598:	e0bffc17 	ldw	r2,-16(fp)
   1a59c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1a5a0:	e13ffb17 	ldw	r4,-20(fp)
   1a5a4:	001aa580 	call	1aa58 <alt_release_fd>
  }
} 
   1a5a8:	e037883a 	mov	sp,fp
   1a5ac:	dfc00117 	ldw	ra,4(sp)
   1a5b0:	df000017 	ldw	fp,0(sp)
   1a5b4:	dec00204 	addi	sp,sp,8
   1a5b8:	f800283a 	ret

0001a5bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1a5bc:	defffb04 	addi	sp,sp,-20
   1a5c0:	dfc00415 	stw	ra,16(sp)
   1a5c4:	df000315 	stw	fp,12(sp)
   1a5c8:	df000304 	addi	fp,sp,12
   1a5cc:	e13ffd15 	stw	r4,-12(fp)
   1a5d0:	e17ffe15 	stw	r5,-8(fp)
   1a5d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1a5d8:	010000b4 	movhi	r4,2
   1a5dc:	21373f04 	addi	r4,r4,-8964
   1a5e0:	e17ffd17 	ldw	r5,-12(fp)
   1a5e4:	01800044 	movi	r6,1
   1a5e8:	01c07fc4 	movi	r7,511
   1a5ec:	001a4fc0 	call	1a4fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1a5f0:	010000b4 	movhi	r4,2
   1a5f4:	21373c04 	addi	r4,r4,-8976
   1a5f8:	e17ffe17 	ldw	r5,-8(fp)
   1a5fc:	000d883a 	mov	r6,zero
   1a600:	01c07fc4 	movi	r7,511
   1a604:	001a4fc0 	call	1a4fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1a608:	010000b4 	movhi	r4,2
   1a60c:	21374204 	addi	r4,r4,-8952
   1a610:	e17fff17 	ldw	r5,-4(fp)
   1a614:	01800044 	movi	r6,1
   1a618:	01c07fc4 	movi	r7,511
   1a61c:	001a4fc0 	call	1a4fc <alt_open_fd>
}  
   1a620:	e037883a 	mov	sp,fp
   1a624:	dfc00117 	ldw	ra,4(sp)
   1a628:	df000017 	ldw	fp,0(sp)
   1a62c:	dec00204 	addi	sp,sp,8
   1a630:	f800283a 	ret

0001a634 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1a634:	defff004 	addi	sp,sp,-64
   1a638:	df000f15 	stw	fp,60(sp)
   1a63c:	df000f04 	addi	fp,sp,60
   1a640:	e13ffd15 	stw	r4,-12(fp)
   1a644:	e17ffe15 	stw	r5,-8(fp)
   1a648:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1a64c:	00bffa84 	movi	r2,-22
   1a650:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1a654:	e0bffd17 	ldw	r2,-12(fp)
   1a658:	10800828 	cmpgeui	r2,r2,32
   1a65c:	10005c1e 	bne	r2,zero,1a7d0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a660:	0005303a 	rdctl	r2,status
   1a664:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a668:	e0fff317 	ldw	r3,-52(fp)
   1a66c:	00bfff84 	movi	r2,-2
   1a670:	1884703a 	and	r2,r3,r2
   1a674:	1001703a 	wrctl	status,r2
  
  return context;
   1a678:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1a67c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1a680:	008000b4 	movhi	r2,2
   1a684:	108c4504 	addi	r2,r2,12564
   1a688:	e0fffd17 	ldw	r3,-12(fp)
   1a68c:	180690fa 	slli	r3,r3,3
   1a690:	10c5883a 	add	r2,r2,r3
   1a694:	e0ffff17 	ldw	r3,-4(fp)
   1a698:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1a69c:	008000b4 	movhi	r2,2
   1a6a0:	108c4504 	addi	r2,r2,12564
   1a6a4:	e0fffd17 	ldw	r3,-12(fp)
   1a6a8:	180690fa 	slli	r3,r3,3
   1a6ac:	18c00104 	addi	r3,r3,4
   1a6b0:	10c5883a 	add	r2,r2,r3
   1a6b4:	e0fffe17 	ldw	r3,-8(fp)
   1a6b8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1a6bc:	e0bfff17 	ldw	r2,-4(fp)
   1a6c0:	10001f26 	beq	r2,zero,1a740 <alt_irq_register+0x10c>
   1a6c4:	e0bffd17 	ldw	r2,-12(fp)
   1a6c8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a6cc:	0005303a 	rdctl	r2,status
   1a6d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a6d4:	e0fff517 	ldw	r3,-44(fp)
   1a6d8:	00bfff84 	movi	r2,-2
   1a6dc:	1884703a 	and	r2,r3,r2
   1a6e0:	1001703a 	wrctl	status,r2
  
  return context;
   1a6e4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a6e8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1a6ec:	e0bff417 	ldw	r2,-48(fp)
   1a6f0:	00c00044 	movi	r3,1
   1a6f4:	1884983a 	sll	r2,r3,r2
   1a6f8:	1007883a 	mov	r3,r2
   1a6fc:	008000b4 	movhi	r2,2
   1a700:	10bfae04 	addi	r2,r2,-328
   1a704:	10800017 	ldw	r2,0(r2)
   1a708:	1886b03a 	or	r3,r3,r2
   1a70c:	008000b4 	movhi	r2,2
   1a710:	10bfae04 	addi	r2,r2,-328
   1a714:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a718:	008000b4 	movhi	r2,2
   1a71c:	10bfae04 	addi	r2,r2,-328
   1a720:	10800017 	ldw	r2,0(r2)
   1a724:	100170fa 	wrctl	ienable,r2
   1a728:	e0bff617 	ldw	r2,-40(fp)
   1a72c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a730:	e0bff717 	ldw	r2,-36(fp)
   1a734:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a738:	0005883a 	mov	r2,zero
   1a73c:	00001f06 	br	1a7bc <alt_irq_register+0x188>
   1a740:	e0bffd17 	ldw	r2,-12(fp)
   1a744:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a748:	0005303a 	rdctl	r2,status
   1a74c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a750:	e0fff917 	ldw	r3,-28(fp)
   1a754:	00bfff84 	movi	r2,-2
   1a758:	1884703a 	and	r2,r3,r2
   1a75c:	1001703a 	wrctl	status,r2
  
  return context;
   1a760:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a764:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1a768:	e0bff817 	ldw	r2,-32(fp)
   1a76c:	00c00044 	movi	r3,1
   1a770:	1884983a 	sll	r2,r3,r2
   1a774:	0084303a 	nor	r2,zero,r2
   1a778:	1007883a 	mov	r3,r2
   1a77c:	008000b4 	movhi	r2,2
   1a780:	10bfae04 	addi	r2,r2,-328
   1a784:	10800017 	ldw	r2,0(r2)
   1a788:	1886703a 	and	r3,r3,r2
   1a78c:	008000b4 	movhi	r2,2
   1a790:	10bfae04 	addi	r2,r2,-328
   1a794:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a798:	008000b4 	movhi	r2,2
   1a79c:	10bfae04 	addi	r2,r2,-328
   1a7a0:	10800017 	ldw	r2,0(r2)
   1a7a4:	100170fa 	wrctl	ienable,r2
   1a7a8:	e0bffa17 	ldw	r2,-24(fp)
   1a7ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a7b0:	e0bffb17 	ldw	r2,-20(fp)
   1a7b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a7b8:	0005883a 	mov	r2,zero
   1a7bc:	e0bff115 	stw	r2,-60(fp)
   1a7c0:	e0bff217 	ldw	r2,-56(fp)
   1a7c4:	e0bffc15 	stw	r2,-16(fp)
   1a7c8:	e0bffc17 	ldw	r2,-16(fp)
   1a7cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1a7d0:	e0bff117 	ldw	r2,-60(fp)
}
   1a7d4:	e037883a 	mov	sp,fp
   1a7d8:	df000017 	ldw	fp,0(sp)
   1a7dc:	dec00104 	addi	sp,sp,4
   1a7e0:	f800283a 	ret

0001a7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a7e4:	defffe04 	addi	sp,sp,-8
   1a7e8:	dfc00115 	stw	ra,4(sp)
   1a7ec:	df000015 	stw	fp,0(sp)
   1a7f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a7f4:	008000b4 	movhi	r2,2
   1a7f8:	10b7c604 	addi	r2,r2,-8424
   1a7fc:	10800017 	ldw	r2,0(r2)
   1a800:	10000526 	beq	r2,zero,1a818 <alt_get_errno+0x34>
   1a804:	008000b4 	movhi	r2,2
   1a808:	10b7c604 	addi	r2,r2,-8424
   1a80c:	10800017 	ldw	r2,0(r2)
   1a810:	103ee83a 	callr	r2
   1a814:	00000206 	br	1a820 <alt_get_errno+0x3c>
   1a818:	008000b4 	movhi	r2,2
   1a81c:	10bf9104 	addi	r2,r2,-444
}
   1a820:	e037883a 	mov	sp,fp
   1a824:	dfc00117 	ldw	ra,4(sp)
   1a828:	df000017 	ldw	fp,0(sp)
   1a82c:	dec00204 	addi	sp,sp,8
   1a830:	f800283a 	ret

0001a834 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a834:	defffd04 	addi	sp,sp,-12
   1a838:	df000215 	stw	fp,8(sp)
   1a83c:	df000204 	addi	fp,sp,8
   1a840:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a844:	e0bfff17 	ldw	r2,-4(fp)
   1a848:	10800217 	ldw	r2,8(r2)
   1a84c:	10d00034 	orhi	r3,r2,16384
   1a850:	e0bfff17 	ldw	r2,-4(fp)
   1a854:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a858:	e03ffe15 	stw	zero,-8(fp)
   1a85c:	00001d06 	br	1a8d4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a860:	008000b4 	movhi	r2,2
   1a864:	10b73c04 	addi	r2,r2,-8976
   1a868:	e0fffe17 	ldw	r3,-8(fp)
   1a86c:	18c00324 	muli	r3,r3,12
   1a870:	10c5883a 	add	r2,r2,r3
   1a874:	10c00017 	ldw	r3,0(r2)
   1a878:	e0bfff17 	ldw	r2,-4(fp)
   1a87c:	10800017 	ldw	r2,0(r2)
   1a880:	1880111e 	bne	r3,r2,1a8c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a884:	008000b4 	movhi	r2,2
   1a888:	10b73c04 	addi	r2,r2,-8976
   1a88c:	e0fffe17 	ldw	r3,-8(fp)
   1a890:	18c00324 	muli	r3,r3,12
   1a894:	18c00204 	addi	r3,r3,8
   1a898:	10c5883a 	add	r2,r2,r3
   1a89c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a8a0:	1000090e 	bge	r2,zero,1a8c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1a8a4:	e0bffe17 	ldw	r2,-8(fp)
   1a8a8:	10c00324 	muli	r3,r2,12
   1a8ac:	008000b4 	movhi	r2,2
   1a8b0:	10b73c04 	addi	r2,r2,-8976
   1a8b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a8b8:	e0bfff17 	ldw	r2,-4(fp)
   1a8bc:	18800226 	beq	r3,r2,1a8c8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a8c0:	00bffcc4 	movi	r2,-13
   1a8c4:	00000a06 	br	1a8f0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a8c8:	e0bffe17 	ldw	r2,-8(fp)
   1a8cc:	10800044 	addi	r2,r2,1
   1a8d0:	e0bffe15 	stw	r2,-8(fp)
   1a8d4:	008000b4 	movhi	r2,2
   1a8d8:	10b7c504 	addi	r2,r2,-8428
   1a8dc:	10800017 	ldw	r2,0(r2)
   1a8e0:	1007883a 	mov	r3,r2
   1a8e4:	e0bffe17 	ldw	r2,-8(fp)
   1a8e8:	18bfdd2e 	bgeu	r3,r2,1a860 <__alt_mem_Flash_flash_data+0xf401a860>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a8ec:	0005883a 	mov	r2,zero
}
   1a8f0:	e037883a 	mov	sp,fp
   1a8f4:	df000017 	ldw	fp,0(sp)
   1a8f8:	dec00104 	addi	sp,sp,4
   1a8fc:	f800283a 	ret

0001a900 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a900:	defff604 	addi	sp,sp,-40
   1a904:	dfc00915 	stw	ra,36(sp)
   1a908:	df000815 	stw	fp,32(sp)
   1a90c:	df000804 	addi	fp,sp,32
   1a910:	e13ffd15 	stw	r4,-12(fp)
   1a914:	e17ffe15 	stw	r5,-8(fp)
   1a918:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a91c:	00bfffc4 	movi	r2,-1
   1a920:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1a924:	00bffb44 	movi	r2,-19
   1a928:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1a92c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a930:	e13ffd17 	ldw	r4,-12(fp)
   1a934:	014000b4 	movhi	r5,2
   1a938:	2977c304 	addi	r5,r5,-8436
   1a93c:	001a43c0 	call	1a43c <alt_find_dev>
   1a940:	e0bff815 	stw	r2,-32(fp)
   1a944:	e0bff817 	ldw	r2,-32(fp)
   1a948:	1000051e 	bne	r2,zero,1a960 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a94c:	e13ffd17 	ldw	r4,-12(fp)
   1a950:	001afa80 	call	1afa8 <alt_find_file>
   1a954:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1a958:	00800044 	movi	r2,1
   1a95c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a960:	e0bff817 	ldw	r2,-32(fp)
   1a964:	10002926 	beq	r2,zero,1aa0c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a968:	e13ff817 	ldw	r4,-32(fp)
   1a96c:	001b0bc0 	call	1b0bc <alt_get_fd>
   1a970:	e0bff915 	stw	r2,-28(fp)
   1a974:	e0bff917 	ldw	r2,-28(fp)
   1a978:	1000030e 	bge	r2,zero,1a988 <open+0x88>
    {
      status = index;
   1a97c:	e0bff917 	ldw	r2,-28(fp)
   1a980:	e0bffa15 	stw	r2,-24(fp)
   1a984:	00002306 	br	1aa14 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1a988:	e0bff917 	ldw	r2,-28(fp)
   1a98c:	10c00324 	muli	r3,r2,12
   1a990:	008000b4 	movhi	r2,2
   1a994:	10b73c04 	addi	r2,r2,-8976
   1a998:	1885883a 	add	r2,r3,r2
   1a99c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1a9a0:	e0fffe17 	ldw	r3,-8(fp)
   1a9a4:	00900034 	movhi	r2,16384
   1a9a8:	10bfffc4 	addi	r2,r2,-1
   1a9ac:	1886703a 	and	r3,r3,r2
   1a9b0:	e0bffc17 	ldw	r2,-16(fp)
   1a9b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1a9b8:	e0bffb17 	ldw	r2,-20(fp)
   1a9bc:	1000051e 	bne	r2,zero,1a9d4 <open+0xd4>
   1a9c0:	e13ffc17 	ldw	r4,-16(fp)
   1a9c4:	001a8340 	call	1a834 <alt_file_locked>
   1a9c8:	e0bffa15 	stw	r2,-24(fp)
   1a9cc:	e0bffa17 	ldw	r2,-24(fp)
   1a9d0:	10001016 	blt	r2,zero,1aa14 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1a9d4:	e0bff817 	ldw	r2,-32(fp)
   1a9d8:	10800317 	ldw	r2,12(r2)
   1a9dc:	10000826 	beq	r2,zero,1aa00 <open+0x100>
   1a9e0:	e0bff817 	ldw	r2,-32(fp)
   1a9e4:	10800317 	ldw	r2,12(r2)
   1a9e8:	e13ffc17 	ldw	r4,-16(fp)
   1a9ec:	e17ffd17 	ldw	r5,-12(fp)
   1a9f0:	e1bffe17 	ldw	r6,-8(fp)
   1a9f4:	e1ffff17 	ldw	r7,-4(fp)
   1a9f8:	103ee83a 	callr	r2
   1a9fc:	00000106 	br	1aa04 <open+0x104>
   1aa00:	0005883a 	mov	r2,zero
   1aa04:	e0bffa15 	stw	r2,-24(fp)
   1aa08:	00000206 	br	1aa14 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1aa0c:	00bffb44 	movi	r2,-19
   1aa10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1aa14:	e0bffa17 	ldw	r2,-24(fp)
   1aa18:	1000090e 	bge	r2,zero,1aa40 <open+0x140>
  {
    alt_release_fd (index);  
   1aa1c:	e13ff917 	ldw	r4,-28(fp)
   1aa20:	001aa580 	call	1aa58 <alt_release_fd>
    ALT_ERRNO = -status;
   1aa24:	001a7e40 	call	1a7e4 <alt_get_errno>
   1aa28:	1007883a 	mov	r3,r2
   1aa2c:	e0bffa17 	ldw	r2,-24(fp)
   1aa30:	0085c83a 	sub	r2,zero,r2
   1aa34:	18800015 	stw	r2,0(r3)
    return -1;
   1aa38:	00bfffc4 	movi	r2,-1
   1aa3c:	00000106 	br	1aa44 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1aa40:	e0bff917 	ldw	r2,-28(fp)
}
   1aa44:	e037883a 	mov	sp,fp
   1aa48:	dfc00117 	ldw	ra,4(sp)
   1aa4c:	df000017 	ldw	fp,0(sp)
   1aa50:	dec00204 	addi	sp,sp,8
   1aa54:	f800283a 	ret

0001aa58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1aa58:	defffe04 	addi	sp,sp,-8
   1aa5c:	df000115 	stw	fp,4(sp)
   1aa60:	df000104 	addi	fp,sp,4
   1aa64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1aa68:	e0bfff17 	ldw	r2,-4(fp)
   1aa6c:	108000d0 	cmplti	r2,r2,3
   1aa70:	10000d1e 	bne	r2,zero,1aaa8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1aa74:	008000b4 	movhi	r2,2
   1aa78:	10b73c04 	addi	r2,r2,-8976
   1aa7c:	e0ffff17 	ldw	r3,-4(fp)
   1aa80:	18c00324 	muli	r3,r3,12
   1aa84:	18c00204 	addi	r3,r3,8
   1aa88:	10c5883a 	add	r2,r2,r3
   1aa8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1aa90:	008000b4 	movhi	r2,2
   1aa94:	10b73c04 	addi	r2,r2,-8976
   1aa98:	e0ffff17 	ldw	r3,-4(fp)
   1aa9c:	18c00324 	muli	r3,r3,12
   1aaa0:	10c5883a 	add	r2,r2,r3
   1aaa4:	10000015 	stw	zero,0(r2)
  }
}
   1aaa8:	e037883a 	mov	sp,fp
   1aaac:	df000017 	ldw	fp,0(sp)
   1aab0:	dec00104 	addi	sp,sp,4
   1aab4:	f800283a 	ret

0001aab8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1aab8:	defffa04 	addi	sp,sp,-24
   1aabc:	df000515 	stw	fp,20(sp)
   1aac0:	df000504 	addi	fp,sp,20
   1aac4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aac8:	0005303a 	rdctl	r2,status
   1aacc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aad0:	e0fffc17 	ldw	r3,-16(fp)
   1aad4:	00bfff84 	movi	r2,-2
   1aad8:	1884703a 	and	r2,r3,r2
   1aadc:	1001703a 	wrctl	status,r2
  
  return context;
   1aae0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1aae4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1aae8:	e0bfff17 	ldw	r2,-4(fp)
   1aaec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1aaf0:	e0bffd17 	ldw	r2,-12(fp)
   1aaf4:	10800017 	ldw	r2,0(r2)
   1aaf8:	e0fffd17 	ldw	r3,-12(fp)
   1aafc:	18c00117 	ldw	r3,4(r3)
   1ab00:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ab04:	e0bffd17 	ldw	r2,-12(fp)
   1ab08:	10800117 	ldw	r2,4(r2)
   1ab0c:	e0fffd17 	ldw	r3,-12(fp)
   1ab10:	18c00017 	ldw	r3,0(r3)
   1ab14:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ab18:	e0bffd17 	ldw	r2,-12(fp)
   1ab1c:	e0fffd17 	ldw	r3,-12(fp)
   1ab20:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1ab24:	e0bffd17 	ldw	r2,-12(fp)
   1ab28:	e0fffd17 	ldw	r3,-12(fp)
   1ab2c:	10c00015 	stw	r3,0(r2)
   1ab30:	e0bffb17 	ldw	r2,-20(fp)
   1ab34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab38:	e0bffe17 	ldw	r2,-8(fp)
   1ab3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1ab40:	e037883a 	mov	sp,fp
   1ab44:	df000017 	ldw	fp,0(sp)
   1ab48:	dec00104 	addi	sp,sp,4
   1ab4c:	f800283a 	ret

0001ab50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ab50:	defffb04 	addi	sp,sp,-20
   1ab54:	dfc00415 	stw	ra,16(sp)
   1ab58:	df000315 	stw	fp,12(sp)
   1ab5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ab60:	d0a02c17 	ldw	r2,-32592(gp)
   1ab64:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ab68:	d0a81417 	ldw	r2,-24496(gp)
   1ab6c:	10800044 	addi	r2,r2,1
   1ab70:	d0a81415 	stw	r2,-24496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ab74:	00002e06 	br	1ac30 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ab78:	e0bffd17 	ldw	r2,-12(fp)
   1ab7c:	10800017 	ldw	r2,0(r2)
   1ab80:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ab84:	e0bffd17 	ldw	r2,-12(fp)
   1ab88:	10800403 	ldbu	r2,16(r2)
   1ab8c:	10803fcc 	andi	r2,r2,255
   1ab90:	10000426 	beq	r2,zero,1aba4 <alt_tick+0x54>
   1ab94:	d0a81417 	ldw	r2,-24496(gp)
   1ab98:	1000021e 	bne	r2,zero,1aba4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ab9c:	e0bffd17 	ldw	r2,-12(fp)
   1aba0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1aba4:	e0bffd17 	ldw	r2,-12(fp)
   1aba8:	10800217 	ldw	r2,8(r2)
   1abac:	d0e81417 	ldw	r3,-24496(gp)
   1abb0:	18801d36 	bltu	r3,r2,1ac28 <alt_tick+0xd8>
   1abb4:	e0bffd17 	ldw	r2,-12(fp)
   1abb8:	10800403 	ldbu	r2,16(r2)
   1abbc:	10803fcc 	andi	r2,r2,255
   1abc0:	1000191e 	bne	r2,zero,1ac28 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1abc4:	e0bffd17 	ldw	r2,-12(fp)
   1abc8:	10800317 	ldw	r2,12(r2)
   1abcc:	e0fffd17 	ldw	r3,-12(fp)
   1abd0:	18c00517 	ldw	r3,20(r3)
   1abd4:	1809883a 	mov	r4,r3
   1abd8:	103ee83a 	callr	r2
   1abdc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1abe0:	e0bfff17 	ldw	r2,-4(fp)
   1abe4:	1000031e 	bne	r2,zero,1abf4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1abe8:	e13ffd17 	ldw	r4,-12(fp)
   1abec:	001aab80 	call	1aab8 <alt_alarm_stop>
   1abf0:	00000d06 	br	1ac28 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1abf4:	e0bffd17 	ldw	r2,-12(fp)
   1abf8:	10c00217 	ldw	r3,8(r2)
   1abfc:	e0bfff17 	ldw	r2,-4(fp)
   1ac00:	1887883a 	add	r3,r3,r2
   1ac04:	e0bffd17 	ldw	r2,-12(fp)
   1ac08:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ac0c:	e0bffd17 	ldw	r2,-12(fp)
   1ac10:	10c00217 	ldw	r3,8(r2)
   1ac14:	d0a81417 	ldw	r2,-24496(gp)
   1ac18:	1880032e 	bgeu	r3,r2,1ac28 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1ac1c:	e0bffd17 	ldw	r2,-12(fp)
   1ac20:	00c00044 	movi	r3,1
   1ac24:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1ac28:	e0bffe17 	ldw	r2,-8(fp)
   1ac2c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ac30:	e0fffd17 	ldw	r3,-12(fp)
   1ac34:	d0a02c04 	addi	r2,gp,-32592
   1ac38:	18bfcf1e 	bne	r3,r2,1ab78 <__alt_mem_Flash_flash_data+0xf401ab78>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ac3c:	00108180 	call	10818 <OSTimeTick>
}
   1ac40:	e037883a 	mov	sp,fp
   1ac44:	dfc00117 	ldw	ra,4(sp)
   1ac48:	df000017 	ldw	fp,0(sp)
   1ac4c:	dec00204 	addi	sp,sp,8
   1ac50:	f800283a 	ret

0001ac54 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ac54:	deffff04 	addi	sp,sp,-4
   1ac58:	df000015 	stw	fp,0(sp)
   1ac5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1ac60:	000170fa 	wrctl	ienable,zero
}
   1ac64:	e037883a 	mov	sp,fp
   1ac68:	df000017 	ldw	fp,0(sp)
   1ac6c:	dec00104 	addi	sp,sp,4
   1ac70:	f800283a 	ret

0001ac74 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1ac74:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1ac78:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1ac7c:	d1280c17 	ldw	r4,-24528(gp)

      stw ra,  0(sp)
   1ac80:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1ac84:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1ac88:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1ac8c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1ac90:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1ac94:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1ac98:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1ac9c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1aca0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1aca4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1aca8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1acac:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1acb0:	001aee00 	call	1aee0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1acb4:	d1280717 	ldw	r4,-24548(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1acb8:	d167ff07 	ldb	r5,-24580(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1acbc:	d1280c15 	stw	r4,-24528(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1acc0:	d167ff45 	stb	r5,-24579(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1acc4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1acc8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1accc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1acd0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1acd4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1acd8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1acdc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1ace0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ace4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ace8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1acec:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1acf0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1acf4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1acf8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1acfc:	f800283a 	ret

0001ad00 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ad00:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ad04:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1ad08:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1ad0c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ad10:	001aee00 	call	1aee0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1ad14:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1ad18:	d4a7fd45 	stb	r18,-24587(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1ad1c:	003fe506 	br	1acb4 <__alt_mem_Flash_flash_data+0xf401acb4>

0001ad20 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1ad20:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1ad24:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1ad28:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1ad2c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1ad30:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1ad34:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1ad38:	dec00204 	addi	sp,sp,8

      callr r2
   1ad3c:	103ee83a 	callr	r2

      nop
   1ad40:	0001883a 	nop

0001ad44 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1ad44:	defff704 	addi	sp,sp,-36
   1ad48:	dfc00815 	stw	ra,32(sp)
   1ad4c:	df000715 	stw	fp,28(sp)
   1ad50:	df000704 	addi	fp,sp,28
   1ad54:	e13ffc15 	stw	r4,-16(fp)
   1ad58:	e17ffd15 	stw	r5,-12(fp)
   1ad5c:	e1bffe15 	stw	r6,-8(fp)
   1ad60:	3805883a 	mov	r2,r7
   1ad64:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ad68:	e0fffe17 	ldw	r3,-8(fp)
   1ad6c:	00bfff04 	movi	r2,-4
   1ad70:	1884703a 	and	r2,r3,r2
   1ad74:	10bef704 	addi	r2,r2,-1060
   1ad78:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ad7c:	e13ff917 	ldw	r4,-28(fp)
   1ad80:	000b883a 	mov	r5,zero
   1ad84:	01810904 	movi	r6,1060
   1ad88:	000e37c0 	call	e37c <memset>
   1ad8c:	e0bff917 	ldw	r2,-28(fp)
   1ad90:	10c0bb04 	addi	r3,r2,748
   1ad94:	e0bff917 	ldw	r2,-28(fp)
   1ad98:	10c00115 	stw	r3,4(r2)
   1ad9c:	e0bff917 	ldw	r2,-28(fp)
   1ada0:	10c0d504 	addi	r3,r2,852
   1ada4:	e0bff917 	ldw	r2,-28(fp)
   1ada8:	10c00215 	stw	r3,8(r2)
   1adac:	e0bff917 	ldw	r2,-28(fp)
   1adb0:	10c0ef04 	addi	r3,r2,956
   1adb4:	e0bff917 	ldw	r2,-28(fp)
   1adb8:	10c00315 	stw	r3,12(r2)
   1adbc:	e0fff917 	ldw	r3,-28(fp)
   1adc0:	008000b4 	movhi	r2,2
   1adc4:	10b00c04 	addi	r2,r2,-16336
   1adc8:	18800d15 	stw	r2,52(r3)
   1adcc:	e0bff917 	ldw	r2,-28(fp)
   1add0:	00c00044 	movi	r3,1
   1add4:	10c02915 	stw	r3,164(r2)
   1add8:	10002a15 	stw	zero,168(r2)
   1addc:	e0bff917 	ldw	r2,-28(fp)
   1ade0:	00ccc384 	movi	r3,13070
   1ade4:	10c02b0d 	sth	r3,172(r2)
   1ade8:	e0bff917 	ldw	r2,-28(fp)
   1adec:	00eaf344 	movi	r3,-21555
   1adf0:	10c02b8d 	sth	r3,174(r2)
   1adf4:	e0bff917 	ldw	r2,-28(fp)
   1adf8:	00c48d04 	movi	r3,4660
   1adfc:	10c02c0d 	sth	r3,176(r2)
   1ae00:	e0bff917 	ldw	r2,-28(fp)
   1ae04:	00f99b44 	movi	r3,-6547
   1ae08:	10c02c8d 	sth	r3,178(r2)
   1ae0c:	e0bff917 	ldw	r2,-28(fp)
   1ae10:	00f7bb04 	movi	r3,-8468
   1ae14:	10c02d0d 	sth	r3,180(r2)
   1ae18:	e0bff917 	ldw	r2,-28(fp)
   1ae1c:	00c00144 	movi	r3,5
   1ae20:	10c02d8d 	sth	r3,182(r2)
   1ae24:	e0bff917 	ldw	r2,-28(fp)
   1ae28:	00c002c4 	movi	r3,11
   1ae2c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1ae30:	e0bff917 	ldw	r2,-28(fp)
   1ae34:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1ae38:	e0bffa17 	ldw	r2,-24(fp)
   1ae3c:	10bff304 	addi	r2,r2,-52
   1ae40:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1ae44:	e0bffb17 	ldw	r2,-20(fp)
   1ae48:	10800c04 	addi	r2,r2,48
   1ae4c:	e0fffc17 	ldw	r3,-16(fp)
   1ae50:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1ae54:	e0bffb17 	ldw	r2,-20(fp)
   1ae58:	10800b04 	addi	r2,r2,44
   1ae5c:	e0fffd17 	ldw	r3,-12(fp)
   1ae60:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1ae64:	e0bffb17 	ldw	r2,-20(fp)
   1ae68:	10800a04 	addi	r2,r2,40
   1ae6c:	e0fff917 	ldw	r3,-28(fp)
   1ae70:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ae74:	008000b4 	movhi	r2,2
   1ae78:	10ab4804 	addi	r2,r2,-21216
   1ae7c:	10c00104 	addi	r3,r2,4
   1ae80:	e0bffb17 	ldw	r2,-20(fp)
   1ae84:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ae88:	e0bffb17 	ldw	r2,-20(fp)
}
   1ae8c:	e037883a 	mov	sp,fp
   1ae90:	dfc00117 	ldw	ra,4(sp)
   1ae94:	df000017 	ldw	fp,0(sp)
   1ae98:	dec00204 	addi	sp,sp,8
   1ae9c:	f800283a 	ret

0001aea0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1aea0:	defffe04 	addi	sp,sp,-8
   1aea4:	df000115 	stw	fp,4(sp)
   1aea8:	df000104 	addi	fp,sp,4
   1aeac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1aeb0:	e037883a 	mov	sp,fp
   1aeb4:	df000017 	ldw	fp,0(sp)
   1aeb8:	dec00104 	addi	sp,sp,4
   1aebc:	f800283a 	ret

0001aec0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1aec0:	defffe04 	addi	sp,sp,-8
   1aec4:	df000115 	stw	fp,4(sp)
   1aec8:	df000104 	addi	fp,sp,4
   1aecc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1aed0:	e037883a 	mov	sp,fp
   1aed4:	df000017 	ldw	fp,0(sp)
   1aed8:	dec00104 	addi	sp,sp,4
   1aedc:	f800283a 	ret

0001aee0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1aee0:	deffff04 	addi	sp,sp,-4
   1aee4:	df000015 	stw	fp,0(sp)
   1aee8:	d839883a 	mov	fp,sp
}
   1aeec:	e037883a 	mov	sp,fp
   1aef0:	df000017 	ldw	fp,0(sp)
   1aef4:	dec00104 	addi	sp,sp,4
   1aef8:	f800283a 	ret

0001aefc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1aefc:	deffff04 	addi	sp,sp,-4
   1af00:	df000015 	stw	fp,0(sp)
   1af04:	d839883a 	mov	fp,sp
}
   1af08:	e037883a 	mov	sp,fp
   1af0c:	df000017 	ldw	fp,0(sp)
   1af10:	dec00104 	addi	sp,sp,4
   1af14:	f800283a 	ret

0001af18 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1af18:	deffff04 	addi	sp,sp,-4
   1af1c:	df000015 	stw	fp,0(sp)
   1af20:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1af24:	e037883a 	mov	sp,fp
   1af28:	df000017 	ldw	fp,0(sp)
   1af2c:	dec00104 	addi	sp,sp,4
   1af30:	f800283a 	ret

0001af34 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1af34:	deffff04 	addi	sp,sp,-4
   1af38:	df000015 	stw	fp,0(sp)
   1af3c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1af40:	e037883a 	mov	sp,fp
   1af44:	df000017 	ldw	fp,0(sp)
   1af48:	dec00104 	addi	sp,sp,4
   1af4c:	f800283a 	ret

0001af50 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1af50:	deffff04 	addi	sp,sp,-4
   1af54:	df000015 	stw	fp,0(sp)
   1af58:	d839883a 	mov	fp,sp
}
   1af5c:	e037883a 	mov	sp,fp
   1af60:	df000017 	ldw	fp,0(sp)
   1af64:	dec00104 	addi	sp,sp,4
   1af68:	f800283a 	ret

0001af6c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1af6c:	deffff04 	addi	sp,sp,-4
   1af70:	df000015 	stw	fp,0(sp)
   1af74:	d839883a 	mov	fp,sp
}
   1af78:	e037883a 	mov	sp,fp
   1af7c:	df000017 	ldw	fp,0(sp)
   1af80:	dec00104 	addi	sp,sp,4
   1af84:	f800283a 	ret

0001af88 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1af88:	defffe04 	addi	sp,sp,-8
   1af8c:	df000115 	stw	fp,4(sp)
   1af90:	df000104 	addi	fp,sp,4
   1af94:	e13fff15 	stw	r4,-4(fp)
}
   1af98:	e037883a 	mov	sp,fp
   1af9c:	df000017 	ldw	fp,0(sp)
   1afa0:	dec00104 	addi	sp,sp,4
   1afa4:	f800283a 	ret

0001afa8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1afa8:	defffb04 	addi	sp,sp,-20
   1afac:	dfc00415 	stw	ra,16(sp)
   1afb0:	df000315 	stw	fp,12(sp)
   1afb4:	df000304 	addi	fp,sp,12
   1afb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1afbc:	008000b4 	movhi	r2,2
   1afc0:	10b7c104 	addi	r2,r2,-8444
   1afc4:	10800017 	ldw	r2,0(r2)
   1afc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1afcc:	00003106 	br	1b094 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1afd0:	e0bffd17 	ldw	r2,-12(fp)
   1afd4:	10800217 	ldw	r2,8(r2)
   1afd8:	1009883a 	mov	r4,r2
   1afdc:	000caac0 	call	caac <strlen>
   1afe0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1afe4:	e0bffd17 	ldw	r2,-12(fp)
   1afe8:	10c00217 	ldw	r3,8(r2)
   1afec:	e0bffe17 	ldw	r2,-8(fp)
   1aff0:	10bfffc4 	addi	r2,r2,-1
   1aff4:	1885883a 	add	r2,r3,r2
   1aff8:	10800003 	ldbu	r2,0(r2)
   1affc:	10803fcc 	andi	r2,r2,255
   1b000:	1080201c 	xori	r2,r2,128
   1b004:	10bfe004 	addi	r2,r2,-128
   1b008:	10800bd8 	cmpnei	r2,r2,47
   1b00c:	1000031e 	bne	r2,zero,1b01c <alt_find_file+0x74>
    {
      len -= 1;
   1b010:	e0bffe17 	ldw	r2,-8(fp)
   1b014:	10bfffc4 	addi	r2,r2,-1
   1b018:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b01c:	e0bffe17 	ldw	r2,-8(fp)
   1b020:	e0ffff17 	ldw	r3,-4(fp)
   1b024:	1885883a 	add	r2,r3,r2
   1b028:	10800003 	ldbu	r2,0(r2)
   1b02c:	10803fcc 	andi	r2,r2,255
   1b030:	1080201c 	xori	r2,r2,128
   1b034:	10bfe004 	addi	r2,r2,-128
   1b038:	10800be0 	cmpeqi	r2,r2,47
   1b03c:	1000081e 	bne	r2,zero,1b060 <alt_find_file+0xb8>
   1b040:	e0bffe17 	ldw	r2,-8(fp)
   1b044:	e0ffff17 	ldw	r3,-4(fp)
   1b048:	1885883a 	add	r2,r3,r2
   1b04c:	10800003 	ldbu	r2,0(r2)
   1b050:	10803fcc 	andi	r2,r2,255
   1b054:	1080201c 	xori	r2,r2,128
   1b058:	10bfe004 	addi	r2,r2,-128
   1b05c:	10000a1e 	bne	r2,zero,1b088 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1b060:	e0bffd17 	ldw	r2,-12(fp)
   1b064:	10c00217 	ldw	r3,8(r2)
   1b068:	e0bffe17 	ldw	r2,-8(fp)
   1b06c:	1809883a 	mov	r4,r3
   1b070:	e17fff17 	ldw	r5,-4(fp)
   1b074:	100d883a 	mov	r6,r2
   1b078:	001b32c0 	call	1b32c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b07c:	1000021e 	bne	r2,zero,1b088 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1b080:	e0bffd17 	ldw	r2,-12(fp)
   1b084:	00000806 	br	1b0a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1b088:	e0bffd17 	ldw	r2,-12(fp)
   1b08c:	10800017 	ldw	r2,0(r2)
   1b090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b094:	e0fffd17 	ldw	r3,-12(fp)
   1b098:	008000b4 	movhi	r2,2
   1b09c:	10b7c104 	addi	r2,r2,-8444
   1b0a0:	18bfcb1e 	bne	r3,r2,1afd0 <__alt_mem_Flash_flash_data+0xf401afd0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1b0a4:	0005883a 	mov	r2,zero
}
   1b0a8:	e037883a 	mov	sp,fp
   1b0ac:	dfc00117 	ldw	ra,4(sp)
   1b0b0:	df000017 	ldw	fp,0(sp)
   1b0b4:	dec00204 	addi	sp,sp,8
   1b0b8:	f800283a 	ret

0001b0bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b0bc:	defff904 	addi	sp,sp,-28
   1b0c0:	dfc00615 	stw	ra,24(sp)
   1b0c4:	df000515 	stw	fp,20(sp)
   1b0c8:	df000504 	addi	fp,sp,20
   1b0cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b0d0:	00bffa04 	movi	r2,-24
   1b0d4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1b0d8:	008000b4 	movhi	r2,2
   1b0dc:	10bfad04 	addi	r2,r2,-332
   1b0e0:	10800017 	ldw	r2,0(r2)
   1b0e4:	e0bffd15 	stw	r2,-12(fp)
   1b0e8:	e03ffe0d 	sth	zero,-8(fp)
   1b0ec:	e0fffe0b 	ldhu	r3,-8(fp)
   1b0f0:	e0bffe84 	addi	r2,fp,-6
   1b0f4:	e13ffd17 	ldw	r4,-12(fp)
   1b0f8:	180b883a 	mov	r5,r3
   1b0fc:	100d883a 	mov	r6,r2
   1b100:	00152b40 	call	152b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b104:	e03ffb15 	stw	zero,-20(fp)
   1b108:	00001d06 	br	1b180 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1b10c:	008000b4 	movhi	r2,2
   1b110:	10b73c04 	addi	r2,r2,-8976
   1b114:	e0fffb17 	ldw	r3,-20(fp)
   1b118:	18c00324 	muli	r3,r3,12
   1b11c:	10c5883a 	add	r2,r2,r3
   1b120:	10800017 	ldw	r2,0(r2)
   1b124:	1000131e 	bne	r2,zero,1b174 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1b128:	008000b4 	movhi	r2,2
   1b12c:	10b73c04 	addi	r2,r2,-8976
   1b130:	e0fffb17 	ldw	r3,-20(fp)
   1b134:	18c00324 	muli	r3,r3,12
   1b138:	10c5883a 	add	r2,r2,r3
   1b13c:	e0ffff17 	ldw	r3,-4(fp)
   1b140:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1b144:	008000b4 	movhi	r2,2
   1b148:	10b7c504 	addi	r2,r2,-8428
   1b14c:	10c00017 	ldw	r3,0(r2)
   1b150:	e0bffb17 	ldw	r2,-20(fp)
   1b154:	1880040e 	bge	r3,r2,1b168 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1b158:	008000b4 	movhi	r2,2
   1b15c:	10b7c504 	addi	r2,r2,-8428
   1b160:	e0fffb17 	ldw	r3,-20(fp)
   1b164:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1b168:	e0bffb17 	ldw	r2,-20(fp)
   1b16c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1b170:	00000606 	br	1b18c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b174:	e0bffb17 	ldw	r2,-20(fp)
   1b178:	10800044 	addi	r2,r2,1
   1b17c:	e0bffb15 	stw	r2,-20(fp)
   1b180:	e0bffb17 	ldw	r2,-20(fp)
   1b184:	10800810 	cmplti	r2,r2,32
   1b188:	103fe01e 	bne	r2,zero,1b10c <__alt_mem_Flash_flash_data+0xf401b10c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1b18c:	008000b4 	movhi	r2,2
   1b190:	10bfad04 	addi	r2,r2,-332
   1b194:	10800017 	ldw	r2,0(r2)
   1b198:	1009883a 	mov	r4,r2
   1b19c:	00156880 	call	15688 <OSSemPost>

  return rc;
   1b1a0:	e0bffc17 	ldw	r2,-16(fp)
}
   1b1a4:	e037883a 	mov	sp,fp
   1b1a8:	dfc00117 	ldw	ra,4(sp)
   1b1ac:	df000017 	ldw	fp,0(sp)
   1b1b0:	dec00204 	addi	sp,sp,8
   1b1b4:	f800283a 	ret

0001b1b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1b1b8:	defffb04 	addi	sp,sp,-20
   1b1bc:	df000415 	stw	fp,16(sp)
   1b1c0:	df000404 	addi	fp,sp,16
   1b1c4:	e13ffe15 	stw	r4,-8(fp)
   1b1c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1b1cc:	e0bfff17 	ldw	r2,-4(fp)
   1b1d0:	10840070 	cmpltui	r2,r2,4097
   1b1d4:	1000021e 	bne	r2,zero,1b1e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1b1d8:	00840004 	movi	r2,4096
   1b1dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1b1e0:	e0fffe17 	ldw	r3,-8(fp)
   1b1e4:	e0bfff17 	ldw	r2,-4(fp)
   1b1e8:	1885883a 	add	r2,r3,r2
   1b1ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b1f0:	e0bffe17 	ldw	r2,-8(fp)
   1b1f4:	e0bffc15 	stw	r2,-16(fp)
   1b1f8:	00000506 	br	1b210 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1b1fc:	e0bffc17 	ldw	r2,-16(fp)
   1b200:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b204:	e0bffc17 	ldw	r2,-16(fp)
   1b208:	10800804 	addi	r2,r2,32
   1b20c:	e0bffc15 	stw	r2,-16(fp)
   1b210:	e0fffc17 	ldw	r3,-16(fp)
   1b214:	e0bffd17 	ldw	r2,-12(fp)
   1b218:	18bff836 	bltu	r3,r2,1b1fc <__alt_mem_Flash_flash_data+0xf401b1fc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1b21c:	e0bffe17 	ldw	r2,-8(fp)
   1b220:	108007cc 	andi	r2,r2,31
   1b224:	10000226 	beq	r2,zero,1b230 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1b228:	e0bffc17 	ldw	r2,-16(fp)
   1b22c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1b230:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1b234:	e037883a 	mov	sp,fp
   1b238:	df000017 	ldw	fp,0(sp)
   1b23c:	dec00104 	addi	sp,sp,4
   1b240:	f800283a 	ret

0001b244 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1b244:	defffe04 	addi	sp,sp,-8
   1b248:	df000115 	stw	fp,4(sp)
   1b24c:	df000104 	addi	fp,sp,4
   1b250:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1b254:	e0bfff17 	ldw	r2,-4(fp)
   1b258:	10bffe84 	addi	r2,r2,-6
   1b25c:	10c00428 	cmpgeui	r3,r2,16
   1b260:	18001a1e 	bne	r3,zero,1b2cc <alt_exception_cause_generated_bad_addr+0x88>
   1b264:	100690ba 	slli	r3,r2,2
   1b268:	008000b4 	movhi	r2,2
   1b26c:	10ac9f04 	addi	r2,r2,-19844
   1b270:	1885883a 	add	r2,r3,r2
   1b274:	10800017 	ldw	r2,0(r2)
   1b278:	1000683a 	jmp	r2
   1b27c:	0001b2bc 	xorhi	zero,zero,1738
   1b280:	0001b2bc 	xorhi	zero,zero,1738
   1b284:	0001b2cc 	andi	zero,zero,1739
   1b288:	0001b2cc 	andi	zero,zero,1739
   1b28c:	0001b2cc 	andi	zero,zero,1739
   1b290:	0001b2bc 	xorhi	zero,zero,1738
   1b294:	0001b2c4 	movi	zero,1739
   1b298:	0001b2cc 	andi	zero,zero,1739
   1b29c:	0001b2bc 	xorhi	zero,zero,1738
   1b2a0:	0001b2bc 	xorhi	zero,zero,1738
   1b2a4:	0001b2cc 	andi	zero,zero,1739
   1b2a8:	0001b2bc 	xorhi	zero,zero,1738
   1b2ac:	0001b2c4 	movi	zero,1739
   1b2b0:	0001b2cc 	andi	zero,zero,1739
   1b2b4:	0001b2cc 	andi	zero,zero,1739
   1b2b8:	0001b2bc 	xorhi	zero,zero,1738
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1b2bc:	00800044 	movi	r2,1
   1b2c0:	00000306 	br	1b2d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1b2c4:	0005883a 	mov	r2,zero
   1b2c8:	00000106 	br	1b2d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1b2cc:	0005883a 	mov	r2,zero
  }
}
   1b2d0:	e037883a 	mov	sp,fp
   1b2d4:	df000017 	ldw	fp,0(sp)
   1b2d8:	dec00104 	addi	sp,sp,4
   1b2dc:	f800283a 	ret

0001b2e0 <atexit>:
   1b2e0:	200b883a 	mov	r5,r4
   1b2e4:	000d883a 	mov	r6,zero
   1b2e8:	0009883a 	mov	r4,zero
   1b2ec:	000f883a 	mov	r7,zero
   1b2f0:	001b3a81 	jmpi	1b3a8 <__register_exitproc>

0001b2f4 <exit>:
   1b2f4:	defffe04 	addi	sp,sp,-8
   1b2f8:	000b883a 	mov	r5,zero
   1b2fc:	dc000015 	stw	r16,0(sp)
   1b300:	dfc00115 	stw	ra,4(sp)
   1b304:	2021883a 	mov	r16,r4
   1b308:	001b4bc0 	call	1b4bc <__call_exitprocs>
   1b30c:	008000b4 	movhi	r2,2
   1b310:	10b79c04 	addi	r2,r2,-8592
   1b314:	11000017 	ldw	r4,0(r2)
   1b318:	20800f17 	ldw	r2,60(r4)
   1b31c:	10000126 	beq	r2,zero,1b324 <exit+0x30>
   1b320:	103ee83a 	callr	r2
   1b324:	8009883a 	mov	r4,r16
   1b328:	001b6500 	call	1b650 <_exit>

0001b32c <memcmp>:
   1b32c:	01c000c4 	movi	r7,3
   1b330:	3980192e 	bgeu	r7,r6,1b398 <memcmp+0x6c>
   1b334:	2144b03a 	or	r2,r4,r5
   1b338:	11c4703a 	and	r2,r2,r7
   1b33c:	10000f26 	beq	r2,zero,1b37c <memcmp+0x50>
   1b340:	20800003 	ldbu	r2,0(r4)
   1b344:	28c00003 	ldbu	r3,0(r5)
   1b348:	10c0151e 	bne	r2,r3,1b3a0 <memcmp+0x74>
   1b34c:	31bfff84 	addi	r6,r6,-2
   1b350:	01ffffc4 	movi	r7,-1
   1b354:	00000406 	br	1b368 <memcmp+0x3c>
   1b358:	20800003 	ldbu	r2,0(r4)
   1b35c:	28c00003 	ldbu	r3,0(r5)
   1b360:	31bfffc4 	addi	r6,r6,-1
   1b364:	10c00e1e 	bne	r2,r3,1b3a0 <memcmp+0x74>
   1b368:	21000044 	addi	r4,r4,1
   1b36c:	29400044 	addi	r5,r5,1
   1b370:	31fff91e 	bne	r6,r7,1b358 <__alt_mem_Flash_flash_data+0xf401b358>
   1b374:	0005883a 	mov	r2,zero
   1b378:	f800283a 	ret
   1b37c:	20c00017 	ldw	r3,0(r4)
   1b380:	28800017 	ldw	r2,0(r5)
   1b384:	1880041e 	bne	r3,r2,1b398 <memcmp+0x6c>
   1b388:	31bfff04 	addi	r6,r6,-4
   1b38c:	21000104 	addi	r4,r4,4
   1b390:	29400104 	addi	r5,r5,4
   1b394:	39bff936 	bltu	r7,r6,1b37c <__alt_mem_Flash_flash_data+0xf401b37c>
   1b398:	303fe91e 	bne	r6,zero,1b340 <__alt_mem_Flash_flash_data+0xf401b340>
   1b39c:	003ff506 	br	1b374 <__alt_mem_Flash_flash_data+0xf401b374>
   1b3a0:	10c5c83a 	sub	r2,r2,r3
   1b3a4:	f800283a 	ret

0001b3a8 <__register_exitproc>:
   1b3a8:	008000b4 	movhi	r2,2
   1b3ac:	defffa04 	addi	sp,sp,-24
   1b3b0:	10b79c04 	addi	r2,r2,-8592
   1b3b4:	dc000315 	stw	r16,12(sp)
   1b3b8:	14000017 	ldw	r16,0(r2)
   1b3bc:	dc400415 	stw	r17,16(sp)
   1b3c0:	dfc00515 	stw	ra,20(sp)
   1b3c4:	80805217 	ldw	r2,328(r16)
   1b3c8:	2023883a 	mov	r17,r4
   1b3cc:	10003626 	beq	r2,zero,1b4a8 <__register_exitproc+0x100>
   1b3d0:	10c00117 	ldw	r3,4(r2)
   1b3d4:	010007c4 	movi	r4,31
   1b3d8:	20c00e16 	blt	r4,r3,1b414 <__register_exitproc+0x6c>
   1b3dc:	1a400044 	addi	r9,r3,1
   1b3e0:	8800211e 	bne	r17,zero,1b468 <__register_exitproc+0xc0>
   1b3e4:	18c00084 	addi	r3,r3,2
   1b3e8:	18c7883a 	add	r3,r3,r3
   1b3ec:	18c7883a 	add	r3,r3,r3
   1b3f0:	12400115 	stw	r9,4(r2)
   1b3f4:	10c7883a 	add	r3,r2,r3
   1b3f8:	19400015 	stw	r5,0(r3)
   1b3fc:	0005883a 	mov	r2,zero
   1b400:	dfc00517 	ldw	ra,20(sp)
   1b404:	dc400417 	ldw	r17,16(sp)
   1b408:	dc000317 	ldw	r16,12(sp)
   1b40c:	dec00604 	addi	sp,sp,24
   1b410:	f800283a 	ret
   1b414:	00800034 	movhi	r2,0
   1b418:	10800004 	addi	r2,r2,0
   1b41c:	10002526 	beq	r2,zero,1b4b4 <__register_exitproc+0x10c>
   1b420:	01006404 	movi	r4,400
   1b424:	d9400015 	stw	r5,0(sp)
   1b428:	d9800115 	stw	r6,4(sp)
   1b42c:	d9c00215 	stw	r7,8(sp)
   1b430:	00000000 	call	0 <__reset>
   1b434:	d9400017 	ldw	r5,0(sp)
   1b438:	d9800117 	ldw	r6,4(sp)
   1b43c:	d9c00217 	ldw	r7,8(sp)
   1b440:	10001c26 	beq	r2,zero,1b4b4 <__register_exitproc+0x10c>
   1b444:	80c05217 	ldw	r3,328(r16)
   1b448:	10000115 	stw	zero,4(r2)
   1b44c:	02400044 	movi	r9,1
   1b450:	10c00015 	stw	r3,0(r2)
   1b454:	80805215 	stw	r2,328(r16)
   1b458:	10006215 	stw	zero,392(r2)
   1b45c:	10006315 	stw	zero,396(r2)
   1b460:	0007883a 	mov	r3,zero
   1b464:	883fdf26 	beq	r17,zero,1b3e4 <__alt_mem_Flash_flash_data+0xf401b3e4>
   1b468:	18d1883a 	add	r8,r3,r3
   1b46c:	4211883a 	add	r8,r8,r8
   1b470:	1211883a 	add	r8,r2,r8
   1b474:	41802215 	stw	r6,136(r8)
   1b478:	01000044 	movi	r4,1
   1b47c:	11806217 	ldw	r6,392(r2)
   1b480:	20c8983a 	sll	r4,r4,r3
   1b484:	310cb03a 	or	r6,r6,r4
   1b488:	11806215 	stw	r6,392(r2)
   1b48c:	41c04215 	stw	r7,264(r8)
   1b490:	01800084 	movi	r6,2
   1b494:	89bfd31e 	bne	r17,r6,1b3e4 <__alt_mem_Flash_flash_data+0xf401b3e4>
   1b498:	11806317 	ldw	r6,396(r2)
   1b49c:	3108b03a 	or	r4,r6,r4
   1b4a0:	11006315 	stw	r4,396(r2)
   1b4a4:	003fcf06 	br	1b3e4 <__alt_mem_Flash_flash_data+0xf401b3e4>
   1b4a8:	80805304 	addi	r2,r16,332
   1b4ac:	80805215 	stw	r2,328(r16)
   1b4b0:	003fc706 	br	1b3d0 <__alt_mem_Flash_flash_data+0xf401b3d0>
   1b4b4:	00bfffc4 	movi	r2,-1
   1b4b8:	003fd106 	br	1b400 <__alt_mem_Flash_flash_data+0xf401b400>

0001b4bc <__call_exitprocs>:
   1b4bc:	008000b4 	movhi	r2,2
   1b4c0:	10b79c04 	addi	r2,r2,-8592
   1b4c4:	10800017 	ldw	r2,0(r2)
   1b4c8:	defff404 	addi	sp,sp,-48
   1b4cc:	dd800815 	stw	r22,32(sp)
   1b4d0:	d8800015 	stw	r2,0(sp)
   1b4d4:	10805204 	addi	r2,r2,328
   1b4d8:	dd000615 	stw	r20,24(sp)
   1b4dc:	dc800415 	stw	r18,16(sp)
   1b4e0:	dfc00b15 	stw	ra,44(sp)
   1b4e4:	df000a15 	stw	fp,40(sp)
   1b4e8:	ddc00915 	stw	r23,36(sp)
   1b4ec:	dd400715 	stw	r21,28(sp)
   1b4f0:	dcc00515 	stw	r19,20(sp)
   1b4f4:	dc400315 	stw	r17,12(sp)
   1b4f8:	dc000215 	stw	r16,8(sp)
   1b4fc:	2025883a 	mov	r18,r4
   1b500:	2829883a 	mov	r20,r5
   1b504:	d8800115 	stw	r2,4(sp)
   1b508:	05bfffc4 	movi	r22,-1
   1b50c:	d8800017 	ldw	r2,0(sp)
   1b510:	14c05217 	ldw	r19,328(r2)
   1b514:	98001d26 	beq	r19,zero,1b58c <__call_exitprocs+0xd0>
   1b518:	dd400117 	ldw	r21,4(sp)
   1b51c:	98800117 	ldw	r2,4(r19)
   1b520:	173fffc4 	addi	fp,r2,-1
   1b524:	e0000d16 	blt	fp,zero,1b55c <__call_exitprocs+0xa0>
   1b528:	14000044 	addi	r16,r2,1
   1b52c:	8421883a 	add	r16,r16,r16
   1b530:	8421883a 	add	r16,r16,r16
   1b534:	84402004 	addi	r17,r16,128
   1b538:	9c63883a 	add	r17,r19,r17
   1b53c:	9c21883a 	add	r16,r19,r16
   1b540:	a0001e26 	beq	r20,zero,1b5bc <__call_exitprocs+0x100>
   1b544:	80804017 	ldw	r2,256(r16)
   1b548:	15001c26 	beq	r2,r20,1b5bc <__call_exitprocs+0x100>
   1b54c:	e73fffc4 	addi	fp,fp,-1
   1b550:	843fff04 	addi	r16,r16,-4
   1b554:	8c7fff04 	addi	r17,r17,-4
   1b558:	e5bff91e 	bne	fp,r22,1b540 <__alt_mem_Flash_flash_data+0xf401b540>
   1b55c:	00800034 	movhi	r2,0
   1b560:	10800004 	addi	r2,r2,0
   1b564:	10000926 	beq	r2,zero,1b58c <__call_exitprocs+0xd0>
   1b568:	98800117 	ldw	r2,4(r19)
   1b56c:	1000311e 	bne	r2,zero,1b634 <__call_exitprocs+0x178>
   1b570:	98800017 	ldw	r2,0(r19)
   1b574:	10003426 	beq	r2,zero,1b648 <__call_exitprocs+0x18c>
   1b578:	9809883a 	mov	r4,r19
   1b57c:	a8800015 	stw	r2,0(r21)
   1b580:	00000000 	call	0 <__reset>
   1b584:	acc00017 	ldw	r19,0(r21)
   1b588:	983fe41e 	bne	r19,zero,1b51c <__alt_mem_Flash_flash_data+0xf401b51c>
   1b58c:	dfc00b17 	ldw	ra,44(sp)
   1b590:	df000a17 	ldw	fp,40(sp)
   1b594:	ddc00917 	ldw	r23,36(sp)
   1b598:	dd800817 	ldw	r22,32(sp)
   1b59c:	dd400717 	ldw	r21,28(sp)
   1b5a0:	dd000617 	ldw	r20,24(sp)
   1b5a4:	dcc00517 	ldw	r19,20(sp)
   1b5a8:	dc800417 	ldw	r18,16(sp)
   1b5ac:	dc400317 	ldw	r17,12(sp)
   1b5b0:	dc000217 	ldw	r16,8(sp)
   1b5b4:	dec00c04 	addi	sp,sp,48
   1b5b8:	f800283a 	ret
   1b5bc:	98800117 	ldw	r2,4(r19)
   1b5c0:	80c00017 	ldw	r3,0(r16)
   1b5c4:	10bfffc4 	addi	r2,r2,-1
   1b5c8:	17001526 	beq	r2,fp,1b620 <__call_exitprocs+0x164>
   1b5cc:	80000015 	stw	zero,0(r16)
   1b5d0:	183fde26 	beq	r3,zero,1b54c <__alt_mem_Flash_flash_data+0xf401b54c>
   1b5d4:	00800044 	movi	r2,1
   1b5d8:	1708983a 	sll	r4,r2,fp
   1b5dc:	98806217 	ldw	r2,392(r19)
   1b5e0:	9dc00117 	ldw	r23,4(r19)
   1b5e4:	2084703a 	and	r2,r4,r2
   1b5e8:	1000061e 	bne	r2,zero,1b604 <__call_exitprocs+0x148>
   1b5ec:	183ee83a 	callr	r3
   1b5f0:	98800117 	ldw	r2,4(r19)
   1b5f4:	15ffc51e 	bne	r2,r23,1b50c <__alt_mem_Flash_flash_data+0xf401b50c>
   1b5f8:	a8800017 	ldw	r2,0(r21)
   1b5fc:	14ffd326 	beq	r2,r19,1b54c <__alt_mem_Flash_flash_data+0xf401b54c>
   1b600:	003fc206 	br	1b50c <__alt_mem_Flash_flash_data+0xf401b50c>
   1b604:	98806317 	ldw	r2,396(r19)
   1b608:	2084703a 	and	r2,r4,r2
   1b60c:	1000061e 	bne	r2,zero,1b628 <__call_exitprocs+0x16c>
   1b610:	89400017 	ldw	r5,0(r17)
   1b614:	9009883a 	mov	r4,r18
   1b618:	183ee83a 	callr	r3
   1b61c:	003ff406 	br	1b5f0 <__alt_mem_Flash_flash_data+0xf401b5f0>
   1b620:	9f000115 	stw	fp,4(r19)
   1b624:	003fea06 	br	1b5d0 <__alt_mem_Flash_flash_data+0xf401b5d0>
   1b628:	89000017 	ldw	r4,0(r17)
   1b62c:	183ee83a 	callr	r3
   1b630:	003fef06 	br	1b5f0 <__alt_mem_Flash_flash_data+0xf401b5f0>
   1b634:	98800017 	ldw	r2,0(r19)
   1b638:	982b883a 	mov	r21,r19
   1b63c:	1027883a 	mov	r19,r2
   1b640:	983fb61e 	bne	r19,zero,1b51c <__alt_mem_Flash_flash_data+0xf401b51c>
   1b644:	003fd106 	br	1b58c <__alt_mem_Flash_flash_data+0xf401b58c>
   1b648:	0005883a 	mov	r2,zero
   1b64c:	003ffa06 	br	1b638 <__alt_mem_Flash_flash_data+0xf401b638>

0001b650 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b650:	defffd04 	addi	sp,sp,-12
   1b654:	df000215 	stw	fp,8(sp)
   1b658:	df000204 	addi	fp,sp,8
   1b65c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1b660:	008000b4 	movhi	r2,2
   1b664:	10bf9944 	addi	r2,r2,-411
   1b668:	10000005 	stb	zero,0(r2)
   1b66c:	e0bfff17 	ldw	r2,-4(fp)
   1b670:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1b674:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b678:	10000226 	beq	r2,zero,1b684 <_exit+0x34>
    ALT_SIM_FAIL();
   1b67c:	002af070 	cmpltui	zero,zero,43969
   1b680:	00000106 	br	1b688 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1b684:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b688:	003fff06 	br	1b688 <__alt_mem_Flash_flash_data+0xf401b688>
