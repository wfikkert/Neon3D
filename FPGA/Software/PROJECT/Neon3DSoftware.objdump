
Neon3DSoftware.elf:     file format elf32-littlenios2
Neon3DSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00021120 memsz 0x00021120 flags r-x
    LOAD off    0x00022140 vaddr 0x00021140 paddr 0x00023038 align 2**12
         filesz 0x00001ef8 memsz 0x00001ef8 flags rw-
    LOAD off    0x00024f30 vaddr 0x00024f30 paddr 0x00024f30 align 2**12
         filesz 0x00000000 memsz 0x000073f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000205a4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000958  000207e8  000207e8  000217e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ef8  00021140  00023038  00022140  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073f8  00024f30  00024f30  00024f30  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002c328  0002c328  00024038  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00024038  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00024038  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001368  00000000  00000000  00024060  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003563b  00000000  00000000  000253c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ce2a  00000000  00000000  0005aa03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011577  00000000  00000000  0006782d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ef8  00000000  00000000  00078da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005a9a  00000000  00000000  0007cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001dce4  00000000  00000000  00082736  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a041c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c90  00000000  00000000  000a0440  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a7db5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a7dbb  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a7dc0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a7dc1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a7dc2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a7dc6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a7dca  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a7dce  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a7dd7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a7de0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a7de9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a7df4  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a7e52  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000b2a17  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000207e8 l    d  .rodata	00000000 .rodata
00021140 l    d  .rwdata	00000000 .rwdata
00024f30 l    d  .bss	00000000 .bss
0002c328 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Eldin/Documents/GitHub/Neon3D/FPGA/Software/Neon3DSoftware_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000209f0 l     O .rodata	00000108 two_over_pi
00020970 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00020b38 l     O .rodata	00000010 init_jk
00020af8 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004534 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020c8e l     O .rodata	00000010 zeroes.4240
00020c9e l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00020cae l     O .rodata	00000010 zeroes.4255
0000b328 l     F .text	000000bc __sbprintf
00020cbe l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000b538 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000d0f4 l     F .text	00000008 __fp_lock
0000d0fc l     F .text	00000008 __fp_unlock
0000d110 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00021548 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002198c l     O .rwdata	00000020 lc_ctype_charset
0002196c l     O .rwdata	00000020 lc_message_charset
000219ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00020cf0 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020e14 l     O .rodata	00000010 zeroes.4184
00020e24 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
00010e50 l     F .text	000000fc __sprint_r.part.0
00020e44 l     O .rodata	00000010 blanks.4199
00020e34 l     O .rodata	00000010 zeroes.4200
00012258 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000141ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000142cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000142f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000143f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000144ec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000145d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000147c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022fac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014a24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022fb0 l     O .rwdata	00000004 lockid
00024f6c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00022fb4 l     O .rwdata	00000004 lockid
00024f74 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00016458 l     F .text	00000044 OS_InitMisc
0001649c l     F .text	00000068 OS_InitRdyList
000165fc l     F .text	000000e0 OS_InitTCBList
0001637c l     F .text	000000dc OS_InitEventList
00016504 l     F .text	0000007c OS_InitTaskIdle
00016580 l     F .text	0000007c OS_InitTaskStat
0001685c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00018660 l     F .text	00000110 OS_FlagTaskRdy
000183b8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001cb08 l     F .text	00000038 alt_dev_reg
00021b8c l     O .rwdata	0000106c JTAG_UART
00022bf8 l     O .rwdata	00000030 AV_Config
00022c28 l     O .rwdata	00000030 Audio_Subsystem_Audio
00022c58 l     O .rwdata	0000002c Char_LCD_16x2
00022c84 l     O .rwdata	0000002c IrDA
00022cb0 l     O .rwdata	0000002c Expansion_JP5
00022cdc l     O .rwdata	0000002c Green_LEDs
00022d08 l     O .rwdata	0000002c HEX3_HEX0
00022d34 l     O .rwdata	0000002c HEX7_HEX4
00022d60 l     O .rwdata	0000002c Pushbuttons
00022d8c l     O .rwdata	0000002c Red_LEDs
00022db8 l     O .rwdata	0000002c Slider_Switches
00022de4 l     O .rwdata	00000038 PS2_Port
00022e1c l     O .rwdata	00000038 PS2_Port_Dual
00022e54 l     O .rwdata	0000002c Serial_Port
00022e80 l     O .rwdata	00000034 USB
00022eb4 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00022efc l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00022f50 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001d1f0 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001d498 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001dc70 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001f44c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001f6b8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001f9a0 l     F .text	00000050 alt_get_errno
0001f9f0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024fd8 g     O .bss	00000004 alt_instruction_exception_handler
0000f318 g     F .text	00000074 _mprec_log10
00023002 g     O .rwdata	00000002 OSTaskNameSize
0000f404 g     F .text	0000008c __any_on
000127c4 g     F .text	00000054 _isatty_r
00020cfc g     O .rodata	00000028 __mprec_tinytens
000146f4 g     F .text	000000d4 alt_main
000071b8 g     F .text	000000a8 _puts_r
0002c228 g     O .bss	00000100 alt_irq
0001e80c g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00004144 g     F .text	00000014 fabs
00012818 g     F .text	0000005c _lseek_r
00018ec4 g     F .text	000000d0 OS_MemInit
00023038 g       *ABS*	00000000 __flash_rwdata_start
0001caa4 g     F .text	00000064 OSTimeSet
0001dddc g     F .text	0000003c alt_up_character_lcd_send_cmd
0000528c g     F .text	00000084 .hidden __eqdf2
000150d4 g     F .text	00000610 OSEventPendMulti
0002c328 g       *ABS*	00000000 __alt_heap_start
0001fffc g     F .text	00000020 OSTaskCreateHook
00025004 g     O .bss	00002000 task1_stk
0000717c g     F .text	0000003c printf
00022fda g     O .rwdata	00000002 OSMboxEn
00015738 g     F .text	0000007c OSIntEnter
00012a24 g     F .text	0000009c _wcrtomb_r
0000fb44 g     F .text	0000005c __sseek
0000d444 g     F .text	00000010 __sinit
0001f194 g     F .text	00000100 alt_up_char_buffer_string
000128d0 g     F .text	00000138 __swbuf_r
0001e62c g     F .text	00000034 read_CE_bit
00022fea g     O .rwdata	00000002 OSQEn
0000def0 g     F .text	0000007c _setlocale_r
0000d2ac g     F .text	00000068 __sfmoreglue
00014da8 g     F .text	000000d0 __malloc_unlock
00020058 g     F .text	0000001c OSTaskStatHook
0001e9b0 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001eea4 g     F .text	00000090 alt_up_rs232_read_fd
00024f7c g     O .bss	00000001 OSLockNesting
00023028 g     O .rwdata	00000002 OSDataSize
00024f7d g     O .bss	00000001 OSRunning
0001f0c8 g     F .text	000000cc alt_up_char_buffer_draw
0000e270 g     F .text	0000015c memmove
00020090 g     F .text	0000001c OSInitHookBegin
00023020 g     O .rwdata	00000002 OSTmrSize
0000d42c g     F .text	00000018 _cleanup
0000e4f0 g     F .text	000000a8 _Balloc
00004844 g     F .text	00000078 .hidden __fixsfsi
00024f80 g     O .bss	00000004 OSIdleCtr
00005310 g     F .text	000000e0 .hidden __gtdf2
0001fdb0 g     F .text	00000020 altera_nios2_gen2_irq_init
0001fe7c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001dd68 g     F .text	00000074 get_DDRAM_addr
00016b94 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00023026 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00022fc6 g     O .rwdata	00000002 OSEventSize
00024f84 g     O .bss	00000001 OSPrioHighRdy
0001276c g     F .text	00000058 _fstat_r
0002001c g     F .text	00000020 OSTaskDelHook
00024f4c g     O .bss	00000004 errno
00004158 g     F .text	000001f4 floor
0000fac0 g     F .text	00000008 __seofread
0001fe5c g       .text	00000000 OSStartHighRdy
0001b3a8 g     F .text	000001ec OSTaskCreateExt
0000fe18 g     F .text	00001038 ___svfiprintf_internal_r
00017f04 g     F .text	00000068 OSFlagPendGetFlagsRdy
00023006 g     O .rwdata	00000002 OSTaskStatStkSize
00016ff4 g     F .text	00000308 OSFlagAccept
00019598 g     F .text	000000b8 OSQFlush
00018f94 g     F .text	00000140 OSQAccept
00024f64 g     O .bss	00000004 alt_argv
0002af7c g       *ABS*	00000000 _gp
0001b1ec g     F .text	000001bc OSTaskCreate
0001acac g     F .text	00000540 OSTaskChangePrio
00024f78 g     O .bss	00000004 alt_heapsem
00016e68 g     F .text	0000018c OSDebugInit
0001b594 g     F .text	000003e0 OSTaskDel
00021a0c g     O .rwdata	00000180 alt_fd_list
00024f30 g     O .bss	00000004 startEndnodes
00029004 g     O .bss	00000370 OSFlagTbl
00002514 g     F .text	0000079c __ieee754_rem_pio2
00016168 g     F .text	000000b4 OS_EventTaskRemove
0001f5f8 g     F .text	00000090 alt_find_dev
00007018 g     F .text	00000138 memcpy
00022ff0 g     O .rwdata	00000002 OSRdyTblSize
0001df78 g     F .text	00000050 alt_up_character_lcd_write_fd
0001f294 g     F .text	0000005c alt_up_char_buffer_clear
0000d104 g     F .text	0000000c _cleanup_r
0000646c g     F .text	000000d0 .hidden __floatsidf
0001f778 g     F .text	00000078 alt_io_redirect
00014028 g     F .text	000000e0 .hidden __ltdf2
000207e8 g       *ABS*	00000000 __DTOR_END__
0001e4f8 g     F .text	00000090 alt_up_irda_write_fd
0001ee30 g     F .text	00000074 alt_up_rs232_read_data
00007260 g     F .text	00000014 puts
000203a0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014e78 g     F .text	00000120 OSEventNameGet
00022fd4 g     O .rwdata	00000002 OSFlagMax
0000f9f8 g     F .text	00000074 __fpclassifyd
0000f274 g     F .text	000000a4 __ratio
000157b4 g     F .text	000000f4 OSIntExit
00012234 g     F .text	00000024 __vfiprintf_internal
0002300e g     O .rwdata	00000002 OSTCBSize
00024f85 g     O .bss	00000001 OSPrioCur
0001e2f4 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001d6fc g     F .text	000002b4 altera_avalon_jtag_uart_read
00006848 g     F .text	00000014 malloc
00007150 g     F .text	0000002c _printf_r
00004650 g     F .text	00000008 .hidden __udivsi3
00014448 g     F .text	000000a4 isatty
00022ff4 g     O .rwdata	00000002 OSStkWidth
00020d4c g     O .rodata	000000c8 __mprec_tens
00022fe8 g     O .rwdata	00000002 OSPtrSize
0000df6c g     F .text	0000000c __locale_charset
00002cb0 g     F .text	000004a4 __kernel_cos
0000478c g     F .text	000000b8 .hidden __lesf2
00022fc8 g     O .rwdata	00000002 OSEventTblSize
0001e298 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001fdd0 g       .text	00000000 OSCtxSw
00020314 g     F .text	0000008c alt_icache_flush
00024f48 g     O .bss	00000004 __malloc_top_pad
00024f88 g     O .bss	00000004 OSTCBList
00024f5c g     O .bss	00000004 alt_fd_list_lock
00022f8c g     O .rwdata	00000004 __mb_cur_max
0000df9c g     F .text	0000000c _localeconv_r
0000e8fc g     F .text	0000003c __i2b
0000d8a8 g     F .text	000004c0 __sfvwrite_r
00029374 g     O .bss	00000c30 OSMemTbl
00024f8c g     O .bss	00000001 OSTickStepState
00007274 g     F .text	00000054 _sbrk_r
00022fec g     O .rwdata	00000002 OSQMax
00029fa4 g     O .bss	00000800 OSTaskStatStk
00018af4 g     F .text	000000f8 OSMemNameGet
00000434 g     F .text	00000064 removePixel
00022fcc g     O .rwdata	00000002 OSFlagEn
00012874 g     F .text	0000005c _read_r
00023012 g     O .rwdata	00000002 OSTimeTickHookEn
00019ab8 g     F .text	00000168 OSQPost
00018770 g     F .text	000000a0 OS_FlagUnlink
00022fa4 g     O .rwdata	00000004 alt_max_fd
0001edac g     F .text	00000044 alt_up_rs232_check_parity
0001672c g     F .text	00000064 OS_MemCopy
00016790 g     F .text	000000cc OS_Sched
00012488 g     F .text	000000f0 _fclose_r
00018a04 g     F .text	000000f0 OSMemGet
0001bc74 g     F .text	000001c0 OSTaskNameSet
0001e660 g     F .text	00000030 read_num_bytes_available
0000d0c4 g     F .text	00000030 fflush
00024f44 g     O .bss	00000004 __malloc_max_sbrked_mem
00024f90 g     O .bss	00000004 OSCtxSwCtr
00020074 g     F .text	0000001c OSTimeTickHook
0001f7f0 g     F .text	000001b0 alt_irq_register
00022fd6 g     O .rwdata	00000002 OSFlagNameSize
0001e5c8 g     F .text	00000034 read_RI_bit
00003e7c g     F .text	000002c8 __kernel_sin
0000653c g     F .text	00000110 .hidden __extendsfdf2
0001621c g     F .text	000000fc OS_EventTaskRemoveMulti
000049f0 g     F .text	0000089c .hidden __adddf3
00004660 g     F .text	00000074 .hidden __nesf2
0001601c g     F .text	0000014c OS_EventTaskWaitMulti
0000f01c g     F .text	0000011c __b2d
00022fee g     O .rwdata	00000002 OSQSize
000131cc g     F .text	00000590 .hidden __umoddi3
00014620 g     F .text	000000d4 lseek
0001a5bc g     F .text	00000268 OSSemPend
00022f84 g     O .rwdata	00000004 _global_impure_ptr
0000f490 g     F .text	00000568 _realloc_r
00022fd8 g     O .rwdata	00000002 OSLowestPrio
0002c328 g       *ABS*	00000000 __bss_end
000200e4 g     F .text	00000020 OSTCBInitHook
0002301e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001fcac g     F .text	00000104 alt_tick
00012c0c g     F .text	000005c0 .hidden __udivdi3
0001258c g     F .text	00000184 _fputwc_r
00022fc0 g     O .rwdata	00000002 OSEventEn
00020d24 g     O .rodata	00000028 __mprec_bigtens
0000e6e0 g     F .text	00000104 __s2b
0002301a g     O .rwdata	00000002 OSTmrCfgNameSize
00014108 g     F .text	000000a4 .hidden __floatunsidf
0000edc4 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001e6c4 g     F .text	0000002c read_data_byte
0000d464 g     F .text	00000018 __fp_lock_all
0001857c g     F .text	000000e4 OS_FlagInit
0001fc14 g     F .text	00000098 alt_alarm_stop
0001e5fc g     F .text	00000030 read_RE_bit
00022ffc g     O .rwdata	00000002 OSTaskIdleStkSize
00024fcc g     O .bss	00000004 alt_irq_active
0001a1a4 g     F .text	000000b0 OSSemAccept
00000280 g     F .text	00000090 VGA_text
00018d04 g     F .text	000000d8 OSMemPut
00018810 g     F .text	000001f4 OSMemCreate
00024f94 g     O .bss	00000004 OSIdleCtrMax
0001e334 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
000219e4 g     O .rwdata	00000028 alt_dev_null
00023010 g     O .rwdata	00000002 OSTicksPerSec
00003154 g     F .text	00000d28 __kernel_rem_pio2
0001e20c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001fdd0 g       .text	00000000 OSIntCtxSw
0001e868 g     F .text	00000074 alt_up_ps2_write_data_byte
0001f430 g     F .text	0000001c alt_dcache_flush_all
0000e7e4 g     F .text	00000068 __hi0bits
000063e4 g     F .text	00000088 .hidden __fixdfsi
00024f98 g     O .bss	00000004 OSTCBFreeList
00023038 g       *ABS*	00000000 __ram_rwdata_end
0001a824 g     F .text	0000016c OSSemPendAbort
00022f9c g     O .rwdata	00000008 alt_dev_list
00014a74 g     F .text	000000f8 write
00023014 g     O .rwdata	00000002 OSVersionNbr
000046d4 g     F .text	000000b8 .hidden __gtsf2
00021140 g       *ABS*	00000000 __ram_rodata_end
00014348 g     F .text	000000b0 fstat
0001ef34 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00014028 g     F .text	000000e0 .hidden __ledf2
00022fbc g     O .rwdata	00000004 OSEndiannessTest
0000eb34 g     F .text	00000140 __pow5mult
00010f64 g     F .text	000012d0 ___vfiprintf_internal_r
00024f58 g     O .bss	00000004 __nlocale_changed
00004658 g     F .text	00000008 .hidden __umodsi3
00022fce g     O .rwdata	00000002 OSFlagGrpSize
0002c328 g       *ABS*	00000000 end
0001eba4 g     F .text	00000098 alt_up_ps2_write_fd
0001e370 g     F .text	00000044 alt_up_irda_check_parity
0001f008 g     F .text	00000080 alt_up_char_buffer_init
0001d0b0 g     F .text	00000140 altera_avalon_jtag_uart_init
000169f0 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000207e8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001dce8 g     F .text	00000080 alt_avalon_timer_sc_init
000067e4 g     F .text	00000064 .hidden __clzsi2
0001d9b0 g     F .text	000002c0 altera_avalon_jtag_uart_write
00002338 g     F .text	000000ec cos
0000d454 g     F .text	00000004 __sfp_lock_acquire
0000e188 g     F .text	000000e8 memchr
000166dc g     F .text	00000050 OS_MemClr
0001de8c g     F .text	00000078 alt_up_character_lcd_write
000093b4 g     F .text	00001f50 ___vfprintf_internal_r
0001fea0 g     F .text	0000015c OSTaskStkInit
0000086c g     F .text	0000024c task1
000072c8 g     F .text	00000058 _sprintf_r
0000d5b8 g     F .text	000002f0 _free_r
0000df78 g     F .text	00000010 __locale_mb_cur_max
00015d78 g     F .text	00000198 OS_EventTaskRdy
00020618 g     F .text	00000194 __call_exitprocs
00024f9c g     O .bss	00000001 OSCPUUsage
00024f54 g     O .bss	00000004 __mlocale_changed
00022f7c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00000ab8 g     F .text	00001714 task2
00024fd0 g     O .bss	00000004 _alt_tick_rate
00019650 g     F .text	000002fc OSQPend
00002424 g     F .text	000000f0 sin
0001c5a0 g     F .text	00000148 OSTimeDly
0000ec74 g     F .text	00000150 __lshift
00024fd4 g     O .bss	00000004 _alt_nticks
00014818 g     F .text	000000fc read
0001cb74 g     F .text	000003d8 alt_sys_init
0001e0c4 g     F .text	00000088 alt_up_character_lcd_shift_display
000048bc g     F .text	00000134 .hidden __floatsisf
0000fc4c g     F .text	000001cc __ssprint_r
00020504 g     F .text	00000114 __register_exitproc
00024f9d g     O .bss	00000001 OSTaskCtr
0001eac4 g     F .text	00000054 alt_up_ps2_clear_fifo
0001ed70 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000310 g     F .text	000000b4 VGA_box
0001c6e8 g     F .text	00000168 OSTimeDlyHMSM
0000e938 g     F .text	000001fc __multiply
0001e14c g     F .text	0000008c alt_up_character_lcd_erase_pos
0001d5a8 g     F .text	00000068 altera_avalon_jtag_uart_close
00021140 g       *ABS*	00000000 __ram_rwdata_start
000207e8 g       *ABS*	00000000 __ram_rodata_start
00024fdc g     O .bss	00000028 __malloc_current_mallinfo
00022fc2 g     O .rwdata	00000002 OSEventMax
00004660 g     F .text	00000074 .hidden __eqsf2
0000f138 g     F .text	0000013c __d2b
0001a990 g     F .text	00000110 OSSemPost
00015930 g     F .text	000000d8 OSSchedUnlock
0001cf4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00020218 g     F .text	000000fc alt_get_fd
00024fa0 g     O .bss	00000004 OSMemFreeList
00015a74 g     F .text	000000ac OSStatInit
000182f4 g     F .text	000000c4 OSFlagQuery
00022ff8 g     O .rwdata	00000002 OSTaskCreateExtEn
00012370 g     F .text	00000054 _close_r
00020488 g     F .text	0000007c memcmp
00015d5c g     F .text	0000001c OS_Dummy
0001d00c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002c328 g       *ABS*	00000000 __alt_stack_base
0001d05c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00024f34 g     O .bss	00000004 rotation
0001e240 g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000b3e4 g     F .text	00000154 __swsetup_r
0002a7a4 g     O .bss	000001e0 OSQTbl
0001375c g     F .text	000008cc .hidden __divdf3
0000d314 g     F .text	00000118 __sfp
0000f38c g     F .text	00000078 __copybits
00021140 g     O .rwdata	00000408 __malloc_av_
0000d460 g     F .text	00000004 __sinit_lock_release
00024fa4 g     O .bss	00000004 OSTCBHighRdy
000053f0 g     F .text	00000724 .hidden __muldf3
0000fa6c g     F .text	00000054 __sread
00024fa8 g     O .bss	00000004 OSQFreeList
0001ecd4 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00020104 g     F .text	00000114 alt_find_file
0001f49c g     F .text	000000a4 alt_dev_llist_insert
00014c88 g     F .text	00000120 __malloc_lock
00014974 g     F .text	000000b0 sbrk
00007424 g     F .text	00001f90 ___svfprintf_internal_r
00014f98 g     F .text	0000013c OSEventNameSet
0000d068 g     F .text	0000005c _fflush_r
000123c4 g     F .text	000000c4 _calloc_r
00024fac g     O .bss	00000001 OSRdyGrp
00024f30 g       *ABS*	00000000 __bss_start
0000e3cc g     F .text	00000124 memset
000021cc g     F .text	0000016c main
00024f68 g     O .bss	00000004 alt_envp
00024f40 g     O .bss	00000004 __malloc_max_total_mem
0001f088 g     F .text	00000040 alt_up_char_buffer_open_dev
0001cfac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012a08 g     F .text	0000001c __swbuf
00020e70 g     O .rodata	00000100 OSUnMapTbl
0000478c g     F .text	000000b8 .hidden __ltsf2
00022ff2 g     O .rwdata	00000002 OSSemEn
0001e03c g     F .text	00000088 alt_up_character_lcd_shift_cursor
00017f6c g     F .text	00000388 OSFlagPost
0000fba0 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00012578 g     F .text	00000014 fclose
00015f10 g     F .text	0000010c OS_EventTaskWait
00027004 g     O .bss	00002000 task2_stk
0001ea54 g     F .text	00000070 alt_up_ps2_read_data_byte
0000664c g     F .text	00000198 .hidden __truncdfsf2
00016acc g     F .text	000000c8 OS_TaskStatStkChk
0001b974 g     F .text	00000158 OSTaskDelReq
0000b738 g     F .text	00001728 _dtoa_r
00006870 g     F .text	000007a8 _malloc_r
00012b80 g     F .text	00000030 __ascii_wctomb
00022fa8 g     O .rwdata	00000004 alt_errno
00015a08 g     F .text	0000006c OSStart
00014c2c g     F .text	0000005c __env_unlock
0000dd68 g     F .text	000000c4 _fwalk
0001be34 g     F .text	000001f8 OSTaskResume
00018ddc g     F .text	000000e8 OSMemQuery
00023004 g     O .rwdata	00000002 OSTaskStatEn
0001e3b4 g     F .text	00000040 alt_up_irda_write_data
00022fde g     O .rwdata	00000002 OSMemMax
00019c20 g     F .text	00000170 OSQPostFront
0001ec3c g     F .text	00000040 alt_up_ps2_open_dev
000045a0 g     F .text	00000054 .hidden __divsi3
00024fad g     O .bss	00000003 OSRdyTbl
00022fb8 g     O .rwdata	00000002 OSDebugEn
0001de4c g     F .text	00000040 alt_up_character_lcd_open_dev
0000d494 g     F .text	00000124 _malloc_trim_r
0001e7b4 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
000207e8 g       *ABS*	00000000 __CTOR_END__
00022fd0 g     O .rwdata	00000002 OSFlagNodeSize
00023018 g     O .rwdata	00000002 OSTmrCfgMax
0001de18 g     F .text	00000034 alt_up_character_lcd_init
0000fba8 g     F .text	000000a4 strcmp
000190d4 g     F .text	000001fc OSQCreate
0001bacc g     F .text	000001a8 OSTaskNameGet
000207e8 g       *ABS*	00000000 __flash_rodata_start
00019d90 g     F .text	0000020c OSQPostOpt
00015b20 g     F .text	0000021c OSTimeTick
00023000 g     O .rwdata	00000002 OSTaskMax
000207e8 g       *ABS*	00000000 __DTOR_LIST__
0001a254 g     F .text	00000100 OSSemCreate
00023024 g     O .rwdata	00000002 OSTmrWheelSize
0001efc8 g     F .text	00000040 alt_up_rs232_open_dev
00004518 g     F .text	0000001c copysign
0000528c g     F .text	00000084 .hidden __nedf2
00022ffa g     O .rwdata	00000002 OSTaskDelEn
0001aaa0 g     F .text	00000110 OSSemQuery
000192d0 g     F .text	000002c8 OSQDel
0001994c g     F .text	0000016c OSQPendAbort
0001cb40 g     F .text	00000034 alt_irq_init
00000498 g     F .text	000003d4 drawLine
00014914 g     F .text	00000060 alt_release_fd
0001e690 g     F .text	00000034 read_data_valid
00007320 g     F .text	0000006c sprintf
0001e1d8 g     F .text	00000034 alt_up_character_lcd_cursor_off
00020b48 g     O .rodata	00000100 .hidden __clz_tab
00024f50 g     O .bss	00000004 _PathLocale
0001e94c g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0002043c g     F .text	00000014 atexit
000046d4 g     F .text	000000b8 .hidden __gesf2
00012314 g     F .text	0000005c _write_r
000158a8 g     F .text	00000088 OSSchedLock
0000dfa8 g     F .text	0000001c setlocale
000172fc g     F .text	00000128 OSFlagCreate
00022f88 g     O .rwdata	00000004 _impure_ptr
00024f60 g     O .bss	00000004 alt_argc
0000ce60 g     F .text	00000208 __sflush_r
0000434c g     F .text	000001cc scalbn
0001f59c g     F .text	0000005c _do_dtors
0000df94 g     F .text	00000008 __locale_cjk_lang
00022fca g     O .rwdata	00000002 OSEventMultiEn
00017424 g     F .text	00000270 OSFlagDel
00024fb0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000efbc g     F .text	00000060 __ulp
00017914 g     F .text	000005f0 OSFlagPend
00023016 g     O .rwdata	00000002 OSTmrEn
0000d47c g     F .text	00000018 __fp_unlock_all
00022f94 g     O .rwdata	00000008 alt_fs_list
000168cc g     F .text	00000074 OS_StrCopy
0001ec7c g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001edf0 g     F .text	00000040 alt_up_rs232_write_data
000003c4 g     F .text	00000070 drawPixel
00022fe0 g     O .rwdata	00000002 OSMemNameSize
000200ac g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0002300c g     O .rwdata	00000002 OSTCBPrioTblMax
0000dfc4 g     F .text	0000000c localeconv
00023008 g     O .rwdata	00000002 OSTaskStatStkChkEn
00022fdc g     O .rwdata	00000002 OSMemEn
00022fe6 g     O .rwdata	00000002 OSMutexEn
00023038 g       *ABS*	00000000 _edata
0002c328 g       *ABS*	00000000 _end
00024fb4 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001d610 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001c850 g     F .text	000001f0 OSTimeDlyResume
000177c4 g     F .text	00000150 OSFlagNameSet
0001c02c g     F .text	000001c8 OSTaskStkChk
00022fe2 g     O .rwdata	00000002 OSMemSize
0000fac8 g     F .text	0000007c __swrite
00022f80 g     O .rwdata	00000004 __malloc_trim_threshold
00024f38 g     O .bss	00000004 sem_objectDrawn
0000df88 g     F .text	0000000c __locale_msgcharset
00024fb8 g     O .bss	00000004 OSTCBCur
00020450 g     F .text	00000038 exit
0001e3f4 g     F .text	00000074 alt_up_irda_read_data
00022fe4 g     O .rwdata	00000002 OSMemTblSize
0000de2c g     F .text	000000c4 _fwalk_reent
0001e6f0 g     F .text	000000c4 alt_up_ps2_init
0000ee24 g     F .text	00000198 __mdiff
000045f4 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000d458 g     F .text	00000004 __sfp_lock_release
000156e4 g     F .text	00000054 OSInit
0001c408 g     F .text	0000012c OSTaskQuery
0001df04 g     F .text	00000074 alt_up_character_lcd_string
0001a0f8 g     F .text	000000ac OS_QInit
00016940 g     F .text	00000054 OS_StrLen
0001e588 g     F .text	00000040 alt_up_irda_open_dev
00018bec g     F .text	00000118 OSMemNameSet
00022ffe g     O .rwdata	00000002 OSTaskProfileEn
00024fbc g     O .bss	00000004 OSTime
0002a984 g     O .bss	00000800 OSTaskIdleStk
000207ac g     F .text	0000003c _exit
0001f2f0 g     F .text	00000140 alt_alarm_start
00017694 g     F .text	00000130 OSFlagNameGet
0001ca40 g     F .text	00000064 OSTimeGet
0000dfd0 g     F .text	000001b8 __smakebuf_r
0001e8dc g     F .text	00000070 alt_up_ps2_wait_for_ack
0000738c g     F .text	00000098 strlen
0002003c g     F .text	0000001c OSTaskSwHook
0001fabc g     F .text	00000158 open
0002b184 g     O .bss	00000b40 OSEventTbl
00005310 g     F .text	000000e0 .hidden __gedf2
0002bcc4 g     O .bss	00000510 OSTCBTbl
0001abb0 g     F .text	000000fc OSSemSet
00022f90 g     O .rwdata	00000004 __wctomb
00010f4c g     F .text	00000018 __sprint_r
0001f688 g     F .text	00000030 alt_icache_flush_all
00024f3c g     O .bss	00000004 zoomscreenpointer
0001dfc8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0002302c g     O .rwdata	00000004 alt_priority_mask
0001a354 g     F .text	00000268 OSSemDel
00024fc0 g     O .bss	00000004 OSFlagFreeList
00022fc4 g     O .rwdata	00000002 OSEventNameSize
0000b304 g     F .text	00000024 __vfprintf_internal
00024fc4 g     O .bss	00000001 OSStatRdy
0002c1d4 g     O .bss	00000054 OSTCBPrioTbl
00012bb0 g     F .text	0000005c _wctomb_r
00014b6c g     F .text	000000c0 __env_lock
0001eb18 g     F .text	0000008c alt_up_ps2_read_fd
0002300a g     O .rwdata	00000002 OSTaskSwHookEn
00005b14 g     F .text	000008d0 .hidden __subdf3
0001e468 g     F .text	00000090 alt_up_irda_read_fd
0000e84c g     F .text	000000b0 __lo0bits
00023030 g     O .rwdata	00000008 alt_alarm_list
00022fd2 g     O .rwdata	00000002 OSFlagWidth
0001f540 g     F .text	0000005c _do_ctors
0001ed30 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00012ac0 g     F .text	000000c0 wcrtomb
000141fc g     F .text	000000d0 close
00024f70 g     O .bss	00000004 alt_envsem
00024fc8 g     O .bss	00000004 OSIdleCtrRun
00015d3c g     F .text	00000020 OSVersion
0002301c g     O .rwdata	00000002 OSTmrCfgWheelSize
00014550 g     F .text	00000080 alt_load
0001c534 g     F .text	0000006c OS_TaskStkClr
00022ff6 g     O .rwdata	00000002 OSTaskCreateEn
00016318 g     F .text	00000064 OS_EventWaitListInit
00012710 g     F .text	0000005c fputwc
000200c8 g     F .text	0000001c OSTaskIdleHook
0000685c g     F .text	00000014 free
0000d45c g     F .text	00000004 __sinit_lock_acquire
0000e5c0 g     F .text	00000120 __multadd
0001c1f4 g     F .text	00000214 OSTaskSuspend
0000e598 g     F .text	00000028 _Bfree
00016994 g     F .text	0000005c OS_TaskIdle
00023022 g     O .rwdata	00000002 OSTmrTblSize
00019f9c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00157380 	call	15738 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10b08a04 	addi	r2,r2,-15832
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b08a04 	addi	r2,r2,-15832
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00157b40 	call	157b4 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a81717 	ldw	r2,-24484(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a81717 	ldw	r2,-24484(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6abdf14 	ori	gp,gp,44924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	1093cc14 	ori	r2,r2,20272

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18f0ca14 	ori	r3,r3,49960

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00145500 	call	14550 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00146f40 	call	146f4 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <VGA_text>:
float *zoomscreenpointer;
/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
     280:	defffa04 	addi	sp,sp,-24
     284:	df000515 	stw	fp,20(sp)
     288:	df000504 	addi	fp,sp,20
     28c:	e13ffd15 	stw	r4,-12(fp)
     290:	e17ffe15 	stw	r5,-8(fp)
     294:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
     298:	00824034 	movhi	r2,2304
     29c:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     2a0:	e0bffe17 	ldw	r2,-8(fp)
     2a4:	100691fa 	slli	r3,r2,7
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	1885883a 	add	r2,r3,r2
     2b0:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
     2b4:	00000c06 	br	2e8 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     2b8:	e0bffb17 	ldw	r2,-20(fp)
     2bc:	e0fffc17 	ldw	r3,-16(fp)
     2c0:	1885883a 	add	r2,r3,r2
     2c4:	e0ffff17 	ldw	r3,-4(fp)
     2c8:	18c00003 	ldbu	r3,0(r3)
     2cc:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     2dc:	e0bffb17 	ldw	r2,-20(fp)
     2e0:	10800044 	addi	r2,r2,1
     2e4:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     2e8:	e0bfff17 	ldw	r2,-4(fp)
     2ec:	10800003 	ldbu	r2,0(r2)
     2f0:	10803fcc 	andi	r2,r2,255
     2f4:	1080201c 	xori	r2,r2,128
     2f8:	10bfe004 	addi	r2,r2,-128
     2fc:	103fee1e 	bne	r2,zero,2b8 <__alt_mem_Flash_flash_data+0xf40002b8>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     300:	e037883a 	mov	sp,fp
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00104 	addi	sp,sp,4
     30c:	f800283a 	ret

00000310 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     310:	defff604 	addi	sp,sp,-40
     314:	df000915 	stw	fp,36(sp)
     318:	df000904 	addi	fp,sp,36
     31c:	e13ffb15 	stw	r4,-20(fp)
     320:	e17ffc15 	stw	r5,-16(fp)
     324:	e1bffd15 	stw	r6,-12(fp)
     328:	e1fffe15 	stw	r7,-8(fp)
     32c:	e0800117 	ldw	r2,4(fp)
     330:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     334:	00820034 	movhi	r2,2048
     338:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     33c:	e0bffc17 	ldw	r2,-16(fp)
     340:	e0bff715 	stw	r2,-36(fp)
     344:	00001806 	br	3a8 <VGA_box+0x98>
	{
		col = x1;
     348:	e0bffb17 	ldw	r2,-20(fp)
     34c:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     350:	00000f06 	br	390 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     354:	e0bff717 	ldw	r2,-36(fp)
     358:	1006927a 	slli	r3,r2,9
     35c:	e0bff817 	ldw	r2,-32(fp)
     360:	1885883a 	add	r2,r3,r2
     364:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     368:	e0bffa17 	ldw	r2,-24(fp)
     36c:	1085883a 	add	r2,r2,r2
     370:	1007883a 	mov	r3,r2
     374:	e0bff917 	ldw	r2,-28(fp)
     378:	10c5883a 	add	r2,r2,r3
     37c:	e0ffff0b 	ldhu	r3,-4(fp)
     380:	10c0000d 	sth	r3,0(r2)
			++col;
     384:	e0bff817 	ldw	r2,-32(fp)
     388:	10800044 	addi	r2,r2,1
     38c:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     390:	e0bff817 	ldw	r2,-32(fp)
     394:	e0fffd17 	ldw	r3,-12(fp)
     398:	18bfee0e 	bge	r3,r2,354 <__alt_mem_Flash_flash_data+0xf4000354>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     39c:	e0bff717 	ldw	r2,-36(fp)
     3a0:	10800044 	addi	r2,r2,1
     3a4:	e0bff715 	stw	r2,-36(fp)
     3a8:	e0bff717 	ldw	r2,-36(fp)
     3ac:	e0fffe17 	ldw	r3,-8(fp)
     3b0:	18bfe50e 	bge	r3,r2,348 <__alt_mem_Flash_flash_data+0xf4000348>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     3b4:	e037883a 	mov	sp,fp
     3b8:	df000017 	ldw	fp,0(sp)
     3bc:	dec00104 	addi	sp,sp,4
     3c0:	f800283a 	ret

000003c4 <drawPixel>:

void drawPixel(int x, int y, int size, short pixel_color )
{
     3c4:	defff904 	addi	sp,sp,-28
     3c8:	dfc00615 	stw	ra,24(sp)
     3cc:	df000515 	stw	fp,20(sp)
     3d0:	df000504 	addi	fp,sp,20
     3d4:	e13ffc15 	stw	r4,-16(fp)
     3d8:	e17ffd15 	stw	r5,-12(fp)
     3dc:	e1bffe15 	stw	r6,-8(fp)
     3e0:	3805883a 	mov	r2,r7
     3e4:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box (x, y, x + size - 1, y + size - 1, pixel_color);
     3e8:	e0fffc17 	ldw	r3,-16(fp)
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	11bfffc4 	addi	r6,r2,-1
     3f8:	e0fffd17 	ldw	r3,-12(fp)
     3fc:	e0bffe17 	ldw	r2,-8(fp)
     400:	1885883a 	add	r2,r3,r2
     404:	10ffffc4 	addi	r3,r2,-1
     408:	e0bfff0f 	ldh	r2,-4(fp)
     40c:	d8800015 	stw	r2,0(sp)
     410:	e13ffc17 	ldw	r4,-16(fp)
     414:	e17ffd17 	ldw	r5,-12(fp)
     418:	180f883a 	mov	r7,r3
     41c:	00003100 	call	310 <VGA_box>
}
     420:	e037883a 	mov	sp,fp
     424:	dfc00117 	ldw	ra,4(sp)
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00204 	addi	sp,sp,8
     430:	f800283a 	ret

00000434 <removePixel>:

void removePixel(int x, int y, int size)
{
     434:	defffa04 	addi	sp,sp,-24
     438:	dfc00515 	stw	ra,20(sp)
     43c:	df000415 	stw	fp,16(sp)
     440:	df000404 	addi	fp,sp,16
     444:	e13ffd15 	stw	r4,-12(fp)
     448:	e17ffe15 	stw	r5,-8(fp)
     44c:	e1bfff15 	stw	r6,-4(fp)
	VGA_box (x, y, x +(size - 1), y + (size - 1), 0x0000);
     450:	e0bfff17 	ldw	r2,-4(fp)
     454:	10ffffc4 	addi	r3,r2,-1
     458:	e0bffd17 	ldw	r2,-12(fp)
     45c:	188d883a 	add	r6,r3,r2
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	10ffffc4 	addi	r3,r2,-1
     468:	e0bffe17 	ldw	r2,-8(fp)
     46c:	1885883a 	add	r2,r3,r2
     470:	d8000015 	stw	zero,0(sp)
     474:	e13ffd17 	ldw	r4,-12(fp)
     478:	e17ffe17 	ldw	r5,-8(fp)
     47c:	100f883a 	mov	r7,r2
     480:	00003100 	call	310 <VGA_box>
}
     484:	e037883a 	mov	sp,fp
     488:	dfc00117 	ldw	ra,4(sp)
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00204 	addi	sp,sp,8
     494:	f800283a 	ret

00000498 <drawLine>:


void drawLine(float x1, float y1, float x2, float y2, float midX, float midY, int size, int remove, short pixel_color)
{
     498:	deffe904 	addi	sp,sp,-92
     49c:	dfc01615 	stw	ra,88(sp)
     4a0:	df001515 	stw	fp,84(sp)
     4a4:	dc001415 	stw	r16,80(sp)
     4a8:	df001504 	addi	fp,sp,84
     4ac:	e13ffa15 	stw	r4,-24(fp)
     4b0:	e17ffb15 	stw	r5,-20(fp)
     4b4:	e1bffc15 	stw	r6,-16(fp)
     4b8:	e1fffd15 	stw	r7,-12(fp)
     4bc:	e0800617 	ldw	r2,24(fp)
     4c0:	e0bffe0d 	sth	r2,-8(fp)
    y1 = y1 * -1;
     4c4:	e0bffb17 	ldw	r2,-20(fp)
     4c8:	10a0003c 	xorhi	r2,r2,32768
     4cc:	e0bffb15 	stw	r2,-20(fp)
    y2 = y2 * -1;
     4d0:	e0bffd17 	ldw	r2,-12(fp)
     4d4:	10a0003c 	xorhi	r2,r2,32768
     4d8:	e0bffd15 	stw	r2,-12(fp)

    x1 = x1 + midX;
     4dc:	e0fffa17 	ldw	r3,-24(fp)
     4e0:	e0800217 	ldw	r2,8(fp)
     4e4:	1885ff72 	custom	253,r2,r3,r2
     4e8:	e0bffa15 	stw	r2,-24(fp)
    x2 = x2 + midX;
     4ec:	e0fffc17 	ldw	r3,-16(fp)
     4f0:	e0800217 	ldw	r2,8(fp)
     4f4:	1885ff72 	custom	253,r2,r3,r2
     4f8:	e0bffc15 	stw	r2,-16(fp)
    y1 = y1 + midY;
     4fc:	e0fffb17 	ldw	r3,-20(fp)
     500:	e0800317 	ldw	r2,12(fp)
     504:	1885ff72 	custom	253,r2,r3,r2
     508:	e0bffb15 	stw	r2,-20(fp)
    y2 = y2 + midY;
     50c:	e0fffd17 	ldw	r3,-12(fp)
     510:	e0800317 	ldw	r2,12(fp)
     514:	1885ff72 	custom	253,r2,r3,r2
     518:	e0bffd15 	stw	r2,-12(fp)


    //switch points when first point is behind second point on x axel
    if (x2 < x1)
     51c:	e13ffc17 	ldw	r4,-16(fp)
     520:	e17ffa17 	ldw	r5,-24(fp)
     524:	000478c0 	call	478c <__lesf2>
     528:	10000c0e 	bge	r2,zero,55c <drawLine+0xc4>
    {
        float tempX = x1;
     52c:	e0bffa17 	ldw	r2,-24(fp)
     530:	e0bff215 	stw	r2,-56(fp)
        float tempY = y1;
     534:	e0bffb17 	ldw	r2,-20(fp)
     538:	e0bff315 	stw	r2,-52(fp)
        x1 = x2;
     53c:	e0bffc17 	ldw	r2,-16(fp)
     540:	e0bffa15 	stw	r2,-24(fp)
        y1 = y2;
     544:	e0bffd17 	ldw	r2,-12(fp)
     548:	e0bffb15 	stw	r2,-20(fp)

        x2 = tempX;
     54c:	e0bff217 	ldw	r2,-56(fp)
     550:	e0bffc15 	stw	r2,-16(fp)
        y2 = tempY;
     554:	e0bff317 	ldw	r2,-52(fp)
     558:	e0bffd15 	stw	r2,-12(fp)
    }

    //setup vars for loop
    float x = 0;
     55c:	e03feb15 	stw	zero,-84(fp)
    float y = 0;
     560:	e03fec15 	stw	zero,-80(fp)
    float prevY = 0;
     564:	e03fed15 	stw	zero,-76(fp)
    float prevX = 0;
     568:	e03fee15 	stw	zero,-72(fp)
    //for loop for drawing beam
    for (x = x1; x <= x2; x++)
     56c:	e0bffa17 	ldw	r2,-24(fp)
     570:	e0bfeb15 	stw	r2,-84(fp)
     574:	0000b306 	br	844 <drawLine+0x3ac>
    {
    		y = 0;
     578:	e03fec15 	stw	zero,-80(fp)
            //formula for drawing beam between nodes
			if ((x2 - x1) == 0)
     57c:	e0fffc17 	ldw	r3,-16(fp)
     580:	e0bffa17 	ldw	r2,-24(fp)
     584:	1885ffb2 	custom	254,r2,r3,r2
     588:	1009883a 	mov	r4,r2
     58c:	000b883a 	mov	r5,zero
     590:	00046600 	call	4660 <__eqsf2>
     594:	10002e1e 	bne	r2,zero,650 <drawLine+0x1b8>
			{
                float count;

                if (y2 > y1)
     598:	e13ffd17 	ldw	r4,-12(fp)
     59c:	e17ffb17 	ldw	r5,-20(fp)
     5a0:	00046d40 	call	46d4 <__gesf2>
     5a4:	0080060e 	bge	zero,r2,5c0 <drawLine+0x128>
                {
                    float tempY = y1;
     5a8:	e0bffb17 	ldw	r2,-20(fp)
     5ac:	e0bff415 	stw	r2,-48(fp)
                    y1 = y2;
     5b0:	e0bffd17 	ldw	r2,-12(fp)
     5b4:	e0bffb15 	stw	r2,-20(fp)
                    y2 = tempY;
     5b8:	e0bff417 	ldw	r2,-48(fp)
     5bc:	e0bffd15 	stw	r2,-12(fp)
                }
                for (count = y2; count <= y1; count++)
     5c0:	e0bffd17 	ldw	r2,-12(fp)
     5c4:	e0bfef15 	stw	r2,-68(fp)
     5c8:	00001c06 	br	63c <drawLine+0x1a4>
                {
                    if (!remove)
     5cc:	e0800517 	ldw	r2,20(fp)
     5d0:	10000d1e 	bne	r2,zero,608 <drawLine+0x170>
                    {
                        drawPixel((int)x, (int)count, size, pixel_color);
     5d4:	e13feb17 	ldw	r4,-84(fp)
     5d8:	00048440 	call	4844 <__fixsfsi>
     5dc:	1021883a 	mov	r16,r2
     5e0:	e13fef17 	ldw	r4,-68(fp)
     5e4:	00048440 	call	4844 <__fixsfsi>
     5e8:	1007883a 	mov	r3,r2
     5ec:	e0bffe0f 	ldh	r2,-8(fp)
     5f0:	8009883a 	mov	r4,r16
     5f4:	180b883a 	mov	r5,r3
     5f8:	e1800417 	ldw	r6,16(fp)
     5fc:	100f883a 	mov	r7,r2
     600:	00003c40 	call	3c4 <drawPixel>
     604:	00000906 	br	62c <drawLine+0x194>
                    }
                    else
                    {
                        removePixel((int)x, (int)count, size);
     608:	e13feb17 	ldw	r4,-84(fp)
     60c:	00048440 	call	4844 <__fixsfsi>
     610:	1021883a 	mov	r16,r2
     614:	e13fef17 	ldw	r4,-68(fp)
     618:	00048440 	call	4844 <__fixsfsi>
     61c:	8009883a 	mov	r4,r16
     620:	100b883a 	mov	r5,r2
     624:	e1800417 	ldw	r6,16(fp)
     628:	00004340 	call	434 <removePixel>
                {
                    float tempY = y1;
                    y1 = y2;
                    y2 = tempY;
                }
                for (count = y2; count <= y1; count++)
     62c:	e0ffef17 	ldw	r3,-68(fp)
     630:	008fe034 	movhi	r2,16256
     634:	1885ff72 	custom	253,r2,r3,r2
     638:	e0bfef15 	stw	r2,-68(fp)
     63c:	e13fef17 	ldw	r4,-68(fp)
     640:	e17ffb17 	ldw	r5,-20(fp)
     644:	000478c0 	call	478c <__lesf2>
     648:	00bfe00e 	bge	zero,r2,5cc <__alt_mem_Flash_flash_data+0xf40005cc>
     64c:	00001806 	br	6b0 <drawLine+0x218>
                }

            }
            else
            {
            	float a = y2 - y1;
     650:	e0fffd17 	ldw	r3,-12(fp)
     654:	e0bffb17 	ldw	r2,-20(fp)
     658:	1885ffb2 	custom	254,r2,r3,r2
     65c:	e0bff515 	stw	r2,-44(fp)
            	float b = x2 - x1;
     660:	e0fffc17 	ldw	r3,-16(fp)
     664:	e0bffa17 	ldw	r2,-24(fp)
     668:	1885ffb2 	custom	254,r2,r3,r2
     66c:	e0bff615 	stw	r2,-40(fp)
            	float c = a /b;
     670:	e0fff517 	ldw	r3,-44(fp)
     674:	e0bff617 	ldw	r2,-40(fp)
     678:	1885fff2 	custom	255,r2,r3,r2
     67c:	e0bff715 	stw	r2,-36(fp)
            	float d = x - x1;
     680:	e0ffeb17 	ldw	r3,-84(fp)
     684:	e0bffa17 	ldw	r2,-24(fp)
     688:	1885ffb2 	custom	254,r2,r3,r2
     68c:	e0bff815 	stw	r2,-32(fp)
            	float e = c * d;
     690:	e0fff717 	ldw	r3,-36(fp)
     694:	e0bff817 	ldw	r2,-32(fp)
     698:	1885ff32 	custom	252,r2,r3,r2
     69c:	e0bff915 	stw	r2,-28(fp)
                y = e + y1;
     6a0:	e0fff917 	ldw	r3,-28(fp)
     6a4:	e0bffb17 	ldw	r2,-20(fp)
     6a8:	1885ff72 	custom	253,r2,r3,r2
     6ac:	e0bfec15 	stw	r2,-80(fp)
            }

			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
     6b0:	e0ffec17 	ldw	r3,-80(fp)
     6b4:	e0bfed17 	ldw	r2,-76(fp)
     6b8:	1885ffb2 	custom	254,r2,r3,r2
     6bc:	1009883a 	mov	r4,r2
     6c0:	000b883a 	mov	r5,zero
     6c4:	00046d40 	call	46d4 <__gesf2>
     6c8:	0080280e 	bge	zero,r2,76c <drawLine+0x2d4>
     6cc:	e13feb17 	ldw	r4,-84(fp)
     6d0:	000b883a 	mov	r5,zero
     6d4:	00046600 	call	4660 <__eqsf2>
     6d8:	10002426 	beq	r2,zero,76c <drawLine+0x2d4>
			        {

			            float counter;
			            for (counter = prevY; counter <= y; counter++)
     6dc:	e0bfed17 	ldw	r2,-76(fp)
     6e0:	e0bff015 	stw	r2,-64(fp)
     6e4:	00001c06 	br	758 <drawLine+0x2c0>
			            {
			                if (!remove)
     6e8:	e0800517 	ldw	r2,20(fp)
     6ec:	10000d1e 	bne	r2,zero,724 <drawLine+0x28c>
			                {
			                    drawPixel((int)prevX, (int)counter, size, pixel_color);
     6f0:	e13fee17 	ldw	r4,-72(fp)
     6f4:	00048440 	call	4844 <__fixsfsi>
     6f8:	1021883a 	mov	r16,r2
     6fc:	e13ff017 	ldw	r4,-64(fp)
     700:	00048440 	call	4844 <__fixsfsi>
     704:	1007883a 	mov	r3,r2
     708:	e0bffe0f 	ldh	r2,-8(fp)
     70c:	8009883a 	mov	r4,r16
     710:	180b883a 	mov	r5,r3
     714:	e1800417 	ldw	r6,16(fp)
     718:	100f883a 	mov	r7,r2
     71c:	00003c40 	call	3c4 <drawPixel>
     720:	00000906 	br	748 <drawLine+0x2b0>
			                }
			                else
			                {
			                    removePixel((int)prevX, (int)counter, size);
     724:	e13fee17 	ldw	r4,-72(fp)
     728:	00048440 	call	4844 <__fixsfsi>
     72c:	1021883a 	mov	r16,r2
     730:	e13ff017 	ldw	r4,-64(fp)
     734:	00048440 	call	4844 <__fixsfsi>
     738:	8009883a 	mov	r4,r16
     73c:	100b883a 	mov	r5,r2
     740:	e1800417 	ldw	r6,16(fp)
     744:	00004340 	call	434 <removePixel>
			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
			        {

			            float counter;
			            for (counter = prevY; counter <= y; counter++)
     748:	e0fff017 	ldw	r3,-64(fp)
     74c:	008fe034 	movhi	r2,16256
     750:	1885ff72 	custom	253,r2,r3,r2
     754:	e0bff015 	stw	r2,-64(fp)
     758:	e13ff017 	ldw	r4,-64(fp)
     75c:	e17fec17 	ldw	r5,-80(fp)
     760:	000478c0 	call	478c <__lesf2>
     764:	00bfe00e 	bge	zero,r2,6e8 <__alt_mem_Flash_flash_data+0xf40006e8>
                y = e + y1;
            }

			 //drawing all pixels of beam between nodes
			        if (y - prevY > 0 && x != 0)
			        {
     768:	00002e06 	br	824 <drawLine+0x38c>
			                {
			                    removePixel((int)prevX, (int)counter, size);
			                }
			            }
			        }
			        else if (prevY - y > 0 && x != 0)
     76c:	e0ffed17 	ldw	r3,-76(fp)
     770:	e0bfec17 	ldw	r2,-80(fp)
     774:	1885ffb2 	custom	254,r2,r3,r2
     778:	1009883a 	mov	r4,r2
     77c:	000b883a 	mov	r5,zero
     780:	00046d40 	call	46d4 <__gesf2>
     784:	0080270e 	bge	zero,r2,824 <drawLine+0x38c>
     788:	e13feb17 	ldw	r4,-84(fp)
     78c:	000b883a 	mov	r5,zero
     790:	00046600 	call	4660 <__eqsf2>
     794:	10002326 	beq	r2,zero,824 <drawLine+0x38c>
			        {
			            float counter;
			            for (counter = y; counter <= prevY; counter++)
     798:	e0bfec17 	ldw	r2,-80(fp)
     79c:	e0bff115 	stw	r2,-60(fp)
     7a0:	00001c06 	br	814 <drawLine+0x37c>
			            {
			                if (!remove)
     7a4:	e0800517 	ldw	r2,20(fp)
     7a8:	10000d1e 	bne	r2,zero,7e0 <drawLine+0x348>
			                {
			                    drawPixel((int)prevX, (int)counter, size, pixel_color);
     7ac:	e13fee17 	ldw	r4,-72(fp)
     7b0:	00048440 	call	4844 <__fixsfsi>
     7b4:	1021883a 	mov	r16,r2
     7b8:	e13ff117 	ldw	r4,-60(fp)
     7bc:	00048440 	call	4844 <__fixsfsi>
     7c0:	1007883a 	mov	r3,r2
     7c4:	e0bffe0f 	ldh	r2,-8(fp)
     7c8:	8009883a 	mov	r4,r16
     7cc:	180b883a 	mov	r5,r3
     7d0:	e1800417 	ldw	r6,16(fp)
     7d4:	100f883a 	mov	r7,r2
     7d8:	00003c40 	call	3c4 <drawPixel>
     7dc:	00000906 	br	804 <drawLine+0x36c>
			                }
			                else
			                {
			                    removePixel((int)prevX, (int)counter, size);
     7e0:	e13fee17 	ldw	r4,-72(fp)
     7e4:	00048440 	call	4844 <__fixsfsi>
     7e8:	1021883a 	mov	r16,r2
     7ec:	e13ff117 	ldw	r4,-60(fp)
     7f0:	00048440 	call	4844 <__fixsfsi>
     7f4:	8009883a 	mov	r4,r16
     7f8:	100b883a 	mov	r5,r2
     7fc:	e1800417 	ldw	r6,16(fp)
     800:	00004340 	call	434 <removePixel>
			            }
			        }
			        else if (prevY - y > 0 && x != 0)
			        {
			            float counter;
			            for (counter = y; counter <= prevY; counter++)
     804:	e0fff117 	ldw	r3,-60(fp)
     808:	008fe034 	movhi	r2,16256
     80c:	1885ff72 	custom	253,r2,r3,r2
     810:	e0bff115 	stw	r2,-60(fp)
     814:	e13ff117 	ldw	r4,-60(fp)
     818:	e17fed17 	ldw	r5,-76(fp)
     81c:	000478c0 	call	478c <__lesf2>
     820:	00bfe00e 	bge	zero,r2,7a4 <__alt_mem_Flash_flash_data+0xf40007a4>
			                    removePixel((int)prevX, (int)counter, size);
			                }
			            }
			        }

			        prevY = y;
     824:	e0bfec17 	ldw	r2,-80(fp)
     828:	e0bfed15 	stw	r2,-76(fp)
			        prevX = x;
     82c:	e0bfeb17 	ldw	r2,-84(fp)
     830:	e0bfee15 	stw	r2,-72(fp)
    float x = 0;
    float y = 0;
    float prevY = 0;
    float prevX = 0;
    //for loop for drawing beam
    for (x = x1; x <= x2; x++)
     834:	e0ffeb17 	ldw	r3,-84(fp)
     838:	008fe034 	movhi	r2,16256
     83c:	1885ff72 	custom	253,r2,r3,r2
     840:	e0bfeb15 	stw	r2,-84(fp)
     844:	e13feb17 	ldw	r4,-84(fp)
     848:	e17ffc17 	ldw	r5,-16(fp)
     84c:	000478c0 	call	478c <__lesf2>
     850:	00bf490e 	bge	zero,r2,578 <__alt_mem_Flash_flash_data+0xf4000578>
			        prevY = y;
			        prevX = x;

        }

}
     854:	e6ffff04 	addi	sp,fp,-4
     858:	dfc00217 	ldw	ra,8(sp)
     85c:	df000117 	ldw	fp,4(sp)
     860:	dc000017 	ldw	r16,0(sp)
     864:	dec00304 	addi	sp,sp,12
     868:	f800283a 	ret

0000086c <task1>:

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     86c:	defff504 	addi	sp,sp,-44
     870:	dfc00a15 	stw	ra,40(sp)
     874:	df000915 	stw	fp,36(sp)
     878:	df000904 	addi	fp,sp,36
     87c:	e13fff15 	stw	r4,-4(fp)
  int KEY_value;
  while (1)
  {
	  printf("Start task Serial Input");
     880:	010000b4 	movhi	r4,2
     884:	2101fa04 	addi	r4,r4,2024
     888:	000717c0 	call	717c <printf>


	  	volatile int* JTAG_UART_ptr = (int*) 0x10001000; // JTAG UART address
     88c:	00840034 	movhi	r2,4096
     890:	10840004 	addi	r2,r2,4096
     894:	e0bffa15 	stw	r2,-24(fp)

	  						printf("Data is D");
	  					}
	  				}*/

	  		volatile int * KEY_ptr = (int *) 0x10000040;
     898:	00840034 	movhi	r2,4096
     89c:	10801004 	addi	r2,r2,64
     8a0:	e0bffb15 	stw	r2,-20(fp)
	  		KEY_value = *(KEY_ptr);
     8a4:	e0bffb17 	ldw	r2,-20(fp)
     8a8:	10800017 	ldw	r2,0(r2)
     8ac:	e0bffc15 	stw	r2,-16(fp)

	  		ALT_SEM_PEND(sem_objectDrawn, 0);
     8b0:	d0a7ef17 	ldw	r2,-24644(gp)
     8b4:	e0bffd15 	stw	r2,-12(fp)
     8b8:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
     8bc:	e0fffe0b 	ldhu	r3,-8(fp)
     8c0:	e0bffe84 	addi	r2,fp,-6
     8c4:	e13ffd17 	ldw	r4,-12(fp)
     8c8:	180b883a 	mov	r5,r3
     8cc:	100d883a 	mov	r6,r2
     8d0:	001a5bc0 	call	1a5bc <OSSemPend>

	  		int xRotation = rotation[0];
     8d4:	d0a7ee17 	ldw	r2,-24648(gp)
     8d8:	10800017 	ldw	r2,0(r2)
     8dc:	e0bff715 	stw	r2,-36(fp)
	  		int yRotation = rotation[1];
     8e0:	d0a7ee17 	ldw	r2,-24648(gp)
     8e4:	10800117 	ldw	r2,4(r2)
     8e8:	e0bff815 	stw	r2,-32(fp)
	  		float zoom = *zoomscreenpointer;
     8ec:	d0a7f017 	ldw	r2,-24640(gp)
     8f0:	10800017 	ldw	r2,0(r2)
     8f4:	e0bff915 	stw	r2,-28(fp)


	  		if (KEY_value & 0x1)					// check KEY0
     8f8:	e0bffc17 	ldw	r2,-16(fp)
     8fc:	1080004c 	andi	r2,r2,1
     900:	10000f26 	beq	r2,zero,940 <task1+0xd4>
			{

				yRotation = 0;
     904:	e03ff815 	stw	zero,-32(fp)
				rotation[1] = yRotation;
     908:	d0a7ee17 	ldw	r2,-24648(gp)
     90c:	10800104 	addi	r2,r2,4
     910:	e0fff817 	ldw	r3,-32(fp)
     914:	10c00015 	stw	r3,0(r2)
				xRotation = 0;
     918:	e03ff715 	stw	zero,-36(fp)
				rotation[0] = xRotation;
     91c:	d0a7ee17 	ldw	r2,-24648(gp)
     920:	e0fff717 	ldw	r3,-36(fp)
     924:	10c00015 	stw	r3,0(r2)
				zoom = 0.8;
     928:	008fd374 	movhi	r2,16205
     92c:	10b33344 	addi	r2,r2,-13107
     930:	e0bff915 	stw	r2,-28(fp)
				*zoomscreenpointer = zoom;
     934:	d0a7f017 	ldw	r2,-24640(gp)
     938:	e0fff917 	ldw	r3,-28(fp)
     93c:	10c00015 	stw	r3,0(r2)

			}
	  		if (KEY_value & 0x2)					// check KEY0
     940:	e0bffc17 	ldw	r2,-16(fp)
     944:	1080008c 	andi	r2,r2,2
     948:	10000b26 	beq	r2,zero,978 <task1+0x10c>
	  		{
	  			yRotation = yRotation + 1;
     94c:	e0bff817 	ldw	r2,-32(fp)
     950:	10800044 	addi	r2,r2,1
     954:	e0bff815 	stw	r2,-32(fp)
	  			if(yRotation > 359){
     958:	e0bff817 	ldw	r2,-32(fp)
     95c:	10805a10 	cmplti	r2,r2,360
     960:	1000011e 	bne	r2,zero,968 <task1+0xfc>
	  				yRotation = 0;
     964:	e03ff815 	stw	zero,-32(fp)
	  			}
	  			rotation[1] = yRotation;
     968:	d0a7ee17 	ldw	r2,-24648(gp)
     96c:	10800104 	addi	r2,r2,4
     970:	e0fff817 	ldw	r3,-32(fp)
     974:	10c00015 	stw	r3,0(r2)

	  		}
	  		if (KEY_value & 0x4)					// check KEY01
     978:	e0bffc17 	ldw	r2,-16(fp)
     97c:	1080010c 	andi	r2,r2,4
     980:	10000b26 	beq	r2,zero,9b0 <task1+0x144>
	  		{
	  			yRotation = yRotation - 1;
     984:	e0bff817 	ldw	r2,-32(fp)
     988:	10bfffc4 	addi	r2,r2,-1
     98c:	e0bff815 	stw	r2,-32(fp)
	  			if(yRotation < 1){
     990:	e0bff817 	ldw	r2,-32(fp)
     994:	00800216 	blt	zero,r2,9a0 <task1+0x134>
	  				yRotation = 360;
     998:	00805a04 	movi	r2,360
     99c:	e0bff815 	stw	r2,-32(fp)
	  			}
	  			rotation[1] = yRotation;
     9a0:	d0a7ee17 	ldw	r2,-24648(gp)
     9a4:	10800104 	addi	r2,r2,4
     9a8:	e0fff817 	ldw	r3,-32(fp)
     9ac:	10c00015 	stw	r3,0(r2)

	  		}
	  		if (KEY_value & 0x8)					// check KEY02
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	1080020c 	andi	r2,r2,8
     9b8:	10000a26 	beq	r2,zero,9e4 <task1+0x178>
	  		{
	  			xRotation = xRotation + 1;
     9bc:	e0bff717 	ldw	r2,-36(fp)
     9c0:	10800044 	addi	r2,r2,1
     9c4:	e0bff715 	stw	r2,-36(fp)
	  			if(xRotation > 359){
     9c8:	e0bff717 	ldw	r2,-36(fp)
     9cc:	10805a10 	cmplti	r2,r2,360
     9d0:	1000011e 	bne	r2,zero,9d8 <task1+0x16c>
	  				xRotation = 0;
     9d4:	e03ff715 	stw	zero,-36(fp)
	  			}
	  			rotation[0] = xRotation;
     9d8:	d0a7ee17 	ldw	r2,-24648(gp)
     9dc:	e0fff717 	ldw	r3,-36(fp)
     9e0:	10c00015 	stw	r3,0(r2)

	  		}
	  		if (KEY_value & 0x10)					// check KEY03
     9e4:	e0bffc17 	ldw	r2,-16(fp)
     9e8:	1080040c 	andi	r2,r2,16
     9ec:	10000a26 	beq	r2,zero,a18 <task1+0x1ac>
	  		{
	  			xRotation = xRotation - 1;
     9f0:	e0bff717 	ldw	r2,-36(fp)
     9f4:	10bfffc4 	addi	r2,r2,-1
     9f8:	e0bff715 	stw	r2,-36(fp)
	  			if(xRotation < 1){
     9fc:	e0bff717 	ldw	r2,-36(fp)
     a00:	00800216 	blt	zero,r2,a0c <task1+0x1a0>
	  				xRotation = 360;
     a04:	00805a04 	movi	r2,360
     a08:	e0bff715 	stw	r2,-36(fp)
	  			}
	  			rotation[0] = xRotation;
     a0c:	d0a7ee17 	ldw	r2,-24648(gp)
     a10:	e0fff717 	ldw	r3,-36(fp)
     a14:	10c00015 	stw	r3,0(r2)

	  		}

	  		if(KEY_value & 0x20000){
     a18:	e0bffc17 	ldw	r2,-16(fp)
     a1c:	108000ac 	andhi	r2,r2,2
     a20:	10000c26 	beq	r2,zero,a54 <task1+0x1e8>
	  			if(zoom < 1.5){
     a24:	e13ff917 	ldw	r4,-28(fp)
     a28:	014ff034 	movhi	r5,16320
     a2c:	000478c0 	call	478c <__lesf2>
     a30:	1000080e 	bge	r2,zero,a54 <task1+0x1e8>
		  			zoom = zoom + 0.01;
     a34:	e0fff917 	ldw	r3,-28(fp)
     a38:	008f0934 	movhi	r2,15396
     a3c:	10b5c284 	addi	r2,r2,-10486
     a40:	1885ff72 	custom	253,r2,r3,r2
     a44:	e0bff915 	stw	r2,-28(fp)
		  			*zoomscreenpointer = zoom;
     a48:	d0a7f017 	ldw	r2,-24640(gp)
     a4c:	e0fff917 	ldw	r3,-28(fp)
     a50:	10c00015 	stw	r3,0(r2)
	  			}
	  		}

	  		if(KEY_value & 0x10000){
     a54:	e0bffc17 	ldw	r2,-16(fp)
     a58:	1080006c 	andhi	r2,r2,1
     a5c:	10000d26 	beq	r2,zero,a94 <task1+0x228>
	  			if(zoom > 0.1){
     a60:	e13ff917 	ldw	r4,-28(fp)
     a64:	014f7374 	movhi	r5,15821
     a68:	29733344 	addi	r5,r5,-13107
     a6c:	00046d40 	call	46d4 <__gesf2>
     a70:	0080080e 	bge	zero,r2,a94 <task1+0x228>
					zoom = zoom - 0.01;
     a74:	e0fff917 	ldw	r3,-28(fp)
     a78:	008f0934 	movhi	r2,15396
     a7c:	10b5c284 	addi	r2,r2,-10486
     a80:	1885ffb2 	custom	254,r2,r3,r2
     a84:	e0bff915 	stw	r2,-28(fp)
					*zoomscreenpointer = zoom;
     a88:	d0a7f017 	ldw	r2,-24640(gp)
     a8c:	e0fff917 	ldw	r3,-28(fp)
     a90:	10c00015 	stw	r3,0(r2)
	  			}
			}
	  		ALT_SEM_POST(sem_objectDrawn);
     a94:	d0a7ef17 	ldw	r2,-24644(gp)
     a98:	1009883a 	mov	r4,r2
     a9c:	001a9900 	call	1a990 <OSSemPost>
	  		OSTimeDlyHMSM(0,0,0,100);
     aa0:	0009883a 	mov	r4,zero
     aa4:	000b883a 	mov	r5,zero
     aa8:	000d883a 	mov	r6,zero
     aac:	01c01904 	movi	r7,100
     ab0:	001c6e80 	call	1c6e8 <OSTimeDlyHMSM>
	  	}
     ab4:	003f7806 	br	898 <__alt_mem_Flash_flash_data+0xf4000898>

00000ab8 <task2>:
}


/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     ab8:	deff1004 	addi	sp,sp,-960
     abc:	dfc0ef15 	stw	ra,956(sp)
     ac0:	df00ee15 	stw	fp,952(sp)
     ac4:	ddc0ed15 	stw	r23,948(sp)
     ac8:	dd80ec15 	stw	r22,944(sp)
     acc:	dd40eb15 	stw	r21,940(sp)
     ad0:	dd00ea15 	stw	r20,936(sp)
     ad4:	dcc0e915 	stw	r19,932(sp)
     ad8:	dc80e815 	stw	r18,928(sp)
     adc:	dc40e715 	stw	r17,924(sp)
     ae0:	dc00e615 	stw	r16,920(sp)
     ae4:	df00ee04 	addi	fp,sp,952
     ae8:	e13f8b15 	stw	r4,-468(fp)
	printf("Start task draw 3D");
     aec:	010000b4 	movhi	r4,2
     af0:	21020004 	addi	r4,r4,2048
     af4:	000717c0 	call	717c <printf>
	VGA_box (0, 0, 319, 239, 0);
     af8:	d8000015 	stw	zero,0(sp)
     afc:	0009883a 	mov	r4,zero
     b00:	000b883a 	mov	r5,zero
     b04:	01804fc4 	movi	r6,319
     b08:	01c03bc4 	movi	r7,239
     b0c:	00003100 	call	310 <VGA_box>
		int midX = 320/2;
     b10:	00802804 	movi	r2,160
     b14:	e0bf1c15 	stw	r2,-912(fp)
		int midY = 240/2;
     b18:	00801e04 	movi	r2,120
     b1c:	e0bf1d15 	stw	r2,-908(fp)
		short color = 0x0F00;
     b20:	0083c004 	movi	r2,3840
     b24:	e0bf1e0d 	sth	r2,-904(fp)
		float prevousZoomScreenBR = 0;
     b28:	e03f1715 	stw	zero,-932(fp)
		int previousXRotation = 0;
     b2c:	e03f1815 	stw	zero,-928(fp)
		int previousYRotation = 0;
     b30:	e03f1915 	stw	zero,-924(fp)
		int i;
		int firstReadDone = 0;
     b34:	e03f1f15 	stw	zero,-900(fp)


		char text_top_row[40];
		char text_bottom_row[40];
		char text_bottom_row2[40];
		char text_bottom_row3[40] = "SOFTWARE MODE \0";
     b38:	008000b4 	movhi	r2,2
     b3c:	10821e04 	addi	r2,r2,2168
     b40:	10c00017 	ldw	r3,0(r2)
     b44:	e0ff8015 	stw	r3,-512(fp)
     b48:	10c00117 	ldw	r3,4(r2)
     b4c:	e0ff8115 	stw	r3,-508(fp)
     b50:	10c00217 	ldw	r3,8(r2)
     b54:	e0ff8215 	stw	r3,-504(fp)
     b58:	10800317 	ldw	r2,12(r2)
     b5c:	e0bf8315 	stw	r2,-500(fp)
     b60:	e03f8415 	stw	zero,-496(fp)
     b64:	e03f8515 	stw	zero,-492(fp)
     b68:	e03f8615 	stw	zero,-488(fp)
     b6c:	e03f8715 	stw	zero,-484(fp)
     b70:	e03f8815 	stw	zero,-480(fp)
     b74:	e03f8915 	stw	zero,-476(fp)
		sprintf(text_top_row, "3D amount of lines: %d", 8);
     b78:	e0bf6204 	addi	r2,fp,-632
     b7c:	1009883a 	mov	r4,r2
     b80:	014000b4 	movhi	r5,2
     b84:	29420504 	addi	r5,r5,2068
     b88:	01800204 	movi	r6,8
     b8c:	00073200 	call	7320 <sprintf>
		VGA_text (1, 1, text_top_row);
     b90:	e0bf6204 	addi	r2,fp,-632
     b94:	01000044 	movi	r4,1
     b98:	01400044 	movi	r5,1
     b9c:	100d883a 	mov	r6,r2
     ba0:	00002800 	call	280 <VGA_text>
		VGA_text (1, 4, text_bottom_row3);
     ba4:	e0bf8004 	addi	r2,fp,-512
     ba8:	01000044 	movi	r4,1
     bac:	01400104 	movi	r5,4
     bb0:	100d883a 	mov	r6,r2
     bb4:	00002800 	call	280 <VGA_text>

		while(1){

			OSTimeDlyHMSM(0,0,0,1);
     bb8:	0009883a 	mov	r4,zero
     bbc:	000b883a 	mov	r5,zero
     bc0:	000d883a 	mov	r6,zero
     bc4:	01c00044 	movi	r7,1
     bc8:	001c6e80 	call	1c6e8 <OSTimeDlyHMSM>

			int linesDrawn;
			float startx = 0;
     bcc:	e03f2015 	stw	zero,-896(fp)
			float starty = 0;
     bd0:	e03f2115 	stw	zero,-892(fp)
			float startz = 0;
     bd4:	e03f2215 	stw	zero,-888(fp)
			float endx = 0;
     bd8:	e03f2315 	stw	zero,-884(fp)
			float endy = 0;
     bdc:	e03f2415 	stw	zero,-880(fp)
			float endz = 0;
     be0:	e03f2515 	stw	zero,-876(fp)

			ALT_SEM_PEND(sem_objectDrawn, 0);
     be4:	d0a7ef17 	ldw	r2,-24644(gp)
     be8:	e0bf3015 	stw	r2,-832(fp)
     bec:	e03f310d 	sth	zero,-828(fp)
     bf0:	e0ff310b 	ldhu	r3,-828(fp)
     bf4:	e0bf8a04 	addi	r2,fp,-472
     bf8:	e13f3017 	ldw	r4,-832(fp)
     bfc:	180b883a 	mov	r5,r3
     c00:	100d883a 	mov	r6,r2
     c04:	001a5bc0 	call	1a5bc <OSSemPend>

			int localRotationX = rotation[0];
     c08:	d0a7ee17 	ldw	r2,-24648(gp)
     c0c:	10800017 	ldw	r2,0(r2)
     c10:	e0bf2615 	stw	r2,-872(fp)
			int localRotationY = rotation[1];
     c14:	d0a7ee17 	ldw	r2,-24648(gp)
     c18:	10800117 	ldw	r2,4(r2)
     c1c:	e0bf2715 	stw	r2,-868(fp)
			float zoomscreen = *zoomscreenpointer;
     c20:	d0a7f017 	ldw	r2,-24640(gp)
     c24:	10800017 	ldw	r2,0(r2)
     c28:	e0bf2815 	stw	r2,-864(fp)
			VGA_text (1, 2, "                                          \0");
     c2c:	01000044 	movi	r4,1
     c30:	01400084 	movi	r5,2
     c34:	018000b4 	movhi	r6,2
     c38:	31820b04 	addi	r6,r6,2092
     c3c:	00002800 	call	280 <VGA_text>
			VGA_text (1, 3, "                                          \0");
     c40:	01000044 	movi	r4,1
     c44:	014000c4 	movi	r5,3
     c48:	018000b4 	movhi	r6,2
     c4c:	31820b04 	addi	r6,r6,2092
     c50:	00002800 	call	280 <VGA_text>

			sprintf(text_bottom_row, "Zoom: %f", zoomscreen);
     c54:	e13f2817 	ldw	r4,-864(fp)
     c58:	000653c0 	call	653c <__extendsfdf2>
     c5c:	100f883a 	mov	r7,r2
     c60:	1811883a 	mov	r8,r3
     c64:	e0bf6c04 	addi	r2,fp,-592
     c68:	1009883a 	mov	r4,r2
     c6c:	014000b4 	movhi	r5,2
     c70:	29421604 	addi	r5,r5,2136
     c74:	380d883a 	mov	r6,r7
     c78:	400f883a 	mov	r7,r8
     c7c:	00073200 	call	7320 <sprintf>
			VGA_text (1, 2, text_bottom_row);
     c80:	e0bf6c04 	addi	r2,fp,-592
     c84:	01000044 	movi	r4,1
     c88:	01400084 	movi	r5,2
     c8c:	100d883a 	mov	r6,r2
     c90:	00002800 	call	280 <VGA_text>
			sprintf(text_bottom_row2, "Rotation X,Y: %d,%d", rotation[0], rotation[1]);
     c94:	d0a7ee17 	ldw	r2,-24648(gp)
     c98:	10c00017 	ldw	r3,0(r2)
     c9c:	d0a7ee17 	ldw	r2,-24648(gp)
     ca0:	10800104 	addi	r2,r2,4
     ca4:	10800017 	ldw	r2,0(r2)
     ca8:	e13f7604 	addi	r4,fp,-552
     cac:	014000b4 	movhi	r5,2
     cb0:	29421904 	addi	r5,r5,2148
     cb4:	180d883a 	mov	r6,r3
     cb8:	100f883a 	mov	r7,r2
     cbc:	00073200 	call	7320 <sprintf>
			VGA_text (1, 3, text_bottom_row2);
     cc0:	e0bf7604 	addi	r2,fp,-552
     cc4:	01000044 	movi	r4,1
     cc8:	014000c4 	movi	r5,3
     ccc:	100d883a 	mov	r6,r2
     cd0:	00002800 	call	280 <VGA_text>

			for (linesDrawn = 0; linesDrawn < 8; linesDrawn++)
     cd4:	e03f1b15 	stw	zero,-916(fp)
     cd8:	00052b06 	br	2188 <task2+0x16d0>
			{

				for(i = 0;  i < 48; i++){
     cdc:	e03f1a15 	stw	zero,-920(fp)
     ce0:	00001006 	br	d24 <task2+0x26c>
					tempArray[i] = (startEndnodes)[i];
     ce4:	d0e7ed17 	ldw	r3,-24652(gp)
     ce8:	e0bf1a17 	ldw	r2,-920(fp)
     cec:	1085883a 	add	r2,r2,r2
     cf0:	1085883a 	add	r2,r2,r2
     cf4:	1885883a 	add	r2,r3,r2
     cf8:	10c00017 	ldw	r3,0(r2)
     cfc:	e0bf1a17 	ldw	r2,-920(fp)
     d00:	1085883a 	add	r2,r2,r2
     d04:	1085883a 	add	r2,r2,r2
     d08:	e13f1704 	addi	r4,fp,-932
     d0c:	2085883a 	add	r2,r4,r2
     d10:	10801b04 	addi	r2,r2,108
     d14:	10c00015 	stw	r3,0(r2)
			VGA_text (1, 3, text_bottom_row2);

			for (linesDrawn = 0; linesDrawn < 8; linesDrawn++)
			{

				for(i = 0;  i < 48; i++){
     d18:	e0bf1a17 	ldw	r2,-920(fp)
     d1c:	10800044 	addi	r2,r2,1
     d20:	e0bf1a15 	stw	r2,-920(fp)
     d24:	e0bf1a17 	ldw	r2,-920(fp)
     d28:	10800c10 	cmplti	r2,r2,48
     d2c:	103fed1e 	bne	r2,zero,ce4 <__alt_mem_Flash_flash_data+0xf4000ce4>
					tempArray[i] = (startEndnodes)[i];
				}
				startEndnodes = tempArray;
     d30:	e0bf3204 	addi	r2,fp,-824
     d34:	d0a7ed15 	stw	r2,-24652(gp)
				int indexOfArray = linesDrawn * 6;
     d38:	e0bf1b17 	ldw	r2,-916(fp)
     d3c:	108001a4 	muli	r2,r2,6
     d40:	e0bf2915 	stw	r2,-860(fp)
				float x1 = startx = (startEndnodes)[indexOfArray];
     d44:	d0e7ed17 	ldw	r3,-24652(gp)
     d48:	e0bf2917 	ldw	r2,-860(fp)
     d4c:	1085883a 	add	r2,r2,r2
     d50:	1085883a 	add	r2,r2,r2
     d54:	1885883a 	add	r2,r3,r2
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	1009883a 	mov	r4,r2
     d60:	00048bc0 	call	48bc <__floatsisf>
     d64:	1007883a 	mov	r3,r2
     d68:	e0ff2015 	stw	r3,-896(fp)
     d6c:	e0bf2017 	ldw	r2,-896(fp)
     d70:	e0bf2a15 	stw	r2,-856(fp)
				float y1 = starty = (startEndnodes)[indexOfArray + 1];
     d74:	d0e7ed17 	ldw	r3,-24652(gp)
     d78:	e0bf2917 	ldw	r2,-860(fp)
     d7c:	10800044 	addi	r2,r2,1
     d80:	1085883a 	add	r2,r2,r2
     d84:	1085883a 	add	r2,r2,r2
     d88:	1885883a 	add	r2,r3,r2
     d8c:	10800017 	ldw	r2,0(r2)
     d90:	1009883a 	mov	r4,r2
     d94:	00048bc0 	call	48bc <__floatsisf>
     d98:	1007883a 	mov	r3,r2
     d9c:	e0ff2115 	stw	r3,-892(fp)
     da0:	e0bf2117 	ldw	r2,-892(fp)
     da4:	e0bf2b15 	stw	r2,-852(fp)
				float z1 = startz = (startEndnodes)[indexOfArray + 2];
     da8:	d0e7ed17 	ldw	r3,-24652(gp)
     dac:	e0bf2917 	ldw	r2,-860(fp)
     db0:	10800084 	addi	r2,r2,2
     db4:	1085883a 	add	r2,r2,r2
     db8:	1085883a 	add	r2,r2,r2
     dbc:	1885883a 	add	r2,r3,r2
     dc0:	10800017 	ldw	r2,0(r2)
     dc4:	1009883a 	mov	r4,r2
     dc8:	00048bc0 	call	48bc <__floatsisf>
     dcc:	1007883a 	mov	r3,r2
     dd0:	e0ff2215 	stw	r3,-888(fp)
     dd4:	e0bf2217 	ldw	r2,-888(fp)
     dd8:	e0bf2c15 	stw	r2,-848(fp)


				float x2 = endx = (startEndnodes)[indexOfArray + 3];
     ddc:	d0e7ed17 	ldw	r3,-24652(gp)
     de0:	e0bf2917 	ldw	r2,-860(fp)
     de4:	108000c4 	addi	r2,r2,3
     de8:	1085883a 	add	r2,r2,r2
     dec:	1085883a 	add	r2,r2,r2
     df0:	1885883a 	add	r2,r3,r2
     df4:	10800017 	ldw	r2,0(r2)
     df8:	1009883a 	mov	r4,r2
     dfc:	00048bc0 	call	48bc <__floatsisf>
     e00:	1007883a 	mov	r3,r2
     e04:	e0ff2315 	stw	r3,-884(fp)
     e08:	e0bf2317 	ldw	r2,-884(fp)
     e0c:	e0bf2d15 	stw	r2,-844(fp)
				float y2 = endy = (startEndnodes)[indexOfArray + 4];
     e10:	d0e7ed17 	ldw	r3,-24652(gp)
     e14:	e0bf2917 	ldw	r2,-860(fp)
     e18:	10800104 	addi	r2,r2,4
     e1c:	1085883a 	add	r2,r2,r2
     e20:	1085883a 	add	r2,r2,r2
     e24:	1885883a 	add	r2,r3,r2
     e28:	10800017 	ldw	r2,0(r2)
     e2c:	1009883a 	mov	r4,r2
     e30:	00048bc0 	call	48bc <__floatsisf>
     e34:	1007883a 	mov	r3,r2
     e38:	e0ff2415 	stw	r3,-880(fp)
     e3c:	e0bf2417 	ldw	r2,-880(fp)
     e40:	e0bf2e15 	stw	r2,-840(fp)
				float z2 = endz = (startEndnodes)[indexOfArray + 5];
     e44:	d0e7ed17 	ldw	r3,-24652(gp)
     e48:	e0bf2917 	ldw	r2,-860(fp)
     e4c:	10800144 	addi	r2,r2,5
     e50:	1085883a 	add	r2,r2,r2
     e54:	1085883a 	add	r2,r2,r2
     e58:	1885883a 	add	r2,r3,r2
     e5c:	10800017 	ldw	r2,0(r2)
     e60:	1009883a 	mov	r4,r2
     e64:	00048bc0 	call	48bc <__floatsisf>
     e68:	1007883a 	mov	r3,r2
     e6c:	e0ff2515 	stw	r3,-876(fp)
     e70:	e0bf2517 	ldw	r2,-876(fp)
     e74:	e0bf2f15 	stw	r2,-836(fp)
				startEndnodes = tempArray;
     e78:	e0bf3204 	addi	r2,fp,-824
     e7c:	d0a7ed15 	stw	r2,-24652(gp)

				if(previousXRotation != localRotationX || previousYRotation != localRotationY)
     e80:	e0ff1817 	ldw	r3,-928(fp)
     e84:	e0bf2617 	ldw	r2,-872(fp)
     e88:	1880031e 	bne	r3,r2,e98 <task2+0x3e0>
     e8c:	e0ff1917 	ldw	r3,-924(fp)
     e90:	e0bf2717 	ldw	r2,-868(fp)
     e94:	18823726 	beq	r3,r2,1774 <task2+0xcbc>
				{
					x1 = ((startx * cos(previousXRotation / 57.4) - starty * sin(previousXRotation / 57.4)) * (cos(previousYRotation / 57.4))) + startz * sin(previousYRotation / 57.4);
     e98:	e13f2017 	ldw	r4,-896(fp)
     e9c:	000653c0 	call	653c <__extendsfdf2>
     ea0:	e0bf8c15 	stw	r2,-464(fp)
     ea4:	e0ff8d15 	stw	r3,-460(fp)
     ea8:	e13f1817 	ldw	r4,-928(fp)
     eac:	00048bc0 	call	48bc <__floatsisf>
     eb0:	1007883a 	mov	r3,r2
     eb4:	009099b4 	movhi	r2,16998
     eb8:	10a66684 	addi	r2,r2,-26214
     ebc:	1885fff2 	custom	255,r2,r3,r2
     ec0:	1009883a 	mov	r4,r2
     ec4:	000653c0 	call	653c <__extendsfdf2>
     ec8:	100b883a 	mov	r5,r2
     ecc:	180d883a 	mov	r6,r3
     ed0:	2809883a 	mov	r4,r5
     ed4:	300b883a 	mov	r5,r6
     ed8:	00023380 	call	2338 <cos>
     edc:	100f883a 	mov	r7,r2
     ee0:	1811883a 	mov	r8,r3
     ee4:	e13f8c17 	ldw	r4,-464(fp)
     ee8:	e17f8d17 	ldw	r5,-460(fp)
     eec:	380d883a 	mov	r6,r7
     ef0:	400f883a 	mov	r7,r8
     ef4:	00053f00 	call	53f0 <__muldf3>
     ef8:	1009883a 	mov	r4,r2
     efc:	180b883a 	mov	r5,r3
     f00:	e13f8e15 	stw	r4,-456(fp)
     f04:	e17f8f15 	stw	r5,-452(fp)
     f08:	e13f2117 	ldw	r4,-892(fp)
     f0c:	000653c0 	call	653c <__extendsfdf2>
     f10:	e0bf9015 	stw	r2,-448(fp)
     f14:	e0ff9115 	stw	r3,-444(fp)
     f18:	e13f1817 	ldw	r4,-928(fp)
     f1c:	00048bc0 	call	48bc <__floatsisf>
     f20:	1007883a 	mov	r3,r2
     f24:	009099b4 	movhi	r2,16998
     f28:	10a66684 	addi	r2,r2,-26214
     f2c:	1885fff2 	custom	255,r2,r3,r2
     f30:	1009883a 	mov	r4,r2
     f34:	000653c0 	call	653c <__extendsfdf2>
     f38:	100b883a 	mov	r5,r2
     f3c:	180d883a 	mov	r6,r3
     f40:	2809883a 	mov	r4,r5
     f44:	300b883a 	mov	r5,r6
     f48:	00024240 	call	2424 <sin>
     f4c:	100f883a 	mov	r7,r2
     f50:	1811883a 	mov	r8,r3
     f54:	e13f9017 	ldw	r4,-448(fp)
     f58:	e17f9117 	ldw	r5,-444(fp)
     f5c:	380d883a 	mov	r6,r7
     f60:	400f883a 	mov	r7,r8
     f64:	00053f00 	call	53f0 <__muldf3>
     f68:	1009883a 	mov	r4,r2
     f6c:	180b883a 	mov	r5,r3
     f70:	2005883a 	mov	r2,r4
     f74:	2807883a 	mov	r3,r5
     f78:	e13f8e17 	ldw	r4,-456(fp)
     f7c:	e17f8f17 	ldw	r5,-452(fp)
     f80:	100d883a 	mov	r6,r2
     f84:	180f883a 	mov	r7,r3
     f88:	0005b140 	call	5b14 <__subdf3>
     f8c:	1009883a 	mov	r4,r2
     f90:	180b883a 	mov	r5,r3
     f94:	e13f9215 	stw	r4,-440(fp)
     f98:	e17f9315 	stw	r5,-436(fp)
     f9c:	e13f1917 	ldw	r4,-924(fp)
     fa0:	00048bc0 	call	48bc <__floatsisf>
     fa4:	1007883a 	mov	r3,r2
     fa8:	009099b4 	movhi	r2,16998
     fac:	10a66684 	addi	r2,r2,-26214
     fb0:	1885fff2 	custom	255,r2,r3,r2
     fb4:	1009883a 	mov	r4,r2
     fb8:	000653c0 	call	653c <__extendsfdf2>
     fbc:	100b883a 	mov	r5,r2
     fc0:	180d883a 	mov	r6,r3
     fc4:	2809883a 	mov	r4,r5
     fc8:	300b883a 	mov	r5,r6
     fcc:	00023380 	call	2338 <cos>
     fd0:	100f883a 	mov	r7,r2
     fd4:	1811883a 	mov	r8,r3
     fd8:	e13f9217 	ldw	r4,-440(fp)
     fdc:	e17f9317 	ldw	r5,-436(fp)
     fe0:	380d883a 	mov	r6,r7
     fe4:	400f883a 	mov	r7,r8
     fe8:	00053f00 	call	53f0 <__muldf3>
     fec:	1009883a 	mov	r4,r2
     ff0:	180b883a 	mov	r5,r3
     ff4:	e13f9415 	stw	r4,-432(fp)
     ff8:	e17f9515 	stw	r5,-428(fp)
     ffc:	e13f2217 	ldw	r4,-888(fp)
    1000:	000653c0 	call	653c <__extendsfdf2>
    1004:	e0bf9615 	stw	r2,-424(fp)
    1008:	e0ff9715 	stw	r3,-420(fp)
    100c:	e13f1917 	ldw	r4,-924(fp)
    1010:	00048bc0 	call	48bc <__floatsisf>
    1014:	1007883a 	mov	r3,r2
    1018:	009099b4 	movhi	r2,16998
    101c:	10a66684 	addi	r2,r2,-26214
    1020:	1885fff2 	custom	255,r2,r3,r2
    1024:	1009883a 	mov	r4,r2
    1028:	000653c0 	call	653c <__extendsfdf2>
    102c:	100b883a 	mov	r5,r2
    1030:	180d883a 	mov	r6,r3
    1034:	2809883a 	mov	r4,r5
    1038:	300b883a 	mov	r5,r6
    103c:	00024240 	call	2424 <sin>
    1040:	100f883a 	mov	r7,r2
    1044:	1811883a 	mov	r8,r3
    1048:	e13f9617 	ldw	r4,-424(fp)
    104c:	e17f9717 	ldw	r5,-420(fp)
    1050:	380d883a 	mov	r6,r7
    1054:	400f883a 	mov	r7,r8
    1058:	00053f00 	call	53f0 <__muldf3>
    105c:	1009883a 	mov	r4,r2
    1060:	180b883a 	mov	r5,r3
    1064:	2005883a 	mov	r2,r4
    1068:	2807883a 	mov	r3,r5
    106c:	e13f9417 	ldw	r4,-432(fp)
    1070:	e17f9517 	ldw	r5,-428(fp)
    1074:	100d883a 	mov	r6,r2
    1078:	180f883a 	mov	r7,r3
    107c:	00049f00 	call	49f0 <__adddf3>
    1080:	1009883a 	mov	r4,r2
    1084:	180b883a 	mov	r5,r3
    1088:	2005883a 	mov	r2,r4
    108c:	2807883a 	mov	r3,r5
    1090:	1009883a 	mov	r4,r2
    1094:	180b883a 	mov	r5,r3
    1098:	000664c0 	call	664c <__truncdfsf2>
    109c:	1007883a 	mov	r3,r2
    10a0:	e0ff2a15 	stw	r3,-856(fp)
					x2 = ((endx * cos(previousXRotation / 57.4) - endy * sin(previousXRotation / 57.4)) * (cos(previousYRotation / 57.4))) + endz * sin(previousYRotation / 57.4);
    10a4:	e13f2317 	ldw	r4,-884(fp)
    10a8:	000653c0 	call	653c <__extendsfdf2>
    10ac:	e0bf9815 	stw	r2,-416(fp)
    10b0:	e0ff9915 	stw	r3,-412(fp)
    10b4:	e13f1817 	ldw	r4,-928(fp)
    10b8:	00048bc0 	call	48bc <__floatsisf>
    10bc:	1007883a 	mov	r3,r2
    10c0:	009099b4 	movhi	r2,16998
    10c4:	10a66684 	addi	r2,r2,-26214
    10c8:	1885fff2 	custom	255,r2,r3,r2
    10cc:	1009883a 	mov	r4,r2
    10d0:	000653c0 	call	653c <__extendsfdf2>
    10d4:	100b883a 	mov	r5,r2
    10d8:	180d883a 	mov	r6,r3
    10dc:	2809883a 	mov	r4,r5
    10e0:	300b883a 	mov	r5,r6
    10e4:	00023380 	call	2338 <cos>
    10e8:	100f883a 	mov	r7,r2
    10ec:	1811883a 	mov	r8,r3
    10f0:	e13f9817 	ldw	r4,-416(fp)
    10f4:	e17f9917 	ldw	r5,-412(fp)
    10f8:	380d883a 	mov	r6,r7
    10fc:	400f883a 	mov	r7,r8
    1100:	00053f00 	call	53f0 <__muldf3>
    1104:	1009883a 	mov	r4,r2
    1108:	180b883a 	mov	r5,r3
    110c:	e13f9a15 	stw	r4,-408(fp)
    1110:	e17f9b15 	stw	r5,-404(fp)
    1114:	e13f2417 	ldw	r4,-880(fp)
    1118:	000653c0 	call	653c <__extendsfdf2>
    111c:	e0bf9c15 	stw	r2,-400(fp)
    1120:	e0ff9d15 	stw	r3,-396(fp)
    1124:	e13f1817 	ldw	r4,-928(fp)
    1128:	00048bc0 	call	48bc <__floatsisf>
    112c:	1007883a 	mov	r3,r2
    1130:	009099b4 	movhi	r2,16998
    1134:	10a66684 	addi	r2,r2,-26214
    1138:	1885fff2 	custom	255,r2,r3,r2
    113c:	1009883a 	mov	r4,r2
    1140:	000653c0 	call	653c <__extendsfdf2>
    1144:	100b883a 	mov	r5,r2
    1148:	180d883a 	mov	r6,r3
    114c:	2809883a 	mov	r4,r5
    1150:	300b883a 	mov	r5,r6
    1154:	00024240 	call	2424 <sin>
    1158:	100f883a 	mov	r7,r2
    115c:	1811883a 	mov	r8,r3
    1160:	e13f9c17 	ldw	r4,-400(fp)
    1164:	e17f9d17 	ldw	r5,-396(fp)
    1168:	380d883a 	mov	r6,r7
    116c:	400f883a 	mov	r7,r8
    1170:	00053f00 	call	53f0 <__muldf3>
    1174:	1009883a 	mov	r4,r2
    1178:	180b883a 	mov	r5,r3
    117c:	2005883a 	mov	r2,r4
    1180:	2807883a 	mov	r3,r5
    1184:	e13f9a17 	ldw	r4,-408(fp)
    1188:	e17f9b17 	ldw	r5,-404(fp)
    118c:	100d883a 	mov	r6,r2
    1190:	180f883a 	mov	r7,r3
    1194:	0005b140 	call	5b14 <__subdf3>
    1198:	1009883a 	mov	r4,r2
    119c:	180b883a 	mov	r5,r3
    11a0:	e13f9e15 	stw	r4,-392(fp)
    11a4:	e17f9f15 	stw	r5,-388(fp)
    11a8:	e13f1917 	ldw	r4,-924(fp)
    11ac:	00048bc0 	call	48bc <__floatsisf>
    11b0:	1007883a 	mov	r3,r2
    11b4:	009099b4 	movhi	r2,16998
    11b8:	10a66684 	addi	r2,r2,-26214
    11bc:	1885fff2 	custom	255,r2,r3,r2
    11c0:	1009883a 	mov	r4,r2
    11c4:	000653c0 	call	653c <__extendsfdf2>
    11c8:	100b883a 	mov	r5,r2
    11cc:	180d883a 	mov	r6,r3
    11d0:	2809883a 	mov	r4,r5
    11d4:	300b883a 	mov	r5,r6
    11d8:	00023380 	call	2338 <cos>
    11dc:	100f883a 	mov	r7,r2
    11e0:	1811883a 	mov	r8,r3
    11e4:	e13f9e17 	ldw	r4,-392(fp)
    11e8:	e17f9f17 	ldw	r5,-388(fp)
    11ec:	380d883a 	mov	r6,r7
    11f0:	400f883a 	mov	r7,r8
    11f4:	00053f00 	call	53f0 <__muldf3>
    11f8:	1009883a 	mov	r4,r2
    11fc:	180b883a 	mov	r5,r3
    1200:	e13fa015 	stw	r4,-384(fp)
    1204:	e17fa115 	stw	r5,-380(fp)
    1208:	e13f2517 	ldw	r4,-876(fp)
    120c:	000653c0 	call	653c <__extendsfdf2>
    1210:	e0bfa215 	stw	r2,-376(fp)
    1214:	e0ffa315 	stw	r3,-372(fp)
    1218:	e13f1917 	ldw	r4,-924(fp)
    121c:	00048bc0 	call	48bc <__floatsisf>
    1220:	1007883a 	mov	r3,r2
    1224:	009099b4 	movhi	r2,16998
    1228:	10a66684 	addi	r2,r2,-26214
    122c:	1885fff2 	custom	255,r2,r3,r2
    1230:	1009883a 	mov	r4,r2
    1234:	000653c0 	call	653c <__extendsfdf2>
    1238:	100b883a 	mov	r5,r2
    123c:	180d883a 	mov	r6,r3
    1240:	2809883a 	mov	r4,r5
    1244:	300b883a 	mov	r5,r6
    1248:	00024240 	call	2424 <sin>
    124c:	100f883a 	mov	r7,r2
    1250:	1811883a 	mov	r8,r3
    1254:	e13fa217 	ldw	r4,-376(fp)
    1258:	e17fa317 	ldw	r5,-372(fp)
    125c:	380d883a 	mov	r6,r7
    1260:	400f883a 	mov	r7,r8
    1264:	00053f00 	call	53f0 <__muldf3>
    1268:	1009883a 	mov	r4,r2
    126c:	180b883a 	mov	r5,r3
    1270:	2005883a 	mov	r2,r4
    1274:	2807883a 	mov	r3,r5
    1278:	e13fa017 	ldw	r4,-384(fp)
    127c:	e17fa117 	ldw	r5,-380(fp)
    1280:	100d883a 	mov	r6,r2
    1284:	180f883a 	mov	r7,r3
    1288:	00049f00 	call	49f0 <__adddf3>
    128c:	1009883a 	mov	r4,r2
    1290:	180b883a 	mov	r5,r3
    1294:	2005883a 	mov	r2,r4
    1298:	2807883a 	mov	r3,r5
    129c:	1009883a 	mov	r4,r2
    12a0:	180b883a 	mov	r5,r3
    12a4:	000664c0 	call	664c <__truncdfsf2>
    12a8:	1007883a 	mov	r3,r2
    12ac:	e0ff2d15 	stw	r3,-844(fp)

					z1 = ((-(startx * cos(previousXRotation / 57.4) - starty * sin(previousXRotation / 57.4))) * (sin(previousYRotation / 57.4)) + startz * cos(previousYRotation / 57.4));
    12b0:	e13f2017 	ldw	r4,-896(fp)
    12b4:	000653c0 	call	653c <__extendsfdf2>
    12b8:	e0bfa415 	stw	r2,-368(fp)
    12bc:	e0ffa515 	stw	r3,-364(fp)
    12c0:	e13f1817 	ldw	r4,-928(fp)
    12c4:	00048bc0 	call	48bc <__floatsisf>
    12c8:	1007883a 	mov	r3,r2
    12cc:	009099b4 	movhi	r2,16998
    12d0:	10a66684 	addi	r2,r2,-26214
    12d4:	1885fff2 	custom	255,r2,r3,r2
    12d8:	1009883a 	mov	r4,r2
    12dc:	000653c0 	call	653c <__extendsfdf2>
    12e0:	100b883a 	mov	r5,r2
    12e4:	180d883a 	mov	r6,r3
    12e8:	2809883a 	mov	r4,r5
    12ec:	300b883a 	mov	r5,r6
    12f0:	00023380 	call	2338 <cos>
    12f4:	100f883a 	mov	r7,r2
    12f8:	1811883a 	mov	r8,r3
    12fc:	e13fa417 	ldw	r4,-368(fp)
    1300:	e17fa517 	ldw	r5,-364(fp)
    1304:	380d883a 	mov	r6,r7
    1308:	400f883a 	mov	r7,r8
    130c:	00053f00 	call	53f0 <__muldf3>
    1310:	1009883a 	mov	r4,r2
    1314:	180b883a 	mov	r5,r3
    1318:	e13fa615 	stw	r4,-360(fp)
    131c:	e17fa715 	stw	r5,-356(fp)
    1320:	e13f2117 	ldw	r4,-892(fp)
    1324:	000653c0 	call	653c <__extendsfdf2>
    1328:	e0bfa815 	stw	r2,-352(fp)
    132c:	e0ffa915 	stw	r3,-348(fp)
    1330:	e13f1817 	ldw	r4,-928(fp)
    1334:	00048bc0 	call	48bc <__floatsisf>
    1338:	1007883a 	mov	r3,r2
    133c:	009099b4 	movhi	r2,16998
    1340:	10a66684 	addi	r2,r2,-26214
    1344:	1885fff2 	custom	255,r2,r3,r2
    1348:	1009883a 	mov	r4,r2
    134c:	000653c0 	call	653c <__extendsfdf2>
    1350:	100b883a 	mov	r5,r2
    1354:	180d883a 	mov	r6,r3
    1358:	2809883a 	mov	r4,r5
    135c:	300b883a 	mov	r5,r6
    1360:	00024240 	call	2424 <sin>
    1364:	100f883a 	mov	r7,r2
    1368:	1811883a 	mov	r8,r3
    136c:	e13fa817 	ldw	r4,-352(fp)
    1370:	e17fa917 	ldw	r5,-348(fp)
    1374:	380d883a 	mov	r6,r7
    1378:	400f883a 	mov	r7,r8
    137c:	00053f00 	call	53f0 <__muldf3>
    1380:	1009883a 	mov	r4,r2
    1384:	180b883a 	mov	r5,r3
    1388:	2005883a 	mov	r2,r4
    138c:	2807883a 	mov	r3,r5
    1390:	e13fa617 	ldw	r4,-360(fp)
    1394:	e17fa717 	ldw	r5,-356(fp)
    1398:	100d883a 	mov	r6,r2
    139c:	180f883a 	mov	r7,r3
    13a0:	0005b140 	call	5b14 <__subdf3>
    13a4:	1009883a 	mov	r4,r2
    13a8:	180b883a 	mov	r5,r3
    13ac:	2005883a 	mov	r2,r4
    13b0:	2807883a 	mov	r3,r5
    13b4:	1021883a 	mov	r16,r2
    13b8:	1c60003c 	xorhi	r17,r3,32768
    13bc:	e13f1917 	ldw	r4,-924(fp)
    13c0:	00048bc0 	call	48bc <__floatsisf>
    13c4:	1007883a 	mov	r3,r2
    13c8:	009099b4 	movhi	r2,16998
    13cc:	10a66684 	addi	r2,r2,-26214
    13d0:	1885fff2 	custom	255,r2,r3,r2
    13d4:	1009883a 	mov	r4,r2
    13d8:	000653c0 	call	653c <__extendsfdf2>
    13dc:	100b883a 	mov	r5,r2
    13e0:	180d883a 	mov	r6,r3
    13e4:	2809883a 	mov	r4,r5
    13e8:	300b883a 	mov	r5,r6
    13ec:	00024240 	call	2424 <sin>
    13f0:	100f883a 	mov	r7,r2
    13f4:	1811883a 	mov	r8,r3
    13f8:	8009883a 	mov	r4,r16
    13fc:	880b883a 	mov	r5,r17
    1400:	380d883a 	mov	r6,r7
    1404:	400f883a 	mov	r7,r8
    1408:	00053f00 	call	53f0 <__muldf3>
    140c:	1009883a 	mov	r4,r2
    1410:	180b883a 	mov	r5,r3
    1414:	e13faa15 	stw	r4,-344(fp)
    1418:	e17fab15 	stw	r5,-340(fp)
    141c:	e13f2217 	ldw	r4,-888(fp)
    1420:	000653c0 	call	653c <__extendsfdf2>
    1424:	e0bfac15 	stw	r2,-336(fp)
    1428:	e0ffad15 	stw	r3,-332(fp)
    142c:	e13f1917 	ldw	r4,-924(fp)
    1430:	00048bc0 	call	48bc <__floatsisf>
    1434:	1007883a 	mov	r3,r2
    1438:	009099b4 	movhi	r2,16998
    143c:	10a66684 	addi	r2,r2,-26214
    1440:	1885fff2 	custom	255,r2,r3,r2
    1444:	1009883a 	mov	r4,r2
    1448:	000653c0 	call	653c <__extendsfdf2>
    144c:	100b883a 	mov	r5,r2
    1450:	180d883a 	mov	r6,r3
    1454:	2809883a 	mov	r4,r5
    1458:	300b883a 	mov	r5,r6
    145c:	00023380 	call	2338 <cos>
    1460:	100f883a 	mov	r7,r2
    1464:	1811883a 	mov	r8,r3
    1468:	e13fac17 	ldw	r4,-336(fp)
    146c:	e17fad17 	ldw	r5,-332(fp)
    1470:	380d883a 	mov	r6,r7
    1474:	400f883a 	mov	r7,r8
    1478:	00053f00 	call	53f0 <__muldf3>
    147c:	1009883a 	mov	r4,r2
    1480:	180b883a 	mov	r5,r3
    1484:	2005883a 	mov	r2,r4
    1488:	2807883a 	mov	r3,r5
    148c:	e13faa17 	ldw	r4,-344(fp)
    1490:	e17fab17 	ldw	r5,-340(fp)
    1494:	100d883a 	mov	r6,r2
    1498:	180f883a 	mov	r7,r3
    149c:	00049f00 	call	49f0 <__adddf3>
    14a0:	1009883a 	mov	r4,r2
    14a4:	180b883a 	mov	r5,r3
    14a8:	2005883a 	mov	r2,r4
    14ac:	2807883a 	mov	r3,r5
    14b0:	1009883a 	mov	r4,r2
    14b4:	180b883a 	mov	r5,r3
    14b8:	000664c0 	call	664c <__truncdfsf2>
    14bc:	1007883a 	mov	r3,r2
    14c0:	e0ff2c15 	stw	r3,-848(fp)
					z2 = ((-(endx * cos(previousXRotation / 57.4) - endy * sin(previousXRotation / 57.4))) * (sin(previousYRotation / 57.4)) + endz * cos(previousYRotation / 57.4));
    14c4:	e13f2317 	ldw	r4,-884(fp)
    14c8:	000653c0 	call	653c <__extendsfdf2>
    14cc:	e0bfae15 	stw	r2,-328(fp)
    14d0:	e0ffaf15 	stw	r3,-324(fp)
    14d4:	e13f1817 	ldw	r4,-928(fp)
    14d8:	00048bc0 	call	48bc <__floatsisf>
    14dc:	1007883a 	mov	r3,r2
    14e0:	009099b4 	movhi	r2,16998
    14e4:	10a66684 	addi	r2,r2,-26214
    14e8:	1885fff2 	custom	255,r2,r3,r2
    14ec:	1009883a 	mov	r4,r2
    14f0:	000653c0 	call	653c <__extendsfdf2>
    14f4:	100b883a 	mov	r5,r2
    14f8:	180d883a 	mov	r6,r3
    14fc:	2809883a 	mov	r4,r5
    1500:	300b883a 	mov	r5,r6
    1504:	00023380 	call	2338 <cos>
    1508:	100f883a 	mov	r7,r2
    150c:	1811883a 	mov	r8,r3
    1510:	e13fae17 	ldw	r4,-328(fp)
    1514:	e17faf17 	ldw	r5,-324(fp)
    1518:	380d883a 	mov	r6,r7
    151c:	400f883a 	mov	r7,r8
    1520:	00053f00 	call	53f0 <__muldf3>
    1524:	1009883a 	mov	r4,r2
    1528:	180b883a 	mov	r5,r3
    152c:	e13fb015 	stw	r4,-320(fp)
    1530:	e17fb115 	stw	r5,-316(fp)
    1534:	e13f2417 	ldw	r4,-880(fp)
    1538:	000653c0 	call	653c <__extendsfdf2>
    153c:	e0bfb215 	stw	r2,-312(fp)
    1540:	e0ffb315 	stw	r3,-308(fp)
    1544:	e13f1817 	ldw	r4,-928(fp)
    1548:	00048bc0 	call	48bc <__floatsisf>
    154c:	1007883a 	mov	r3,r2
    1550:	009099b4 	movhi	r2,16998
    1554:	10a66684 	addi	r2,r2,-26214
    1558:	1885fff2 	custom	255,r2,r3,r2
    155c:	1009883a 	mov	r4,r2
    1560:	000653c0 	call	653c <__extendsfdf2>
    1564:	100b883a 	mov	r5,r2
    1568:	180d883a 	mov	r6,r3
    156c:	2809883a 	mov	r4,r5
    1570:	300b883a 	mov	r5,r6
    1574:	00024240 	call	2424 <sin>
    1578:	100f883a 	mov	r7,r2
    157c:	1811883a 	mov	r8,r3
    1580:	e13fb217 	ldw	r4,-312(fp)
    1584:	e17fb317 	ldw	r5,-308(fp)
    1588:	380d883a 	mov	r6,r7
    158c:	400f883a 	mov	r7,r8
    1590:	00053f00 	call	53f0 <__muldf3>
    1594:	1009883a 	mov	r4,r2
    1598:	180b883a 	mov	r5,r3
    159c:	2005883a 	mov	r2,r4
    15a0:	2807883a 	mov	r3,r5
    15a4:	e13fb017 	ldw	r4,-320(fp)
    15a8:	e17fb117 	ldw	r5,-316(fp)
    15ac:	100d883a 	mov	r6,r2
    15b0:	180f883a 	mov	r7,r3
    15b4:	0005b140 	call	5b14 <__subdf3>
    15b8:	1009883a 	mov	r4,r2
    15bc:	180b883a 	mov	r5,r3
    15c0:	2005883a 	mov	r2,r4
    15c4:	2807883a 	mov	r3,r5
    15c8:	1025883a 	mov	r18,r2
    15cc:	1ce0003c 	xorhi	r19,r3,32768
    15d0:	e13f1917 	ldw	r4,-924(fp)
    15d4:	00048bc0 	call	48bc <__floatsisf>
    15d8:	1007883a 	mov	r3,r2
    15dc:	009099b4 	movhi	r2,16998
    15e0:	10a66684 	addi	r2,r2,-26214
    15e4:	1885fff2 	custom	255,r2,r3,r2
    15e8:	1009883a 	mov	r4,r2
    15ec:	000653c0 	call	653c <__extendsfdf2>
    15f0:	100b883a 	mov	r5,r2
    15f4:	180d883a 	mov	r6,r3
    15f8:	2809883a 	mov	r4,r5
    15fc:	300b883a 	mov	r5,r6
    1600:	00024240 	call	2424 <sin>
    1604:	100f883a 	mov	r7,r2
    1608:	1811883a 	mov	r8,r3
    160c:	9009883a 	mov	r4,r18
    1610:	980b883a 	mov	r5,r19
    1614:	380d883a 	mov	r6,r7
    1618:	400f883a 	mov	r7,r8
    161c:	00053f00 	call	53f0 <__muldf3>
    1620:	1009883a 	mov	r4,r2
    1624:	180b883a 	mov	r5,r3
    1628:	e13fb415 	stw	r4,-304(fp)
    162c:	e17fb515 	stw	r5,-300(fp)
    1630:	e13f2517 	ldw	r4,-876(fp)
    1634:	000653c0 	call	653c <__extendsfdf2>
    1638:	e0bfb615 	stw	r2,-296(fp)
    163c:	e0ffb715 	stw	r3,-292(fp)
    1640:	e13f1917 	ldw	r4,-924(fp)
    1644:	00048bc0 	call	48bc <__floatsisf>
    1648:	1007883a 	mov	r3,r2
    164c:	009099b4 	movhi	r2,16998
    1650:	10a66684 	addi	r2,r2,-26214
    1654:	1885fff2 	custom	255,r2,r3,r2
    1658:	1009883a 	mov	r4,r2
    165c:	000653c0 	call	653c <__extendsfdf2>
    1660:	100b883a 	mov	r5,r2
    1664:	180d883a 	mov	r6,r3
    1668:	2809883a 	mov	r4,r5
    166c:	300b883a 	mov	r5,r6
    1670:	00023380 	call	2338 <cos>
    1674:	100f883a 	mov	r7,r2
    1678:	1811883a 	mov	r8,r3
    167c:	e13fb617 	ldw	r4,-296(fp)
    1680:	e17fb717 	ldw	r5,-292(fp)
    1684:	380d883a 	mov	r6,r7
    1688:	400f883a 	mov	r7,r8
    168c:	00053f00 	call	53f0 <__muldf3>
    1690:	1009883a 	mov	r4,r2
    1694:	180b883a 	mov	r5,r3
    1698:	2005883a 	mov	r2,r4
    169c:	2807883a 	mov	r3,r5
    16a0:	e13fb417 	ldw	r4,-304(fp)
    16a4:	e17fb517 	ldw	r5,-300(fp)
    16a8:	100d883a 	mov	r6,r2
    16ac:	180f883a 	mov	r7,r3
    16b0:	00049f00 	call	49f0 <__adddf3>
    16b4:	1009883a 	mov	r4,r2
    16b8:	180b883a 	mov	r5,r3
    16bc:	2005883a 	mov	r2,r4
    16c0:	2807883a 	mov	r3,r5
    16c4:	1009883a 	mov	r4,r2
    16c8:	180b883a 	mov	r5,r3
    16cc:	000664c0 	call	664c <__truncdfsf2>
    16d0:	1007883a 	mov	r3,r2
    16d4:	e0ff2f15 	stw	r3,-836(fp)

					y1 = z1;
    16d8:	e0bf2c17 	ldw	r2,-848(fp)
    16dc:	e0bf2b15 	stw	r2,-852(fp)
					y2 = z2;
    16e0:	e0bf2f17 	ldw	r2,-836(fp)
    16e4:	e0bf2e15 	stw	r2,-840(fp)

					drawLine((x1 * prevousZoomScreenBR), (y1 * prevousZoomScreenBR), (x2 * prevousZoomScreenBR), (y2 * prevousZoomScreenBR), midX, midY, 1 , 1, 0x0000);
    16e8:	e0ff2a17 	ldw	r3,-856(fp)
    16ec:	e0bf1717 	ldw	r2,-932(fp)
    16f0:	1885ff32 	custom	252,r2,r3,r2
    16f4:	e0bfb815 	stw	r2,-288(fp)
    16f8:	e0ff2b17 	ldw	r3,-852(fp)
    16fc:	e0bf1717 	ldw	r2,-932(fp)
    1700:	1885ff32 	custom	252,r2,r3,r2
    1704:	e0bfb915 	stw	r2,-284(fp)
    1708:	e0ff2d17 	ldw	r3,-844(fp)
    170c:	e0bf1717 	ldw	r2,-932(fp)
    1710:	1885ff32 	custom	252,r2,r3,r2
    1714:	e0bfba15 	stw	r2,-280(fp)
    1718:	e0ff2e17 	ldw	r3,-840(fp)
    171c:	e0bf1717 	ldw	r2,-932(fp)
    1720:	1885ff32 	custom	252,r2,r3,r2
    1724:	e0bfbb15 	stw	r2,-276(fp)
    1728:	e13f1c17 	ldw	r4,-912(fp)
    172c:	00048bc0 	call	48bc <__floatsisf>
    1730:	e0bfbc15 	stw	r2,-272(fp)
    1734:	e13f1d17 	ldw	r4,-908(fp)
    1738:	00048bc0 	call	48bc <__floatsisf>
    173c:	1007883a 	mov	r3,r2
    1740:	e0bfbc17 	ldw	r2,-272(fp)
    1744:	d8800015 	stw	r2,0(sp)
    1748:	d8c00115 	stw	r3,4(sp)
    174c:	00800044 	movi	r2,1
    1750:	d8800215 	stw	r2,8(sp)
    1754:	00800044 	movi	r2,1
    1758:	d8800315 	stw	r2,12(sp)
    175c:	d8000415 	stw	zero,16(sp)
    1760:	e13fb817 	ldw	r4,-288(fp)
    1764:	e17fb917 	ldw	r5,-284(fp)
    1768:	e1bfba17 	ldw	r6,-280(fp)
    176c:	e1ffbb17 	ldw	r7,-276(fp)
    1770:	00004980 	call	498 <drawLine>

				}

				x1 = ((startx * cos(localRotationX / 57.4) - starty * sin(localRotationX / 57.4)) * (cos(localRotationY / 57.4))) + startz * sin(localRotationY / 57.4) ;
    1774:	e13f2017 	ldw	r4,-896(fp)
    1778:	000653c0 	call	653c <__extendsfdf2>
    177c:	e0bfbd15 	stw	r2,-268(fp)
    1780:	e0ffbe15 	stw	r3,-264(fp)
    1784:	e13f2617 	ldw	r4,-872(fp)
    1788:	00048bc0 	call	48bc <__floatsisf>
    178c:	1007883a 	mov	r3,r2
    1790:	009099b4 	movhi	r2,16998
    1794:	10a66684 	addi	r2,r2,-26214
    1798:	1885fff2 	custom	255,r2,r3,r2
    179c:	1009883a 	mov	r4,r2
    17a0:	000653c0 	call	653c <__extendsfdf2>
    17a4:	100b883a 	mov	r5,r2
    17a8:	180d883a 	mov	r6,r3
    17ac:	2809883a 	mov	r4,r5
    17b0:	300b883a 	mov	r5,r6
    17b4:	00023380 	call	2338 <cos>
    17b8:	100f883a 	mov	r7,r2
    17bc:	1811883a 	mov	r8,r3
    17c0:	e13fbd17 	ldw	r4,-268(fp)
    17c4:	e17fbe17 	ldw	r5,-264(fp)
    17c8:	380d883a 	mov	r6,r7
    17cc:	400f883a 	mov	r7,r8
    17d0:	00053f00 	call	53f0 <__muldf3>
    17d4:	1009883a 	mov	r4,r2
    17d8:	180b883a 	mov	r5,r3
    17dc:	e13fbf15 	stw	r4,-260(fp)
    17e0:	e17fc015 	stw	r5,-256(fp)
    17e4:	e13f2117 	ldw	r4,-892(fp)
    17e8:	000653c0 	call	653c <__extendsfdf2>
    17ec:	e0bfc115 	stw	r2,-252(fp)
    17f0:	e0ffc215 	stw	r3,-248(fp)
    17f4:	e13f2617 	ldw	r4,-872(fp)
    17f8:	00048bc0 	call	48bc <__floatsisf>
    17fc:	1007883a 	mov	r3,r2
    1800:	009099b4 	movhi	r2,16998
    1804:	10a66684 	addi	r2,r2,-26214
    1808:	1885fff2 	custom	255,r2,r3,r2
    180c:	1009883a 	mov	r4,r2
    1810:	000653c0 	call	653c <__extendsfdf2>
    1814:	100b883a 	mov	r5,r2
    1818:	180d883a 	mov	r6,r3
    181c:	2809883a 	mov	r4,r5
    1820:	300b883a 	mov	r5,r6
    1824:	00024240 	call	2424 <sin>
    1828:	100f883a 	mov	r7,r2
    182c:	1811883a 	mov	r8,r3
    1830:	e13fc117 	ldw	r4,-252(fp)
    1834:	e17fc217 	ldw	r5,-248(fp)
    1838:	380d883a 	mov	r6,r7
    183c:	400f883a 	mov	r7,r8
    1840:	00053f00 	call	53f0 <__muldf3>
    1844:	1009883a 	mov	r4,r2
    1848:	180b883a 	mov	r5,r3
    184c:	2005883a 	mov	r2,r4
    1850:	2807883a 	mov	r3,r5
    1854:	e13fbf17 	ldw	r4,-260(fp)
    1858:	e17fc017 	ldw	r5,-256(fp)
    185c:	100d883a 	mov	r6,r2
    1860:	180f883a 	mov	r7,r3
    1864:	0005b140 	call	5b14 <__subdf3>
    1868:	1009883a 	mov	r4,r2
    186c:	180b883a 	mov	r5,r3
    1870:	e13fc315 	stw	r4,-244(fp)
    1874:	e17fc415 	stw	r5,-240(fp)
    1878:	e13f2717 	ldw	r4,-868(fp)
    187c:	00048bc0 	call	48bc <__floatsisf>
    1880:	1007883a 	mov	r3,r2
    1884:	009099b4 	movhi	r2,16998
    1888:	10a66684 	addi	r2,r2,-26214
    188c:	1885fff2 	custom	255,r2,r3,r2
    1890:	1009883a 	mov	r4,r2
    1894:	000653c0 	call	653c <__extendsfdf2>
    1898:	100b883a 	mov	r5,r2
    189c:	180d883a 	mov	r6,r3
    18a0:	2809883a 	mov	r4,r5
    18a4:	300b883a 	mov	r5,r6
    18a8:	00023380 	call	2338 <cos>
    18ac:	100f883a 	mov	r7,r2
    18b0:	1811883a 	mov	r8,r3
    18b4:	e13fc317 	ldw	r4,-244(fp)
    18b8:	e17fc417 	ldw	r5,-240(fp)
    18bc:	380d883a 	mov	r6,r7
    18c0:	400f883a 	mov	r7,r8
    18c4:	00053f00 	call	53f0 <__muldf3>
    18c8:	1009883a 	mov	r4,r2
    18cc:	180b883a 	mov	r5,r3
    18d0:	e13fc515 	stw	r4,-236(fp)
    18d4:	e17fc615 	stw	r5,-232(fp)
    18d8:	e13f2217 	ldw	r4,-888(fp)
    18dc:	000653c0 	call	653c <__extendsfdf2>
    18e0:	e0bfc715 	stw	r2,-228(fp)
    18e4:	e0ffc815 	stw	r3,-224(fp)
    18e8:	e13f2717 	ldw	r4,-868(fp)
    18ec:	00048bc0 	call	48bc <__floatsisf>
    18f0:	1007883a 	mov	r3,r2
    18f4:	009099b4 	movhi	r2,16998
    18f8:	10a66684 	addi	r2,r2,-26214
    18fc:	1885fff2 	custom	255,r2,r3,r2
    1900:	1009883a 	mov	r4,r2
    1904:	000653c0 	call	653c <__extendsfdf2>
    1908:	100b883a 	mov	r5,r2
    190c:	180d883a 	mov	r6,r3
    1910:	2809883a 	mov	r4,r5
    1914:	300b883a 	mov	r5,r6
    1918:	00024240 	call	2424 <sin>
    191c:	100f883a 	mov	r7,r2
    1920:	1811883a 	mov	r8,r3
    1924:	e13fc717 	ldw	r4,-228(fp)
    1928:	e17fc817 	ldw	r5,-224(fp)
    192c:	380d883a 	mov	r6,r7
    1930:	400f883a 	mov	r7,r8
    1934:	00053f00 	call	53f0 <__muldf3>
    1938:	1009883a 	mov	r4,r2
    193c:	180b883a 	mov	r5,r3
    1940:	2005883a 	mov	r2,r4
    1944:	2807883a 	mov	r3,r5
    1948:	e13fc517 	ldw	r4,-236(fp)
    194c:	e17fc617 	ldw	r5,-232(fp)
    1950:	100d883a 	mov	r6,r2
    1954:	180f883a 	mov	r7,r3
    1958:	00049f00 	call	49f0 <__adddf3>
    195c:	1009883a 	mov	r4,r2
    1960:	180b883a 	mov	r5,r3
    1964:	2005883a 	mov	r2,r4
    1968:	2807883a 	mov	r3,r5
    196c:	1009883a 	mov	r4,r2
    1970:	180b883a 	mov	r5,r3
    1974:	000664c0 	call	664c <__truncdfsf2>
    1978:	1007883a 	mov	r3,r2
    197c:	e0ff2a15 	stw	r3,-856(fp)
				x2 = ((endx * cos(localRotationX / 57.4) - endy * sin(localRotationX / 57.4))*(cos(localRotationY / 57.4))) + endz * sin(localRotationY / 57.4);
    1980:	e13f2317 	ldw	r4,-884(fp)
    1984:	000653c0 	call	653c <__extendsfdf2>
    1988:	e0bfc915 	stw	r2,-220(fp)
    198c:	e0ffca15 	stw	r3,-216(fp)
    1990:	e13f2617 	ldw	r4,-872(fp)
    1994:	00048bc0 	call	48bc <__floatsisf>
    1998:	1007883a 	mov	r3,r2
    199c:	009099b4 	movhi	r2,16998
    19a0:	10a66684 	addi	r2,r2,-26214
    19a4:	1885fff2 	custom	255,r2,r3,r2
    19a8:	1009883a 	mov	r4,r2
    19ac:	000653c0 	call	653c <__extendsfdf2>
    19b0:	100b883a 	mov	r5,r2
    19b4:	180d883a 	mov	r6,r3
    19b8:	2809883a 	mov	r4,r5
    19bc:	300b883a 	mov	r5,r6
    19c0:	00023380 	call	2338 <cos>
    19c4:	100f883a 	mov	r7,r2
    19c8:	1811883a 	mov	r8,r3
    19cc:	e13fc917 	ldw	r4,-220(fp)
    19d0:	e17fca17 	ldw	r5,-216(fp)
    19d4:	380d883a 	mov	r6,r7
    19d8:	400f883a 	mov	r7,r8
    19dc:	00053f00 	call	53f0 <__muldf3>
    19e0:	1009883a 	mov	r4,r2
    19e4:	180b883a 	mov	r5,r3
    19e8:	e13fcb15 	stw	r4,-212(fp)
    19ec:	e17fcc15 	stw	r5,-208(fp)
    19f0:	e13f2417 	ldw	r4,-880(fp)
    19f4:	000653c0 	call	653c <__extendsfdf2>
    19f8:	e0bfcd15 	stw	r2,-204(fp)
    19fc:	e0ffce15 	stw	r3,-200(fp)
    1a00:	e13f2617 	ldw	r4,-872(fp)
    1a04:	00048bc0 	call	48bc <__floatsisf>
    1a08:	1007883a 	mov	r3,r2
    1a0c:	009099b4 	movhi	r2,16998
    1a10:	10a66684 	addi	r2,r2,-26214
    1a14:	1885fff2 	custom	255,r2,r3,r2
    1a18:	1009883a 	mov	r4,r2
    1a1c:	000653c0 	call	653c <__extendsfdf2>
    1a20:	100b883a 	mov	r5,r2
    1a24:	180d883a 	mov	r6,r3
    1a28:	2809883a 	mov	r4,r5
    1a2c:	300b883a 	mov	r5,r6
    1a30:	00024240 	call	2424 <sin>
    1a34:	100f883a 	mov	r7,r2
    1a38:	1811883a 	mov	r8,r3
    1a3c:	e13fcd17 	ldw	r4,-204(fp)
    1a40:	e17fce17 	ldw	r5,-200(fp)
    1a44:	380d883a 	mov	r6,r7
    1a48:	400f883a 	mov	r7,r8
    1a4c:	00053f00 	call	53f0 <__muldf3>
    1a50:	1009883a 	mov	r4,r2
    1a54:	180b883a 	mov	r5,r3
    1a58:	2005883a 	mov	r2,r4
    1a5c:	2807883a 	mov	r3,r5
    1a60:	e13fcb17 	ldw	r4,-212(fp)
    1a64:	e17fcc17 	ldw	r5,-208(fp)
    1a68:	100d883a 	mov	r6,r2
    1a6c:	180f883a 	mov	r7,r3
    1a70:	0005b140 	call	5b14 <__subdf3>
    1a74:	1009883a 	mov	r4,r2
    1a78:	180b883a 	mov	r5,r3
    1a7c:	e13fcf15 	stw	r4,-196(fp)
    1a80:	e17fd015 	stw	r5,-192(fp)
    1a84:	e13f2717 	ldw	r4,-868(fp)
    1a88:	00048bc0 	call	48bc <__floatsisf>
    1a8c:	1007883a 	mov	r3,r2
    1a90:	009099b4 	movhi	r2,16998
    1a94:	10a66684 	addi	r2,r2,-26214
    1a98:	1885fff2 	custom	255,r2,r3,r2
    1a9c:	1009883a 	mov	r4,r2
    1aa0:	000653c0 	call	653c <__extendsfdf2>
    1aa4:	100b883a 	mov	r5,r2
    1aa8:	180d883a 	mov	r6,r3
    1aac:	2809883a 	mov	r4,r5
    1ab0:	300b883a 	mov	r5,r6
    1ab4:	00023380 	call	2338 <cos>
    1ab8:	100f883a 	mov	r7,r2
    1abc:	1811883a 	mov	r8,r3
    1ac0:	e13fcf17 	ldw	r4,-196(fp)
    1ac4:	e17fd017 	ldw	r5,-192(fp)
    1ac8:	380d883a 	mov	r6,r7
    1acc:	400f883a 	mov	r7,r8
    1ad0:	00053f00 	call	53f0 <__muldf3>
    1ad4:	1009883a 	mov	r4,r2
    1ad8:	180b883a 	mov	r5,r3
    1adc:	e13fd115 	stw	r4,-188(fp)
    1ae0:	e17fd215 	stw	r5,-184(fp)
    1ae4:	e13f2517 	ldw	r4,-876(fp)
    1ae8:	000653c0 	call	653c <__extendsfdf2>
    1aec:	e0bfd315 	stw	r2,-180(fp)
    1af0:	e0ffd415 	stw	r3,-176(fp)
    1af4:	e13f2717 	ldw	r4,-868(fp)
    1af8:	00048bc0 	call	48bc <__floatsisf>
    1afc:	1007883a 	mov	r3,r2
    1b00:	009099b4 	movhi	r2,16998
    1b04:	10a66684 	addi	r2,r2,-26214
    1b08:	1885fff2 	custom	255,r2,r3,r2
    1b0c:	1009883a 	mov	r4,r2
    1b10:	000653c0 	call	653c <__extendsfdf2>
    1b14:	100b883a 	mov	r5,r2
    1b18:	180d883a 	mov	r6,r3
    1b1c:	2809883a 	mov	r4,r5
    1b20:	300b883a 	mov	r5,r6
    1b24:	00024240 	call	2424 <sin>
    1b28:	100f883a 	mov	r7,r2
    1b2c:	1811883a 	mov	r8,r3
    1b30:	e13fd317 	ldw	r4,-180(fp)
    1b34:	e17fd417 	ldw	r5,-176(fp)
    1b38:	380d883a 	mov	r6,r7
    1b3c:	400f883a 	mov	r7,r8
    1b40:	00053f00 	call	53f0 <__muldf3>
    1b44:	1009883a 	mov	r4,r2
    1b48:	180b883a 	mov	r5,r3
    1b4c:	2005883a 	mov	r2,r4
    1b50:	2807883a 	mov	r3,r5
    1b54:	e13fd117 	ldw	r4,-188(fp)
    1b58:	e17fd217 	ldw	r5,-184(fp)
    1b5c:	100d883a 	mov	r6,r2
    1b60:	180f883a 	mov	r7,r3
    1b64:	00049f00 	call	49f0 <__adddf3>
    1b68:	1009883a 	mov	r4,r2
    1b6c:	180b883a 	mov	r5,r3
    1b70:	2005883a 	mov	r2,r4
    1b74:	2807883a 	mov	r3,r5
    1b78:	1009883a 	mov	r4,r2
    1b7c:	180b883a 	mov	r5,r3
    1b80:	000664c0 	call	664c <__truncdfsf2>
    1b84:	1007883a 	mov	r3,r2
    1b88:	e0ff2d15 	stw	r3,-844(fp)

				z1 = ((-(startx * cos(localRotationX / 57.4) - starty * sin(localRotationX / 57.4))) *(sin(localRotationY / 57.4)) + startz * cos(localRotationY / 57.4));
    1b8c:	e13f2017 	ldw	r4,-896(fp)
    1b90:	000653c0 	call	653c <__extendsfdf2>
    1b94:	e0bfd515 	stw	r2,-172(fp)
    1b98:	e0ffd615 	stw	r3,-168(fp)
    1b9c:	e13f2617 	ldw	r4,-872(fp)
    1ba0:	00048bc0 	call	48bc <__floatsisf>
    1ba4:	1007883a 	mov	r3,r2
    1ba8:	009099b4 	movhi	r2,16998
    1bac:	10a66684 	addi	r2,r2,-26214
    1bb0:	1885fff2 	custom	255,r2,r3,r2
    1bb4:	1009883a 	mov	r4,r2
    1bb8:	000653c0 	call	653c <__extendsfdf2>
    1bbc:	100b883a 	mov	r5,r2
    1bc0:	180d883a 	mov	r6,r3
    1bc4:	2809883a 	mov	r4,r5
    1bc8:	300b883a 	mov	r5,r6
    1bcc:	00023380 	call	2338 <cos>
    1bd0:	100f883a 	mov	r7,r2
    1bd4:	1811883a 	mov	r8,r3
    1bd8:	e13fd517 	ldw	r4,-172(fp)
    1bdc:	e17fd617 	ldw	r5,-168(fp)
    1be0:	380d883a 	mov	r6,r7
    1be4:	400f883a 	mov	r7,r8
    1be8:	00053f00 	call	53f0 <__muldf3>
    1bec:	1009883a 	mov	r4,r2
    1bf0:	180b883a 	mov	r5,r3
    1bf4:	e13fd715 	stw	r4,-164(fp)
    1bf8:	e17fd815 	stw	r5,-160(fp)
    1bfc:	e13f2117 	ldw	r4,-892(fp)
    1c00:	000653c0 	call	653c <__extendsfdf2>
    1c04:	e0bfd915 	stw	r2,-156(fp)
    1c08:	e0ffda15 	stw	r3,-152(fp)
    1c0c:	e13f2617 	ldw	r4,-872(fp)
    1c10:	00048bc0 	call	48bc <__floatsisf>
    1c14:	1007883a 	mov	r3,r2
    1c18:	009099b4 	movhi	r2,16998
    1c1c:	10a66684 	addi	r2,r2,-26214
    1c20:	1885fff2 	custom	255,r2,r3,r2
    1c24:	1009883a 	mov	r4,r2
    1c28:	000653c0 	call	653c <__extendsfdf2>
    1c2c:	100b883a 	mov	r5,r2
    1c30:	180d883a 	mov	r6,r3
    1c34:	2809883a 	mov	r4,r5
    1c38:	300b883a 	mov	r5,r6
    1c3c:	00024240 	call	2424 <sin>
    1c40:	100f883a 	mov	r7,r2
    1c44:	1811883a 	mov	r8,r3
    1c48:	e13fd917 	ldw	r4,-156(fp)
    1c4c:	e17fda17 	ldw	r5,-152(fp)
    1c50:	380d883a 	mov	r6,r7
    1c54:	400f883a 	mov	r7,r8
    1c58:	00053f00 	call	53f0 <__muldf3>
    1c5c:	1009883a 	mov	r4,r2
    1c60:	180b883a 	mov	r5,r3
    1c64:	2005883a 	mov	r2,r4
    1c68:	2807883a 	mov	r3,r5
    1c6c:	e13fd717 	ldw	r4,-164(fp)
    1c70:	e17fd817 	ldw	r5,-160(fp)
    1c74:	100d883a 	mov	r6,r2
    1c78:	180f883a 	mov	r7,r3
    1c7c:	0005b140 	call	5b14 <__subdf3>
    1c80:	1009883a 	mov	r4,r2
    1c84:	180b883a 	mov	r5,r3
    1c88:	2005883a 	mov	r2,r4
    1c8c:	2807883a 	mov	r3,r5
    1c90:	1029883a 	mov	r20,r2
    1c94:	1d60003c 	xorhi	r21,r3,32768
    1c98:	e13f2717 	ldw	r4,-868(fp)
    1c9c:	00048bc0 	call	48bc <__floatsisf>
    1ca0:	1007883a 	mov	r3,r2
    1ca4:	009099b4 	movhi	r2,16998
    1ca8:	10a66684 	addi	r2,r2,-26214
    1cac:	1885fff2 	custom	255,r2,r3,r2
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	000653c0 	call	653c <__extendsfdf2>
    1cb8:	100b883a 	mov	r5,r2
    1cbc:	180d883a 	mov	r6,r3
    1cc0:	2809883a 	mov	r4,r5
    1cc4:	300b883a 	mov	r5,r6
    1cc8:	00024240 	call	2424 <sin>
    1ccc:	100f883a 	mov	r7,r2
    1cd0:	1811883a 	mov	r8,r3
    1cd4:	a009883a 	mov	r4,r20
    1cd8:	a80b883a 	mov	r5,r21
    1cdc:	380d883a 	mov	r6,r7
    1ce0:	400f883a 	mov	r7,r8
    1ce4:	00053f00 	call	53f0 <__muldf3>
    1ce8:	1009883a 	mov	r4,r2
    1cec:	180b883a 	mov	r5,r3
    1cf0:	e13fdb15 	stw	r4,-148(fp)
    1cf4:	e17fdc15 	stw	r5,-144(fp)
    1cf8:	e13f2217 	ldw	r4,-888(fp)
    1cfc:	000653c0 	call	653c <__extendsfdf2>
    1d00:	e0bfdd15 	stw	r2,-140(fp)
    1d04:	e0ffde15 	stw	r3,-136(fp)
    1d08:	e13f2717 	ldw	r4,-868(fp)
    1d0c:	00048bc0 	call	48bc <__floatsisf>
    1d10:	1007883a 	mov	r3,r2
    1d14:	009099b4 	movhi	r2,16998
    1d18:	10a66684 	addi	r2,r2,-26214
    1d1c:	1885fff2 	custom	255,r2,r3,r2
    1d20:	1009883a 	mov	r4,r2
    1d24:	000653c0 	call	653c <__extendsfdf2>
    1d28:	100b883a 	mov	r5,r2
    1d2c:	180d883a 	mov	r6,r3
    1d30:	2809883a 	mov	r4,r5
    1d34:	300b883a 	mov	r5,r6
    1d38:	00023380 	call	2338 <cos>
    1d3c:	100f883a 	mov	r7,r2
    1d40:	1811883a 	mov	r8,r3
    1d44:	e13fdd17 	ldw	r4,-140(fp)
    1d48:	e17fde17 	ldw	r5,-136(fp)
    1d4c:	380d883a 	mov	r6,r7
    1d50:	400f883a 	mov	r7,r8
    1d54:	00053f00 	call	53f0 <__muldf3>
    1d58:	1009883a 	mov	r4,r2
    1d5c:	180b883a 	mov	r5,r3
    1d60:	2005883a 	mov	r2,r4
    1d64:	2807883a 	mov	r3,r5
    1d68:	e13fdb17 	ldw	r4,-148(fp)
    1d6c:	e17fdc17 	ldw	r5,-144(fp)
    1d70:	100d883a 	mov	r6,r2
    1d74:	180f883a 	mov	r7,r3
    1d78:	00049f00 	call	49f0 <__adddf3>
    1d7c:	1009883a 	mov	r4,r2
    1d80:	180b883a 	mov	r5,r3
    1d84:	2005883a 	mov	r2,r4
    1d88:	2807883a 	mov	r3,r5
    1d8c:	1009883a 	mov	r4,r2
    1d90:	180b883a 	mov	r5,r3
    1d94:	000664c0 	call	664c <__truncdfsf2>
    1d98:	1007883a 	mov	r3,r2
    1d9c:	e0ff2c15 	stw	r3,-848(fp)
				z2 = ((-(endx * cos(localRotationX / 57.4) - endy * sin(localRotationX / 57.4))) * (sin(localRotationY / 57.4)) + endz * cos(localRotationY / 57.4));
    1da0:	e13f2317 	ldw	r4,-884(fp)
    1da4:	000653c0 	call	653c <__extendsfdf2>
    1da8:	e0bfdf15 	stw	r2,-132(fp)
    1dac:	e0ffe015 	stw	r3,-128(fp)
    1db0:	e13f2617 	ldw	r4,-872(fp)
    1db4:	00048bc0 	call	48bc <__floatsisf>
    1db8:	1007883a 	mov	r3,r2
    1dbc:	009099b4 	movhi	r2,16998
    1dc0:	10a66684 	addi	r2,r2,-26214
    1dc4:	1885fff2 	custom	255,r2,r3,r2
    1dc8:	1009883a 	mov	r4,r2
    1dcc:	000653c0 	call	653c <__extendsfdf2>
    1dd0:	100b883a 	mov	r5,r2
    1dd4:	180d883a 	mov	r6,r3
    1dd8:	2809883a 	mov	r4,r5
    1ddc:	300b883a 	mov	r5,r6
    1de0:	00023380 	call	2338 <cos>
    1de4:	100f883a 	mov	r7,r2
    1de8:	1811883a 	mov	r8,r3
    1dec:	e13fdf17 	ldw	r4,-132(fp)
    1df0:	e17fe017 	ldw	r5,-128(fp)
    1df4:	380d883a 	mov	r6,r7
    1df8:	400f883a 	mov	r7,r8
    1dfc:	00053f00 	call	53f0 <__muldf3>
    1e00:	1009883a 	mov	r4,r2
    1e04:	180b883a 	mov	r5,r3
    1e08:	e13fe115 	stw	r4,-124(fp)
    1e0c:	e17fe215 	stw	r5,-120(fp)
    1e10:	e13f2417 	ldw	r4,-880(fp)
    1e14:	000653c0 	call	653c <__extendsfdf2>
    1e18:	e0bfe315 	stw	r2,-116(fp)
    1e1c:	e0ffe415 	stw	r3,-112(fp)
    1e20:	e13f2617 	ldw	r4,-872(fp)
    1e24:	00048bc0 	call	48bc <__floatsisf>
    1e28:	1007883a 	mov	r3,r2
    1e2c:	009099b4 	movhi	r2,16998
    1e30:	10a66684 	addi	r2,r2,-26214
    1e34:	1885fff2 	custom	255,r2,r3,r2
    1e38:	1009883a 	mov	r4,r2
    1e3c:	000653c0 	call	653c <__extendsfdf2>
    1e40:	100b883a 	mov	r5,r2
    1e44:	180d883a 	mov	r6,r3
    1e48:	2809883a 	mov	r4,r5
    1e4c:	300b883a 	mov	r5,r6
    1e50:	00024240 	call	2424 <sin>
    1e54:	100f883a 	mov	r7,r2
    1e58:	1811883a 	mov	r8,r3
    1e5c:	e13fe317 	ldw	r4,-116(fp)
    1e60:	e17fe417 	ldw	r5,-112(fp)
    1e64:	380d883a 	mov	r6,r7
    1e68:	400f883a 	mov	r7,r8
    1e6c:	00053f00 	call	53f0 <__muldf3>
    1e70:	1009883a 	mov	r4,r2
    1e74:	180b883a 	mov	r5,r3
    1e78:	2005883a 	mov	r2,r4
    1e7c:	2807883a 	mov	r3,r5
    1e80:	e13fe117 	ldw	r4,-124(fp)
    1e84:	e17fe217 	ldw	r5,-120(fp)
    1e88:	100d883a 	mov	r6,r2
    1e8c:	180f883a 	mov	r7,r3
    1e90:	0005b140 	call	5b14 <__subdf3>
    1e94:	1009883a 	mov	r4,r2
    1e98:	180b883a 	mov	r5,r3
    1e9c:	2005883a 	mov	r2,r4
    1ea0:	2807883a 	mov	r3,r5
    1ea4:	102d883a 	mov	r22,r2
    1ea8:	1de0003c 	xorhi	r23,r3,32768
    1eac:	e13f2717 	ldw	r4,-868(fp)
    1eb0:	00048bc0 	call	48bc <__floatsisf>
    1eb4:	1007883a 	mov	r3,r2
    1eb8:	009099b4 	movhi	r2,16998
    1ebc:	10a66684 	addi	r2,r2,-26214
    1ec0:	1885fff2 	custom	255,r2,r3,r2
    1ec4:	1009883a 	mov	r4,r2
    1ec8:	000653c0 	call	653c <__extendsfdf2>
    1ecc:	100b883a 	mov	r5,r2
    1ed0:	180d883a 	mov	r6,r3
    1ed4:	2809883a 	mov	r4,r5
    1ed8:	300b883a 	mov	r5,r6
    1edc:	00024240 	call	2424 <sin>
    1ee0:	100f883a 	mov	r7,r2
    1ee4:	1811883a 	mov	r8,r3
    1ee8:	b009883a 	mov	r4,r22
    1eec:	b80b883a 	mov	r5,r23
    1ef0:	380d883a 	mov	r6,r7
    1ef4:	400f883a 	mov	r7,r8
    1ef8:	00053f00 	call	53f0 <__muldf3>
    1efc:	1009883a 	mov	r4,r2
    1f00:	180b883a 	mov	r5,r3
    1f04:	e13fe515 	stw	r4,-108(fp)
    1f08:	e17fe615 	stw	r5,-104(fp)
    1f0c:	e13f2517 	ldw	r4,-876(fp)
    1f10:	000653c0 	call	653c <__extendsfdf2>
    1f14:	e0bfe715 	stw	r2,-100(fp)
    1f18:	e0ffe815 	stw	r3,-96(fp)
    1f1c:	e13f2717 	ldw	r4,-868(fp)
    1f20:	00048bc0 	call	48bc <__floatsisf>
    1f24:	1007883a 	mov	r3,r2
    1f28:	009099b4 	movhi	r2,16998
    1f2c:	10a66684 	addi	r2,r2,-26214
    1f30:	1885fff2 	custom	255,r2,r3,r2
    1f34:	1009883a 	mov	r4,r2
    1f38:	000653c0 	call	653c <__extendsfdf2>
    1f3c:	100b883a 	mov	r5,r2
    1f40:	180d883a 	mov	r6,r3
    1f44:	2809883a 	mov	r4,r5
    1f48:	300b883a 	mov	r5,r6
    1f4c:	00023380 	call	2338 <cos>
    1f50:	100f883a 	mov	r7,r2
    1f54:	1811883a 	mov	r8,r3
    1f58:	e13fe717 	ldw	r4,-100(fp)
    1f5c:	e17fe817 	ldw	r5,-96(fp)
    1f60:	380d883a 	mov	r6,r7
    1f64:	400f883a 	mov	r7,r8
    1f68:	00053f00 	call	53f0 <__muldf3>
    1f6c:	1009883a 	mov	r4,r2
    1f70:	180b883a 	mov	r5,r3
    1f74:	2005883a 	mov	r2,r4
    1f78:	2807883a 	mov	r3,r5
    1f7c:	e13fe517 	ldw	r4,-108(fp)
    1f80:	e17fe617 	ldw	r5,-104(fp)
    1f84:	100d883a 	mov	r6,r2
    1f88:	180f883a 	mov	r7,r3
    1f8c:	00049f00 	call	49f0 <__adddf3>
    1f90:	1009883a 	mov	r4,r2
    1f94:	180b883a 	mov	r5,r3
    1f98:	2005883a 	mov	r2,r4
    1f9c:	2807883a 	mov	r3,r5
    1fa0:	1009883a 	mov	r4,r2
    1fa4:	180b883a 	mov	r5,r3
    1fa8:	000664c0 	call	664c <__truncdfsf2>
    1fac:	1007883a 	mov	r3,r2
    1fb0:	e0ff2f15 	stw	r3,-836(fp)



				y1 = z1;
    1fb4:	e0bf2c17 	ldw	r2,-848(fp)
    1fb8:	e0bf2b15 	stw	r2,-852(fp)
				y2 = z2;
    1fbc:	e0bf2f17 	ldw	r2,-836(fp)
    1fc0:	e0bf2e15 	stw	r2,-840(fp)
				if (zoomscreen != prevousZoomScreenBR)
    1fc4:	e13f2817 	ldw	r4,-864(fp)
    1fc8:	e17f1717 	ldw	r5,-932(fp)
    1fcc:	00046600 	call	4660 <__eqsf2>
    1fd0:	10004726 	beq	r2,zero,20f0 <task2+0x1638>
				{
					drawLine((x1 * prevousZoomScreenBR), (y1 * prevousZoomScreenBR), (x2 * prevousZoomScreenBR), (y2 * prevousZoomScreenBR), midX, midY, 1 , 1, 0x0000);
    1fd4:	e0ff2a17 	ldw	r3,-856(fp)
    1fd8:	e0bf1717 	ldw	r2,-932(fp)
    1fdc:	1885ff32 	custom	252,r2,r3,r2
    1fe0:	e0bfe915 	stw	r2,-92(fp)
    1fe4:	e0ff2b17 	ldw	r3,-852(fp)
    1fe8:	e0bf1717 	ldw	r2,-932(fp)
    1fec:	1885ff32 	custom	252,r2,r3,r2
    1ff0:	e0bfea15 	stw	r2,-88(fp)
    1ff4:	e0ff2d17 	ldw	r3,-844(fp)
    1ff8:	e0bf1717 	ldw	r2,-932(fp)
    1ffc:	1885ff32 	custom	252,r2,r3,r2
    2000:	e0bfeb15 	stw	r2,-84(fp)
    2004:	e0ff2e17 	ldw	r3,-840(fp)
    2008:	e0bf1717 	ldw	r2,-932(fp)
    200c:	1885ff32 	custom	252,r2,r3,r2
    2010:	e0bfec15 	stw	r2,-80(fp)
    2014:	e13f1c17 	ldw	r4,-912(fp)
    2018:	00048bc0 	call	48bc <__floatsisf>
    201c:	e0bfed15 	stw	r2,-76(fp)
    2020:	e13f1d17 	ldw	r4,-908(fp)
    2024:	00048bc0 	call	48bc <__floatsisf>
    2028:	1007883a 	mov	r3,r2
    202c:	e13fed17 	ldw	r4,-76(fp)
    2030:	d9000015 	stw	r4,0(sp)
    2034:	d8c00115 	stw	r3,4(sp)
    2038:	00800044 	movi	r2,1
    203c:	d8800215 	stw	r2,8(sp)
    2040:	00800044 	movi	r2,1
    2044:	d8800315 	stw	r2,12(sp)
    2048:	d8000415 	stw	zero,16(sp)
    204c:	e13fe917 	ldw	r4,-92(fp)
    2050:	e17fea17 	ldw	r5,-88(fp)
    2054:	e1bfeb17 	ldw	r6,-84(fp)
    2058:	e1ffec17 	ldw	r7,-80(fp)
    205c:	00004980 	call	498 <drawLine>

					drawLine((x1 * zoomscreen), (y1 * zoomscreen), (x2 * zoomscreen), (y2 * zoomscreen),midX, midY, 1 , 0, color);
    2060:	e0ff2a17 	ldw	r3,-856(fp)
    2064:	e0bf2817 	ldw	r2,-864(fp)
    2068:	1885ff32 	custom	252,r2,r3,r2
    206c:	e0bfee15 	stw	r2,-72(fp)
    2070:	e0ff2b17 	ldw	r3,-852(fp)
    2074:	e0bf2817 	ldw	r2,-864(fp)
    2078:	1885ff32 	custom	252,r2,r3,r2
    207c:	e0bfef15 	stw	r2,-68(fp)
    2080:	e0ff2d17 	ldw	r3,-844(fp)
    2084:	e0bf2817 	ldw	r2,-864(fp)
    2088:	1885ff32 	custom	252,r2,r3,r2
    208c:	e0bff015 	stw	r2,-64(fp)
    2090:	e0ff2e17 	ldw	r3,-840(fp)
    2094:	e0bf2817 	ldw	r2,-864(fp)
    2098:	1885ff32 	custom	252,r2,r3,r2
    209c:	e0bff115 	stw	r2,-60(fp)
    20a0:	e13f1c17 	ldw	r4,-912(fp)
    20a4:	00048bc0 	call	48bc <__floatsisf>
    20a8:	e0bff215 	stw	r2,-56(fp)
    20ac:	e13f1d17 	ldw	r4,-908(fp)
    20b0:	00048bc0 	call	48bc <__floatsisf>
    20b4:	1007883a 	mov	r3,r2
    20b8:	e0bf1e0f 	ldh	r2,-904(fp)
    20bc:	e13ff217 	ldw	r4,-56(fp)
    20c0:	d9000015 	stw	r4,0(sp)
    20c4:	d8c00115 	stw	r3,4(sp)
    20c8:	00c00044 	movi	r3,1
    20cc:	d8c00215 	stw	r3,8(sp)
    20d0:	d8000315 	stw	zero,12(sp)
    20d4:	d8800415 	stw	r2,16(sp)
    20d8:	e13fee17 	ldw	r4,-72(fp)
    20dc:	e17fef17 	ldw	r5,-68(fp)
    20e0:	e1bff017 	ldw	r6,-64(fp)
    20e4:	e1fff117 	ldw	r7,-60(fp)
    20e8:	00004980 	call	498 <drawLine>
    20ec:	00002306 	br	217c <task2+0x16c4>

				}
				else
				{
					drawLine((x1 * zoomscreen), (y1 * zoomscreen), (x2 * zoomscreen), (y2 * zoomscreen), midX, midY, 1 , 0, color);
    20f0:	e0ff2a17 	ldw	r3,-856(fp)
    20f4:	e0bf2817 	ldw	r2,-864(fp)
    20f8:	1885ff32 	custom	252,r2,r3,r2
    20fc:	e0bff315 	stw	r2,-52(fp)
    2100:	e0ff2b17 	ldw	r3,-852(fp)
    2104:	e0bf2817 	ldw	r2,-864(fp)
    2108:	1885ff32 	custom	252,r2,r3,r2
    210c:	e0bff415 	stw	r2,-48(fp)
    2110:	e0ff2d17 	ldw	r3,-844(fp)
    2114:	e0bf2817 	ldw	r2,-864(fp)
    2118:	1885ff32 	custom	252,r2,r3,r2
    211c:	e0bff515 	stw	r2,-44(fp)
    2120:	e0ff2e17 	ldw	r3,-840(fp)
    2124:	e0bf2817 	ldw	r2,-864(fp)
    2128:	1885ff32 	custom	252,r2,r3,r2
    212c:	e0bff615 	stw	r2,-40(fp)
    2130:	e13f1c17 	ldw	r4,-912(fp)
    2134:	00048bc0 	call	48bc <__floatsisf>
    2138:	e0bff715 	stw	r2,-36(fp)
    213c:	e13f1d17 	ldw	r4,-908(fp)
    2140:	00048bc0 	call	48bc <__floatsisf>
    2144:	1007883a 	mov	r3,r2
    2148:	e0bf1e0f 	ldh	r2,-904(fp)
    214c:	e13ff717 	ldw	r4,-36(fp)
    2150:	d9000015 	stw	r4,0(sp)
    2154:	d8c00115 	stw	r3,4(sp)
    2158:	00c00044 	movi	r3,1
    215c:	d8c00215 	stw	r3,8(sp)
    2160:	d8000315 	stw	zero,12(sp)
    2164:	d8800415 	stw	r2,16(sp)
    2168:	e13ff317 	ldw	r4,-52(fp)
    216c:	e17ff417 	ldw	r5,-48(fp)
    2170:	e1bff517 	ldw	r6,-44(fp)
    2174:	e1fff617 	ldw	r7,-40(fp)
    2178:	00004980 	call	498 <drawLine>
			sprintf(text_bottom_row, "Zoom: %f", zoomscreen);
			VGA_text (1, 2, text_bottom_row);
			sprintf(text_bottom_row2, "Rotation X,Y: %d,%d", rotation[0], rotation[1]);
			VGA_text (1, 3, text_bottom_row2);

			for (linesDrawn = 0; linesDrawn < 8; linesDrawn++)
    217c:	e0bf1b17 	ldw	r2,-916(fp)
    2180:	10800044 	addi	r2,r2,1
    2184:	e0bf1b15 	stw	r2,-916(fp)
    2188:	e0bf1b17 	ldw	r2,-916(fp)
    218c:	10800210 	cmplti	r2,r2,8
    2190:	103ad21e 	bne	r2,zero,cdc <__alt_mem_Flash_flash_data+0xf4000cdc>

				}

			}

			if (zoomscreen != prevousZoomScreenBR)
    2194:	e13f2817 	ldw	r4,-864(fp)
    2198:	e17f1717 	ldw	r5,-932(fp)
    219c:	00046600 	call	4660 <__eqsf2>
    21a0:	10000226 	beq	r2,zero,21ac <task2+0x16f4>
			{
				prevousZoomScreenBR = zoomscreen;
    21a4:	e0bf2817 	ldw	r2,-864(fp)
    21a8:	e0bf1715 	stw	r2,-932(fp)
			}

			previousXRotation = localRotationX;
    21ac:	e0bf2617 	ldw	r2,-872(fp)
    21b0:	e0bf1815 	stw	r2,-928(fp)
			previousYRotation = localRotationY;
    21b4:	e0bf2717 	ldw	r2,-868(fp)
    21b8:	e0bf1915 	stw	r2,-924(fp)

			ALT_SEM_POST(sem_objectDrawn);
    21bc:	d0a7ef17 	ldw	r2,-24644(gp)
    21c0:	1009883a 	mov	r4,r2
    21c4:	001a9900 	call	1a990 <OSSemPost>

		}
    21c8:	003a7b06 	br	bb8 <__alt_mem_Flash_flash_data+0xf4000bb8>

000021cc <main>:

}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
    21cc:	deffc304 	addi	sp,sp,-244
    21d0:	dfc03c15 	stw	ra,240(sp)
    21d4:	df003b15 	stw	fp,236(sp)
    21d8:	df003b04 	addi	fp,sp,236
	int test[48] = {0,100,0,100,0,100,0,100,0,100,0,-100,0,100,0,-100,0,100,0,100,0,-100,0,-100,-100,0,-100,-100,0,100,100,0,-100,100,0,100,-100,0,-100,100,0,-100,-100,0,100,100,0,100};
    21dc:	008000b4 	movhi	r2,2
    21e0:	10822c04 	addi	r2,r2,2224
    21e4:	e0ffcd04 	addi	r3,fp,-204
    21e8:	100b883a 	mov	r5,r2
    21ec:	00803004 	movi	r2,192
    21f0:	1809883a 	mov	r4,r3
    21f4:	100d883a 	mov	r6,r2
    21f8:	00070180 	call	7018 <memcpy>
	startEndnodes = malloc(sizeof(int) * 48);
    21fc:	01003004 	movi	r4,192
    2200:	00068480 	call	6848 <malloc>
    2204:	d0a7ed15 	stw	r2,-24652(gp)
	startEndnodes = test;
    2208:	e0bfcd04 	addi	r2,fp,-204
    220c:	d0a7ed15 	stw	r2,-24652(gp)

	int rotatevalue[2] = {0,0};
    2210:	e03ffd15 	stw	zero,-12(fp)
    2214:	e03ffe15 	stw	zero,-8(fp)
	rotation = malloc(sizeof(int)*2);
    2218:	01000204 	movi	r4,8
    221c:	00068480 	call	6848 <malloc>
    2220:	d0a7ee15 	stw	r2,-24648(gp)
	rotation = rotatevalue;
    2224:	e0bffd04 	addi	r2,fp,-12
    2228:	d0a7ee15 	stw	r2,-24648(gp)

	float zoom = 0.8;
    222c:	008fd374 	movhi	r2,16205
    2230:	10b33344 	addi	r2,r2,-13107
    2234:	e0bfff15 	stw	r2,-4(fp)
	zoomscreenpointer = malloc(sizeof(float));
    2238:	01000104 	movi	r4,4
    223c:	00068480 	call	6848 <malloc>
    2240:	d0a7f015 	stw	r2,-24640(gp)
	zoomscreenpointer = &zoom;
    2244:	e0bfff04 	addi	r2,fp,-4
    2248:	d0a7f015 	stw	r2,-24640(gp)

	printf("\n array set \n");
    224c:	010000b4 	movhi	r4,2
    2250:	21022804 	addi	r4,r4,2208
    2254:	00072600 	call	7260 <puts>
    2258:	d0a7ef04 	addi	r2,gp,-24644
    225c:	e0bfcb15 	stw	r2,-212(fp)
    2260:	00800044 	movi	r2,1
    2264:	e0bfcc0d 	sth	r2,-208(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    2268:	e0bfcc0b 	ldhu	r2,-208(fp)
    226c:	1009883a 	mov	r4,r2
    2270:	001a2540 	call	1a254 <OSSemCreate>
    2274:	1007883a 	mov	r3,r2
    2278:	e0bfcb17 	ldw	r2,-212(fp)
    227c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    2280:	e0bfcb17 	ldw	r2,-212(fp)
    2284:	10800017 	ldw	r2,0(r2)
    2288:	10000226 	beq	r2,zero,2294 <main+0xc8>
    228c:	0005883a 	mov	r2,zero
    2290:	00000106 	br	2298 <main+0xcc>
    2294:	00bfffc4 	movi	r2,-1


	int err = ALT_SEM_CREATE(&sem_objectDrawn, 1);
    2298:	e0bfca15 	stw	r2,-216(fp)
  OSTaskCreateExt(task1,
    229c:	00800044 	movi	r2,1
    22a0:	d8800015 	stw	r2,0(sp)
    22a4:	008000b4 	movhi	r2,2
    22a8:	10940104 	addi	r2,r2,20484
    22ac:	d8800115 	stw	r2,4(sp)
    22b0:	00820004 	movi	r2,2048
    22b4:	d8800215 	stw	r2,8(sp)
    22b8:	d8000315 	stw	zero,12(sp)
    22bc:	d8000415 	stw	zero,16(sp)
    22c0:	01000034 	movhi	r4,0
    22c4:	21021b04 	addi	r4,r4,2156
    22c8:	000b883a 	mov	r5,zero
    22cc:	018000b4 	movhi	r6,2
    22d0:	319c0004 	addi	r6,r6,28672
    22d4:	01c00044 	movi	r7,1
    22d8:	001b3a80 	call	1b3a8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
    22dc:	00800084 	movi	r2,2
    22e0:	d8800015 	stw	r2,0(sp)
    22e4:	008000b4 	movhi	r2,2
    22e8:	109c0104 	addi	r2,r2,28676
    22ec:	d8800115 	stw	r2,4(sp)
    22f0:	00820004 	movi	r2,2048
    22f4:	d8800215 	stw	r2,8(sp)
    22f8:	d8000315 	stw	zero,12(sp)
    22fc:	d8000415 	stw	zero,16(sp)
    2300:	01000034 	movhi	r4,0
    2304:	2102ae04 	addi	r4,r4,2744
    2308:	000b883a 	mov	r5,zero
    230c:	018000f4 	movhi	r6,3
    2310:	31a40004 	addi	r6,r6,-28672
    2314:	01c00084 	movi	r7,2
    2318:	001b3a80 	call	1b3a8 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
    231c:	0015a080 	call	15a08 <OSStart>
  return 0;
    2320:	0005883a 	mov	r2,zero
}
    2324:	e037883a 	mov	sp,fp
    2328:	dfc00117 	ldw	ra,4(sp)
    232c:	df000017 	ldw	fp,0(sp)
    2330:	dec00204 	addi	sp,sp,8
    2334:	f800283a 	ret

00002338 <cos>:
    2338:	00a00034 	movhi	r2,32768
    233c:	defffa04 	addi	sp,sp,-24
    2340:	10bfffc4 	addi	r2,r2,-1
    2344:	00cffa74 	movhi	r3,16361
    2348:	dfc00515 	stw	ra,20(sp)
    234c:	2884703a 	and	r2,r5,r2
    2350:	18c87ec4 	addi	r3,r3,8699
    2354:	280f883a 	mov	r7,r5
    2358:	1880170e 	bge	r3,r2,23b8 <cos+0x80>
    235c:	00dffc34 	movhi	r3,32752
    2360:	18ffffc4 	addi	r3,r3,-1
    2364:	1880050e 	bge	r3,r2,237c <cos+0x44>
    2368:	200d883a 	mov	r6,r4
    236c:	0005b140 	call	5b14 <__subdf3>
    2370:	dfc00517 	ldw	ra,20(sp)
    2374:	dec00604 	addi	sp,sp,24
    2378:	f800283a 	ret
    237c:	d9800104 	addi	r6,sp,4
    2380:	00025140 	call	2514 <__ieee754_rem_pio2>
    2384:	108000cc 	andi	r2,r2,3
    2388:	00c00044 	movi	r3,1
    238c:	10c01726 	beq	r2,r3,23ec <cos+0xb4>
    2390:	01000084 	movi	r4,2
    2394:	11000e26 	beq	r2,r4,23d0 <cos+0x98>
    2398:	10001c26 	beq	r2,zero,240c <cos+0xd4>
    239c:	d9000117 	ldw	r4,4(sp)
    23a0:	d9400217 	ldw	r5,8(sp)
    23a4:	d9800317 	ldw	r6,12(sp)
    23a8:	d9c00417 	ldw	r7,16(sp)
    23ac:	d8c00015 	stw	r3,0(sp)
    23b0:	0003e7c0 	call	3e7c <__kernel_sin>
    23b4:	003fee06 	br	2370 <__alt_mem_Flash_flash_data+0xf4002370>
    23b8:	000d883a 	mov	r6,zero
    23bc:	000f883a 	mov	r7,zero
    23c0:	0002cb00 	call	2cb0 <__kernel_cos>
    23c4:	dfc00517 	ldw	ra,20(sp)
    23c8:	dec00604 	addi	sp,sp,24
    23cc:	f800283a 	ret
    23d0:	d9000117 	ldw	r4,4(sp)
    23d4:	d9400217 	ldw	r5,8(sp)
    23d8:	d9800317 	ldw	r6,12(sp)
    23dc:	d9c00417 	ldw	r7,16(sp)
    23e0:	0002cb00 	call	2cb0 <__kernel_cos>
    23e4:	18e0003c 	xorhi	r3,r3,32768
    23e8:	003fe106 	br	2370 <__alt_mem_Flash_flash_data+0xf4002370>
    23ec:	d9000117 	ldw	r4,4(sp)
    23f0:	d9400217 	ldw	r5,8(sp)
    23f4:	d9800317 	ldw	r6,12(sp)
    23f8:	d9c00417 	ldw	r7,16(sp)
    23fc:	d8800015 	stw	r2,0(sp)
    2400:	0003e7c0 	call	3e7c <__kernel_sin>
    2404:	18e0003c 	xorhi	r3,r3,32768
    2408:	003fd906 	br	2370 <__alt_mem_Flash_flash_data+0xf4002370>
    240c:	d9000117 	ldw	r4,4(sp)
    2410:	d9400217 	ldw	r5,8(sp)
    2414:	d9800317 	ldw	r6,12(sp)
    2418:	d9c00417 	ldw	r7,16(sp)
    241c:	0002cb00 	call	2cb0 <__kernel_cos>
    2420:	003fd306 	br	2370 <__alt_mem_Flash_flash_data+0xf4002370>

00002424 <sin>:
    2424:	00a00034 	movhi	r2,32768
    2428:	defffa04 	addi	sp,sp,-24
    242c:	10bfffc4 	addi	r2,r2,-1
    2430:	00cffa74 	movhi	r3,16361
    2434:	dfc00515 	stw	ra,20(sp)
    2438:	2884703a 	and	r2,r5,r2
    243c:	18c87ec4 	addi	r3,r3,8699
    2440:	280f883a 	mov	r7,r5
    2444:	1880170e 	bge	r3,r2,24a4 <sin+0x80>
    2448:	00dffc34 	movhi	r3,32752
    244c:	18ffffc4 	addi	r3,r3,-1
    2450:	1880050e 	bge	r3,r2,2468 <sin+0x44>
    2454:	200d883a 	mov	r6,r4
    2458:	0005b140 	call	5b14 <__subdf3>
    245c:	dfc00517 	ldw	ra,20(sp)
    2460:	dec00604 	addi	sp,sp,24
    2464:	f800283a 	ret
    2468:	d9800104 	addi	r6,sp,4
    246c:	00025140 	call	2514 <__ieee754_rem_pio2>
    2470:	108000cc 	andi	r2,r2,3
    2474:	00c00044 	movi	r3,1
    2478:	10c01926 	beq	r2,r3,24e0 <sin+0xbc>
    247c:	01000084 	movi	r4,2
    2480:	11000f26 	beq	r2,r4,24c0 <sin+0x9c>
    2484:	10001c26 	beq	r2,zero,24f8 <sin+0xd4>
    2488:	d9000117 	ldw	r4,4(sp)
    248c:	d9400217 	ldw	r5,8(sp)
    2490:	d9800317 	ldw	r6,12(sp)
    2494:	d9c00417 	ldw	r7,16(sp)
    2498:	0002cb00 	call	2cb0 <__kernel_cos>
    249c:	18e0003c 	xorhi	r3,r3,32768
    24a0:	003fee06 	br	245c <__alt_mem_Flash_flash_data+0xf400245c>
    24a4:	d8000015 	stw	zero,0(sp)
    24a8:	000d883a 	mov	r6,zero
    24ac:	000f883a 	mov	r7,zero
    24b0:	0003e7c0 	call	3e7c <__kernel_sin>
    24b4:	dfc00517 	ldw	ra,20(sp)
    24b8:	dec00604 	addi	sp,sp,24
    24bc:	f800283a 	ret
    24c0:	d9000117 	ldw	r4,4(sp)
    24c4:	d9400217 	ldw	r5,8(sp)
    24c8:	d9800317 	ldw	r6,12(sp)
    24cc:	d9c00417 	ldw	r7,16(sp)
    24d0:	d8c00015 	stw	r3,0(sp)
    24d4:	0003e7c0 	call	3e7c <__kernel_sin>
    24d8:	18e0003c 	xorhi	r3,r3,32768
    24dc:	003fdf06 	br	245c <__alt_mem_Flash_flash_data+0xf400245c>
    24e0:	d9000117 	ldw	r4,4(sp)
    24e4:	d9400217 	ldw	r5,8(sp)
    24e8:	d9800317 	ldw	r6,12(sp)
    24ec:	d9c00417 	ldw	r7,16(sp)
    24f0:	0002cb00 	call	2cb0 <__kernel_cos>
    24f4:	003fd906 	br	245c <__alt_mem_Flash_flash_data+0xf400245c>
    24f8:	d9000117 	ldw	r4,4(sp)
    24fc:	d9400217 	ldw	r5,8(sp)
    2500:	d9800317 	ldw	r6,12(sp)
    2504:	d9c00417 	ldw	r7,16(sp)
    2508:	d8c00015 	stw	r3,0(sp)
    250c:	0003e7c0 	call	3e7c <__kernel_sin>
    2510:	003fd206 	br	245c <__alt_mem_Flash_flash_data+0xf400245c>

00002514 <__ieee754_rem_pio2>:
    2514:	02200034 	movhi	r8,32768
    2518:	deffea04 	addi	sp,sp,-88
    251c:	423fffc4 	addi	r8,r8,-1
    2520:	00cffa74 	movhi	r3,16361
    2524:	ddc01315 	stw	r23,76(sp)
    2528:	dc400d15 	stw	r17,52(sp)
    252c:	dfc01515 	stw	ra,84(sp)
    2530:	df001415 	stw	fp,80(sp)
    2534:	dd801215 	stw	r22,72(sp)
    2538:	dd401115 	stw	r21,68(sp)
    253c:	dd001015 	stw	r20,64(sp)
    2540:	dcc00f15 	stw	r19,60(sp)
    2544:	dc800e15 	stw	r18,56(sp)
    2548:	dc000c15 	stw	r16,48(sp)
    254c:	2a2e703a 	and	r23,r5,r8
    2550:	18c87ec4 	addi	r3,r3,8699
    2554:	2823883a 	mov	r17,r5
    2558:	1dc0790e 	bge	r3,r23,2740 <__ieee754_rem_pio2+0x22c>
    255c:	009000f4 	movhi	r2,16387
    2560:	10b65ec4 	addi	r2,r2,-9861
    2564:	3021883a 	mov	r16,r6
    2568:	2027883a 	mov	r19,r4
    256c:	15c02316 	blt	r2,r23,25fc <__ieee754_rem_pio2+0xe8>
    2570:	01cffe74 	movhi	r7,16377
    2574:	39c87ec4 	addi	r7,r7,8699
    2578:	01951034 	movhi	r6,21568
    257c:	0141800e 	bge	zero,r5,2b80 <__ieee754_rem_pio2+0x66c>
    2580:	0005b140 	call	5b14 <__subdf3>
    2584:	1025883a 	mov	r18,r2
    2588:	008ffe74 	movhi	r2,16377
    258c:	10887ec4 	addi	r2,r2,8699
    2590:	1823883a 	mov	r17,r3
    2594:	b8808426 	beq	r23,r2,27a8 <__ieee754_rem_pio2+0x294>
    2598:	018698b4 	movhi	r6,6754
    259c:	01cf7474 	movhi	r7,15825
    25a0:	3198cc44 	addi	r6,r6,25393
    25a4:	39ed1844 	addi	r7,r7,-19359
    25a8:	9009883a 	mov	r4,r18
    25ac:	180b883a 	mov	r5,r3
    25b0:	0005b140 	call	5b14 <__subdf3>
    25b4:	100d883a 	mov	r6,r2
    25b8:	180f883a 	mov	r7,r3
    25bc:	9009883a 	mov	r4,r18
    25c0:	880b883a 	mov	r5,r17
    25c4:	80800015 	stw	r2,0(r16)
    25c8:	80c00115 	stw	r3,4(r16)
    25cc:	0005b140 	call	5b14 <__subdf3>
    25d0:	018698b4 	movhi	r6,6754
    25d4:	01cf7474 	movhi	r7,15825
    25d8:	1009883a 	mov	r4,r2
    25dc:	180b883a 	mov	r5,r3
    25e0:	3198cc44 	addi	r6,r6,25393
    25e4:	39ed1844 	addi	r7,r7,-19359
    25e8:	0005b140 	call	5b14 <__subdf3>
    25ec:	80800215 	stw	r2,8(r16)
    25f0:	80c00315 	stw	r3,12(r16)
    25f4:	00800044 	movi	r2,1
    25f8:	00005606 	br	2754 <__ieee754_rem_pio2+0x240>
    25fc:	00904e74 	movhi	r2,16697
    2600:	10887ec4 	addi	r2,r2,8699
    2604:	15c0890e 	bge	r2,r23,282c <__ieee754_rem_pio2+0x318>
    2608:	009ffc34 	movhi	r2,32752
    260c:	10bfffc4 	addi	r2,r2,-1
    2610:	15c05c16 	blt	r2,r23,2784 <__ieee754_rem_pio2+0x270>
    2614:	b829d53a 	srai	r20,r23,20
    2618:	a53efa84 	addi	r20,r20,-1046
    261c:	a024953a 	slli	r18,r20,20
    2620:	bca5c83a 	sub	r18,r23,r18
    2624:	900b883a 	mov	r5,r18
    2628:	00063e40 	call	63e4 <__fixdfsi>
    262c:	1009883a 	mov	r4,r2
    2630:	000646c0 	call	646c <__floatsidf>
    2634:	9809883a 	mov	r4,r19
    2638:	900b883a 	mov	r5,r18
    263c:	100d883a 	mov	r6,r2
    2640:	180f883a 	mov	r7,r3
    2644:	d8800215 	stw	r2,8(sp)
    2648:	d8c00315 	stw	r3,12(sp)
    264c:	0005b140 	call	5b14 <__subdf3>
    2650:	000d883a 	mov	r6,zero
    2654:	01d05c34 	movhi	r7,16752
    2658:	1009883a 	mov	r4,r2
    265c:	180b883a 	mov	r5,r3
    2660:	00053f00 	call	53f0 <__muldf3>
    2664:	180b883a 	mov	r5,r3
    2668:	1009883a 	mov	r4,r2
    266c:	182b883a 	mov	r21,r3
    2670:	102d883a 	mov	r22,r2
    2674:	00063e40 	call	63e4 <__fixdfsi>
    2678:	1009883a 	mov	r4,r2
    267c:	000646c0 	call	646c <__floatsidf>
    2680:	100d883a 	mov	r6,r2
    2684:	180f883a 	mov	r7,r3
    2688:	b009883a 	mov	r4,r22
    268c:	a80b883a 	mov	r5,r21
    2690:	1027883a 	mov	r19,r2
    2694:	1825883a 	mov	r18,r3
    2698:	d8800415 	stw	r2,16(sp)
    269c:	d8c00515 	stw	r3,20(sp)
    26a0:	0005b140 	call	5b14 <__subdf3>
    26a4:	1009883a 	mov	r4,r2
    26a8:	180b883a 	mov	r5,r3
    26ac:	000d883a 	mov	r6,zero
    26b0:	01d05c34 	movhi	r7,16752
    26b4:	00053f00 	call	53f0 <__muldf3>
    26b8:	1009883a 	mov	r4,r2
    26bc:	180b883a 	mov	r5,r3
    26c0:	000d883a 	mov	r6,zero
    26c4:	000f883a 	mov	r7,zero
    26c8:	d8800615 	stw	r2,24(sp)
    26cc:	d8c00715 	stw	r3,28(sp)
    26d0:	000528c0 	call	528c <__eqdf2>
    26d4:	1001491e 	bne	r2,zero,2bfc <__ieee754_rem_pio2+0x6e8>
    26d8:	000f883a 	mov	r7,zero
    26dc:	9809883a 	mov	r4,r19
    26e0:	900b883a 	mov	r5,r18
    26e4:	000d883a 	mov	r6,zero
    26e8:	000528c0 	call	528c <__eqdf2>
    26ec:	100f003a 	cmpeq	r7,r2,zero
    26f0:	00800084 	movi	r2,2
    26f4:	11cfc83a 	sub	r7,r2,r7
    26f8:	00800084 	movi	r2,2
    26fc:	d8800015 	stw	r2,0(sp)
    2700:	008000b4 	movhi	r2,2
    2704:	10827c04 	addi	r2,r2,2544
    2708:	d8800115 	stw	r2,4(sp)
    270c:	d9000204 	addi	r4,sp,8
    2710:	800b883a 	mov	r5,r16
    2714:	a00d883a 	mov	r6,r20
    2718:	00031540 	call	3154 <__kernel_rem_pio2>
    271c:	88000d0e 	bge	r17,zero,2754 <__ieee754_rem_pio2+0x240>
    2720:	81000117 	ldw	r4,4(r16)
    2724:	80c00317 	ldw	r3,12(r16)
    2728:	0085c83a 	sub	r2,zero,r2
    272c:	2120003c 	xorhi	r4,r4,32768
    2730:	18e0003c 	xorhi	r3,r3,32768
    2734:	81000115 	stw	r4,4(r16)
    2738:	80c00315 	stw	r3,12(r16)
    273c:	00000506 	br	2754 <__ieee754_rem_pio2+0x240>
    2740:	31000015 	stw	r4,0(r6)
    2744:	31400115 	stw	r5,4(r6)
    2748:	30000215 	stw	zero,8(r6)
    274c:	30000315 	stw	zero,12(r6)
    2750:	0005883a 	mov	r2,zero
    2754:	dfc01517 	ldw	ra,84(sp)
    2758:	df001417 	ldw	fp,80(sp)
    275c:	ddc01317 	ldw	r23,76(sp)
    2760:	dd801217 	ldw	r22,72(sp)
    2764:	dd401117 	ldw	r21,68(sp)
    2768:	dd001017 	ldw	r20,64(sp)
    276c:	dcc00f17 	ldw	r19,60(sp)
    2770:	dc800e17 	ldw	r18,56(sp)
    2774:	dc400d17 	ldw	r17,52(sp)
    2778:	dc000c17 	ldw	r16,48(sp)
    277c:	dec01604 	addi	sp,sp,88
    2780:	f800283a 	ret
    2784:	200d883a 	mov	r6,r4
    2788:	280f883a 	mov	r7,r5
    278c:	0005b140 	call	5b14 <__subdf3>
    2790:	80800215 	stw	r2,8(r16)
    2794:	80800015 	stw	r2,0(r16)
    2798:	80c00315 	stw	r3,12(r16)
    279c:	80c00115 	stw	r3,4(r16)
    27a0:	0005883a 	mov	r2,zero
    27a4:	003feb06 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    27a8:	01cf7474 	movhi	r7,15825
    27ac:	9009883a 	mov	r4,r18
    27b0:	39ed1844 	addi	r7,r7,-19359
    27b4:	01869834 	movhi	r6,6752
    27b8:	180b883a 	mov	r5,r3
    27bc:	0005b140 	call	5b14 <__subdf3>
    27c0:	018b80f4 	movhi	r6,11779
    27c4:	01cee8f4 	movhi	r7,15267
    27c8:	1009883a 	mov	r4,r2
    27cc:	180b883a 	mov	r5,r3
    27d0:	319c1cc4 	addi	r6,r6,28787
    27d4:	39c66284 	addi	r7,r7,6538
    27d8:	1025883a 	mov	r18,r2
    27dc:	1823883a 	mov	r17,r3
    27e0:	0005b140 	call	5b14 <__subdf3>
    27e4:	100d883a 	mov	r6,r2
    27e8:	180f883a 	mov	r7,r3
    27ec:	9009883a 	mov	r4,r18
    27f0:	880b883a 	mov	r5,r17
    27f4:	80800015 	stw	r2,0(r16)
    27f8:	80c00115 	stw	r3,4(r16)
    27fc:	0005b140 	call	5b14 <__subdf3>
    2800:	018b80f4 	movhi	r6,11779
    2804:	01cee8f4 	movhi	r7,15267
    2808:	1009883a 	mov	r4,r2
    280c:	180b883a 	mov	r5,r3
    2810:	319c1cc4 	addi	r6,r6,28787
    2814:	39c66284 	addi	r7,r7,6538
    2818:	0005b140 	call	5b14 <__subdf3>
    281c:	80800215 	stw	r2,8(r16)
    2820:	80c00315 	stw	r3,12(r16)
    2824:	00800044 	movi	r2,1
    2828:	003fca06 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    282c:	00041440 	call	4144 <fabs>
    2830:	019b72b4 	movhi	r6,28106
    2834:	01cff934 	movhi	r7,16356
    2838:	1009883a 	mov	r4,r2
    283c:	180b883a 	mov	r5,r3
    2840:	31b220c4 	addi	r6,r6,-14205
    2844:	39d7cc04 	addi	r7,r7,24368
    2848:	102d883a 	mov	r22,r2
    284c:	182b883a 	mov	r21,r3
    2850:	00053f00 	call	53f0 <__muldf3>
    2854:	000d883a 	mov	r6,zero
    2858:	01cff834 	movhi	r7,16352
    285c:	1009883a 	mov	r4,r2
    2860:	180b883a 	mov	r5,r3
    2864:	00049f00 	call	49f0 <__adddf3>
    2868:	180b883a 	mov	r5,r3
    286c:	1009883a 	mov	r4,r2
    2870:	00063e40 	call	63e4 <__fixdfsi>
    2874:	1009883a 	mov	r4,r2
    2878:	1025883a 	mov	r18,r2
    287c:	000646c0 	call	646c <__floatsidf>
    2880:	01cffe74 	movhi	r7,16377
    2884:	1009883a 	mov	r4,r2
    2888:	180b883a 	mov	r5,r3
    288c:	39c87ec4 	addi	r7,r7,8699
    2890:	01951034 	movhi	r6,21568
    2894:	1029883a 	mov	r20,r2
    2898:	1827883a 	mov	r19,r3
    289c:	00053f00 	call	53f0 <__muldf3>
    28a0:	b009883a 	mov	r4,r22
    28a4:	a80b883a 	mov	r5,r21
    28a8:	100d883a 	mov	r6,r2
    28ac:	180f883a 	mov	r7,r3
    28b0:	0005b140 	call	5b14 <__subdf3>
    28b4:	018698b4 	movhi	r6,6754
    28b8:	01cf7474 	movhi	r7,15825
    28bc:	a009883a 	mov	r4,r20
    28c0:	3198cc44 	addi	r6,r6,25393
    28c4:	39ed1844 	addi	r7,r7,-19359
    28c8:	980b883a 	mov	r5,r19
    28cc:	1039883a 	mov	fp,r2
    28d0:	d8c00815 	stw	r3,32(sp)
    28d4:	00053f00 	call	53f0 <__muldf3>
    28d8:	010007c4 	movi	r4,31
    28dc:	e017883a 	mov	r11,fp
    28e0:	da800817 	ldw	r10,32(sp)
    28e4:	102d883a 	mov	r22,r2
    28e8:	182b883a 	mov	r21,r3
    28ec:	24802816 	blt	r4,r18,2990 <__ieee754_rem_pio2+0x47c>
    28f0:	927fffc4 	addi	r9,r18,-1
    28f4:	4a53883a 	add	r9,r9,r9
    28f8:	010000b4 	movhi	r4,2
    28fc:	21025c04 	addi	r4,r4,2416
    2900:	4a53883a 	add	r9,r9,r9
    2904:	2253883a 	add	r9,r4,r9
    2908:	49000017 	ldw	r4,0(r9)
    290c:	25c02026 	beq	r4,r23,2990 <__ieee754_rem_pio2+0x47c>
    2910:	e009883a 	mov	r4,fp
    2914:	500b883a 	mov	r5,r10
    2918:	100d883a 	mov	r6,r2
    291c:	180f883a 	mov	r7,r3
    2920:	da800b15 	stw	r10,44(sp)
    2924:	df000a15 	stw	fp,40(sp)
    2928:	0005b140 	call	5b14 <__subdf3>
    292c:	da800b17 	ldw	r10,44(sp)
    2930:	dac00a17 	ldw	r11,40(sp)
    2934:	1019883a 	mov	r12,r2
    2938:	1813883a 	mov	r9,r3
    293c:	80800015 	stw	r2,0(r16)
    2940:	80c00115 	stw	r3,4(r16)
    2944:	600d883a 	mov	r6,r12
    2948:	480f883a 	mov	r7,r9
    294c:	5809883a 	mov	r4,r11
    2950:	500b883a 	mov	r5,r10
    2954:	da400b15 	stw	r9,44(sp)
    2958:	db000a15 	stw	r12,40(sp)
    295c:	0005b140 	call	5b14 <__subdf3>
    2960:	1009883a 	mov	r4,r2
    2964:	180b883a 	mov	r5,r3
    2968:	b00d883a 	mov	r6,r22
    296c:	a80f883a 	mov	r7,r21
    2970:	0005b140 	call	5b14 <__subdf3>
    2974:	80800215 	stw	r2,8(r16)
    2978:	80c00315 	stw	r3,12(r16)
    297c:	da400b17 	ldw	r9,44(sp)
    2980:	db000a17 	ldw	r12,40(sp)
    2984:	88009f16 	blt	r17,zero,2c04 <__ieee754_rem_pio2+0x6f0>
    2988:	9005883a 	mov	r2,r18
    298c:	003f7106 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2990:	d9400817 	ldw	r5,32(sp)
    2994:	e009883a 	mov	r4,fp
    2998:	100d883a 	mov	r6,r2
    299c:	180f883a 	mov	r7,r3
    29a0:	da800b15 	stw	r10,44(sp)
    29a4:	dac00a15 	stw	r11,40(sp)
    29a8:	0005b140 	call	5b14 <__subdf3>
    29ac:	1019883a 	mov	r12,r2
    29b0:	1804d53a 	srli	r2,r3,20
    29b4:	b811d53a 	srai	r8,r23,20
    29b8:	1813883a 	mov	r9,r3
    29bc:	1081ffcc 	andi	r2,r2,2047
    29c0:	80c00115 	stw	r3,4(r16)
    29c4:	83000015 	stw	r12,0(r16)
    29c8:	4085c83a 	sub	r2,r8,r2
    29cc:	00c00404 	movi	r3,16
    29d0:	da800b17 	ldw	r10,44(sp)
    29d4:	dac00a17 	ldw	r11,40(sp)
    29d8:	18bfda0e 	bge	r3,r2,2944 <__alt_mem_Flash_flash_data+0xf4002944>
    29dc:	01cf7474 	movhi	r7,15825
    29e0:	39ed1844 	addi	r7,r7,-19359
    29e4:	a009883a 	mov	r4,r20
    29e8:	980b883a 	mov	r5,r19
    29ec:	01869834 	movhi	r6,6752
    29f0:	da000a15 	stw	r8,40(sp)
    29f4:	00053f00 	call	53f0 <__muldf3>
    29f8:	d9400817 	ldw	r5,32(sp)
    29fc:	e009883a 	mov	r4,fp
    2a00:	100d883a 	mov	r6,r2
    2a04:	180f883a 	mov	r7,r3
    2a08:	102d883a 	mov	r22,r2
    2a0c:	182b883a 	mov	r21,r3
    2a10:	0005b140 	call	5b14 <__subdf3>
    2a14:	d9400817 	ldw	r5,32(sp)
    2a18:	e009883a 	mov	r4,fp
    2a1c:	100d883a 	mov	r6,r2
    2a20:	180f883a 	mov	r7,r3
    2a24:	182f883a 	mov	r23,r3
    2a28:	d8800915 	stw	r2,36(sp)
    2a2c:	0005b140 	call	5b14 <__subdf3>
    2a30:	b00d883a 	mov	r6,r22
    2a34:	a80f883a 	mov	r7,r21
    2a38:	1009883a 	mov	r4,r2
    2a3c:	180b883a 	mov	r5,r3
    2a40:	0005b140 	call	5b14 <__subdf3>
    2a44:	018b80f4 	movhi	r6,11779
    2a48:	01cee8f4 	movhi	r7,15267
    2a4c:	a009883a 	mov	r4,r20
    2a50:	980b883a 	mov	r5,r19
    2a54:	319c1cc4 	addi	r6,r6,28787
    2a58:	39c66284 	addi	r7,r7,6538
    2a5c:	102d883a 	mov	r22,r2
    2a60:	182b883a 	mov	r21,r3
    2a64:	00053f00 	call	53f0 <__muldf3>
    2a68:	b00d883a 	mov	r6,r22
    2a6c:	a80f883a 	mov	r7,r21
    2a70:	1009883a 	mov	r4,r2
    2a74:	180b883a 	mov	r5,r3
    2a78:	0005b140 	call	5b14 <__subdf3>
    2a7c:	d9000917 	ldw	r4,36(sp)
    2a80:	b80b883a 	mov	r5,r23
    2a84:	100d883a 	mov	r6,r2
    2a88:	180f883a 	mov	r7,r3
    2a8c:	102d883a 	mov	r22,r2
    2a90:	182b883a 	mov	r21,r3
    2a94:	0005b140 	call	5b14 <__subdf3>
    2a98:	1019883a 	mov	r12,r2
    2a9c:	1804d53a 	srli	r2,r3,20
    2aa0:	da000a17 	ldw	r8,40(sp)
    2aa4:	83000015 	stw	r12,0(r16)
    2aa8:	1081ffcc 	andi	r2,r2,2047
    2aac:	4091c83a 	sub	r8,r8,r2
    2ab0:	80c00115 	stw	r3,4(r16)
    2ab4:	00800c44 	movi	r2,49
    2ab8:	1813883a 	mov	r9,r3
    2abc:	1200790e 	bge	r2,r8,2ca4 <__ieee754_rem_pio2+0x790>
    2ac0:	01cee8f4 	movhi	r7,15267
    2ac4:	39c66284 	addi	r7,r7,6538
    2ac8:	a009883a 	mov	r4,r20
    2acc:	980b883a 	mov	r5,r19
    2ad0:	018b8034 	movhi	r6,11776
    2ad4:	00053f00 	call	53f0 <__muldf3>
    2ad8:	d9000917 	ldw	r4,36(sp)
    2adc:	b80b883a 	mov	r5,r23
    2ae0:	100d883a 	mov	r6,r2
    2ae4:	180f883a 	mov	r7,r3
    2ae8:	102d883a 	mov	r22,r2
    2aec:	182b883a 	mov	r21,r3
    2af0:	0005b140 	call	5b14 <__subdf3>
    2af4:	d9000917 	ldw	r4,36(sp)
    2af8:	b80b883a 	mov	r5,r23
    2afc:	100d883a 	mov	r6,r2
    2b00:	180f883a 	mov	r7,r3
    2b04:	d8c00b15 	stw	r3,44(sp)
    2b08:	d8800a15 	stw	r2,40(sp)
    2b0c:	0005b140 	call	5b14 <__subdf3>
    2b10:	b00d883a 	mov	r6,r22
    2b14:	a80f883a 	mov	r7,r21
    2b18:	1009883a 	mov	r4,r2
    2b1c:	180b883a 	mov	r5,r3
    2b20:	0005b140 	call	5b14 <__subdf3>
    2b24:	01894834 	movhi	r6,9504
    2b28:	01ce5f34 	movhi	r7,14716
    2b2c:	a009883a 	mov	r4,r20
    2b30:	980b883a 	mov	r5,r19
    2b34:	31927044 	addi	r6,r6,18881
    2b38:	39e0e684 	addi	r7,r7,-31846
    2b3c:	102d883a 	mov	r22,r2
    2b40:	182b883a 	mov	r21,r3
    2b44:	00053f00 	call	53f0 <__muldf3>
    2b48:	b00d883a 	mov	r6,r22
    2b4c:	a80f883a 	mov	r7,r21
    2b50:	1009883a 	mov	r4,r2
    2b54:	180b883a 	mov	r5,r3
    2b58:	0005b140 	call	5b14 <__subdf3>
    2b5c:	dac00a17 	ldw	r11,40(sp)
    2b60:	da800b17 	ldw	r10,44(sp)
    2b64:	102d883a 	mov	r22,r2
    2b68:	182b883a 	mov	r21,r3
    2b6c:	5809883a 	mov	r4,r11
    2b70:	500b883a 	mov	r5,r10
    2b74:	100d883a 	mov	r6,r2
    2b78:	180f883a 	mov	r7,r3
    2b7c:	003f6a06 	br	2928 <__alt_mem_Flash_flash_data+0xf4002928>
    2b80:	00049f00 	call	49f0 <__adddf3>
    2b84:	1025883a 	mov	r18,r2
    2b88:	008ffe74 	movhi	r2,16377
    2b8c:	10887ec4 	addi	r2,r2,8699
    2b90:	1823883a 	mov	r17,r3
    2b94:	b8802226 	beq	r23,r2,2c20 <__ieee754_rem_pio2+0x70c>
    2b98:	018698b4 	movhi	r6,6754
    2b9c:	01cf7474 	movhi	r7,15825
    2ba0:	3198cc44 	addi	r6,r6,25393
    2ba4:	39ed1844 	addi	r7,r7,-19359
    2ba8:	9009883a 	mov	r4,r18
    2bac:	180b883a 	mov	r5,r3
    2bb0:	00049f00 	call	49f0 <__adddf3>
    2bb4:	100d883a 	mov	r6,r2
    2bb8:	180f883a 	mov	r7,r3
    2bbc:	9009883a 	mov	r4,r18
    2bc0:	880b883a 	mov	r5,r17
    2bc4:	80800015 	stw	r2,0(r16)
    2bc8:	80c00115 	stw	r3,4(r16)
    2bcc:	0005b140 	call	5b14 <__subdf3>
    2bd0:	018698b4 	movhi	r6,6754
    2bd4:	01cf7474 	movhi	r7,15825
    2bd8:	1009883a 	mov	r4,r2
    2bdc:	180b883a 	mov	r5,r3
    2be0:	3198cc44 	addi	r6,r6,25393
    2be4:	39ed1844 	addi	r7,r7,-19359
    2be8:	00049f00 	call	49f0 <__adddf3>
    2bec:	80800215 	stw	r2,8(r16)
    2bf0:	80c00315 	stw	r3,12(r16)
    2bf4:	00bfffc4 	movi	r2,-1
    2bf8:	003ed606 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2bfc:	01c000c4 	movi	r7,3
    2c00:	003ebd06 	br	26f8 <__alt_mem_Flash_flash_data+0xf40026f8>
    2c04:	4a60003c 	xorhi	r9,r9,32768
    2c08:	18e0003c 	xorhi	r3,r3,32768
    2c0c:	83000015 	stw	r12,0(r16)
    2c10:	82400115 	stw	r9,4(r16)
    2c14:	80c00315 	stw	r3,12(r16)
    2c18:	0485c83a 	sub	r2,zero,r18
    2c1c:	003ecd06 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2c20:	01cf7474 	movhi	r7,15825
    2c24:	9009883a 	mov	r4,r18
    2c28:	39ed1844 	addi	r7,r7,-19359
    2c2c:	01869834 	movhi	r6,6752
    2c30:	180b883a 	mov	r5,r3
    2c34:	00049f00 	call	49f0 <__adddf3>
    2c38:	018b80f4 	movhi	r6,11779
    2c3c:	01cee8f4 	movhi	r7,15267
    2c40:	1009883a 	mov	r4,r2
    2c44:	180b883a 	mov	r5,r3
    2c48:	319c1cc4 	addi	r6,r6,28787
    2c4c:	39c66284 	addi	r7,r7,6538
    2c50:	1025883a 	mov	r18,r2
    2c54:	1823883a 	mov	r17,r3
    2c58:	00049f00 	call	49f0 <__adddf3>
    2c5c:	100d883a 	mov	r6,r2
    2c60:	180f883a 	mov	r7,r3
    2c64:	9009883a 	mov	r4,r18
    2c68:	880b883a 	mov	r5,r17
    2c6c:	80800015 	stw	r2,0(r16)
    2c70:	80c00115 	stw	r3,4(r16)
    2c74:	0005b140 	call	5b14 <__subdf3>
    2c78:	018b80f4 	movhi	r6,11779
    2c7c:	01cee8f4 	movhi	r7,15267
    2c80:	1009883a 	mov	r4,r2
    2c84:	180b883a 	mov	r5,r3
    2c88:	319c1cc4 	addi	r6,r6,28787
    2c8c:	39c66284 	addi	r7,r7,6538
    2c90:	00049f00 	call	49f0 <__adddf3>
    2c94:	80800215 	stw	r2,8(r16)
    2c98:	80c00315 	stw	r3,12(r16)
    2c9c:	00bfffc4 	movi	r2,-1
    2ca0:	003eac06 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2ca4:	dac00917 	ldw	r11,36(sp)
    2ca8:	b815883a 	mov	r10,r23
    2cac:	003f2506 	br	2944 <__alt_mem_Flash_flash_data+0xf4002944>

00002cb0 <__kernel_cos>:
    2cb0:	defff304 	addi	sp,sp,-52
    2cb4:	dc000315 	stw	r16,12(sp)
    2cb8:	04200034 	movhi	r16,32768
    2cbc:	843fffc4 	addi	r16,r16,-1
    2cc0:	008f9034 	movhi	r2,15936
    2cc4:	df000b15 	stw	fp,44(sp)
    2cc8:	ddc00a15 	stw	r23,40(sp)
    2ccc:	dd800915 	stw	r22,36(sp)
    2cd0:	dcc00615 	stw	r19,24(sp)
    2cd4:	dfc00c15 	stw	ra,48(sp)
    2cd8:	dd400815 	stw	r21,32(sp)
    2cdc:	dd000715 	stw	r20,28(sp)
    2ce0:	dc800515 	stw	r18,20(sp)
    2ce4:	dc400415 	stw	r17,16(sp)
    2ce8:	2c20703a 	and	r16,r5,r16
    2cec:	10bfffc4 	addi	r2,r2,-1
    2cf0:	2827883a 	mov	r19,r5
    2cf4:	202d883a 	mov	r22,r4
    2cf8:	302f883a 	mov	r23,r6
    2cfc:	3839883a 	mov	fp,r7
    2d00:	14007516 	blt	r2,r16,2ed8 <__kernel_cos+0x228>
    2d04:	00063e40 	call	63e4 <__fixdfsi>
    2d08:	10010f26 	beq	r2,zero,3148 <__kernel_cos+0x498>
    2d0c:	b00d883a 	mov	r6,r22
    2d10:	980f883a 	mov	r7,r19
    2d14:	b009883a 	mov	r4,r22
    2d18:	980b883a 	mov	r5,r19
    2d1c:	00053f00 	call	53f0 <__muldf3>
    2d20:	01afa234 	movhi	r6,48776
    2d24:	01ef6a74 	movhi	r7,48553
    2d28:	1009883a 	mov	r4,r2
    2d2c:	180b883a 	mov	r5,r3
    2d30:	318e3504 	addi	r6,r6,14548
    2d34:	39feba44 	addi	r7,r7,-1303
    2d38:	102b883a 	mov	r21,r2
    2d3c:	1829883a 	mov	r20,r3
    2d40:	00053f00 	call	53f0 <__muldf3>
    2d44:	01af6d74 	movhi	r6,48565
    2d48:	01cf88b4 	movhi	r7,15906
    2d4c:	1009883a 	mov	r4,r2
    2d50:	180b883a 	mov	r5,r3
    2d54:	31ac7104 	addi	r6,r6,-20028
    2d58:	39fba784 	addi	r7,r7,-4450
    2d5c:	00049f00 	call	49f0 <__adddf3>
    2d60:	1009883a 	mov	r4,r2
    2d64:	180b883a 	mov	r5,r3
    2d68:	a80d883a 	mov	r6,r21
    2d6c:	a00f883a 	mov	r7,r20
    2d70:	00053f00 	call	53f0 <__muldf3>
    2d74:	01a02734 	movhi	r6,32924
    2d78:	01cfa4b4 	movhi	r7,16018
    2d7c:	1009883a 	mov	r4,r2
    2d80:	180b883a 	mov	r5,r3
    2d84:	3194ab44 	addi	r6,r6,21165
    2d88:	39df93c4 	addi	r7,r7,32335
    2d8c:	0005b140 	call	5b14 <__subdf3>
    2d90:	1009883a 	mov	r4,r2
    2d94:	180b883a 	mov	r5,r3
    2d98:	a80d883a 	mov	r6,r21
    2d9c:	a00f883a 	mov	r7,r20
    2da0:	00053f00 	call	53f0 <__muldf3>
    2da4:	018672f4 	movhi	r6,6603
    2da8:	01cfbeb4 	movhi	r7,16122
    2dac:	1009883a 	mov	r4,r2
    2db0:	180b883a 	mov	r5,r3
    2db4:	31856404 	addi	r6,r6,5520
    2db8:	39c06804 	addi	r7,r7,416
    2dbc:	00049f00 	call	49f0 <__adddf3>
    2dc0:	1009883a 	mov	r4,r2
    2dc4:	180b883a 	mov	r5,r3
    2dc8:	a80d883a 	mov	r6,r21
    2dcc:	a00f883a 	mov	r7,r20
    2dd0:	00053f00 	call	53f0 <__muldf3>
    2dd4:	0185b074 	movhi	r6,5825
    2dd8:	01cfd5f4 	movhi	r7,16215
    2ddc:	1009883a 	mov	r4,r2
    2de0:	180b883a 	mov	r5,r3
    2de4:	31945dc4 	addi	r6,r6,20855
    2de8:	39f05b04 	addi	r7,r7,-16020
    2dec:	0005b140 	call	5b14 <__subdf3>
    2df0:	1009883a 	mov	r4,r2
    2df4:	180b883a 	mov	r5,r3
    2df8:	a80d883a 	mov	r6,r21
    2dfc:	a00f883a 	mov	r7,r20
    2e00:	00053f00 	call	53f0 <__muldf3>
    2e04:	01955574 	movhi	r6,21845
    2e08:	01cfe974 	movhi	r7,16293
    2e0c:	1009883a 	mov	r4,r2
    2e10:	180b883a 	mov	r5,r3
    2e14:	31955304 	addi	r6,r6,21836
    2e18:	39d55544 	addi	r7,r7,21845
    2e1c:	00049f00 	call	49f0 <__adddf3>
    2e20:	1009883a 	mov	r4,r2
    2e24:	180b883a 	mov	r5,r3
    2e28:	a80d883a 	mov	r6,r21
    2e2c:	a00f883a 	mov	r7,r20
    2e30:	00053f00 	call	53f0 <__muldf3>
    2e34:	1017883a 	mov	r11,r2
    2e38:	1815883a 	mov	r10,r3
    2e3c:	a809883a 	mov	r4,r21
    2e40:	a00b883a 	mov	r5,r20
    2e44:	000d883a 	mov	r6,zero
    2e48:	01cff834 	movhi	r7,16352
    2e4c:	da800215 	stw	r10,8(sp)
    2e50:	dac00115 	stw	r11,4(sp)
    2e54:	00053f00 	call	53f0 <__muldf3>
    2e58:	dac00117 	ldw	r11,4(sp)
    2e5c:	da800217 	ldw	r10,8(sp)
    2e60:	a809883a 	mov	r4,r21
    2e64:	580d883a 	mov	r6,r11
    2e68:	500f883a 	mov	r7,r10
    2e6c:	a00b883a 	mov	r5,r20
    2e70:	1023883a 	mov	r17,r2
    2e74:	1821883a 	mov	r16,r3
    2e78:	00053f00 	call	53f0 <__muldf3>
    2e7c:	b009883a 	mov	r4,r22
    2e80:	980b883a 	mov	r5,r19
    2e84:	b80d883a 	mov	r6,r23
    2e88:	e00f883a 	mov	r7,fp
    2e8c:	1029883a 	mov	r20,r2
    2e90:	1825883a 	mov	r18,r3
    2e94:	00053f00 	call	53f0 <__muldf3>
    2e98:	a009883a 	mov	r4,r20
    2e9c:	900b883a 	mov	r5,r18
    2ea0:	100d883a 	mov	r6,r2
    2ea4:	180f883a 	mov	r7,r3
    2ea8:	0005b140 	call	5b14 <__subdf3>
    2eac:	8809883a 	mov	r4,r17
    2eb0:	800b883a 	mov	r5,r16
    2eb4:	100d883a 	mov	r6,r2
    2eb8:	180f883a 	mov	r7,r3
    2ebc:	0005b140 	call	5b14 <__subdf3>
    2ec0:	0009883a 	mov	r4,zero
    2ec4:	014ffc34 	movhi	r5,16368
    2ec8:	100d883a 	mov	r6,r2
    2ecc:	180f883a 	mov	r7,r3
    2ed0:	0005b140 	call	5b14 <__subdf3>
    2ed4:	00008b06 	br	3104 <__kernel_cos+0x454>
    2ed8:	200d883a 	mov	r6,r4
    2edc:	280f883a 	mov	r7,r5
    2ee0:	00053f00 	call	53f0 <__muldf3>
    2ee4:	01afa234 	movhi	r6,48776
    2ee8:	01ef6a74 	movhi	r7,48553
    2eec:	318e3504 	addi	r6,r6,14548
    2ef0:	39feba44 	addi	r7,r7,-1303
    2ef4:	1009883a 	mov	r4,r2
    2ef8:	180b883a 	mov	r5,r3
    2efc:	1025883a 	mov	r18,r2
    2f00:	1823883a 	mov	r17,r3
    2f04:	00053f00 	call	53f0 <__muldf3>
    2f08:	01af6d74 	movhi	r6,48565
    2f0c:	01cf88b4 	movhi	r7,15906
    2f10:	1009883a 	mov	r4,r2
    2f14:	180b883a 	mov	r5,r3
    2f18:	31ac7104 	addi	r6,r6,-20028
    2f1c:	39fba784 	addi	r7,r7,-4450
    2f20:	00049f00 	call	49f0 <__adddf3>
    2f24:	1009883a 	mov	r4,r2
    2f28:	180b883a 	mov	r5,r3
    2f2c:	900d883a 	mov	r6,r18
    2f30:	880f883a 	mov	r7,r17
    2f34:	00053f00 	call	53f0 <__muldf3>
    2f38:	01a02734 	movhi	r6,32924
    2f3c:	01cfa4b4 	movhi	r7,16018
    2f40:	1009883a 	mov	r4,r2
    2f44:	180b883a 	mov	r5,r3
    2f48:	3194ab44 	addi	r6,r6,21165
    2f4c:	39df93c4 	addi	r7,r7,32335
    2f50:	0005b140 	call	5b14 <__subdf3>
    2f54:	1009883a 	mov	r4,r2
    2f58:	180b883a 	mov	r5,r3
    2f5c:	900d883a 	mov	r6,r18
    2f60:	880f883a 	mov	r7,r17
    2f64:	00053f00 	call	53f0 <__muldf3>
    2f68:	018672f4 	movhi	r6,6603
    2f6c:	01cfbeb4 	movhi	r7,16122
    2f70:	1009883a 	mov	r4,r2
    2f74:	180b883a 	mov	r5,r3
    2f78:	31856404 	addi	r6,r6,5520
    2f7c:	39c06804 	addi	r7,r7,416
    2f80:	00049f00 	call	49f0 <__adddf3>
    2f84:	1009883a 	mov	r4,r2
    2f88:	180b883a 	mov	r5,r3
    2f8c:	900d883a 	mov	r6,r18
    2f90:	880f883a 	mov	r7,r17
    2f94:	00053f00 	call	53f0 <__muldf3>
    2f98:	0185b074 	movhi	r6,5825
    2f9c:	01cfd5f4 	movhi	r7,16215
    2fa0:	1009883a 	mov	r4,r2
    2fa4:	180b883a 	mov	r5,r3
    2fa8:	31945dc4 	addi	r6,r6,20855
    2fac:	39f05b04 	addi	r7,r7,-16020
    2fb0:	0005b140 	call	5b14 <__subdf3>
    2fb4:	1009883a 	mov	r4,r2
    2fb8:	180b883a 	mov	r5,r3
    2fbc:	900d883a 	mov	r6,r18
    2fc0:	880f883a 	mov	r7,r17
    2fc4:	00053f00 	call	53f0 <__muldf3>
    2fc8:	01955574 	movhi	r6,21845
    2fcc:	01cfe974 	movhi	r7,16293
    2fd0:	1009883a 	mov	r4,r2
    2fd4:	180b883a 	mov	r5,r3
    2fd8:	31955304 	addi	r6,r6,21836
    2fdc:	39d55544 	addi	r7,r7,21845
    2fe0:	00049f00 	call	49f0 <__adddf3>
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	180b883a 	mov	r5,r3
    2fec:	900d883a 	mov	r6,r18
    2ff0:	880f883a 	mov	r7,r17
    2ff4:	00053f00 	call	53f0 <__muldf3>
    2ff8:	1013883a 	mov	r9,r2
    2ffc:	1017883a 	mov	r11,r2
    3000:	008ff4f4 	movhi	r2,16339
    3004:	108ccc84 	addi	r2,r2,13106
    3008:	902b883a 	mov	r21,r18
    300c:	8829883a 	mov	r20,r17
    3010:	1811883a 	mov	r8,r3
    3014:	1815883a 	mov	r10,r3
    3018:	143f880e 	bge	r2,r16,2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    301c:	008ffa74 	movhi	r2,16361
    3020:	14004416 	blt	r2,r16,3134 <__kernel_cos+0x484>
    3024:	00bff834 	movhi	r2,65504
    3028:	80a1883a 	add	r16,r16,r2
    302c:	0009883a 	mov	r4,zero
    3030:	014ffc34 	movhi	r5,16368
    3034:	000d883a 	mov	r6,zero
    3038:	800f883a 	mov	r7,r16
    303c:	da400115 	stw	r9,4(sp)
    3040:	d8c00215 	stw	r3,8(sp)
    3044:	0005b140 	call	5b14 <__subdf3>
    3048:	da000217 	ldw	r8,8(sp)
    304c:	da400117 	ldw	r9,4(sp)
    3050:	102b883a 	mov	r21,r2
    3054:	d8c00015 	stw	r3,0(sp)
    3058:	9009883a 	mov	r4,r18
    305c:	880b883a 	mov	r5,r17
    3060:	000d883a 	mov	r6,zero
    3064:	01cff834 	movhi	r7,16352
    3068:	da000215 	stw	r8,8(sp)
    306c:	da400115 	stw	r9,4(sp)
    3070:	00053f00 	call	53f0 <__muldf3>
    3074:	800f883a 	mov	r7,r16
    3078:	1009883a 	mov	r4,r2
    307c:	180b883a 	mov	r5,r3
    3080:	000d883a 	mov	r6,zero
    3084:	0005b140 	call	5b14 <__subdf3>
    3088:	da400117 	ldw	r9,4(sp)
    308c:	da000217 	ldw	r8,8(sp)
    3090:	9009883a 	mov	r4,r18
    3094:	480d883a 	mov	r6,r9
    3098:	400f883a 	mov	r7,r8
    309c:	880b883a 	mov	r5,r17
    30a0:	1029883a 	mov	r20,r2
    30a4:	1821883a 	mov	r16,r3
    30a8:	00053f00 	call	53f0 <__muldf3>
    30ac:	b009883a 	mov	r4,r22
    30b0:	980b883a 	mov	r5,r19
    30b4:	b80d883a 	mov	r6,r23
    30b8:	e00f883a 	mov	r7,fp
    30bc:	1025883a 	mov	r18,r2
    30c0:	1823883a 	mov	r17,r3
    30c4:	00053f00 	call	53f0 <__muldf3>
    30c8:	9009883a 	mov	r4,r18
    30cc:	880b883a 	mov	r5,r17
    30d0:	100d883a 	mov	r6,r2
    30d4:	180f883a 	mov	r7,r3
    30d8:	0005b140 	call	5b14 <__subdf3>
    30dc:	a009883a 	mov	r4,r20
    30e0:	800b883a 	mov	r5,r16
    30e4:	100d883a 	mov	r6,r2
    30e8:	180f883a 	mov	r7,r3
    30ec:	0005b140 	call	5b14 <__subdf3>
    30f0:	d9400017 	ldw	r5,0(sp)
    30f4:	a809883a 	mov	r4,r21
    30f8:	100d883a 	mov	r6,r2
    30fc:	180f883a 	mov	r7,r3
    3100:	0005b140 	call	5b14 <__subdf3>
    3104:	dfc00c17 	ldw	ra,48(sp)
    3108:	df000b17 	ldw	fp,44(sp)
    310c:	ddc00a17 	ldw	r23,40(sp)
    3110:	dd800917 	ldw	r22,36(sp)
    3114:	dd400817 	ldw	r21,32(sp)
    3118:	dd000717 	ldw	r20,28(sp)
    311c:	dcc00617 	ldw	r19,24(sp)
    3120:	dc800517 	ldw	r18,20(sp)
    3124:	dc400417 	ldw	r17,16(sp)
    3128:	dc000317 	ldw	r16,12(sp)
    312c:	dec00d04 	addi	sp,sp,52
    3130:	f800283a 	ret
    3134:	008ff9f4 	movhi	r2,16359
    3138:	002b883a 	mov	r21,zero
    313c:	d8800015 	stw	r2,0(sp)
    3140:	040ff4b4 	movhi	r16,16338
    3144:	003fc406 	br	3058 <__alt_mem_Flash_flash_data+0xf4003058>
    3148:	0005883a 	mov	r2,zero
    314c:	00cffc34 	movhi	r3,16368
    3150:	003fec06 	br	3104 <__alt_mem_Flash_flash_data+0xf4003104>

00003154 <__kernel_rem_pio2>:
    3154:	deff5b04 	addi	sp,sp,-660
    3158:	da00a517 	ldw	r8,660(sp)
    315c:	00c000b4 	movhi	r3,2
    3160:	18c2ce04 	addi	r3,r3,2872
    3164:	4205883a 	add	r2,r8,r8
    3168:	1085883a 	add	r2,r2,r2
    316c:	1885883a 	add	r2,r3,r2
    3170:	d9008d15 	stw	r4,564(sp)
    3174:	d9409015 	stw	r5,576(sp)
    3178:	313fff44 	addi	r4,r6,-3
    317c:	01400604 	movi	r5,24
    3180:	dd80a115 	stw	r22,644(sp)
    3184:	dc009b15 	stw	r16,620(sp)
    3188:	dfc0a415 	stw	ra,656(sp)
    318c:	df00a315 	stw	fp,652(sp)
    3190:	ddc0a215 	stw	r23,648(sp)
    3194:	dd40a015 	stw	r21,640(sp)
    3198:	dd009f15 	stw	r20,636(sp)
    319c:	dcc09e15 	stw	r19,632(sp)
    31a0:	dc809d15 	stw	r18,628(sp)
    31a4:	dc409c15 	stw	r17,624(sp)
    31a8:	3021883a 	mov	r16,r6
    31ac:	d9c09315 	stw	r7,588(sp)
    31b0:	15800017 	ldw	r22,0(r2)
    31b4:	00045a00 	call	45a0 <__divsi3>
    31b8:	da009317 	ldw	r8,588(sp)
    31bc:	d8809215 	stw	r2,584(sp)
    31c0:	423fffc4 	addi	r8,r8,-1
    31c4:	da008c15 	stw	r8,560(sp)
    31c8:	10032a16 	blt	r2,zero,3e74 <__kernel_rem_pio2+0xd20>
    31cc:	da009217 	ldw	r8,584(sp)
    31d0:	d9009217 	ldw	r4,584(sp)
    31d4:	0206303a 	nor	r3,zero,r8
    31d8:	18c00624 	muli	r3,r3,24
    31dc:	da008c17 	ldw	r8,560(sp)
    31e0:	1c07883a 	add	r3,r3,r16
    31e4:	4585883a 	add	r2,r8,r22
    31e8:	d8c08f15 	stw	r3,572(sp)
    31ec:	2223c83a 	sub	r17,r4,r8
    31f0:	10001016 	blt	r2,zero,3234 <__kernel_rem_pio2+0xe0>
    31f4:	da00a617 	ldw	r8,664(sp)
    31f8:	8c65883a 	add	r18,r17,r17
    31fc:	94a5883a 	add	r18,r18,r18
    3200:	8885883a 	add	r2,r17,r2
    3204:	dcc05004 	addi	r19,sp,320
    3208:	44a5883a 	add	r18,r8,r18
    320c:	14000044 	addi	r16,r2,1
    3210:	88014516 	blt	r17,zero,3728 <__kernel_rem_pio2+0x5d4>
    3214:	91000017 	ldw	r4,0(r18)
    3218:	000646c0 	call	646c <__floatsidf>
    321c:	98800015 	stw	r2,0(r19)
    3220:	98c00115 	stw	r3,4(r19)
    3224:	8c400044 	addi	r17,r17,1
    3228:	9cc00204 	addi	r19,r19,8
    322c:	94800104 	addi	r18,r18,4
    3230:	8c3ff71e 	bne	r17,r16,3210 <__alt_mem_Flash_flash_data+0xf4003210>
    3234:	b0002116 	blt	r22,zero,32bc <__kernel_rem_pio2+0x168>
    3238:	da009317 	ldw	r8,588(sp)
    323c:	b02490fa 	slli	r18,r22,3
    3240:	d8805004 	addi	r2,sp,320
    3244:	402e90fa 	slli	r23,r8,3
    3248:	d823883a 	mov	r17,sp
    324c:	dc004e04 	addi	r16,sp,312
    3250:	14b9883a 	add	fp,r2,r18
    3254:	da008c17 	ldw	r8,560(sp)
    3258:	40015816 	blt	r8,zero,37bc <__kernel_rem_pio2+0x668>
    325c:	dcc08d17 	ldw	r19,564(sp)
    3260:	85e5883a 	add	r18,r16,r23
    3264:	002b883a 	mov	r21,zero
    3268:	0029883a 	mov	r20,zero
    326c:	99000017 	ldw	r4,0(r19)
    3270:	99400117 	ldw	r5,4(r19)
    3274:	91800017 	ldw	r6,0(r18)
    3278:	91c00117 	ldw	r7,4(r18)
    327c:	94bffe04 	addi	r18,r18,-8
    3280:	9cc00204 	addi	r19,r19,8
    3284:	00053f00 	call	53f0 <__muldf3>
    3288:	a809883a 	mov	r4,r21
    328c:	a00b883a 	mov	r5,r20
    3290:	100d883a 	mov	r6,r2
    3294:	180f883a 	mov	r7,r3
    3298:	00049f00 	call	49f0 <__adddf3>
    329c:	102b883a 	mov	r21,r2
    32a0:	1829883a 	mov	r20,r3
    32a4:	84bff11e 	bne	r16,r18,326c <__alt_mem_Flash_flash_data+0xf400326c>
    32a8:	8d400015 	stw	r21,0(r17)
    32ac:	8d000115 	stw	r20,4(r17)
    32b0:	84000204 	addi	r16,r16,8
    32b4:	8c400204 	addi	r17,r17,8
    32b8:	873fe61e 	bne	r16,fp,3254 <__alt_mem_Flash_flash_data+0xf4003254>
    32bc:	da009317 	ldw	r8,588(sp)
    32c0:	b00690ba 	slli	r3,r22,2
    32c4:	b0bfffc4 	addi	r2,r22,-1
    32c8:	423ffe24 	muli	r8,r8,-8
    32cc:	193fff04 	addi	r4,r3,-4
    32d0:	1085883a 	add	r2,r2,r2
    32d4:	da008e15 	stw	r8,568(sp)
    32d8:	18fffe04 	addi	r3,r3,-8
    32dc:	da007804 	addi	r8,sp,480
    32e0:	40d1883a 	add	r8,r8,r3
    32e4:	1085883a 	add	r2,r2,r2
    32e8:	d885883a 	add	r2,sp,r2
    32ec:	da009515 	stw	r8,596(sp)
    32f0:	da007804 	addi	r8,sp,480
    32f4:	4111883a 	add	r8,r8,r4
    32f8:	10807804 	addi	r2,r2,480
    32fc:	da009615 	stw	r8,600(sp)
    3300:	b021883a 	mov	r16,r22
    3304:	d8809715 	stw	r2,604(sp)
    3308:	dd809415 	stw	r22,592(sp)
    330c:	800490fa 	slli	r2,r16,3
    3310:	d885883a 	add	r2,sp,r2
    3314:	15c00017 	ldw	r23,0(r2)
    3318:	15000117 	ldw	r20,4(r2)
    331c:	04002d0e 	bge	zero,r16,33d4 <__kernel_rem_pio2+0x280>
    3320:	00880034 	movhi	r2,8192
    3324:	10bfffc4 	addi	r2,r2,-1
    3328:	80a5883a 	add	r18,r16,r2
    332c:	902490fa 	slli	r18,r18,3
    3330:	8423883a 	add	r17,r16,r16
    3334:	8c63883a 	add	r17,r17,r17
    3338:	dcc07804 	addi	r19,sp,480
    333c:	dca5883a 	add	r18,sp,r18
    3340:	9c63883a 	add	r17,r19,r17
    3344:	000d883a 	mov	r6,zero
    3348:	01cf9c34 	movhi	r7,15984
    334c:	b809883a 	mov	r4,r23
    3350:	a00b883a 	mov	r5,r20
    3354:	00053f00 	call	53f0 <__muldf3>
    3358:	180b883a 	mov	r5,r3
    335c:	1009883a 	mov	r4,r2
    3360:	00063e40 	call	63e4 <__fixdfsi>
    3364:	1009883a 	mov	r4,r2
    3368:	000646c0 	call	646c <__floatsidf>
    336c:	1009883a 	mov	r4,r2
    3370:	180b883a 	mov	r5,r3
    3374:	000d883a 	mov	r6,zero
    3378:	01d05c34 	movhi	r7,16752
    337c:	102d883a 	mov	r22,r2
    3380:	182b883a 	mov	r21,r3
    3384:	00053f00 	call	53f0 <__muldf3>
    3388:	b809883a 	mov	r4,r23
    338c:	a00b883a 	mov	r5,r20
    3390:	100d883a 	mov	r6,r2
    3394:	180f883a 	mov	r7,r3
    3398:	0005b140 	call	5b14 <__subdf3>
    339c:	180b883a 	mov	r5,r3
    33a0:	1009883a 	mov	r4,r2
    33a4:	00063e40 	call	63e4 <__fixdfsi>
    33a8:	91800017 	ldw	r6,0(r18)
    33ac:	91c00117 	ldw	r7,4(r18)
    33b0:	98800015 	stw	r2,0(r19)
    33b4:	b009883a 	mov	r4,r22
    33b8:	a80b883a 	mov	r5,r21
    33bc:	00049f00 	call	49f0 <__adddf3>
    33c0:	9cc00104 	addi	r19,r19,4
    33c4:	102f883a 	mov	r23,r2
    33c8:	1829883a 	mov	r20,r3
    33cc:	94bffe04 	addi	r18,r18,-8
    33d0:	9c7fdc1e 	bne	r19,r17,3344 <__alt_mem_Flash_flash_data+0xf4003344>
    33d4:	d9808f17 	ldw	r6,572(sp)
    33d8:	a00b883a 	mov	r5,r20
    33dc:	b809883a 	mov	r4,r23
    33e0:	000434c0 	call	434c <scalbn>
    33e4:	000d883a 	mov	r6,zero
    33e8:	01cff034 	movhi	r7,16320
    33ec:	1009883a 	mov	r4,r2
    33f0:	180b883a 	mov	r5,r3
    33f4:	1025883a 	mov	r18,r2
    33f8:	1823883a 	mov	r17,r3
    33fc:	00053f00 	call	53f0 <__muldf3>
    3400:	1009883a 	mov	r4,r2
    3404:	180b883a 	mov	r5,r3
    3408:	00041580 	call	4158 <floor>
    340c:	1009883a 	mov	r4,r2
    3410:	180b883a 	mov	r5,r3
    3414:	000d883a 	mov	r6,zero
    3418:	01d00834 	movhi	r7,16416
    341c:	00053f00 	call	53f0 <__muldf3>
    3420:	100d883a 	mov	r6,r2
    3424:	180f883a 	mov	r7,r3
    3428:	9009883a 	mov	r4,r18
    342c:	880b883a 	mov	r5,r17
    3430:	0005b140 	call	5b14 <__subdf3>
    3434:	180b883a 	mov	r5,r3
    3438:	1009883a 	mov	r4,r2
    343c:	1825883a 	mov	r18,r3
    3440:	1027883a 	mov	r19,r2
    3444:	00063e40 	call	63e4 <__fixdfsi>
    3448:	1009883a 	mov	r4,r2
    344c:	1023883a 	mov	r17,r2
    3450:	000646c0 	call	646c <__floatsidf>
    3454:	9809883a 	mov	r4,r19
    3458:	900b883a 	mov	r5,r18
    345c:	100d883a 	mov	r6,r2
    3460:	180f883a 	mov	r7,r3
    3464:	0005b140 	call	5b14 <__subdf3>
    3468:	da008f17 	ldw	r8,572(sp)
    346c:	1019883a 	mov	r12,r2
    3470:	1029883a 	mov	r20,r2
    3474:	1817883a 	mov	r11,r3
    3478:	0200ae0e 	bge	zero,r8,3734 <__kernel_rem_pio2+0x5e0>
    347c:	80bfffc4 	addi	r2,r16,-1
    3480:	1085883a 	add	r2,r2,r2
    3484:	1085883a 	add	r2,r2,r2
    3488:	d885883a 	add	r2,sp,r2
    348c:	10807804 	addi	r2,r2,480
    3490:	11400017 	ldw	r5,0(r2)
    3494:	01000604 	movi	r4,24
    3498:	2209c83a 	sub	r4,r4,r8
    349c:	290dd83a 	sra	r6,r5,r4
    34a0:	048005c4 	movi	r18,23
    34a4:	9225c83a 	sub	r18,r18,r8
    34a8:	3108983a 	sll	r4,r6,r4
    34ac:	89a3883a 	add	r17,r17,r6
    34b0:	2909c83a 	sub	r4,r5,r4
    34b4:	24a5d83a 	sra	r18,r4,r18
    34b8:	11000015 	stw	r4,0(r2)
    34bc:	04802a0e 	bge	zero,r18,3568 <__kernel_rem_pio2+0x414>
    34c0:	8c400044 	addi	r17,r17,1
    34c4:	0400c40e 	bge	zero,r16,37d8 <__kernel_rem_pio2+0x684>
    34c8:	01404034 	movhi	r5,256
    34cc:	297fffc4 	addi	r5,r5,-1
    34d0:	da007804 	addi	r8,sp,480
    34d4:	0015883a 	mov	r10,zero
    34d8:	0027883a 	mov	r19,zero
    34dc:	01004034 	movhi	r4,256
    34e0:	00000706 	br	3500 <__kernel_rem_pio2+0x3ac>
    34e4:	208dc83a 	sub	r6,r4,r2
    34e8:	10000226 	beq	r2,zero,34f4 <__kernel_rem_pio2+0x3a0>
    34ec:	41800015 	stw	r6,0(r8)
    34f0:	04c00044 	movi	r19,1
    34f4:	52800044 	addi	r10,r10,1
    34f8:	42000104 	addi	r8,r8,4
    34fc:	5400080e 	bge	r10,r16,3520 <__kernel_rem_pio2+0x3cc>
    3500:	40800017 	ldw	r2,0(r8)
    3504:	983ff726 	beq	r19,zero,34e4 <__alt_mem_Flash_flash_data+0xf40034e4>
    3508:	2885c83a 	sub	r2,r5,r2
    350c:	40800015 	stw	r2,0(r8)
    3510:	52800044 	addi	r10,r10,1
    3514:	04c00044 	movi	r19,1
    3518:	42000104 	addi	r8,r8,4
    351c:	543ff816 	blt	r10,r16,3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3520:	da008f17 	ldw	r8,572(sp)
    3524:	02000e0e 	bge	zero,r8,3560 <__kernel_rem_pio2+0x40c>
    3528:	00800044 	movi	r2,1
    352c:	40808a26 	beq	r8,r2,3758 <__kernel_rem_pio2+0x604>
    3530:	00800084 	movi	r2,2
    3534:	40800a1e 	bne	r8,r2,3560 <__kernel_rem_pio2+0x40c>
    3538:	80bfffc4 	addi	r2,r16,-1
    353c:	1085883a 	add	r2,r2,r2
    3540:	1085883a 	add	r2,r2,r2
    3544:	d885883a 	add	r2,sp,r2
    3548:	10807804 	addi	r2,r2,480
    354c:	11400017 	ldw	r5,0(r2)
    3550:	01001034 	movhi	r4,64
    3554:	213fffc4 	addi	r4,r4,-1
    3558:	2908703a 	and	r4,r5,r4
    355c:	11000015 	stw	r4,0(r2)
    3560:	00800084 	movi	r2,2
    3564:	90805a26 	beq	r18,r2,36d0 <__kernel_rem_pio2+0x57c>
    3568:	580b883a 	mov	r5,r11
    356c:	a009883a 	mov	r4,r20
    3570:	000d883a 	mov	r6,zero
    3574:	000f883a 	mov	r7,zero
    3578:	dac09a15 	stw	r11,616(sp)
    357c:	000528c0 	call	528c <__eqdf2>
    3580:	dac09a17 	ldw	r11,616(sp)
    3584:	1000961e 	bne	r2,zero,37e0 <__kernel_rem_pio2+0x68c>
    3588:	da009417 	ldw	r8,592(sp)
    358c:	817fffc4 	addi	r5,r16,-1
    3590:	2a000b16 	blt	r5,r8,35c0 <__kernel_rem_pio2+0x46c>
    3594:	800490ba 	slli	r2,r16,2
    3598:	d9809617 	ldw	r6,600(sp)
    359c:	d9007804 	addi	r4,sp,480
    35a0:	10bfff04 	addi	r2,r2,-4
    35a4:	0007883a 	mov	r3,zero
    35a8:	2085883a 	add	r2,r4,r2
    35ac:	11000017 	ldw	r4,0(r2)
    35b0:	10bfff04 	addi	r2,r2,-4
    35b4:	1906b03a 	or	r3,r3,r4
    35b8:	11bffc1e 	bne	r2,r6,35ac <__alt_mem_Flash_flash_data+0xf40035ac>
    35bc:	18013c1e 	bne	r3,zero,3ab0 <__kernel_rem_pio2+0x95c>
    35c0:	da009717 	ldw	r8,604(sp)
    35c4:	40800017 	ldw	r2,0(r8)
    35c8:	1001371e 	bne	r2,zero,3aa8 <__kernel_rem_pio2+0x954>
    35cc:	d8809517 	ldw	r2,596(sp)
    35d0:	00c00044 	movi	r3,1
    35d4:	10bfff04 	addi	r2,r2,-4
    35d8:	11000117 	ldw	r4,4(r2)
    35dc:	18c00044 	addi	r3,r3,1
    35e0:	203ffc26 	beq	r4,zero,35d4 <__alt_mem_Flash_flash_data+0xf40035d4>
    35e4:	80c7883a 	add	r3,r16,r3
    35e8:	80800044 	addi	r2,r16,1
    35ec:	d8c09115 	stw	r3,580(sp)
    35f0:	18803216 	blt	r3,r2,36bc <__kernel_rem_pio2+0x568>
    35f4:	da009317 	ldw	r8,588(sp)
    35f8:	8223883a 	add	r17,r16,r8
    35fc:	da009117 	ldw	r8,580(sp)
    3600:	882290fa 	slli	r17,r17,3
    3604:	45000044 	addi	r20,r8,1
    3608:	da009217 	ldw	r8,584(sp)
    360c:	a02890fa 	slli	r20,r20,3
    3610:	1227883a 	add	r19,r2,r8
    3614:	100490fa 	slli	r2,r2,3
    3618:	da00a617 	ldw	r8,664(sp)
    361c:	9ce7883a 	add	r19,r19,r19
    3620:	9ce7883a 	add	r19,r19,r19
    3624:	d8a5883a 	add	r18,sp,r2
    3628:	d8805004 	addi	r2,sp,320
    362c:	44e7883a 	add	r19,r8,r19
    3630:	1463883a 	add	r17,r2,r17
    3634:	dd29883a 	add	r20,sp,r20
    3638:	99000017 	ldw	r4,0(r19)
    363c:	000646c0 	call	646c <__floatsidf>
    3640:	da008c17 	ldw	r8,560(sp)
    3644:	88800015 	stw	r2,0(r17)
    3648:	88c00115 	stw	r3,4(r17)
    364c:	40001d16 	blt	r8,zero,36c4 <__kernel_rem_pio2+0x570>
    3650:	da008e17 	ldw	r8,568(sp)
    3654:	dd808d17 	ldw	r22,564(sp)
    3658:	8821883a 	mov	r16,r17
    365c:	8a2b883a 	add	r21,r17,r8
    3660:	0039883a 	mov	fp,zero
    3664:	002f883a 	mov	r23,zero
    3668:	b1000017 	ldw	r4,0(r22)
    366c:	b1400117 	ldw	r5,4(r22)
    3670:	81800017 	ldw	r6,0(r16)
    3674:	81c00117 	ldw	r7,4(r16)
    3678:	843ffe04 	addi	r16,r16,-8
    367c:	b5800204 	addi	r22,r22,8
    3680:	00053f00 	call	53f0 <__muldf3>
    3684:	e009883a 	mov	r4,fp
    3688:	b80b883a 	mov	r5,r23
    368c:	100d883a 	mov	r6,r2
    3690:	180f883a 	mov	r7,r3
    3694:	00049f00 	call	49f0 <__adddf3>
    3698:	1039883a 	mov	fp,r2
    369c:	182f883a 	mov	r23,r3
    36a0:	857ff11e 	bne	r16,r21,3668 <__alt_mem_Flash_flash_data+0xf4003668>
    36a4:	97000015 	stw	fp,0(r18)
    36a8:	95c00115 	stw	r23,4(r18)
    36ac:	94800204 	addi	r18,r18,8
    36b0:	9cc00104 	addi	r19,r19,4
    36b4:	8c400204 	addi	r17,r17,8
    36b8:	953fdf1e 	bne	r18,r20,3638 <__alt_mem_Flash_flash_data+0xf4003638>
    36bc:	dc009117 	ldw	r16,580(sp)
    36c0:	003f1206 	br	330c <__alt_mem_Flash_flash_data+0xf400330c>
    36c4:	0039883a 	mov	fp,zero
    36c8:	002f883a 	mov	r23,zero
    36cc:	003ff506 	br	36a4 <__alt_mem_Flash_flash_data+0xf40036a4>
    36d0:	0009883a 	mov	r4,zero
    36d4:	014ffc34 	movhi	r5,16368
    36d8:	600d883a 	mov	r6,r12
    36dc:	180f883a 	mov	r7,r3
    36e0:	0005b140 	call	5b14 <__subdf3>
    36e4:	1029883a 	mov	r20,r2
    36e8:	1817883a 	mov	r11,r3
    36ec:	983f9e26 	beq	r19,zero,3568 <__alt_mem_Flash_flash_data+0xf4003568>
    36f0:	d9808f17 	ldw	r6,572(sp)
    36f4:	0009883a 	mov	r4,zero
    36f8:	014ffc34 	movhi	r5,16368
    36fc:	d8c09a15 	stw	r3,616(sp)
    3700:	000434c0 	call	434c <scalbn>
    3704:	dac09a17 	ldw	r11,616(sp)
    3708:	a009883a 	mov	r4,r20
    370c:	100d883a 	mov	r6,r2
    3710:	580b883a 	mov	r5,r11
    3714:	180f883a 	mov	r7,r3
    3718:	0005b140 	call	5b14 <__subdf3>
    371c:	1029883a 	mov	r20,r2
    3720:	1817883a 	mov	r11,r3
    3724:	003f9006 	br	3568 <__alt_mem_Flash_flash_data+0xf4003568>
    3728:	0005883a 	mov	r2,zero
    372c:	0007883a 	mov	r3,zero
    3730:	003eba06 	br	321c <__alt_mem_Flash_flash_data+0xf400321c>
    3734:	da008f17 	ldw	r8,572(sp)
    3738:	4000121e 	bne	r8,zero,3784 <__kernel_rem_pio2+0x630>
    373c:	80bfffc4 	addi	r2,r16,-1
    3740:	1085883a 	add	r2,r2,r2
    3744:	1085883a 	add	r2,r2,r2
    3748:	d885883a 	add	r2,sp,r2
    374c:	14807817 	ldw	r18,480(r2)
    3750:	9025d5fa 	srai	r18,r18,23
    3754:	003f5906 	br	34bc <__alt_mem_Flash_flash_data+0xf40034bc>
    3758:	80bfffc4 	addi	r2,r16,-1
    375c:	1085883a 	add	r2,r2,r2
    3760:	1085883a 	add	r2,r2,r2
    3764:	d885883a 	add	r2,sp,r2
    3768:	10807804 	addi	r2,r2,480
    376c:	11000017 	ldw	r4,0(r2)
    3770:	01402034 	movhi	r5,128
    3774:	297fffc4 	addi	r5,r5,-1
    3778:	2148703a 	and	r4,r4,r5
    377c:	11000015 	stw	r4,0(r2)
    3780:	003f7706 	br	3560 <__alt_mem_Flash_flash_data+0xf4003560>
    3784:	180b883a 	mov	r5,r3
    3788:	1009883a 	mov	r4,r2
    378c:	000d883a 	mov	r6,zero
    3790:	01cff834 	movhi	r7,16352
    3794:	d8c09915 	stw	r3,612(sp)
    3798:	d8c09a15 	stw	r3,616(sp)
    379c:	d8809815 	stw	r2,608(sp)
    37a0:	00053100 	call	5310 <__gedf2>
    37a4:	d8c09917 	ldw	r3,612(sp)
    37a8:	dac09a17 	ldw	r11,616(sp)
    37ac:	db009817 	ldw	r12,608(sp)
    37b0:	1000050e 	bge	r2,zero,37c8 <__kernel_rem_pio2+0x674>
    37b4:	0025883a 	mov	r18,zero
    37b8:	003f6b06 	br	3568 <__alt_mem_Flash_flash_data+0xf4003568>
    37bc:	002b883a 	mov	r21,zero
    37c0:	0029883a 	mov	r20,zero
    37c4:	003eb806 	br	32a8 <__alt_mem_Flash_flash_data+0xf40032a8>
    37c8:	8c400044 	addi	r17,r17,1
    37cc:	0401960e 	bge	zero,r16,3e28 <__kernel_rem_pio2+0xcd4>
    37d0:	04800084 	movi	r18,2
    37d4:	003f3c06 	br	34c8 <__alt_mem_Flash_flash_data+0xf40034c8>
    37d8:	0027883a 	mov	r19,zero
    37dc:	003f5006 	br	3520 <__alt_mem_Flash_flash_data+0xf4003520>
    37e0:	da008f17 	ldw	r8,572(sp)
    37e4:	a009883a 	mov	r4,r20
    37e8:	580b883a 	mov	r5,r11
    37ec:	020dc83a 	sub	r6,zero,r8
    37f0:	dc808c15 	stw	r18,560(sp)
    37f4:	dd809417 	ldw	r22,592(sp)
    37f8:	dc408e15 	stw	r17,568(sp)
    37fc:	000434c0 	call	434c <scalbn>
    3800:	1009883a 	mov	r4,r2
    3804:	180b883a 	mov	r5,r3
    3808:	000d883a 	mov	r6,zero
    380c:	01d05c34 	movhi	r7,16752
    3810:	1029883a 	mov	r20,r2
    3814:	182f883a 	mov	r23,r3
    3818:	00053100 	call	5310 <__gedf2>
    381c:	10018b16 	blt	r2,zero,3e4c <__kernel_rem_pio2+0xcf8>
    3820:	01cf9c34 	movhi	r7,15984
    3824:	000d883a 	mov	r6,zero
    3828:	a009883a 	mov	r4,r20
    382c:	b80b883a 	mov	r5,r23
    3830:	00053f00 	call	53f0 <__muldf3>
    3834:	180b883a 	mov	r5,r3
    3838:	1009883a 	mov	r4,r2
    383c:	00063e40 	call	63e4 <__fixdfsi>
    3840:	840d883a 	add	r6,r16,r16
    3844:	318d883a 	add	r6,r6,r6
    3848:	1009883a 	mov	r4,r2
    384c:	d9a7883a 	add	r19,sp,r6
    3850:	102b883a 	mov	r21,r2
    3854:	000646c0 	call	646c <__floatsidf>
    3858:	1009883a 	mov	r4,r2
    385c:	180b883a 	mov	r5,r3
    3860:	000d883a 	mov	r6,zero
    3864:	01d05c34 	movhi	r7,16752
    3868:	00053f00 	call	53f0 <__muldf3>
    386c:	a009883a 	mov	r4,r20
    3870:	b80b883a 	mov	r5,r23
    3874:	100d883a 	mov	r6,r2
    3878:	180f883a 	mov	r7,r3
    387c:	0005b140 	call	5b14 <__subdf3>
    3880:	180b883a 	mov	r5,r3
    3884:	1009883a 	mov	r4,r2
    3888:	00063e40 	call	63e4 <__fixdfsi>
    388c:	da008f17 	ldw	r8,572(sp)
    3890:	84400044 	addi	r17,r16,1
    3894:	8c47883a 	add	r3,r17,r17
    3898:	9cc07804 	addi	r19,r19,480
    389c:	18c7883a 	add	r3,r3,r3
    38a0:	98800015 	stw	r2,0(r19)
    38a4:	d8c7883a 	add	r3,sp,r3
    38a8:	42000604 	addi	r8,r8,24
    38ac:	da008f15 	stw	r8,572(sp)
    38b0:	1d407815 	stw	r21,480(r3)
    38b4:	d9808f17 	ldw	r6,572(sp)
    38b8:	0009883a 	mov	r4,zero
    38bc:	014ffc34 	movhi	r5,16368
    38c0:	000434c0 	call	434c <scalbn>
    38c4:	1029883a 	mov	r20,r2
    38c8:	182b883a 	mov	r21,r3
    38cc:	88006e16 	blt	r17,zero,3a88 <__kernel_rem_pio2+0x934>
    38d0:	881090fa 	slli	r8,r17,3
    38d4:	d8c07804 	addi	r3,sp,480
    38d8:	dc3ffe04 	addi	r16,sp,-8
    38dc:	da008d15 	stw	r8,564(sp)
    38e0:	d8808d17 	ldw	r2,564(sp)
    38e4:	8c51883a 	add	r8,r17,r17
    38e8:	4211883a 	add	r8,r8,r8
    38ec:	d8a7883a 	add	r19,sp,r2
    38f0:	1a2f883a 	add	r23,r3,r8
    38f4:	9839883a 	mov	fp,r19
    38f8:	b9000017 	ldw	r4,0(r23)
    38fc:	e73ffe04 	addi	fp,fp,-8
    3900:	bdffff04 	addi	r23,r23,-4
    3904:	000646c0 	call	646c <__floatsidf>
    3908:	a00d883a 	mov	r6,r20
    390c:	a80f883a 	mov	r7,r21
    3910:	1009883a 	mov	r4,r2
    3914:	180b883a 	mov	r5,r3
    3918:	00053f00 	call	53f0 <__muldf3>
    391c:	a009883a 	mov	r4,r20
    3920:	a80b883a 	mov	r5,r21
    3924:	e0800215 	stw	r2,8(fp)
    3928:	e0c00315 	stw	r3,12(fp)
    392c:	000d883a 	mov	r6,zero
    3930:	01cf9c34 	movhi	r7,15984
    3934:	00053f00 	call	53f0 <__muldf3>
    3938:	1029883a 	mov	r20,r2
    393c:	182b883a 	mov	r21,r3
    3940:	e43fed1e 	bne	fp,r16,38f8 <__alt_mem_Flash_flash_data+0xf40038f8>
    3944:	8a000044 	addi	r8,r17,1
    3948:	0029883a 	mov	r20,zero
    394c:	4039883a 	mov	fp,r8
    3950:	dc408f15 	stw	r17,572(sp)
    3954:	b0004916 	blt	r22,zero,3a7c <__kernel_rem_pio2+0x928>
    3958:	a0004816 	blt	r20,zero,3a7c <__kernel_rem_pio2+0x928>
    395c:	040000b4 	movhi	r16,2
    3960:	8402be04 	addi	r16,r16,2808
    3964:	982b883a 	mov	r21,r19
    3968:	0023883a 	mov	r17,zero
    396c:	002f883a 	mov	r23,zero
    3970:	0025883a 	mov	r18,zero
    3974:	00000206 	br	3980 <__kernel_rem_pio2+0x82c>
    3978:	ad400204 	addi	r21,r21,8
    397c:	a4800f16 	blt	r20,r18,39bc <__kernel_rem_pio2+0x868>
    3980:	81000017 	ldw	r4,0(r16)
    3984:	81400117 	ldw	r5,4(r16)
    3988:	a9800017 	ldw	r6,0(r21)
    398c:	a9c00117 	ldw	r7,4(r21)
    3990:	94800044 	addi	r18,r18,1
    3994:	84000204 	addi	r16,r16,8
    3998:	00053f00 	call	53f0 <__muldf3>
    399c:	8809883a 	mov	r4,r17
    39a0:	b80b883a 	mov	r5,r23
    39a4:	100d883a 	mov	r6,r2
    39a8:	180f883a 	mov	r7,r3
    39ac:	00049f00 	call	49f0 <__adddf3>
    39b0:	1023883a 	mov	r17,r2
    39b4:	182f883a 	mov	r23,r3
    39b8:	b4bfef0e 	bge	r22,r18,3978 <__alt_mem_Flash_flash_data+0xf4003978>
    39bc:	a00490fa 	slli	r2,r20,3
    39c0:	a5000044 	addi	r20,r20,1
    39c4:	9cfffe04 	addi	r19,r19,-8
    39c8:	d885883a 	add	r2,sp,r2
    39cc:	10802804 	addi	r2,r2,160
    39d0:	14400015 	stw	r17,0(r2)
    39d4:	15c00115 	stw	r23,4(r2)
    39d8:	a73fde1e 	bne	r20,fp,3954 <__alt_mem_Flash_flash_data+0xf4003954>
    39dc:	da00a517 	ldw	r8,660(sp)
    39e0:	00800084 	movi	r2,2
    39e4:	dc408f17 	ldw	r17,572(sp)
    39e8:	12007316 	blt	r2,r8,3bb8 <__kernel_rem_pio2+0xa64>
    39ec:	02004816 	blt	zero,r8,3b10 <__kernel_rem_pio2+0x9bc>
    39f0:	4000141e 	bne	r8,zero,3a44 <__kernel_rem_pio2+0x8f0>
    39f4:	da008d17 	ldw	r8,564(sp)
    39f8:	d8802804 	addi	r2,sp,160
    39fc:	0007883a 	mov	r3,zero
    3a00:	1221883a 	add	r16,r2,r8
    3a04:	04ffffc4 	movi	r19,-1
    3a08:	0005883a 	mov	r2,zero
    3a0c:	81800017 	ldw	r6,0(r16)
    3a10:	81c00117 	ldw	r7,4(r16)
    3a14:	1009883a 	mov	r4,r2
    3a18:	180b883a 	mov	r5,r3
    3a1c:	8c7fffc4 	addi	r17,r17,-1
    3a20:	00049f00 	call	49f0 <__adddf3>
    3a24:	843ffe04 	addi	r16,r16,-8
    3a28:	8cfff81e 	bne	r17,r19,3a0c <__alt_mem_Flash_flash_data+0xf4003a0c>
    3a2c:	da008c17 	ldw	r8,560(sp)
    3a30:	40000126 	beq	r8,zero,3a38 <__kernel_rem_pio2+0x8e4>
    3a34:	18e0003c 	xorhi	r3,r3,32768
    3a38:	da009017 	ldw	r8,576(sp)
    3a3c:	40800015 	stw	r2,0(r8)
    3a40:	40c00115 	stw	r3,4(r8)
    3a44:	da008e17 	ldw	r8,568(sp)
    3a48:	408001cc 	andi	r2,r8,7
    3a4c:	dfc0a417 	ldw	ra,656(sp)
    3a50:	df00a317 	ldw	fp,652(sp)
    3a54:	ddc0a217 	ldw	r23,648(sp)
    3a58:	dd80a117 	ldw	r22,644(sp)
    3a5c:	dd40a017 	ldw	r21,640(sp)
    3a60:	dd009f17 	ldw	r20,636(sp)
    3a64:	dcc09e17 	ldw	r19,632(sp)
    3a68:	dc809d17 	ldw	r18,628(sp)
    3a6c:	dc409c17 	ldw	r17,624(sp)
    3a70:	dc009b17 	ldw	r16,620(sp)
    3a74:	dec0a504 	addi	sp,sp,660
    3a78:	f800283a 	ret
    3a7c:	0023883a 	mov	r17,zero
    3a80:	002f883a 	mov	r23,zero
    3a84:	003fcd06 	br	39bc <__alt_mem_Flash_flash_data+0xf40039bc>
    3a88:	da00a517 	ldw	r8,660(sp)
    3a8c:	00800084 	movi	r2,2
    3a90:	1200d216 	blt	r2,r8,3ddc <__kernel_rem_pio2+0xc88>
    3a94:	0200c016 	blt	zero,r8,3d98 <__kernel_rem_pio2+0xc44>
    3a98:	403fea1e 	bne	r8,zero,3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3a9c:	0005883a 	mov	r2,zero
    3aa0:	0007883a 	mov	r3,zero
    3aa4:	003fe106 	br	3a2c <__alt_mem_Flash_flash_data+0xf4003a2c>
    3aa8:	00c00044 	movi	r3,1
    3aac:	003ecd06 	br	35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    3ab0:	2945883a 	add	r2,r5,r5
    3ab4:	da008f17 	ldw	r8,572(sp)
    3ab8:	1085883a 	add	r2,r2,r2
    3abc:	d885883a 	add	r2,sp,r2
    3ac0:	10807817 	ldw	r2,480(r2)
    3ac4:	423ffa04 	addi	r8,r8,-24
    3ac8:	dc408e15 	stw	r17,568(sp)
    3acc:	dc808c15 	stw	r18,560(sp)
    3ad0:	da008f15 	stw	r8,572(sp)
    3ad4:	dd809417 	ldw	r22,592(sp)
    3ad8:	2823883a 	mov	r17,r5
    3adc:	103f751e 	bne	r2,zero,38b4 <__alt_mem_Flash_flash_data+0xf40038b4>
    3ae0:	280490ba 	slli	r2,r5,2
    3ae4:	d8c07804 	addi	r3,sp,480
    3ae8:	10bfff04 	addi	r2,r2,-4
    3aec:	1885883a 	add	r2,r3,r2
    3af0:	4007883a 	mov	r3,r8
    3af4:	10bfff04 	addi	r2,r2,-4
    3af8:	11000117 	ldw	r4,4(r2)
    3afc:	8c7fffc4 	addi	r17,r17,-1
    3b00:	18fffa04 	addi	r3,r3,-24
    3b04:	203ffb26 	beq	r4,zero,3af4 <__alt_mem_Flash_flash_data+0xf4003af4>
    3b08:	d8c08f15 	stw	r3,572(sp)
    3b0c:	003f6906 	br	38b4 <__alt_mem_Flash_flash_data+0xf40038b4>
    3b10:	da008d17 	ldw	r8,564(sp)
    3b14:	d8802804 	addi	r2,sp,160
    3b18:	dcc02604 	addi	r19,sp,152
    3b1c:	1221883a 	add	r16,r2,r8
    3b20:	0007883a 	mov	r3,zero
    3b24:	0005883a 	mov	r2,zero
    3b28:	81800017 	ldw	r6,0(r16)
    3b2c:	81c00117 	ldw	r7,4(r16)
    3b30:	1009883a 	mov	r4,r2
    3b34:	843ffe04 	addi	r16,r16,-8
    3b38:	180b883a 	mov	r5,r3
    3b3c:	00049f00 	call	49f0 <__adddf3>
    3b40:	84fff91e 	bne	r16,r19,3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3b44:	da008c17 	ldw	r8,560(sp)
    3b48:	d9002817 	ldw	r4,160(sp)
    3b4c:	d9402917 	ldw	r5,164(sp)
    3b50:	40009726 	beq	r8,zero,3db0 <__kernel_rem_pio2+0xc5c>
    3b54:	da009017 	ldw	r8,576(sp)
    3b58:	19a0003c 	xorhi	r6,r3,32768
    3b5c:	180f883a 	mov	r7,r3
    3b60:	41800115 	stw	r6,4(r8)
    3b64:	40800015 	stw	r2,0(r8)
    3b68:	100d883a 	mov	r6,r2
    3b6c:	0005b140 	call	5b14 <__subdf3>
    3b70:	04400c0e 	bge	zero,r17,3ba4 <__kernel_rem_pio2+0xa50>
    3b74:	dc002a04 	addi	r16,sp,168
    3b78:	04c00044 	movi	r19,1
    3b7c:	81800017 	ldw	r6,0(r16)
    3b80:	81c00117 	ldw	r7,4(r16)
    3b84:	1009883a 	mov	r4,r2
    3b88:	180b883a 	mov	r5,r3
    3b8c:	9cc00044 	addi	r19,r19,1
    3b90:	00049f00 	call	49f0 <__adddf3>
    3b94:	84000204 	addi	r16,r16,8
    3b98:	8cfff80e 	bge	r17,r19,3b7c <__alt_mem_Flash_flash_data+0xf4003b7c>
    3b9c:	da008c17 	ldw	r8,560(sp)
    3ba0:	40000126 	beq	r8,zero,3ba8 <__kernel_rem_pio2+0xa54>
    3ba4:	18e0003c 	xorhi	r3,r3,32768
    3ba8:	da009017 	ldw	r8,576(sp)
    3bac:	40800215 	stw	r2,8(r8)
    3bb0:	40c00315 	stw	r3,12(r8)
    3bb4:	003fa306 	br	3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3bb8:	da00a517 	ldw	r8,660(sp)
    3bbc:	008000c4 	movi	r2,3
    3bc0:	40bfa01e 	bne	r8,r2,3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3bc4:	0440880e 	bge	zero,r17,3de8 <__kernel_rem_pio2+0xc94>
    3bc8:	da008d17 	ldw	r8,564(sp)
    3bcc:	882690fa 	slli	r19,r17,3
    3bd0:	dd402804 	addi	r21,sp,160
    3bd4:	da05883a 	add	r2,sp,r8
    3bd8:	10802804 	addi	r2,r2,160
    3bdc:	15c00017 	ldw	r23,0(r2)
    3be0:	15800117 	ldw	r22,4(r2)
    3be4:	9829883a 	mov	r20,r19
    3be8:	9cfffe04 	addi	r19,r19,-8
    3bec:	ace7883a 	add	r19,r21,r19
    3bf0:	ad29883a 	add	r20,r21,r20
    3bf4:	dac02604 	addi	r11,sp,152
    3bf8:	8811883a 	mov	r8,r17
    3bfc:	9c400017 	ldw	r17,0(r19)
    3c00:	9f000117 	ldw	fp,4(r19)
    3c04:	b809883a 	mov	r4,r23
    3c08:	b00b883a 	mov	r5,r22
    3c0c:	880d883a 	mov	r6,r17
    3c10:	e00f883a 	mov	r7,fp
    3c14:	da009815 	stw	r8,608(sp)
    3c18:	dac09a15 	stw	r11,616(sp)
    3c1c:	00049f00 	call	49f0 <__adddf3>
    3c20:	8809883a 	mov	r4,r17
    3c24:	e00b883a 	mov	r5,fp
    3c28:	100d883a 	mov	r6,r2
    3c2c:	180f883a 	mov	r7,r3
    3c30:	1025883a 	mov	r18,r2
    3c34:	1821883a 	mov	r16,r3
    3c38:	0005b140 	call	5b14 <__subdf3>
    3c3c:	b809883a 	mov	r4,r23
    3c40:	b00b883a 	mov	r5,r22
    3c44:	100d883a 	mov	r6,r2
    3c48:	180f883a 	mov	r7,r3
    3c4c:	00049f00 	call	49f0 <__adddf3>
    3c50:	dac09a17 	ldw	r11,616(sp)
    3c54:	a0800015 	stw	r2,0(r20)
    3c58:	a0c00115 	stw	r3,4(r20)
    3c5c:	9c800015 	stw	r18,0(r19)
    3c60:	9c000115 	stw	r16,4(r19)
    3c64:	9cfffe04 	addi	r19,r19,-8
    3c68:	a53ffe04 	addi	r20,r20,-8
    3c6c:	902f883a 	mov	r23,r18
    3c70:	802d883a 	mov	r22,r16
    3c74:	da009817 	ldw	r8,608(sp)
    3c78:	9affe01e 	bne	r19,r11,3bfc <__alt_mem_Flash_flash_data+0xf4003bfc>
    3c7c:	00800044 	movi	r2,1
    3c80:	1200590e 	bge	r2,r8,3de8 <__kernel_rem_pio2+0xc94>
    3c84:	402290fa 	slli	r17,r8,3
    3c88:	da008d17 	ldw	r8,564(sp)
    3c8c:	8c3ffe04 	addi	r16,r17,-8
    3c90:	da05883a 	add	r2,sp,r8
    3c94:	10802804 	addi	r2,r2,160
    3c98:	15800017 	ldw	r22,0(r2)
    3c9c:	15000117 	ldw	r20,4(r2)
    3ca0:	ac63883a 	add	r17,r21,r17
    3ca4:	ac21883a 	add	r16,r21,r16
    3ca8:	8827883a 	mov	r19,r17
    3cac:	8811883a 	mov	r8,r17
    3cb0:	84400017 	ldw	r17,0(r16)
    3cb4:	87000117 	ldw	fp,4(r16)
    3cb8:	b00d883a 	mov	r6,r22
    3cbc:	a00f883a 	mov	r7,r20
    3cc0:	8809883a 	mov	r4,r17
    3cc4:	e00b883a 	mov	r5,fp
    3cc8:	da009815 	stw	r8,608(sp)
    3ccc:	00049f00 	call	49f0 <__adddf3>
    3cd0:	8809883a 	mov	r4,r17
    3cd4:	e00b883a 	mov	r5,fp
    3cd8:	100d883a 	mov	r6,r2
    3cdc:	180f883a 	mov	r7,r3
    3ce0:	102f883a 	mov	r23,r2
    3ce4:	1825883a 	mov	r18,r3
    3ce8:	0005b140 	call	5b14 <__subdf3>
    3cec:	b00d883a 	mov	r6,r22
    3cf0:	a00f883a 	mov	r7,r20
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	180b883a 	mov	r5,r3
    3cfc:	00049f00 	call	49f0 <__adddf3>
    3d00:	98800015 	stw	r2,0(r19)
    3d04:	98c00115 	stw	r3,4(r19)
    3d08:	85c00015 	stw	r23,0(r16)
    3d0c:	84800115 	stw	r18,4(r16)
    3d10:	843ffe04 	addi	r16,r16,-8
    3d14:	9cfffe04 	addi	r19,r19,-8
    3d18:	b82d883a 	mov	r22,r23
    3d1c:	9029883a 	mov	r20,r18
    3d20:	da009817 	ldw	r8,608(sp)
    3d24:	ac3fe21e 	bne	r21,r16,3cb0 <__alt_mem_Flash_flash_data+0xf4003cb0>
    3d28:	4023883a 	mov	r17,r8
    3d2c:	dc002a04 	addi	r16,sp,168
    3d30:	0005883a 	mov	r2,zero
    3d34:	0007883a 	mov	r3,zero
    3d38:	89800017 	ldw	r6,0(r17)
    3d3c:	89c00117 	ldw	r7,4(r17)
    3d40:	1009883a 	mov	r4,r2
    3d44:	8c7ffe04 	addi	r17,r17,-8
    3d48:	180b883a 	mov	r5,r3
    3d4c:	00049f00 	call	49f0 <__adddf3>
    3d50:	8c3ff91e 	bne	r17,r16,3d38 <__alt_mem_Flash_flash_data+0xf4003d38>
    3d54:	da008c17 	ldw	r8,560(sp)
    3d58:	40002726 	beq	r8,zero,3df8 <__kernel_rem_pio2+0xca4>
    3d5c:	d9002b17 	ldw	r4,172(sp)
    3d60:	d9402917 	ldw	r5,164(sp)
    3d64:	d9802a17 	ldw	r6,168(sp)
    3d68:	da009017 	ldw	r8,576(sp)
    3d6c:	d9c02817 	ldw	r7,160(sp)
    3d70:	2960003c 	xorhi	r5,r5,32768
    3d74:	2120003c 	xorhi	r4,r4,32768
    3d78:	18e0003c 	xorhi	r3,r3,32768
    3d7c:	41c00015 	stw	r7,0(r8)
    3d80:	41400115 	stw	r5,4(r8)
    3d84:	41800215 	stw	r6,8(r8)
    3d88:	41000315 	stw	r4,12(r8)
    3d8c:	40800415 	stw	r2,16(r8)
    3d90:	40c00515 	stw	r3,20(r8)
    3d94:	003f2b06 	br	3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3d98:	da008c17 	ldw	r8,560(sp)
    3d9c:	0005883a 	mov	r2,zero
    3da0:	0007883a 	mov	r3,zero
    3da4:	d9002817 	ldw	r4,160(sp)
    3da8:	d9402917 	ldw	r5,164(sp)
    3dac:	403f691e 	bne	r8,zero,3b54 <__alt_mem_Flash_flash_data+0xf4003b54>
    3db0:	da009017 	ldw	r8,576(sp)
    3db4:	100d883a 	mov	r6,r2
    3db8:	180f883a 	mov	r7,r3
    3dbc:	40800015 	stw	r2,0(r8)
    3dc0:	40c00115 	stw	r3,4(r8)
    3dc4:	0005b140 	call	5b14 <__subdf3>
    3dc8:	047f6a16 	blt	zero,r17,3b74 <__alt_mem_Flash_flash_data+0xf4003b74>
    3dcc:	da009017 	ldw	r8,576(sp)
    3dd0:	40800215 	stw	r2,8(r8)
    3dd4:	40c00315 	stw	r3,12(r8)
    3dd8:	003f1a06 	br	3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3ddc:	da00a517 	ldw	r8,660(sp)
    3de0:	008000c4 	movi	r2,3
    3de4:	40bf171e 	bne	r8,r2,3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3de8:	da008c17 	ldw	r8,560(sp)
    3dec:	0005883a 	mov	r2,zero
    3df0:	0007883a 	mov	r3,zero
    3df4:	403fd91e 	bne	r8,zero,3d5c <__alt_mem_Flash_flash_data+0xf4003d5c>
    3df8:	da009017 	ldw	r8,576(sp)
    3dfc:	d9802817 	ldw	r6,160(sp)
    3e00:	d9402a17 	ldw	r5,168(sp)
    3e04:	d9002b17 	ldw	r4,172(sp)
    3e08:	41800015 	stw	r6,0(r8)
    3e0c:	d9802917 	ldw	r6,164(sp)
    3e10:	41400215 	stw	r5,8(r8)
    3e14:	41000315 	stw	r4,12(r8)
    3e18:	41800115 	stw	r6,4(r8)
    3e1c:	40800415 	stw	r2,16(r8)
    3e20:	40c00515 	stw	r3,20(r8)
    3e24:	003f0706 	br	3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3e28:	a00d883a 	mov	r6,r20
    3e2c:	580f883a 	mov	r7,r11
    3e30:	0009883a 	mov	r4,zero
    3e34:	014ffc34 	movhi	r5,16368
    3e38:	0005b140 	call	5b14 <__subdf3>
    3e3c:	1029883a 	mov	r20,r2
    3e40:	1817883a 	mov	r11,r3
    3e44:	04800084 	movi	r18,2
    3e48:	003dc706 	br	3568 <__alt_mem_Flash_flash_data+0xf4003568>
    3e4c:	840d883a 	add	r6,r16,r16
    3e50:	318d883a 	add	r6,r6,r6
    3e54:	d9a3883a 	add	r17,sp,r6
    3e58:	a009883a 	mov	r4,r20
    3e5c:	b80b883a 	mov	r5,r23
    3e60:	8c407804 	addi	r17,r17,480
    3e64:	00063e40 	call	63e4 <__fixdfsi>
    3e68:	88800015 	stw	r2,0(r17)
    3e6c:	8023883a 	mov	r17,r16
    3e70:	003e9006 	br	38b4 <__alt_mem_Flash_flash_data+0xf40038b4>
    3e74:	d8009215 	stw	zero,584(sp)
    3e78:	003cd406 	br	31cc <__alt_mem_Flash_flash_data+0xf40031cc>

00003e7c <__kernel_sin>:
    3e7c:	00a00034 	movhi	r2,32768
    3e80:	defff404 	addi	sp,sp,-48
    3e84:	10bfffc4 	addi	r2,r2,-1
    3e88:	00cf9034 	movhi	r3,15936
    3e8c:	ddc00915 	stw	r23,36(sp)
    3e90:	dd800815 	stw	r22,32(sp)
    3e94:	dc400315 	stw	r17,12(sp)
    3e98:	dc000215 	stw	r16,8(sp)
    3e9c:	dfc00b15 	stw	ra,44(sp)
    3ea0:	df000a15 	stw	fp,40(sp)
    3ea4:	dd400715 	stw	r21,28(sp)
    3ea8:	dd000615 	stw	r20,24(sp)
    3eac:	dcc00515 	stw	r19,20(sp)
    3eb0:	dc800415 	stw	r18,16(sp)
    3eb4:	2884703a 	and	r2,r5,r2
    3eb8:	18ffffc4 	addi	r3,r3,-1
    3ebc:	2821883a 	mov	r16,r5
    3ec0:	2023883a 	mov	r17,r4
    3ec4:	302f883a 	mov	r23,r6
    3ec8:	382d883a 	mov	r22,r7
    3ecc:	18800216 	blt	r3,r2,3ed8 <__kernel_sin+0x5c>
    3ed0:	00063e40 	call	63e4 <__fixdfsi>
    3ed4:	10009826 	beq	r2,zero,4138 <__kernel_sin+0x2bc>
    3ed8:	8809883a 	mov	r4,r17
    3edc:	800b883a 	mov	r5,r16
    3ee0:	880d883a 	mov	r6,r17
    3ee4:	800f883a 	mov	r7,r16
    3ee8:	00053f00 	call	53f0 <__muldf3>
    3eec:	1009883a 	mov	r4,r2
    3ef0:	180b883a 	mov	r5,r3
    3ef4:	880d883a 	mov	r6,r17
    3ef8:	800f883a 	mov	r7,r16
    3efc:	1027883a 	mov	r19,r2
    3f00:	1825883a 	mov	r18,r3
    3f04:	00053f00 	call	53f0 <__muldf3>
    3f08:	0196b434 	movhi	r6,23248
    3f0c:	01cf79b4 	movhi	r7,15846
    3f10:	9809883a 	mov	r4,r19
    3f14:	900b883a 	mov	r5,r18
    3f18:	31b55f04 	addi	r6,r6,-10884
    3f1c:	39f64e84 	addi	r7,r7,-9926
    3f20:	102b883a 	mov	r21,r2
    3f24:	1829883a 	mov	r20,r3
    3f28:	00053f00 	call	53f0 <__muldf3>
    3f2c:	01a28b34 	movhi	r6,35372
    3f30:	01cf96f4 	movhi	r7,15963
    3f34:	1009883a 	mov	r4,r2
    3f38:	180b883a 	mov	r5,r3
    3f3c:	31a73ac4 	addi	r6,r6,-25365
    3f40:	39f97984 	addi	r7,r7,-6682
    3f44:	0005b140 	call	5b14 <__subdf3>
    3f48:	1009883a 	mov	r4,r2
    3f4c:	180b883a 	mov	r5,r3
    3f50:	980d883a 	mov	r6,r19
    3f54:	900f883a 	mov	r7,r18
    3f58:	00053f00 	call	53f0 <__muldf3>
    3f5c:	0195ecb4 	movhi	r6,22450
    3f60:	01cfb1f4 	movhi	r7,16071
    3f64:	1009883a 	mov	r4,r2
    3f68:	180b883a 	mov	r5,r3
    3f6c:	31bf9f44 	addi	r6,r6,-387
    3f70:	39c778c4 	addi	r7,r7,7651
    3f74:	00049f00 	call	49f0 <__adddf3>
    3f78:	1009883a 	mov	r4,r2
    3f7c:	180b883a 	mov	r5,r3
    3f80:	980d883a 	mov	r6,r19
    3f84:	900f883a 	mov	r7,r18
    3f88:	00053f00 	call	53f0 <__muldf3>
    3f8c:	01867074 	movhi	r6,6593
    3f90:	01cfcab4 	movhi	r7,16170
    3f94:	1009883a 	mov	r4,r2
    3f98:	180b883a 	mov	r5,r3
    3f9c:	31987544 	addi	r6,r6,25045
    3fa0:	39c06804 	addi	r7,r7,416
    3fa4:	0005b140 	call	5b14 <__subdf3>
    3fa8:	1009883a 	mov	r4,r2
    3fac:	180b883a 	mov	r5,r3
    3fb0:	980d883a 	mov	r6,r19
    3fb4:	900f883a 	mov	r7,r18
    3fb8:	00053f00 	call	53f0 <__muldf3>
    3fbc:	01844474 	movhi	r6,4369
    3fc0:	01cfe074 	movhi	r7,16257
    3fc4:	1009883a 	mov	r4,r2
    3fc8:	180b883a 	mov	r5,r3
    3fcc:	31be2984 	addi	r6,r6,-1882
    3fd0:	39c44444 	addi	r7,r7,4369
    3fd4:	00049f00 	call	49f0 <__adddf3>
    3fd8:	d9000c17 	ldw	r4,48(sp)
    3fdc:	1839883a 	mov	fp,r3
    3fe0:	20003e26 	beq	r4,zero,40dc <__kernel_sin+0x260>
    3fe4:	b809883a 	mov	r4,r23
    3fe8:	b00b883a 	mov	r5,r22
    3fec:	000d883a 	mov	r6,zero
    3ff0:	01cff834 	movhi	r7,16352
    3ff4:	d8800015 	stw	r2,0(sp)
    3ff8:	00053f00 	call	53f0 <__muldf3>
    3ffc:	da000017 	ldw	r8,0(sp)
    4000:	a809883a 	mov	r4,r21
    4004:	a00b883a 	mov	r5,r20
    4008:	400d883a 	mov	r6,r8
    400c:	e00f883a 	mov	r7,fp
    4010:	d8c00115 	stw	r3,4(sp)
    4014:	d8800015 	stw	r2,0(sp)
    4018:	00053f00 	call	53f0 <__muldf3>
    401c:	da800017 	ldw	r10,0(sp)
    4020:	da400117 	ldw	r9,4(sp)
    4024:	100d883a 	mov	r6,r2
    4028:	5009883a 	mov	r4,r10
    402c:	480b883a 	mov	r5,r9
    4030:	180f883a 	mov	r7,r3
    4034:	0005b140 	call	5b14 <__subdf3>
    4038:	980d883a 	mov	r6,r19
    403c:	900f883a 	mov	r7,r18
    4040:	1009883a 	mov	r4,r2
    4044:	180b883a 	mov	r5,r3
    4048:	00053f00 	call	53f0 <__muldf3>
    404c:	1009883a 	mov	r4,r2
    4050:	180b883a 	mov	r5,r3
    4054:	b80d883a 	mov	r6,r23
    4058:	b00f883a 	mov	r7,r22
    405c:	0005b140 	call	5b14 <__subdf3>
    4060:	01955574 	movhi	r6,21845
    4064:	01cff174 	movhi	r7,16325
    4068:	a809883a 	mov	r4,r21
    406c:	a00b883a 	mov	r5,r20
    4070:	31955244 	addi	r6,r6,21833
    4074:	39d55544 	addi	r7,r7,21845
    4078:	1027883a 	mov	r19,r2
    407c:	1825883a 	mov	r18,r3
    4080:	00053f00 	call	53f0 <__muldf3>
    4084:	9809883a 	mov	r4,r19
    4088:	900b883a 	mov	r5,r18
    408c:	100d883a 	mov	r6,r2
    4090:	180f883a 	mov	r7,r3
    4094:	00049f00 	call	49f0 <__adddf3>
    4098:	8809883a 	mov	r4,r17
    409c:	800b883a 	mov	r5,r16
    40a0:	100d883a 	mov	r6,r2
    40a4:	180f883a 	mov	r7,r3
    40a8:	0005b140 	call	5b14 <__subdf3>
    40ac:	dfc00b17 	ldw	ra,44(sp)
    40b0:	df000a17 	ldw	fp,40(sp)
    40b4:	ddc00917 	ldw	r23,36(sp)
    40b8:	dd800817 	ldw	r22,32(sp)
    40bc:	dd400717 	ldw	r21,28(sp)
    40c0:	dd000617 	ldw	r20,24(sp)
    40c4:	dcc00517 	ldw	r19,20(sp)
    40c8:	dc800417 	ldw	r18,16(sp)
    40cc:	dc400317 	ldw	r17,12(sp)
    40d0:	dc000217 	ldw	r16,8(sp)
    40d4:	dec00c04 	addi	sp,sp,48
    40d8:	f800283a 	ret
    40dc:	9809883a 	mov	r4,r19
    40e0:	900b883a 	mov	r5,r18
    40e4:	100d883a 	mov	r6,r2
    40e8:	180f883a 	mov	r7,r3
    40ec:	00053f00 	call	53f0 <__muldf3>
    40f0:	01955574 	movhi	r6,21845
    40f4:	01cff174 	movhi	r7,16325
    40f8:	1009883a 	mov	r4,r2
    40fc:	180b883a 	mov	r5,r3
    4100:	31955244 	addi	r6,r6,21833
    4104:	39d55544 	addi	r7,r7,21845
    4108:	0005b140 	call	5b14 <__subdf3>
    410c:	a80d883a 	mov	r6,r21
    4110:	a00f883a 	mov	r7,r20
    4114:	1009883a 	mov	r4,r2
    4118:	180b883a 	mov	r5,r3
    411c:	00053f00 	call	53f0 <__muldf3>
    4120:	1009883a 	mov	r4,r2
    4124:	180b883a 	mov	r5,r3
    4128:	880d883a 	mov	r6,r17
    412c:	800f883a 	mov	r7,r16
    4130:	00049f00 	call	49f0 <__adddf3>
    4134:	003fdd06 	br	40ac <__alt_mem_Flash_flash_data+0xf40040ac>
    4138:	8805883a 	mov	r2,r17
    413c:	8007883a 	mov	r3,r16
    4140:	003fda06 	br	40ac <__alt_mem_Flash_flash_data+0xf40040ac>

00004144 <fabs>:
    4144:	00e00034 	movhi	r3,32768
    4148:	18ffffc4 	addi	r3,r3,-1
    414c:	2005883a 	mov	r2,r4
    4150:	28c6703a 	and	r3,r5,r3
    4154:	f800283a 	ret

00004158 <floor>:
    4158:	defff904 	addi	sp,sp,-28
    415c:	dc800215 	stw	r18,8(sp)
    4160:	2825d53a 	srai	r18,r5,20
    4164:	dd000415 	stw	r20,16(sp)
    4168:	dcc00315 	stw	r19,12(sp)
    416c:	9481ffcc 	andi	r18,r18,2047
    4170:	dc400115 	stw	r17,4(sp)
    4174:	dc000015 	stw	r16,0(sp)
    4178:	dfc00615 	stw	ra,24(sp)
    417c:	dd400515 	stw	r21,20(sp)
    4180:	94ff0044 	addi	r19,r18,-1023
    4184:	018004c4 	movi	r6,19
    4188:	2821883a 	mov	r16,r5
    418c:	2005883a 	mov	r2,r4
    4190:	280f883a 	mov	r7,r5
    4194:	2829883a 	mov	r20,r5
    4198:	2023883a 	mov	r17,r4
    419c:	34c01916 	blt	r6,r19,4204 <floor+0xac>
    41a0:	98003d16 	blt	r19,zero,4298 <floor+0x140>
    41a4:	04800434 	movhi	r18,16
    41a8:	94bfffc4 	addi	r18,r18,-1
    41ac:	94e5d83a 	sra	r18,r18,r19
    41b0:	914c703a 	and	r6,r18,r5
    41b4:	310cb03a 	or	r6,r6,r4
    41b8:	30001626 	beq	r6,zero,4214 <floor+0xbc>
    41bc:	01a20034 	movhi	r6,34816
    41c0:	01df8e34 	movhi	r7,32312
    41c4:	319d6704 	addi	r6,r6,30108
    41c8:	39f90f04 	addi	r7,r7,-7108
    41cc:	00049f00 	call	49f0 <__adddf3>
    41d0:	1009883a 	mov	r4,r2
    41d4:	180b883a 	mov	r5,r3
    41d8:	000d883a 	mov	r6,zero
    41dc:	000f883a 	mov	r7,zero
    41e0:	00053100 	call	5310 <__gedf2>
    41e4:	0080040e 	bge	zero,r2,41f8 <floor+0xa0>
    41e8:	80003d16 	blt	r16,zero,42e0 <floor+0x188>
    41ec:	04a0303a 	nor	r16,zero,r18
    41f0:	a420703a 	and	r16,r20,r16
    41f4:	0023883a 	mov	r17,zero
    41f8:	8805883a 	mov	r2,r17
    41fc:	8007883a 	mov	r3,r16
    4200:	00000506 	br	4218 <floor+0xc0>
    4204:	01800cc4 	movi	r6,51
    4208:	34c00c0e 	bge	r6,r19,423c <floor+0xe4>
    420c:	01810004 	movi	r6,1024
    4210:	99803026 	beq	r19,r6,42d4 <floor+0x17c>
    4214:	3807883a 	mov	r3,r7
    4218:	dfc00617 	ldw	ra,24(sp)
    421c:	dd400517 	ldw	r21,20(sp)
    4220:	dd000417 	ldw	r20,16(sp)
    4224:	dcc00317 	ldw	r19,12(sp)
    4228:	dc800217 	ldw	r18,8(sp)
    422c:	dc400117 	ldw	r17,4(sp)
    4230:	dc000017 	ldw	r16,0(sp)
    4234:	dec00704 	addi	sp,sp,28
    4238:	f800283a 	ret
    423c:	01bfffc4 	movi	r6,-1
    4240:	957efb44 	addi	r21,r18,-1043
    4244:	356ad83a 	srl	r21,r6,r21
    4248:	a90c703a 	and	r6,r21,r4
    424c:	303ff126 	beq	r6,zero,4214 <__alt_mem_Flash_flash_data+0xf4004214>
    4250:	01a20034 	movhi	r6,34816
    4254:	01df8e34 	movhi	r7,32312
    4258:	319d6704 	addi	r6,r6,30108
    425c:	39f90f04 	addi	r7,r7,-7108
    4260:	00049f00 	call	49f0 <__adddf3>
    4264:	1009883a 	mov	r4,r2
    4268:	180b883a 	mov	r5,r3
    426c:	000d883a 	mov	r6,zero
    4270:	000f883a 	mov	r7,zero
    4274:	00053100 	call	5310 <__gedf2>
    4278:	00bfdf0e 	bge	zero,r2,41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    427c:	80001c16 	blt	r16,zero,42f0 <floor+0x198>
    4280:	056a303a 	nor	r21,zero,r21
    4284:	a021883a 	mov	r16,r20
    4288:	8d62703a 	and	r17,r17,r21
    428c:	8805883a 	mov	r2,r17
    4290:	8007883a 	mov	r3,r16
    4294:	003fe006 	br	4218 <__alt_mem_Flash_flash_data+0xf4004218>
    4298:	01a20034 	movhi	r6,34816
    429c:	01df8e34 	movhi	r7,32312
    42a0:	319d6704 	addi	r6,r6,30108
    42a4:	39f90f04 	addi	r7,r7,-7108
    42a8:	00049f00 	call	49f0 <__adddf3>
    42ac:	1009883a 	mov	r4,r2
    42b0:	180b883a 	mov	r5,r3
    42b4:	000d883a 	mov	r6,zero
    42b8:	000f883a 	mov	r7,zero
    42bc:	00053100 	call	5310 <__gedf2>
    42c0:	00bfcd0e 	bge	zero,r2,41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    42c4:	80001516 	blt	r16,zero,431c <floor+0x1c4>
    42c8:	0023883a 	mov	r17,zero
    42cc:	0021883a 	mov	r16,zero
    42d0:	003fc906 	br	41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    42d4:	200d883a 	mov	r6,r4
    42d8:	00049f00 	call	49f0 <__adddf3>
    42dc:	003fce06 	br	4218 <__alt_mem_Flash_flash_data+0xf4004218>
    42e0:	00800434 	movhi	r2,16
    42e4:	14e7d83a 	sra	r19,r2,r19
    42e8:	84e9883a 	add	r20,r16,r19
    42ec:	003fbf06 	br	41ec <__alt_mem_Flash_flash_data+0xf40041ec>
    42f0:	00800504 	movi	r2,20
    42f4:	98801326 	beq	r19,r2,4344 <floor+0x1ec>
    42f8:	00810cc4 	movi	r2,1075
    42fc:	14a5c83a 	sub	r18,r2,r18
    4300:	00800044 	movi	r2,1
    4304:	1484983a 	sll	r2,r2,r18
    4308:	1445883a 	add	r2,r2,r17
    430c:	14400b2e 	bgeu	r2,r17,433c <floor+0x1e4>
    4310:	85000044 	addi	r20,r16,1
    4314:	1023883a 	mov	r17,r2
    4318:	003fd906 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>
    431c:	00a00034 	movhi	r2,32768
    4320:	10bfffc4 	addi	r2,r2,-1
    4324:	8084703a 	and	r2,r16,r2
    4328:	1462b03a 	or	r17,r2,r17
    432c:	883fb226 	beq	r17,zero,41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    4330:	0023883a 	mov	r17,zero
    4334:	042ffc34 	movhi	r16,49136
    4338:	003faf06 	br	41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    433c:	1023883a 	mov	r17,r2
    4340:	003fcf06 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>
    4344:	85000044 	addi	r20,r16,1
    4348:	003fcd06 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>

0000434c <scalbn>:
    434c:	2a1ffc2c 	andhi	r8,r5,32752
    4350:	4011d53a 	srai	r8,r8,20
    4354:	defffe04 	addi	sp,sp,-8
    4358:	dc000015 	stw	r16,0(sp)
    435c:	dfc00115 	stw	ra,4(sp)
    4360:	280f883a 	mov	r7,r5
    4364:	2015883a 	mov	r10,r4
    4368:	3021883a 	mov	r16,r6
    436c:	4000251e 	bne	r8,zero,4404 <scalbn+0xb8>
    4370:	00a00034 	movhi	r2,32768
    4374:	10bfffc4 	addi	r2,r2,-1
    4378:	2884703a 	and	r2,r5,r2
    437c:	1104b03a 	or	r2,r2,r4
    4380:	10003126 	beq	r2,zero,4448 <scalbn+0xfc>
    4384:	01d0d434 	movhi	r7,17232
    4388:	000d883a 	mov	r6,zero
    438c:	00053f00 	call	53f0 <__muldf3>
    4390:	013ffff4 	movhi	r4,65535
    4394:	210f2c04 	addi	r4,r4,15536
    4398:	1015883a 	mov	r10,r2
    439c:	180f883a 	mov	r7,r3
    43a0:	81002f16 	blt	r16,r4,4460 <scalbn+0x114>
    43a4:	1a5ffc2c 	andhi	r9,r3,32752
    43a8:	4813d53a 	srai	r9,r9,20
    43ac:	0081ff84 	movi	r2,2046
    43b0:	180d883a 	mov	r6,r3
    43b4:	4a3ff284 	addi	r8,r9,-54
    43b8:	4411883a 	add	r8,r8,r16
    43bc:	1200170e 	bge	r2,r8,441c <scalbn+0xd0>
    43c0:	01220034 	movhi	r4,34816
    43c4:	015f8e34 	movhi	r5,32312
    43c8:	500d883a 	mov	r6,r10
    43cc:	211d6704 	addi	r4,r4,30108
    43d0:	29790f04 	addi	r5,r5,-7108
    43d4:	00045180 	call	4518 <copysign>
    43d8:	01a20034 	movhi	r6,34816
    43dc:	01df8e34 	movhi	r7,32312
    43e0:	1009883a 	mov	r4,r2
    43e4:	180b883a 	mov	r5,r3
    43e8:	319d6704 	addi	r6,r6,30108
    43ec:	39f90f04 	addi	r7,r7,-7108
    43f0:	00053f00 	call	53f0 <__muldf3>
    43f4:	dfc00117 	ldw	ra,4(sp)
    43f8:	dc000017 	ldw	r16,0(sp)
    43fc:	dec00204 	addi	sp,sp,8
    4400:	f800283a 	ret
    4404:	0081ffc4 	movi	r2,2047
    4408:	280d883a 	mov	r6,r5
    440c:	40803126 	beq	r8,r2,44d4 <scalbn+0x188>
    4410:	4411883a 	add	r8,r8,r16
    4414:	0081ff84 	movi	r2,2046
    4418:	123fe916 	blt	r2,r8,43c0 <__alt_mem_Flash_flash_data+0xf40043c0>
    441c:	02001b0e 	bge	zero,r8,448c <scalbn+0x140>
    4420:	4010953a 	slli	r8,r8,20
    4424:	00e00434 	movhi	r3,32784
    4428:	18ffffc4 	addi	r3,r3,-1
    442c:	30ce703a 	and	r7,r6,r3
    4430:	5005883a 	mov	r2,r10
    4434:	41c6b03a 	or	r3,r8,r7
    4438:	dfc00117 	ldw	ra,4(sp)
    443c:	dc000017 	ldw	r16,0(sp)
    4440:	dec00204 	addi	sp,sp,8
    4444:	f800283a 	ret
    4448:	2005883a 	mov	r2,r4
    444c:	2807883a 	mov	r3,r5
    4450:	dfc00117 	ldw	ra,4(sp)
    4454:	dc000017 	ldw	r16,0(sp)
    4458:	dec00204 	addi	sp,sp,8
    445c:	f800283a 	ret
    4460:	01b0be74 	movhi	r6,49913
    4464:	01c06974 	movhi	r7,421
    4468:	31bcd644 	addi	r6,r6,-3239
    446c:	39db87c4 	addi	r7,r7,28191
    4470:	1009883a 	mov	r4,r2
    4474:	180b883a 	mov	r5,r3
    4478:	00053f00 	call	53f0 <__muldf3>
    447c:	dfc00117 	ldw	ra,4(sp)
    4480:	dc000017 	ldw	r16,0(sp)
    4484:	dec00204 	addi	sp,sp,8
    4488:	f800283a 	ret
    448c:	00bff2c4 	movi	r2,-53
    4490:	4080160e 	bge	r8,r2,44ec <scalbn+0x1a0>
    4494:	00b0d414 	movui	r2,50000
    4498:	143fc916 	blt	r2,r16,43c0 <__alt_mem_Flash_flash_data+0xf40043c0>
    449c:	0130be74 	movhi	r4,49913
    44a0:	01406974 	movhi	r5,421
    44a4:	500d883a 	mov	r6,r10
    44a8:	213cd644 	addi	r4,r4,-3239
    44ac:	295b87c4 	addi	r5,r5,28191
    44b0:	00045180 	call	4518 <copysign>
    44b4:	01b0be74 	movhi	r6,49913
    44b8:	01c06974 	movhi	r7,421
    44bc:	1009883a 	mov	r4,r2
    44c0:	180b883a 	mov	r5,r3
    44c4:	31bcd644 	addi	r6,r6,-3239
    44c8:	39db87c4 	addi	r7,r7,28191
    44cc:	00053f00 	call	53f0 <__muldf3>
    44d0:	003fd906 	br	4438 <__alt_mem_Flash_flash_data+0xf4004438>
    44d4:	200d883a 	mov	r6,r4
    44d8:	00049f00 	call	49f0 <__adddf3>
    44dc:	dfc00117 	ldw	ra,4(sp)
    44e0:	dc000017 	ldw	r16,0(sp)
    44e4:	dec00204 	addi	sp,sp,8
    44e8:	f800283a 	ret
    44ec:	42000d84 	addi	r8,r8,54
    44f0:	4012953a 	slli	r9,r8,20
    44f4:	01e00434 	movhi	r7,32784
    44f8:	39ffffc4 	addi	r7,r7,-1
    44fc:	31ca703a 	and	r5,r6,r7
    4500:	5009883a 	mov	r4,r10
    4504:	494ab03a 	or	r5,r9,r5
    4508:	000d883a 	mov	r6,zero
    450c:	01cf2434 	movhi	r7,15504
    4510:	00053f00 	call	53f0 <__muldf3>
    4514:	003fc806 	br	4438 <__alt_mem_Flash_flash_data+0xf4004438>

00004518 <copysign>:
    4518:	2005883a 	mov	r2,r4
    451c:	01200034 	movhi	r4,32768
    4520:	213fffc4 	addi	r4,r4,-1
    4524:	38e0002c 	andhi	r3,r7,32768
    4528:	290a703a 	and	r5,r5,r4
    452c:	1946b03a 	or	r3,r3,r5
    4530:	f800283a 	ret

00004534 <udivmodsi4>:
    4534:	2900182e 	bgeu	r5,r4,4598 <udivmodsi4+0x64>
    4538:	28001716 	blt	r5,zero,4598 <udivmodsi4+0x64>
    453c:	00800804 	movi	r2,32
    4540:	00c00044 	movi	r3,1
    4544:	00000206 	br	4550 <udivmodsi4+0x1c>
    4548:	10001126 	beq	r2,zero,4590 <udivmodsi4+0x5c>
    454c:	28000516 	blt	r5,zero,4564 <udivmodsi4+0x30>
    4550:	294b883a 	add	r5,r5,r5
    4554:	10bfffc4 	addi	r2,r2,-1
    4558:	18c7883a 	add	r3,r3,r3
    455c:	293ffa36 	bltu	r5,r4,4548 <__alt_mem_Flash_flash_data+0xf4004548>
    4560:	18000b26 	beq	r3,zero,4590 <udivmodsi4+0x5c>
    4564:	0005883a 	mov	r2,zero
    4568:	21400236 	bltu	r4,r5,4574 <udivmodsi4+0x40>
    456c:	2149c83a 	sub	r4,r4,r5
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	1806d07a 	srli	r3,r3,1
    4578:	280ad07a 	srli	r5,r5,1
    457c:	183ffa1e 	bne	r3,zero,4568 <__alt_mem_Flash_flash_data+0xf4004568>
    4580:	3000011e 	bne	r6,zero,4588 <udivmodsi4+0x54>
    4584:	f800283a 	ret
    4588:	2005883a 	mov	r2,r4
    458c:	f800283a 	ret
    4590:	0005883a 	mov	r2,zero
    4594:	003ffa06 	br	4580 <__alt_mem_Flash_flash_data+0xf4004580>
    4598:	00c00044 	movi	r3,1
    459c:	003ff106 	br	4564 <__alt_mem_Flash_flash_data+0xf4004564>

000045a0 <__divsi3>:
    45a0:	defffe04 	addi	sp,sp,-8
    45a4:	dfc00115 	stw	ra,4(sp)
    45a8:	dc000015 	stw	r16,0(sp)
    45ac:	20000b16 	blt	r4,zero,45dc <__divsi3+0x3c>
    45b0:	0021883a 	mov	r16,zero
    45b4:	28000c16 	blt	r5,zero,45e8 <__divsi3+0x48>
    45b8:	000d883a 	mov	r6,zero
    45bc:	00045340 	call	4534 <udivmodsi4>
    45c0:	0407c83a 	sub	r3,zero,r16
    45c4:	1884f03a 	xor	r2,r3,r2
    45c8:	1405883a 	add	r2,r2,r16
    45cc:	dfc00117 	ldw	ra,4(sp)
    45d0:	dc000017 	ldw	r16,0(sp)
    45d4:	dec00204 	addi	sp,sp,8
    45d8:	f800283a 	ret
    45dc:	0109c83a 	sub	r4,zero,r4
    45e0:	04000044 	movi	r16,1
    45e4:	283ff40e 	bge	r5,zero,45b8 <__alt_mem_Flash_flash_data+0xf40045b8>
    45e8:	014bc83a 	sub	r5,zero,r5
    45ec:	8400005c 	xori	r16,r16,1
    45f0:	003ff106 	br	45b8 <__alt_mem_Flash_flash_data+0xf40045b8>

000045f4 <__modsi3>:
    45f4:	defffd04 	addi	sp,sp,-12
    45f8:	dfc00215 	stw	ra,8(sp)
    45fc:	dc400115 	stw	r17,4(sp)
    4600:	dc000015 	stw	r16,0(sp)
    4604:	20000c16 	blt	r4,zero,4638 <__modsi3+0x44>
    4608:	0023883a 	mov	r17,zero
    460c:	0021883a 	mov	r16,zero
    4610:	28000d16 	blt	r5,zero,4648 <__modsi3+0x54>
    4614:	01800044 	movi	r6,1
    4618:	00045340 	call	4534 <udivmodsi4>
    461c:	1404f03a 	xor	r2,r2,r16
    4620:	8885883a 	add	r2,r17,r2
    4624:	dfc00217 	ldw	ra,8(sp)
    4628:	dc400117 	ldw	r17,4(sp)
    462c:	dc000017 	ldw	r16,0(sp)
    4630:	dec00304 	addi	sp,sp,12
    4634:	f800283a 	ret
    4638:	0109c83a 	sub	r4,zero,r4
    463c:	04400044 	movi	r17,1
    4640:	043fffc4 	movi	r16,-1
    4644:	283ff30e 	bge	r5,zero,4614 <__alt_mem_Flash_flash_data+0xf4004614>
    4648:	014bc83a 	sub	r5,zero,r5
    464c:	003ff106 	br	4614 <__alt_mem_Flash_flash_data+0xf4004614>

00004650 <__udivsi3>:
    4650:	000d883a 	mov	r6,zero
    4654:	00045341 	jmpi	4534 <udivmodsi4>

00004658 <__umodsi3>:
    4658:	01800044 	movi	r6,1
    465c:	00045341 	jmpi	4534 <udivmodsi4>

00004660 <__eqsf2>:
    4660:	2006d5fa 	srli	r3,r4,23
    4664:	280cd5fa 	srli	r6,r5,23
    4668:	01c02034 	movhi	r7,128
    466c:	39ffffc4 	addi	r7,r7,-1
    4670:	18c03fcc 	andi	r3,r3,255
    4674:	02003fc4 	movi	r8,255
    4678:	3904703a 	and	r2,r7,r4
    467c:	31803fcc 	andi	r6,r6,255
    4680:	394e703a 	and	r7,r7,r5
    4684:	2008d7fa 	srli	r4,r4,31
    4688:	280ad7fa 	srli	r5,r5,31
    468c:	1a000c26 	beq	r3,r8,46c0 <__eqsf2+0x60>
    4690:	02003fc4 	movi	r8,255
    4694:	32000326 	beq	r6,r8,46a4 <__eqsf2+0x44>
    4698:	19800426 	beq	r3,r6,46ac <__eqsf2+0x4c>
    469c:	00800044 	movi	r2,1
    46a0:	f800283a 	ret
    46a4:	383ffd1e 	bne	r7,zero,469c <__alt_mem_Flash_flash_data+0xf400469c>
    46a8:	19bffc1e 	bne	r3,r6,469c <__alt_mem_Flash_flash_data+0xf400469c>
    46ac:	11fffb1e 	bne	r2,r7,469c <__alt_mem_Flash_flash_data+0xf400469c>
    46b0:	21400626 	beq	r4,r5,46cc <__eqsf2+0x6c>
    46b4:	183ff91e 	bne	r3,zero,469c <__alt_mem_Flash_flash_data+0xf400469c>
    46b8:	1004c03a 	cmpne	r2,r2,zero
    46bc:	f800283a 	ret
    46c0:	103ff326 	beq	r2,zero,4690 <__alt_mem_Flash_flash_data+0xf4004690>
    46c4:	00800044 	movi	r2,1
    46c8:	f800283a 	ret
    46cc:	0005883a 	mov	r2,zero
    46d0:	f800283a 	ret

000046d4 <__gesf2>:
    46d4:	2004d5fa 	srli	r2,r4,23
    46d8:	2806d5fa 	srli	r3,r5,23
    46dc:	01802034 	movhi	r6,128
    46e0:	31bfffc4 	addi	r6,r6,-1
    46e4:	10803fcc 	andi	r2,r2,255
    46e8:	01c03fc4 	movi	r7,255
    46ec:	3110703a 	and	r8,r6,r4
    46f0:	18c03fcc 	andi	r3,r3,255
    46f4:	314c703a 	and	r6,r6,r5
    46f8:	2008d7fa 	srli	r4,r4,31
    46fc:	280ad7fa 	srli	r5,r5,31
    4700:	11c00926 	beq	r2,r7,4728 <__gesf2+0x54>
    4704:	19c01226 	beq	r3,r7,4750 <__gesf2+0x7c>
    4708:	1000091e 	bne	r2,zero,4730 <__gesf2+0x5c>
    470c:	4013003a 	cmpeq	r9,r8,zero
    4710:	480f883a 	mov	r7,r9
    4714:	1800091e 	bne	r3,zero,473c <__gesf2+0x68>
    4718:	3000081e 	bne	r6,zero,473c <__gesf2+0x68>
    471c:	48001026 	beq	r9,zero,4760 <__gesf2+0x8c>
    4720:	0005883a 	mov	r2,zero
    4724:	f800283a 	ret
    4728:	4000161e 	bne	r8,zero,4784 <__gesf2+0xb0>
    472c:	18800826 	beq	r3,r2,4750 <__gesf2+0x7c>
    4730:	1800091e 	bne	r3,zero,4758 <__gesf2+0x84>
    4734:	000f883a 	mov	r7,zero
    4738:	30000926 	beq	r6,zero,4760 <__gesf2+0x8c>
    473c:	29403fcc 	andi	r5,r5,255
    4740:	38000626 	beq	r7,zero,475c <__gesf2+0x88>
    4744:	2800071e 	bne	r5,zero,4764 <__gesf2+0x90>
    4748:	00bfffc4 	movi	r2,-1
    474c:	f800283a 	ret
    4750:	30000c1e 	bne	r6,zero,4784 <__gesf2+0xb0>
    4754:	103fed26 	beq	r2,zero,470c <__alt_mem_Flash_flash_data+0xf400470c>
    4758:	29403fcc 	andi	r5,r5,255
    475c:	21400326 	beq	r4,r5,476c <__gesf2+0x98>
    4760:	203ff91e 	bne	r4,zero,4748 <__alt_mem_Flash_flash_data+0xf4004748>
    4764:	00800044 	movi	r2,1
    4768:	f800283a 	ret
    476c:	18bffc16 	blt	r3,r2,4760 <__alt_mem_Flash_flash_data+0xf4004760>
    4770:	10c00216 	blt	r2,r3,477c <__gesf2+0xa8>
    4774:	323ffa36 	bltu	r6,r8,4760 <__alt_mem_Flash_flash_data+0xf4004760>
    4778:	41bfe92e 	bgeu	r8,r6,4720 <__alt_mem_Flash_flash_data+0xf4004720>
    477c:	203ff226 	beq	r4,zero,4748 <__alt_mem_Flash_flash_data+0xf4004748>
    4780:	003ff806 	br	4764 <__alt_mem_Flash_flash_data+0xf4004764>
    4784:	00bfff84 	movi	r2,-2
    4788:	f800283a 	ret

0000478c <__lesf2>:
    478c:	2004d5fa 	srli	r2,r4,23
    4790:	280cd5fa 	srli	r6,r5,23
    4794:	00c02034 	movhi	r3,128
    4798:	18ffffc4 	addi	r3,r3,-1
    479c:	10803fcc 	andi	r2,r2,255
    47a0:	01c03fc4 	movi	r7,255
    47a4:	1910703a 	and	r8,r3,r4
    47a8:	31803fcc 	andi	r6,r6,255
    47ac:	1946703a 	and	r3,r3,r5
    47b0:	2008d7fa 	srli	r4,r4,31
    47b4:	280ad7fa 	srli	r5,r5,31
    47b8:	11c00a26 	beq	r2,r7,47e4 <__lesf2+0x58>
    47bc:	31c01526 	beq	r6,r7,4814 <__lesf2+0x88>
    47c0:	10000a1e 	bne	r2,zero,47ec <__lesf2+0x60>
    47c4:	4013003a 	cmpeq	r9,r8,zero
    47c8:	480f883a 	mov	r7,r9
    47cc:	30000d26 	beq	r6,zero,4804 <__lesf2+0x78>
    47d0:	29403fcc 	andi	r5,r5,255
    47d4:	38001426 	beq	r7,zero,4828 <__lesf2+0x9c>
    47d8:	2800081e 	bne	r5,zero,47fc <__lesf2+0x70>
    47dc:	00bfffc4 	movi	r2,-1
    47e0:	f800283a 	ret
    47e4:	40000c1e 	bne	r8,zero,4818 <__lesf2+0x8c>
    47e8:	30800a26 	beq	r6,r2,4814 <__lesf2+0x88>
    47ec:	30000d1e 	bne	r6,zero,4824 <__lesf2+0x98>
    47f0:	000f883a 	mov	r7,zero
    47f4:	183ff61e 	bne	r3,zero,47d0 <__alt_mem_Flash_flash_data+0xf40047d0>
    47f8:	203ff81e 	bne	r4,zero,47dc <__alt_mem_Flash_flash_data+0xf40047dc>
    47fc:	00800044 	movi	r2,1
    4800:	f800283a 	ret
    4804:	183ff21e 	bne	r3,zero,47d0 <__alt_mem_Flash_flash_data+0xf40047d0>
    4808:	483ffb26 	beq	r9,zero,47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    480c:	0005883a 	mov	r2,zero
    4810:	f800283a 	ret
    4814:	18000226 	beq	r3,zero,4820 <__lesf2+0x94>
    4818:	00800084 	movi	r2,2
    481c:	f800283a 	ret
    4820:	103fe826 	beq	r2,zero,47c4 <__alt_mem_Flash_flash_data+0xf40047c4>
    4824:	29403fcc 	andi	r5,r5,255
    4828:	217ff31e 	bne	r4,r5,47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    482c:	30bff216 	blt	r6,r2,47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    4830:	11800216 	blt	r2,r6,483c <__lesf2+0xb0>
    4834:	1a3ff036 	bltu	r3,r8,47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    4838:	40fff42e 	bgeu	r8,r3,480c <__alt_mem_Flash_flash_data+0xf400480c>
    483c:	203fe726 	beq	r4,zero,47dc <__alt_mem_Flash_flash_data+0xf40047dc>
    4840:	003fee06 	br	47fc <__alt_mem_Flash_flash_data+0xf40047fc>

00004844 <__fixsfsi>:
    4844:	2006d5fa 	srli	r3,r4,23
    4848:	00802034 	movhi	r2,128
    484c:	10bfffc4 	addi	r2,r2,-1
    4850:	18c03fcc 	andi	r3,r3,255
    4854:	01401f84 	movi	r5,126
    4858:	1104703a 	and	r2,r2,r4
    485c:	2008d7fa 	srli	r4,r4,31
    4860:	28c0110e 	bge	r5,r3,48a8 <__fixsfsi+0x64>
    4864:	01402744 	movi	r5,157
    4868:	28c00b16 	blt	r5,r3,4898 <__fixsfsi+0x54>
    486c:	01402544 	movi	r5,149
    4870:	10802034 	orhi	r2,r2,128
    4874:	28c00e16 	blt	r5,r3,48b0 <__fixsfsi+0x6c>
    4878:	01402584 	movi	r5,150
    487c:	28c7c83a 	sub	r3,r5,r3
    4880:	10c6d83a 	srl	r3,r2,r3
    4884:	21003fcc 	andi	r4,r4,255
    4888:	0105c83a 	sub	r2,zero,r4
    488c:	1886f03a 	xor	r3,r3,r2
    4890:	1905883a 	add	r2,r3,r4
    4894:	f800283a 	ret
    4898:	00a00034 	movhi	r2,32768
    489c:	10bfffc4 	addi	r2,r2,-1
    48a0:	2085883a 	add	r2,r4,r2
    48a4:	f800283a 	ret
    48a8:	0005883a 	mov	r2,zero
    48ac:	f800283a 	ret
    48b0:	18ffda84 	addi	r3,r3,-150
    48b4:	10c6983a 	sll	r3,r2,r3
    48b8:	003ff206 	br	4884 <__alt_mem_Flash_flash_data+0xf4004884>

000048bc <__floatsisf>:
    48bc:	defffd04 	addi	sp,sp,-12
    48c0:	dc000015 	stw	r16,0(sp)
    48c4:	dfc00215 	stw	ra,8(sp)
    48c8:	dc400115 	stw	r17,4(sp)
    48cc:	2021883a 	mov	r16,r4
    48d0:	20003a26 	beq	r4,zero,49bc <__floatsisf+0x100>
    48d4:	2022d7fa 	srli	r17,r4,31
    48d8:	88000126 	beq	r17,zero,48e0 <__floatsisf+0x24>
    48dc:	0121c83a 	sub	r16,zero,r4
    48e0:	8009883a 	mov	r4,r16
    48e4:	00067e40 	call	67e4 <__clzsi2>
    48e8:	00c02784 	movi	r3,158
    48ec:	1887c83a 	sub	r3,r3,r2
    48f0:	01802584 	movi	r6,150
    48f4:	800b883a 	mov	r5,r16
    48f8:	30c01616 	blt	r6,r3,4954 <__floatsisf+0x98>
    48fc:	01000204 	movi	r4,8
    4900:	2080020e 	bge	r4,r2,490c <__floatsisf+0x50>
    4904:	10bffe04 	addi	r2,r2,-8
    4908:	80a0983a 	sll	r16,r16,r2
    490c:	00802034 	movhi	r2,128
    4910:	10bfffc4 	addi	r2,r2,-1
    4914:	8809883a 	mov	r4,r17
    4918:	80a0703a 	and	r16,r16,r2
    491c:	18803fcc 	andi	r2,r3,255
    4920:	100695fa 	slli	r3,r2,23
    4924:	20803fcc 	andi	r2,r4,255
    4928:	100897fa 	slli	r4,r2,31
    492c:	00802034 	movhi	r2,128
    4930:	10bfffc4 	addi	r2,r2,-1
    4934:	8084703a 	and	r2,r16,r2
    4938:	10c4b03a 	or	r2,r2,r3
    493c:	1104b03a 	or	r2,r2,r4
    4940:	dfc00217 	ldw	ra,8(sp)
    4944:	dc400117 	ldw	r17,4(sp)
    4948:	dc000017 	ldw	r16,0(sp)
    494c:	dec00304 	addi	sp,sp,12
    4950:	f800283a 	ret
    4954:	01002644 	movi	r4,153
    4958:	20c01c16 	blt	r4,r3,49cc <__floatsisf+0x110>
    495c:	01000144 	movi	r4,5
    4960:	2080020e 	bge	r4,r2,496c <__floatsisf+0xb0>
    4964:	113ffec4 	addi	r4,r2,-5
    4968:	290a983a 	sll	r5,r5,r4
    496c:	043f0034 	movhi	r16,64512
    4970:	843fffc4 	addi	r16,r16,-1
    4974:	298001cc 	andi	r6,r5,7
    4978:	2c20703a 	and	r16,r5,r16
    497c:	30000426 	beq	r6,zero,4990 <__floatsisf+0xd4>
    4980:	294003cc 	andi	r5,r5,15
    4984:	01000104 	movi	r4,4
    4988:	29000126 	beq	r5,r4,4990 <__floatsisf+0xd4>
    498c:	8121883a 	add	r16,r16,r4
    4990:	8101002c 	andhi	r4,r16,1024
    4994:	20000526 	beq	r4,zero,49ac <__floatsisf+0xf0>
    4998:	00c027c4 	movi	r3,159
    499c:	1887c83a 	sub	r3,r3,r2
    49a0:	00bf0034 	movhi	r2,64512
    49a4:	10bfffc4 	addi	r2,r2,-1
    49a8:	80a0703a 	and	r16,r16,r2
    49ac:	802091ba 	slli	r16,r16,6
    49b0:	8809883a 	mov	r4,r17
    49b4:	8020d27a 	srli	r16,r16,9
    49b8:	003fd806 	br	491c <__alt_mem_Flash_flash_data+0xf400491c>
    49bc:	0009883a 	mov	r4,zero
    49c0:	0007883a 	mov	r3,zero
    49c4:	0021883a 	mov	r16,zero
    49c8:	003fd406 	br	491c <__alt_mem_Flash_flash_data+0xf400491c>
    49cc:	01800144 	movi	r6,5
    49d0:	110006c4 	addi	r4,r2,27
    49d4:	8108983a 	sll	r4,r16,r4
    49d8:	308fc83a 	sub	r7,r6,r2
    49dc:	81cad83a 	srl	r5,r16,r7
    49e0:	2008c03a 	cmpne	r4,r4,zero
    49e4:	214ab03a 	or	r5,r4,r5
    49e8:	30bfe00e 	bge	r6,r2,496c <__alt_mem_Flash_flash_data+0xf400496c>
    49ec:	003fdd06 	br	4964 <__alt_mem_Flash_flash_data+0xf4004964>

000049f0 <__adddf3>:
    49f0:	02000434 	movhi	r8,16
    49f4:	423fffc4 	addi	r8,r8,-1
    49f8:	defffb04 	addi	sp,sp,-20
    49fc:	2a12703a 	and	r9,r5,r8
    4a00:	2806d7fa 	srli	r3,r5,31
    4a04:	3a10703a 	and	r8,r7,r8
    4a08:	3804d53a 	srli	r2,r7,20
    4a0c:	3014d77a 	srli	r10,r6,29
    4a10:	dc000015 	stw	r16,0(sp)
    4a14:	481290fa 	slli	r9,r9,3
    4a18:	2820d53a 	srli	r16,r5,20
    4a1c:	401090fa 	slli	r8,r8,3
    4a20:	200ad77a 	srli	r5,r4,29
    4a24:	380ed7fa 	srli	r7,r7,31
    4a28:	dc800215 	stw	r18,8(sp)
    4a2c:	dc400115 	stw	r17,4(sp)
    4a30:	dfc00415 	stw	ra,16(sp)
    4a34:	dcc00315 	stw	r19,12(sp)
    4a38:	1c803fcc 	andi	r18,r3,255
    4a3c:	8401ffcc 	andi	r16,r16,2047
    4a40:	494ab03a 	or	r5,r9,r5
    4a44:	202290fa 	slli	r17,r4,3
    4a48:	1081ffcc 	andi	r2,r2,2047
    4a4c:	4290b03a 	or	r8,r8,r10
    4a50:	300c90fa 	slli	r6,r6,3
    4a54:	91c07026 	beq	r18,r7,4c18 <__adddf3+0x228>
    4a58:	8087c83a 	sub	r3,r16,r2
    4a5c:	00c0b30e 	bge	zero,r3,4d2c <__adddf3+0x33c>
    4a60:	10002a1e 	bne	r2,zero,4b0c <__adddf3+0x11c>
    4a64:	4184b03a 	or	r2,r8,r6
    4a68:	1000991e 	bne	r2,zero,4cd0 <__adddf3+0x2e0>
    4a6c:	888001cc 	andi	r2,r17,7
    4a70:	10005b26 	beq	r2,zero,4be0 <__adddf3+0x1f0>
    4a74:	88c003cc 	andi	r3,r17,15
    4a78:	00800104 	movi	r2,4
    4a7c:	18805826 	beq	r3,r2,4be0 <__adddf3+0x1f0>
    4a80:	89800104 	addi	r6,r17,4
    4a84:	3463803a 	cmpltu	r17,r6,r17
    4a88:	2c4b883a 	add	r5,r5,r17
    4a8c:	2880202c 	andhi	r2,r5,128
    4a90:	9007883a 	mov	r3,r18
    4a94:	3023883a 	mov	r17,r6
    4a98:	10005426 	beq	r2,zero,4bec <__adddf3+0x1fc>
    4a9c:	84000044 	addi	r16,r16,1
    4aa0:	0081ffc4 	movi	r2,2047
    4aa4:	8080c126 	beq	r16,r2,4dac <__adddf3+0x3bc>
    4aa8:	013fe034 	movhi	r4,65408
    4aac:	213fffc4 	addi	r4,r4,-1
    4ab0:	290a703a 	and	r5,r5,r4
    4ab4:	2804977a 	slli	r2,r5,29
    4ab8:	280a927a 	slli	r5,r5,9
    4abc:	8822d0fa 	srli	r17,r17,3
    4ac0:	8401ffcc 	andi	r16,r16,2047
    4ac4:	2808d33a 	srli	r4,r5,12
    4ac8:	1444b03a 	or	r2,r2,r17
    4acc:	8401ffcc 	andi	r16,r16,2047
    4ad0:	800a953a 	slli	r5,r16,20
    4ad4:	18c03fcc 	andi	r3,r3,255
    4ad8:	04000434 	movhi	r16,16
    4adc:	180697fa 	slli	r3,r3,31
    4ae0:	843fffc4 	addi	r16,r16,-1
    4ae4:	2420703a 	and	r16,r4,r16
    4ae8:	8160b03a 	or	r16,r16,r5
    4aec:	80c6b03a 	or	r3,r16,r3
    4af0:	dfc00417 	ldw	ra,16(sp)
    4af4:	dcc00317 	ldw	r19,12(sp)
    4af8:	dc800217 	ldw	r18,8(sp)
    4afc:	dc400117 	ldw	r17,4(sp)
    4b00:	dc000017 	ldw	r16,0(sp)
    4b04:	dec00504 	addi	sp,sp,20
    4b08:	f800283a 	ret
    4b0c:	0081ffc4 	movi	r2,2047
    4b10:	80bfd626 	beq	r16,r2,4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4b14:	42002034 	orhi	r8,r8,128
    4b18:	00800e04 	movi	r2,56
    4b1c:	10c0a616 	blt	r2,r3,4db8 <__adddf3+0x3c8>
    4b20:	008007c4 	movi	r2,31
    4b24:	10c0c916 	blt	r2,r3,4e4c <__adddf3+0x45c>
    4b28:	00800804 	movi	r2,32
    4b2c:	10c5c83a 	sub	r2,r2,r3
    4b30:	408e983a 	sll	r7,r8,r2
    4b34:	30c8d83a 	srl	r4,r6,r3
    4b38:	3084983a 	sll	r2,r6,r2
    4b3c:	40c6d83a 	srl	r3,r8,r3
    4b40:	390cb03a 	or	r6,r7,r4
    4b44:	1004c03a 	cmpne	r2,r2,zero
    4b48:	308cb03a 	or	r6,r6,r2
    4b4c:	898dc83a 	sub	r6,r17,r6
    4b50:	89a3803a 	cmpltu	r17,r17,r6
    4b54:	28cbc83a 	sub	r5,r5,r3
    4b58:	2c4bc83a 	sub	r5,r5,r17
    4b5c:	3023883a 	mov	r17,r6
    4b60:	2880202c 	andhi	r2,r5,128
    4b64:	10006d26 	beq	r2,zero,4d1c <__adddf3+0x32c>
    4b68:	04c02034 	movhi	r19,128
    4b6c:	9cffffc4 	addi	r19,r19,-1
    4b70:	2ce6703a 	and	r19,r5,r19
    4b74:	98007e26 	beq	r19,zero,4d70 <__adddf3+0x380>
    4b78:	9809883a 	mov	r4,r19
    4b7c:	00067e40 	call	67e4 <__clzsi2>
    4b80:	10fffe04 	addi	r3,r2,-8
    4b84:	010007c4 	movi	r4,31
    4b88:	20c07f16 	blt	r4,r3,4d88 <__adddf3+0x398>
    4b8c:	01400a04 	movi	r5,40
    4b90:	2885c83a 	sub	r2,r5,r2
    4b94:	888ad83a 	srl	r5,r17,r2
    4b98:	98e6983a 	sll	r19,r19,r3
    4b9c:	88e2983a 	sll	r17,r17,r3
    4ba0:	2ce6b03a 	or	r19,r5,r19
    4ba4:	1c007c16 	blt	r3,r16,4d98 <__adddf3+0x3a8>
    4ba8:	1c21c83a 	sub	r16,r3,r16
    4bac:	81400044 	addi	r5,r16,1
    4bb0:	00c007c4 	movi	r3,31
    4bb4:	19409816 	blt	r3,r5,4e18 <__adddf3+0x428>
    4bb8:	1c21c83a 	sub	r16,r3,r16
    4bbc:	8c08983a 	sll	r4,r17,r16
    4bc0:	8946d83a 	srl	r3,r17,r5
    4bc4:	9c20983a 	sll	r16,r19,r16
    4bc8:	2008c03a 	cmpne	r4,r4,zero
    4bcc:	994ad83a 	srl	r5,r19,r5
    4bd0:	1c06b03a 	or	r3,r3,r16
    4bd4:	1922b03a 	or	r17,r3,r4
    4bd8:	0021883a 	mov	r16,zero
    4bdc:	003fa306 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4be0:	2880202c 	andhi	r2,r5,128
    4be4:	9007883a 	mov	r3,r18
    4be8:	103fac1e 	bne	r2,zero,4a9c <__alt_mem_Flash_flash_data+0xf4004a9c>
    4bec:	2804977a 	slli	r2,r5,29
    4bf0:	8822d0fa 	srli	r17,r17,3
    4bf4:	0101ffc4 	movi	r4,2047
    4bf8:	280ad0fa 	srli	r5,r5,3
    4bfc:	1444b03a 	or	r2,r2,r17
    4c00:	81002c26 	beq	r16,r4,4cb4 <__adddf3+0x2c4>
    4c04:	8120703a 	and	r16,r16,r4
    4c08:	01000434 	movhi	r4,16
    4c0c:	213fffc4 	addi	r4,r4,-1
    4c10:	2908703a 	and	r4,r5,r4
    4c14:	003fad06 	br	4acc <__alt_mem_Flash_flash_data+0xf4004acc>
    4c18:	8089c83a 	sub	r4,r16,r2
    4c1c:	01006a0e 	bge	zero,r4,4dc8 <__adddf3+0x3d8>
    4c20:	10003326 	beq	r2,zero,4cf0 <__adddf3+0x300>
    4c24:	0081ffc4 	movi	r2,2047
    4c28:	80bf9026 	beq	r16,r2,4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4c2c:	42002034 	orhi	r8,r8,128
    4c30:	00800e04 	movi	r2,56
    4c34:	1100b116 	blt	r2,r4,4efc <__adddf3+0x50c>
    4c38:	008007c4 	movi	r2,31
    4c3c:	1100e216 	blt	r2,r4,4fc8 <__adddf3+0x5d8>
    4c40:	00800804 	movi	r2,32
    4c44:	1105c83a 	sub	r2,r2,r4
    4c48:	4092983a 	sll	r9,r8,r2
    4c4c:	310ed83a 	srl	r7,r6,r4
    4c50:	3084983a 	sll	r2,r6,r2
    4c54:	4110d83a 	srl	r8,r8,r4
    4c58:	49ccb03a 	or	r6,r9,r7
    4c5c:	1004c03a 	cmpne	r2,r2,zero
    4c60:	308cb03a 	or	r6,r6,r2
    4c64:	344d883a 	add	r6,r6,r17
    4c68:	3463803a 	cmpltu	r17,r6,r17
    4c6c:	414b883a 	add	r5,r8,r5
    4c70:	2c4b883a 	add	r5,r5,r17
    4c74:	3023883a 	mov	r17,r6
    4c78:	2880202c 	andhi	r2,r5,128
    4c7c:	10002726 	beq	r2,zero,4d1c <__adddf3+0x32c>
    4c80:	84000044 	addi	r16,r16,1
    4c84:	0081ffc4 	movi	r2,2047
    4c88:	8080ae26 	beq	r16,r2,4f44 <__adddf3+0x554>
    4c8c:	00bfe034 	movhi	r2,65408
    4c90:	10bfffc4 	addi	r2,r2,-1
    4c94:	288a703a 	and	r5,r5,r2
    4c98:	880cd07a 	srli	r6,r17,1
    4c9c:	280897fa 	slli	r4,r5,31
    4ca0:	88c0004c 	andi	r3,r17,1
    4ca4:	30e2b03a 	or	r17,r6,r3
    4ca8:	280ad07a 	srli	r5,r5,1
    4cac:	8922b03a 	or	r17,r17,r4
    4cb0:	003f6e06 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4cb4:	1148b03a 	or	r4,r2,r5
    4cb8:	20003c26 	beq	r4,zero,4dac <__adddf3+0x3bc>
    4cbc:	29000234 	orhi	r4,r5,8
    4cc0:	01400434 	movhi	r5,16
    4cc4:	297fffc4 	addi	r5,r5,-1
    4cc8:	2148703a 	and	r4,r4,r5
    4ccc:	003f7f06 	br	4acc <__alt_mem_Flash_flash_data+0xf4004acc>
    4cd0:	18ffffc4 	addi	r3,r3,-1
    4cd4:	18004d1e 	bne	r3,zero,4e0c <__adddf3+0x41c>
    4cd8:	898dc83a 	sub	r6,r17,r6
    4cdc:	89a3803a 	cmpltu	r17,r17,r6
    4ce0:	2a0bc83a 	sub	r5,r5,r8
    4ce4:	2c4bc83a 	sub	r5,r5,r17
    4ce8:	3023883a 	mov	r17,r6
    4cec:	003f9c06 	br	4b60 <__alt_mem_Flash_flash_data+0xf4004b60>
    4cf0:	4184b03a 	or	r2,r8,r6
    4cf4:	103f5d26 	beq	r2,zero,4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4cf8:	213fffc4 	addi	r4,r4,-1
    4cfc:	203fd926 	beq	r4,zero,4c64 <__alt_mem_Flash_flash_data+0xf4004c64>
    4d00:	0081ffc4 	movi	r2,2047
    4d04:	80bfca1e 	bne	r16,r2,4c30 <__alt_mem_Flash_flash_data+0xf4004c30>
    4d08:	003f5806 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4d0c:	10c8b03a 	or	r4,r2,r3
    4d10:	20008b26 	beq	r4,zero,4f40 <__adddf3+0x550>
    4d14:	100b883a 	mov	r5,r2
    4d18:	1823883a 	mov	r17,r3
    4d1c:	888001cc 	andi	r2,r17,7
    4d20:	103f541e 	bne	r2,zero,4a74 <__alt_mem_Flash_flash_data+0xf4004a74>
    4d24:	9007883a 	mov	r3,r18
    4d28:	003fb006 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    4d2c:	1800531e 	bne	r3,zero,4e7c <__adddf3+0x48c>
    4d30:	80800044 	addi	r2,r16,1
    4d34:	1081ffcc 	andi	r2,r2,2047
    4d38:	00c00044 	movi	r3,1
    4d3c:	1880990e 	bge	r3,r2,4fa4 <__adddf3+0x5b4>
    4d40:	8985c83a 	sub	r2,r17,r6
    4d44:	8887803a 	cmpltu	r3,r17,r2
    4d48:	2a27c83a 	sub	r19,r5,r8
    4d4c:	98e7c83a 	sub	r19,r19,r3
    4d50:	98c0202c 	andhi	r3,r19,128
    4d54:	18006226 	beq	r3,zero,4ee0 <__adddf3+0x4f0>
    4d58:	3463c83a 	sub	r17,r6,r17
    4d5c:	4151c83a 	sub	r8,r8,r5
    4d60:	344d803a 	cmpltu	r6,r6,r17
    4d64:	41a7c83a 	sub	r19,r8,r6
    4d68:	3825883a 	mov	r18,r7
    4d6c:	983f821e 	bne	r19,zero,4b78 <__alt_mem_Flash_flash_data+0xf4004b78>
    4d70:	8809883a 	mov	r4,r17
    4d74:	00067e40 	call	67e4 <__clzsi2>
    4d78:	10800804 	addi	r2,r2,32
    4d7c:	10fffe04 	addi	r3,r2,-8
    4d80:	010007c4 	movi	r4,31
    4d84:	20ff810e 	bge	r4,r3,4b8c <__alt_mem_Flash_flash_data+0xf4004b8c>
    4d88:	14fff604 	addi	r19,r2,-40
    4d8c:	8ce6983a 	sll	r19,r17,r19
    4d90:	0023883a 	mov	r17,zero
    4d94:	1c3f840e 	bge	r3,r16,4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    4d98:	017fe034 	movhi	r5,65408
    4d9c:	297fffc4 	addi	r5,r5,-1
    4da0:	80e1c83a 	sub	r16,r16,r3
    4da4:	994a703a 	and	r5,r19,r5
    4da8:	003f3006 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4dac:	0009883a 	mov	r4,zero
    4db0:	0005883a 	mov	r2,zero
    4db4:	003f4506 	br	4acc <__alt_mem_Flash_flash_data+0xf4004acc>
    4db8:	418cb03a 	or	r6,r8,r6
    4dbc:	300cc03a 	cmpne	r6,r6,zero
    4dc0:	0007883a 	mov	r3,zero
    4dc4:	003f6106 	br	4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    4dc8:	2000921e 	bne	r4,zero,5014 <__adddf3+0x624>
    4dcc:	80800044 	addi	r2,r16,1
    4dd0:	11c1ffcc 	andi	r7,r2,2047
    4dd4:	01000044 	movi	r4,1
    4dd8:	21c0610e 	bge	r4,r7,4f60 <__adddf3+0x570>
    4ddc:	0101ffc4 	movi	r4,2047
    4de0:	1100a326 	beq	r2,r4,5070 <__adddf3+0x680>
    4de4:	344d883a 	add	r6,r6,r17
    4de8:	3463803a 	cmpltu	r17,r6,r17
    4dec:	414b883a 	add	r5,r8,r5
    4df0:	2c4b883a 	add	r5,r5,r17
    4df4:	282297fa 	slli	r17,r5,31
    4df8:	300cd07a 	srli	r6,r6,1
    4dfc:	280ad07a 	srli	r5,r5,1
    4e00:	1021883a 	mov	r16,r2
    4e04:	89a2b03a 	or	r17,r17,r6
    4e08:	003f1806 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4e0c:	0081ffc4 	movi	r2,2047
    4e10:	80bf411e 	bne	r16,r2,4b18 <__alt_mem_Flash_flash_data+0xf4004b18>
    4e14:	003f1506 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4e18:	80bff844 	addi	r2,r16,-31
    4e1c:	00c00804 	movi	r3,32
    4e20:	9884d83a 	srl	r2,r19,r2
    4e24:	28c04a26 	beq	r5,r3,4f50 <__adddf3+0x560>
    4e28:	00c00fc4 	movi	r3,63
    4e2c:	1c21c83a 	sub	r16,r3,r16
    4e30:	9c26983a 	sll	r19,r19,r16
    4e34:	9c62b03a 	or	r17,r19,r17
    4e38:	8822c03a 	cmpne	r17,r17,zero
    4e3c:	88a2b03a 	or	r17,r17,r2
    4e40:	000b883a 	mov	r5,zero
    4e44:	0021883a 	mov	r16,zero
    4e48:	003fb406 	br	4d1c <__alt_mem_Flash_flash_data+0xf4004d1c>
    4e4c:	18bff804 	addi	r2,r3,-32
    4e50:	01000804 	movi	r4,32
    4e54:	4084d83a 	srl	r2,r8,r2
    4e58:	19003f26 	beq	r3,r4,4f58 <__adddf3+0x568>
    4e5c:	01001004 	movi	r4,64
    4e60:	20c7c83a 	sub	r3,r4,r3
    4e64:	40d0983a 	sll	r8,r8,r3
    4e68:	418cb03a 	or	r6,r8,r6
    4e6c:	300cc03a 	cmpne	r6,r6,zero
    4e70:	308cb03a 	or	r6,r6,r2
    4e74:	0007883a 	mov	r3,zero
    4e78:	003f3406 	br	4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    4e7c:	80002326 	beq	r16,zero,4f0c <__adddf3+0x51c>
    4e80:	0101ffc4 	movi	r4,2047
    4e84:	11005e26 	beq	r2,r4,5000 <__adddf3+0x610>
    4e88:	00c7c83a 	sub	r3,zero,r3
    4e8c:	29402034 	orhi	r5,r5,128
    4e90:	01000e04 	movi	r4,56
    4e94:	20c07216 	blt	r4,r3,5060 <__adddf3+0x670>
    4e98:	010007c4 	movi	r4,31
    4e9c:	20c0ce16 	blt	r4,r3,51d8 <__adddf3+0x7e8>
    4ea0:	01000804 	movi	r4,32
    4ea4:	20c9c83a 	sub	r4,r4,r3
    4ea8:	2914983a 	sll	r10,r5,r4
    4eac:	88d2d83a 	srl	r9,r17,r3
    4eb0:	8908983a 	sll	r4,r17,r4
    4eb4:	28c6d83a 	srl	r3,r5,r3
    4eb8:	5262b03a 	or	r17,r10,r9
    4ebc:	2008c03a 	cmpne	r4,r4,zero
    4ec0:	8922b03a 	or	r17,r17,r4
    4ec4:	3463c83a 	sub	r17,r6,r17
    4ec8:	40c7c83a 	sub	r3,r8,r3
    4ecc:	344d803a 	cmpltu	r6,r6,r17
    4ed0:	198bc83a 	sub	r5,r3,r6
    4ed4:	1021883a 	mov	r16,r2
    4ed8:	3825883a 	mov	r18,r7
    4edc:	003f2006 	br	4b60 <__alt_mem_Flash_flash_data+0xf4004b60>
    4ee0:	9886b03a 	or	r3,r19,r2
    4ee4:	1800141e 	bne	r3,zero,4f38 <__adddf3+0x548>
    4ee8:	0007883a 	mov	r3,zero
    4eec:	000b883a 	mov	r5,zero
    4ef0:	0023883a 	mov	r17,zero
    4ef4:	0021883a 	mov	r16,zero
    4ef8:	003f3c06 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    4efc:	418cb03a 	or	r6,r8,r6
    4f00:	300cc03a 	cmpne	r6,r6,zero
    4f04:	0011883a 	mov	r8,zero
    4f08:	003f5606 	br	4c64 <__alt_mem_Flash_flash_data+0xf4004c64>
    4f0c:	2c48b03a 	or	r4,r5,r17
    4f10:	20003b26 	beq	r4,zero,5000 <__adddf3+0x610>
    4f14:	00c6303a 	nor	r3,zero,r3
    4f18:	1800371e 	bne	r3,zero,4ff8 <__adddf3+0x608>
    4f1c:	3463c83a 	sub	r17,r6,r17
    4f20:	414bc83a 	sub	r5,r8,r5
    4f24:	344d803a 	cmpltu	r6,r6,r17
    4f28:	298bc83a 	sub	r5,r5,r6
    4f2c:	1021883a 	mov	r16,r2
    4f30:	3825883a 	mov	r18,r7
    4f34:	003f0a06 	br	4b60 <__alt_mem_Flash_flash_data+0xf4004b60>
    4f38:	1023883a 	mov	r17,r2
    4f3c:	003f0d06 	br	4b74 <__alt_mem_Flash_flash_data+0xf4004b74>
    4f40:	0007883a 	mov	r3,zero
    4f44:	000b883a 	mov	r5,zero
    4f48:	0023883a 	mov	r17,zero
    4f4c:	003f2706 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    4f50:	0027883a 	mov	r19,zero
    4f54:	003fb706 	br	4e34 <__alt_mem_Flash_flash_data+0xf4004e34>
    4f58:	0011883a 	mov	r8,zero
    4f5c:	003fc206 	br	4e68 <__alt_mem_Flash_flash_data+0xf4004e68>
    4f60:	2c44b03a 	or	r2,r5,r17
    4f64:	8000871e 	bne	r16,zero,5184 <__adddf3+0x794>
    4f68:	1000b126 	beq	r2,zero,5230 <__adddf3+0x840>
    4f6c:	4184b03a 	or	r2,r8,r6
    4f70:	103ebe26 	beq	r2,zero,4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4f74:	3445883a 	add	r2,r6,r17
    4f78:	1463803a 	cmpltu	r17,r2,r17
    4f7c:	414b883a 	add	r5,r8,r5
    4f80:	2c4b883a 	add	r5,r5,r17
    4f84:	28c0202c 	andhi	r3,r5,128
    4f88:	1023883a 	mov	r17,r2
    4f8c:	183f6326 	beq	r3,zero,4d1c <__alt_mem_Flash_flash_data+0xf4004d1c>
    4f90:	00bfe034 	movhi	r2,65408
    4f94:	10bfffc4 	addi	r2,r2,-1
    4f98:	2021883a 	mov	r16,r4
    4f9c:	288a703a 	and	r5,r5,r2
    4fa0:	003eb206 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4fa4:	2c44b03a 	or	r2,r5,r17
    4fa8:	8000251e 	bne	r16,zero,5040 <__adddf3+0x650>
    4fac:	10004b1e 	bne	r2,zero,50dc <__adddf3+0x6ec>
    4fb0:	4184b03a 	or	r2,r8,r6
    4fb4:	103fe226 	beq	r2,zero,4f40 <__alt_mem_Flash_flash_data+0xf4004f40>
    4fb8:	400b883a 	mov	r5,r8
    4fbc:	3023883a 	mov	r17,r6
    4fc0:	3825883a 	mov	r18,r7
    4fc4:	003ea906 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    4fc8:	20bff804 	addi	r2,r4,-32
    4fcc:	01c00804 	movi	r7,32
    4fd0:	4084d83a 	srl	r2,r8,r2
    4fd4:	21c07e26 	beq	r4,r7,51d0 <__adddf3+0x7e0>
    4fd8:	01c01004 	movi	r7,64
    4fdc:	3909c83a 	sub	r4,r7,r4
    4fe0:	4110983a 	sll	r8,r8,r4
    4fe4:	418cb03a 	or	r6,r8,r6
    4fe8:	300cc03a 	cmpne	r6,r6,zero
    4fec:	308cb03a 	or	r6,r6,r2
    4ff0:	0011883a 	mov	r8,zero
    4ff4:	003f1b06 	br	4c64 <__alt_mem_Flash_flash_data+0xf4004c64>
    4ff8:	0101ffc4 	movi	r4,2047
    4ffc:	113fa41e 	bne	r2,r4,4e90 <__alt_mem_Flash_flash_data+0xf4004e90>
    5000:	400b883a 	mov	r5,r8
    5004:	3023883a 	mov	r17,r6
    5008:	1021883a 	mov	r16,r2
    500c:	3825883a 	mov	r18,r7
    5010:	003e9606 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    5014:	80001a1e 	bne	r16,zero,5080 <__adddf3+0x690>
    5018:	2c4eb03a 	or	r7,r5,r17
    501c:	38005526 	beq	r7,zero,5174 <__adddf3+0x784>
    5020:	0108303a 	nor	r4,zero,r4
    5024:	2000511e 	bne	r4,zero,516c <__adddf3+0x77c>
    5028:	89a3883a 	add	r17,r17,r6
    502c:	414b883a 	add	r5,r8,r5
    5030:	898d803a 	cmpltu	r6,r17,r6
    5034:	298b883a 	add	r5,r5,r6
    5038:	1021883a 	mov	r16,r2
    503c:	003f0e06 	br	4c78 <__alt_mem_Flash_flash_data+0xf4004c78>
    5040:	1000341e 	bne	r2,zero,5114 <__adddf3+0x724>
    5044:	4184b03a 	or	r2,r8,r6
    5048:	10006f26 	beq	r2,zero,5208 <__adddf3+0x818>
    504c:	400b883a 	mov	r5,r8
    5050:	3023883a 	mov	r17,r6
    5054:	3825883a 	mov	r18,r7
    5058:	0401ffc4 	movi	r16,2047
    505c:	003e8306 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    5060:	2c62b03a 	or	r17,r5,r17
    5064:	8822c03a 	cmpne	r17,r17,zero
    5068:	0007883a 	mov	r3,zero
    506c:	003f9506 	br	4ec4 <__alt_mem_Flash_flash_data+0xf4004ec4>
    5070:	1021883a 	mov	r16,r2
    5074:	000b883a 	mov	r5,zero
    5078:	0023883a 	mov	r17,zero
    507c:	003edb06 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    5080:	01c1ffc4 	movi	r7,2047
    5084:	11c03b26 	beq	r2,r7,5174 <__adddf3+0x784>
    5088:	0109c83a 	sub	r4,zero,r4
    508c:	29402034 	orhi	r5,r5,128
    5090:	01c00e04 	movi	r7,56
    5094:	39006216 	blt	r7,r4,5220 <__adddf3+0x830>
    5098:	01c007c4 	movi	r7,31
    509c:	39006b16 	blt	r7,r4,524c <__adddf3+0x85c>
    50a0:	01c00804 	movi	r7,32
    50a4:	390fc83a 	sub	r7,r7,r4
    50a8:	29d4983a 	sll	r10,r5,r7
    50ac:	8912d83a 	srl	r9,r17,r4
    50b0:	89ce983a 	sll	r7,r17,r7
    50b4:	2908d83a 	srl	r4,r5,r4
    50b8:	5262b03a 	or	r17,r10,r9
    50bc:	380ac03a 	cmpne	r5,r7,zero
    50c0:	8962b03a 	or	r17,r17,r5
    50c4:	89a3883a 	add	r17,r17,r6
    50c8:	2211883a 	add	r8,r4,r8
    50cc:	898d803a 	cmpltu	r6,r17,r6
    50d0:	418b883a 	add	r5,r8,r6
    50d4:	1021883a 	mov	r16,r2
    50d8:	003ee706 	br	4c78 <__alt_mem_Flash_flash_data+0xf4004c78>
    50dc:	4184b03a 	or	r2,r8,r6
    50e0:	103e6226 	beq	r2,zero,4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    50e4:	8987c83a 	sub	r3,r17,r6
    50e8:	88c9803a 	cmpltu	r4,r17,r3
    50ec:	2a05c83a 	sub	r2,r5,r8
    50f0:	1105c83a 	sub	r2,r2,r4
    50f4:	1100202c 	andhi	r4,r2,128
    50f8:	203f0426 	beq	r4,zero,4d0c <__alt_mem_Flash_flash_data+0xf4004d0c>
    50fc:	3463c83a 	sub	r17,r6,r17
    5100:	414bc83a 	sub	r5,r8,r5
    5104:	344d803a 	cmpltu	r6,r6,r17
    5108:	298bc83a 	sub	r5,r5,r6
    510c:	3825883a 	mov	r18,r7
    5110:	003e5606 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    5114:	4184b03a 	or	r2,r8,r6
    5118:	10002b26 	beq	r2,zero,51c8 <__adddf3+0x7d8>
    511c:	2804d0fa 	srli	r2,r5,3
    5120:	8822d0fa 	srli	r17,r17,3
    5124:	280a977a 	slli	r5,r5,29
    5128:	10c0022c 	andhi	r3,r2,8
    512c:	2c62b03a 	or	r17,r5,r17
    5130:	18000826 	beq	r3,zero,5154 <__adddf3+0x764>
    5134:	4008d0fa 	srli	r4,r8,3
    5138:	20c0022c 	andhi	r3,r4,8
    513c:	1800051e 	bne	r3,zero,5154 <__adddf3+0x764>
    5140:	300cd0fa 	srli	r6,r6,3
    5144:	4010977a 	slli	r8,r8,29
    5148:	2005883a 	mov	r2,r4
    514c:	3825883a 	mov	r18,r7
    5150:	41a2b03a 	or	r17,r8,r6
    5154:	880ad77a 	srli	r5,r17,29
    5158:	100490fa 	slli	r2,r2,3
    515c:	882290fa 	slli	r17,r17,3
    5160:	0401ffc4 	movi	r16,2047
    5164:	288ab03a 	or	r5,r5,r2
    5168:	003e4006 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    516c:	01c1ffc4 	movi	r7,2047
    5170:	11ffc71e 	bne	r2,r7,5090 <__alt_mem_Flash_flash_data+0xf4005090>
    5174:	400b883a 	mov	r5,r8
    5178:	3023883a 	mov	r17,r6
    517c:	1021883a 	mov	r16,r2
    5180:	003e3a06 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    5184:	10002d26 	beq	r2,zero,523c <__adddf3+0x84c>
    5188:	4184b03a 	or	r2,r8,r6
    518c:	10000e26 	beq	r2,zero,51c8 <__adddf3+0x7d8>
    5190:	2804d0fa 	srli	r2,r5,3
    5194:	8822d0fa 	srli	r17,r17,3
    5198:	280a977a 	slli	r5,r5,29
    519c:	10c0022c 	andhi	r3,r2,8
    51a0:	2c62b03a 	or	r17,r5,r17
    51a4:	183feb26 	beq	r3,zero,5154 <__alt_mem_Flash_flash_data+0xf4005154>
    51a8:	4008d0fa 	srli	r4,r8,3
    51ac:	20c0022c 	andhi	r3,r4,8
    51b0:	183fe81e 	bne	r3,zero,5154 <__alt_mem_Flash_flash_data+0xf4005154>
    51b4:	300cd0fa 	srli	r6,r6,3
    51b8:	4010977a 	slli	r8,r8,29
    51bc:	2005883a 	mov	r2,r4
    51c0:	41a2b03a 	or	r17,r8,r6
    51c4:	003fe306 	br	5154 <__alt_mem_Flash_flash_data+0xf4005154>
    51c8:	0401ffc4 	movi	r16,2047
    51cc:	003e2706 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    51d0:	0011883a 	mov	r8,zero
    51d4:	003f8306 	br	4fe4 <__alt_mem_Flash_flash_data+0xf4004fe4>
    51d8:	193ff804 	addi	r4,r3,-32
    51dc:	02400804 	movi	r9,32
    51e0:	2908d83a 	srl	r4,r5,r4
    51e4:	1a402526 	beq	r3,r9,527c <__adddf3+0x88c>
    51e8:	02401004 	movi	r9,64
    51ec:	48c7c83a 	sub	r3,r9,r3
    51f0:	28ca983a 	sll	r5,r5,r3
    51f4:	2c62b03a 	or	r17,r5,r17
    51f8:	8822c03a 	cmpne	r17,r17,zero
    51fc:	8922b03a 	or	r17,r17,r4
    5200:	0007883a 	mov	r3,zero
    5204:	003f2f06 	br	4ec4 <__alt_mem_Flash_flash_data+0xf4004ec4>
    5208:	01402034 	movhi	r5,128
    520c:	0007883a 	mov	r3,zero
    5210:	297fffc4 	addi	r5,r5,-1
    5214:	047ffe04 	movi	r17,-8
    5218:	0401ffc4 	movi	r16,2047
    521c:	003e7306 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    5220:	2c62b03a 	or	r17,r5,r17
    5224:	8822c03a 	cmpne	r17,r17,zero
    5228:	0009883a 	mov	r4,zero
    522c:	003fa506 	br	50c4 <__alt_mem_Flash_flash_data+0xf40050c4>
    5230:	400b883a 	mov	r5,r8
    5234:	3023883a 	mov	r17,r6
    5238:	003e0c06 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    523c:	400b883a 	mov	r5,r8
    5240:	3023883a 	mov	r17,r6
    5244:	0401ffc4 	movi	r16,2047
    5248:	003e0806 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    524c:	21fff804 	addi	r7,r4,-32
    5250:	02400804 	movi	r9,32
    5254:	29ced83a 	srl	r7,r5,r7
    5258:	22400a26 	beq	r4,r9,5284 <__adddf3+0x894>
    525c:	02401004 	movi	r9,64
    5260:	4909c83a 	sub	r4,r9,r4
    5264:	290a983a 	sll	r5,r5,r4
    5268:	2c62b03a 	or	r17,r5,r17
    526c:	8822c03a 	cmpne	r17,r17,zero
    5270:	89e2b03a 	or	r17,r17,r7
    5274:	0009883a 	mov	r4,zero
    5278:	003f9206 	br	50c4 <__alt_mem_Flash_flash_data+0xf40050c4>
    527c:	000b883a 	mov	r5,zero
    5280:	003fdc06 	br	51f4 <__alt_mem_Flash_flash_data+0xf40051f4>
    5284:	000b883a 	mov	r5,zero
    5288:	003ff706 	br	5268 <__alt_mem_Flash_flash_data+0xf4005268>

0000528c <__eqdf2>:
    528c:	2804d53a 	srli	r2,r5,20
    5290:	3806d53a 	srli	r3,r7,20
    5294:	02000434 	movhi	r8,16
    5298:	423fffc4 	addi	r8,r8,-1
    529c:	1081ffcc 	andi	r2,r2,2047
    52a0:	0241ffc4 	movi	r9,2047
    52a4:	2a14703a 	and	r10,r5,r8
    52a8:	18c1ffcc 	andi	r3,r3,2047
    52ac:	3a10703a 	and	r8,r7,r8
    52b0:	280ad7fa 	srli	r5,r5,31
    52b4:	380ed7fa 	srli	r7,r7,31
    52b8:	12400f26 	beq	r2,r9,52f8 <__eqdf2+0x6c>
    52bc:	0241ffc4 	movi	r9,2047
    52c0:	1a400326 	beq	r3,r9,52d0 <__eqdf2+0x44>
    52c4:	10c00526 	beq	r2,r3,52dc <__eqdf2+0x50>
    52c8:	00800044 	movi	r2,1
    52cc:	f800283a 	ret
    52d0:	4192b03a 	or	r9,r8,r6
    52d4:	483ffc1e 	bne	r9,zero,52c8 <__alt_mem_Flash_flash_data+0xf40052c8>
    52d8:	10fffb1e 	bne	r2,r3,52c8 <__alt_mem_Flash_flash_data+0xf40052c8>
    52dc:	523ffa1e 	bne	r10,r8,52c8 <__alt_mem_Flash_flash_data+0xf40052c8>
    52e0:	21bff91e 	bne	r4,r6,52c8 <__alt_mem_Flash_flash_data+0xf40052c8>
    52e4:	29c00826 	beq	r5,r7,5308 <__eqdf2+0x7c>
    52e8:	103ff71e 	bne	r2,zero,52c8 <__alt_mem_Flash_flash_data+0xf40052c8>
    52ec:	5104b03a 	or	r2,r10,r4
    52f0:	1004c03a 	cmpne	r2,r2,zero
    52f4:	f800283a 	ret
    52f8:	5112b03a 	or	r9,r10,r4
    52fc:	483fef26 	beq	r9,zero,52bc <__alt_mem_Flash_flash_data+0xf40052bc>
    5300:	00800044 	movi	r2,1
    5304:	f800283a 	ret
    5308:	0005883a 	mov	r2,zero
    530c:	f800283a 	ret

00005310 <__gedf2>:
    5310:	2804d53a 	srli	r2,r5,20
    5314:	3806d53a 	srli	r3,r7,20
    5318:	02000434 	movhi	r8,16
    531c:	423fffc4 	addi	r8,r8,-1
    5320:	0241ffc4 	movi	r9,2047
    5324:	1081ffcc 	andi	r2,r2,2047
    5328:	2a14703a 	and	r10,r5,r8
    532c:	1a46703a 	and	r3,r3,r9
    5330:	3a10703a 	and	r8,r7,r8
    5334:	280ad7fa 	srli	r5,r5,31
    5338:	380ed7fa 	srli	r7,r7,31
    533c:	12400b26 	beq	r2,r9,536c <__gedf2+0x5c>
    5340:	1a401626 	beq	r3,r9,539c <__gedf2+0x8c>
    5344:	10000c1e 	bne	r2,zero,5378 <__gedf2+0x68>
    5348:	5112b03a 	or	r9,r10,r4
    534c:	4813003a 	cmpeq	r9,r9,zero
    5350:	4817883a 	mov	r11,r9
    5354:	18000c1e 	bne	r3,zero,5388 <__gedf2+0x78>
    5358:	4198b03a 	or	r12,r8,r6
    535c:	60000a1e 	bne	r12,zero,5388 <__gedf2+0x78>
    5360:	48001326 	beq	r9,zero,53b0 <__gedf2+0xa0>
    5364:	0005883a 	mov	r2,zero
    5368:	f800283a 	ret
    536c:	5112b03a 	or	r9,r10,r4
    5370:	4800191e 	bne	r9,zero,53d8 <__gedf2+0xc8>
    5374:	18800926 	beq	r3,r2,539c <__gedf2+0x8c>
    5378:	18000b1e 	bne	r3,zero,53a8 <__gedf2+0x98>
    537c:	4192b03a 	or	r9,r8,r6
    5380:	0017883a 	mov	r11,zero
    5384:	48000a26 	beq	r9,zero,53b0 <__gedf2+0xa0>
    5388:	39c03fcc 	andi	r7,r7,255
    538c:	58000726 	beq	r11,zero,53ac <__gedf2+0x9c>
    5390:	3800081e 	bne	r7,zero,53b4 <__gedf2+0xa4>
    5394:	00bfffc4 	movi	r2,-1
    5398:	f800283a 	ret
    539c:	4192b03a 	or	r9,r8,r6
    53a0:	48000d1e 	bne	r9,zero,53d8 <__gedf2+0xc8>
    53a4:	103fe826 	beq	r2,zero,5348 <__alt_mem_Flash_flash_data+0xf4005348>
    53a8:	39c03fcc 	andi	r7,r7,255
    53ac:	29c00326 	beq	r5,r7,53bc <__gedf2+0xac>
    53b0:	283ff81e 	bne	r5,zero,5394 <__alt_mem_Flash_flash_data+0xf4005394>
    53b4:	00800044 	movi	r2,1
    53b8:	f800283a 	ret
    53bc:	18bffc16 	blt	r3,r2,53b0 <__alt_mem_Flash_flash_data+0xf40053b0>
    53c0:	10c00316 	blt	r2,r3,53d0 <__gedf2+0xc0>
    53c4:	42bffa36 	bltu	r8,r10,53b0 <__alt_mem_Flash_flash_data+0xf40053b0>
    53c8:	52000526 	beq	r10,r8,53e0 <__gedf2+0xd0>
    53cc:	523fe52e 	bgeu	r10,r8,5364 <__alt_mem_Flash_flash_data+0xf4005364>
    53d0:	283ff026 	beq	r5,zero,5394 <__alt_mem_Flash_flash_data+0xf4005394>
    53d4:	003ff706 	br	53b4 <__alt_mem_Flash_flash_data+0xf40053b4>
    53d8:	00bfff84 	movi	r2,-2
    53dc:	f800283a 	ret
    53e0:	313ff336 	bltu	r6,r4,53b0 <__alt_mem_Flash_flash_data+0xf40053b0>
    53e4:	21bfdf2e 	bgeu	r4,r6,5364 <__alt_mem_Flash_flash_data+0xf4005364>
    53e8:	283fea26 	beq	r5,zero,5394 <__alt_mem_Flash_flash_data+0xf4005394>
    53ec:	003ff106 	br	53b4 <__alt_mem_Flash_flash_data+0xf40053b4>

000053f0 <__muldf3>:
    53f0:	defff204 	addi	sp,sp,-56
    53f4:	2804d53a 	srli	r2,r5,20
    53f8:	dd800a15 	stw	r22,40(sp)
    53fc:	282cd7fa 	srli	r22,r5,31
    5400:	dc000415 	stw	r16,16(sp)
    5404:	04000434 	movhi	r16,16
    5408:	df000c15 	stw	fp,48(sp)
    540c:	dd000815 	stw	r20,32(sp)
    5410:	dcc00715 	stw	r19,28(sp)
    5414:	dc800615 	stw	r18,24(sp)
    5418:	dc400515 	stw	r17,20(sp)
    541c:	843fffc4 	addi	r16,r16,-1
    5420:	dfc00d15 	stw	ra,52(sp)
    5424:	ddc00b15 	stw	r23,44(sp)
    5428:	dd400915 	stw	r21,36(sp)
    542c:	1501ffcc 	andi	r20,r2,2047
    5430:	2023883a 	mov	r17,r4
    5434:	2025883a 	mov	r18,r4
    5438:	2c20703a 	and	r16,r5,r16
    543c:	b027883a 	mov	r19,r22
    5440:	b7003fcc 	andi	fp,r22,255
    5444:	a0005926 	beq	r20,zero,55ac <__muldf3+0x1bc>
    5448:	0081ffc4 	movi	r2,2047
    544c:	a0803426 	beq	r20,r2,5520 <__muldf3+0x130>
    5450:	84000434 	orhi	r16,r16,16
    5454:	2004d77a 	srli	r2,r4,29
    5458:	802090fa 	slli	r16,r16,3
    545c:	202490fa 	slli	r18,r4,3
    5460:	a53f0044 	addi	r20,r20,-1023
    5464:	80a0b03a 	or	r16,r16,r2
    5468:	002b883a 	mov	r21,zero
    546c:	0015883a 	mov	r10,zero
    5470:	3812d53a 	srli	r9,r7,20
    5474:	3806d7fa 	srli	r3,r7,31
    5478:	02000434 	movhi	r8,16
    547c:	423fffc4 	addi	r8,r8,-1
    5480:	4941ffcc 	andi	r5,r9,2047
    5484:	302f883a 	mov	r23,r6
    5488:	3a22703a 	and	r17,r7,r8
    548c:	1ac03fcc 	andi	r11,r3,255
    5490:	28006226 	beq	r5,zero,561c <__muldf3+0x22c>
    5494:	0081ffc4 	movi	r2,2047
    5498:	28805a26 	beq	r5,r2,5604 <__muldf3+0x214>
    549c:	8a000434 	orhi	r8,r17,16
    54a0:	3004d77a 	srli	r2,r6,29
    54a4:	401090fa 	slli	r8,r8,3
    54a8:	302e90fa 	slli	r23,r6,3
    54ac:	297f0044 	addi	r5,r5,-1023
    54b0:	40a2b03a 	or	r17,r8,r2
    54b4:	0013883a 	mov	r9,zero
    54b8:	4d4cb03a 	or	r6,r9,r21
    54bc:	300c90ba 	slli	r6,r6,2
    54c0:	02000034 	movhi	r8,0
    54c4:	42153804 	addi	r8,r8,21728
    54c8:	320d883a 	add	r6,r6,r8
    54cc:	31800017 	ldw	r6,0(r6)
    54d0:	a14b883a 	add	r5,r20,r5
    54d4:	1dacf03a 	xor	r22,r3,r22
    54d8:	2b000044 	addi	r12,r5,1
    54dc:	3000683a 	jmp	r6
    54e0:	0000571c 	xori	zero,zero,348
    54e4:	00005708 	cmpgei	zero,zero,348
    54e8:	00005708 	cmpgei	zero,zero,348
    54ec:	000056f4 	movhi	zero,347
    54f0:	0000553c 	xorhi	zero,zero,340
    54f4:	0000553c 	xorhi	zero,zero,340
    54f8:	000056dc 	xori	zero,zero,347
    54fc:	000056f4 	movhi	zero,347
    5500:	0000553c 	xorhi	zero,zero,340
    5504:	000056dc 	xori	zero,zero,347
    5508:	0000553c 	xorhi	zero,zero,340
    550c:	000056f4 	movhi	zero,347
    5510:	00005540 	call	554 <drawLine+0xbc>
    5514:	00005540 	call	554 <drawLine+0xbc>
    5518:	00005540 	call	554 <drawLine+0xbc>
    551c:	00005918 	cmpnei	zero,zero,356
    5520:	8104b03a 	or	r2,r16,r4
    5524:	10006a1e 	bne	r2,zero,56d0 <__muldf3+0x2e0>
    5528:	05400204 	movi	r21,8
    552c:	0021883a 	mov	r16,zero
    5530:	0025883a 	mov	r18,zero
    5534:	02800084 	movi	r10,2
    5538:	003fcd06 	br	5470 <__alt_mem_Flash_flash_data+0xf4005470>
    553c:	b039883a 	mov	fp,r22
    5540:	00800084 	movi	r2,2
    5544:	50804e1e 	bne	r10,r2,5680 <__muldf3+0x290>
    5548:	e4c0004c 	andi	r19,fp,1
    554c:	0101ffc4 	movi	r4,2047
    5550:	0021883a 	mov	r16,zero
    5554:	0025883a 	mov	r18,zero
    5558:	2008953a 	slli	r4,r4,20
    555c:	98c03fcc 	andi	r3,r19,255
    5560:	01400434 	movhi	r5,16
    5564:	297fffc4 	addi	r5,r5,-1
    5568:	180697fa 	slli	r3,r3,31
    556c:	8160703a 	and	r16,r16,r5
    5570:	8120b03a 	or	r16,r16,r4
    5574:	80c6b03a 	or	r3,r16,r3
    5578:	9005883a 	mov	r2,r18
    557c:	dfc00d17 	ldw	ra,52(sp)
    5580:	df000c17 	ldw	fp,48(sp)
    5584:	ddc00b17 	ldw	r23,44(sp)
    5588:	dd800a17 	ldw	r22,40(sp)
    558c:	dd400917 	ldw	r21,36(sp)
    5590:	dd000817 	ldw	r20,32(sp)
    5594:	dcc00717 	ldw	r19,28(sp)
    5598:	dc800617 	ldw	r18,24(sp)
    559c:	dc400517 	ldw	r17,20(sp)
    55a0:	dc000417 	ldw	r16,16(sp)
    55a4:	dec00e04 	addi	sp,sp,56
    55a8:	f800283a 	ret
    55ac:	8104b03a 	or	r2,r16,r4
    55b0:	10004226 	beq	r2,zero,56bc <__muldf3+0x2cc>
    55b4:	8000f926 	beq	r16,zero,599c <__muldf3+0x5ac>
    55b8:	8009883a 	mov	r4,r16
    55bc:	d9800315 	stw	r6,12(sp)
    55c0:	d9c00015 	stw	r7,0(sp)
    55c4:	00067e40 	call	67e4 <__clzsi2>
    55c8:	d9800317 	ldw	r6,12(sp)
    55cc:	d9c00017 	ldw	r7,0(sp)
    55d0:	1007883a 	mov	r3,r2
    55d4:	01000a04 	movi	r4,40
    55d8:	18bffe04 	addi	r2,r3,-8
    55dc:	20c9c83a 	sub	r4,r4,r3
    55e0:	80a0983a 	sll	r16,r16,r2
    55e4:	8908d83a 	srl	r4,r17,r4
    55e8:	88a4983a 	sll	r18,r17,r2
    55ec:	2420b03a 	or	r16,r4,r16
    55f0:	017f0344 	movi	r5,-1011
    55f4:	28e9c83a 	sub	r20,r5,r3
    55f8:	002b883a 	mov	r21,zero
    55fc:	0015883a 	mov	r10,zero
    5600:	003f9b06 	br	5470 <__alt_mem_Flash_flash_data+0xf4005470>
    5604:	8984b03a 	or	r2,r17,r6
    5608:	10002a1e 	bne	r2,zero,56b4 <__muldf3+0x2c4>
    560c:	0023883a 	mov	r17,zero
    5610:	002f883a 	mov	r23,zero
    5614:	02400084 	movi	r9,2
    5618:	003fa706 	br	54b8 <__alt_mem_Flash_flash_data+0xf40054b8>
    561c:	8984b03a 	or	r2,r17,r6
    5620:	10002026 	beq	r2,zero,56a4 <__muldf3+0x2b4>
    5624:	8800cc26 	beq	r17,zero,5958 <__muldf3+0x568>
    5628:	8809883a 	mov	r4,r17
    562c:	d8c00215 	stw	r3,8(sp)
    5630:	d9800315 	stw	r6,12(sp)
    5634:	da800015 	stw	r10,0(sp)
    5638:	dac00115 	stw	r11,4(sp)
    563c:	00067e40 	call	67e4 <__clzsi2>
    5640:	d8c00217 	ldw	r3,8(sp)
    5644:	d9800317 	ldw	r6,12(sp)
    5648:	da800017 	ldw	r10,0(sp)
    564c:	dac00117 	ldw	r11,4(sp)
    5650:	1009883a 	mov	r4,r2
    5654:	01400a04 	movi	r5,40
    5658:	25fffe04 	addi	r23,r4,-8
    565c:	290bc83a 	sub	r5,r5,r4
    5660:	8dd0983a 	sll	r8,r17,r23
    5664:	314ad83a 	srl	r5,r6,r5
    5668:	35ee983a 	sll	r23,r6,r23
    566c:	2a22b03a 	or	r17,r5,r8
    5670:	017f0344 	movi	r5,-1011
    5674:	290bc83a 	sub	r5,r5,r4
    5678:	0013883a 	mov	r9,zero
    567c:	003f8e06 	br	54b8 <__alt_mem_Flash_flash_data+0xf40054b8>
    5680:	008000c4 	movi	r2,3
    5684:	50811d26 	beq	r10,r2,5afc <__muldf3+0x70c>
    5688:	00800044 	movi	r2,1
    568c:	5080e01e 	bne	r10,r2,5a10 <__muldf3+0x620>
    5690:	e0a6703a 	and	r19,fp,r2
    5694:	0009883a 	mov	r4,zero
    5698:	0021883a 	mov	r16,zero
    569c:	0025883a 	mov	r18,zero
    56a0:	003fad06 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    56a4:	0023883a 	mov	r17,zero
    56a8:	002f883a 	mov	r23,zero
    56ac:	02400044 	movi	r9,1
    56b0:	003f8106 	br	54b8 <__alt_mem_Flash_flash_data+0xf40054b8>
    56b4:	024000c4 	movi	r9,3
    56b8:	003f7f06 	br	54b8 <__alt_mem_Flash_flash_data+0xf40054b8>
    56bc:	05400104 	movi	r21,4
    56c0:	0021883a 	mov	r16,zero
    56c4:	0025883a 	mov	r18,zero
    56c8:	02800044 	movi	r10,1
    56cc:	003f6806 	br	5470 <__alt_mem_Flash_flash_data+0xf4005470>
    56d0:	05400304 	movi	r21,12
    56d4:	028000c4 	movi	r10,3
    56d8:	003f6506 	br	5470 <__alt_mem_Flash_flash_data+0xf4005470>
    56dc:	04000434 	movhi	r16,16
    56e0:	0027883a 	mov	r19,zero
    56e4:	843fffc4 	addi	r16,r16,-1
    56e8:	04bfffc4 	movi	r18,-1
    56ec:	0101ffc4 	movi	r4,2047
    56f0:	003f9906 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    56f4:	8821883a 	mov	r16,r17
    56f8:	b825883a 	mov	r18,r23
    56fc:	5839883a 	mov	fp,r11
    5700:	4815883a 	mov	r10,r9
    5704:	003f8e06 	br	5540 <__alt_mem_Flash_flash_data+0xf4005540>
    5708:	8821883a 	mov	r16,r17
    570c:	b825883a 	mov	r18,r23
    5710:	b039883a 	mov	fp,r22
    5714:	4815883a 	mov	r10,r9
    5718:	003f8906 	br	5540 <__alt_mem_Flash_flash_data+0xf4005540>
    571c:	b80cd43a 	srli	r6,r23,16
    5720:	9006d43a 	srli	r3,r18,16
    5724:	90bfffcc 	andi	r2,r18,65535
    5728:	bdffffcc 	andi	r23,r23,65535
    572c:	b891383a 	mul	r8,r23,r2
    5730:	b8c9383a 	mul	r4,r23,r3
    5734:	309b383a 	mul	r13,r6,r2
    5738:	400ed43a 	srli	r7,r8,16
    573c:	30df383a 	mul	r15,r6,r3
    5740:	235b883a 	add	r13,r4,r13
    5744:	69db883a 	add	r13,r13,r7
    5748:	6900022e 	bgeu	r13,r4,5754 <__muldf3+0x364>
    574c:	01000074 	movhi	r4,1
    5750:	791f883a 	add	r15,r15,r4
    5754:	8828d43a 	srli	r20,r17,16
    5758:	8c7fffcc 	andi	r17,r17,65535
    575c:	888f383a 	mul	r7,r17,r2
    5760:	88d3383a 	mul	r9,r17,r3
    5764:	a0a5383a 	mul	r18,r20,r2
    5768:	3816d43a 	srli	r11,r7,16
    576c:	6814943a 	slli	r10,r13,16
    5770:	4ca5883a 	add	r18,r9,r18
    5774:	423fffcc 	andi	r8,r8,65535
    5778:	92e5883a 	add	r18,r18,r11
    577c:	6808d43a 	srli	r4,r13,16
    5780:	5215883a 	add	r10,r10,r8
    5784:	a0c7383a 	mul	r3,r20,r3
    5788:	9240022e 	bgeu	r18,r9,5794 <__muldf3+0x3a4>
    578c:	00800074 	movhi	r2,1
    5790:	1887883a 	add	r3,r3,r2
    5794:	802ad43a 	srli	r21,r16,16
    5798:	80bfffcc 	andi	r2,r16,65535
    579c:	b893383a 	mul	r9,r23,r2
    57a0:	3091383a 	mul	r8,r6,r2
    57a4:	bd6f383a 	mul	r23,r23,r21
    57a8:	9026943a 	slli	r19,r18,16
    57ac:	481ad43a 	srli	r13,r9,16
    57b0:	9024d43a 	srli	r18,r18,16
    57b4:	39ffffcc 	andi	r7,r7,65535
    57b8:	ba11883a 	add	r8,r23,r8
    57bc:	99e7883a 	add	r19,r19,r7
    57c0:	4351883a 	add	r8,r8,r13
    57c4:	1c97883a 	add	r11,r3,r18
    57c8:	354d383a 	mul	r6,r6,r21
    57cc:	9925883a 	add	r18,r19,r4
    57d0:	45c0022e 	bgeu	r8,r23,57dc <__muldf3+0x3ec>
    57d4:	00c00074 	movhi	r3,1
    57d8:	30cd883a 	add	r6,r6,r3
    57dc:	8889383a 	mul	r4,r17,r2
    57e0:	8d63383a 	mul	r17,r17,r21
    57e4:	a085383a 	mul	r2,r20,r2
    57e8:	200ed43a 	srli	r7,r4,16
    57ec:	401cd43a 	srli	r14,r8,16
    57f0:	401a943a 	slli	r13,r8,16
    57f4:	8885883a 	add	r2,r17,r2
    57f8:	4a3fffcc 	andi	r8,r9,65535
    57fc:	11c5883a 	add	r2,r2,r7
    5800:	339d883a 	add	r14,r6,r14
    5804:	6a11883a 	add	r8,r13,r8
    5808:	a561383a 	mul	r16,r20,r21
    580c:	1440022e 	bgeu	r2,r17,5818 <__muldf3+0x428>
    5810:	00c00074 	movhi	r3,1
    5814:	80e1883a 	add	r16,r16,r3
    5818:	1006943a 	slli	r3,r2,16
    581c:	213fffcc 	andi	r4,r4,65535
    5820:	93db883a 	add	r13,r18,r15
    5824:	1909883a 	add	r4,r3,r4
    5828:	22c7883a 	add	r3,r4,r11
    582c:	6cd3803a 	cmpltu	r9,r13,r19
    5830:	6a09883a 	add	r4,r13,r8
    5834:	1a5b883a 	add	r13,r3,r9
    5838:	2211803a 	cmpltu	r8,r4,r8
    583c:	734d883a 	add	r6,r14,r13
    5840:	100ed43a 	srli	r7,r2,16
    5844:	6a53803a 	cmpltu	r9,r13,r9
    5848:	3205883a 	add	r2,r6,r8
    584c:	1ac7803a 	cmpltu	r3,r3,r11
    5850:	1211803a 	cmpltu	r8,r2,r8
    5854:	48c6b03a 	or	r3,r9,r3
    5858:	338d803a 	cmpltu	r6,r6,r14
    585c:	19c7883a 	add	r3,r3,r7
    5860:	418cb03a 	or	r6,r8,r6
    5864:	1987883a 	add	r3,r3,r6
    5868:	2024927a 	slli	r18,r4,9
    586c:	1c07883a 	add	r3,r3,r16
    5870:	1806927a 	slli	r3,r3,9
    5874:	1020d5fa 	srli	r16,r2,23
    5878:	2008d5fa 	srli	r4,r4,23
    587c:	9294b03a 	or	r10,r18,r10
    5880:	1004927a 	slli	r2,r2,9
    5884:	5024c03a 	cmpne	r18,r10,zero
    5888:	1c20b03a 	or	r16,r3,r16
    588c:	9108b03a 	or	r4,r18,r4
    5890:	80c0402c 	andhi	r3,r16,256
    5894:	20a4b03a 	or	r18,r4,r2
    5898:	18000726 	beq	r3,zero,58b8 <__muldf3+0x4c8>
    589c:	9006d07a 	srli	r3,r18,1
    58a0:	800897fa 	slli	r4,r16,31
    58a4:	9080004c 	andi	r2,r18,1
    58a8:	8020d07a 	srli	r16,r16,1
    58ac:	10c4b03a 	or	r2,r2,r3
    58b0:	1124b03a 	or	r18,r2,r4
    58b4:	600b883a 	mov	r5,r12
    58b8:	2900ffc4 	addi	r4,r5,1023
    58bc:	01004b0e 	bge	zero,r4,59ec <__muldf3+0x5fc>
    58c0:	908001cc 	andi	r2,r18,7
    58c4:	10000726 	beq	r2,zero,58e4 <__muldf3+0x4f4>
    58c8:	90c003cc 	andi	r3,r18,15
    58cc:	00800104 	movi	r2,4
    58d0:	18800426 	beq	r3,r2,58e4 <__muldf3+0x4f4>
    58d4:	9087883a 	add	r3,r18,r2
    58d8:	1c85803a 	cmpltu	r2,r3,r18
    58dc:	80a1883a 	add	r16,r16,r2
    58e0:	1825883a 	mov	r18,r3
    58e4:	8080402c 	andhi	r2,r16,256
    58e8:	10000426 	beq	r2,zero,58fc <__muldf3+0x50c>
    58ec:	00bfc034 	movhi	r2,65280
    58f0:	10bfffc4 	addi	r2,r2,-1
    58f4:	29010004 	addi	r4,r5,1024
    58f8:	80a0703a 	and	r16,r16,r2
    58fc:	0081ff84 	movi	r2,2046
    5900:	1100320e 	bge	r2,r4,59cc <__muldf3+0x5dc>
    5904:	b4c0004c 	andi	r19,r22,1
    5908:	0101ffc4 	movi	r4,2047
    590c:	0021883a 	mov	r16,zero
    5910:	0025883a 	mov	r18,zero
    5914:	003f1006 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    5918:	8080022c 	andhi	r2,r16,8
    591c:	10000926 	beq	r2,zero,5944 <__muldf3+0x554>
    5920:	8880022c 	andhi	r2,r17,8
    5924:	1000071e 	bne	r2,zero,5944 <__muldf3+0x554>
    5928:	00800434 	movhi	r2,16
    592c:	8c000234 	orhi	r16,r17,8
    5930:	10bfffc4 	addi	r2,r2,-1
    5934:	1827883a 	mov	r19,r3
    5938:	80a0703a 	and	r16,r16,r2
    593c:	b825883a 	mov	r18,r23
    5940:	003f6a06 	br	56ec <__alt_mem_Flash_flash_data+0xf40056ec>
    5944:	00800434 	movhi	r2,16
    5948:	84000234 	orhi	r16,r16,8
    594c:	10bfffc4 	addi	r2,r2,-1
    5950:	80a0703a 	and	r16,r16,r2
    5954:	003f6506 	br	56ec <__alt_mem_Flash_flash_data+0xf40056ec>
    5958:	3009883a 	mov	r4,r6
    595c:	d8c00215 	stw	r3,8(sp)
    5960:	d9800315 	stw	r6,12(sp)
    5964:	da800015 	stw	r10,0(sp)
    5968:	dac00115 	stw	r11,4(sp)
    596c:	00067e40 	call	67e4 <__clzsi2>
    5970:	11000804 	addi	r4,r2,32
    5974:	014009c4 	movi	r5,39
    5978:	d8c00217 	ldw	r3,8(sp)
    597c:	d9800317 	ldw	r6,12(sp)
    5980:	da800017 	ldw	r10,0(sp)
    5984:	dac00117 	ldw	r11,4(sp)
    5988:	293f320e 	bge	r5,r4,5654 <__alt_mem_Flash_flash_data+0xf4005654>
    598c:	10bffe04 	addi	r2,r2,-8
    5990:	b8a2983a 	sll	r17,r23,r2
    5994:	002f883a 	mov	r23,zero
    5998:	003f3506 	br	5670 <__alt_mem_Flash_flash_data+0xf4005670>
    599c:	d9800315 	stw	r6,12(sp)
    59a0:	d9c00015 	stw	r7,0(sp)
    59a4:	00067e40 	call	67e4 <__clzsi2>
    59a8:	10c00804 	addi	r3,r2,32
    59ac:	010009c4 	movi	r4,39
    59b0:	d9800317 	ldw	r6,12(sp)
    59b4:	d9c00017 	ldw	r7,0(sp)
    59b8:	20ff060e 	bge	r4,r3,55d4 <__alt_mem_Flash_flash_data+0xf40055d4>
    59bc:	10bffe04 	addi	r2,r2,-8
    59c0:	88a0983a 	sll	r16,r17,r2
    59c4:	0025883a 	mov	r18,zero
    59c8:	003f0906 	br	55f0 <__alt_mem_Flash_flash_data+0xf40055f0>
    59cc:	9004d0fa 	srli	r2,r18,3
    59d0:	8024977a 	slli	r18,r16,29
    59d4:	8020927a 	slli	r16,r16,9
    59d8:	2101ffcc 	andi	r4,r4,2047
    59dc:	90a4b03a 	or	r18,r18,r2
    59e0:	8020d33a 	srli	r16,r16,12
    59e4:	b4c0004c 	andi	r19,r22,1
    59e8:	003edb06 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    59ec:	00ff0084 	movi	r3,-1022
    59f0:	1947c83a 	sub	r3,r3,r5
    59f4:	00800e04 	movi	r2,56
    59f8:	10c0080e 	bge	r2,r3,5a1c <__muldf3+0x62c>
    59fc:	b4c0004c 	andi	r19,r22,1
    5a00:	0009883a 	mov	r4,zero
    5a04:	0021883a 	mov	r16,zero
    5a08:	0025883a 	mov	r18,zero
    5a0c:	003ed206 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    5a10:	600b883a 	mov	r5,r12
    5a14:	e02d883a 	mov	r22,fp
    5a18:	003fa706 	br	58b8 <__alt_mem_Flash_flash_data+0xf40058b8>
    5a1c:	008007c4 	movi	r2,31
    5a20:	10c01816 	blt	r2,r3,5a84 <__muldf3+0x694>
    5a24:	29410784 	addi	r5,r5,1054
    5a28:	8144983a 	sll	r2,r16,r5
    5a2c:	90c8d83a 	srl	r4,r18,r3
    5a30:	914a983a 	sll	r5,r18,r5
    5a34:	80c6d83a 	srl	r3,r16,r3
    5a38:	2088b03a 	or	r4,r4,r2
    5a3c:	2804c03a 	cmpne	r2,r5,zero
    5a40:	2084b03a 	or	r2,r4,r2
    5a44:	110001cc 	andi	r4,r2,7
    5a48:	20000726 	beq	r4,zero,5a68 <__muldf3+0x678>
    5a4c:	114003cc 	andi	r5,r2,15
    5a50:	01000104 	movi	r4,4
    5a54:	29000426 	beq	r5,r4,5a68 <__muldf3+0x678>
    5a58:	11000104 	addi	r4,r2,4
    5a5c:	2085803a 	cmpltu	r2,r4,r2
    5a60:	1887883a 	add	r3,r3,r2
    5a64:	2005883a 	mov	r2,r4
    5a68:	1900202c 	andhi	r4,r3,128
    5a6c:	20001826 	beq	r4,zero,5ad0 <__muldf3+0x6e0>
    5a70:	b4c0004c 	andi	r19,r22,1
    5a74:	01000044 	movi	r4,1
    5a78:	0021883a 	mov	r16,zero
    5a7c:	0025883a 	mov	r18,zero
    5a80:	003eb506 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    5a84:	00bef884 	movi	r2,-1054
    5a88:	1145c83a 	sub	r2,r2,r5
    5a8c:	8088d83a 	srl	r4,r16,r2
    5a90:	00800804 	movi	r2,32
    5a94:	18801726 	beq	r3,r2,5af4 <__muldf3+0x704>
    5a98:	28810f84 	addi	r2,r5,1086
    5a9c:	8084983a 	sll	r2,r16,r2
    5aa0:	1484b03a 	or	r2,r2,r18
    5aa4:	1004c03a 	cmpne	r2,r2,zero
    5aa8:	1104b03a 	or	r2,r2,r4
    5aac:	10c001cc 	andi	r3,r2,7
    5ab0:	18000b1e 	bne	r3,zero,5ae0 <__muldf3+0x6f0>
    5ab4:	0021883a 	mov	r16,zero
    5ab8:	1004d0fa 	srli	r2,r2,3
    5abc:	b4c0004c 	andi	r19,r22,1
    5ac0:	0009883a 	mov	r4,zero
    5ac4:	10e4b03a 	or	r18,r2,r3
    5ac8:	003ea306 	br	5558 <__alt_mem_Flash_flash_data+0xf4005558>
    5acc:	0007883a 	mov	r3,zero
    5ad0:	1820927a 	slli	r16,r3,9
    5ad4:	1806977a 	slli	r3,r3,29
    5ad8:	8020d33a 	srli	r16,r16,12
    5adc:	003ff606 	br	5ab8 <__alt_mem_Flash_flash_data+0xf4005ab8>
    5ae0:	110003cc 	andi	r4,r2,15
    5ae4:	00c00104 	movi	r3,4
    5ae8:	20fff826 	beq	r4,r3,5acc <__alt_mem_Flash_flash_data+0xf4005acc>
    5aec:	0007883a 	mov	r3,zero
    5af0:	003fd906 	br	5a58 <__alt_mem_Flash_flash_data+0xf4005a58>
    5af4:	0005883a 	mov	r2,zero
    5af8:	003fe906 	br	5aa0 <__alt_mem_Flash_flash_data+0xf4005aa0>
    5afc:	00800434 	movhi	r2,16
    5b00:	84000234 	orhi	r16,r16,8
    5b04:	10bfffc4 	addi	r2,r2,-1
    5b08:	e4c0004c 	andi	r19,fp,1
    5b0c:	80a0703a 	and	r16,r16,r2
    5b10:	003ef606 	br	56ec <__alt_mem_Flash_flash_data+0xf40056ec>

00005b14 <__subdf3>:
    5b14:	00c00434 	movhi	r3,16
    5b18:	18ffffc4 	addi	r3,r3,-1
    5b1c:	defffb04 	addi	sp,sp,-20
    5b20:	28d2703a 	and	r9,r5,r3
    5b24:	3814d53a 	srli	r10,r7,20
    5b28:	38c6703a 	and	r3,r7,r3
    5b2c:	3004d77a 	srli	r2,r6,29
    5b30:	dc800215 	stw	r18,8(sp)
    5b34:	dc000015 	stw	r16,0(sp)
    5b38:	2824d7fa 	srli	r18,r5,31
    5b3c:	2820d53a 	srli	r16,r5,20
    5b40:	481290fa 	slli	r9,r9,3
    5b44:	200ad77a 	srli	r5,r4,29
    5b48:	180690fa 	slli	r3,r3,3
    5b4c:	dc400115 	stw	r17,4(sp)
    5b50:	dfc00415 	stw	ra,16(sp)
    5b54:	202290fa 	slli	r17,r4,3
    5b58:	dcc00315 	stw	r19,12(sp)
    5b5c:	5281ffcc 	andi	r10,r10,2047
    5b60:	0101ffc4 	movi	r4,2047
    5b64:	9011883a 	mov	r8,r18
    5b68:	8401ffcc 	andi	r16,r16,2047
    5b6c:	94803fcc 	andi	r18,r18,255
    5b70:	494ab03a 	or	r5,r9,r5
    5b74:	380ed7fa 	srli	r7,r7,31
    5b78:	1886b03a 	or	r3,r3,r2
    5b7c:	300c90fa 	slli	r6,r6,3
    5b80:	51009026 	beq	r10,r4,5dc4 <__subdf3+0x2b0>
    5b84:	39c0005c 	xori	r7,r7,1
    5b88:	8285c83a 	sub	r2,r16,r10
    5b8c:	91c06f26 	beq	r18,r7,5d4c <__subdf3+0x238>
    5b90:	0080b10e 	bge	zero,r2,5e58 <__subdf3+0x344>
    5b94:	50002a1e 	bne	r10,zero,5c40 <__subdf3+0x12c>
    5b98:	1988b03a 	or	r4,r3,r6
    5b9c:	2000941e 	bne	r4,zero,5df0 <__subdf3+0x2dc>
    5ba0:	888001cc 	andi	r2,r17,7
    5ba4:	10005b26 	beq	r2,zero,5d14 <__subdf3+0x200>
    5ba8:	88c003cc 	andi	r3,r17,15
    5bac:	00800104 	movi	r2,4
    5bb0:	18805826 	beq	r3,r2,5d14 <__subdf3+0x200>
    5bb4:	88c00104 	addi	r3,r17,4
    5bb8:	1c63803a 	cmpltu	r17,r3,r17
    5bbc:	2c4b883a 	add	r5,r5,r17
    5bc0:	2880202c 	andhi	r2,r5,128
    5bc4:	9200004c 	andi	r8,r18,1
    5bc8:	1823883a 	mov	r17,r3
    5bcc:	10005426 	beq	r2,zero,5d20 <__subdf3+0x20c>
    5bd0:	84000044 	addi	r16,r16,1
    5bd4:	0081ffc4 	movi	r2,2047
    5bd8:	8080bf26 	beq	r16,r2,5ed8 <__subdf3+0x3c4>
    5bdc:	013fe034 	movhi	r4,65408
    5be0:	213fffc4 	addi	r4,r4,-1
    5be4:	290a703a 	and	r5,r5,r4
    5be8:	2804977a 	slli	r2,r5,29
    5bec:	280a927a 	slli	r5,r5,9
    5bf0:	8822d0fa 	srli	r17,r17,3
    5bf4:	8401ffcc 	andi	r16,r16,2047
    5bf8:	2808d33a 	srli	r4,r5,12
    5bfc:	1444b03a 	or	r2,r2,r17
    5c00:	8401ffcc 	andi	r16,r16,2047
    5c04:	800a953a 	slli	r5,r16,20
    5c08:	40c03fcc 	andi	r3,r8,255
    5c0c:	04000434 	movhi	r16,16
    5c10:	180697fa 	slli	r3,r3,31
    5c14:	843fffc4 	addi	r16,r16,-1
    5c18:	2420703a 	and	r16,r4,r16
    5c1c:	8160b03a 	or	r16,r16,r5
    5c20:	80c6b03a 	or	r3,r16,r3
    5c24:	dfc00417 	ldw	ra,16(sp)
    5c28:	dcc00317 	ldw	r19,12(sp)
    5c2c:	dc800217 	ldw	r18,8(sp)
    5c30:	dc400117 	ldw	r17,4(sp)
    5c34:	dc000017 	ldw	r16,0(sp)
    5c38:	dec00504 	addi	sp,sp,20
    5c3c:	f800283a 	ret
    5c40:	0101ffc4 	movi	r4,2047
    5c44:	813fd626 	beq	r16,r4,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5c48:	18c02034 	orhi	r3,r3,128
    5c4c:	01000e04 	movi	r4,56
    5c50:	2080a416 	blt	r4,r2,5ee4 <__subdf3+0x3d0>
    5c54:	010007c4 	movi	r4,31
    5c58:	2080c716 	blt	r4,r2,5f78 <__subdf3+0x464>
    5c5c:	01000804 	movi	r4,32
    5c60:	2089c83a 	sub	r4,r4,r2
    5c64:	1910983a 	sll	r8,r3,r4
    5c68:	308ed83a 	srl	r7,r6,r2
    5c6c:	3108983a 	sll	r4,r6,r4
    5c70:	1884d83a 	srl	r2,r3,r2
    5c74:	41ccb03a 	or	r6,r8,r7
    5c78:	2008c03a 	cmpne	r4,r4,zero
    5c7c:	310cb03a 	or	r6,r6,r4
    5c80:	898dc83a 	sub	r6,r17,r6
    5c84:	89a3803a 	cmpltu	r17,r17,r6
    5c88:	288bc83a 	sub	r5,r5,r2
    5c8c:	2c4bc83a 	sub	r5,r5,r17
    5c90:	3023883a 	mov	r17,r6
    5c94:	2880202c 	andhi	r2,r5,128
    5c98:	10006b26 	beq	r2,zero,5e48 <__subdf3+0x334>
    5c9c:	04c02034 	movhi	r19,128
    5ca0:	9cffffc4 	addi	r19,r19,-1
    5ca4:	2ce6703a 	and	r19,r5,r19
    5ca8:	98007c26 	beq	r19,zero,5e9c <__subdf3+0x388>
    5cac:	9809883a 	mov	r4,r19
    5cb0:	00067e40 	call	67e4 <__clzsi2>
    5cb4:	10fffe04 	addi	r3,r2,-8
    5cb8:	010007c4 	movi	r4,31
    5cbc:	20c07d16 	blt	r4,r3,5eb4 <__subdf3+0x3a0>
    5cc0:	01400a04 	movi	r5,40
    5cc4:	2885c83a 	sub	r2,r5,r2
    5cc8:	888ad83a 	srl	r5,r17,r2
    5ccc:	98e6983a 	sll	r19,r19,r3
    5cd0:	88e2983a 	sll	r17,r17,r3
    5cd4:	2ce6b03a 	or	r19,r5,r19
    5cd8:	1c007a16 	blt	r3,r16,5ec4 <__subdf3+0x3b0>
    5cdc:	1c21c83a 	sub	r16,r3,r16
    5ce0:	81400044 	addi	r5,r16,1
    5ce4:	00c007c4 	movi	r3,31
    5ce8:	19409616 	blt	r3,r5,5f44 <__subdf3+0x430>
    5cec:	1c21c83a 	sub	r16,r3,r16
    5cf0:	8c08983a 	sll	r4,r17,r16
    5cf4:	8946d83a 	srl	r3,r17,r5
    5cf8:	9c20983a 	sll	r16,r19,r16
    5cfc:	2008c03a 	cmpne	r4,r4,zero
    5d00:	994ad83a 	srl	r5,r19,r5
    5d04:	1c06b03a 	or	r3,r3,r16
    5d08:	1922b03a 	or	r17,r3,r4
    5d0c:	0021883a 	mov	r16,zero
    5d10:	003fa306 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5d14:	2880202c 	andhi	r2,r5,128
    5d18:	9200004c 	andi	r8,r18,1
    5d1c:	103fac1e 	bne	r2,zero,5bd0 <__alt_mem_Flash_flash_data+0xf4005bd0>
    5d20:	2804977a 	slli	r2,r5,29
    5d24:	8822d0fa 	srli	r17,r17,3
    5d28:	00c1ffc4 	movi	r3,2047
    5d2c:	280ad0fa 	srli	r5,r5,3
    5d30:	1444b03a 	or	r2,r2,r17
    5d34:	80c02726 	beq	r16,r3,5dd4 <__subdf3+0x2c0>
    5d38:	01000434 	movhi	r4,16
    5d3c:	213fffc4 	addi	r4,r4,-1
    5d40:	80e0703a 	and	r16,r16,r3
    5d44:	2908703a 	and	r4,r5,r4
    5d48:	003fad06 	br	5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    5d4c:	0080690e 	bge	zero,r2,5ef4 <__subdf3+0x3e0>
    5d50:	50002f26 	beq	r10,zero,5e10 <__subdf3+0x2fc>
    5d54:	0101ffc4 	movi	r4,2047
    5d58:	813f9126 	beq	r16,r4,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5d5c:	18c02034 	orhi	r3,r3,128
    5d60:	01000e04 	movi	r4,56
    5d64:	2080b00e 	bge	r4,r2,6028 <__subdf3+0x514>
    5d68:	198cb03a 	or	r6,r3,r6
    5d6c:	300ec03a 	cmpne	r7,r6,zero
    5d70:	0005883a 	mov	r2,zero
    5d74:	3c4f883a 	add	r7,r7,r17
    5d78:	3c63803a 	cmpltu	r17,r7,r17
    5d7c:	114b883a 	add	r5,r2,r5
    5d80:	2c4b883a 	add	r5,r5,r17
    5d84:	3823883a 	mov	r17,r7
    5d88:	2880202c 	andhi	r2,r5,128
    5d8c:	10002e26 	beq	r2,zero,5e48 <__subdf3+0x334>
    5d90:	84000044 	addi	r16,r16,1
    5d94:	0081ffc4 	movi	r2,2047
    5d98:	8080de26 	beq	r16,r2,6114 <__subdf3+0x600>
    5d9c:	00bfe034 	movhi	r2,65408
    5da0:	10bfffc4 	addi	r2,r2,-1
    5da4:	288a703a 	and	r5,r5,r2
    5da8:	880cd07a 	srli	r6,r17,1
    5dac:	280897fa 	slli	r4,r5,31
    5db0:	88c0004c 	andi	r3,r17,1
    5db4:	30e2b03a 	or	r17,r6,r3
    5db8:	280ad07a 	srli	r5,r5,1
    5dbc:	8922b03a 	or	r17,r17,r4
    5dc0:	003f7706 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5dc4:	1984b03a 	or	r2,r3,r6
    5dc8:	103f6e26 	beq	r2,zero,5b84 <__alt_mem_Flash_flash_data+0xf4005b84>
    5dcc:	39c03fcc 	andi	r7,r7,255
    5dd0:	003f6d06 	br	5b88 <__alt_mem_Flash_flash_data+0xf4005b88>
    5dd4:	1146b03a 	or	r3,r2,r5
    5dd8:	18003f26 	beq	r3,zero,5ed8 <__subdf3+0x3c4>
    5ddc:	00c00434 	movhi	r3,16
    5de0:	29000234 	orhi	r4,r5,8
    5de4:	18ffffc4 	addi	r3,r3,-1
    5de8:	20c8703a 	and	r4,r4,r3
    5dec:	003f8406 	br	5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    5df0:	10bfffc4 	addi	r2,r2,-1
    5df4:	1000501e 	bne	r2,zero,5f38 <__subdf3+0x424>
    5df8:	898fc83a 	sub	r7,r17,r6
    5dfc:	89e3803a 	cmpltu	r17,r17,r7
    5e00:	28cbc83a 	sub	r5,r5,r3
    5e04:	2c4bc83a 	sub	r5,r5,r17
    5e08:	3823883a 	mov	r17,r7
    5e0c:	003fa106 	br	5c94 <__alt_mem_Flash_flash_data+0xf4005c94>
    5e10:	1988b03a 	or	r4,r3,r6
    5e14:	203f6226 	beq	r4,zero,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5e18:	10bfffc4 	addi	r2,r2,-1
    5e1c:	10009b1e 	bne	r2,zero,608c <__subdf3+0x578>
    5e20:	344d883a 	add	r6,r6,r17
    5e24:	3463803a 	cmpltu	r17,r6,r17
    5e28:	194b883a 	add	r5,r3,r5
    5e2c:	2c4b883a 	add	r5,r5,r17
    5e30:	3023883a 	mov	r17,r6
    5e34:	003fd406 	br	5d88 <__alt_mem_Flash_flash_data+0xf4005d88>
    5e38:	1106b03a 	or	r3,r2,r4
    5e3c:	1800b426 	beq	r3,zero,6110 <__subdf3+0x5fc>
    5e40:	100b883a 	mov	r5,r2
    5e44:	2023883a 	mov	r17,r4
    5e48:	888001cc 	andi	r2,r17,7
    5e4c:	103f561e 	bne	r2,zero,5ba8 <__alt_mem_Flash_flash_data+0xf4005ba8>
    5e50:	9200004c 	andi	r8,r18,1
    5e54:	003fb206 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    5e58:	1000531e 	bne	r2,zero,5fa8 <__subdf3+0x494>
    5e5c:	80800044 	addi	r2,r16,1
    5e60:	1081ffcc 	andi	r2,r2,2047
    5e64:	01000044 	movi	r4,1
    5e68:	2080a00e 	bge	r4,r2,60ec <__subdf3+0x5d8>
    5e6c:	8985c83a 	sub	r2,r17,r6
    5e70:	8889803a 	cmpltu	r4,r17,r2
    5e74:	28e7c83a 	sub	r19,r5,r3
    5e78:	9927c83a 	sub	r19,r19,r4
    5e7c:	9900202c 	andhi	r4,r19,128
    5e80:	20006226 	beq	r4,zero,600c <__subdf3+0x4f8>
    5e84:	3463c83a 	sub	r17,r6,r17
    5e88:	194bc83a 	sub	r5,r3,r5
    5e8c:	344d803a 	cmpltu	r6,r6,r17
    5e90:	29a7c83a 	sub	r19,r5,r6
    5e94:	3825883a 	mov	r18,r7
    5e98:	983f841e 	bne	r19,zero,5cac <__alt_mem_Flash_flash_data+0xf4005cac>
    5e9c:	8809883a 	mov	r4,r17
    5ea0:	00067e40 	call	67e4 <__clzsi2>
    5ea4:	10800804 	addi	r2,r2,32
    5ea8:	10fffe04 	addi	r3,r2,-8
    5eac:	010007c4 	movi	r4,31
    5eb0:	20ff830e 	bge	r4,r3,5cc0 <__alt_mem_Flash_flash_data+0xf4005cc0>
    5eb4:	14fff604 	addi	r19,r2,-40
    5eb8:	8ce6983a 	sll	r19,r17,r19
    5ebc:	0023883a 	mov	r17,zero
    5ec0:	1c3f860e 	bge	r3,r16,5cdc <__alt_mem_Flash_flash_data+0xf4005cdc>
    5ec4:	017fe034 	movhi	r5,65408
    5ec8:	297fffc4 	addi	r5,r5,-1
    5ecc:	80e1c83a 	sub	r16,r16,r3
    5ed0:	994a703a 	and	r5,r19,r5
    5ed4:	003f3206 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5ed8:	0009883a 	mov	r4,zero
    5edc:	0005883a 	mov	r2,zero
    5ee0:	003f4706 	br	5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    5ee4:	198cb03a 	or	r6,r3,r6
    5ee8:	300cc03a 	cmpne	r6,r6,zero
    5eec:	0005883a 	mov	r2,zero
    5ef0:	003f6306 	br	5c80 <__alt_mem_Flash_flash_data+0xf4005c80>
    5ef4:	10009d1e 	bne	r2,zero,616c <__subdf3+0x658>
    5ef8:	81c00044 	addi	r7,r16,1
    5efc:	3881ffcc 	andi	r2,r7,2047
    5f00:	02400044 	movi	r9,1
    5f04:	4880680e 	bge	r9,r2,60a8 <__subdf3+0x594>
    5f08:	0081ffc4 	movi	r2,2047
    5f0c:	3880ae26 	beq	r7,r2,61c8 <__subdf3+0x6b4>
    5f10:	344d883a 	add	r6,r6,r17
    5f14:	3463803a 	cmpltu	r17,r6,r17
    5f18:	194b883a 	add	r5,r3,r5
    5f1c:	2c4b883a 	add	r5,r5,r17
    5f20:	282297fa 	slli	r17,r5,31
    5f24:	300cd07a 	srli	r6,r6,1
    5f28:	280ad07a 	srli	r5,r5,1
    5f2c:	3821883a 	mov	r16,r7
    5f30:	89a2b03a 	or	r17,r17,r6
    5f34:	003f1a06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5f38:	0101ffc4 	movi	r4,2047
    5f3c:	813f431e 	bne	r16,r4,5c4c <__alt_mem_Flash_flash_data+0xf4005c4c>
    5f40:	003f1706 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5f44:	80bff844 	addi	r2,r16,-31
    5f48:	00c00804 	movi	r3,32
    5f4c:	9884d83a 	srl	r2,r19,r2
    5f50:	28c05126 	beq	r5,r3,6098 <__subdf3+0x584>
    5f54:	00c00fc4 	movi	r3,63
    5f58:	1c21c83a 	sub	r16,r3,r16
    5f5c:	9c26983a 	sll	r19,r19,r16
    5f60:	9c62b03a 	or	r17,r19,r17
    5f64:	8822c03a 	cmpne	r17,r17,zero
    5f68:	88a2b03a 	or	r17,r17,r2
    5f6c:	000b883a 	mov	r5,zero
    5f70:	0021883a 	mov	r16,zero
    5f74:	003fb406 	br	5e48 <__alt_mem_Flash_flash_data+0xf4005e48>
    5f78:	113ff804 	addi	r4,r2,-32
    5f7c:	01c00804 	movi	r7,32
    5f80:	1908d83a 	srl	r4,r3,r4
    5f84:	11c04626 	beq	r2,r7,60a0 <__subdf3+0x58c>
    5f88:	01c01004 	movi	r7,64
    5f8c:	3885c83a 	sub	r2,r7,r2
    5f90:	1884983a 	sll	r2,r3,r2
    5f94:	118cb03a 	or	r6,r2,r6
    5f98:	300cc03a 	cmpne	r6,r6,zero
    5f9c:	310cb03a 	or	r6,r6,r4
    5fa0:	0005883a 	mov	r2,zero
    5fa4:	003f3606 	br	5c80 <__alt_mem_Flash_flash_data+0xf4005c80>
    5fa8:	80002b26 	beq	r16,zero,6058 <__subdf3+0x544>
    5fac:	0101ffc4 	movi	r4,2047
    5fb0:	51006926 	beq	r10,r4,6158 <__subdf3+0x644>
    5fb4:	0085c83a 	sub	r2,zero,r2
    5fb8:	29402034 	orhi	r5,r5,128
    5fbc:	01000e04 	movi	r4,56
    5fc0:	20807d16 	blt	r4,r2,61b8 <__subdf3+0x6a4>
    5fc4:	010007c4 	movi	r4,31
    5fc8:	2080d916 	blt	r4,r2,6330 <__subdf3+0x81c>
    5fcc:	01000804 	movi	r4,32
    5fd0:	2089c83a 	sub	r4,r4,r2
    5fd4:	2912983a 	sll	r9,r5,r4
    5fd8:	8890d83a 	srl	r8,r17,r2
    5fdc:	8908983a 	sll	r4,r17,r4
    5fe0:	2884d83a 	srl	r2,r5,r2
    5fe4:	4a22b03a 	or	r17,r9,r8
    5fe8:	2008c03a 	cmpne	r4,r4,zero
    5fec:	8922b03a 	or	r17,r17,r4
    5ff0:	3463c83a 	sub	r17,r6,r17
    5ff4:	1885c83a 	sub	r2,r3,r2
    5ff8:	344d803a 	cmpltu	r6,r6,r17
    5ffc:	118bc83a 	sub	r5,r2,r6
    6000:	5021883a 	mov	r16,r10
    6004:	3825883a 	mov	r18,r7
    6008:	003f2206 	br	5c94 <__alt_mem_Flash_flash_data+0xf4005c94>
    600c:	9886b03a 	or	r3,r19,r2
    6010:	18001c1e 	bne	r3,zero,6084 <__subdf3+0x570>
    6014:	0011883a 	mov	r8,zero
    6018:	000b883a 	mov	r5,zero
    601c:	0023883a 	mov	r17,zero
    6020:	0021883a 	mov	r16,zero
    6024:	003f3e06 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    6028:	010007c4 	movi	r4,31
    602c:	20803c16 	blt	r4,r2,6120 <__subdf3+0x60c>
    6030:	01000804 	movi	r4,32
    6034:	2089c83a 	sub	r4,r4,r2
    6038:	1912983a 	sll	r9,r3,r4
    603c:	308ed83a 	srl	r7,r6,r2
    6040:	3108983a 	sll	r4,r6,r4
    6044:	1884d83a 	srl	r2,r3,r2
    6048:	49ceb03a 	or	r7,r9,r7
    604c:	2008c03a 	cmpne	r4,r4,zero
    6050:	390eb03a 	or	r7,r7,r4
    6054:	003f4706 	br	5d74 <__alt_mem_Flash_flash_data+0xf4005d74>
    6058:	2c48b03a 	or	r4,r5,r17
    605c:	20003e26 	beq	r4,zero,6158 <__subdf3+0x644>
    6060:	0084303a 	nor	r2,zero,r2
    6064:	10003a1e 	bne	r2,zero,6150 <__subdf3+0x63c>
    6068:	3463c83a 	sub	r17,r6,r17
    606c:	194bc83a 	sub	r5,r3,r5
    6070:	344d803a 	cmpltu	r6,r6,r17
    6074:	298bc83a 	sub	r5,r5,r6
    6078:	5021883a 	mov	r16,r10
    607c:	3825883a 	mov	r18,r7
    6080:	003f0406 	br	5c94 <__alt_mem_Flash_flash_data+0xf4005c94>
    6084:	1023883a 	mov	r17,r2
    6088:	003f0706 	br	5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    608c:	0101ffc4 	movi	r4,2047
    6090:	813f331e 	bne	r16,r4,5d60 <__alt_mem_Flash_flash_data+0xf4005d60>
    6094:	003ec206 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    6098:	0027883a 	mov	r19,zero
    609c:	003fb006 	br	5f60 <__alt_mem_Flash_flash_data+0xf4005f60>
    60a0:	0005883a 	mov	r2,zero
    60a4:	003fbb06 	br	5f94 <__alt_mem_Flash_flash_data+0xf4005f94>
    60a8:	2c44b03a 	or	r2,r5,r17
    60ac:	80008b1e 	bne	r16,zero,62dc <__subdf3+0x7c8>
    60b0:	1000b526 	beq	r2,zero,6388 <__subdf3+0x874>
    60b4:	1984b03a 	or	r2,r3,r6
    60b8:	103eb926 	beq	r2,zero,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    60bc:	3449883a 	add	r4,r6,r17
    60c0:	2463803a 	cmpltu	r17,r4,r17
    60c4:	194b883a 	add	r5,r3,r5
    60c8:	2c4b883a 	add	r5,r5,r17
    60cc:	2880202c 	andhi	r2,r5,128
    60d0:	2023883a 	mov	r17,r4
    60d4:	103f5c26 	beq	r2,zero,5e48 <__alt_mem_Flash_flash_data+0xf4005e48>
    60d8:	00bfe034 	movhi	r2,65408
    60dc:	10bfffc4 	addi	r2,r2,-1
    60e0:	4821883a 	mov	r16,r9
    60e4:	288a703a 	and	r5,r5,r2
    60e8:	003ead06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    60ec:	2c44b03a 	or	r2,r5,r17
    60f0:	8000291e 	bne	r16,zero,6198 <__subdf3+0x684>
    60f4:	10004f1e 	bne	r2,zero,6234 <__subdf3+0x720>
    60f8:	1984b03a 	or	r2,r3,r6
    60fc:	10000426 	beq	r2,zero,6110 <__subdf3+0x5fc>
    6100:	180b883a 	mov	r5,r3
    6104:	3023883a 	mov	r17,r6
    6108:	3825883a 	mov	r18,r7
    610c:	003ea406 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    6110:	0011883a 	mov	r8,zero
    6114:	000b883a 	mov	r5,zero
    6118:	0023883a 	mov	r17,zero
    611c:	003f0006 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    6120:	11fff804 	addi	r7,r2,-32
    6124:	19c8d83a 	srl	r4,r3,r7
    6128:	01c00804 	movi	r7,32
    612c:	11c07e26 	beq	r2,r7,6328 <__subdf3+0x814>
    6130:	01c01004 	movi	r7,64
    6134:	3885c83a 	sub	r2,r7,r2
    6138:	1884983a 	sll	r2,r3,r2
    613c:	118cb03a 	or	r6,r2,r6
    6140:	300ec03a 	cmpne	r7,r6,zero
    6144:	390eb03a 	or	r7,r7,r4
    6148:	0005883a 	mov	r2,zero
    614c:	003f0906 	br	5d74 <__alt_mem_Flash_flash_data+0xf4005d74>
    6150:	0101ffc4 	movi	r4,2047
    6154:	513f991e 	bne	r10,r4,5fbc <__alt_mem_Flash_flash_data+0xf4005fbc>
    6158:	180b883a 	mov	r5,r3
    615c:	3023883a 	mov	r17,r6
    6160:	5021883a 	mov	r16,r10
    6164:	3825883a 	mov	r18,r7
    6168:	003e8d06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    616c:	80001a1e 	bne	r16,zero,61d8 <__subdf3+0x6c4>
    6170:	2c48b03a 	or	r4,r5,r17
    6174:	20005526 	beq	r4,zero,62cc <__subdf3+0x7b8>
    6178:	0084303a 	nor	r2,zero,r2
    617c:	1000511e 	bne	r2,zero,62c4 <__subdf3+0x7b0>
    6180:	89a3883a 	add	r17,r17,r6
    6184:	194b883a 	add	r5,r3,r5
    6188:	898d803a 	cmpltu	r6,r17,r6
    618c:	298b883a 	add	r5,r5,r6
    6190:	5021883a 	mov	r16,r10
    6194:	003efc06 	br	5d88 <__alt_mem_Flash_flash_data+0xf4005d88>
    6198:	1000341e 	bne	r2,zero,626c <__subdf3+0x758>
    619c:	1984b03a 	or	r2,r3,r6
    61a0:	10006f26 	beq	r2,zero,6360 <__subdf3+0x84c>
    61a4:	180b883a 	mov	r5,r3
    61a8:	3023883a 	mov	r17,r6
    61ac:	3825883a 	mov	r18,r7
    61b0:	0401ffc4 	movi	r16,2047
    61b4:	003e7a06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    61b8:	2c62b03a 	or	r17,r5,r17
    61bc:	8822c03a 	cmpne	r17,r17,zero
    61c0:	0005883a 	mov	r2,zero
    61c4:	003f8a06 	br	5ff0 <__alt_mem_Flash_flash_data+0xf4005ff0>
    61c8:	3821883a 	mov	r16,r7
    61cc:	000b883a 	mov	r5,zero
    61d0:	0023883a 	mov	r17,zero
    61d4:	003ed206 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    61d8:	0101ffc4 	movi	r4,2047
    61dc:	51003b26 	beq	r10,r4,62cc <__subdf3+0x7b8>
    61e0:	0085c83a 	sub	r2,zero,r2
    61e4:	29402034 	orhi	r5,r5,128
    61e8:	01000e04 	movi	r4,56
    61ec:	20806216 	blt	r4,r2,6378 <__subdf3+0x864>
    61f0:	010007c4 	movi	r4,31
    61f4:	20806b16 	blt	r4,r2,63a4 <__subdf3+0x890>
    61f8:	01000804 	movi	r4,32
    61fc:	2089c83a 	sub	r4,r4,r2
    6200:	2912983a 	sll	r9,r5,r4
    6204:	888ed83a 	srl	r7,r17,r2
    6208:	8908983a 	sll	r4,r17,r4
    620c:	2884d83a 	srl	r2,r5,r2
    6210:	49e2b03a 	or	r17,r9,r7
    6214:	2008c03a 	cmpne	r4,r4,zero
    6218:	8922b03a 	or	r17,r17,r4
    621c:	89a3883a 	add	r17,r17,r6
    6220:	10c5883a 	add	r2,r2,r3
    6224:	898d803a 	cmpltu	r6,r17,r6
    6228:	118b883a 	add	r5,r2,r6
    622c:	5021883a 	mov	r16,r10
    6230:	003ed506 	br	5d88 <__alt_mem_Flash_flash_data+0xf4005d88>
    6234:	1984b03a 	or	r2,r3,r6
    6238:	103e5926 	beq	r2,zero,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    623c:	8989c83a 	sub	r4,r17,r6
    6240:	8911803a 	cmpltu	r8,r17,r4
    6244:	28c5c83a 	sub	r2,r5,r3
    6248:	1205c83a 	sub	r2,r2,r8
    624c:	1200202c 	andhi	r8,r2,128
    6250:	403ef926 	beq	r8,zero,5e38 <__alt_mem_Flash_flash_data+0xf4005e38>
    6254:	3463c83a 	sub	r17,r6,r17
    6258:	194bc83a 	sub	r5,r3,r5
    625c:	344d803a 	cmpltu	r6,r6,r17
    6260:	298bc83a 	sub	r5,r5,r6
    6264:	3825883a 	mov	r18,r7
    6268:	003e4d06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    626c:	1984b03a 	or	r2,r3,r6
    6270:	10002b26 	beq	r2,zero,6320 <__subdf3+0x80c>
    6274:	2808d0fa 	srli	r4,r5,3
    6278:	8822d0fa 	srli	r17,r17,3
    627c:	280a977a 	slli	r5,r5,29
    6280:	2080022c 	andhi	r2,r4,8
    6284:	2c62b03a 	or	r17,r5,r17
    6288:	10000826 	beq	r2,zero,62ac <__subdf3+0x798>
    628c:	1810d0fa 	srli	r8,r3,3
    6290:	4080022c 	andhi	r2,r8,8
    6294:	1000051e 	bne	r2,zero,62ac <__subdf3+0x798>
    6298:	300cd0fa 	srli	r6,r6,3
    629c:	1804977a 	slli	r2,r3,29
    62a0:	4009883a 	mov	r4,r8
    62a4:	3825883a 	mov	r18,r7
    62a8:	11a2b03a 	or	r17,r2,r6
    62ac:	880ad77a 	srli	r5,r17,29
    62b0:	200890fa 	slli	r4,r4,3
    62b4:	882290fa 	slli	r17,r17,3
    62b8:	0401ffc4 	movi	r16,2047
    62bc:	290ab03a 	or	r5,r5,r4
    62c0:	003e3706 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    62c4:	0101ffc4 	movi	r4,2047
    62c8:	513fc71e 	bne	r10,r4,61e8 <__alt_mem_Flash_flash_data+0xf40061e8>
    62cc:	180b883a 	mov	r5,r3
    62d0:	3023883a 	mov	r17,r6
    62d4:	5021883a 	mov	r16,r10
    62d8:	003e3106 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    62dc:	10002d26 	beq	r2,zero,6394 <__subdf3+0x880>
    62e0:	1984b03a 	or	r2,r3,r6
    62e4:	10000e26 	beq	r2,zero,6320 <__subdf3+0x80c>
    62e8:	2808d0fa 	srli	r4,r5,3
    62ec:	8822d0fa 	srli	r17,r17,3
    62f0:	280a977a 	slli	r5,r5,29
    62f4:	2080022c 	andhi	r2,r4,8
    62f8:	2c62b03a 	or	r17,r5,r17
    62fc:	103feb26 	beq	r2,zero,62ac <__alt_mem_Flash_flash_data+0xf40062ac>
    6300:	180ed0fa 	srli	r7,r3,3
    6304:	3880022c 	andhi	r2,r7,8
    6308:	103fe81e 	bne	r2,zero,62ac <__alt_mem_Flash_flash_data+0xf40062ac>
    630c:	300cd0fa 	srli	r6,r6,3
    6310:	1804977a 	slli	r2,r3,29
    6314:	3809883a 	mov	r4,r7
    6318:	11a2b03a 	or	r17,r2,r6
    631c:	003fe306 	br	62ac <__alt_mem_Flash_flash_data+0xf40062ac>
    6320:	0401ffc4 	movi	r16,2047
    6324:	003e1e06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    6328:	0005883a 	mov	r2,zero
    632c:	003f8306 	br	613c <__alt_mem_Flash_flash_data+0xf400613c>
    6330:	113ff804 	addi	r4,r2,-32
    6334:	02000804 	movi	r8,32
    6338:	2908d83a 	srl	r4,r5,r4
    633c:	12002526 	beq	r2,r8,63d4 <__subdf3+0x8c0>
    6340:	02001004 	movi	r8,64
    6344:	4085c83a 	sub	r2,r8,r2
    6348:	288a983a 	sll	r5,r5,r2
    634c:	2c62b03a 	or	r17,r5,r17
    6350:	8822c03a 	cmpne	r17,r17,zero
    6354:	8922b03a 	or	r17,r17,r4
    6358:	0005883a 	mov	r2,zero
    635c:	003f2406 	br	5ff0 <__alt_mem_Flash_flash_data+0xf4005ff0>
    6360:	01402034 	movhi	r5,128
    6364:	0011883a 	mov	r8,zero
    6368:	297fffc4 	addi	r5,r5,-1
    636c:	047ffe04 	movi	r17,-8
    6370:	0401ffc4 	movi	r16,2047
    6374:	003e6a06 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    6378:	2c62b03a 	or	r17,r5,r17
    637c:	8822c03a 	cmpne	r17,r17,zero
    6380:	0005883a 	mov	r2,zero
    6384:	003fa506 	br	621c <__alt_mem_Flash_flash_data+0xf400621c>
    6388:	180b883a 	mov	r5,r3
    638c:	3023883a 	mov	r17,r6
    6390:	003e0306 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    6394:	180b883a 	mov	r5,r3
    6398:	3023883a 	mov	r17,r6
    639c:	0401ffc4 	movi	r16,2047
    63a0:	003dff06 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    63a4:	113ff804 	addi	r4,r2,-32
    63a8:	01c00804 	movi	r7,32
    63ac:	2908d83a 	srl	r4,r5,r4
    63b0:	11c00a26 	beq	r2,r7,63dc <__subdf3+0x8c8>
    63b4:	01c01004 	movi	r7,64
    63b8:	3885c83a 	sub	r2,r7,r2
    63bc:	288a983a 	sll	r5,r5,r2
    63c0:	2c62b03a 	or	r17,r5,r17
    63c4:	8822c03a 	cmpne	r17,r17,zero
    63c8:	8922b03a 	or	r17,r17,r4
    63cc:	0005883a 	mov	r2,zero
    63d0:	003f9206 	br	621c <__alt_mem_Flash_flash_data+0xf400621c>
    63d4:	000b883a 	mov	r5,zero
    63d8:	003fdc06 	br	634c <__alt_mem_Flash_flash_data+0xf400634c>
    63dc:	000b883a 	mov	r5,zero
    63e0:	003ff706 	br	63c0 <__alt_mem_Flash_flash_data+0xf40063c0>

000063e4 <__fixdfsi>:
    63e4:	2806d53a 	srli	r3,r5,20
    63e8:	00800434 	movhi	r2,16
    63ec:	10bfffc4 	addi	r2,r2,-1
    63f0:	18c1ffcc 	andi	r3,r3,2047
    63f4:	0180ff84 	movi	r6,1022
    63f8:	2884703a 	and	r2,r5,r2
    63fc:	280ad7fa 	srli	r5,r5,31
    6400:	30c0130e 	bge	r6,r3,6450 <__fixdfsi+0x6c>
    6404:	01810744 	movi	r6,1053
    6408:	30c00d16 	blt	r6,r3,6440 <__fixdfsi+0x5c>
    640c:	01810cc4 	movi	r6,1075
    6410:	30cdc83a 	sub	r6,r6,r3
    6414:	01c007c4 	movi	r7,31
    6418:	10800434 	orhi	r2,r2,16
    641c:	39800e0e 	bge	r7,r6,6458 <__fixdfsi+0x74>
    6420:	010104c4 	movi	r4,1043
    6424:	20c7c83a 	sub	r3,r4,r3
    6428:	10c6d83a 	srl	r3,r2,r3
    642c:	29403fcc 	andi	r5,r5,255
    6430:	0145c83a 	sub	r2,zero,r5
    6434:	1884f03a 	xor	r2,r3,r2
    6438:	1145883a 	add	r2,r2,r5
    643c:	f800283a 	ret
    6440:	00a00034 	movhi	r2,32768
    6444:	10bfffc4 	addi	r2,r2,-1
    6448:	2885883a 	add	r2,r5,r2
    644c:	f800283a 	ret
    6450:	0005883a 	mov	r2,zero
    6454:	f800283a 	ret
    6458:	18fefb44 	addi	r3,r3,-1043
    645c:	2188d83a 	srl	r4,r4,r6
    6460:	10c6983a 	sll	r3,r2,r3
    6464:	20c6b03a 	or	r3,r4,r3
    6468:	003ff006 	br	642c <__alt_mem_Flash_flash_data+0xf400642c>

0000646c <__floatsidf>:
    646c:	defffd04 	addi	sp,sp,-12
    6470:	dc400115 	stw	r17,4(sp)
    6474:	dfc00215 	stw	ra,8(sp)
    6478:	dc000015 	stw	r16,0(sp)
    647c:	2023883a 	mov	r17,r4
    6480:	20001426 	beq	r4,zero,64d4 <__floatsidf+0x68>
    6484:	2020d7fa 	srli	r16,r4,31
    6488:	80000126 	beq	r16,zero,6490 <__floatsidf+0x24>
    648c:	0123c83a 	sub	r17,zero,r4
    6490:	8809883a 	mov	r4,r17
    6494:	00067e40 	call	67e4 <__clzsi2>
    6498:	01410784 	movi	r5,1054
    649c:	00c00284 	movi	r3,10
    64a0:	288bc83a 	sub	r5,r5,r2
    64a4:	18801c16 	blt	r3,r2,6518 <__floatsidf+0xac>
    64a8:	00c002c4 	movi	r3,11
    64ac:	1887c83a 	sub	r3,r3,r2
    64b0:	88c8d83a 	srl	r4,r17,r3
    64b4:	00c00434 	movhi	r3,16
    64b8:	18ffffc4 	addi	r3,r3,-1
    64bc:	10800544 	addi	r2,r2,21
    64c0:	20c8703a 	and	r4,r4,r3
    64c4:	8884983a 	sll	r2,r17,r2
    64c8:	28c1ffcc 	andi	r3,r5,2047
    64cc:	800d883a 	mov	r6,r16
    64d0:	00000406 	br	64e4 <__floatsidf+0x78>
    64d4:	000d883a 	mov	r6,zero
    64d8:	0007883a 	mov	r3,zero
    64dc:	0009883a 	mov	r4,zero
    64e0:	0005883a 	mov	r2,zero
    64e4:	180a953a 	slli	r5,r3,20
    64e8:	31803fcc 	andi	r6,r6,255
    64ec:	00c00434 	movhi	r3,16
    64f0:	300c97fa 	slli	r6,r6,31
    64f4:	18ffffc4 	addi	r3,r3,-1
    64f8:	20c6703a 	and	r3,r4,r3
    64fc:	1946b03a 	or	r3,r3,r5
    6500:	1986b03a 	or	r3,r3,r6
    6504:	dfc00217 	ldw	ra,8(sp)
    6508:	dc400117 	ldw	r17,4(sp)
    650c:	dc000017 	ldw	r16,0(sp)
    6510:	dec00304 	addi	sp,sp,12
    6514:	f800283a 	ret
    6518:	10fffd44 	addi	r3,r2,-11
    651c:	88c8983a 	sll	r4,r17,r3
    6520:	00800434 	movhi	r2,16
    6524:	10bfffc4 	addi	r2,r2,-1
    6528:	2088703a 	and	r4,r4,r2
    652c:	28c1ffcc 	andi	r3,r5,2047
    6530:	800d883a 	mov	r6,r16
    6534:	0005883a 	mov	r2,zero
    6538:	003fea06 	br	64e4 <__alt_mem_Flash_flash_data+0xf40064e4>

0000653c <__extendsfdf2>:
    653c:	200ad5fa 	srli	r5,r4,23
    6540:	defffd04 	addi	sp,sp,-12
    6544:	dc400115 	stw	r17,4(sp)
    6548:	29403fcc 	andi	r5,r5,255
    654c:	29800044 	addi	r6,r5,1
    6550:	04402034 	movhi	r17,128
    6554:	dc000015 	stw	r16,0(sp)
    6558:	8c7fffc4 	addi	r17,r17,-1
    655c:	dfc00215 	stw	ra,8(sp)
    6560:	31803fcc 	andi	r6,r6,255
    6564:	00800044 	movi	r2,1
    6568:	8922703a 	and	r17,r17,r4
    656c:	2020d7fa 	srli	r16,r4,31
    6570:	1180110e 	bge	r2,r6,65b8 <__extendsfdf2+0x7c>
    6574:	880ed0fa 	srli	r7,r17,3
    6578:	8822977a 	slli	r17,r17,29
    657c:	2940e004 	addi	r5,r5,896
    6580:	2941ffcc 	andi	r5,r5,2047
    6584:	280c953a 	slli	r6,r5,20
    6588:	01400434 	movhi	r5,16
    658c:	800697fa 	slli	r3,r16,31
    6590:	297fffc4 	addi	r5,r5,-1
    6594:	394a703a 	and	r5,r7,r5
    6598:	298ab03a 	or	r5,r5,r6
    659c:	8805883a 	mov	r2,r17
    65a0:	28c6b03a 	or	r3,r5,r3
    65a4:	dfc00217 	ldw	ra,8(sp)
    65a8:	dc400117 	ldw	r17,4(sp)
    65ac:	dc000017 	ldw	r16,0(sp)
    65b0:	dec00304 	addi	sp,sp,12
    65b4:	f800283a 	ret
    65b8:	2800111e 	bne	r5,zero,6600 <__extendsfdf2+0xc4>
    65bc:	88001c26 	beq	r17,zero,6630 <__extendsfdf2+0xf4>
    65c0:	8809883a 	mov	r4,r17
    65c4:	00067e40 	call	67e4 <__clzsi2>
    65c8:	00c00284 	movi	r3,10
    65cc:	18801b16 	blt	r3,r2,663c <__extendsfdf2+0x100>
    65d0:	01c002c4 	movi	r7,11
    65d4:	388fc83a 	sub	r7,r7,r2
    65d8:	10c00544 	addi	r3,r2,21
    65dc:	89ced83a 	srl	r7,r17,r7
    65e0:	88e2983a 	sll	r17,r17,r3
    65e4:	0180e244 	movi	r6,905
    65e8:	308bc83a 	sub	r5,r6,r2
    65ec:	01800434 	movhi	r6,16
    65f0:	31bfffc4 	addi	r6,r6,-1
    65f4:	398e703a 	and	r7,r7,r6
    65f8:	2941ffcc 	andi	r5,r5,2047
    65fc:	003fe006 	br	6580 <__alt_mem_Flash_flash_data+0xf4006580>
    6600:	88000826 	beq	r17,zero,6624 <__extendsfdf2+0xe8>
    6604:	880ed0fa 	srli	r7,r17,3
    6608:	00800434 	movhi	r2,16
    660c:	10bfffc4 	addi	r2,r2,-1
    6610:	39c00234 	orhi	r7,r7,8
    6614:	8822977a 	slli	r17,r17,29
    6618:	388e703a 	and	r7,r7,r2
    661c:	0141ffc4 	movi	r5,2047
    6620:	003fd706 	br	6580 <__alt_mem_Flash_flash_data+0xf4006580>
    6624:	0141ffc4 	movi	r5,2047
    6628:	000f883a 	mov	r7,zero
    662c:	003fd406 	br	6580 <__alt_mem_Flash_flash_data+0xf4006580>
    6630:	000b883a 	mov	r5,zero
    6634:	000f883a 	mov	r7,zero
    6638:	003fd106 	br	6580 <__alt_mem_Flash_flash_data+0xf4006580>
    663c:	11fffd44 	addi	r7,r2,-11
    6640:	89ce983a 	sll	r7,r17,r7
    6644:	0023883a 	mov	r17,zero
    6648:	003fe606 	br	65e4 <__alt_mem_Flash_flash_data+0xf40065e4>

0000664c <__truncdfsf2>:
    664c:	2810d53a 	srli	r8,r5,20
    6650:	01c00434 	movhi	r7,16
    6654:	39ffffc4 	addi	r7,r7,-1
    6658:	29ce703a 	and	r7,r5,r7
    665c:	380e90fa 	slli	r7,r7,3
    6660:	4201ffcc 	andi	r8,r8,2047
    6664:	200cd77a 	srli	r6,r4,29
    6668:	42400044 	addi	r9,r8,1
    666c:	4a41ffcc 	andi	r9,r9,2047
    6670:	00800044 	movi	r2,1
    6674:	398cb03a 	or	r6,r7,r6
    6678:	280ad7fa 	srli	r5,r5,31
    667c:	200e90fa 	slli	r7,r4,3
    6680:	1240230e 	bge	r2,r9,6710 <__truncdfsf2+0xc4>
    6684:	40ff2004 	addi	r3,r8,-896
    6688:	00803f84 	movi	r2,254
    668c:	10c01516 	blt	r2,r3,66e4 <__truncdfsf2+0x98>
    6690:	00c02d0e 	bge	zero,r3,6748 <__truncdfsf2+0xfc>
    6694:	200891ba 	slli	r4,r4,6
    6698:	300c90fa 	slli	r6,r6,3
    669c:	380ed77a 	srli	r7,r7,29
    66a0:	2008c03a 	cmpne	r4,r4,zero
    66a4:	310cb03a 	or	r6,r6,r4
    66a8:	31ccb03a 	or	r6,r6,r7
    66ac:	308001cc 	andi	r2,r6,7
    66b0:	10000426 	beq	r2,zero,66c4 <__truncdfsf2+0x78>
    66b4:	310003cc 	andi	r4,r6,15
    66b8:	00800104 	movi	r2,4
    66bc:	20800126 	beq	r4,r2,66c4 <__truncdfsf2+0x78>
    66c0:	31800104 	addi	r6,r6,4
    66c4:	3081002c 	andhi	r2,r6,1024
    66c8:	10002326 	beq	r2,zero,6758 <__truncdfsf2+0x10c>
    66cc:	18c00044 	addi	r3,r3,1
    66d0:	00803fc4 	movi	r2,255
    66d4:	18800326 	beq	r3,r2,66e4 <__truncdfsf2+0x98>
    66d8:	300c91ba 	slli	r6,r6,6
    66dc:	300cd27a 	srli	r6,r6,9
    66e0:	00000206 	br	66ec <__truncdfsf2+0xa0>
    66e4:	00ffffc4 	movi	r3,-1
    66e8:	000d883a 	mov	r6,zero
    66ec:	18c03fcc 	andi	r3,r3,255
    66f0:	180895fa 	slli	r4,r3,23
    66f4:	00c02034 	movhi	r3,128
    66f8:	280a97fa 	slli	r5,r5,31
    66fc:	18ffffc4 	addi	r3,r3,-1
    6700:	30c6703a 	and	r3,r6,r3
    6704:	1906b03a 	or	r3,r3,r4
    6708:	1944b03a 	or	r2,r3,r5
    670c:	f800283a 	ret
    6710:	4000071e 	bne	r8,zero,6730 <__truncdfsf2+0xe4>
    6714:	31ccb03a 	or	r6,r6,r7
    6718:	30000d1e 	bne	r6,zero,6750 <__truncdfsf2+0x104>
    671c:	0007883a 	mov	r3,zero
    6720:	00802034 	movhi	r2,128
    6724:	10bfffc4 	addi	r2,r2,-1
    6728:	308c703a 	and	r6,r6,r2
    672c:	003fef06 	br	66ec <__alt_mem_Flash_flash_data+0xf40066ec>
    6730:	31c8b03a 	or	r4,r6,r7
    6734:	203feb26 	beq	r4,zero,66e4 <__alt_mem_Flash_flash_data+0xf40066e4>
    6738:	300c90fa 	slli	r6,r6,3
    673c:	00c03fc4 	movi	r3,255
    6740:	31808034 	orhi	r6,r6,512
    6744:	003fd906 	br	66ac <__alt_mem_Flash_flash_data+0xf40066ac>
    6748:	00bffa44 	movi	r2,-23
    674c:	1880090e 	bge	r3,r2,6774 <__truncdfsf2+0x128>
    6750:	01800144 	movi	r6,5
    6754:	0007883a 	mov	r3,zero
    6758:	00803fc4 	movi	r2,255
    675c:	300cd0fa 	srli	r6,r6,3
    6760:	18bfef1e 	bne	r3,r2,6720 <__alt_mem_Flash_flash_data+0xf4006720>
    6764:	303fdf26 	beq	r6,zero,66e4 <__alt_mem_Flash_flash_data+0xf40066e4>
    6768:	31801034 	orhi	r6,r6,64
    676c:	00ffffc4 	movi	r3,-1
    6770:	003feb06 	br	6720 <__alt_mem_Flash_flash_data+0xf4006720>
    6774:	0080e784 	movi	r2,926
    6778:	1205c83a 	sub	r2,r2,r8
    677c:	00c007c4 	movi	r3,31
    6780:	31802034 	orhi	r6,r6,128
    6784:	18800916 	blt	r3,r2,67ac <__truncdfsf2+0x160>
    6788:	423f2084 	addi	r8,r8,-894
    678c:	3a06983a 	sll	r3,r7,r8
    6790:	3210983a 	sll	r8,r6,r8
    6794:	388ed83a 	srl	r7,r7,r2
    6798:	180cc03a 	cmpne	r6,r3,zero
    679c:	418cb03a 	or	r6,r8,r6
    67a0:	31ccb03a 	or	r6,r6,r7
    67a4:	0007883a 	mov	r3,zero
    67a8:	003fc006 	br	66ac <__alt_mem_Flash_flash_data+0xf40066ac>
    67ac:	00c0df84 	movi	r3,894
    67b0:	1a07c83a 	sub	r3,r3,r8
    67b4:	01000804 	movi	r4,32
    67b8:	30c6d83a 	srl	r3,r6,r3
    67bc:	11000726 	beq	r2,r4,67dc <__truncdfsf2+0x190>
    67c0:	423f2884 	addi	r8,r8,-862
    67c4:	3210983a 	sll	r8,r6,r8
    67c8:	41ceb03a 	or	r7,r8,r7
    67cc:	380ec03a 	cmpne	r7,r7,zero
    67d0:	38ccb03a 	or	r6,r7,r3
    67d4:	0007883a 	mov	r3,zero
    67d8:	003fb406 	br	66ac <__alt_mem_Flash_flash_data+0xf40066ac>
    67dc:	0011883a 	mov	r8,zero
    67e0:	003ff906 	br	67c8 <__alt_mem_Flash_flash_data+0xf40067c8>

000067e4 <__clzsi2>:
    67e4:	00bfffd4 	movui	r2,65535
    67e8:	11000b36 	bltu	r2,r4,6818 <__clzsi2+0x34>
    67ec:	00803fc4 	movi	r2,255
    67f0:	1100122e 	bgeu	r2,r4,683c <__clzsi2+0x58>
    67f4:	00c00204 	movi	r3,8
    67f8:	01400604 	movi	r5,24
    67fc:	20c8d83a 	srl	r4,r4,r3
    6800:	008000b4 	movhi	r2,2
    6804:	1082d204 	addi	r2,r2,2888
    6808:	1109883a 	add	r4,r2,r4
    680c:	20800003 	ldbu	r2,0(r4)
    6810:	2885c83a 	sub	r2,r5,r2
    6814:	f800283a 	ret
    6818:	00804034 	movhi	r2,256
    681c:	10bfffc4 	addi	r2,r2,-1
    6820:	11000336 	bltu	r2,r4,6830 <__clzsi2+0x4c>
    6824:	00c00404 	movi	r3,16
    6828:	180b883a 	mov	r5,r3
    682c:	003ff306 	br	67fc <__alt_mem_Flash_flash_data+0xf40067fc>
    6830:	00c00604 	movi	r3,24
    6834:	01400204 	movi	r5,8
    6838:	003ff006 	br	67fc <__alt_mem_Flash_flash_data+0xf40067fc>
    683c:	0007883a 	mov	r3,zero
    6840:	01400804 	movi	r5,32
    6844:	003fed06 	br	67fc <__alt_mem_Flash_flash_data+0xf40067fc>

00006848 <malloc>:
    6848:	008000b4 	movhi	r2,2
    684c:	108be204 	addi	r2,r2,12168
    6850:	200b883a 	mov	r5,r4
    6854:	11000017 	ldw	r4,0(r2)
    6858:	00068701 	jmpi	6870 <_malloc_r>

0000685c <free>:
    685c:	008000b4 	movhi	r2,2
    6860:	108be204 	addi	r2,r2,12168
    6864:	200b883a 	mov	r5,r4
    6868:	11000017 	ldw	r4,0(r2)
    686c:	000d5b81 	jmpi	d5b8 <_free_r>

00006870 <_malloc_r>:
    6870:	defff504 	addi	sp,sp,-44
    6874:	dc800315 	stw	r18,12(sp)
    6878:	dfc00a15 	stw	ra,40(sp)
    687c:	df000915 	stw	fp,36(sp)
    6880:	ddc00815 	stw	r23,32(sp)
    6884:	dd800715 	stw	r22,28(sp)
    6888:	dd400615 	stw	r21,24(sp)
    688c:	dd000515 	stw	r20,20(sp)
    6890:	dcc00415 	stw	r19,16(sp)
    6894:	dc400215 	stw	r17,8(sp)
    6898:	dc000115 	stw	r16,4(sp)
    689c:	288002c4 	addi	r2,r5,11
    68a0:	00c00584 	movi	r3,22
    68a4:	2025883a 	mov	r18,r4
    68a8:	18802a2e 	bgeu	r3,r2,6954 <_malloc_r+0xe4>
    68ac:	047ffe04 	movi	r17,-8
    68b0:	1462703a 	and	r17,r2,r17
    68b4:	88009e16 	blt	r17,zero,6b30 <_malloc_r+0x2c0>
    68b8:	89409d36 	bltu	r17,r5,6b30 <_malloc_r+0x2c0>
    68bc:	0014c880 	call	14c88 <__malloc_lock>
    68c0:	00807dc4 	movi	r2,503
    68c4:	14402736 	bltu	r2,r17,6964 <_malloc_r+0xf4>
    68c8:	8806d0fa 	srli	r3,r17,3
    68cc:	04c000b4 	movhi	r19,2
    68d0:	9cc45004 	addi	r19,r19,4416
    68d4:	18c5883a 	add	r2,r3,r3
    68d8:	1085883a 	add	r2,r2,r2
    68dc:	1085883a 	add	r2,r2,r2
    68e0:	9885883a 	add	r2,r19,r2
    68e4:	14000317 	ldw	r16,12(r2)
    68e8:	80814a26 	beq	r16,r2,6e14 <_malloc_r+0x5a4>
    68ec:	80c00117 	ldw	r3,4(r16)
    68f0:	81000317 	ldw	r4,12(r16)
    68f4:	00bfff04 	movi	r2,-4
    68f8:	1884703a 	and	r2,r3,r2
    68fc:	81400217 	ldw	r5,8(r16)
    6900:	8085883a 	add	r2,r16,r2
    6904:	10c00117 	ldw	r3,4(r2)
    6908:	29000315 	stw	r4,12(r5)
    690c:	21400215 	stw	r5,8(r4)
    6910:	18c00054 	ori	r3,r3,1
    6914:	10c00115 	stw	r3,4(r2)
    6918:	9009883a 	mov	r4,r18
    691c:	0014da80 	call	14da8 <__malloc_unlock>
    6920:	80800204 	addi	r2,r16,8
    6924:	dfc00a17 	ldw	ra,40(sp)
    6928:	df000917 	ldw	fp,36(sp)
    692c:	ddc00817 	ldw	r23,32(sp)
    6930:	dd800717 	ldw	r22,28(sp)
    6934:	dd400617 	ldw	r21,24(sp)
    6938:	dd000517 	ldw	r20,20(sp)
    693c:	dcc00417 	ldw	r19,16(sp)
    6940:	dc800317 	ldw	r18,12(sp)
    6944:	dc400217 	ldw	r17,8(sp)
    6948:	dc000117 	ldw	r16,4(sp)
    694c:	dec00b04 	addi	sp,sp,44
    6950:	f800283a 	ret
    6954:	04400404 	movi	r17,16
    6958:	89407536 	bltu	r17,r5,6b30 <_malloc_r+0x2c0>
    695c:	0014c880 	call	14c88 <__malloc_lock>
    6960:	003fd906 	br	68c8 <__alt_mem_Flash_flash_data+0xf40068c8>
    6964:	8806d27a 	srli	r3,r17,9
    6968:	18007526 	beq	r3,zero,6b40 <_malloc_r+0x2d0>
    696c:	00800104 	movi	r2,4
    6970:	10c0ef36 	bltu	r2,r3,6d30 <_malloc_r+0x4c0>
    6974:	8806d1ba 	srli	r3,r17,6
    6978:	19c00e04 	addi	r7,r3,56
    697c:	39cb883a 	add	r5,r7,r7
    6980:	04c000b4 	movhi	r19,2
    6984:	294b883a 	add	r5,r5,r5
    6988:	9cc45004 	addi	r19,r19,4416
    698c:	294b883a 	add	r5,r5,r5
    6990:	994b883a 	add	r5,r19,r5
    6994:	2c000317 	ldw	r16,12(r5)
    6998:	2c000e26 	beq	r5,r16,69d4 <_malloc_r+0x164>
    699c:	80800117 	ldw	r2,4(r16)
    69a0:	01bfff04 	movi	r6,-4
    69a4:	010003c4 	movi	r4,15
    69a8:	1184703a 	and	r2,r2,r6
    69ac:	1447c83a 	sub	r3,r2,r17
    69b0:	20c00716 	blt	r4,r3,69d0 <_malloc_r+0x160>
    69b4:	1800650e 	bge	r3,zero,6b4c <_malloc_r+0x2dc>
    69b8:	84000317 	ldw	r16,12(r16)
    69bc:	2c000526 	beq	r5,r16,69d4 <_malloc_r+0x164>
    69c0:	80800117 	ldw	r2,4(r16)
    69c4:	1184703a 	and	r2,r2,r6
    69c8:	1447c83a 	sub	r3,r2,r17
    69cc:	20fff90e 	bge	r4,r3,69b4 <__alt_mem_Flash_flash_data+0xf40069b4>
    69d0:	39ffffc4 	addi	r7,r7,-1
    69d4:	38c00044 	addi	r3,r7,1
    69d8:	018000b4 	movhi	r6,2
    69dc:	9c000417 	ldw	r16,16(r19)
    69e0:	31845004 	addi	r6,r6,4416
    69e4:	32400204 	addi	r9,r6,8
    69e8:	82410326 	beq	r16,r9,6df8 <_malloc_r+0x588>
    69ec:	81000117 	ldw	r4,4(r16)
    69f0:	00bfff04 	movi	r2,-4
    69f4:	208e703a 	and	r7,r4,r2
    69f8:	3c45c83a 	sub	r2,r7,r17
    69fc:	010003c4 	movi	r4,15
    6a00:	2080ee16 	blt	r4,r2,6dbc <_malloc_r+0x54c>
    6a04:	32400515 	stw	r9,20(r6)
    6a08:	32400415 	stw	r9,16(r6)
    6a0c:	1000510e 	bge	r2,zero,6b54 <_malloc_r+0x2e4>
    6a10:	00807fc4 	movi	r2,511
    6a14:	11c0ce36 	bltu	r2,r7,6d50 <_malloc_r+0x4e0>
    6a18:	3808d0fa 	srli	r4,r7,3
    6a1c:	01c00044 	movi	r7,1
    6a20:	30800117 	ldw	r2,4(r6)
    6a24:	210b883a 	add	r5,r4,r4
    6a28:	294b883a 	add	r5,r5,r5
    6a2c:	2009d0ba 	srai	r4,r4,2
    6a30:	294b883a 	add	r5,r5,r5
    6a34:	298b883a 	add	r5,r5,r6
    6a38:	2a000217 	ldw	r8,8(r5)
    6a3c:	3908983a 	sll	r4,r7,r4
    6a40:	81400315 	stw	r5,12(r16)
    6a44:	82000215 	stw	r8,8(r16)
    6a48:	2088b03a 	or	r4,r4,r2
    6a4c:	2c000215 	stw	r16,8(r5)
    6a50:	31000115 	stw	r4,4(r6)
    6a54:	44000315 	stw	r16,12(r8)
    6a58:	1805d0ba 	srai	r2,r3,2
    6a5c:	01400044 	movi	r5,1
    6a60:	288a983a 	sll	r5,r5,r2
    6a64:	21404336 	bltu	r4,r5,6b74 <_malloc_r+0x304>
    6a68:	2144703a 	and	r2,r4,r5
    6a6c:	10000a1e 	bne	r2,zero,6a98 <_malloc_r+0x228>
    6a70:	00bfff04 	movi	r2,-4
    6a74:	294b883a 	add	r5,r5,r5
    6a78:	1886703a 	and	r3,r3,r2
    6a7c:	2144703a 	and	r2,r4,r5
    6a80:	18c00104 	addi	r3,r3,4
    6a84:	1000041e 	bne	r2,zero,6a98 <_malloc_r+0x228>
    6a88:	294b883a 	add	r5,r5,r5
    6a8c:	2144703a 	and	r2,r4,r5
    6a90:	18c00104 	addi	r3,r3,4
    6a94:	103ffc26 	beq	r2,zero,6a88 <__alt_mem_Flash_flash_data+0xf4006a88>
    6a98:	023fff04 	movi	r8,-4
    6a9c:	01c003c4 	movi	r7,15
    6aa0:	18c5883a 	add	r2,r3,r3
    6aa4:	1085883a 	add	r2,r2,r2
    6aa8:	1085883a 	add	r2,r2,r2
    6aac:	9895883a 	add	r10,r19,r2
    6ab0:	52c00304 	addi	r11,r10,12
    6ab4:	1819883a 	mov	r12,r3
    6ab8:	5c000017 	ldw	r16,0(r11)
    6abc:	59bffd04 	addi	r6,r11,-12
    6ac0:	8180041e 	bne	r16,r6,6ad4 <_malloc_r+0x264>
    6ac4:	0000ce06 	br	6e00 <_malloc_r+0x590>
    6ac8:	2000d70e 	bge	r4,zero,6e28 <_malloc_r+0x5b8>
    6acc:	84000317 	ldw	r16,12(r16)
    6ad0:	8180cb26 	beq	r16,r6,6e00 <_malloc_r+0x590>
    6ad4:	80800117 	ldw	r2,4(r16)
    6ad8:	1204703a 	and	r2,r2,r8
    6adc:	1449c83a 	sub	r4,r2,r17
    6ae0:	393ff90e 	bge	r7,r4,6ac8 <__alt_mem_Flash_flash_data+0xf4006ac8>
    6ae4:	80800317 	ldw	r2,12(r16)
    6ae8:	80c00217 	ldw	r3,8(r16)
    6aec:	89400054 	ori	r5,r17,1
    6af0:	81400115 	stw	r5,4(r16)
    6af4:	18800315 	stw	r2,12(r3)
    6af8:	10c00215 	stw	r3,8(r2)
    6afc:	8463883a 	add	r17,r16,r17
    6b00:	9c400515 	stw	r17,20(r19)
    6b04:	9c400415 	stw	r17,16(r19)
    6b08:	20800054 	ori	r2,r4,1
    6b0c:	88800115 	stw	r2,4(r17)
    6b10:	8a400315 	stw	r9,12(r17)
    6b14:	8a400215 	stw	r9,8(r17)
    6b18:	8923883a 	add	r17,r17,r4
    6b1c:	89000015 	stw	r4,0(r17)
    6b20:	9009883a 	mov	r4,r18
    6b24:	0014da80 	call	14da8 <__malloc_unlock>
    6b28:	80800204 	addi	r2,r16,8
    6b2c:	003f7d06 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6b30:	00800304 	movi	r2,12
    6b34:	90800015 	stw	r2,0(r18)
    6b38:	0005883a 	mov	r2,zero
    6b3c:	003f7906 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6b40:	01401f84 	movi	r5,126
    6b44:	01c00fc4 	movi	r7,63
    6b48:	003f8d06 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6b4c:	81000317 	ldw	r4,12(r16)
    6b50:	003f6a06 	br	68fc <__alt_mem_Flash_flash_data+0xf40068fc>
    6b54:	81c5883a 	add	r2,r16,r7
    6b58:	10c00117 	ldw	r3,4(r2)
    6b5c:	9009883a 	mov	r4,r18
    6b60:	18c00054 	ori	r3,r3,1
    6b64:	10c00115 	stw	r3,4(r2)
    6b68:	0014da80 	call	14da8 <__malloc_unlock>
    6b6c:	80800204 	addi	r2,r16,8
    6b70:	003f6c06 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6b74:	9c000217 	ldw	r16,8(r19)
    6b78:	00bfff04 	movi	r2,-4
    6b7c:	85800117 	ldw	r22,4(r16)
    6b80:	b0ac703a 	and	r22,r22,r2
    6b84:	b4400336 	bltu	r22,r17,6b94 <_malloc_r+0x324>
    6b88:	b445c83a 	sub	r2,r22,r17
    6b8c:	00c003c4 	movi	r3,15
    6b90:	18805d16 	blt	r3,r2,6d08 <_malloc_r+0x498>
    6b94:	05c000b4 	movhi	r23,2
    6b98:	008000b4 	movhi	r2,2
    6b9c:	bdcbdf04 	addi	r23,r23,12156
    6ba0:	1093d204 	addi	r2,r2,20296
    6ba4:	15400017 	ldw	r21,0(r2)
    6ba8:	b9000017 	ldw	r4,0(r23)
    6bac:	00ffffc4 	movi	r3,-1
    6bb0:	858d883a 	add	r6,r16,r22
    6bb4:	8d6b883a 	add	r21,r17,r21
    6bb8:	20c0e426 	beq	r4,r3,6f4c <_malloc_r+0x6dc>
    6bbc:	ad4403c4 	addi	r21,r21,4111
    6bc0:	00fc0004 	movi	r3,-4096
    6bc4:	a8ea703a 	and	r21,r21,r3
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	a80b883a 	mov	r5,r21
    6bd0:	d9800015 	stw	r6,0(sp)
    6bd4:	00072740 	call	7274 <_sbrk_r>
    6bd8:	00ffffc4 	movi	r3,-1
    6bdc:	1029883a 	mov	r20,r2
    6be0:	d9800017 	ldw	r6,0(sp)
    6be4:	10c0a426 	beq	r2,r3,6e78 <_malloc_r+0x608>
    6be8:	1180a236 	bltu	r2,r6,6e74 <_malloc_r+0x604>
    6bec:	070000b4 	movhi	fp,2
    6bf0:	e713f704 	addi	fp,fp,20444
    6bf4:	e0c00017 	ldw	r3,0(fp)
    6bf8:	a8c7883a 	add	r3,r21,r3
    6bfc:	e0c00015 	stw	r3,0(fp)
    6c00:	3500da26 	beq	r6,r20,6f6c <_malloc_r+0x6fc>
    6c04:	b9000017 	ldw	r4,0(r23)
    6c08:	00bfffc4 	movi	r2,-1
    6c0c:	2080e426 	beq	r4,r2,6fa0 <_malloc_r+0x730>
    6c10:	a185c83a 	sub	r2,r20,r6
    6c14:	1885883a 	add	r2,r3,r2
    6c18:	e0800015 	stw	r2,0(fp)
    6c1c:	a0c001cc 	andi	r3,r20,7
    6c20:	1800b526 	beq	r3,zero,6ef8 <_malloc_r+0x688>
    6c24:	a0e9c83a 	sub	r20,r20,r3
    6c28:	00840204 	movi	r2,4104
    6c2c:	a5000204 	addi	r20,r20,8
    6c30:	10c7c83a 	sub	r3,r2,r3
    6c34:	a545883a 	add	r2,r20,r21
    6c38:	1083ffcc 	andi	r2,r2,4095
    6c3c:	18abc83a 	sub	r21,r3,r2
    6c40:	9009883a 	mov	r4,r18
    6c44:	a80b883a 	mov	r5,r21
    6c48:	00072740 	call	7274 <_sbrk_r>
    6c4c:	00ffffc4 	movi	r3,-1
    6c50:	10c0d026 	beq	r2,r3,6f94 <_malloc_r+0x724>
    6c54:	1507c83a 	sub	r3,r2,r20
    6c58:	a8c7883a 	add	r3,r21,r3
    6c5c:	18c00054 	ori	r3,r3,1
    6c60:	e0800017 	ldw	r2,0(fp)
    6c64:	9d000215 	stw	r20,8(r19)
    6c68:	a0c00115 	stw	r3,4(r20)
    6c6c:	a887883a 	add	r3,r21,r2
    6c70:	e0c00015 	stw	r3,0(fp)
    6c74:	84c00e26 	beq	r16,r19,6cb0 <_malloc_r+0x440>
    6c78:	018003c4 	movi	r6,15
    6c7c:	3580a02e 	bgeu	r6,r22,6f00 <_malloc_r+0x690>
    6c80:	81400117 	ldw	r5,4(r16)
    6c84:	013ffe04 	movi	r4,-8
    6c88:	b0bffd04 	addi	r2,r22,-12
    6c8c:	1104703a 	and	r2,r2,r4
    6c90:	2900004c 	andi	r4,r5,1
    6c94:	1108b03a 	or	r4,r2,r4
    6c98:	81000115 	stw	r4,4(r16)
    6c9c:	01400144 	movi	r5,5
    6ca0:	8089883a 	add	r4,r16,r2
    6ca4:	21400115 	stw	r5,4(r4)
    6ca8:	21400215 	stw	r5,8(r4)
    6cac:	3080c036 	bltu	r6,r2,6fb0 <_malloc_r+0x740>
    6cb0:	008000b4 	movhi	r2,2
    6cb4:	1093d104 	addi	r2,r2,20292
    6cb8:	11000017 	ldw	r4,0(r2)
    6cbc:	20c0012e 	bgeu	r4,r3,6cc4 <_malloc_r+0x454>
    6cc0:	10c00015 	stw	r3,0(r2)
    6cc4:	008000b4 	movhi	r2,2
    6cc8:	1093d004 	addi	r2,r2,20288
    6ccc:	11000017 	ldw	r4,0(r2)
    6cd0:	9c000217 	ldw	r16,8(r19)
    6cd4:	20c0012e 	bgeu	r4,r3,6cdc <_malloc_r+0x46c>
    6cd8:	10c00015 	stw	r3,0(r2)
    6cdc:	80c00117 	ldw	r3,4(r16)
    6ce0:	00bfff04 	movi	r2,-4
    6ce4:	1886703a 	and	r3,r3,r2
    6ce8:	1c45c83a 	sub	r2,r3,r17
    6cec:	1c400236 	bltu	r3,r17,6cf8 <_malloc_r+0x488>
    6cf0:	00c003c4 	movi	r3,15
    6cf4:	18800416 	blt	r3,r2,6d08 <_malloc_r+0x498>
    6cf8:	9009883a 	mov	r4,r18
    6cfc:	0014da80 	call	14da8 <__malloc_unlock>
    6d00:	0005883a 	mov	r2,zero
    6d04:	003f0706 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6d08:	88c00054 	ori	r3,r17,1
    6d0c:	80c00115 	stw	r3,4(r16)
    6d10:	8463883a 	add	r17,r16,r17
    6d14:	10800054 	ori	r2,r2,1
    6d18:	9c400215 	stw	r17,8(r19)
    6d1c:	88800115 	stw	r2,4(r17)
    6d20:	9009883a 	mov	r4,r18
    6d24:	0014da80 	call	14da8 <__malloc_unlock>
    6d28:	80800204 	addi	r2,r16,8
    6d2c:	003efd06 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6d30:	00800504 	movi	r2,20
    6d34:	10c0482e 	bgeu	r2,r3,6e58 <_malloc_r+0x5e8>
    6d38:	00801504 	movi	r2,84
    6d3c:	10c06836 	bltu	r2,r3,6ee0 <_malloc_r+0x670>
    6d40:	8806d33a 	srli	r3,r17,12
    6d44:	19c01b84 	addi	r7,r3,110
    6d48:	39cb883a 	add	r5,r7,r7
    6d4c:	003f0c06 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6d50:	3804d27a 	srli	r2,r7,9
    6d54:	01000104 	movi	r4,4
    6d58:	2080422e 	bgeu	r4,r2,6e64 <_malloc_r+0x5f4>
    6d5c:	01000504 	movi	r4,20
    6d60:	20807c36 	bltu	r4,r2,6f54 <_malloc_r+0x6e4>
    6d64:	110016c4 	addi	r4,r2,91
    6d68:	210b883a 	add	r5,r4,r4
    6d6c:	294b883a 	add	r5,r5,r5
    6d70:	294b883a 	add	r5,r5,r5
    6d74:	994b883a 	add	r5,r19,r5
    6d78:	28800217 	ldw	r2,8(r5)
    6d7c:	020000b4 	movhi	r8,2
    6d80:	42045004 	addi	r8,r8,4416
    6d84:	11406326 	beq	r2,r5,6f14 <_malloc_r+0x6a4>
    6d88:	01bfff04 	movi	r6,-4
    6d8c:	11000117 	ldw	r4,4(r2)
    6d90:	2188703a 	and	r4,r4,r6
    6d94:	3900022e 	bgeu	r7,r4,6da0 <_malloc_r+0x530>
    6d98:	10800217 	ldw	r2,8(r2)
    6d9c:	28bffb1e 	bne	r5,r2,6d8c <__alt_mem_Flash_flash_data+0xf4006d8c>
    6da0:	11800317 	ldw	r6,12(r2)
    6da4:	99000117 	ldw	r4,4(r19)
    6da8:	81800315 	stw	r6,12(r16)
    6dac:	80800215 	stw	r2,8(r16)
    6db0:	34000215 	stw	r16,8(r6)
    6db4:	14000315 	stw	r16,12(r2)
    6db8:	003f2706 	br	6a58 <__alt_mem_Flash_flash_data+0xf4006a58>
    6dbc:	88c00054 	ori	r3,r17,1
    6dc0:	80c00115 	stw	r3,4(r16)
    6dc4:	8463883a 	add	r17,r16,r17
    6dc8:	34400515 	stw	r17,20(r6)
    6dcc:	34400415 	stw	r17,16(r6)
    6dd0:	10c00054 	ori	r3,r2,1
    6dd4:	8a400315 	stw	r9,12(r17)
    6dd8:	8a400215 	stw	r9,8(r17)
    6ddc:	88c00115 	stw	r3,4(r17)
    6de0:	88a3883a 	add	r17,r17,r2
    6de4:	88800015 	stw	r2,0(r17)
    6de8:	9009883a 	mov	r4,r18
    6dec:	0014da80 	call	14da8 <__malloc_unlock>
    6df0:	80800204 	addi	r2,r16,8
    6df4:	003ecb06 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6df8:	31000117 	ldw	r4,4(r6)
    6dfc:	003f1606 	br	6a58 <__alt_mem_Flash_flash_data+0xf4006a58>
    6e00:	63000044 	addi	r12,r12,1
    6e04:	608000cc 	andi	r2,r12,3
    6e08:	5ac00204 	addi	r11,r11,8
    6e0c:	103f2a1e 	bne	r2,zero,6ab8 <__alt_mem_Flash_flash_data+0xf4006ab8>
    6e10:	00002106 	br	6e98 <_malloc_r+0x628>
    6e14:	80800204 	addi	r2,r16,8
    6e18:	84000517 	ldw	r16,20(r16)
    6e1c:	143eb31e 	bne	r2,r16,68ec <__alt_mem_Flash_flash_data+0xf40068ec>
    6e20:	18c00084 	addi	r3,r3,2
    6e24:	003eec06 	br	69d8 <__alt_mem_Flash_flash_data+0xf40069d8>
    6e28:	8085883a 	add	r2,r16,r2
    6e2c:	10c00117 	ldw	r3,4(r2)
    6e30:	81000317 	ldw	r4,12(r16)
    6e34:	81400217 	ldw	r5,8(r16)
    6e38:	18c00054 	ori	r3,r3,1
    6e3c:	10c00115 	stw	r3,4(r2)
    6e40:	29000315 	stw	r4,12(r5)
    6e44:	21400215 	stw	r5,8(r4)
    6e48:	9009883a 	mov	r4,r18
    6e4c:	0014da80 	call	14da8 <__malloc_unlock>
    6e50:	80800204 	addi	r2,r16,8
    6e54:	003eb306 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6e58:	19c016c4 	addi	r7,r3,91
    6e5c:	39cb883a 	add	r5,r7,r7
    6e60:	003ec706 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6e64:	3804d1ba 	srli	r2,r7,6
    6e68:	11000e04 	addi	r4,r2,56
    6e6c:	210b883a 	add	r5,r4,r4
    6e70:	003fbe06 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    6e74:	84ff5d26 	beq	r16,r19,6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    6e78:	9c000217 	ldw	r16,8(r19)
    6e7c:	00bfff04 	movi	r2,-4
    6e80:	80c00117 	ldw	r3,4(r16)
    6e84:	1886703a 	and	r3,r3,r2
    6e88:	003f9706 	br	6ce8 <__alt_mem_Flash_flash_data+0xf4006ce8>
    6e8c:	52800017 	ldw	r10,0(r10)
    6e90:	18ffffc4 	addi	r3,r3,-1
    6e94:	50805c1e 	bne	r10,r2,7008 <_malloc_r+0x798>
    6e98:	190000cc 	andi	r4,r3,3
    6e9c:	50bffe04 	addi	r2,r10,-8
    6ea0:	203ffa1e 	bne	r4,zero,6e8c <__alt_mem_Flash_flash_data+0xf4006e8c>
    6ea4:	98800117 	ldw	r2,4(r19)
    6ea8:	0146303a 	nor	r3,zero,r5
    6eac:	1884703a 	and	r2,r3,r2
    6eb0:	98800115 	stw	r2,4(r19)
    6eb4:	294b883a 	add	r5,r5,r5
    6eb8:	117f2e36 	bltu	r2,r5,6b74 <__alt_mem_Flash_flash_data+0xf4006b74>
    6ebc:	283f2d26 	beq	r5,zero,6b74 <__alt_mem_Flash_flash_data+0xf4006b74>
    6ec0:	1146703a 	and	r3,r2,r5
    6ec4:	1800521e 	bne	r3,zero,7010 <_malloc_r+0x7a0>
    6ec8:	6007883a 	mov	r3,r12
    6ecc:	294b883a 	add	r5,r5,r5
    6ed0:	1148703a 	and	r4,r2,r5
    6ed4:	18c00104 	addi	r3,r3,4
    6ed8:	203ffc26 	beq	r4,zero,6ecc <__alt_mem_Flash_flash_data+0xf4006ecc>
    6edc:	003ef006 	br	6aa0 <__alt_mem_Flash_flash_data+0xf4006aa0>
    6ee0:	00805504 	movi	r2,340
    6ee4:	10c01336 	bltu	r2,r3,6f34 <_malloc_r+0x6c4>
    6ee8:	8806d3fa 	srli	r3,r17,15
    6eec:	19c01dc4 	addi	r7,r3,119
    6ef0:	39cb883a 	add	r5,r7,r7
    6ef4:	003ea206 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6ef8:	00c40004 	movi	r3,4096
    6efc:	003f4d06 	br	6c34 <__alt_mem_Flash_flash_data+0xf4006c34>
    6f00:	00800044 	movi	r2,1
    6f04:	a0800115 	stw	r2,4(r20)
    6f08:	a021883a 	mov	r16,r20
    6f0c:	0007883a 	mov	r3,zero
    6f10:	003f7506 	br	6ce8 <__alt_mem_Flash_flash_data+0xf4006ce8>
    6f14:	200bd0ba 	srai	r5,r4,2
    6f18:	01800044 	movi	r6,1
    6f1c:	41000117 	ldw	r4,4(r8)
    6f20:	314a983a 	sll	r5,r6,r5
    6f24:	100d883a 	mov	r6,r2
    6f28:	2908b03a 	or	r4,r5,r4
    6f2c:	41000115 	stw	r4,4(r8)
    6f30:	003f9d06 	br	6da8 <__alt_mem_Flash_flash_data+0xf4006da8>
    6f34:	00815504 	movi	r2,1364
    6f38:	10c01336 	bltu	r2,r3,6f88 <_malloc_r+0x718>
    6f3c:	8806d4ba 	srli	r3,r17,18
    6f40:	19c01f04 	addi	r7,r3,124
    6f44:	39cb883a 	add	r5,r7,r7
    6f48:	003e8d06 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6f4c:	ad400404 	addi	r21,r21,16
    6f50:	003f1d06 	br	6bc8 <__alt_mem_Flash_flash_data+0xf4006bc8>
    6f54:	01001504 	movi	r4,84
    6f58:	20801c36 	bltu	r4,r2,6fcc <_malloc_r+0x75c>
    6f5c:	3804d33a 	srli	r2,r7,12
    6f60:	11001b84 	addi	r4,r2,110
    6f64:	210b883a 	add	r5,r4,r4
    6f68:	003f8006 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    6f6c:	3083ffcc 	andi	r2,r6,4095
    6f70:	103f241e 	bne	r2,zero,6c04 <__alt_mem_Flash_flash_data+0xf4006c04>
    6f74:	99000217 	ldw	r4,8(r19)
    6f78:	ad85883a 	add	r2,r21,r22
    6f7c:	10800054 	ori	r2,r2,1
    6f80:	20800115 	stw	r2,4(r4)
    6f84:	003f4a06 	br	6cb0 <__alt_mem_Flash_flash_data+0xf4006cb0>
    6f88:	01403f04 	movi	r5,252
    6f8c:	01c01f84 	movi	r7,126
    6f90:	003e7b06 	br	6980 <__alt_mem_Flash_flash_data+0xf4006980>
    6f94:	00c00044 	movi	r3,1
    6f98:	002b883a 	mov	r21,zero
    6f9c:	003f3006 	br	6c60 <__alt_mem_Flash_flash_data+0xf4006c60>
    6fa0:	008000b4 	movhi	r2,2
    6fa4:	108bdf04 	addi	r2,r2,12156
    6fa8:	15000015 	stw	r20,0(r2)
    6fac:	003f1b06 	br	6c1c <__alt_mem_Flash_flash_data+0xf4006c1c>
    6fb0:	9009883a 	mov	r4,r18
    6fb4:	81400204 	addi	r5,r16,8
    6fb8:	000d5b80 	call	d5b8 <_free_r>
    6fbc:	008000b4 	movhi	r2,2
    6fc0:	1093f704 	addi	r2,r2,20444
    6fc4:	10c00017 	ldw	r3,0(r2)
    6fc8:	003f3906 	br	6cb0 <__alt_mem_Flash_flash_data+0xf4006cb0>
    6fcc:	01005504 	movi	r4,340
    6fd0:	20800436 	bltu	r4,r2,6fe4 <_malloc_r+0x774>
    6fd4:	3804d3fa 	srli	r2,r7,15
    6fd8:	11001dc4 	addi	r4,r2,119
    6fdc:	210b883a 	add	r5,r4,r4
    6fe0:	003f6206 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    6fe4:	01015504 	movi	r4,1364
    6fe8:	20800436 	bltu	r4,r2,6ffc <_malloc_r+0x78c>
    6fec:	3804d4ba 	srli	r2,r7,18
    6ff0:	11001f04 	addi	r4,r2,124
    6ff4:	210b883a 	add	r5,r4,r4
    6ff8:	003f5c06 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    6ffc:	01403f04 	movi	r5,252
    7000:	01001f84 	movi	r4,126
    7004:	003f5906 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    7008:	98800117 	ldw	r2,4(r19)
    700c:	003fa906 	br	6eb4 <__alt_mem_Flash_flash_data+0xf4006eb4>
    7010:	6007883a 	mov	r3,r12
    7014:	003ea206 	br	6aa0 <__alt_mem_Flash_flash_data+0xf4006aa0>

00007018 <memcpy>:
    7018:	deffff04 	addi	sp,sp,-4
    701c:	dc000015 	stw	r16,0(sp)
    7020:	00c003c4 	movi	r3,15
    7024:	2005883a 	mov	r2,r4
    7028:	1980432e 	bgeu	r3,r6,7138 <memcpy+0x120>
    702c:	2146b03a 	or	r3,r4,r5
    7030:	18c000cc 	andi	r3,r3,3
    7034:	1800421e 	bne	r3,zero,7140 <memcpy+0x128>
    7038:	343ffc04 	addi	r16,r6,-16
    703c:	8020d13a 	srli	r16,r16,4
    7040:	28c00104 	addi	r3,r5,4
    7044:	23400104 	addi	r13,r4,4
    7048:	801e913a 	slli	r15,r16,4
    704c:	2b000204 	addi	r12,r5,8
    7050:	22c00204 	addi	r11,r4,8
    7054:	7bc00504 	addi	r15,r15,20
    7058:	2a800304 	addi	r10,r5,12
    705c:	22400304 	addi	r9,r4,12
    7060:	2bdf883a 	add	r15,r5,r15
    7064:	2811883a 	mov	r8,r5
    7068:	200f883a 	mov	r7,r4
    706c:	41000017 	ldw	r4,0(r8)
    7070:	39c00404 	addi	r7,r7,16
    7074:	18c00404 	addi	r3,r3,16
    7078:	393ffc15 	stw	r4,-16(r7)
    707c:	1bbffc17 	ldw	r14,-16(r3)
    7080:	6b400404 	addi	r13,r13,16
    7084:	5ac00404 	addi	r11,r11,16
    7088:	6bbffc15 	stw	r14,-16(r13)
    708c:	63800017 	ldw	r14,0(r12)
    7090:	4a400404 	addi	r9,r9,16
    7094:	42000404 	addi	r8,r8,16
    7098:	5bbffc15 	stw	r14,-16(r11)
    709c:	53800017 	ldw	r14,0(r10)
    70a0:	63000404 	addi	r12,r12,16
    70a4:	52800404 	addi	r10,r10,16
    70a8:	4bbffc15 	stw	r14,-16(r9)
    70ac:	1bffef1e 	bne	r3,r15,706c <__alt_mem_Flash_flash_data+0xf400706c>
    70b0:	81c00044 	addi	r7,r16,1
    70b4:	380e913a 	slli	r7,r7,4
    70b8:	310003cc 	andi	r4,r6,15
    70bc:	02c000c4 	movi	r11,3
    70c0:	11c7883a 	add	r3,r2,r7
    70c4:	29cb883a 	add	r5,r5,r7
    70c8:	59001f2e 	bgeu	r11,r4,7148 <memcpy+0x130>
    70cc:	1813883a 	mov	r9,r3
    70d0:	2811883a 	mov	r8,r5
    70d4:	200f883a 	mov	r7,r4
    70d8:	42800017 	ldw	r10,0(r8)
    70dc:	4a400104 	addi	r9,r9,4
    70e0:	39ffff04 	addi	r7,r7,-4
    70e4:	4abfff15 	stw	r10,-4(r9)
    70e8:	42000104 	addi	r8,r8,4
    70ec:	59fffa36 	bltu	r11,r7,70d8 <__alt_mem_Flash_flash_data+0xf40070d8>
    70f0:	213fff04 	addi	r4,r4,-4
    70f4:	2008d0ba 	srli	r4,r4,2
    70f8:	318000cc 	andi	r6,r6,3
    70fc:	21000044 	addi	r4,r4,1
    7100:	2109883a 	add	r4,r4,r4
    7104:	2109883a 	add	r4,r4,r4
    7108:	1907883a 	add	r3,r3,r4
    710c:	290b883a 	add	r5,r5,r4
    7110:	30000626 	beq	r6,zero,712c <memcpy+0x114>
    7114:	198d883a 	add	r6,r3,r6
    7118:	29c00003 	ldbu	r7,0(r5)
    711c:	18c00044 	addi	r3,r3,1
    7120:	29400044 	addi	r5,r5,1
    7124:	19ffffc5 	stb	r7,-1(r3)
    7128:	19bffb1e 	bne	r3,r6,7118 <__alt_mem_Flash_flash_data+0xf4007118>
    712c:	dc000017 	ldw	r16,0(sp)
    7130:	dec00104 	addi	sp,sp,4
    7134:	f800283a 	ret
    7138:	2007883a 	mov	r3,r4
    713c:	003ff406 	br	7110 <__alt_mem_Flash_flash_data+0xf4007110>
    7140:	2007883a 	mov	r3,r4
    7144:	003ff306 	br	7114 <__alt_mem_Flash_flash_data+0xf4007114>
    7148:	200d883a 	mov	r6,r4
    714c:	003ff006 	br	7110 <__alt_mem_Flash_flash_data+0xf4007110>

00007150 <_printf_r>:
    7150:	defffd04 	addi	sp,sp,-12
    7154:	dfc00015 	stw	ra,0(sp)
    7158:	d9800115 	stw	r6,4(sp)
    715c:	d9c00215 	stw	r7,8(sp)
    7160:	280d883a 	mov	r6,r5
    7164:	21400217 	ldw	r5,8(r4)
    7168:	d9c00104 	addi	r7,sp,4
    716c:	00093b40 	call	93b4 <___vfprintf_internal_r>
    7170:	dfc00017 	ldw	ra,0(sp)
    7174:	dec00304 	addi	sp,sp,12
    7178:	f800283a 	ret

0000717c <printf>:
    717c:	defffc04 	addi	sp,sp,-16
    7180:	dfc00015 	stw	ra,0(sp)
    7184:	d9400115 	stw	r5,4(sp)
    7188:	d9800215 	stw	r6,8(sp)
    718c:	d9c00315 	stw	r7,12(sp)
    7190:	008000b4 	movhi	r2,2
    7194:	108be204 	addi	r2,r2,12168
    7198:	10800017 	ldw	r2,0(r2)
    719c:	200b883a 	mov	r5,r4
    71a0:	d9800104 	addi	r6,sp,4
    71a4:	11000217 	ldw	r4,8(r2)
    71a8:	000b3040 	call	b304 <__vfprintf_internal>
    71ac:	dfc00017 	ldw	ra,0(sp)
    71b0:	dec00404 	addi	sp,sp,16
    71b4:	f800283a 	ret

000071b8 <_puts_r>:
    71b8:	defff604 	addi	sp,sp,-40
    71bc:	dc000715 	stw	r16,28(sp)
    71c0:	2021883a 	mov	r16,r4
    71c4:	2809883a 	mov	r4,r5
    71c8:	dc400815 	stw	r17,32(sp)
    71cc:	dfc00915 	stw	ra,36(sp)
    71d0:	2823883a 	mov	r17,r5
    71d4:	000738c0 	call	738c <strlen>
    71d8:	81400217 	ldw	r5,8(r16)
    71dc:	11000044 	addi	r4,r2,1
    71e0:	d8800115 	stw	r2,4(sp)
    71e4:	008000b4 	movhi	r2,2
    71e8:	2980030b 	ldhu	r6,12(r5)
    71ec:	10831204 	addi	r2,r2,3144
    71f0:	d8800215 	stw	r2,8(sp)
    71f4:	00800044 	movi	r2,1
    71f8:	d8800315 	stw	r2,12(sp)
    71fc:	00800084 	movi	r2,2
    7200:	d8800515 	stw	r2,20(sp)
    7204:	dc400015 	stw	r17,0(sp)
    7208:	d9000615 	stw	r4,24(sp)
    720c:	dec00415 	stw	sp,16(sp)
    7210:	3088000c 	andi	r2,r6,8192
    7214:	1000061e 	bne	r2,zero,7230 <_puts_r+0x78>
    7218:	29001917 	ldw	r4,100(r5)
    721c:	00b7ffc4 	movi	r2,-8193
    7220:	31880014 	ori	r6,r6,8192
    7224:	2084703a 	and	r2,r4,r2
    7228:	2980030d 	sth	r6,12(r5)
    722c:	28801915 	stw	r2,100(r5)
    7230:	8009883a 	mov	r4,r16
    7234:	d9800404 	addi	r6,sp,16
    7238:	000d8a80 	call	d8a8 <__sfvwrite_r>
    723c:	1000061e 	bne	r2,zero,7258 <_puts_r+0xa0>
    7240:	00800284 	movi	r2,10
    7244:	dfc00917 	ldw	ra,36(sp)
    7248:	dc400817 	ldw	r17,32(sp)
    724c:	dc000717 	ldw	r16,28(sp)
    7250:	dec00a04 	addi	sp,sp,40
    7254:	f800283a 	ret
    7258:	00bfffc4 	movi	r2,-1
    725c:	003ff906 	br	7244 <__alt_mem_Flash_flash_data+0xf4007244>

00007260 <puts>:
    7260:	008000b4 	movhi	r2,2
    7264:	108be204 	addi	r2,r2,12168
    7268:	200b883a 	mov	r5,r4
    726c:	11000017 	ldw	r4,0(r2)
    7270:	00071b81 	jmpi	71b8 <_puts_r>

00007274 <_sbrk_r>:
    7274:	defffd04 	addi	sp,sp,-12
    7278:	dc000015 	stw	r16,0(sp)
    727c:	040000b4 	movhi	r16,2
    7280:	dc400115 	stw	r17,4(sp)
    7284:	8413d304 	addi	r16,r16,20300
    7288:	2023883a 	mov	r17,r4
    728c:	2809883a 	mov	r4,r5
    7290:	dfc00215 	stw	ra,8(sp)
    7294:	80000015 	stw	zero,0(r16)
    7298:	00149740 	call	14974 <sbrk>
    729c:	00ffffc4 	movi	r3,-1
    72a0:	10c00526 	beq	r2,r3,72b8 <_sbrk_r+0x44>
    72a4:	dfc00217 	ldw	ra,8(sp)
    72a8:	dc400117 	ldw	r17,4(sp)
    72ac:	dc000017 	ldw	r16,0(sp)
    72b0:	dec00304 	addi	sp,sp,12
    72b4:	f800283a 	ret
    72b8:	80c00017 	ldw	r3,0(r16)
    72bc:	183ff926 	beq	r3,zero,72a4 <__alt_mem_Flash_flash_data+0xf40072a4>
    72c0:	88c00015 	stw	r3,0(r17)
    72c4:	003ff706 	br	72a4 <__alt_mem_Flash_flash_data+0xf40072a4>

000072c8 <_sprintf_r>:
    72c8:	deffe404 	addi	sp,sp,-112
    72cc:	2807883a 	mov	r3,r5
    72d0:	dfc01a15 	stw	ra,104(sp)
    72d4:	d9c01b15 	stw	r7,108(sp)
    72d8:	00a00034 	movhi	r2,32768
    72dc:	10bfffc4 	addi	r2,r2,-1
    72e0:	02008204 	movi	r8,520
    72e4:	d8800215 	stw	r2,8(sp)
    72e8:	d8800515 	stw	r2,20(sp)
    72ec:	d80b883a 	mov	r5,sp
    72f0:	d9c01b04 	addi	r7,sp,108
    72f4:	00bfffc4 	movi	r2,-1
    72f8:	d8c00015 	stw	r3,0(sp)
    72fc:	d8c00415 	stw	r3,16(sp)
    7300:	da00030d 	sth	r8,12(sp)
    7304:	d880038d 	sth	r2,14(sp)
    7308:	00074240 	call	7424 <___svfprintf_internal_r>
    730c:	d8c00017 	ldw	r3,0(sp)
    7310:	18000005 	stb	zero,0(r3)
    7314:	dfc01a17 	ldw	ra,104(sp)
    7318:	dec01c04 	addi	sp,sp,112
    731c:	f800283a 	ret

00007320 <sprintf>:
    7320:	deffe304 	addi	sp,sp,-116
    7324:	2007883a 	mov	r3,r4
    7328:	dfc01a15 	stw	ra,104(sp)
    732c:	d9801b15 	stw	r6,108(sp)
    7330:	d9c01c15 	stw	r7,112(sp)
    7334:	010000b4 	movhi	r4,2
    7338:	210be204 	addi	r4,r4,12168
    733c:	21000017 	ldw	r4,0(r4)
    7340:	00a00034 	movhi	r2,32768
    7344:	10bfffc4 	addi	r2,r2,-1
    7348:	280d883a 	mov	r6,r5
    734c:	02008204 	movi	r8,520
    7350:	d8800215 	stw	r2,8(sp)
    7354:	d8800515 	stw	r2,20(sp)
    7358:	d80b883a 	mov	r5,sp
    735c:	d9c01b04 	addi	r7,sp,108
    7360:	00bfffc4 	movi	r2,-1
    7364:	d8c00015 	stw	r3,0(sp)
    7368:	d8c00415 	stw	r3,16(sp)
    736c:	da00030d 	sth	r8,12(sp)
    7370:	d880038d 	sth	r2,14(sp)
    7374:	00074240 	call	7424 <___svfprintf_internal_r>
    7378:	d8c00017 	ldw	r3,0(sp)
    737c:	18000005 	stb	zero,0(r3)
    7380:	dfc01a17 	ldw	ra,104(sp)
    7384:	dec01d04 	addi	sp,sp,116
    7388:	f800283a 	ret

0000738c <strlen>:
    738c:	208000cc 	andi	r2,r4,3
    7390:	10002026 	beq	r2,zero,7414 <strlen+0x88>
    7394:	20800007 	ldb	r2,0(r4)
    7398:	10002026 	beq	r2,zero,741c <strlen+0x90>
    739c:	2005883a 	mov	r2,r4
    73a0:	00000206 	br	73ac <strlen+0x20>
    73a4:	10c00007 	ldb	r3,0(r2)
    73a8:	18001826 	beq	r3,zero,740c <strlen+0x80>
    73ac:	10800044 	addi	r2,r2,1
    73b0:	10c000cc 	andi	r3,r2,3
    73b4:	183ffb1e 	bne	r3,zero,73a4 <__alt_mem_Flash_flash_data+0xf40073a4>
    73b8:	10c00017 	ldw	r3,0(r2)
    73bc:	01ffbff4 	movhi	r7,65279
    73c0:	39ffbfc4 	addi	r7,r7,-257
    73c4:	00ca303a 	nor	r5,zero,r3
    73c8:	01a02074 	movhi	r6,32897
    73cc:	19c7883a 	add	r3,r3,r7
    73d0:	31a02004 	addi	r6,r6,-32640
    73d4:	1946703a 	and	r3,r3,r5
    73d8:	1986703a 	and	r3,r3,r6
    73dc:	1800091e 	bne	r3,zero,7404 <strlen+0x78>
    73e0:	10800104 	addi	r2,r2,4
    73e4:	10c00017 	ldw	r3,0(r2)
    73e8:	19cb883a 	add	r5,r3,r7
    73ec:	00c6303a 	nor	r3,zero,r3
    73f0:	28c6703a 	and	r3,r5,r3
    73f4:	1986703a 	and	r3,r3,r6
    73f8:	183ff926 	beq	r3,zero,73e0 <__alt_mem_Flash_flash_data+0xf40073e0>
    73fc:	00000106 	br	7404 <strlen+0x78>
    7400:	10800044 	addi	r2,r2,1
    7404:	10c00007 	ldb	r3,0(r2)
    7408:	183ffd1e 	bne	r3,zero,7400 <__alt_mem_Flash_flash_data+0xf4007400>
    740c:	1105c83a 	sub	r2,r2,r4
    7410:	f800283a 	ret
    7414:	2005883a 	mov	r2,r4
    7418:	003fe706 	br	73b8 <__alt_mem_Flash_flash_data+0xf40073b8>
    741c:	0005883a 	mov	r2,zero
    7420:	f800283a 	ret

00007424 <___svfprintf_internal_r>:
    7424:	deffb504 	addi	sp,sp,-300
    7428:	dfc04a15 	stw	ra,296(sp)
    742c:	ddc04815 	stw	r23,288(sp)
    7430:	d9002f15 	stw	r4,188(sp)
    7434:	282f883a 	mov	r23,r5
    7438:	d9802915 	stw	r6,164(sp)
    743c:	d9c02d15 	stw	r7,180(sp)
    7440:	df004915 	stw	fp,292(sp)
    7444:	dd804715 	stw	r22,284(sp)
    7448:	dd404615 	stw	r21,280(sp)
    744c:	dd004515 	stw	r20,276(sp)
    7450:	dcc04415 	stw	r19,272(sp)
    7454:	dc804315 	stw	r18,268(sp)
    7458:	dc404215 	stw	r17,264(sp)
    745c:	dc004115 	stw	r16,260(sp)
    7460:	000df9c0 	call	df9c <_localeconv_r>
    7464:	10800017 	ldw	r2,0(r2)
    7468:	1009883a 	mov	r4,r2
    746c:	d8803515 	stw	r2,212(sp)
    7470:	000738c0 	call	738c <strlen>
    7474:	d8803915 	stw	r2,228(sp)
    7478:	b880030b 	ldhu	r2,12(r23)
    747c:	1080200c 	andi	r2,r2,128
    7480:	10000226 	beq	r2,zero,748c <___svfprintf_internal_r+0x68>
    7484:	b8800417 	ldw	r2,16(r23)
    7488:	10065f26 	beq	r2,zero,8e08 <___svfprintf_internal_r+0x19e4>
    748c:	db001dc4 	addi	r12,sp,119
    7490:	dd801e04 	addi	r22,sp,120
    7494:	d8800404 	addi	r2,sp,16
    7498:	050000b4 	movhi	r20,2
    749c:	b317c83a 	sub	r11,r22,r12
    74a0:	a5032384 	addi	r20,r20,3214
    74a4:	db002815 	stw	r12,160(sp)
    74a8:	d8801e15 	stw	r2,120(sp)
    74ac:	d8002015 	stw	zero,128(sp)
    74b0:	d8001f15 	stw	zero,124(sp)
    74b4:	d8003315 	stw	zero,204(sp)
    74b8:	d8003715 	stw	zero,220(sp)
    74bc:	d8003815 	stw	zero,224(sp)
    74c0:	1011883a 	mov	r8,r2
    74c4:	d8003b15 	stw	zero,236(sp)
    74c8:	d8003a15 	stw	zero,232(sp)
    74cc:	d8003015 	stw	zero,192(sp)
    74d0:	dac03d15 	stw	r11,244(sp)
    74d4:	db002917 	ldw	r12,164(sp)
    74d8:	60800007 	ldb	r2,0(r12)
    74dc:	1000ab26 	beq	r2,zero,778c <___svfprintf_internal_r+0x368>
    74e0:	00c00944 	movi	r3,37
    74e4:	10c0a926 	beq	r2,r3,778c <___svfprintf_internal_r+0x368>
    74e8:	6021883a 	mov	r16,r12
    74ec:	00000106 	br	74f4 <___svfprintf_internal_r+0xd0>
    74f0:	10c08426 	beq	r2,r3,7704 <___svfprintf_internal_r+0x2e0>
    74f4:	84000044 	addi	r16,r16,1
    74f8:	80800007 	ldb	r2,0(r16)
    74fc:	103ffc1e 	bne	r2,zero,74f0 <__alt_mem_Flash_flash_data+0xf40074f0>
    7500:	dac02917 	ldw	r11,164(sp)
    7504:	82e3c83a 	sub	r17,r16,r11
    7508:	88000f26 	beq	r17,zero,7548 <___svfprintf_internal_r+0x124>
    750c:	d8c02017 	ldw	r3,128(sp)
    7510:	d8801f17 	ldw	r2,124(sp)
    7514:	dac02917 	ldw	r11,164(sp)
    7518:	1c47883a 	add	r3,r3,r17
    751c:	10800044 	addi	r2,r2,1
    7520:	d8c02015 	stw	r3,128(sp)
    7524:	42c00015 	stw	r11,0(r8)
    7528:	44400115 	stw	r17,4(r8)
    752c:	d8801f15 	stw	r2,124(sp)
    7530:	00c001c4 	movi	r3,7
    7534:	18807616 	blt	r3,r2,7710 <___svfprintf_internal_r+0x2ec>
    7538:	42000204 	addi	r8,r8,8
    753c:	db003017 	ldw	r12,192(sp)
    7540:	6459883a 	add	r12,r12,r17
    7544:	db003015 	stw	r12,192(sp)
    7548:	80800007 	ldb	r2,0(r16)
    754c:	10007726 	beq	r2,zero,772c <___svfprintf_internal_r+0x308>
    7550:	80800044 	addi	r2,r16,1
    7554:	84000047 	ldb	r16,1(r16)
    7558:	d8002785 	stb	zero,158(sp)
    755c:	000d883a 	mov	r6,zero
    7560:	027fffc4 	movi	r9,-1
    7564:	d8002e15 	stw	zero,184(sp)
    7568:	0023883a 	mov	r17,zero
    756c:	01001604 	movi	r4,88
    7570:	01400244 	movi	r5,9
    7574:	02800a84 	movi	r10,42
    7578:	01c01b04 	movi	r7,108
    757c:	10c00044 	addi	r3,r2,1
    7580:	80bff804 	addi	r2,r16,-32
    7584:	2082e636 	bltu	r4,r2,8120 <___svfprintf_internal_r+0xcfc>
    7588:	100490ba 	slli	r2,r2,2
    758c:	02c00034 	movhi	r11,0
    7590:	5add6804 	addi	r11,r11,30112
    7594:	12c5883a 	add	r2,r2,r11
    7598:	10800017 	ldw	r2,0(r2)
    759c:	1000683a 	jmp	r2
    75a0:	00007f00 	call	7f0 <drawLine+0x358>
    75a4:	00008120 	cmpeqi	zero,zero,516
    75a8:	00008120 	cmpeqi	zero,zero,516
    75ac:	00007f20 	cmpeqi	zero,zero,508
    75b0:	00008120 	cmpeqi	zero,zero,516
    75b4:	00008120 	cmpeqi	zero,zero,516
    75b8:	00008120 	cmpeqi	zero,zero,516
    75bc:	00008120 	cmpeqi	zero,zero,516
    75c0:	00008120 	cmpeqi	zero,zero,516
    75c4:	00008120 	cmpeqi	zero,zero,516
    75c8:	00007f30 	cmpltui	zero,zero,508
    75cc:	00007f5c 	xori	zero,zero,509
    75d0:	00008120 	cmpeqi	zero,zero,516
    75d4:	00007794 	movui	zero,478
    75d8:	000077a4 	muli	zero,zero,478
    75dc:	00008120 	cmpeqi	zero,zero,516
    75e0:	000077e4 	muli	zero,zero,479
    75e4:	00007dc4 	movi	zero,503
    75e8:	00007dc4 	movi	zero,503
    75ec:	00007dc4 	movi	zero,503
    75f0:	00007dc4 	movi	zero,503
    75f4:	00007dc4 	movi	zero,503
    75f8:	00007dc4 	movi	zero,503
    75fc:	00007dc4 	movi	zero,503
    7600:	00007dc4 	movi	zero,503
    7604:	00007dc4 	movi	zero,503
    7608:	00008120 	cmpeqi	zero,zero,516
    760c:	00008120 	cmpeqi	zero,zero,516
    7610:	00008120 	cmpeqi	zero,zero,516
    7614:	00008120 	cmpeqi	zero,zero,516
    7618:	00008120 	cmpeqi	zero,zero,516
    761c:	00008120 	cmpeqi	zero,zero,516
    7620:	00008120 	cmpeqi	zero,zero,516
    7624:	00008120 	cmpeqi	zero,zero,516
    7628:	00008120 	cmpeqi	zero,zero,516
    762c:	00008120 	cmpeqi	zero,zero,516
    7630:	000077f4 	movhi	zero,479
    7634:	00007c74 	movhi	zero,497
    7638:	00008120 	cmpeqi	zero,zero,516
    763c:	00007c74 	movhi	zero,497
    7640:	00008120 	cmpeqi	zero,zero,516
    7644:	00008120 	cmpeqi	zero,zero,516
    7648:	00008120 	cmpeqi	zero,zero,516
    764c:	00008120 	cmpeqi	zero,zero,516
    7650:	00007d18 	cmpnei	zero,zero,500
    7654:	00008120 	cmpeqi	zero,zero,516
    7658:	00008120 	cmpeqi	zero,zero,516
    765c:	000080b4 	movhi	zero,514
    7660:	00008120 	cmpeqi	zero,zero,516
    7664:	00008120 	cmpeqi	zero,zero,516
    7668:	00008120 	cmpeqi	zero,zero,516
    766c:	00008120 	cmpeqi	zero,zero,516
    7670:	00008120 	cmpeqi	zero,zero,516
    7674:	00007d28 	cmpgeui	zero,zero,500
    7678:	00008120 	cmpeqi	zero,zero,516
    767c:	00008120 	cmpeqi	zero,zero,516
    7680:	00007d68 	cmpgeui	zero,zero,501
    7684:	00008120 	cmpeqi	zero,zero,516
    7688:	00008120 	cmpeqi	zero,zero,516
    768c:	00008120 	cmpeqi	zero,zero,516
    7690:	00008120 	cmpeqi	zero,zero,516
    7694:	00008120 	cmpeqi	zero,zero,516
    7698:	00008120 	cmpeqi	zero,zero,516
    769c:	00008120 	cmpeqi	zero,zero,516
    76a0:	00008120 	cmpeqi	zero,zero,516
    76a4:	00008120 	cmpeqi	zero,zero,516
    76a8:	00008120 	cmpeqi	zero,zero,516
    76ac:	0000800c 	andi	zero,zero,512
    76b0:	0000804c 	andi	zero,zero,513
    76b4:	00007c74 	movhi	zero,497
    76b8:	00007c74 	movhi	zero,497
    76bc:	00007c74 	movhi	zero,497
    76c0:	00007f6c 	andhi	zero,zero,509
    76c4:	0000804c 	andi	zero,zero,513
    76c8:	00008120 	cmpeqi	zero,zero,516
    76cc:	00008120 	cmpeqi	zero,zero,516
    76d0:	00007f7c 	xorhi	zero,zero,509
    76d4:	00008120 	cmpeqi	zero,zero,516
    76d8:	00007f90 	cmplti	zero,zero,510
    76dc:	000080e4 	muli	zero,zero,515
    76e0:	00007fc4 	movi	zero,511
    76e4:	00007df8 	rdprs	zero,zero,503
    76e8:	00008120 	cmpeqi	zero,zero,516
    76ec:	00007e08 	cmpgei	zero,zero,504
    76f0:	00008120 	cmpeqi	zero,zero,516
    76f4:	00007e80 	call	7e8 <drawLine+0x350>
    76f8:	00008120 	cmpeqi	zero,zero,516
    76fc:	00008120 	cmpeqi	zero,zero,516
    7700:	00007ec0 	call	7ec <drawLine+0x354>
    7704:	db002917 	ldw	r12,164(sp)
    7708:	8323c83a 	sub	r17,r16,r12
    770c:	003f7e06 	br	7508 <__alt_mem_Flash_flash_data+0xf4007508>
    7710:	d9002f17 	ldw	r4,188(sp)
    7714:	b80b883a 	mov	r5,r23
    7718:	b00d883a 	mov	r6,r22
    771c:	000fc4c0 	call	fc4c <__ssprint_r>
    7720:	1000081e 	bne	r2,zero,7744 <___svfprintf_internal_r+0x320>
    7724:	da000404 	addi	r8,sp,16
    7728:	003f8406 	br	753c <__alt_mem_Flash_flash_data+0xf400753c>
    772c:	d8802017 	ldw	r2,128(sp)
    7730:	10000426 	beq	r2,zero,7744 <___svfprintf_internal_r+0x320>
    7734:	d9002f17 	ldw	r4,188(sp)
    7738:	b80b883a 	mov	r5,r23
    773c:	d9801e04 	addi	r6,sp,120
    7740:	000fc4c0 	call	fc4c <__ssprint_r>
    7744:	b880030b 	ldhu	r2,12(r23)
    7748:	1080100c 	andi	r2,r2,64
    774c:	10000d1e 	bne	r2,zero,7784 <___svfprintf_internal_r+0x360>
    7750:	d8803017 	ldw	r2,192(sp)
    7754:	dfc04a17 	ldw	ra,296(sp)
    7758:	df004917 	ldw	fp,292(sp)
    775c:	ddc04817 	ldw	r23,288(sp)
    7760:	dd804717 	ldw	r22,284(sp)
    7764:	dd404617 	ldw	r21,280(sp)
    7768:	dd004517 	ldw	r20,276(sp)
    776c:	dcc04417 	ldw	r19,272(sp)
    7770:	dc804317 	ldw	r18,268(sp)
    7774:	dc404217 	ldw	r17,264(sp)
    7778:	dc004117 	ldw	r16,260(sp)
    777c:	dec04b04 	addi	sp,sp,300
    7780:	f800283a 	ret
    7784:	00bfffc4 	movi	r2,-1
    7788:	003ff206 	br	7754 <__alt_mem_Flash_flash_data+0xf4007754>
    778c:	dc002917 	ldw	r16,164(sp)
    7790:	003f6d06 	br	7548 <__alt_mem_Flash_flash_data+0xf4007548>
    7794:	1805883a 	mov	r2,r3
    7798:	8c400114 	ori	r17,r17,4
    779c:	1c000007 	ldb	r16,0(r3)
    77a0:	003f7606 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    77a4:	1c000007 	ldb	r16,0(r3)
    77a8:	18800044 	addi	r2,r3,1
    77ac:	8286e726 	beq	r16,r10,934c <___svfprintf_internal_r+0x1f28>
    77b0:	82fff404 	addi	r11,r16,-48
    77b4:	1007883a 	mov	r3,r2
    77b8:	0013883a 	mov	r9,zero
    77bc:	2aff7036 	bltu	r5,r11,7580 <__alt_mem_Flash_flash_data+0xf4007580>
    77c0:	1c000007 	ldb	r16,0(r3)
    77c4:	4a4002a4 	muli	r9,r9,10
    77c8:	18c00044 	addi	r3,r3,1
    77cc:	5a53883a 	add	r9,r11,r9
    77d0:	82fff404 	addi	r11,r16,-48
    77d4:	2afffa2e 	bgeu	r5,r11,77c0 <__alt_mem_Flash_flash_data+0xf40077c0>
    77d8:	483f690e 	bge	r9,zero,7580 <__alt_mem_Flash_flash_data+0xf4007580>
    77dc:	027fffc4 	movi	r9,-1
    77e0:	003f6706 	br	7580 <__alt_mem_Flash_flash_data+0xf4007580>
    77e4:	8c402014 	ori	r17,r17,128
    77e8:	1805883a 	mov	r2,r3
    77ec:	1c000007 	ldb	r16,0(r3)
    77f0:	003f6206 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    77f4:	8c400414 	ori	r17,r17,16
    77f8:	d8c02915 	stw	r3,164(sp)
    77fc:	d9802785 	stb	r6,158(sp)
    7800:	8880080c 	andi	r2,r17,32
    7804:	d8c02d17 	ldw	r3,180(sp)
    7808:	10021526 	beq	r2,zero,8060 <___svfprintf_internal_r+0xc3c>
    780c:	db002d17 	ldw	r12,180(sp)
    7810:	18800117 	ldw	r2,4(r3)
    7814:	1cc00017 	ldw	r19,0(r3)
    7818:	63000204 	addi	r12,r12,8
    781c:	db002d15 	stw	r12,180(sp)
    7820:	1039883a 	mov	fp,r2
    7824:	10021916 	blt	r2,zero,808c <___svfprintf_internal_r+0xc68>
    7828:	dd402783 	ldbu	r21,158(sp)
    782c:	da403215 	stw	r9,200(sp)
    7830:	00800044 	movi	r2,1
    7834:	9f06b03a 	or	r3,r19,fp
    7838:	48000216 	blt	r9,zero,7844 <___svfprintf_internal_r+0x420>
    783c:	013fdfc4 	movi	r4,-129
    7840:	8922703a 	and	r17,r17,r4
    7844:	1802461e 	bne	r3,zero,8160 <___svfprintf_internal_r+0xd3c>
    7848:	48035426 	beq	r9,zero,859c <___svfprintf_internal_r+0x1178>
    784c:	10803fcc 	andi	r2,r2,255
    7850:	00c00044 	movi	r3,1
    7854:	10c26726 	beq	r2,r3,81f4 <___svfprintf_internal_r+0xdd0>
    7858:	00c00084 	movi	r3,2
    785c:	10c2ea26 	beq	r2,r3,8408 <___svfprintf_internal_r+0xfe4>
    7860:	b007883a 	mov	r3,r22
    7864:	9808d0fa 	srli	r4,r19,3
    7868:	e00a977a 	slli	r5,fp,29
    786c:	e038d0fa 	srli	fp,fp,3
    7870:	9cc001cc 	andi	r19,r19,7
    7874:	98800c04 	addi	r2,r19,48
    7878:	18ffffc4 	addi	r3,r3,-1
    787c:	2926b03a 	or	r19,r5,r4
    7880:	18800005 	stb	r2,0(r3)
    7884:	9f08b03a 	or	r4,r19,fp
    7888:	203ff61e 	bne	r4,zero,7864 <__alt_mem_Flash_flash_data+0xf4007864>
    788c:	8900004c 	andi	r4,r17,1
    7890:	d8c03115 	stw	r3,196(sp)
    7894:	2002ea26 	beq	r4,zero,8440 <___svfprintf_internal_r+0x101c>
    7898:	10803fcc 	andi	r2,r2,255
    789c:	1080201c 	xori	r2,r2,128
    78a0:	10bfe004 	addi	r2,r2,-128
    78a4:	01000c04 	movi	r4,48
    78a8:	11057526 	beq	r2,r4,8e80 <___svfprintf_internal_r+0x1a5c>
    78ac:	dac03117 	ldw	r11,196(sp)
    78b0:	193fffc5 	stb	r4,-1(r3)
    78b4:	5affffc4 	addi	r11,r11,-1
    78b8:	dac03115 	stw	r11,196(sp)
    78bc:	b2e5c83a 	sub	r18,r22,r11
    78c0:	9005883a 	mov	r2,r18
    78c4:	9240010e 	bge	r18,r9,78cc <___svfprintf_internal_r+0x4a8>
    78c8:	4805883a 	mov	r2,r9
    78cc:	d8802a15 	stw	r2,168(sp)
    78d0:	d8003415 	stw	zero,208(sp)
    78d4:	a8803fcc 	andi	r2,r21,255
    78d8:	1080201c 	xori	r2,r2,128
    78dc:	10bfe004 	addi	r2,r2,-128
    78e0:	10000326 	beq	r2,zero,78f0 <___svfprintf_internal_r+0x4cc>
    78e4:	d8c02a17 	ldw	r3,168(sp)
    78e8:	18c00044 	addi	r3,r3,1
    78ec:	d8c02a15 	stw	r3,168(sp)
    78f0:	8ac0008c 	andi	r11,r17,2
    78f4:	dac02b15 	stw	r11,172(sp)
    78f8:	58000326 	beq	r11,zero,7908 <___svfprintf_internal_r+0x4e4>
    78fc:	db002a17 	ldw	r12,168(sp)
    7900:	63000084 	addi	r12,r12,2
    7904:	db002a15 	stw	r12,168(sp)
    7908:	88c0210c 	andi	r3,r17,132
    790c:	d8c02c15 	stw	r3,176(sp)
    7910:	1802111e 	bne	r3,zero,8158 <___svfprintf_internal_r+0xd34>
    7914:	dac02e17 	ldw	r11,184(sp)
    7918:	db002a17 	ldw	r12,168(sp)
    791c:	5b39c83a 	sub	fp,r11,r12
    7920:	07020d0e 	bge	zero,fp,8158 <___svfprintf_internal_r+0xd34>
    7924:	02400404 	movi	r9,16
    7928:	d8c02017 	ldw	r3,128(sp)
    792c:	d8801f17 	ldw	r2,124(sp)
    7930:	4f058c0e 	bge	r9,fp,8f64 <___svfprintf_internal_r+0x1b40>
    7934:	014000b4 	movhi	r5,2
    7938:	e009883a 	mov	r4,fp
    793c:	29432784 	addi	r5,r5,3230
    7940:	dc003c15 	stw	r16,240(sp)
    7944:	9039883a 	mov	fp,r18
    7948:	d9403615 	stw	r5,216(sp)
    794c:	8825883a 	mov	r18,r17
    7950:	482b883a 	mov	r21,r9
    7954:	04c001c4 	movi	r19,7
    7958:	dc002f17 	ldw	r16,188(sp)
    795c:	2023883a 	mov	r17,r4
    7960:	00000306 	br	7970 <___svfprintf_internal_r+0x54c>
    7964:	8c7ffc04 	addi	r17,r17,-16
    7968:	42000204 	addi	r8,r8,8
    796c:	ac40130e 	bge	r21,r17,79bc <___svfprintf_internal_r+0x598>
    7970:	02c000b4 	movhi	r11,2
    7974:	18c00404 	addi	r3,r3,16
    7978:	10800044 	addi	r2,r2,1
    797c:	5ac32784 	addi	r11,r11,3230
    7980:	42c00015 	stw	r11,0(r8)
    7984:	45400115 	stw	r21,4(r8)
    7988:	d8c02015 	stw	r3,128(sp)
    798c:	d8801f15 	stw	r2,124(sp)
    7990:	98bff40e 	bge	r19,r2,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7994:	8009883a 	mov	r4,r16
    7998:	b80b883a 	mov	r5,r23
    799c:	b00d883a 	mov	r6,r22
    79a0:	000fc4c0 	call	fc4c <__ssprint_r>
    79a4:	103f671e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    79a8:	8c7ffc04 	addi	r17,r17,-16
    79ac:	d8c02017 	ldw	r3,128(sp)
    79b0:	d8801f17 	ldw	r2,124(sp)
    79b4:	da000404 	addi	r8,sp,16
    79b8:	ac7fed16 	blt	r21,r17,7970 <__alt_mem_Flash_flash_data+0xf4007970>
    79bc:	dc003c17 	ldw	r16,240(sp)
    79c0:	8809883a 	mov	r4,r17
    79c4:	9023883a 	mov	r17,r18
    79c8:	e025883a 	mov	r18,fp
    79cc:	2039883a 	mov	fp,r4
    79d0:	db003617 	ldw	r12,216(sp)
    79d4:	e0c7883a 	add	r3,fp,r3
    79d8:	10800044 	addi	r2,r2,1
    79dc:	43000015 	stw	r12,0(r8)
    79e0:	47000115 	stw	fp,4(r8)
    79e4:	d8c02015 	stw	r3,128(sp)
    79e8:	d8801f15 	stw	r2,124(sp)
    79ec:	010001c4 	movi	r4,7
    79f0:	20834416 	blt	r4,r2,8704 <___svfprintf_internal_r+0x12e0>
    79f4:	d8802787 	ldb	r2,158(sp)
    79f8:	42000204 	addi	r8,r8,8
    79fc:	10000c26 	beq	r2,zero,7a30 <___svfprintf_internal_r+0x60c>
    7a00:	d8801f17 	ldw	r2,124(sp)
    7a04:	d9002784 	addi	r4,sp,158
    7a08:	18c00044 	addi	r3,r3,1
    7a0c:	10800044 	addi	r2,r2,1
    7a10:	41000015 	stw	r4,0(r8)
    7a14:	01000044 	movi	r4,1
    7a18:	41000115 	stw	r4,4(r8)
    7a1c:	d8c02015 	stw	r3,128(sp)
    7a20:	d8801f15 	stw	r2,124(sp)
    7a24:	010001c4 	movi	r4,7
    7a28:	2082f616 	blt	r4,r2,8604 <___svfprintf_internal_r+0x11e0>
    7a2c:	42000204 	addi	r8,r8,8
    7a30:	dac02b17 	ldw	r11,172(sp)
    7a34:	58000c26 	beq	r11,zero,7a68 <___svfprintf_internal_r+0x644>
    7a38:	d8801f17 	ldw	r2,124(sp)
    7a3c:	d9002704 	addi	r4,sp,156
    7a40:	18c00084 	addi	r3,r3,2
    7a44:	10800044 	addi	r2,r2,1
    7a48:	41000015 	stw	r4,0(r8)
    7a4c:	01000084 	movi	r4,2
    7a50:	41000115 	stw	r4,4(r8)
    7a54:	d8c02015 	stw	r3,128(sp)
    7a58:	d8801f15 	stw	r2,124(sp)
    7a5c:	010001c4 	movi	r4,7
    7a60:	2082e016 	blt	r4,r2,85e4 <___svfprintf_internal_r+0x11c0>
    7a64:	42000204 	addi	r8,r8,8
    7a68:	db002c17 	ldw	r12,176(sp)
    7a6c:	00802004 	movi	r2,128
    7a70:	60822f26 	beq	r12,r2,8330 <___svfprintf_internal_r+0xf0c>
    7a74:	db003217 	ldw	r12,200(sp)
    7a78:	64abc83a 	sub	r21,r12,r18
    7a7c:	0540310e 	bge	zero,r21,7b44 <___svfprintf_internal_r+0x720>
    7a80:	07000404 	movi	fp,16
    7a84:	d8801f17 	ldw	r2,124(sp)
    7a88:	e544270e 	bge	fp,r21,8b28 <___svfprintf_internal_r+0x1704>
    7a8c:	014000b4 	movhi	r5,2
    7a90:	a809883a 	mov	r4,r21
    7a94:	29432384 	addi	r5,r5,3214
    7a98:	dc002c15 	stw	r16,176(sp)
    7a9c:	902b883a 	mov	r21,r18
    7aa0:	d9402b15 	stw	r5,172(sp)
    7aa4:	8825883a 	mov	r18,r17
    7aa8:	04c001c4 	movi	r19,7
    7aac:	dc002f17 	ldw	r16,188(sp)
    7ab0:	2023883a 	mov	r17,r4
    7ab4:	00000306 	br	7ac4 <___svfprintf_internal_r+0x6a0>
    7ab8:	8c7ffc04 	addi	r17,r17,-16
    7abc:	42000204 	addi	r8,r8,8
    7ac0:	e440110e 	bge	fp,r17,7b08 <___svfprintf_internal_r+0x6e4>
    7ac4:	18c00404 	addi	r3,r3,16
    7ac8:	10800044 	addi	r2,r2,1
    7acc:	45000015 	stw	r20,0(r8)
    7ad0:	47000115 	stw	fp,4(r8)
    7ad4:	d8c02015 	stw	r3,128(sp)
    7ad8:	d8801f15 	stw	r2,124(sp)
    7adc:	98bff60e 	bge	r19,r2,7ab8 <__alt_mem_Flash_flash_data+0xf4007ab8>
    7ae0:	8009883a 	mov	r4,r16
    7ae4:	b80b883a 	mov	r5,r23
    7ae8:	b00d883a 	mov	r6,r22
    7aec:	000fc4c0 	call	fc4c <__ssprint_r>
    7af0:	103f141e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7af4:	8c7ffc04 	addi	r17,r17,-16
    7af8:	d8c02017 	ldw	r3,128(sp)
    7afc:	d8801f17 	ldw	r2,124(sp)
    7b00:	da000404 	addi	r8,sp,16
    7b04:	e47fef16 	blt	fp,r17,7ac4 <__alt_mem_Flash_flash_data+0xf4007ac4>
    7b08:	dc002c17 	ldw	r16,176(sp)
    7b0c:	8809883a 	mov	r4,r17
    7b10:	9023883a 	mov	r17,r18
    7b14:	a825883a 	mov	r18,r21
    7b18:	202b883a 	mov	r21,r4
    7b1c:	dac02b17 	ldw	r11,172(sp)
    7b20:	1d47883a 	add	r3,r3,r21
    7b24:	10800044 	addi	r2,r2,1
    7b28:	42c00015 	stw	r11,0(r8)
    7b2c:	45400115 	stw	r21,4(r8)
    7b30:	d8c02015 	stw	r3,128(sp)
    7b34:	d8801f15 	stw	r2,124(sp)
    7b38:	010001c4 	movi	r4,7
    7b3c:	2082a116 	blt	r4,r2,85c4 <___svfprintf_internal_r+0x11a0>
    7b40:	42000204 	addi	r8,r8,8
    7b44:	8880400c 	andi	r2,r17,256
    7b48:	1001b01e 	bne	r2,zero,820c <___svfprintf_internal_r+0xde8>
    7b4c:	d8801f17 	ldw	r2,124(sp)
    7b50:	db003117 	ldw	r12,196(sp)
    7b54:	1c87883a 	add	r3,r3,r18
    7b58:	10800044 	addi	r2,r2,1
    7b5c:	43000015 	stw	r12,0(r8)
    7b60:	44800115 	stw	r18,4(r8)
    7b64:	d8c02015 	stw	r3,128(sp)
    7b68:	d8801f15 	stw	r2,124(sp)
    7b6c:	010001c4 	movi	r4,7
    7b70:	20828216 	blt	r4,r2,857c <___svfprintf_internal_r+0x1158>
    7b74:	42000204 	addi	r8,r8,8
    7b78:	8c40010c 	andi	r17,r17,4
    7b7c:	88003226 	beq	r17,zero,7c48 <___svfprintf_internal_r+0x824>
    7b80:	db002e17 	ldw	r12,184(sp)
    7b84:	dac02a17 	ldw	r11,168(sp)
    7b88:	62e1c83a 	sub	r16,r12,r11
    7b8c:	04002e0e 	bge	zero,r16,7c48 <___svfprintf_internal_r+0x824>
    7b90:	04400404 	movi	r17,16
    7b94:	d8801f17 	ldw	r2,124(sp)
    7b98:	8c05330e 	bge	r17,r16,9068 <___svfprintf_internal_r+0x1c44>
    7b9c:	010000b4 	movhi	r4,2
    7ba0:	21032784 	addi	r4,r4,3230
    7ba4:	d9003615 	stw	r4,216(sp)
    7ba8:	048001c4 	movi	r18,7
    7bac:	dcc02f17 	ldw	r19,188(sp)
    7bb0:	00000306 	br	7bc0 <___svfprintf_internal_r+0x79c>
    7bb4:	843ffc04 	addi	r16,r16,-16
    7bb8:	42000204 	addi	r8,r8,8
    7bbc:	8c00130e 	bge	r17,r16,7c0c <___svfprintf_internal_r+0x7e8>
    7bc0:	014000b4 	movhi	r5,2
    7bc4:	18c00404 	addi	r3,r3,16
    7bc8:	10800044 	addi	r2,r2,1
    7bcc:	29432784 	addi	r5,r5,3230
    7bd0:	41400015 	stw	r5,0(r8)
    7bd4:	44400115 	stw	r17,4(r8)
    7bd8:	d8c02015 	stw	r3,128(sp)
    7bdc:	d8801f15 	stw	r2,124(sp)
    7be0:	90bff40e 	bge	r18,r2,7bb4 <__alt_mem_Flash_flash_data+0xf4007bb4>
    7be4:	9809883a 	mov	r4,r19
    7be8:	b80b883a 	mov	r5,r23
    7bec:	b00d883a 	mov	r6,r22
    7bf0:	000fc4c0 	call	fc4c <__ssprint_r>
    7bf4:	103ed31e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7bf8:	843ffc04 	addi	r16,r16,-16
    7bfc:	d8c02017 	ldw	r3,128(sp)
    7c00:	d8801f17 	ldw	r2,124(sp)
    7c04:	da000404 	addi	r8,sp,16
    7c08:	8c3fed16 	blt	r17,r16,7bc0 <__alt_mem_Flash_flash_data+0xf4007bc0>
    7c0c:	dac03617 	ldw	r11,216(sp)
    7c10:	1c07883a 	add	r3,r3,r16
    7c14:	10800044 	addi	r2,r2,1
    7c18:	42c00015 	stw	r11,0(r8)
    7c1c:	44000115 	stw	r16,4(r8)
    7c20:	d8c02015 	stw	r3,128(sp)
    7c24:	d8801f15 	stw	r2,124(sp)
    7c28:	010001c4 	movi	r4,7
    7c2c:	2080060e 	bge	r4,r2,7c48 <___svfprintf_internal_r+0x824>
    7c30:	d9002f17 	ldw	r4,188(sp)
    7c34:	b80b883a 	mov	r5,r23
    7c38:	b00d883a 	mov	r6,r22
    7c3c:	000fc4c0 	call	fc4c <__ssprint_r>
    7c40:	103ec01e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7c44:	d8c02017 	ldw	r3,128(sp)
    7c48:	d8802a17 	ldw	r2,168(sp)
    7c4c:	db002e17 	ldw	r12,184(sp)
    7c50:	1300010e 	bge	r2,r12,7c58 <___svfprintf_internal_r+0x834>
    7c54:	6005883a 	mov	r2,r12
    7c58:	dac03017 	ldw	r11,192(sp)
    7c5c:	5897883a 	add	r11,r11,r2
    7c60:	dac03015 	stw	r11,192(sp)
    7c64:	1802331e 	bne	r3,zero,8534 <___svfprintf_internal_r+0x1110>
    7c68:	d8001f15 	stw	zero,124(sp)
    7c6c:	da000404 	addi	r8,sp,16
    7c70:	003e1806 	br	74d4 <__alt_mem_Flash_flash_data+0xf40074d4>
    7c74:	db002d17 	ldw	r12,180(sp)
    7c78:	dac02d17 	ldw	r11,180(sp)
    7c7c:	d8c02915 	stw	r3,164(sp)
    7c80:	63000017 	ldw	r12,0(r12)
    7c84:	5ac00117 	ldw	r11,4(r11)
    7c88:	d9802785 	stb	r6,158(sp)
    7c8c:	6009883a 	mov	r4,r12
    7c90:	580b883a 	mov	r5,r11
    7c94:	db003715 	stw	r12,220(sp)
    7c98:	da004015 	stw	r8,256(sp)
    7c9c:	da403f15 	stw	r9,252(sp)
    7ca0:	dac03815 	stw	r11,224(sp)
    7ca4:	000f9f80 	call	f9f8 <__fpclassifyd>
    7ca8:	db002d17 	ldw	r12,180(sp)
    7cac:	04800044 	movi	r18,1
    7cb0:	da004017 	ldw	r8,256(sp)
    7cb4:	64c00204 	addi	r19,r12,8
    7cb8:	da403f17 	ldw	r9,252(sp)
    7cbc:	d9003717 	ldw	r4,220(sp)
    7cc0:	d9403817 	ldw	r5,224(sp)
    7cc4:	1483561e 	bne	r2,r18,8a20 <___svfprintf_internal_r+0x15fc>
    7cc8:	000d883a 	mov	r6,zero
    7ccc:	000f883a 	mov	r7,zero
    7cd0:	00140280 	call	14028 <__ledf2>
    7cd4:	da004017 	ldw	r8,256(sp)
    7cd8:	1004ee16 	blt	r2,zero,9094 <___svfprintf_internal_r+0x1c70>
    7cdc:	dd402783 	ldbu	r21,158(sp)
    7ce0:	008011c4 	movi	r2,71
    7ce4:	1404440e 	bge	r2,r16,8df8 <___svfprintf_internal_r+0x19d4>
    7ce8:	00c000b4 	movhi	r3,2
    7cec:	18c31404 	addi	r3,r3,3152
    7cf0:	d8c03115 	stw	r3,196(sp)
    7cf4:	02c000c4 	movi	r11,3
    7cf8:	00bfdfc4 	movi	r2,-129
    7cfc:	dac02a15 	stw	r11,168(sp)
    7d00:	88a2703a 	and	r17,r17,r2
    7d04:	dcc02d15 	stw	r19,180(sp)
    7d08:	5825883a 	mov	r18,r11
    7d0c:	d8003215 	stw	zero,200(sp)
    7d10:	d8003415 	stw	zero,208(sp)
    7d14:	003eef06 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7d18:	8c400214 	ori	r17,r17,8
    7d1c:	1805883a 	mov	r2,r3
    7d20:	1c000007 	ldb	r16,0(r3)
    7d24:	003e1506 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7d28:	8c400414 	ori	r17,r17,16
    7d2c:	d8c02915 	stw	r3,164(sp)
    7d30:	88c0080c 	andi	r3,r17,32
    7d34:	d8802d17 	ldw	r2,180(sp)
    7d38:	18005526 	beq	r3,zero,7e90 <___svfprintf_internal_r+0xa6c>
    7d3c:	dac02d17 	ldw	r11,180(sp)
    7d40:	14c00017 	ldw	r19,0(r2)
    7d44:	17000117 	ldw	fp,4(r2)
    7d48:	5ac00204 	addi	r11,r11,8
    7d4c:	dac02d15 	stw	r11,180(sp)
    7d50:	00800044 	movi	r2,1
    7d54:	9f06b03a 	or	r3,r19,fp
    7d58:	d8002785 	stb	zero,158(sp)
    7d5c:	da403215 	stw	r9,200(sp)
    7d60:	002b883a 	mov	r21,zero
    7d64:	003eb406 	br	7838 <__alt_mem_Flash_flash_data+0xf4007838>
    7d68:	030000b4 	movhi	r12,2
    7d6c:	63031704 	addi	r12,r12,3164
    7d70:	d8c02915 	stw	r3,164(sp)
    7d74:	d9802785 	stb	r6,158(sp)
    7d78:	db003b15 	stw	r12,236(sp)
    7d7c:	88c0080c 	andi	r3,r17,32
    7d80:	d8802d17 	ldw	r2,180(sp)
    7d84:	18005626 	beq	r3,zero,7ee0 <___svfprintf_internal_r+0xabc>
    7d88:	dac02d17 	ldw	r11,180(sp)
    7d8c:	14c00017 	ldw	r19,0(r2)
    7d90:	17000117 	ldw	fp,4(r2)
    7d94:	5ac00204 	addi	r11,r11,8
    7d98:	dac02d15 	stw	r11,180(sp)
    7d9c:	8880004c 	andi	r2,r17,1
    7da0:	10029326 	beq	r2,zero,87f0 <___svfprintf_internal_r+0x13cc>
    7da4:	9f06b03a 	or	r3,r19,fp
    7da8:	18033526 	beq	r3,zero,8a80 <___svfprintf_internal_r+0x165c>
    7dac:	00800c04 	movi	r2,48
    7db0:	d8802705 	stb	r2,156(sp)
    7db4:	dc002745 	stb	r16,157(sp)
    7db8:	8c400094 	ori	r17,r17,2
    7dbc:	00800084 	movi	r2,2
    7dc0:	003fe506 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    7dc4:	1805883a 	mov	r2,r3
    7dc8:	d8002e15 	stw	zero,184(sp)
    7dcc:	82fff404 	addi	r11,r16,-48
    7dd0:	0019883a 	mov	r12,zero
    7dd4:	14000007 	ldb	r16,0(r2)
    7dd8:	630002a4 	muli	r12,r12,10
    7ddc:	18c00044 	addi	r3,r3,1
    7de0:	1805883a 	mov	r2,r3
    7de4:	62d9883a 	add	r12,r12,r11
    7de8:	82fff404 	addi	r11,r16,-48
    7dec:	2afff92e 	bgeu	r5,r11,7dd4 <__alt_mem_Flash_flash_data+0xf4007dd4>
    7df0:	db002e15 	stw	r12,184(sp)
    7df4:	003de206 	br	7580 <__alt_mem_Flash_flash_data+0xf4007580>
    7df8:	8c400814 	ori	r17,r17,32
    7dfc:	1805883a 	mov	r2,r3
    7e00:	1c000007 	ldb	r16,0(r3)
    7e04:	003ddd06 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7e08:	dac02d17 	ldw	r11,180(sp)
    7e0c:	db002d17 	ldw	r12,180(sp)
    7e10:	d8c02915 	stw	r3,164(sp)
    7e14:	5ac00017 	ldw	r11,0(r11)
    7e18:	d8002785 	stb	zero,158(sp)
    7e1c:	64c00104 	addi	r19,r12,4
    7e20:	dac03115 	stw	r11,196(sp)
    7e24:	58048126 	beq	r11,zero,902c <___svfprintf_internal_r+0x1c08>
    7e28:	d9003117 	ldw	r4,196(sp)
    7e2c:	48041716 	blt	r9,zero,8e8c <___svfprintf_internal_r+0x1a68>
    7e30:	480d883a 	mov	r6,r9
    7e34:	000b883a 	mov	r5,zero
    7e38:	da004015 	stw	r8,256(sp)
    7e3c:	da403f15 	stw	r9,252(sp)
    7e40:	000e1880 	call	e188 <memchr>
    7e44:	da004017 	ldw	r8,256(sp)
    7e48:	da403f17 	ldw	r9,252(sp)
    7e4c:	1004db26 	beq	r2,zero,91bc <___svfprintf_internal_r+0x1d98>
    7e50:	d8c03117 	ldw	r3,196(sp)
    7e54:	10e5c83a 	sub	r18,r2,r3
    7e58:	4c80010e 	bge	r9,r18,7e60 <___svfprintf_internal_r+0xa3c>
    7e5c:	4825883a 	mov	r18,r9
    7e60:	9005883a 	mov	r2,r18
    7e64:	90040e16 	blt	r18,zero,8ea0 <___svfprintf_internal_r+0x1a7c>
    7e68:	dd402783 	ldbu	r21,158(sp)
    7e6c:	d8802a15 	stw	r2,168(sp)
    7e70:	dcc02d15 	stw	r19,180(sp)
    7e74:	d8003215 	stw	zero,200(sp)
    7e78:	d8003415 	stw	zero,208(sp)
    7e7c:	003e9506 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7e80:	d8c02915 	stw	r3,164(sp)
    7e84:	88c0080c 	andi	r3,r17,32
    7e88:	d8802d17 	ldw	r2,180(sp)
    7e8c:	183fab1e 	bne	r3,zero,7d3c <__alt_mem_Flash_flash_data+0xf4007d3c>
    7e90:	88c0040c 	andi	r3,r17,16
    7e94:	1802681e 	bne	r3,zero,8838 <___svfprintf_internal_r+0x1414>
    7e98:	88c0100c 	andi	r3,r17,64
    7e9c:	18026626 	beq	r3,zero,8838 <___svfprintf_internal_r+0x1414>
    7ea0:	dac02d17 	ldw	r11,180(sp)
    7ea4:	14c0000b 	ldhu	r19,0(r2)
    7ea8:	0039883a 	mov	fp,zero
    7eac:	5ac00104 	addi	r11,r11,4
    7eb0:	dac02d15 	stw	r11,180(sp)
    7eb4:	00800044 	movi	r2,1
    7eb8:	9807883a 	mov	r3,r19
    7ebc:	003fa606 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    7ec0:	008000b4 	movhi	r2,2
    7ec4:	10831c04 	addi	r2,r2,3184
    7ec8:	d8c02915 	stw	r3,164(sp)
    7ecc:	d8803b15 	stw	r2,236(sp)
    7ed0:	d9802785 	stb	r6,158(sp)
    7ed4:	88c0080c 	andi	r3,r17,32
    7ed8:	d8802d17 	ldw	r2,180(sp)
    7edc:	183faa1e 	bne	r3,zero,7d88 <__alt_mem_Flash_flash_data+0xf4007d88>
    7ee0:	88c0040c 	andi	r3,r17,16
    7ee4:	1802e826 	beq	r3,zero,8a88 <___svfprintf_internal_r+0x1664>
    7ee8:	db002d17 	ldw	r12,180(sp)
    7eec:	14c00017 	ldw	r19,0(r2)
    7ef0:	0039883a 	mov	fp,zero
    7ef4:	63000104 	addi	r12,r12,4
    7ef8:	db002d15 	stw	r12,180(sp)
    7efc:	003fa706 	br	7d9c <__alt_mem_Flash_flash_data+0xf4007d9c>
    7f00:	30803fcc 	andi	r2,r6,255
    7f04:	1080201c 	xori	r2,r2,128
    7f08:	10bfe004 	addi	r2,r2,-128
    7f0c:	1002d91e 	bne	r2,zero,8a74 <___svfprintf_internal_r+0x1650>
    7f10:	1805883a 	mov	r2,r3
    7f14:	01800804 	movi	r6,32
    7f18:	1c000007 	ldb	r16,0(r3)
    7f1c:	003d9706 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f20:	8c400054 	ori	r17,r17,1
    7f24:	1805883a 	mov	r2,r3
    7f28:	1c000007 	ldb	r16,0(r3)
    7f2c:	003d9306 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f30:	dac02d17 	ldw	r11,180(sp)
    7f34:	db002d17 	ldw	r12,180(sp)
    7f38:	5ac00017 	ldw	r11,0(r11)
    7f3c:	dac02e15 	stw	r11,184(sp)
    7f40:	62c00104 	addi	r11,r12,4
    7f44:	db002e17 	ldw	r12,184(sp)
    7f48:	60033e16 	blt	r12,zero,8c44 <___svfprintf_internal_r+0x1820>
    7f4c:	dac02d15 	stw	r11,180(sp)
    7f50:	1805883a 	mov	r2,r3
    7f54:	1c000007 	ldb	r16,0(r3)
    7f58:	003d8806 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f5c:	1805883a 	mov	r2,r3
    7f60:	01800ac4 	movi	r6,43
    7f64:	1c000007 	ldb	r16,0(r3)
    7f68:	003d8406 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f6c:	8c401014 	ori	r17,r17,64
    7f70:	1805883a 	mov	r2,r3
    7f74:	1c000007 	ldb	r16,0(r3)
    7f78:	003d8006 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f7c:	1c000007 	ldb	r16,0(r3)
    7f80:	81c33626 	beq	r16,r7,8c5c <___svfprintf_internal_r+0x1838>
    7f84:	8c400414 	ori	r17,r17,16
    7f88:	1805883a 	mov	r2,r3
    7f8c:	003d7b06 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7f90:	d8c02915 	stw	r3,164(sp)
    7f94:	d9802785 	stb	r6,158(sp)
    7f98:	8880080c 	andi	r2,r17,32
    7f9c:	1002c226 	beq	r2,zero,8aa8 <___svfprintf_internal_r+0x1684>
    7fa0:	db002d17 	ldw	r12,180(sp)
    7fa4:	dac03017 	ldw	r11,192(sp)
    7fa8:	60800017 	ldw	r2,0(r12)
    7fac:	5807d7fa 	srai	r3,r11,31
    7fb0:	63000104 	addi	r12,r12,4
    7fb4:	db002d15 	stw	r12,180(sp)
    7fb8:	12c00015 	stw	r11,0(r2)
    7fbc:	10c00115 	stw	r3,4(r2)
    7fc0:	003d4406 	br	74d4 <__alt_mem_Flash_flash_data+0xf40074d4>
    7fc4:	db002d17 	ldw	r12,180(sp)
    7fc8:	00800c04 	movi	r2,48
    7fcc:	d8802705 	stb	r2,156(sp)
    7fd0:	64c00017 	ldw	r19,0(r12)
    7fd4:	00801e04 	movi	r2,120
    7fd8:	d8802745 	stb	r2,157(sp)
    7fdc:	008000b4 	movhi	r2,2
    7fe0:	10831c04 	addi	r2,r2,3184
    7fe4:	63000104 	addi	r12,r12,4
    7fe8:	d8c02915 	stw	r3,164(sp)
    7fec:	d8803b15 	stw	r2,236(sp)
    7ff0:	0039883a 	mov	fp,zero
    7ff4:	8c400094 	ori	r17,r17,2
    7ff8:	db002d15 	stw	r12,180(sp)
    7ffc:	00800084 	movi	r2,2
    8000:	04001e04 	movi	r16,120
    8004:	9807883a 	mov	r3,r19
    8008:	003f5306 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    800c:	db002d17 	ldw	r12,180(sp)
    8010:	d8c02915 	stw	r3,164(sp)
    8014:	dac01404 	addi	r11,sp,80
    8018:	60800017 	ldw	r2,0(r12)
    801c:	00c00044 	movi	r3,1
    8020:	63000104 	addi	r12,r12,4
    8024:	d8801405 	stb	r2,80(sp)
    8028:	d8c02a15 	stw	r3,168(sp)
    802c:	d8002785 	stb	zero,158(sp)
    8030:	db002d15 	stw	r12,180(sp)
    8034:	1825883a 	mov	r18,r3
    8038:	d8003215 	stw	zero,200(sp)
    803c:	d8003415 	stw	zero,208(sp)
    8040:	dac03115 	stw	r11,196(sp)
    8044:	0005883a 	mov	r2,zero
    8048:	003e2906 	br	78f0 <__alt_mem_Flash_flash_data+0xf40078f0>
    804c:	d8c02915 	stw	r3,164(sp)
    8050:	d9802785 	stb	r6,158(sp)
    8054:	8880080c 	andi	r2,r17,32
    8058:	d8c02d17 	ldw	r3,180(sp)
    805c:	103deb1e 	bne	r2,zero,780c <__alt_mem_Flash_flash_data+0xf400780c>
    8060:	8880040c 	andi	r2,r17,16
    8064:	1001e51e 	bne	r2,zero,87fc <___svfprintf_internal_r+0x13d8>
    8068:	8880100c 	andi	r2,r17,64
    806c:	1001e326 	beq	r2,zero,87fc <___svfprintf_internal_r+0x13d8>
    8070:	1cc0000f 	ldh	r19,0(r3)
    8074:	db002d17 	ldw	r12,180(sp)
    8078:	9839d7fa 	srai	fp,r19,31
    807c:	63000104 	addi	r12,r12,4
    8080:	db002d15 	stw	r12,180(sp)
    8084:	e005883a 	mov	r2,fp
    8088:	103de70e 	bge	r2,zero,7828 <__alt_mem_Flash_flash_data+0xf4007828>
    808c:	04e7c83a 	sub	r19,zero,r19
    8090:	9804c03a 	cmpne	r2,r19,zero
    8094:	0739c83a 	sub	fp,zero,fp
    8098:	e0b9c83a 	sub	fp,fp,r2
    809c:	05400b44 	movi	r21,45
    80a0:	dd402785 	stb	r21,158(sp)
    80a4:	da403215 	stw	r9,200(sp)
    80a8:	00800044 	movi	r2,1
    80ac:	9f06b03a 	or	r3,r19,fp
    80b0:	003de106 	br	7838 <__alt_mem_Flash_flash_data+0xf4007838>
    80b4:	8c400414 	ori	r17,r17,16
    80b8:	d8c02915 	stw	r3,164(sp)
    80bc:	8880080c 	andi	r2,r17,32
    80c0:	10000b26 	beq	r2,zero,80f0 <___svfprintf_internal_r+0xccc>
    80c4:	db002d17 	ldw	r12,180(sp)
    80c8:	0005883a 	mov	r2,zero
    80cc:	64c00017 	ldw	r19,0(r12)
    80d0:	67000117 	ldw	fp,4(r12)
    80d4:	63000204 	addi	r12,r12,8
    80d8:	db002d15 	stw	r12,180(sp)
    80dc:	9f06b03a 	or	r3,r19,fp
    80e0:	003f1d06 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    80e4:	d8c02915 	stw	r3,164(sp)
    80e8:	8880080c 	andi	r2,r17,32
    80ec:	103ff51e 	bne	r2,zero,80c4 <__alt_mem_Flash_flash_data+0xf40080c4>
    80f0:	8880040c 	andi	r2,r17,16
    80f4:	1001c81e 	bne	r2,zero,8818 <___svfprintf_internal_r+0x13f4>
    80f8:	8880100c 	andi	r2,r17,64
    80fc:	1001c626 	beq	r2,zero,8818 <___svfprintf_internal_r+0x13f4>
    8100:	db002d17 	ldw	r12,180(sp)
    8104:	0039883a 	mov	fp,zero
    8108:	0005883a 	mov	r2,zero
    810c:	64c0000b 	ldhu	r19,0(r12)
    8110:	63000104 	addi	r12,r12,4
    8114:	db002d15 	stw	r12,180(sp)
    8118:	9807883a 	mov	r3,r19
    811c:	003f0e06 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    8120:	d8c02915 	stw	r3,164(sp)
    8124:	d9802785 	stb	r6,158(sp)
    8128:	803d8026 	beq	r16,zero,772c <__alt_mem_Flash_flash_data+0xf400772c>
    812c:	02c00044 	movi	r11,1
    8130:	db001404 	addi	r12,sp,80
    8134:	dac02a15 	stw	r11,168(sp)
    8138:	dc001405 	stb	r16,80(sp)
    813c:	d8002785 	stb	zero,158(sp)
    8140:	5825883a 	mov	r18,r11
    8144:	d8003215 	stw	zero,200(sp)
    8148:	d8003415 	stw	zero,208(sp)
    814c:	db003115 	stw	r12,196(sp)
    8150:	0005883a 	mov	r2,zero
    8154:	003de606 	br	78f0 <__alt_mem_Flash_flash_data+0xf40078f0>
    8158:	d8c02017 	ldw	r3,128(sp)
    815c:	003e2706 	br	79fc <__alt_mem_Flash_flash_data+0xf40079fc>
    8160:	10803fcc 	andi	r2,r2,255
    8164:	00c00044 	movi	r3,1
    8168:	10fdbb1e 	bne	r2,r3,7858 <__alt_mem_Flash_flash_data+0xf4007858>
    816c:	e000021e 	bne	fp,zero,8178 <___svfprintf_internal_r+0xd54>
    8170:	00800244 	movi	r2,9
    8174:	14c01f2e 	bgeu	r2,r19,81f4 <___svfprintf_internal_r+0xdd0>
    8178:	dc002a15 	stw	r16,168(sp)
    817c:	dc402b15 	stw	r17,172(sp)
    8180:	9821883a 	mov	r16,r19
    8184:	e023883a 	mov	r17,fp
    8188:	b025883a 	mov	r18,r22
    818c:	4827883a 	mov	r19,r9
    8190:	4039883a 	mov	fp,r8
    8194:	8009883a 	mov	r4,r16
    8198:	880b883a 	mov	r5,r17
    819c:	01800284 	movi	r6,10
    81a0:	000f883a 	mov	r7,zero
    81a4:	00131cc0 	call	131cc <__umoddi3>
    81a8:	10800c04 	addi	r2,r2,48
    81ac:	94bfffc4 	addi	r18,r18,-1
    81b0:	8009883a 	mov	r4,r16
    81b4:	880b883a 	mov	r5,r17
    81b8:	01800284 	movi	r6,10
    81bc:	000f883a 	mov	r7,zero
    81c0:	90800005 	stb	r2,0(r18)
    81c4:	0012c0c0 	call	12c0c <__udivdi3>
    81c8:	1021883a 	mov	r16,r2
    81cc:	10c4b03a 	or	r2,r2,r3
    81d0:	1823883a 	mov	r17,r3
    81d4:	103fef1e 	bne	r2,zero,8194 <__alt_mem_Flash_flash_data+0xf4008194>
    81d8:	dc803115 	stw	r18,196(sp)
    81dc:	dc002a17 	ldw	r16,168(sp)
    81e0:	dc402b17 	ldw	r17,172(sp)
    81e4:	9813883a 	mov	r9,r19
    81e8:	e011883a 	mov	r8,fp
    81ec:	b4a5c83a 	sub	r18,r22,r18
    81f0:	003db306 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    81f4:	9cc00c04 	addi	r19,r19,48
    81f8:	db001dc4 	addi	r12,sp,119
    81fc:	dcc01dc5 	stb	r19,119(sp)
    8200:	dc803d17 	ldw	r18,244(sp)
    8204:	db003115 	stw	r12,196(sp)
    8208:	003dad06 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    820c:	00801944 	movi	r2,101
    8210:	14008d0e 	bge	r2,r16,8448 <___svfprintf_internal_r+0x1024>
    8214:	d9003717 	ldw	r4,220(sp)
    8218:	d9403817 	ldw	r5,224(sp)
    821c:	000d883a 	mov	r6,zero
    8220:	000f883a 	mov	r7,zero
    8224:	d8c03e15 	stw	r3,248(sp)
    8228:	da004015 	stw	r8,256(sp)
    822c:	000528c0 	call	528c <__eqdf2>
    8230:	d8c03e17 	ldw	r3,248(sp)
    8234:	da004017 	ldw	r8,256(sp)
    8238:	1000fd1e 	bne	r2,zero,8630 <___svfprintf_internal_r+0x120c>
    823c:	d8801f17 	ldw	r2,124(sp)
    8240:	010000b4 	movhi	r4,2
    8244:	21032304 	addi	r4,r4,3212
    8248:	18c00044 	addi	r3,r3,1
    824c:	10800044 	addi	r2,r2,1
    8250:	41000015 	stw	r4,0(r8)
    8254:	01000044 	movi	r4,1
    8258:	41000115 	stw	r4,4(r8)
    825c:	d8c02015 	stw	r3,128(sp)
    8260:	d8801f15 	stw	r2,124(sp)
    8264:	010001c4 	movi	r4,7
    8268:	20823316 	blt	r4,r2,8b38 <___svfprintf_internal_r+0x1714>
    826c:	42000204 	addi	r8,r8,8
    8270:	d8802617 	ldw	r2,152(sp)
    8274:	dac03317 	ldw	r11,204(sp)
    8278:	12c00216 	blt	r2,r11,8284 <___svfprintf_internal_r+0xe60>
    827c:	8880004c 	andi	r2,r17,1
    8280:	103e3d26 	beq	r2,zero,7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    8284:	db003917 	ldw	r12,228(sp)
    8288:	d8801f17 	ldw	r2,124(sp)
    828c:	dac03517 	ldw	r11,212(sp)
    8290:	1b07883a 	add	r3,r3,r12
    8294:	10800044 	addi	r2,r2,1
    8298:	42c00015 	stw	r11,0(r8)
    829c:	43000115 	stw	r12,4(r8)
    82a0:	d8c02015 	stw	r3,128(sp)
    82a4:	d8801f15 	stw	r2,124(sp)
    82a8:	010001c4 	movi	r4,7
    82ac:	20826f16 	blt	r4,r2,8c6c <___svfprintf_internal_r+0x1848>
    82b0:	42000204 	addi	r8,r8,8
    82b4:	db003317 	ldw	r12,204(sp)
    82b8:	643fffc4 	addi	r16,r12,-1
    82bc:	043e2e0e 	bge	zero,r16,7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    82c0:	04800404 	movi	r18,16
    82c4:	d8801f17 	ldw	r2,124(sp)
    82c8:	9400a00e 	bge	r18,r16,854c <___svfprintf_internal_r+0x1128>
    82cc:	014000b4 	movhi	r5,2
    82d0:	29432384 	addi	r5,r5,3214
    82d4:	d9402b15 	stw	r5,172(sp)
    82d8:	054001c4 	movi	r21,7
    82dc:	dcc02f17 	ldw	r19,188(sp)
    82e0:	00000306 	br	82f0 <___svfprintf_internal_r+0xecc>
    82e4:	42000204 	addi	r8,r8,8
    82e8:	843ffc04 	addi	r16,r16,-16
    82ec:	94009a0e 	bge	r18,r16,8558 <___svfprintf_internal_r+0x1134>
    82f0:	18c00404 	addi	r3,r3,16
    82f4:	10800044 	addi	r2,r2,1
    82f8:	45000015 	stw	r20,0(r8)
    82fc:	44800115 	stw	r18,4(r8)
    8300:	d8c02015 	stw	r3,128(sp)
    8304:	d8801f15 	stw	r2,124(sp)
    8308:	a8bff60e 	bge	r21,r2,82e4 <__alt_mem_Flash_flash_data+0xf40082e4>
    830c:	9809883a 	mov	r4,r19
    8310:	b80b883a 	mov	r5,r23
    8314:	b00d883a 	mov	r6,r22
    8318:	000fc4c0 	call	fc4c <__ssprint_r>
    831c:	103d091e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8320:	d8c02017 	ldw	r3,128(sp)
    8324:	d8801f17 	ldw	r2,124(sp)
    8328:	da000404 	addi	r8,sp,16
    832c:	003fee06 	br	82e8 <__alt_mem_Flash_flash_data+0xf40082e8>
    8330:	dac02e17 	ldw	r11,184(sp)
    8334:	db002a17 	ldw	r12,168(sp)
    8338:	5b2bc83a 	sub	r21,r11,r12
    833c:	057dcd0e 	bge	zero,r21,7a74 <__alt_mem_Flash_flash_data+0xf4007a74>
    8340:	07000404 	movi	fp,16
    8344:	d8801f17 	ldw	r2,124(sp)
    8348:	e5435d0e 	bge	fp,r21,90c0 <___svfprintf_internal_r+0x1c9c>
    834c:	014000b4 	movhi	r5,2
    8350:	a809883a 	mov	r4,r21
    8354:	29432384 	addi	r5,r5,3214
    8358:	dc002c15 	stw	r16,176(sp)
    835c:	902b883a 	mov	r21,r18
    8360:	d9402b15 	stw	r5,172(sp)
    8364:	8825883a 	mov	r18,r17
    8368:	04c001c4 	movi	r19,7
    836c:	dc002f17 	ldw	r16,188(sp)
    8370:	2023883a 	mov	r17,r4
    8374:	00000306 	br	8384 <___svfprintf_internal_r+0xf60>
    8378:	8c7ffc04 	addi	r17,r17,-16
    837c:	42000204 	addi	r8,r8,8
    8380:	e440110e 	bge	fp,r17,83c8 <___svfprintf_internal_r+0xfa4>
    8384:	18c00404 	addi	r3,r3,16
    8388:	10800044 	addi	r2,r2,1
    838c:	45000015 	stw	r20,0(r8)
    8390:	47000115 	stw	fp,4(r8)
    8394:	d8c02015 	stw	r3,128(sp)
    8398:	d8801f15 	stw	r2,124(sp)
    839c:	98bff60e 	bge	r19,r2,8378 <__alt_mem_Flash_flash_data+0xf4008378>
    83a0:	8009883a 	mov	r4,r16
    83a4:	b80b883a 	mov	r5,r23
    83a8:	b00d883a 	mov	r6,r22
    83ac:	000fc4c0 	call	fc4c <__ssprint_r>
    83b0:	103ce41e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    83b4:	8c7ffc04 	addi	r17,r17,-16
    83b8:	d8c02017 	ldw	r3,128(sp)
    83bc:	d8801f17 	ldw	r2,124(sp)
    83c0:	da000404 	addi	r8,sp,16
    83c4:	e47fef16 	blt	fp,r17,8384 <__alt_mem_Flash_flash_data+0xf4008384>
    83c8:	dc002c17 	ldw	r16,176(sp)
    83cc:	8809883a 	mov	r4,r17
    83d0:	9023883a 	mov	r17,r18
    83d4:	a825883a 	mov	r18,r21
    83d8:	202b883a 	mov	r21,r4
    83dc:	dac02b17 	ldw	r11,172(sp)
    83e0:	1d47883a 	add	r3,r3,r21
    83e4:	10800044 	addi	r2,r2,1
    83e8:	42c00015 	stw	r11,0(r8)
    83ec:	45400115 	stw	r21,4(r8)
    83f0:	d8c02015 	stw	r3,128(sp)
    83f4:	d8801f15 	stw	r2,124(sp)
    83f8:	010001c4 	movi	r4,7
    83fc:	20818016 	blt	r4,r2,8a00 <___svfprintf_internal_r+0x15dc>
    8400:	42000204 	addi	r8,r8,8
    8404:	003d9b06 	br	7a74 <__alt_mem_Flash_flash_data+0xf4007a74>
    8408:	d9403b17 	ldw	r5,236(sp)
    840c:	b007883a 	mov	r3,r22
    8410:	988003cc 	andi	r2,r19,15
    8414:	e008973a 	slli	r4,fp,28
    8418:	2885883a 	add	r2,r5,r2
    841c:	9826d13a 	srli	r19,r19,4
    8420:	10800003 	ldbu	r2,0(r2)
    8424:	e038d13a 	srli	fp,fp,4
    8428:	18ffffc4 	addi	r3,r3,-1
    842c:	24e6b03a 	or	r19,r4,r19
    8430:	18800005 	stb	r2,0(r3)
    8434:	9f04b03a 	or	r2,r19,fp
    8438:	103ff51e 	bne	r2,zero,8410 <__alt_mem_Flash_flash_data+0xf4008410>
    843c:	d8c03115 	stw	r3,196(sp)
    8440:	b0e5c83a 	sub	r18,r22,r3
    8444:	003d1e06 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    8448:	db003317 	ldw	r12,204(sp)
    844c:	00800044 	movi	r2,1
    8450:	18c00044 	addi	r3,r3,1
    8454:	13014b0e 	bge	r2,r12,8984 <___svfprintf_internal_r+0x1560>
    8458:	dc001f17 	ldw	r16,124(sp)
    845c:	dac03117 	ldw	r11,196(sp)
    8460:	00800044 	movi	r2,1
    8464:	84000044 	addi	r16,r16,1
    8468:	40800115 	stw	r2,4(r8)
    846c:	42c00015 	stw	r11,0(r8)
    8470:	d8c02015 	stw	r3,128(sp)
    8474:	dc001f15 	stw	r16,124(sp)
    8478:	008001c4 	movi	r2,7
    847c:	14014e16 	blt	r2,r16,89b8 <___svfprintf_internal_r+0x1594>
    8480:	42000204 	addi	r8,r8,8
    8484:	db003917 	ldw	r12,228(sp)
    8488:	dac03517 	ldw	r11,212(sp)
    848c:	84000044 	addi	r16,r16,1
    8490:	1b07883a 	add	r3,r3,r12
    8494:	42c00015 	stw	r11,0(r8)
    8498:	43000115 	stw	r12,4(r8)
    849c:	d8c02015 	stw	r3,128(sp)
    84a0:	dc001f15 	stw	r16,124(sp)
    84a4:	008001c4 	movi	r2,7
    84a8:	14014c16 	blt	r2,r16,89dc <___svfprintf_internal_r+0x15b8>
    84ac:	44800204 	addi	r18,r8,8
    84b0:	d9003717 	ldw	r4,220(sp)
    84b4:	d9403817 	ldw	r5,224(sp)
    84b8:	000d883a 	mov	r6,zero
    84bc:	000f883a 	mov	r7,zero
    84c0:	d8c03e15 	stw	r3,248(sp)
    84c4:	000528c0 	call	528c <__eqdf2>
    84c8:	d8c03e17 	ldw	r3,248(sp)
    84cc:	db003317 	ldw	r12,204(sp)
    84d0:	10009526 	beq	r2,zero,8728 <___svfprintf_internal_r+0x1304>
    84d4:	dac03117 	ldw	r11,196(sp)
    84d8:	60bfffc4 	addi	r2,r12,-1
    84dc:	1887883a 	add	r3,r3,r2
    84e0:	59000044 	addi	r4,r11,1
    84e4:	84000044 	addi	r16,r16,1
    84e8:	90800115 	stw	r2,4(r18)
    84ec:	91000015 	stw	r4,0(r18)
    84f0:	d8c02015 	stw	r3,128(sp)
    84f4:	dc001f15 	stw	r16,124(sp)
    84f8:	008001c4 	movi	r2,7
    84fc:	1400b316 	blt	r2,r16,87cc <___svfprintf_internal_r+0x13a8>
    8500:	94800204 	addi	r18,r18,8
    8504:	dac03a17 	ldw	r11,232(sp)
    8508:	dd4022c4 	addi	r21,sp,139
    850c:	84000044 	addi	r16,r16,1
    8510:	1ac7883a 	add	r3,r3,r11
    8514:	95400015 	stw	r21,0(r18)
    8518:	92c00115 	stw	r11,4(r18)
    851c:	d8c02015 	stw	r3,128(sp)
    8520:	dc001f15 	stw	r16,124(sp)
    8524:	008001c4 	movi	r2,7
    8528:	14001416 	blt	r2,r16,857c <___svfprintf_internal_r+0x1158>
    852c:	92000204 	addi	r8,r18,8
    8530:	003d9106 	br	7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    8534:	d9002f17 	ldw	r4,188(sp)
    8538:	b80b883a 	mov	r5,r23
    853c:	b00d883a 	mov	r6,r22
    8540:	000fc4c0 	call	fc4c <__ssprint_r>
    8544:	103dc826 	beq	r2,zero,7c68 <__alt_mem_Flash_flash_data+0xf4007c68>
    8548:	003c7e06 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    854c:	010000b4 	movhi	r4,2
    8550:	21032384 	addi	r4,r4,3214
    8554:	d9002b15 	stw	r4,172(sp)
    8558:	dac02b17 	ldw	r11,172(sp)
    855c:	1c07883a 	add	r3,r3,r16
    8560:	44000115 	stw	r16,4(r8)
    8564:	42c00015 	stw	r11,0(r8)
    8568:	10800044 	addi	r2,r2,1
    856c:	d8c02015 	stw	r3,128(sp)
    8570:	d8801f15 	stw	r2,124(sp)
    8574:	010001c4 	movi	r4,7
    8578:	20bd7e0e 	bge	r4,r2,7b74 <__alt_mem_Flash_flash_data+0xf4007b74>
    857c:	d9002f17 	ldw	r4,188(sp)
    8580:	b80b883a 	mov	r5,r23
    8584:	b00d883a 	mov	r6,r22
    8588:	000fc4c0 	call	fc4c <__ssprint_r>
    858c:	103c6d1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8590:	d8c02017 	ldw	r3,128(sp)
    8594:	da000404 	addi	r8,sp,16
    8598:	003d7706 	br	7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    859c:	10803fcc 	andi	r2,r2,255
    85a0:	1000201e 	bne	r2,zero,8624 <___svfprintf_internal_r+0x1200>
    85a4:	8880004c 	andi	r2,r17,1
    85a8:	10001e26 	beq	r2,zero,8624 <___svfprintf_internal_r+0x1200>
    85ac:	00800c04 	movi	r2,48
    85b0:	d8c01dc4 	addi	r3,sp,119
    85b4:	d8801dc5 	stb	r2,119(sp)
    85b8:	dc803d17 	ldw	r18,244(sp)
    85bc:	d8c03115 	stw	r3,196(sp)
    85c0:	003cbf06 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    85c4:	d9002f17 	ldw	r4,188(sp)
    85c8:	b80b883a 	mov	r5,r23
    85cc:	b00d883a 	mov	r6,r22
    85d0:	000fc4c0 	call	fc4c <__ssprint_r>
    85d4:	103c5b1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    85d8:	d8c02017 	ldw	r3,128(sp)
    85dc:	da000404 	addi	r8,sp,16
    85e0:	003d5806 	br	7b44 <__alt_mem_Flash_flash_data+0xf4007b44>
    85e4:	d9002f17 	ldw	r4,188(sp)
    85e8:	b80b883a 	mov	r5,r23
    85ec:	b00d883a 	mov	r6,r22
    85f0:	000fc4c0 	call	fc4c <__ssprint_r>
    85f4:	103c531e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    85f8:	d8c02017 	ldw	r3,128(sp)
    85fc:	da000404 	addi	r8,sp,16
    8600:	003d1906 	br	7a68 <__alt_mem_Flash_flash_data+0xf4007a68>
    8604:	d9002f17 	ldw	r4,188(sp)
    8608:	b80b883a 	mov	r5,r23
    860c:	b00d883a 	mov	r6,r22
    8610:	000fc4c0 	call	fc4c <__ssprint_r>
    8614:	103c4b1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8618:	d8c02017 	ldw	r3,128(sp)
    861c:	da000404 	addi	r8,sp,16
    8620:	003d0306 	br	7a30 <__alt_mem_Flash_flash_data+0xf4007a30>
    8624:	0025883a 	mov	r18,zero
    8628:	dd803115 	stw	r22,196(sp)
    862c:	003ca406 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    8630:	dc002617 	ldw	r16,152(sp)
    8634:	0401480e 	bge	zero,r16,8b58 <___svfprintf_internal_r+0x1734>
    8638:	db003117 	ldw	r12,196(sp)
    863c:	dac03317 	ldw	r11,204(sp)
    8640:	62e1883a 	add	r16,r12,r11
    8644:	db003417 	ldw	r12,208(sp)
    8648:	5825883a 	mov	r18,r11
    864c:	62c0010e 	bge	r12,r11,8654 <___svfprintf_internal_r+0x1230>
    8650:	6025883a 	mov	r18,r12
    8654:	04800b0e 	bge	zero,r18,8684 <___svfprintf_internal_r+0x1260>
    8658:	d8801f17 	ldw	r2,124(sp)
    865c:	dac03117 	ldw	r11,196(sp)
    8660:	1c87883a 	add	r3,r3,r18
    8664:	10800044 	addi	r2,r2,1
    8668:	42c00015 	stw	r11,0(r8)
    866c:	44800115 	stw	r18,4(r8)
    8670:	d8c02015 	stw	r3,128(sp)
    8674:	d8801f15 	stw	r2,124(sp)
    8678:	010001c4 	movi	r4,7
    867c:	20823f16 	blt	r4,r2,8f7c <___svfprintf_internal_r+0x1b58>
    8680:	42000204 	addi	r8,r8,8
    8684:	90023b16 	blt	r18,zero,8f74 <___svfprintf_internal_r+0x1b50>
    8688:	db003417 	ldw	r12,208(sp)
    868c:	64a5c83a 	sub	r18,r12,r18
    8690:	0480780e 	bge	zero,r18,8874 <___svfprintf_internal_r+0x1450>
    8694:	05400404 	movi	r21,16
    8698:	d8801f17 	ldw	r2,124(sp)
    869c:	ac81140e 	bge	r21,r18,8af0 <___svfprintf_internal_r+0x16cc>
    86a0:	014000b4 	movhi	r5,2
    86a4:	29432384 	addi	r5,r5,3214
    86a8:	d9402b15 	stw	r5,172(sp)
    86ac:	070001c4 	movi	fp,7
    86b0:	dcc02f17 	ldw	r19,188(sp)
    86b4:	00000306 	br	86c4 <___svfprintf_internal_r+0x12a0>
    86b8:	42000204 	addi	r8,r8,8
    86bc:	94bffc04 	addi	r18,r18,-16
    86c0:	ac810e0e 	bge	r21,r18,8afc <___svfprintf_internal_r+0x16d8>
    86c4:	18c00404 	addi	r3,r3,16
    86c8:	10800044 	addi	r2,r2,1
    86cc:	45000015 	stw	r20,0(r8)
    86d0:	45400115 	stw	r21,4(r8)
    86d4:	d8c02015 	stw	r3,128(sp)
    86d8:	d8801f15 	stw	r2,124(sp)
    86dc:	e0bff60e 	bge	fp,r2,86b8 <__alt_mem_Flash_flash_data+0xf40086b8>
    86e0:	9809883a 	mov	r4,r19
    86e4:	b80b883a 	mov	r5,r23
    86e8:	b00d883a 	mov	r6,r22
    86ec:	000fc4c0 	call	fc4c <__ssprint_r>
    86f0:	103c141e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    86f4:	d8c02017 	ldw	r3,128(sp)
    86f8:	d8801f17 	ldw	r2,124(sp)
    86fc:	da000404 	addi	r8,sp,16
    8700:	003fee06 	br	86bc <__alt_mem_Flash_flash_data+0xf40086bc>
    8704:	d9002f17 	ldw	r4,188(sp)
    8708:	b80b883a 	mov	r5,r23
    870c:	b00d883a 	mov	r6,r22
    8710:	000fc4c0 	call	fc4c <__ssprint_r>
    8714:	103c0b1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8718:	d8c02017 	ldw	r3,128(sp)
    871c:	d8802787 	ldb	r2,158(sp)
    8720:	da000404 	addi	r8,sp,16
    8724:	003cb506 	br	79fc <__alt_mem_Flash_flash_data+0xf40079fc>
    8728:	657fffc4 	addi	r21,r12,-1
    872c:	057f750e 	bge	zero,r21,8504 <__alt_mem_Flash_flash_data+0xf4008504>
    8730:	07000404 	movi	fp,16
    8734:	e542ed0e 	bge	fp,r21,92ec <___svfprintf_internal_r+0x1ec8>
    8738:	010000b4 	movhi	r4,2
    873c:	21032384 	addi	r4,r4,3214
    8740:	d9002b15 	stw	r4,172(sp)
    8744:	01c001c4 	movi	r7,7
    8748:	dcc02f17 	ldw	r19,188(sp)
    874c:	00000306 	br	875c <___svfprintf_internal_r+0x1338>
    8750:	ad7ffc04 	addi	r21,r21,-16
    8754:	94800204 	addi	r18,r18,8
    8758:	e540130e 	bge	fp,r21,87a8 <___svfprintf_internal_r+0x1384>
    875c:	18c00404 	addi	r3,r3,16
    8760:	84000044 	addi	r16,r16,1
    8764:	95000015 	stw	r20,0(r18)
    8768:	97000115 	stw	fp,4(r18)
    876c:	d8c02015 	stw	r3,128(sp)
    8770:	dc001f15 	stw	r16,124(sp)
    8774:	3c3ff60e 	bge	r7,r16,8750 <__alt_mem_Flash_flash_data+0xf4008750>
    8778:	9809883a 	mov	r4,r19
    877c:	b80b883a 	mov	r5,r23
    8780:	b00d883a 	mov	r6,r22
    8784:	d9c03e15 	stw	r7,248(sp)
    8788:	000fc4c0 	call	fc4c <__ssprint_r>
    878c:	d9c03e17 	ldw	r7,248(sp)
    8790:	103bec1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8794:	ad7ffc04 	addi	r21,r21,-16
    8798:	d8c02017 	ldw	r3,128(sp)
    879c:	dc001f17 	ldw	r16,124(sp)
    87a0:	dc800404 	addi	r18,sp,16
    87a4:	e57fed16 	blt	fp,r21,875c <__alt_mem_Flash_flash_data+0xf400875c>
    87a8:	dac02b17 	ldw	r11,172(sp)
    87ac:	1d47883a 	add	r3,r3,r21
    87b0:	84000044 	addi	r16,r16,1
    87b4:	92c00015 	stw	r11,0(r18)
    87b8:	95400115 	stw	r21,4(r18)
    87bc:	d8c02015 	stw	r3,128(sp)
    87c0:	dc001f15 	stw	r16,124(sp)
    87c4:	008001c4 	movi	r2,7
    87c8:	143f4d0e 	bge	r2,r16,8500 <__alt_mem_Flash_flash_data+0xf4008500>
    87cc:	d9002f17 	ldw	r4,188(sp)
    87d0:	b80b883a 	mov	r5,r23
    87d4:	b00d883a 	mov	r6,r22
    87d8:	000fc4c0 	call	fc4c <__ssprint_r>
    87dc:	103bd91e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    87e0:	d8c02017 	ldw	r3,128(sp)
    87e4:	dc001f17 	ldw	r16,124(sp)
    87e8:	dc800404 	addi	r18,sp,16
    87ec:	003f4506 	br	8504 <__alt_mem_Flash_flash_data+0xf4008504>
    87f0:	00800084 	movi	r2,2
    87f4:	9f06b03a 	or	r3,r19,fp
    87f8:	003d5706 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    87fc:	1cc00017 	ldw	r19,0(r3)
    8800:	dac02d17 	ldw	r11,180(sp)
    8804:	9839d7fa 	srai	fp,r19,31
    8808:	5ac00104 	addi	r11,r11,4
    880c:	dac02d15 	stw	r11,180(sp)
    8810:	e005883a 	mov	r2,fp
    8814:	003c0306 	br	7824 <__alt_mem_Flash_flash_data+0xf4007824>
    8818:	dac02d17 	ldw	r11,180(sp)
    881c:	0039883a 	mov	fp,zero
    8820:	0005883a 	mov	r2,zero
    8824:	5cc00017 	ldw	r19,0(r11)
    8828:	5ac00104 	addi	r11,r11,4
    882c:	dac02d15 	stw	r11,180(sp)
    8830:	9807883a 	mov	r3,r19
    8834:	003d4806 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    8838:	db002d17 	ldw	r12,180(sp)
    883c:	14c00017 	ldw	r19,0(r2)
    8840:	0039883a 	mov	fp,zero
    8844:	63000104 	addi	r12,r12,4
    8848:	db002d15 	stw	r12,180(sp)
    884c:	00800044 	movi	r2,1
    8850:	9807883a 	mov	r3,r19
    8854:	003d4006 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    8858:	d9002f17 	ldw	r4,188(sp)
    885c:	b80b883a 	mov	r5,r23
    8860:	b00d883a 	mov	r6,r22
    8864:	000fc4c0 	call	fc4c <__ssprint_r>
    8868:	103bb61e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    886c:	d8c02017 	ldw	r3,128(sp)
    8870:	da000404 	addi	r8,sp,16
    8874:	db003117 	ldw	r12,196(sp)
    8878:	dac03417 	ldw	r11,208(sp)
    887c:	d8802617 	ldw	r2,152(sp)
    8880:	62e5883a 	add	r18,r12,r11
    8884:	db003317 	ldw	r12,204(sp)
    8888:	13000216 	blt	r2,r12,8894 <___svfprintf_internal_r+0x1470>
    888c:	8900004c 	andi	r4,r17,1
    8890:	20000c26 	beq	r4,zero,88c4 <___svfprintf_internal_r+0x14a0>
    8894:	dac03917 	ldw	r11,228(sp)
    8898:	d9001f17 	ldw	r4,124(sp)
    889c:	db003517 	ldw	r12,212(sp)
    88a0:	1ac7883a 	add	r3,r3,r11
    88a4:	21000044 	addi	r4,r4,1
    88a8:	43000015 	stw	r12,0(r8)
    88ac:	42c00115 	stw	r11,4(r8)
    88b0:	d8c02015 	stw	r3,128(sp)
    88b4:	d9001f15 	stw	r4,124(sp)
    88b8:	014001c4 	movi	r5,7
    88bc:	2901b716 	blt	r5,r4,8f9c <___svfprintf_internal_r+0x1b78>
    88c0:	42000204 	addi	r8,r8,8
    88c4:	dac03317 	ldw	r11,204(sp)
    88c8:	8489c83a 	sub	r4,r16,r18
    88cc:	5885c83a 	sub	r2,r11,r2
    88d0:	1021883a 	mov	r16,r2
    88d4:	2080010e 	bge	r4,r2,88dc <___svfprintf_internal_r+0x14b8>
    88d8:	2021883a 	mov	r16,r4
    88dc:	04000a0e 	bge	zero,r16,8908 <___svfprintf_internal_r+0x14e4>
    88e0:	d9001f17 	ldw	r4,124(sp)
    88e4:	1c07883a 	add	r3,r3,r16
    88e8:	44800015 	stw	r18,0(r8)
    88ec:	21000044 	addi	r4,r4,1
    88f0:	44000115 	stw	r16,4(r8)
    88f4:	d8c02015 	stw	r3,128(sp)
    88f8:	d9001f15 	stw	r4,124(sp)
    88fc:	014001c4 	movi	r5,7
    8900:	2901bf16 	blt	r5,r4,9000 <___svfprintf_internal_r+0x1bdc>
    8904:	42000204 	addi	r8,r8,8
    8908:	8001bb16 	blt	r16,zero,8ff8 <___svfprintf_internal_r+0x1bd4>
    890c:	1421c83a 	sub	r16,r2,r16
    8910:	043c990e 	bge	zero,r16,7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    8914:	04800404 	movi	r18,16
    8918:	d8801f17 	ldw	r2,124(sp)
    891c:	943f0b0e 	bge	r18,r16,854c <__alt_mem_Flash_flash_data+0xf400854c>
    8920:	014000b4 	movhi	r5,2
    8924:	29432384 	addi	r5,r5,3214
    8928:	d9402b15 	stw	r5,172(sp)
    892c:	054001c4 	movi	r21,7
    8930:	dcc02f17 	ldw	r19,188(sp)
    8934:	00000306 	br	8944 <___svfprintf_internal_r+0x1520>
    8938:	42000204 	addi	r8,r8,8
    893c:	843ffc04 	addi	r16,r16,-16
    8940:	943f050e 	bge	r18,r16,8558 <__alt_mem_Flash_flash_data+0xf4008558>
    8944:	18c00404 	addi	r3,r3,16
    8948:	10800044 	addi	r2,r2,1
    894c:	45000015 	stw	r20,0(r8)
    8950:	44800115 	stw	r18,4(r8)
    8954:	d8c02015 	stw	r3,128(sp)
    8958:	d8801f15 	stw	r2,124(sp)
    895c:	a8bff60e 	bge	r21,r2,8938 <__alt_mem_Flash_flash_data+0xf4008938>
    8960:	9809883a 	mov	r4,r19
    8964:	b80b883a 	mov	r5,r23
    8968:	b00d883a 	mov	r6,r22
    896c:	000fc4c0 	call	fc4c <__ssprint_r>
    8970:	103b741e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8974:	d8c02017 	ldw	r3,128(sp)
    8978:	d8801f17 	ldw	r2,124(sp)
    897c:	da000404 	addi	r8,sp,16
    8980:	003fee06 	br	893c <__alt_mem_Flash_flash_data+0xf400893c>
    8984:	8888703a 	and	r4,r17,r2
    8988:	203eb31e 	bne	r4,zero,8458 <__alt_mem_Flash_flash_data+0xf4008458>
    898c:	dc001f17 	ldw	r16,124(sp)
    8990:	db003117 	ldw	r12,196(sp)
    8994:	40800115 	stw	r2,4(r8)
    8998:	84000044 	addi	r16,r16,1
    899c:	43000015 	stw	r12,0(r8)
    89a0:	d8c02015 	stw	r3,128(sp)
    89a4:	dc001f15 	stw	r16,124(sp)
    89a8:	008001c4 	movi	r2,7
    89ac:	143f8716 	blt	r2,r16,87cc <__alt_mem_Flash_flash_data+0xf40087cc>
    89b0:	44800204 	addi	r18,r8,8
    89b4:	003ed306 	br	8504 <__alt_mem_Flash_flash_data+0xf4008504>
    89b8:	d9002f17 	ldw	r4,188(sp)
    89bc:	b80b883a 	mov	r5,r23
    89c0:	b00d883a 	mov	r6,r22
    89c4:	000fc4c0 	call	fc4c <__ssprint_r>
    89c8:	103b5e1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    89cc:	d8c02017 	ldw	r3,128(sp)
    89d0:	dc001f17 	ldw	r16,124(sp)
    89d4:	da000404 	addi	r8,sp,16
    89d8:	003eaa06 	br	8484 <__alt_mem_Flash_flash_data+0xf4008484>
    89dc:	d9002f17 	ldw	r4,188(sp)
    89e0:	b80b883a 	mov	r5,r23
    89e4:	b00d883a 	mov	r6,r22
    89e8:	000fc4c0 	call	fc4c <__ssprint_r>
    89ec:	103b551e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    89f0:	d8c02017 	ldw	r3,128(sp)
    89f4:	dc001f17 	ldw	r16,124(sp)
    89f8:	dc800404 	addi	r18,sp,16
    89fc:	003eac06 	br	84b0 <__alt_mem_Flash_flash_data+0xf40084b0>
    8a00:	d9002f17 	ldw	r4,188(sp)
    8a04:	b80b883a 	mov	r5,r23
    8a08:	b00d883a 	mov	r6,r22
    8a0c:	000fc4c0 	call	fc4c <__ssprint_r>
    8a10:	103b4c1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8a14:	d8c02017 	ldw	r3,128(sp)
    8a18:	da000404 	addi	r8,sp,16
    8a1c:	003c1506 	br	7a74 <__alt_mem_Flash_flash_data+0xf4007a74>
    8a20:	da004015 	stw	r8,256(sp)
    8a24:	da403f15 	stw	r9,252(sp)
    8a28:	000f9f80 	call	f9f8 <__fpclassifyd>
    8a2c:	da004017 	ldw	r8,256(sp)
    8a30:	da403f17 	ldw	r9,252(sp)
    8a34:	1000951e 	bne	r2,zero,8c8c <___svfprintf_internal_r+0x1868>
    8a38:	008011c4 	movi	r2,71
    8a3c:	1400fb16 	blt	r2,r16,8e2c <___svfprintf_internal_r+0x1a08>
    8a40:	030000b4 	movhi	r12,2
    8a44:	63031504 	addi	r12,r12,3156
    8a48:	db003115 	stw	r12,196(sp)
    8a4c:	00c000c4 	movi	r3,3
    8a50:	00bfdfc4 	movi	r2,-129
    8a54:	d8c02a15 	stw	r3,168(sp)
    8a58:	88a2703a 	and	r17,r17,r2
    8a5c:	dd402783 	ldbu	r21,158(sp)
    8a60:	dcc02d15 	stw	r19,180(sp)
    8a64:	1825883a 	mov	r18,r3
    8a68:	d8003215 	stw	zero,200(sp)
    8a6c:	d8003415 	stw	zero,208(sp)
    8a70:	003b9806 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    8a74:	1c000007 	ldb	r16,0(r3)
    8a78:	1805883a 	mov	r2,r3
    8a7c:	003abf06 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    8a80:	00800084 	movi	r2,2
    8a84:	003cb406 	br	7d58 <__alt_mem_Flash_flash_data+0xf4007d58>
    8a88:	88c0100c 	andi	r3,r17,64
    8a8c:	1800f626 	beq	r3,zero,8e68 <___svfprintf_internal_r+0x1a44>
    8a90:	dac02d17 	ldw	r11,180(sp)
    8a94:	14c0000b 	ldhu	r19,0(r2)
    8a98:	0039883a 	mov	fp,zero
    8a9c:	5ac00104 	addi	r11,r11,4
    8aa0:	dac02d15 	stw	r11,180(sp)
    8aa4:	003cbd06 	br	7d9c <__alt_mem_Flash_flash_data+0xf4007d9c>
    8aa8:	8880040c 	andi	r2,r17,16
    8aac:	1000091e 	bne	r2,zero,8ad4 <___svfprintf_internal_r+0x16b0>
    8ab0:	8c40100c 	andi	r17,r17,64
    8ab4:	88000726 	beq	r17,zero,8ad4 <___svfprintf_internal_r+0x16b0>
    8ab8:	db002d17 	ldw	r12,180(sp)
    8abc:	dac03017 	ldw	r11,192(sp)
    8ac0:	60800017 	ldw	r2,0(r12)
    8ac4:	63000104 	addi	r12,r12,4
    8ac8:	db002d15 	stw	r12,180(sp)
    8acc:	12c0000d 	sth	r11,0(r2)
    8ad0:	003a8006 	br	74d4 <__alt_mem_Flash_flash_data+0xf40074d4>
    8ad4:	db002d17 	ldw	r12,180(sp)
    8ad8:	dac03017 	ldw	r11,192(sp)
    8adc:	60800017 	ldw	r2,0(r12)
    8ae0:	63000104 	addi	r12,r12,4
    8ae4:	db002d15 	stw	r12,180(sp)
    8ae8:	12c00015 	stw	r11,0(r2)
    8aec:	003a7906 	br	74d4 <__alt_mem_Flash_flash_data+0xf40074d4>
    8af0:	010000b4 	movhi	r4,2
    8af4:	21032384 	addi	r4,r4,3214
    8af8:	d9002b15 	stw	r4,172(sp)
    8afc:	dac02b17 	ldw	r11,172(sp)
    8b00:	1c87883a 	add	r3,r3,r18
    8b04:	10800044 	addi	r2,r2,1
    8b08:	42c00015 	stw	r11,0(r8)
    8b0c:	44800115 	stw	r18,4(r8)
    8b10:	d8c02015 	stw	r3,128(sp)
    8b14:	d8801f15 	stw	r2,124(sp)
    8b18:	010001c4 	movi	r4,7
    8b1c:	20bf4e16 	blt	r4,r2,8858 <__alt_mem_Flash_flash_data+0xf4008858>
    8b20:	42000204 	addi	r8,r8,8
    8b24:	003f5306 	br	8874 <__alt_mem_Flash_flash_data+0xf4008874>
    8b28:	010000b4 	movhi	r4,2
    8b2c:	21032384 	addi	r4,r4,3214
    8b30:	d9002b15 	stw	r4,172(sp)
    8b34:	003bf906 	br	7b1c <__alt_mem_Flash_flash_data+0xf4007b1c>
    8b38:	d9002f17 	ldw	r4,188(sp)
    8b3c:	b80b883a 	mov	r5,r23
    8b40:	b00d883a 	mov	r6,r22
    8b44:	000fc4c0 	call	fc4c <__ssprint_r>
    8b48:	103afe1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8b4c:	d8c02017 	ldw	r3,128(sp)
    8b50:	da000404 	addi	r8,sp,16
    8b54:	003dc606 	br	8270 <__alt_mem_Flash_flash_data+0xf4008270>
    8b58:	d8801f17 	ldw	r2,124(sp)
    8b5c:	030000b4 	movhi	r12,2
    8b60:	01000044 	movi	r4,1
    8b64:	18c00044 	addi	r3,r3,1
    8b68:	10800044 	addi	r2,r2,1
    8b6c:	63032304 	addi	r12,r12,3212
    8b70:	41000115 	stw	r4,4(r8)
    8b74:	43000015 	stw	r12,0(r8)
    8b78:	d8c02015 	stw	r3,128(sp)
    8b7c:	d8801f15 	stw	r2,124(sp)
    8b80:	010001c4 	movi	r4,7
    8b84:	2080ad16 	blt	r4,r2,8e3c <___svfprintf_internal_r+0x1a18>
    8b88:	42000204 	addi	r8,r8,8
    8b8c:	8000041e 	bne	r16,zero,8ba0 <___svfprintf_internal_r+0x177c>
    8b90:	dac03317 	ldw	r11,204(sp)
    8b94:	5800021e 	bne	r11,zero,8ba0 <___svfprintf_internal_r+0x177c>
    8b98:	8880004c 	andi	r2,r17,1
    8b9c:	103bf626 	beq	r2,zero,7b78 <__alt_mem_Flash_flash_data+0xf4007b78>
    8ba0:	db003917 	ldw	r12,228(sp)
    8ba4:	d8801f17 	ldw	r2,124(sp)
    8ba8:	dac03517 	ldw	r11,212(sp)
    8bac:	1b07883a 	add	r3,r3,r12
    8bb0:	10800044 	addi	r2,r2,1
    8bb4:	42c00015 	stw	r11,0(r8)
    8bb8:	43000115 	stw	r12,4(r8)
    8bbc:	d8c02015 	stw	r3,128(sp)
    8bc0:	d8801f15 	stw	r2,124(sp)
    8bc4:	010001c4 	movi	r4,7
    8bc8:	20818616 	blt	r4,r2,91e4 <___svfprintf_internal_r+0x1dc0>
    8bcc:	42000204 	addi	r8,r8,8
    8bd0:	0421c83a 	sub	r16,zero,r16
    8bd4:	0400bc0e 	bge	zero,r16,8ec8 <___svfprintf_internal_r+0x1aa4>
    8bd8:	04800404 	movi	r18,16
    8bdc:	9400f80e 	bge	r18,r16,8fc0 <___svfprintf_internal_r+0x1b9c>
    8be0:	010000b4 	movhi	r4,2
    8be4:	21032384 	addi	r4,r4,3214
    8be8:	d9002b15 	stw	r4,172(sp)
    8bec:	054001c4 	movi	r21,7
    8bf0:	dcc02f17 	ldw	r19,188(sp)
    8bf4:	00000306 	br	8c04 <___svfprintf_internal_r+0x17e0>
    8bf8:	42000204 	addi	r8,r8,8
    8bfc:	843ffc04 	addi	r16,r16,-16
    8c00:	9400f20e 	bge	r18,r16,8fcc <___svfprintf_internal_r+0x1ba8>
    8c04:	18c00404 	addi	r3,r3,16
    8c08:	10800044 	addi	r2,r2,1
    8c0c:	45000015 	stw	r20,0(r8)
    8c10:	44800115 	stw	r18,4(r8)
    8c14:	d8c02015 	stw	r3,128(sp)
    8c18:	d8801f15 	stw	r2,124(sp)
    8c1c:	a8bff60e 	bge	r21,r2,8bf8 <__alt_mem_Flash_flash_data+0xf4008bf8>
    8c20:	9809883a 	mov	r4,r19
    8c24:	b80b883a 	mov	r5,r23
    8c28:	b00d883a 	mov	r6,r22
    8c2c:	000fc4c0 	call	fc4c <__ssprint_r>
    8c30:	103ac41e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8c34:	d8c02017 	ldw	r3,128(sp)
    8c38:	d8801f17 	ldw	r2,124(sp)
    8c3c:	da000404 	addi	r8,sp,16
    8c40:	003fee06 	br	8bfc <__alt_mem_Flash_flash_data+0xf4008bfc>
    8c44:	db002e17 	ldw	r12,184(sp)
    8c48:	1805883a 	mov	r2,r3
    8c4c:	dac02d15 	stw	r11,180(sp)
    8c50:	0319c83a 	sub	r12,zero,r12
    8c54:	db002e15 	stw	r12,184(sp)
    8c58:	003acf06 	br	7798 <__alt_mem_Flash_flash_data+0xf4007798>
    8c5c:	18800044 	addi	r2,r3,1
    8c60:	8c400814 	ori	r17,r17,32
    8c64:	1c000047 	ldb	r16,1(r3)
    8c68:	003a4406 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    8c6c:	d9002f17 	ldw	r4,188(sp)
    8c70:	b80b883a 	mov	r5,r23
    8c74:	b00d883a 	mov	r6,r22
    8c78:	000fc4c0 	call	fc4c <__ssprint_r>
    8c7c:	103ab11e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8c80:	d8c02017 	ldw	r3,128(sp)
    8c84:	da000404 	addi	r8,sp,16
    8c88:	003d8a06 	br	82b4 <__alt_mem_Flash_flash_data+0xf40082b4>
    8c8c:	057ff7c4 	movi	r21,-33
    8c90:	00bfffc4 	movi	r2,-1
    8c94:	856a703a 	and	r21,r16,r21
    8c98:	48807126 	beq	r9,r2,8e60 <___svfprintf_internal_r+0x1a3c>
    8c9c:	008011c4 	movi	r2,71
    8ca0:	a8814d26 	beq	r21,r2,91d8 <___svfprintf_internal_r+0x1db4>
    8ca4:	db003817 	ldw	r12,224(sp)
    8ca8:	8ac04014 	ori	r11,r17,256
    8cac:	dac02d15 	stw	r11,180(sp)
    8cb0:	60015616 	blt	r12,zero,920c <___svfprintf_internal_r+0x1de8>
    8cb4:	dc803817 	ldw	r18,224(sp)
    8cb8:	d8002a05 	stb	zero,168(sp)
    8cbc:	00801984 	movi	r2,102
    8cc0:	80808c26 	beq	r16,r2,8ef4 <___svfprintf_internal_r+0x1ad0>
    8cc4:	00801184 	movi	r2,70
    8cc8:	80808a26 	beq	r16,r2,8ef4 <___svfprintf_internal_r+0x1ad0>
    8ccc:	00801144 	movi	r2,69
    8cd0:	a8815226 	beq	r21,r2,921c <___svfprintf_internal_r+0x1df8>
    8cd4:	4839883a 	mov	fp,r9
    8cd8:	d8802604 	addi	r2,sp,152
    8cdc:	d8800115 	stw	r2,4(sp)
    8ce0:	d9002f17 	ldw	r4,188(sp)
    8ce4:	d8802504 	addi	r2,sp,148
    8ce8:	d9403717 	ldw	r5,220(sp)
    8cec:	d8800215 	stw	r2,8(sp)
    8cf0:	d8802104 	addi	r2,sp,132
    8cf4:	df000015 	stw	fp,0(sp)
    8cf8:	d8800315 	stw	r2,12(sp)
    8cfc:	900d883a 	mov	r6,r18
    8d00:	01c00084 	movi	r7,2
    8d04:	da004015 	stw	r8,256(sp)
    8d08:	da403f15 	stw	r9,252(sp)
    8d0c:	000b7380 	call	b738 <_dtoa_r>
    8d10:	d8803115 	stw	r2,196(sp)
    8d14:	008019c4 	movi	r2,103
    8d18:	da004017 	ldw	r8,256(sp)
    8d1c:	da403f17 	ldw	r9,252(sp)
    8d20:	80800226 	beq	r16,r2,8d2c <___svfprintf_internal_r+0x1908>
    8d24:	008011c4 	movi	r2,71
    8d28:	8080841e 	bne	r16,r2,8f3c <___svfprintf_internal_r+0x1b18>
    8d2c:	8880004c 	andi	r2,r17,1
    8d30:	10014f26 	beq	r2,zero,9270 <___svfprintf_internal_r+0x1e4c>
    8d34:	db003117 	ldw	r12,196(sp)
    8d38:	6715883a 	add	r10,r12,fp
    8d3c:	d9003717 	ldw	r4,220(sp)
    8d40:	900b883a 	mov	r5,r18
    8d44:	000d883a 	mov	r6,zero
    8d48:	000f883a 	mov	r7,zero
    8d4c:	da004015 	stw	r8,256(sp)
    8d50:	da403f15 	stw	r9,252(sp)
    8d54:	da803e15 	stw	r10,248(sp)
    8d58:	000528c0 	call	528c <__eqdf2>
    8d5c:	da004017 	ldw	r8,256(sp)
    8d60:	da403f17 	ldw	r9,252(sp)
    8d64:	da803e17 	ldw	r10,248(sp)
    8d68:	1000d926 	beq	r2,zero,90d0 <___svfprintf_internal_r+0x1cac>
    8d6c:	d8802117 	ldw	r2,132(sp)
    8d70:	1280062e 	bgeu	r2,r10,8d8c <___svfprintf_internal_r+0x1968>
    8d74:	01000c04 	movi	r4,48
    8d78:	10c00044 	addi	r3,r2,1
    8d7c:	d8c02115 	stw	r3,132(sp)
    8d80:	11000005 	stb	r4,0(r2)
    8d84:	d8802117 	ldw	r2,132(sp)
    8d88:	12bffb36 	bltu	r2,r10,8d78 <__alt_mem_Flash_flash_data+0xf4008d78>
    8d8c:	db003117 	ldw	r12,196(sp)
    8d90:	1305c83a 	sub	r2,r2,r12
    8d94:	d8803315 	stw	r2,204(sp)
    8d98:	008011c4 	movi	r2,71
    8d9c:	a880b626 	beq	r21,r2,9078 <___svfprintf_internal_r+0x1c54>
    8da0:	00801944 	movi	r2,101
    8da4:	14017c0e 	bge	r2,r16,9398 <___svfprintf_internal_r+0x1f74>
    8da8:	00801984 	movi	r2,102
    8dac:	80812626 	beq	r16,r2,9248 <___svfprintf_internal_r+0x1e24>
    8db0:	db002617 	ldw	r12,152(sp)
    8db4:	db003415 	stw	r12,208(sp)
    8db8:	db003417 	ldw	r12,208(sp)
    8dbc:	dac03317 	ldw	r11,204(sp)
    8dc0:	62c11816 	blt	r12,r11,9224 <___svfprintf_internal_r+0x1e00>
    8dc4:	8c40004c 	andi	r17,r17,1
    8dc8:	88013b1e 	bne	r17,zero,92b8 <___svfprintf_internal_r+0x1e94>
    8dcc:	6005883a 	mov	r2,r12
    8dd0:	60012516 	blt	r12,zero,9268 <___svfprintf_internal_r+0x1e44>
    8dd4:	dc803417 	ldw	r18,208(sp)
    8dd8:	df002a07 	ldb	fp,168(sp)
    8ddc:	e000b01e 	bne	fp,zero,90a0 <___svfprintf_internal_r+0x1c7c>
    8de0:	dc402d17 	ldw	r17,180(sp)
    8de4:	dd402783 	ldbu	r21,158(sp)
    8de8:	d8802a15 	stw	r2,168(sp)
    8dec:	dcc02d15 	stw	r19,180(sp)
    8df0:	d8003215 	stw	zero,200(sp)
    8df4:	003ab706 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    8df8:	008000b4 	movhi	r2,2
    8dfc:	10831304 	addi	r2,r2,3148
    8e00:	d8803115 	stw	r2,196(sp)
    8e04:	003bbb06 	br	7cf4 <__alt_mem_Flash_flash_data+0xf4007cf4>
    8e08:	d9002f17 	ldw	r4,188(sp)
    8e0c:	04001004 	movi	r16,64
    8e10:	800b883a 	mov	r5,r16
    8e14:	00068700 	call	6870 <_malloc_r>
    8e18:	b8800015 	stw	r2,0(r23)
    8e1c:	b8800415 	stw	r2,16(r23)
    8e20:	10015f26 	beq	r2,zero,93a0 <___svfprintf_internal_r+0x1f7c>
    8e24:	bc000515 	stw	r16,20(r23)
    8e28:	00399806 	br	748c <__alt_mem_Flash_flash_data+0xf400748c>
    8e2c:	008000b4 	movhi	r2,2
    8e30:	10831604 	addi	r2,r2,3160
    8e34:	d8803115 	stw	r2,196(sp)
    8e38:	003f0406 	br	8a4c <__alt_mem_Flash_flash_data+0xf4008a4c>
    8e3c:	d9002f17 	ldw	r4,188(sp)
    8e40:	b80b883a 	mov	r5,r23
    8e44:	b00d883a 	mov	r6,r22
    8e48:	000fc4c0 	call	fc4c <__ssprint_r>
    8e4c:	103a3d1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8e50:	dc002617 	ldw	r16,152(sp)
    8e54:	d8c02017 	ldw	r3,128(sp)
    8e58:	da000404 	addi	r8,sp,16
    8e5c:	003f4b06 	br	8b8c <__alt_mem_Flash_flash_data+0xf4008b8c>
    8e60:	02400184 	movi	r9,6
    8e64:	003f8f06 	br	8ca4 <__alt_mem_Flash_flash_data+0xf4008ca4>
    8e68:	db002d17 	ldw	r12,180(sp)
    8e6c:	14c00017 	ldw	r19,0(r2)
    8e70:	0039883a 	mov	fp,zero
    8e74:	63000104 	addi	r12,r12,4
    8e78:	db002d15 	stw	r12,180(sp)
    8e7c:	003bc706 	br	7d9c <__alt_mem_Flash_flash_data+0xf4007d9c>
    8e80:	d8c03117 	ldw	r3,196(sp)
    8e84:	b0e5c83a 	sub	r18,r22,r3
    8e88:	003a8d06 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>
    8e8c:	da004015 	stw	r8,256(sp)
    8e90:	000738c0 	call	738c <strlen>
    8e94:	1025883a 	mov	r18,r2
    8e98:	da004017 	ldw	r8,256(sp)
    8e9c:	903bf20e 	bge	r18,zero,7e68 <__alt_mem_Flash_flash_data+0xf4007e68>
    8ea0:	0005883a 	mov	r2,zero
    8ea4:	003bf006 	br	7e68 <__alt_mem_Flash_flash_data+0xf4007e68>
    8ea8:	d9002f17 	ldw	r4,188(sp)
    8eac:	b80b883a 	mov	r5,r23
    8eb0:	b00d883a 	mov	r6,r22
    8eb4:	000fc4c0 	call	fc4c <__ssprint_r>
    8eb8:	103a221e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8ebc:	d8c02017 	ldw	r3,128(sp)
    8ec0:	d8801f17 	ldw	r2,124(sp)
    8ec4:	da000404 	addi	r8,sp,16
    8ec8:	db003317 	ldw	r12,204(sp)
    8ecc:	dac03117 	ldw	r11,196(sp)
    8ed0:	10800044 	addi	r2,r2,1
    8ed4:	1b07883a 	add	r3,r3,r12
    8ed8:	42c00015 	stw	r11,0(r8)
    8edc:	43000115 	stw	r12,4(r8)
    8ee0:	d8c02015 	stw	r3,128(sp)
    8ee4:	d8801f15 	stw	r2,124(sp)
    8ee8:	010001c4 	movi	r4,7
    8eec:	20bb210e 	bge	r4,r2,7b74 <__alt_mem_Flash_flash_data+0xf4007b74>
    8ef0:	003da206 	br	857c <__alt_mem_Flash_flash_data+0xf400857c>
    8ef4:	d8802604 	addi	r2,sp,152
    8ef8:	d8800115 	stw	r2,4(sp)
    8efc:	d9002f17 	ldw	r4,188(sp)
    8f00:	d8802504 	addi	r2,sp,148
    8f04:	d9403717 	ldw	r5,220(sp)
    8f08:	d8800215 	stw	r2,8(sp)
    8f0c:	d8802104 	addi	r2,sp,132
    8f10:	da400015 	stw	r9,0(sp)
    8f14:	d8800315 	stw	r2,12(sp)
    8f18:	900d883a 	mov	r6,r18
    8f1c:	01c000c4 	movi	r7,3
    8f20:	da004015 	stw	r8,256(sp)
    8f24:	da403f15 	stw	r9,252(sp)
    8f28:	000b7380 	call	b738 <_dtoa_r>
    8f2c:	da403f17 	ldw	r9,252(sp)
    8f30:	da004017 	ldw	r8,256(sp)
    8f34:	d8803115 	stw	r2,196(sp)
    8f38:	4839883a 	mov	fp,r9
    8f3c:	dac03117 	ldw	r11,196(sp)
    8f40:	00801184 	movi	r2,70
    8f44:	5f15883a 	add	r10,r11,fp
    8f48:	a8bf7c1e 	bne	r21,r2,8d3c <__alt_mem_Flash_flash_data+0xf4008d3c>
    8f4c:	59000007 	ldb	r4,0(r11)
    8f50:	00800c04 	movi	r2,48
    8f54:	2080c826 	beq	r4,r2,9278 <___svfprintf_internal_r+0x1e54>
    8f58:	d8c02617 	ldw	r3,152(sp)
    8f5c:	50d5883a 	add	r10,r10,r3
    8f60:	003f7606 	br	8d3c <__alt_mem_Flash_flash_data+0xf4008d3c>
    8f64:	010000b4 	movhi	r4,2
    8f68:	21032784 	addi	r4,r4,3230
    8f6c:	d9003615 	stw	r4,216(sp)
    8f70:	003a9706 	br	79d0 <__alt_mem_Flash_flash_data+0xf40079d0>
    8f74:	0025883a 	mov	r18,zero
    8f78:	003dc306 	br	8688 <__alt_mem_Flash_flash_data+0xf4008688>
    8f7c:	d9002f17 	ldw	r4,188(sp)
    8f80:	b80b883a 	mov	r5,r23
    8f84:	b00d883a 	mov	r6,r22
    8f88:	000fc4c0 	call	fc4c <__ssprint_r>
    8f8c:	1039ed1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8f90:	d8c02017 	ldw	r3,128(sp)
    8f94:	da000404 	addi	r8,sp,16
    8f98:	003dba06 	br	8684 <__alt_mem_Flash_flash_data+0xf4008684>
    8f9c:	d9002f17 	ldw	r4,188(sp)
    8fa0:	b80b883a 	mov	r5,r23
    8fa4:	b00d883a 	mov	r6,r22
    8fa8:	000fc4c0 	call	fc4c <__ssprint_r>
    8fac:	1039e51e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    8fb0:	d8802617 	ldw	r2,152(sp)
    8fb4:	d8c02017 	ldw	r3,128(sp)
    8fb8:	da000404 	addi	r8,sp,16
    8fbc:	003e4106 	br	88c4 <__alt_mem_Flash_flash_data+0xf40088c4>
    8fc0:	030000b4 	movhi	r12,2
    8fc4:	63032384 	addi	r12,r12,3214
    8fc8:	db002b15 	stw	r12,172(sp)
    8fcc:	dac02b17 	ldw	r11,172(sp)
    8fd0:	1c07883a 	add	r3,r3,r16
    8fd4:	10800044 	addi	r2,r2,1
    8fd8:	42c00015 	stw	r11,0(r8)
    8fdc:	44000115 	stw	r16,4(r8)
    8fe0:	d8c02015 	stw	r3,128(sp)
    8fe4:	d8801f15 	stw	r2,124(sp)
    8fe8:	010001c4 	movi	r4,7
    8fec:	20bfae16 	blt	r4,r2,8ea8 <__alt_mem_Flash_flash_data+0xf4008ea8>
    8ff0:	42000204 	addi	r8,r8,8
    8ff4:	003fb406 	br	8ec8 <__alt_mem_Flash_flash_data+0xf4008ec8>
    8ff8:	0021883a 	mov	r16,zero
    8ffc:	003e4306 	br	890c <__alt_mem_Flash_flash_data+0xf400890c>
    9000:	d9002f17 	ldw	r4,188(sp)
    9004:	b80b883a 	mov	r5,r23
    9008:	b00d883a 	mov	r6,r22
    900c:	000fc4c0 	call	fc4c <__ssprint_r>
    9010:	1039cc1e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    9014:	d8802617 	ldw	r2,152(sp)
    9018:	db003317 	ldw	r12,204(sp)
    901c:	d8c02017 	ldw	r3,128(sp)
    9020:	da000404 	addi	r8,sp,16
    9024:	6085c83a 	sub	r2,r12,r2
    9028:	003e3706 	br	8908 <__alt_mem_Flash_flash_data+0xf4008908>
    902c:	00800184 	movi	r2,6
    9030:	1240012e 	bgeu	r2,r9,9038 <___svfprintf_internal_r+0x1c14>
    9034:	1013883a 	mov	r9,r2
    9038:	4825883a 	mov	r18,r9
    903c:	4805883a 	mov	r2,r9
    9040:	4800a216 	blt	r9,zero,92cc <___svfprintf_internal_r+0x1ea8>
    9044:	d8802a15 	stw	r2,168(sp)
    9048:	008000b4 	movhi	r2,2
    904c:	10832104 	addi	r2,r2,3204
    9050:	d8803115 	stw	r2,196(sp)
    9054:	dcc02d15 	stw	r19,180(sp)
    9058:	d8003215 	stw	zero,200(sp)
    905c:	d8003415 	stw	zero,208(sp)
    9060:	0005883a 	mov	r2,zero
    9064:	003a2206 	br	78f0 <__alt_mem_Flash_flash_data+0xf40078f0>
    9068:	030000b4 	movhi	r12,2
    906c:	63032784 	addi	r12,r12,3230
    9070:	db003615 	stw	r12,216(sp)
    9074:	003ae506 	br	7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    9078:	d8c02617 	ldw	r3,152(sp)
    907c:	00bfff44 	movi	r2,-3
    9080:	18801516 	blt	r3,r2,90d8 <___svfprintf_internal_r+0x1cb4>
    9084:	48c01416 	blt	r9,r3,90d8 <___svfprintf_internal_r+0x1cb4>
    9088:	d8c03415 	stw	r3,208(sp)
    908c:	040019c4 	movi	r16,103
    9090:	003f4906 	br	8db8 <__alt_mem_Flash_flash_data+0xf4008db8>
    9094:	05400b44 	movi	r21,45
    9098:	dd402785 	stb	r21,158(sp)
    909c:	003b1006 	br	7ce0 <__alt_mem_Flash_flash_data+0xf4007ce0>
    90a0:	00c00b44 	movi	r3,45
    90a4:	d8802a15 	stw	r2,168(sp)
    90a8:	dc402d17 	ldw	r17,180(sp)
    90ac:	d8c02785 	stb	r3,158(sp)
    90b0:	dcc02d15 	stw	r19,180(sp)
    90b4:	d8003215 	stw	zero,200(sp)
    90b8:	00800b44 	movi	r2,45
    90bc:	003a0906 	br	78e4 <__alt_mem_Flash_flash_data+0xf40078e4>
    90c0:	010000b4 	movhi	r4,2
    90c4:	21032384 	addi	r4,r4,3214
    90c8:	d9002b15 	stw	r4,172(sp)
    90cc:	003cc306 	br	83dc <__alt_mem_Flash_flash_data+0xf40083dc>
    90d0:	5005883a 	mov	r2,r10
    90d4:	003f2d06 	br	8d8c <__alt_mem_Flash_flash_data+0xf4008d8c>
    90d8:	843fff84 	addi	r16,r16,-2
    90dc:	1f3fffc4 	addi	fp,r3,-1
    90e0:	df002615 	stw	fp,152(sp)
    90e4:	dc0022c5 	stb	r16,139(sp)
    90e8:	e000a016 	blt	fp,zero,936c <___svfprintf_internal_r+0x1f48>
    90ec:	00800ac4 	movi	r2,43
    90f0:	d8802305 	stb	r2,140(sp)
    90f4:	00800244 	movi	r2,9
    90f8:	1700800e 	bge	r2,fp,92fc <___svfprintf_internal_r+0x1ed8>
    90fc:	dd4022c4 	addi	r21,sp,139
    9100:	dc002b15 	stw	r16,172(sp)
    9104:	4025883a 	mov	r18,r8
    9108:	a821883a 	mov	r16,r21
    910c:	e009883a 	mov	r4,fp
    9110:	01400284 	movi	r5,10
    9114:	00045f40 	call	45f4 <__modsi3>
    9118:	10800c04 	addi	r2,r2,48
    911c:	843fffc4 	addi	r16,r16,-1
    9120:	e009883a 	mov	r4,fp
    9124:	01400284 	movi	r5,10
    9128:	80800005 	stb	r2,0(r16)
    912c:	00045a00 	call	45a0 <__divsi3>
    9130:	1039883a 	mov	fp,r2
    9134:	00800244 	movi	r2,9
    9138:	173ff416 	blt	r2,fp,910c <__alt_mem_Flash_flash_data+0xf400910c>
    913c:	9011883a 	mov	r8,r18
    9140:	e0800c04 	addi	r2,fp,48
    9144:	8025883a 	mov	r18,r16
    9148:	913fffc4 	addi	r4,r18,-1
    914c:	90bfffc5 	stb	r2,-1(r18)
    9150:	dc002b17 	ldw	r16,172(sp)
    9154:	25408e2e 	bgeu	r4,r21,9390 <___svfprintf_internal_r+0x1f6c>
    9158:	d9402384 	addi	r5,sp,142
    915c:	2c8bc83a 	sub	r5,r5,r18
    9160:	d8c02344 	addi	r3,sp,141
    9164:	a94b883a 	add	r5,r21,r5
    9168:	00000106 	br	9170 <___svfprintf_internal_r+0x1d4c>
    916c:	20800003 	ldbu	r2,0(r4)
    9170:	18800005 	stb	r2,0(r3)
    9174:	18c00044 	addi	r3,r3,1
    9178:	21000044 	addi	r4,r4,1
    917c:	197ffb1e 	bne	r3,r5,916c <__alt_mem_Flash_flash_data+0xf400916c>
    9180:	d8802304 	addi	r2,sp,140
    9184:	1485c83a 	sub	r2,r2,r18
    9188:	d8c02344 	addi	r3,sp,141
    918c:	1885883a 	add	r2,r3,r2
    9190:	dac03317 	ldw	r11,204(sp)
    9194:	156bc83a 	sub	r21,r2,r21
    9198:	dd403a15 	stw	r21,232(sp)
    919c:	00800044 	movi	r2,1
    91a0:	5d65883a 	add	r18,r11,r21
    91a4:	12c0770e 	bge	r2,r11,9384 <___svfprintf_internal_r+0x1f60>
    91a8:	94800044 	addi	r18,r18,1
    91ac:	9005883a 	mov	r2,r18
    91b0:	90007216 	blt	r18,zero,937c <___svfprintf_internal_r+0x1f58>
    91b4:	d8003415 	stw	zero,208(sp)
    91b8:	003f0706 	br	8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    91bc:	da402a15 	stw	r9,168(sp)
    91c0:	dd402783 	ldbu	r21,158(sp)
    91c4:	4825883a 	mov	r18,r9
    91c8:	dcc02d15 	stw	r19,180(sp)
    91cc:	d8003215 	stw	zero,200(sp)
    91d0:	d8003415 	stw	zero,208(sp)
    91d4:	0039bf06 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    91d8:	483eb21e 	bne	r9,zero,8ca4 <__alt_mem_Flash_flash_data+0xf4008ca4>
    91dc:	9013883a 	mov	r9,r18
    91e0:	003eb006 	br	8ca4 <__alt_mem_Flash_flash_data+0xf4008ca4>
    91e4:	d9002f17 	ldw	r4,188(sp)
    91e8:	b80b883a 	mov	r5,r23
    91ec:	b00d883a 	mov	r6,r22
    91f0:	000fc4c0 	call	fc4c <__ssprint_r>
    91f4:	1039531e 	bne	r2,zero,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    91f8:	dc002617 	ldw	r16,152(sp)
    91fc:	d8c02017 	ldw	r3,128(sp)
    9200:	d8801f17 	ldw	r2,124(sp)
    9204:	da000404 	addi	r8,sp,16
    9208:	003e7106 	br	8bd0 <__alt_mem_Flash_flash_data+0xf4008bd0>
    920c:	00c00b44 	movi	r3,45
    9210:	64a0003c 	xorhi	r18,r12,32768
    9214:	d8c02a05 	stb	r3,168(sp)
    9218:	003ea806 	br	8cbc <__alt_mem_Flash_flash_data+0xf4008cbc>
    921c:	4f000044 	addi	fp,r9,1
    9220:	003ead06 	br	8cd8 <__alt_mem_Flash_flash_data+0xf4008cd8>
    9224:	d8c03417 	ldw	r3,208(sp)
    9228:	00c0410e 	bge	zero,r3,9330 <___svfprintf_internal_r+0x1f0c>
    922c:	04800044 	movi	r18,1
    9230:	dac03317 	ldw	r11,204(sp)
    9234:	92e5883a 	add	r18,r18,r11
    9238:	9005883a 	mov	r2,r18
    923c:	903ee60e 	bge	r18,zero,8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    9240:	0005883a 	mov	r2,zero
    9244:	003ee406 	br	8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    9248:	d8c02617 	ldw	r3,152(sp)
    924c:	d8c03415 	stw	r3,208(sp)
    9250:	00c0310e 	bge	zero,r3,9318 <___svfprintf_internal_r+0x1ef4>
    9254:	48001f1e 	bne	r9,zero,92d4 <___svfprintf_internal_r+0x1eb0>
    9258:	8c40004c 	andi	r17,r17,1
    925c:	88001d1e 	bne	r17,zero,92d4 <___svfprintf_internal_r+0x1eb0>
    9260:	1805883a 	mov	r2,r3
    9264:	183edb0e 	bge	r3,zero,8dd4 <__alt_mem_Flash_flash_data+0xf4008dd4>
    9268:	0005883a 	mov	r2,zero
    926c:	003ed906 	br	8dd4 <__alt_mem_Flash_flash_data+0xf4008dd4>
    9270:	d8802117 	ldw	r2,132(sp)
    9274:	003ec506 	br	8d8c <__alt_mem_Flash_flash_data+0xf4008d8c>
    9278:	d9003717 	ldw	r4,220(sp)
    927c:	900b883a 	mov	r5,r18
    9280:	000d883a 	mov	r6,zero
    9284:	000f883a 	mov	r7,zero
    9288:	da004015 	stw	r8,256(sp)
    928c:	da403f15 	stw	r9,252(sp)
    9290:	da803e15 	stw	r10,248(sp)
    9294:	000528c0 	call	528c <__eqdf2>
    9298:	da004017 	ldw	r8,256(sp)
    929c:	da403f17 	ldw	r9,252(sp)
    92a0:	da803e17 	ldw	r10,248(sp)
    92a4:	103f2c26 	beq	r2,zero,8f58 <__alt_mem_Flash_flash_data+0xf4008f58>
    92a8:	00800044 	movi	r2,1
    92ac:	1707c83a 	sub	r3,r2,fp
    92b0:	d8c02615 	stw	r3,152(sp)
    92b4:	003f2906 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    92b8:	db003417 	ldw	r12,208(sp)
    92bc:	64800044 	addi	r18,r12,1
    92c0:	9005883a 	mov	r2,r18
    92c4:	903ec40e 	bge	r18,zero,8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    92c8:	003fdd06 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    92cc:	0005883a 	mov	r2,zero
    92d0:	003f5c06 	br	9044 <__alt_mem_Flash_flash_data+0xf4009044>
    92d4:	dac03417 	ldw	r11,208(sp)
    92d8:	4a400044 	addi	r9,r9,1
    92dc:	5a65883a 	add	r18,r11,r9
    92e0:	9005883a 	mov	r2,r18
    92e4:	903ebc0e 	bge	r18,zero,8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    92e8:	003fd506 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    92ec:	008000b4 	movhi	r2,2
    92f0:	10832384 	addi	r2,r2,3214
    92f4:	d8802b15 	stw	r2,172(sp)
    92f8:	003d2b06 	br	87a8 <__alt_mem_Flash_flash_data+0xf40087a8>
    92fc:	00800c04 	movi	r2,48
    9300:	e0c00c04 	addi	r3,fp,48
    9304:	d8802345 	stb	r2,141(sp)
    9308:	d8c02385 	stb	r3,142(sp)
    930c:	d88023c4 	addi	r2,sp,143
    9310:	dd4022c4 	addi	r21,sp,139
    9314:	003f9e06 	br	9190 <__alt_mem_Flash_flash_data+0xf4009190>
    9318:	4800081e 	bne	r9,zero,933c <___svfprintf_internal_r+0x1f18>
    931c:	8c40004c 	andi	r17,r17,1
    9320:	8800061e 	bne	r17,zero,933c <___svfprintf_internal_r+0x1f18>
    9324:	00800044 	movi	r2,1
    9328:	1025883a 	mov	r18,r2
    932c:	003eaa06 	br	8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    9330:	04800084 	movi	r18,2
    9334:	90e5c83a 	sub	r18,r18,r3
    9338:	003fbd06 	br	9230 <__alt_mem_Flash_flash_data+0xf4009230>
    933c:	4c800084 	addi	r18,r9,2
    9340:	9005883a 	mov	r2,r18
    9344:	903ea40e 	bge	r18,zero,8dd8 <__alt_mem_Flash_flash_data+0xf4008dd8>
    9348:	003fbd06 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    934c:	dac02d17 	ldw	r11,180(sp)
    9350:	5a400017 	ldw	r9,0(r11)
    9354:	5ac00104 	addi	r11,r11,4
    9358:	dac02d15 	stw	r11,180(sp)
    935c:	483e410e 	bge	r9,zero,8c64 <__alt_mem_Flash_flash_data+0xf4008c64>
    9360:	027fffc4 	movi	r9,-1
    9364:	1c000047 	ldb	r16,1(r3)
    9368:	00388406 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    936c:	00800b44 	movi	r2,45
    9370:	0739c83a 	sub	fp,zero,fp
    9374:	d8802305 	stb	r2,140(sp)
    9378:	003f5e06 	br	90f4 <__alt_mem_Flash_flash_data+0xf40090f4>
    937c:	0005883a 	mov	r2,zero
    9380:	003f8c06 	br	91b4 <__alt_mem_Flash_flash_data+0xf40091b4>
    9384:	88a2703a 	and	r17,r17,r2
    9388:	883f8826 	beq	r17,zero,91ac <__alt_mem_Flash_flash_data+0xf40091ac>
    938c:	003f8606 	br	91a8 <__alt_mem_Flash_flash_data+0xf40091a8>
    9390:	d8802344 	addi	r2,sp,141
    9394:	003f7e06 	br	9190 <__alt_mem_Flash_flash_data+0xf4009190>
    9398:	d8c02617 	ldw	r3,152(sp)
    939c:	003f4f06 	br	90dc <__alt_mem_Flash_flash_data+0xf40090dc>
    93a0:	dac02f17 	ldw	r11,188(sp)
    93a4:	00800304 	movi	r2,12
    93a8:	58800015 	stw	r2,0(r11)
    93ac:	00bfffc4 	movi	r2,-1
    93b0:	0038e806 	br	7754 <__alt_mem_Flash_flash_data+0xf4007754>

000093b4 <___vfprintf_internal_r>:
    93b4:	deffb604 	addi	sp,sp,-296
    93b8:	dfc04915 	stw	ra,292(sp)
    93bc:	ddc04715 	stw	r23,284(sp)
    93c0:	dd804615 	stw	r22,280(sp)
    93c4:	282f883a 	mov	r23,r5
    93c8:	202d883a 	mov	r22,r4
    93cc:	d9802a15 	stw	r6,168(sp)
    93d0:	d9c02d15 	stw	r7,180(sp)
    93d4:	df004815 	stw	fp,288(sp)
    93d8:	dd404515 	stw	r21,276(sp)
    93dc:	dd004415 	stw	r20,272(sp)
    93e0:	dcc04315 	stw	r19,268(sp)
    93e4:	dc804215 	stw	r18,264(sp)
    93e8:	dc404115 	stw	r17,260(sp)
    93ec:	dc004015 	stw	r16,256(sp)
    93f0:	000df9c0 	call	df9c <_localeconv_r>
    93f4:	10800017 	ldw	r2,0(r2)
    93f8:	1009883a 	mov	r4,r2
    93fc:	d8803515 	stw	r2,212(sp)
    9400:	000738c0 	call	738c <strlen>
    9404:	d8803815 	stw	r2,224(sp)
    9408:	b0000226 	beq	r22,zero,9414 <___vfprintf_internal_r+0x60>
    940c:	b0800e17 	ldw	r2,56(r22)
    9410:	1000e126 	beq	r2,zero,9798 <___vfprintf_internal_r+0x3e4>
    9414:	b880030b 	ldhu	r2,12(r23)
    9418:	10c8000c 	andi	r3,r2,8192
    941c:	1800061e 	bne	r3,zero,9438 <___vfprintf_internal_r+0x84>
    9420:	b9001917 	ldw	r4,100(r23)
    9424:	00f7ffc4 	movi	r3,-8193
    9428:	10880014 	ori	r2,r2,8192
    942c:	20c6703a 	and	r3,r4,r3
    9430:	b880030d 	sth	r2,12(r23)
    9434:	b8c01915 	stw	r3,100(r23)
    9438:	10c0020c 	andi	r3,r2,8
    943c:	1800a726 	beq	r3,zero,96dc <___vfprintf_internal_r+0x328>
    9440:	b8c00417 	ldw	r3,16(r23)
    9444:	1800a526 	beq	r3,zero,96dc <___vfprintf_internal_r+0x328>
    9448:	1080068c 	andi	r2,r2,26
    944c:	00c00284 	movi	r3,10
    9450:	10c0aa26 	beq	r2,r3,96fc <___vfprintf_internal_r+0x348>
    9454:	dac01e04 	addi	r11,sp,120
    9458:	db001dc4 	addi	r12,sp,119
    945c:	d8800404 	addi	r2,sp,16
    9460:	050000b4 	movhi	r20,2
    9464:	dac02815 	stw	r11,160(sp)
    9468:	5b17c83a 	sub	r11,r11,r12
    946c:	a5032b84 	addi	r20,r20,3246
    9470:	db002915 	stw	r12,164(sp)
    9474:	d8801e15 	stw	r2,120(sp)
    9478:	d8002015 	stw	zero,128(sp)
    947c:	d8001f15 	stw	zero,124(sp)
    9480:	d8003315 	stw	zero,204(sp)
    9484:	d8003715 	stw	zero,220(sp)
    9488:	d8003915 	stw	zero,228(sp)
    948c:	1011883a 	mov	r8,r2
    9490:	d8003b15 	stw	zero,236(sp)
    9494:	d8003a15 	stw	zero,232(sp)
    9498:	d8002f15 	stw	zero,188(sp)
    949c:	dac03c15 	stw	r11,240(sp)
    94a0:	db002a17 	ldw	r12,168(sp)
    94a4:	60800007 	ldb	r2,0(r12)
    94a8:	1000be26 	beq	r2,zero,97a4 <___vfprintf_internal_r+0x3f0>
    94ac:	00c00944 	movi	r3,37
    94b0:	10c0bc26 	beq	r2,r3,97a4 <___vfprintf_internal_r+0x3f0>
    94b4:	6021883a 	mov	r16,r12
    94b8:	00000106 	br	94c0 <___vfprintf_internal_r+0x10c>
    94bc:	10c08426 	beq	r2,r3,96d0 <___vfprintf_internal_r+0x31c>
    94c0:	84000044 	addi	r16,r16,1
    94c4:	80800007 	ldb	r2,0(r16)
    94c8:	103ffc1e 	bne	r2,zero,94bc <__alt_mem_Flash_flash_data+0xf40094bc>
    94cc:	dac02a17 	ldw	r11,168(sp)
    94d0:	82e3c83a 	sub	r17,r16,r11
    94d4:	88000f26 	beq	r17,zero,9514 <___vfprintf_internal_r+0x160>
    94d8:	d8c02017 	ldw	r3,128(sp)
    94dc:	d8801f17 	ldw	r2,124(sp)
    94e0:	dac02a17 	ldw	r11,168(sp)
    94e4:	1c47883a 	add	r3,r3,r17
    94e8:	10800044 	addi	r2,r2,1
    94ec:	d8c02015 	stw	r3,128(sp)
    94f0:	42c00015 	stw	r11,0(r8)
    94f4:	44400115 	stw	r17,4(r8)
    94f8:	d8801f15 	stw	r2,124(sp)
    94fc:	00c001c4 	movi	r3,7
    9500:	18809316 	blt	r3,r2,9750 <___vfprintf_internal_r+0x39c>
    9504:	42000204 	addi	r8,r8,8
    9508:	db002f17 	ldw	r12,188(sp)
    950c:	6459883a 	add	r12,r12,r17
    9510:	db002f15 	stw	r12,188(sp)
    9514:	80800007 	ldb	r2,0(r16)
    9518:	10009426 	beq	r2,zero,976c <___vfprintf_internal_r+0x3b8>
    951c:	80800044 	addi	r2,r16,1
    9520:	84000047 	ldb	r16,1(r16)
    9524:	d8002785 	stb	zero,158(sp)
    9528:	000d883a 	mov	r6,zero
    952c:	027fffc4 	movi	r9,-1
    9530:	d8002e15 	stw	zero,184(sp)
    9534:	0023883a 	mov	r17,zero
    9538:	01001604 	movi	r4,88
    953c:	01400244 	movi	r5,9
    9540:	02800a84 	movi	r10,42
    9544:	01c01b04 	movi	r7,108
    9548:	10c00044 	addi	r3,r2,1
    954c:	80bff804 	addi	r2,r16,-32
    9550:	2082cd36 	bltu	r4,r2,a088 <___vfprintf_internal_r+0xcd4>
    9554:	100490ba 	slli	r2,r2,2
    9558:	02c00074 	movhi	r11,1
    955c:	5ae55b04 	addi	r11,r11,-27284
    9560:	12c5883a 	add	r2,r2,r11
    9564:	10800017 	ldw	r2,0(r2)
    9568:	1000683a 	jmp	r2
    956c:	00009ea0 	cmpeqi	zero,zero,634
    9570:	0000a088 	cmpgei	zero,zero,642
    9574:	0000a088 	cmpgei	zero,zero,642
    9578:	00009ff0 	cmpltui	zero,zero,639
    957c:	0000a088 	cmpgei	zero,zero,642
    9580:	0000a088 	cmpgei	zero,zero,642
    9584:	0000a088 	cmpgei	zero,zero,642
    9588:	0000a088 	cmpgei	zero,zero,642
    958c:	0000a088 	cmpgei	zero,zero,642
    9590:	0000a088 	cmpgei	zero,zero,642
    9594:	00009ec0 	call	9ec <task1+0x180>
    9598:	00009eec 	andhi	zero,zero,635
    959c:	0000a088 	cmpgei	zero,zero,642
    95a0:	000097ac 	andhi	zero,zero,606
    95a4:	000097bc 	xorhi	zero,zero,606
    95a8:	0000a088 	cmpgei	zero,zero,642
    95ac:	000097fc 	xorhi	zero,zero,607
    95b0:	0000980c 	andi	zero,zero,608
    95b4:	0000980c 	andi	zero,zero,608
    95b8:	0000980c 	andi	zero,zero,608
    95bc:	0000980c 	andi	zero,zero,608
    95c0:	0000980c 	andi	zero,zero,608
    95c4:	0000980c 	andi	zero,zero,608
    95c8:	0000980c 	andi	zero,zero,608
    95cc:	0000980c 	andi	zero,zero,608
    95d0:	0000980c 	andi	zero,zero,608
    95d4:	0000a088 	cmpgei	zero,zero,642
    95d8:	0000a088 	cmpgei	zero,zero,642
    95dc:	0000a088 	cmpgei	zero,zero,642
    95e0:	0000a088 	cmpgei	zero,zero,642
    95e4:	0000a088 	cmpgei	zero,zero,642
    95e8:	0000a088 	cmpgei	zero,zero,642
    95ec:	0000a088 	cmpgei	zero,zero,642
    95f0:	0000a088 	cmpgei	zero,zero,642
    95f4:	0000a088 	cmpgei	zero,zero,642
    95f8:	0000a088 	cmpgei	zero,zero,642
    95fc:	00009840 	call	984 <task1+0x118>
    9600:	00009cb0 	cmpltui	zero,zero,626
    9604:	0000a088 	cmpgei	zero,zero,642
    9608:	00009cb0 	cmpltui	zero,zero,626
    960c:	0000a088 	cmpgei	zero,zero,642
    9610:	0000a088 	cmpgei	zero,zero,642
    9614:	0000a088 	cmpgei	zero,zero,642
    9618:	0000a088 	cmpgei	zero,zero,642
    961c:	00009d9c 	xori	zero,zero,630
    9620:	0000a088 	cmpgei	zero,zero,642
    9624:	0000a088 	cmpgei	zero,zero,642
    9628:	00009c44 	movi	zero,625
    962c:	0000a088 	cmpgei	zero,zero,642
    9630:	0000a088 	cmpgei	zero,zero,642
    9634:	0000a088 	cmpgei	zero,zero,642
    9638:	0000a088 	cmpgei	zero,zero,642
    963c:	0000a088 	cmpgei	zero,zero,642
    9640:	00009c80 	call	9c8 <task1+0x15c>
    9644:	0000a088 	cmpgei	zero,zero,642
    9648:	0000a088 	cmpgei	zero,zero,642
    964c:	00009e44 	movi	zero,633
    9650:	0000a088 	cmpgei	zero,zero,642
    9654:	0000a088 	cmpgei	zero,zero,642
    9658:	0000a088 	cmpgei	zero,zero,642
    965c:	0000a088 	cmpgei	zero,zero,642
    9660:	0000a088 	cmpgei	zero,zero,642
    9664:	0000a088 	cmpgei	zero,zero,642
    9668:	0000a088 	cmpgei	zero,zero,642
    966c:	0000a088 	cmpgei	zero,zero,642
    9670:	0000a088 	cmpgei	zero,zero,642
    9674:	0000a088 	cmpgei	zero,zero,642
    9678:	00009efc 	xorhi	zero,zero,635
    967c:	00009dac 	andhi	zero,zero,630
    9680:	00009cb0 	cmpltui	zero,zero,626
    9684:	00009cb0 	cmpltui	zero,zero,626
    9688:	00009cb0 	cmpltui	zero,zero,626
    968c:	00009dec 	andhi	zero,zero,631
    9690:	00009dac 	andhi	zero,zero,630
    9694:	0000a088 	cmpgei	zero,zero,642
    9698:	0000a088 	cmpgei	zero,zero,642
    969c:	00009dfc 	xorhi	zero,zero,631
    96a0:	0000a088 	cmpgei	zero,zero,642
    96a4:	00009e10 	cmplti	zero,zero,632
    96a8:	0000a04c 	andi	zero,zero,641
    96ac:	00009d54 	movui	zero,629
    96b0:	0000a000 	call	a00 <task1+0x194>
    96b4:	0000a088 	cmpgei	zero,zero,642
    96b8:	00009f3c 	xorhi	zero,zero,636
    96bc:	0000a088 	cmpgei	zero,zero,642
    96c0:	0000a010 	cmplti	zero,zero,640
    96c4:	0000a088 	cmpgei	zero,zero,642
    96c8:	0000a088 	cmpgei	zero,zero,642
    96cc:	00009fb0 	cmpltui	zero,zero,638
    96d0:	db002a17 	ldw	r12,168(sp)
    96d4:	8323c83a 	sub	r17,r16,r12
    96d8:	003f7e06 	br	94d4 <__alt_mem_Flash_flash_data+0xf40094d4>
    96dc:	b009883a 	mov	r4,r22
    96e0:	b80b883a 	mov	r5,r23
    96e4:	000b3e40 	call	b3e4 <__swsetup_r>
    96e8:	10000c1e 	bne	r2,zero,971c <___vfprintf_internal_r+0x368>
    96ec:	b880030b 	ldhu	r2,12(r23)
    96f0:	00c00284 	movi	r3,10
    96f4:	1080068c 	andi	r2,r2,26
    96f8:	10ff561e 	bne	r2,r3,9454 <__alt_mem_Flash_flash_data+0xf4009454>
    96fc:	b880038f 	ldh	r2,14(r23)
    9700:	103f5416 	blt	r2,zero,9454 <__alt_mem_Flash_flash_data+0xf4009454>
    9704:	d9802a17 	ldw	r6,168(sp)
    9708:	d9c02d17 	ldw	r7,180(sp)
    970c:	b009883a 	mov	r4,r22
    9710:	b80b883a 	mov	r5,r23
    9714:	000b3280 	call	b328 <__sbprintf>
    9718:	00000106 	br	9720 <___vfprintf_internal_r+0x36c>
    971c:	00bfffc4 	movi	r2,-1
    9720:	dfc04917 	ldw	ra,292(sp)
    9724:	df004817 	ldw	fp,288(sp)
    9728:	ddc04717 	ldw	r23,284(sp)
    972c:	dd804617 	ldw	r22,280(sp)
    9730:	dd404517 	ldw	r21,276(sp)
    9734:	dd004417 	ldw	r20,272(sp)
    9738:	dcc04317 	ldw	r19,268(sp)
    973c:	dc804217 	ldw	r18,264(sp)
    9740:	dc404117 	ldw	r17,260(sp)
    9744:	dc004017 	ldw	r16,256(sp)
    9748:	dec04a04 	addi	sp,sp,296
    974c:	f800283a 	ret
    9750:	b009883a 	mov	r4,r22
    9754:	b80b883a 	mov	r5,r23
    9758:	d9801e04 	addi	r6,sp,120
    975c:	0010f4c0 	call	10f4c <__sprint_r>
    9760:	1000081e 	bne	r2,zero,9784 <___vfprintf_internal_r+0x3d0>
    9764:	da000404 	addi	r8,sp,16
    9768:	003f6706 	br	9508 <__alt_mem_Flash_flash_data+0xf4009508>
    976c:	d8802017 	ldw	r2,128(sp)
    9770:	10000426 	beq	r2,zero,9784 <___vfprintf_internal_r+0x3d0>
    9774:	b009883a 	mov	r4,r22
    9778:	b80b883a 	mov	r5,r23
    977c:	d9801e04 	addi	r6,sp,120
    9780:	0010f4c0 	call	10f4c <__sprint_r>
    9784:	b880030b 	ldhu	r2,12(r23)
    9788:	1080100c 	andi	r2,r2,64
    978c:	103fe31e 	bne	r2,zero,971c <__alt_mem_Flash_flash_data+0xf400971c>
    9790:	d8802f17 	ldw	r2,188(sp)
    9794:	003fe206 	br	9720 <__alt_mem_Flash_flash_data+0xf4009720>
    9798:	b009883a 	mov	r4,r22
    979c:	000d4440 	call	d444 <__sinit>
    97a0:	003f1c06 	br	9414 <__alt_mem_Flash_flash_data+0xf4009414>
    97a4:	dc002a17 	ldw	r16,168(sp)
    97a8:	003f5a06 	br	9514 <__alt_mem_Flash_flash_data+0xf4009514>
    97ac:	1805883a 	mov	r2,r3
    97b0:	8c400114 	ori	r17,r17,4
    97b4:	1c000007 	ldb	r16,0(r3)
    97b8:	003f6306 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    97bc:	1c000007 	ldb	r16,0(r3)
    97c0:	18800044 	addi	r2,r3,1
    97c4:	8286ad26 	beq	r16,r10,b27c <___vfprintf_internal_r+0x1ec8>
    97c8:	82fff404 	addi	r11,r16,-48
    97cc:	1007883a 	mov	r3,r2
    97d0:	0013883a 	mov	r9,zero
    97d4:	2aff5d36 	bltu	r5,r11,954c <__alt_mem_Flash_flash_data+0xf400954c>
    97d8:	1c000007 	ldb	r16,0(r3)
    97dc:	4a4002a4 	muli	r9,r9,10
    97e0:	18c00044 	addi	r3,r3,1
    97e4:	5a53883a 	add	r9,r11,r9
    97e8:	82fff404 	addi	r11,r16,-48
    97ec:	2afffa2e 	bgeu	r5,r11,97d8 <__alt_mem_Flash_flash_data+0xf40097d8>
    97f0:	483f560e 	bge	r9,zero,954c <__alt_mem_Flash_flash_data+0xf400954c>
    97f4:	027fffc4 	movi	r9,-1
    97f8:	003f5406 	br	954c <__alt_mem_Flash_flash_data+0xf400954c>
    97fc:	8c402014 	ori	r17,r17,128
    9800:	1805883a 	mov	r2,r3
    9804:	1c000007 	ldb	r16,0(r3)
    9808:	003f4f06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    980c:	1805883a 	mov	r2,r3
    9810:	d8002e15 	stw	zero,184(sp)
    9814:	82fff404 	addi	r11,r16,-48
    9818:	0019883a 	mov	r12,zero
    981c:	14000007 	ldb	r16,0(r2)
    9820:	630002a4 	muli	r12,r12,10
    9824:	18c00044 	addi	r3,r3,1
    9828:	1805883a 	mov	r2,r3
    982c:	62d9883a 	add	r12,r12,r11
    9830:	82fff404 	addi	r11,r16,-48
    9834:	2afff92e 	bgeu	r5,r11,981c <__alt_mem_Flash_flash_data+0xf400981c>
    9838:	db002e15 	stw	r12,184(sp)
    983c:	003f4306 	br	954c <__alt_mem_Flash_flash_data+0xf400954c>
    9840:	8c400414 	ori	r17,r17,16
    9844:	d8c02a15 	stw	r3,168(sp)
    9848:	d9802785 	stb	r6,158(sp)
    984c:	8880080c 	andi	r2,r17,32
    9850:	d8c02d17 	ldw	r3,180(sp)
    9854:	10015a26 	beq	r2,zero,9dc0 <___vfprintf_internal_r+0xa0c>
    9858:	db002d17 	ldw	r12,180(sp)
    985c:	18800117 	ldw	r2,4(r3)
    9860:	1cc00017 	ldw	r19,0(r3)
    9864:	63000204 	addi	r12,r12,8
    9868:	db002d15 	stw	r12,180(sp)
    986c:	1039883a 	mov	fp,r2
    9870:	10044516 	blt	r2,zero,a988 <___vfprintf_internal_r+0x15d4>
    9874:	dd402783 	ldbu	r21,158(sp)
    9878:	da403215 	stw	r9,200(sp)
    987c:	00800044 	movi	r2,1
    9880:	9f06b03a 	or	r3,r19,fp
    9884:	48000216 	blt	r9,zero,9890 <___vfprintf_internal_r+0x4dc>
    9888:	013fdfc4 	movi	r4,-129
    988c:	8922703a 	and	r17,r17,r4
    9890:	1802071e 	bne	r3,zero,a0b0 <___vfprintf_internal_r+0xcfc>
    9894:	4802fa26 	beq	r9,zero,a480 <___vfprintf_internal_r+0x10cc>
    9898:	10803fcc 	andi	r2,r2,255
    989c:	00c00044 	movi	r3,1
    98a0:	10c22926 	beq	r2,r3,a148 <___vfprintf_internal_r+0xd94>
    98a4:	00c00084 	movi	r3,2
    98a8:	10c31726 	beq	r2,r3,a508 <___vfprintf_internal_r+0x1154>
    98ac:	d8c01e04 	addi	r3,sp,120
    98b0:	9808d0fa 	srli	r4,r19,3
    98b4:	e00a977a 	slli	r5,fp,29
    98b8:	e038d0fa 	srli	fp,fp,3
    98bc:	9cc001cc 	andi	r19,r19,7
    98c0:	98800c04 	addi	r2,r19,48
    98c4:	18ffffc4 	addi	r3,r3,-1
    98c8:	2926b03a 	or	r19,r5,r4
    98cc:	18800005 	stb	r2,0(r3)
    98d0:	9f08b03a 	or	r4,r19,fp
    98d4:	203ff61e 	bne	r4,zero,98b0 <__alt_mem_Flash_flash_data+0xf40098b0>
    98d8:	8900004c 	andi	r4,r17,1
    98dc:	d8c03115 	stw	r3,196(sp)
    98e0:	2003931e 	bne	r4,zero,a730 <___vfprintf_internal_r+0x137c>
    98e4:	dac02817 	ldw	r11,160(sp)
    98e8:	58e5c83a 	sub	r18,r11,r3
    98ec:	9005883a 	mov	r2,r18
    98f0:	9240010e 	bge	r18,r9,98f8 <___vfprintf_internal_r+0x544>
    98f4:	4805883a 	mov	r2,r9
    98f8:	d8802b15 	stw	r2,172(sp)
    98fc:	d8003415 	stw	zero,208(sp)
    9900:	a8803fcc 	andi	r2,r21,255
    9904:	1080201c 	xori	r2,r2,128
    9908:	10bfe004 	addi	r2,r2,-128
    990c:	10000326 	beq	r2,zero,991c <___vfprintf_internal_r+0x568>
    9910:	db002b17 	ldw	r12,172(sp)
    9914:	63000044 	addi	r12,r12,1
    9918:	db002b15 	stw	r12,172(sp)
    991c:	88c0008c 	andi	r3,r17,2
    9920:	d8c02c15 	stw	r3,176(sp)
    9924:	18000326 	beq	r3,zero,9934 <___vfprintf_internal_r+0x580>
    9928:	dac02b17 	ldw	r11,172(sp)
    992c:	5ac00084 	addi	r11,r11,2
    9930:	dac02b15 	stw	r11,172(sp)
    9934:	8b00210c 	andi	r12,r17,132
    9938:	db003015 	stw	r12,192(sp)
    993c:	6001da1e 	bne	r12,zero,a0a8 <___vfprintf_internal_r+0xcf4>
    9940:	dac02e17 	ldw	r11,184(sp)
    9944:	db002b17 	ldw	r12,172(sp)
    9948:	5b39c83a 	sub	fp,r11,r12
    994c:	0701d60e 	bge	zero,fp,a0a8 <___vfprintf_internal_r+0xcf4>
    9950:	02400404 	movi	r9,16
    9954:	d8c02017 	ldw	r3,128(sp)
    9958:	d8801f17 	ldw	r2,124(sp)
    995c:	4f053c0e 	bge	r9,fp,ae50 <___vfprintf_internal_r+0x1a9c>
    9960:	014000b4 	movhi	r5,2
    9964:	29432f84 	addi	r5,r5,3262
    9968:	d9403615 	stw	r5,216(sp)
    996c:	482b883a 	mov	r21,r9
    9970:	04c001c4 	movi	r19,7
    9974:	00000306 	br	9984 <___vfprintf_internal_r+0x5d0>
    9978:	e73ffc04 	addi	fp,fp,-16
    997c:	42000204 	addi	r8,r8,8
    9980:	af00130e 	bge	r21,fp,99d0 <___vfprintf_internal_r+0x61c>
    9984:	02c000b4 	movhi	r11,2
    9988:	18c00404 	addi	r3,r3,16
    998c:	10800044 	addi	r2,r2,1
    9990:	5ac32f84 	addi	r11,r11,3262
    9994:	42c00015 	stw	r11,0(r8)
    9998:	45400115 	stw	r21,4(r8)
    999c:	d8c02015 	stw	r3,128(sp)
    99a0:	d8801f15 	stw	r2,124(sp)
    99a4:	98bff40e 	bge	r19,r2,9978 <__alt_mem_Flash_flash_data+0xf4009978>
    99a8:	b009883a 	mov	r4,r22
    99ac:	b80b883a 	mov	r5,r23
    99b0:	d9801e04 	addi	r6,sp,120
    99b4:	0010f4c0 	call	10f4c <__sprint_r>
    99b8:	103f721e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    99bc:	e73ffc04 	addi	fp,fp,-16
    99c0:	d8c02017 	ldw	r3,128(sp)
    99c4:	d8801f17 	ldw	r2,124(sp)
    99c8:	da000404 	addi	r8,sp,16
    99cc:	af3fed16 	blt	r21,fp,9984 <__alt_mem_Flash_flash_data+0xf4009984>
    99d0:	db003617 	ldw	r12,216(sp)
    99d4:	e0c7883a 	add	r3,fp,r3
    99d8:	10800044 	addi	r2,r2,1
    99dc:	43000015 	stw	r12,0(r8)
    99e0:	47000115 	stw	fp,4(r8)
    99e4:	d8c02015 	stw	r3,128(sp)
    99e8:	d8801f15 	stw	r2,124(sp)
    99ec:	010001c4 	movi	r4,7
    99f0:	20830e16 	blt	r4,r2,a62c <___vfprintf_internal_r+0x1278>
    99f4:	d8802787 	ldb	r2,158(sp)
    99f8:	42000204 	addi	r8,r8,8
    99fc:	10000c26 	beq	r2,zero,9a30 <___vfprintf_internal_r+0x67c>
    9a00:	d8801f17 	ldw	r2,124(sp)
    9a04:	d9002784 	addi	r4,sp,158
    9a08:	18c00044 	addi	r3,r3,1
    9a0c:	10800044 	addi	r2,r2,1
    9a10:	41000015 	stw	r4,0(r8)
    9a14:	01000044 	movi	r4,1
    9a18:	41000115 	stw	r4,4(r8)
    9a1c:	d8c02015 	stw	r3,128(sp)
    9a20:	d8801f15 	stw	r2,124(sp)
    9a24:	010001c4 	movi	r4,7
    9a28:	2082a716 	blt	r4,r2,a4c8 <___vfprintf_internal_r+0x1114>
    9a2c:	42000204 	addi	r8,r8,8
    9a30:	dac02c17 	ldw	r11,176(sp)
    9a34:	58000c26 	beq	r11,zero,9a68 <___vfprintf_internal_r+0x6b4>
    9a38:	d8801f17 	ldw	r2,124(sp)
    9a3c:	d9002704 	addi	r4,sp,156
    9a40:	18c00084 	addi	r3,r3,2
    9a44:	10800044 	addi	r2,r2,1
    9a48:	41000015 	stw	r4,0(r8)
    9a4c:	01000084 	movi	r4,2
    9a50:	41000115 	stw	r4,4(r8)
    9a54:	d8c02015 	stw	r3,128(sp)
    9a58:	d8801f15 	stw	r2,124(sp)
    9a5c:	010001c4 	movi	r4,7
    9a60:	2082a116 	blt	r4,r2,a4e8 <___vfprintf_internal_r+0x1134>
    9a64:	42000204 	addi	r8,r8,8
    9a68:	db003017 	ldw	r12,192(sp)
    9a6c:	00802004 	movi	r2,128
    9a70:	60820326 	beq	r12,r2,a280 <___vfprintf_internal_r+0xecc>
    9a74:	db003217 	ldw	r12,200(sp)
    9a78:	64abc83a 	sub	r21,r12,r18
    9a7c:	0540260e 	bge	zero,r21,9b18 <___vfprintf_internal_r+0x764>
    9a80:	07000404 	movi	fp,16
    9a84:	d8801f17 	ldw	r2,124(sp)
    9a88:	e544570e 	bge	fp,r21,abe8 <___vfprintf_internal_r+0x1834>
    9a8c:	014000b4 	movhi	r5,2
    9a90:	29432b84 	addi	r5,r5,3246
    9a94:	d9402c15 	stw	r5,176(sp)
    9a98:	04c001c4 	movi	r19,7
    9a9c:	00000306 	br	9aac <___vfprintf_internal_r+0x6f8>
    9aa0:	ad7ffc04 	addi	r21,r21,-16
    9aa4:	42000204 	addi	r8,r8,8
    9aa8:	e540110e 	bge	fp,r21,9af0 <___vfprintf_internal_r+0x73c>
    9aac:	18c00404 	addi	r3,r3,16
    9ab0:	10800044 	addi	r2,r2,1
    9ab4:	45000015 	stw	r20,0(r8)
    9ab8:	47000115 	stw	fp,4(r8)
    9abc:	d8c02015 	stw	r3,128(sp)
    9ac0:	d8801f15 	stw	r2,124(sp)
    9ac4:	98bff60e 	bge	r19,r2,9aa0 <__alt_mem_Flash_flash_data+0xf4009aa0>
    9ac8:	b009883a 	mov	r4,r22
    9acc:	b80b883a 	mov	r5,r23
    9ad0:	d9801e04 	addi	r6,sp,120
    9ad4:	0010f4c0 	call	10f4c <__sprint_r>
    9ad8:	103f2a1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    9adc:	ad7ffc04 	addi	r21,r21,-16
    9ae0:	d8c02017 	ldw	r3,128(sp)
    9ae4:	d8801f17 	ldw	r2,124(sp)
    9ae8:	da000404 	addi	r8,sp,16
    9aec:	e57fef16 	blt	fp,r21,9aac <__alt_mem_Flash_flash_data+0xf4009aac>
    9af0:	dac02c17 	ldw	r11,176(sp)
    9af4:	1d47883a 	add	r3,r3,r21
    9af8:	10800044 	addi	r2,r2,1
    9afc:	42c00015 	stw	r11,0(r8)
    9b00:	45400115 	stw	r21,4(r8)
    9b04:	d8c02015 	stw	r3,128(sp)
    9b08:	d8801f15 	stw	r2,124(sp)
    9b0c:	010001c4 	movi	r4,7
    9b10:	20826516 	blt	r4,r2,a4a8 <___vfprintf_internal_r+0x10f4>
    9b14:	42000204 	addi	r8,r8,8
    9b18:	8880400c 	andi	r2,r17,256
    9b1c:	1001901e 	bne	r2,zero,a160 <___vfprintf_internal_r+0xdac>
    9b20:	d8801f17 	ldw	r2,124(sp)
    9b24:	db003117 	ldw	r12,196(sp)
    9b28:	1c87883a 	add	r3,r3,r18
    9b2c:	10800044 	addi	r2,r2,1
    9b30:	43000015 	stw	r12,0(r8)
    9b34:	44800115 	stw	r18,4(r8)
    9b38:	d8c02015 	stw	r3,128(sp)
    9b3c:	d8801f15 	stw	r2,124(sp)
    9b40:	010001c4 	movi	r4,7
    9b44:	20824016 	blt	r4,r2,a448 <___vfprintf_internal_r+0x1094>
    9b48:	42000204 	addi	r8,r8,8
    9b4c:	8c40010c 	andi	r17,r17,4
    9b50:	88003126 	beq	r17,zero,9c18 <___vfprintf_internal_r+0x864>
    9b54:	db002e17 	ldw	r12,184(sp)
    9b58:	dac02b17 	ldw	r11,172(sp)
    9b5c:	62e1c83a 	sub	r16,r12,r11
    9b60:	04002d0e 	bge	zero,r16,9c18 <___vfprintf_internal_r+0x864>
    9b64:	04400404 	movi	r17,16
    9b68:	d8801f17 	ldw	r2,124(sp)
    9b6c:	8c05150e 	bge	r17,r16,afc4 <___vfprintf_internal_r+0x1c10>
    9b70:	010000b4 	movhi	r4,2
    9b74:	21032f84 	addi	r4,r4,3262
    9b78:	d9003615 	stw	r4,216(sp)
    9b7c:	048001c4 	movi	r18,7
    9b80:	00000306 	br	9b90 <___vfprintf_internal_r+0x7dc>
    9b84:	843ffc04 	addi	r16,r16,-16
    9b88:	42000204 	addi	r8,r8,8
    9b8c:	8c00130e 	bge	r17,r16,9bdc <___vfprintf_internal_r+0x828>
    9b90:	014000b4 	movhi	r5,2
    9b94:	18c00404 	addi	r3,r3,16
    9b98:	10800044 	addi	r2,r2,1
    9b9c:	29432f84 	addi	r5,r5,3262
    9ba0:	41400015 	stw	r5,0(r8)
    9ba4:	44400115 	stw	r17,4(r8)
    9ba8:	d8c02015 	stw	r3,128(sp)
    9bac:	d8801f15 	stw	r2,124(sp)
    9bb0:	90bff40e 	bge	r18,r2,9b84 <__alt_mem_Flash_flash_data+0xf4009b84>
    9bb4:	b009883a 	mov	r4,r22
    9bb8:	b80b883a 	mov	r5,r23
    9bbc:	d9801e04 	addi	r6,sp,120
    9bc0:	0010f4c0 	call	10f4c <__sprint_r>
    9bc4:	103eef1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    9bc8:	843ffc04 	addi	r16,r16,-16
    9bcc:	d8c02017 	ldw	r3,128(sp)
    9bd0:	d8801f17 	ldw	r2,124(sp)
    9bd4:	da000404 	addi	r8,sp,16
    9bd8:	8c3fed16 	blt	r17,r16,9b90 <__alt_mem_Flash_flash_data+0xf4009b90>
    9bdc:	dac03617 	ldw	r11,216(sp)
    9be0:	1c07883a 	add	r3,r3,r16
    9be4:	10800044 	addi	r2,r2,1
    9be8:	42c00015 	stw	r11,0(r8)
    9bec:	44000115 	stw	r16,4(r8)
    9bf0:	d8c02015 	stw	r3,128(sp)
    9bf4:	d8801f15 	stw	r2,124(sp)
    9bf8:	010001c4 	movi	r4,7
    9bfc:	2080060e 	bge	r4,r2,9c18 <___vfprintf_internal_r+0x864>
    9c00:	b009883a 	mov	r4,r22
    9c04:	b80b883a 	mov	r5,r23
    9c08:	d9801e04 	addi	r6,sp,120
    9c0c:	0010f4c0 	call	10f4c <__sprint_r>
    9c10:	103edc1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    9c14:	d8c02017 	ldw	r3,128(sp)
    9c18:	d8802b17 	ldw	r2,172(sp)
    9c1c:	db002e17 	ldw	r12,184(sp)
    9c20:	1300010e 	bge	r2,r12,9c28 <___vfprintf_internal_r+0x874>
    9c24:	6005883a 	mov	r2,r12
    9c28:	dac02f17 	ldw	r11,188(sp)
    9c2c:	5897883a 	add	r11,r11,r2
    9c30:	dac02f15 	stw	r11,188(sp)
    9c34:	18020c1e 	bne	r3,zero,a468 <___vfprintf_internal_r+0x10b4>
    9c38:	d8001f15 	stw	zero,124(sp)
    9c3c:	da000404 	addi	r8,sp,16
    9c40:	003e1706 	br	94a0 <__alt_mem_Flash_flash_data+0xf40094a0>
    9c44:	8c400414 	ori	r17,r17,16
    9c48:	d8c02a15 	stw	r3,168(sp)
    9c4c:	8880080c 	andi	r2,r17,32
    9c50:	10010126 	beq	r2,zero,a058 <___vfprintf_internal_r+0xca4>
    9c54:	db002d17 	ldw	r12,180(sp)
    9c58:	0005883a 	mov	r2,zero
    9c5c:	64c00017 	ldw	r19,0(r12)
    9c60:	67000117 	ldw	fp,4(r12)
    9c64:	63000204 	addi	r12,r12,8
    9c68:	db002d15 	stw	r12,180(sp)
    9c6c:	9f06b03a 	or	r3,r19,fp
    9c70:	d8002785 	stb	zero,158(sp)
    9c74:	da403215 	stw	r9,200(sp)
    9c78:	002b883a 	mov	r21,zero
    9c7c:	003f0106 	br	9884 <__alt_mem_Flash_flash_data+0xf4009884>
    9c80:	8c400414 	ori	r17,r17,16
    9c84:	d8c02a15 	stw	r3,168(sp)
    9c88:	8880080c 	andi	r2,r17,32
    9c8c:	1000e326 	beq	r2,zero,a01c <___vfprintf_internal_r+0xc68>
    9c90:	dac02d17 	ldw	r11,180(sp)
    9c94:	00800044 	movi	r2,1
    9c98:	5cc00017 	ldw	r19,0(r11)
    9c9c:	5f000117 	ldw	fp,4(r11)
    9ca0:	5ac00204 	addi	r11,r11,8
    9ca4:	dac02d15 	stw	r11,180(sp)
    9ca8:	9f06b03a 	or	r3,r19,fp
    9cac:	003ff006 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    9cb0:	db002d17 	ldw	r12,180(sp)
    9cb4:	dac02d17 	ldw	r11,180(sp)
    9cb8:	d8c02a15 	stw	r3,168(sp)
    9cbc:	63000017 	ldw	r12,0(r12)
    9cc0:	5ac00117 	ldw	r11,4(r11)
    9cc4:	d9802785 	stb	r6,158(sp)
    9cc8:	6009883a 	mov	r4,r12
    9ccc:	580b883a 	mov	r5,r11
    9cd0:	db003715 	stw	r12,220(sp)
    9cd4:	da003f15 	stw	r8,252(sp)
    9cd8:	da403e15 	stw	r9,248(sp)
    9cdc:	dac03915 	stw	r11,228(sp)
    9ce0:	000f9f80 	call	f9f8 <__fpclassifyd>
    9ce4:	db002d17 	ldw	r12,180(sp)
    9ce8:	04800044 	movi	r18,1
    9cec:	da003f17 	ldw	r8,252(sp)
    9cf0:	64c00204 	addi	r19,r12,8
    9cf4:	da403e17 	ldw	r9,248(sp)
    9cf8:	d9003717 	ldw	r4,220(sp)
    9cfc:	d9403917 	ldw	r5,228(sp)
    9d00:	14832b1e 	bne	r2,r18,a9b0 <___vfprintf_internal_r+0x15fc>
    9d04:	000d883a 	mov	r6,zero
    9d08:	000f883a 	mov	r7,zero
    9d0c:	00140280 	call	14028 <__ledf2>
    9d10:	da003f17 	ldw	r8,252(sp)
    9d14:	1004b716 	blt	r2,zero,aff4 <___vfprintf_internal_r+0x1c40>
    9d18:	dd402783 	ldbu	r21,158(sp)
    9d1c:	008011c4 	movi	r2,71
    9d20:	14040e0e 	bge	r2,r16,ad5c <___vfprintf_internal_r+0x19a8>
    9d24:	00c000b4 	movhi	r3,2
    9d28:	18c31404 	addi	r3,r3,3152
    9d2c:	d8c03115 	stw	r3,196(sp)
    9d30:	02c000c4 	movi	r11,3
    9d34:	00bfdfc4 	movi	r2,-129
    9d38:	dac02b15 	stw	r11,172(sp)
    9d3c:	88a2703a 	and	r17,r17,r2
    9d40:	dcc02d15 	stw	r19,180(sp)
    9d44:	5825883a 	mov	r18,r11
    9d48:	d8003215 	stw	zero,200(sp)
    9d4c:	d8003415 	stw	zero,208(sp)
    9d50:	003eeb06 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    9d54:	db002d17 	ldw	r12,180(sp)
    9d58:	00800c04 	movi	r2,48
    9d5c:	d8802705 	stb	r2,156(sp)
    9d60:	64c00017 	ldw	r19,0(r12)
    9d64:	00801e04 	movi	r2,120
    9d68:	d8802745 	stb	r2,157(sp)
    9d6c:	008000b4 	movhi	r2,2
    9d70:	10831c04 	addi	r2,r2,3184
    9d74:	63000104 	addi	r12,r12,4
    9d78:	d8c02a15 	stw	r3,168(sp)
    9d7c:	d8803b15 	stw	r2,236(sp)
    9d80:	0039883a 	mov	fp,zero
    9d84:	8c400094 	ori	r17,r17,2
    9d88:	db002d15 	stw	r12,180(sp)
    9d8c:	00800084 	movi	r2,2
    9d90:	04001e04 	movi	r16,120
    9d94:	9807883a 	mov	r3,r19
    9d98:	003fb506 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    9d9c:	8c400214 	ori	r17,r17,8
    9da0:	1805883a 	mov	r2,r3
    9da4:	1c000007 	ldb	r16,0(r3)
    9da8:	003de706 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9dac:	d8c02a15 	stw	r3,168(sp)
    9db0:	d9802785 	stb	r6,158(sp)
    9db4:	8880080c 	andi	r2,r17,32
    9db8:	d8c02d17 	ldw	r3,180(sp)
    9dbc:	103ea61e 	bne	r2,zero,9858 <__alt_mem_Flash_flash_data+0xf4009858>
    9dc0:	8880040c 	andi	r2,r17,16
    9dc4:	1002221e 	bne	r2,zero,a650 <___vfprintf_internal_r+0x129c>
    9dc8:	8880100c 	andi	r2,r17,64
    9dcc:	10022026 	beq	r2,zero,a650 <___vfprintf_internal_r+0x129c>
    9dd0:	1cc0000f 	ldh	r19,0(r3)
    9dd4:	db002d17 	ldw	r12,180(sp)
    9dd8:	9839d7fa 	srai	fp,r19,31
    9ddc:	63000104 	addi	r12,r12,4
    9de0:	db002d15 	stw	r12,180(sp)
    9de4:	e005883a 	mov	r2,fp
    9de8:	003ea106 	br	9870 <__alt_mem_Flash_flash_data+0xf4009870>
    9dec:	8c401014 	ori	r17,r17,64
    9df0:	1805883a 	mov	r2,r3
    9df4:	1c000007 	ldb	r16,0(r3)
    9df8:	003dd306 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9dfc:	1c000007 	ldb	r16,0(r3)
    9e00:	81c3e926 	beq	r16,r7,ada8 <___vfprintf_internal_r+0x19f4>
    9e04:	8c400414 	ori	r17,r17,16
    9e08:	1805883a 	mov	r2,r3
    9e0c:	003dce06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9e10:	d8c02a15 	stw	r3,168(sp)
    9e14:	d9802785 	stb	r6,158(sp)
    9e18:	8880080c 	andi	r2,r17,32
    9e1c:	10034726 	beq	r2,zero,ab3c <___vfprintf_internal_r+0x1788>
    9e20:	db002d17 	ldw	r12,180(sp)
    9e24:	dac02f17 	ldw	r11,188(sp)
    9e28:	60800017 	ldw	r2,0(r12)
    9e2c:	5807d7fa 	srai	r3,r11,31
    9e30:	63000104 	addi	r12,r12,4
    9e34:	db002d15 	stw	r12,180(sp)
    9e38:	12c00015 	stw	r11,0(r2)
    9e3c:	10c00115 	stw	r3,4(r2)
    9e40:	003d9706 	br	94a0 <__alt_mem_Flash_flash_data+0xf40094a0>
    9e44:	030000b4 	movhi	r12,2
    9e48:	63031704 	addi	r12,r12,3164
    9e4c:	d8c02a15 	stw	r3,168(sp)
    9e50:	d9802785 	stb	r6,158(sp)
    9e54:	db003b15 	stw	r12,236(sp)
    9e58:	88c0080c 	andi	r3,r17,32
    9e5c:	d8802d17 	ldw	r2,180(sp)
    9e60:	18005b26 	beq	r3,zero,9fd0 <___vfprintf_internal_r+0xc1c>
    9e64:	dac02d17 	ldw	r11,180(sp)
    9e68:	14c00017 	ldw	r19,0(r2)
    9e6c:	17000117 	ldw	fp,4(r2)
    9e70:	5ac00204 	addi	r11,r11,8
    9e74:	dac02d15 	stw	r11,180(sp)
    9e78:	8880004c 	andi	r2,r17,1
    9e7c:	10022926 	beq	r2,zero,a724 <___vfprintf_internal_r+0x1370>
    9e80:	9f06b03a 	or	r3,r19,fp
    9e84:	18032b26 	beq	r3,zero,ab34 <___vfprintf_internal_r+0x1780>
    9e88:	00800c04 	movi	r2,48
    9e8c:	d8802705 	stb	r2,156(sp)
    9e90:	dc002745 	stb	r16,157(sp)
    9e94:	8c400094 	ori	r17,r17,2
    9e98:	00800084 	movi	r2,2
    9e9c:	003f7406 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    9ea0:	30803fcc 	andi	r2,r6,255
    9ea4:	1080201c 	xori	r2,r2,128
    9ea8:	10bfe004 	addi	r2,r2,-128
    9eac:	1003351e 	bne	r2,zero,ab84 <___vfprintf_internal_r+0x17d0>
    9eb0:	1805883a 	mov	r2,r3
    9eb4:	01800804 	movi	r6,32
    9eb8:	1c000007 	ldb	r16,0(r3)
    9ebc:	003da206 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9ec0:	dac02d17 	ldw	r11,180(sp)
    9ec4:	db002d17 	ldw	r12,180(sp)
    9ec8:	5ac00017 	ldw	r11,0(r11)
    9ecc:	dac02e15 	stw	r11,184(sp)
    9ed0:	62c00104 	addi	r11,r12,4
    9ed4:	db002e17 	ldw	r12,184(sp)
    9ed8:	6003ad16 	blt	r12,zero,ad90 <___vfprintf_internal_r+0x19dc>
    9edc:	dac02d15 	stw	r11,180(sp)
    9ee0:	1805883a 	mov	r2,r3
    9ee4:	1c000007 	ldb	r16,0(r3)
    9ee8:	003d9706 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9eec:	1805883a 	mov	r2,r3
    9ef0:	01800ac4 	movi	r6,43
    9ef4:	1c000007 	ldb	r16,0(r3)
    9ef8:	003d9306 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    9efc:	db002d17 	ldw	r12,180(sp)
    9f00:	d8c02a15 	stw	r3,168(sp)
    9f04:	00c00044 	movi	r3,1
    9f08:	60800017 	ldw	r2,0(r12)
    9f0c:	63000104 	addi	r12,r12,4
    9f10:	d8c02b15 	stw	r3,172(sp)
    9f14:	d8002785 	stb	zero,158(sp)
    9f18:	d8801405 	stb	r2,80(sp)
    9f1c:	db002d15 	stw	r12,180(sp)
    9f20:	dac01404 	addi	r11,sp,80
    9f24:	1825883a 	mov	r18,r3
    9f28:	d8003215 	stw	zero,200(sp)
    9f2c:	d8003415 	stw	zero,208(sp)
    9f30:	dac03115 	stw	r11,196(sp)
    9f34:	0005883a 	mov	r2,zero
    9f38:	003e7806 	br	991c <__alt_mem_Flash_flash_data+0xf400991c>
    9f3c:	dac02d17 	ldw	r11,180(sp)
    9f40:	db002d17 	ldw	r12,180(sp)
    9f44:	d8c02a15 	stw	r3,168(sp)
    9f48:	5ac00017 	ldw	r11,0(r11)
    9f4c:	d8002785 	stb	zero,158(sp)
    9f50:	64c00104 	addi	r19,r12,4
    9f54:	dac03115 	stw	r11,196(sp)
    9f58:	5803fe26 	beq	r11,zero,af54 <___vfprintf_internal_r+0x1ba0>
    9f5c:	d9003117 	ldw	r4,196(sp)
    9f60:	4803b416 	blt	r9,zero,ae34 <___vfprintf_internal_r+0x1a80>
    9f64:	480d883a 	mov	r6,r9
    9f68:	000b883a 	mov	r5,zero
    9f6c:	da003f15 	stw	r8,252(sp)
    9f70:	da403e15 	stw	r9,248(sp)
    9f74:	000e1880 	call	e188 <memchr>
    9f78:	da003f17 	ldw	r8,252(sp)
    9f7c:	da403e17 	ldw	r9,248(sp)
    9f80:	10043026 	beq	r2,zero,b044 <___vfprintf_internal_r+0x1c90>
    9f84:	d8c03117 	ldw	r3,196(sp)
    9f88:	10e5c83a 	sub	r18,r2,r3
    9f8c:	4c836b16 	blt	r9,r18,ad3c <___vfprintf_internal_r+0x1988>
    9f90:	9005883a 	mov	r2,r18
    9f94:	9003ac16 	blt	r18,zero,ae48 <___vfprintf_internal_r+0x1a94>
    9f98:	dd402783 	ldbu	r21,158(sp)
    9f9c:	d8802b15 	stw	r2,172(sp)
    9fa0:	dcc02d15 	stw	r19,180(sp)
    9fa4:	d8003215 	stw	zero,200(sp)
    9fa8:	d8003415 	stw	zero,208(sp)
    9fac:	003e5406 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    9fb0:	008000b4 	movhi	r2,2
    9fb4:	10831c04 	addi	r2,r2,3184
    9fb8:	d8c02a15 	stw	r3,168(sp)
    9fbc:	d8803b15 	stw	r2,236(sp)
    9fc0:	d9802785 	stb	r6,158(sp)
    9fc4:	88c0080c 	andi	r3,r17,32
    9fc8:	d8802d17 	ldw	r2,180(sp)
    9fcc:	183fa51e 	bne	r3,zero,9e64 <__alt_mem_Flash_flash_data+0xf4009e64>
    9fd0:	88c0040c 	andi	r3,r17,16
    9fd4:	1802ee26 	beq	r3,zero,ab90 <___vfprintf_internal_r+0x17dc>
    9fd8:	db002d17 	ldw	r12,180(sp)
    9fdc:	14c00017 	ldw	r19,0(r2)
    9fe0:	0039883a 	mov	fp,zero
    9fe4:	63000104 	addi	r12,r12,4
    9fe8:	db002d15 	stw	r12,180(sp)
    9fec:	003fa206 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    9ff0:	8c400054 	ori	r17,r17,1
    9ff4:	1805883a 	mov	r2,r3
    9ff8:	1c000007 	ldb	r16,0(r3)
    9ffc:	003d5206 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    a000:	8c400814 	ori	r17,r17,32
    a004:	1805883a 	mov	r2,r3
    a008:	1c000007 	ldb	r16,0(r3)
    a00c:	003d4e06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    a010:	d8c02a15 	stw	r3,168(sp)
    a014:	8880080c 	andi	r2,r17,32
    a018:	103f1d1e 	bne	r2,zero,9c90 <__alt_mem_Flash_flash_data+0xf4009c90>
    a01c:	8880040c 	andi	r2,r17,16
    a020:	1001b81e 	bne	r2,zero,a704 <___vfprintf_internal_r+0x1350>
    a024:	8880100c 	andi	r2,r17,64
    a028:	1001b626 	beq	r2,zero,a704 <___vfprintf_internal_r+0x1350>
    a02c:	dac02d17 	ldw	r11,180(sp)
    a030:	0039883a 	mov	fp,zero
    a034:	00800044 	movi	r2,1
    a038:	5cc0000b 	ldhu	r19,0(r11)
    a03c:	5ac00104 	addi	r11,r11,4
    a040:	dac02d15 	stw	r11,180(sp)
    a044:	9807883a 	mov	r3,r19
    a048:	003f0906 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    a04c:	d8c02a15 	stw	r3,168(sp)
    a050:	8880080c 	andi	r2,r17,32
    a054:	103eff1e 	bne	r2,zero,9c54 <__alt_mem_Flash_flash_data+0xf4009c54>
    a058:	8880040c 	andi	r2,r17,16
    a05c:	1001a11e 	bne	r2,zero,a6e4 <___vfprintf_internal_r+0x1330>
    a060:	8880100c 	andi	r2,r17,64
    a064:	10019f26 	beq	r2,zero,a6e4 <___vfprintf_internal_r+0x1330>
    a068:	db002d17 	ldw	r12,180(sp)
    a06c:	0039883a 	mov	fp,zero
    a070:	0005883a 	mov	r2,zero
    a074:	64c0000b 	ldhu	r19,0(r12)
    a078:	63000104 	addi	r12,r12,4
    a07c:	db002d15 	stw	r12,180(sp)
    a080:	9807883a 	mov	r3,r19
    a084:	003efa06 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    a088:	d8c02a15 	stw	r3,168(sp)
    a08c:	d9802785 	stb	r6,158(sp)
    a090:	803db626 	beq	r16,zero,976c <__alt_mem_Flash_flash_data+0xf400976c>
    a094:	00c00044 	movi	r3,1
    a098:	d8c02b15 	stw	r3,172(sp)
    a09c:	dc001405 	stb	r16,80(sp)
    a0a0:	d8002785 	stb	zero,158(sp)
    a0a4:	003f9e06 	br	9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    a0a8:	d8c02017 	ldw	r3,128(sp)
    a0ac:	003e5306 	br	99fc <__alt_mem_Flash_flash_data+0xf40099fc>
    a0b0:	10803fcc 	andi	r2,r2,255
    a0b4:	00c00044 	movi	r3,1
    a0b8:	10fdfa1e 	bne	r2,r3,98a4 <__alt_mem_Flash_flash_data+0xf40098a4>
    a0bc:	e000021e 	bne	fp,zero,a0c8 <___vfprintf_internal_r+0xd14>
    a0c0:	00800244 	movi	r2,9
    a0c4:	14c0202e 	bgeu	r2,r19,a148 <___vfprintf_internal_r+0xd94>
    a0c8:	dc002b15 	stw	r16,172(sp)
    a0cc:	dc402c15 	stw	r17,176(sp)
    a0d0:	9821883a 	mov	r16,r19
    a0d4:	e023883a 	mov	r17,fp
    a0d8:	dc801e04 	addi	r18,sp,120
    a0dc:	4827883a 	mov	r19,r9
    a0e0:	4039883a 	mov	fp,r8
    a0e4:	8009883a 	mov	r4,r16
    a0e8:	880b883a 	mov	r5,r17
    a0ec:	01800284 	movi	r6,10
    a0f0:	000f883a 	mov	r7,zero
    a0f4:	00131cc0 	call	131cc <__umoddi3>
    a0f8:	10800c04 	addi	r2,r2,48
    a0fc:	94bfffc4 	addi	r18,r18,-1
    a100:	8009883a 	mov	r4,r16
    a104:	880b883a 	mov	r5,r17
    a108:	01800284 	movi	r6,10
    a10c:	000f883a 	mov	r7,zero
    a110:	90800005 	stb	r2,0(r18)
    a114:	0012c0c0 	call	12c0c <__udivdi3>
    a118:	1021883a 	mov	r16,r2
    a11c:	10c4b03a 	or	r2,r2,r3
    a120:	1823883a 	mov	r17,r3
    a124:	103fef1e 	bne	r2,zero,a0e4 <__alt_mem_Flash_flash_data+0xf400a0e4>
    a128:	dac02817 	ldw	r11,160(sp)
    a12c:	dc803115 	stw	r18,196(sp)
    a130:	dc002b17 	ldw	r16,172(sp)
    a134:	dc402c17 	ldw	r17,176(sp)
    a138:	9813883a 	mov	r9,r19
    a13c:	e011883a 	mov	r8,fp
    a140:	5ca5c83a 	sub	r18,r11,r18
    a144:	003de906 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a148:	9cc00c04 	addi	r19,r19,48
    a14c:	d8c01dc4 	addi	r3,sp,119
    a150:	dcc01dc5 	stb	r19,119(sp)
    a154:	dc803c17 	ldw	r18,240(sp)
    a158:	d8c03115 	stw	r3,196(sp)
    a15c:	003de306 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a160:	00801944 	movi	r2,101
    a164:	1400710e 	bge	r2,r16,a32c <___vfprintf_internal_r+0xf78>
    a168:	d9003717 	ldw	r4,220(sp)
    a16c:	d9403917 	ldw	r5,228(sp)
    a170:	000d883a 	mov	r6,zero
    a174:	000f883a 	mov	r7,zero
    a178:	d8c03d15 	stw	r3,244(sp)
    a17c:	da003f15 	stw	r8,252(sp)
    a180:	000528c0 	call	528c <__eqdf2>
    a184:	d8c03d17 	ldw	r3,244(sp)
    a188:	da003f17 	ldw	r8,252(sp)
    a18c:	1000ef1e 	bne	r2,zero,a54c <___vfprintf_internal_r+0x1198>
    a190:	d8801f17 	ldw	r2,124(sp)
    a194:	010000b4 	movhi	r4,2
    a198:	21032304 	addi	r4,r4,3212
    a19c:	18c00044 	addi	r3,r3,1
    a1a0:	10800044 	addi	r2,r2,1
    a1a4:	41000015 	stw	r4,0(r8)
    a1a8:	01000044 	movi	r4,1
    a1ac:	41000115 	stw	r4,4(r8)
    a1b0:	d8c02015 	stw	r3,128(sp)
    a1b4:	d8801f15 	stw	r2,124(sp)
    a1b8:	010001c4 	movi	r4,7
    a1bc:	20828e16 	blt	r4,r2,abf8 <___vfprintf_internal_r+0x1844>
    a1c0:	42000204 	addi	r8,r8,8
    a1c4:	d8802617 	ldw	r2,152(sp)
    a1c8:	dac03317 	ldw	r11,204(sp)
    a1cc:	12c00216 	blt	r2,r11,a1d8 <___vfprintf_internal_r+0xe24>
    a1d0:	8880004c 	andi	r2,r17,1
    a1d4:	103e5d26 	beq	r2,zero,9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    a1d8:	db003817 	ldw	r12,224(sp)
    a1dc:	d8801f17 	ldw	r2,124(sp)
    a1e0:	dac03517 	ldw	r11,212(sp)
    a1e4:	1b07883a 	add	r3,r3,r12
    a1e8:	10800044 	addi	r2,r2,1
    a1ec:	42c00015 	stw	r11,0(r8)
    a1f0:	43000115 	stw	r12,4(r8)
    a1f4:	d8c02015 	stw	r3,128(sp)
    a1f8:	d8801f15 	stw	r2,124(sp)
    a1fc:	010001c4 	movi	r4,7
    a200:	2082ed16 	blt	r4,r2,adb8 <___vfprintf_internal_r+0x1a04>
    a204:	42000204 	addi	r8,r8,8
    a208:	db003317 	ldw	r12,204(sp)
    a20c:	643fffc4 	addi	r16,r12,-1
    a210:	043e4e0e 	bge	zero,r16,9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    a214:	04800404 	movi	r18,16
    a218:	d8801f17 	ldw	r2,124(sp)
    a21c:	94007e0e 	bge	r18,r16,a418 <___vfprintf_internal_r+0x1064>
    a220:	014000b4 	movhi	r5,2
    a224:	29432b84 	addi	r5,r5,3246
    a228:	d9402c15 	stw	r5,176(sp)
    a22c:	054001c4 	movi	r21,7
    a230:	00000306 	br	a240 <___vfprintf_internal_r+0xe8c>
    a234:	42000204 	addi	r8,r8,8
    a238:	843ffc04 	addi	r16,r16,-16
    a23c:	9400790e 	bge	r18,r16,a424 <___vfprintf_internal_r+0x1070>
    a240:	18c00404 	addi	r3,r3,16
    a244:	10800044 	addi	r2,r2,1
    a248:	45000015 	stw	r20,0(r8)
    a24c:	44800115 	stw	r18,4(r8)
    a250:	d8c02015 	stw	r3,128(sp)
    a254:	d8801f15 	stw	r2,124(sp)
    a258:	a8bff60e 	bge	r21,r2,a234 <__alt_mem_Flash_flash_data+0xf400a234>
    a25c:	b009883a 	mov	r4,r22
    a260:	b80b883a 	mov	r5,r23
    a264:	d9801e04 	addi	r6,sp,120
    a268:	0010f4c0 	call	10f4c <__sprint_r>
    a26c:	103d451e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a270:	d8c02017 	ldw	r3,128(sp)
    a274:	d8801f17 	ldw	r2,124(sp)
    a278:	da000404 	addi	r8,sp,16
    a27c:	003fee06 	br	a238 <__alt_mem_Flash_flash_data+0xf400a238>
    a280:	dac02e17 	ldw	r11,184(sp)
    a284:	db002b17 	ldw	r12,172(sp)
    a288:	5b2bc83a 	sub	r21,r11,r12
    a28c:	057df90e 	bge	zero,r21,9a74 <__alt_mem_Flash_flash_data+0xf4009a74>
    a290:	07000404 	movi	fp,16
    a294:	d8801f17 	ldw	r2,124(sp)
    a298:	e543640e 	bge	fp,r21,b02c <___vfprintf_internal_r+0x1c78>
    a29c:	014000b4 	movhi	r5,2
    a2a0:	29432b84 	addi	r5,r5,3246
    a2a4:	d9402c15 	stw	r5,176(sp)
    a2a8:	04c001c4 	movi	r19,7
    a2ac:	00000306 	br	a2bc <___vfprintf_internal_r+0xf08>
    a2b0:	ad7ffc04 	addi	r21,r21,-16
    a2b4:	42000204 	addi	r8,r8,8
    a2b8:	e540110e 	bge	fp,r21,a300 <___vfprintf_internal_r+0xf4c>
    a2bc:	18c00404 	addi	r3,r3,16
    a2c0:	10800044 	addi	r2,r2,1
    a2c4:	45000015 	stw	r20,0(r8)
    a2c8:	47000115 	stw	fp,4(r8)
    a2cc:	d8c02015 	stw	r3,128(sp)
    a2d0:	d8801f15 	stw	r2,124(sp)
    a2d4:	98bff60e 	bge	r19,r2,a2b0 <__alt_mem_Flash_flash_data+0xf400a2b0>
    a2d8:	b009883a 	mov	r4,r22
    a2dc:	b80b883a 	mov	r5,r23
    a2e0:	d9801e04 	addi	r6,sp,120
    a2e4:	0010f4c0 	call	10f4c <__sprint_r>
    a2e8:	103d261e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a2ec:	ad7ffc04 	addi	r21,r21,-16
    a2f0:	d8c02017 	ldw	r3,128(sp)
    a2f4:	d8801f17 	ldw	r2,124(sp)
    a2f8:	da000404 	addi	r8,sp,16
    a2fc:	e57fef16 	blt	fp,r21,a2bc <__alt_mem_Flash_flash_data+0xf400a2bc>
    a300:	dac02c17 	ldw	r11,176(sp)
    a304:	1d47883a 	add	r3,r3,r21
    a308:	10800044 	addi	r2,r2,1
    a30c:	42c00015 	stw	r11,0(r8)
    a310:	45400115 	stw	r21,4(r8)
    a314:	d8c02015 	stw	r3,128(sp)
    a318:	d8801f15 	stw	r2,124(sp)
    a31c:	010001c4 	movi	r4,7
    a320:	20819116 	blt	r4,r2,a968 <___vfprintf_internal_r+0x15b4>
    a324:	42000204 	addi	r8,r8,8
    a328:	003dd206 	br	9a74 <__alt_mem_Flash_flash_data+0xf4009a74>
    a32c:	db003317 	ldw	r12,204(sp)
    a330:	00800044 	movi	r2,1
    a334:	18c00044 	addi	r3,r3,1
    a338:	1301530e 	bge	r2,r12,a888 <___vfprintf_internal_r+0x14d4>
    a33c:	dc001f17 	ldw	r16,124(sp)
    a340:	dac03117 	ldw	r11,196(sp)
    a344:	00800044 	movi	r2,1
    a348:	84000044 	addi	r16,r16,1
    a34c:	40800115 	stw	r2,4(r8)
    a350:	42c00015 	stw	r11,0(r8)
    a354:	d8c02015 	stw	r3,128(sp)
    a358:	dc001f15 	stw	r16,124(sp)
    a35c:	008001c4 	movi	r2,7
    a360:	14016b16 	blt	r2,r16,a910 <___vfprintf_internal_r+0x155c>
    a364:	42000204 	addi	r8,r8,8
    a368:	db003817 	ldw	r12,224(sp)
    a36c:	dac03517 	ldw	r11,212(sp)
    a370:	84000044 	addi	r16,r16,1
    a374:	1b07883a 	add	r3,r3,r12
    a378:	42c00015 	stw	r11,0(r8)
    a37c:	43000115 	stw	r12,4(r8)
    a380:	d8c02015 	stw	r3,128(sp)
    a384:	dc001f15 	stw	r16,124(sp)
    a388:	008001c4 	movi	r2,7
    a38c:	14016916 	blt	r2,r16,a934 <___vfprintf_internal_r+0x1580>
    a390:	44800204 	addi	r18,r8,8
    a394:	d9003717 	ldw	r4,220(sp)
    a398:	d9403917 	ldw	r5,228(sp)
    a39c:	000d883a 	mov	r6,zero
    a3a0:	000f883a 	mov	r7,zero
    a3a4:	d8c03d15 	stw	r3,244(sp)
    a3a8:	000528c0 	call	528c <__eqdf2>
    a3ac:	d8c03d17 	ldw	r3,244(sp)
    a3b0:	db003317 	ldw	r12,204(sp)
    a3b4:	1000ad26 	beq	r2,zero,a66c <___vfprintf_internal_r+0x12b8>
    a3b8:	dac03117 	ldw	r11,196(sp)
    a3bc:	60bfffc4 	addi	r2,r12,-1
    a3c0:	1887883a 	add	r3,r3,r2
    a3c4:	59000044 	addi	r4,r11,1
    a3c8:	84000044 	addi	r16,r16,1
    a3cc:	90800115 	stw	r2,4(r18)
    a3d0:	91000015 	stw	r4,0(r18)
    a3d4:	d8c02015 	stw	r3,128(sp)
    a3d8:	dc001f15 	stw	r16,124(sp)
    a3dc:	008001c4 	movi	r2,7
    a3e0:	14014216 	blt	r2,r16,a8ec <___vfprintf_internal_r+0x1538>
    a3e4:	94800204 	addi	r18,r18,8
    a3e8:	dac03a17 	ldw	r11,232(sp)
    a3ec:	dd4022c4 	addi	r21,sp,139
    a3f0:	84000044 	addi	r16,r16,1
    a3f4:	1ac7883a 	add	r3,r3,r11
    a3f8:	95400015 	stw	r21,0(r18)
    a3fc:	92c00115 	stw	r11,4(r18)
    a400:	d8c02015 	stw	r3,128(sp)
    a404:	dc001f15 	stw	r16,124(sp)
    a408:	008001c4 	movi	r2,7
    a40c:	14000e16 	blt	r2,r16,a448 <___vfprintf_internal_r+0x1094>
    a410:	92000204 	addi	r8,r18,8
    a414:	003dcd06 	br	9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    a418:	010000b4 	movhi	r4,2
    a41c:	21032b84 	addi	r4,r4,3246
    a420:	d9002c15 	stw	r4,176(sp)
    a424:	dac02c17 	ldw	r11,176(sp)
    a428:	1c07883a 	add	r3,r3,r16
    a42c:	44000115 	stw	r16,4(r8)
    a430:	42c00015 	stw	r11,0(r8)
    a434:	10800044 	addi	r2,r2,1
    a438:	d8c02015 	stw	r3,128(sp)
    a43c:	d8801f15 	stw	r2,124(sp)
    a440:	010001c4 	movi	r4,7
    a444:	20bdc00e 	bge	r4,r2,9b48 <__alt_mem_Flash_flash_data+0xf4009b48>
    a448:	b009883a 	mov	r4,r22
    a44c:	b80b883a 	mov	r5,r23
    a450:	d9801e04 	addi	r6,sp,120
    a454:	0010f4c0 	call	10f4c <__sprint_r>
    a458:	103cca1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a45c:	d8c02017 	ldw	r3,128(sp)
    a460:	da000404 	addi	r8,sp,16
    a464:	003db906 	br	9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    a468:	b009883a 	mov	r4,r22
    a46c:	b80b883a 	mov	r5,r23
    a470:	d9801e04 	addi	r6,sp,120
    a474:	0010f4c0 	call	10f4c <__sprint_r>
    a478:	103def26 	beq	r2,zero,9c38 <__alt_mem_Flash_flash_data+0xf4009c38>
    a47c:	003cc106 	br	9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a480:	10803fcc 	andi	r2,r2,255
    a484:	1000651e 	bne	r2,zero,a61c <___vfprintf_internal_r+0x1268>
    a488:	8880004c 	andi	r2,r17,1
    a48c:	10013226 	beq	r2,zero,a958 <___vfprintf_internal_r+0x15a4>
    a490:	00800c04 	movi	r2,48
    a494:	d8c01dc4 	addi	r3,sp,119
    a498:	d8801dc5 	stb	r2,119(sp)
    a49c:	dc803c17 	ldw	r18,240(sp)
    a4a0:	d8c03115 	stw	r3,196(sp)
    a4a4:	003d1106 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a4a8:	b009883a 	mov	r4,r22
    a4ac:	b80b883a 	mov	r5,r23
    a4b0:	d9801e04 	addi	r6,sp,120
    a4b4:	0010f4c0 	call	10f4c <__sprint_r>
    a4b8:	103cb21e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a4bc:	d8c02017 	ldw	r3,128(sp)
    a4c0:	da000404 	addi	r8,sp,16
    a4c4:	003d9406 	br	9b18 <__alt_mem_Flash_flash_data+0xf4009b18>
    a4c8:	b009883a 	mov	r4,r22
    a4cc:	b80b883a 	mov	r5,r23
    a4d0:	d9801e04 	addi	r6,sp,120
    a4d4:	0010f4c0 	call	10f4c <__sprint_r>
    a4d8:	103caa1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a4dc:	d8c02017 	ldw	r3,128(sp)
    a4e0:	da000404 	addi	r8,sp,16
    a4e4:	003d5206 	br	9a30 <__alt_mem_Flash_flash_data+0xf4009a30>
    a4e8:	b009883a 	mov	r4,r22
    a4ec:	b80b883a 	mov	r5,r23
    a4f0:	d9801e04 	addi	r6,sp,120
    a4f4:	0010f4c0 	call	10f4c <__sprint_r>
    a4f8:	103ca21e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a4fc:	d8c02017 	ldw	r3,128(sp)
    a500:	da000404 	addi	r8,sp,16
    a504:	003d5806 	br	9a68 <__alt_mem_Flash_flash_data+0xf4009a68>
    a508:	d9403b17 	ldw	r5,236(sp)
    a50c:	d8c01e04 	addi	r3,sp,120
    a510:	988003cc 	andi	r2,r19,15
    a514:	e008973a 	slli	r4,fp,28
    a518:	2885883a 	add	r2,r5,r2
    a51c:	9826d13a 	srli	r19,r19,4
    a520:	10800003 	ldbu	r2,0(r2)
    a524:	e038d13a 	srli	fp,fp,4
    a528:	18ffffc4 	addi	r3,r3,-1
    a52c:	24e6b03a 	or	r19,r4,r19
    a530:	18800005 	stb	r2,0(r3)
    a534:	9f04b03a 	or	r2,r19,fp
    a538:	103ff51e 	bne	r2,zero,a510 <__alt_mem_Flash_flash_data+0xf400a510>
    a53c:	db002817 	ldw	r12,160(sp)
    a540:	d8c03115 	stw	r3,196(sp)
    a544:	60e5c83a 	sub	r18,r12,r3
    a548:	003ce806 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a54c:	dc002617 	ldw	r16,152(sp)
    a550:	0401b10e 	bge	zero,r16,ac18 <___vfprintf_internal_r+0x1864>
    a554:	db003117 	ldw	r12,196(sp)
    a558:	dac03317 	ldw	r11,204(sp)
    a55c:	62e1883a 	add	r16,r12,r11
    a560:	db003417 	ldw	r12,208(sp)
    a564:	5825883a 	mov	r18,r11
    a568:	62c0010e 	bge	r12,r11,a570 <___vfprintf_internal_r+0x11bc>
    a56c:	6025883a 	mov	r18,r12
    a570:	04800b0e 	bge	zero,r18,a5a0 <___vfprintf_internal_r+0x11ec>
    a574:	d8801f17 	ldw	r2,124(sp)
    a578:	dac03117 	ldw	r11,196(sp)
    a57c:	1c87883a 	add	r3,r3,r18
    a580:	10800044 	addi	r2,r2,1
    a584:	42c00015 	stw	r11,0(r8)
    a588:	44800115 	stw	r18,4(r8)
    a58c:	d8c02015 	stw	r3,128(sp)
    a590:	d8801f15 	stw	r2,124(sp)
    a594:	010001c4 	movi	r4,7
    a598:	20824f16 	blt	r4,r2,aed8 <___vfprintf_internal_r+0x1b24>
    a59c:	42000204 	addi	r8,r8,8
    a5a0:	90024b16 	blt	r18,zero,aed0 <___vfprintf_internal_r+0x1b1c>
    a5a4:	db003417 	ldw	r12,208(sp)
    a5a8:	64a5c83a 	sub	r18,r12,r18
    a5ac:	0480730e 	bge	zero,r18,a77c <___vfprintf_internal_r+0x13c8>
    a5b0:	05400404 	movi	r21,16
    a5b4:	d8801f17 	ldw	r2,124(sp)
    a5b8:	ac817d0e 	bge	r21,r18,abb0 <___vfprintf_internal_r+0x17fc>
    a5bc:	014000b4 	movhi	r5,2
    a5c0:	29432b84 	addi	r5,r5,3246
    a5c4:	d9402c15 	stw	r5,176(sp)
    a5c8:	070001c4 	movi	fp,7
    a5cc:	00000306 	br	a5dc <___vfprintf_internal_r+0x1228>
    a5d0:	42000204 	addi	r8,r8,8
    a5d4:	94bffc04 	addi	r18,r18,-16
    a5d8:	ac81780e 	bge	r21,r18,abbc <___vfprintf_internal_r+0x1808>
    a5dc:	18c00404 	addi	r3,r3,16
    a5e0:	10800044 	addi	r2,r2,1
    a5e4:	45000015 	stw	r20,0(r8)
    a5e8:	45400115 	stw	r21,4(r8)
    a5ec:	d8c02015 	stw	r3,128(sp)
    a5f0:	d8801f15 	stw	r2,124(sp)
    a5f4:	e0bff60e 	bge	fp,r2,a5d0 <__alt_mem_Flash_flash_data+0xf400a5d0>
    a5f8:	b009883a 	mov	r4,r22
    a5fc:	b80b883a 	mov	r5,r23
    a600:	d9801e04 	addi	r6,sp,120
    a604:	0010f4c0 	call	10f4c <__sprint_r>
    a608:	103c5e1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a60c:	d8c02017 	ldw	r3,128(sp)
    a610:	d8801f17 	ldw	r2,124(sp)
    a614:	da000404 	addi	r8,sp,16
    a618:	003fee06 	br	a5d4 <__alt_mem_Flash_flash_data+0xf400a5d4>
    a61c:	dac01e04 	addi	r11,sp,120
    a620:	0025883a 	mov	r18,zero
    a624:	dac03115 	stw	r11,196(sp)
    a628:	003cb006 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a62c:	b009883a 	mov	r4,r22
    a630:	b80b883a 	mov	r5,r23
    a634:	d9801e04 	addi	r6,sp,120
    a638:	0010f4c0 	call	10f4c <__sprint_r>
    a63c:	103c511e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a640:	d8c02017 	ldw	r3,128(sp)
    a644:	d8802787 	ldb	r2,158(sp)
    a648:	da000404 	addi	r8,sp,16
    a64c:	003ceb06 	br	99fc <__alt_mem_Flash_flash_data+0xf40099fc>
    a650:	1cc00017 	ldw	r19,0(r3)
    a654:	dac02d17 	ldw	r11,180(sp)
    a658:	9839d7fa 	srai	fp,r19,31
    a65c:	5ac00104 	addi	r11,r11,4
    a660:	dac02d15 	stw	r11,180(sp)
    a664:	e005883a 	mov	r2,fp
    a668:	003c8106 	br	9870 <__alt_mem_Flash_flash_data+0xf4009870>
    a66c:	657fffc4 	addi	r21,r12,-1
    a670:	057f5d0e 	bge	zero,r21,a3e8 <__alt_mem_Flash_flash_data+0xf400a3e8>
    a674:	07000404 	movi	fp,16
    a678:	e540900e 	bge	fp,r21,a8bc <___vfprintf_internal_r+0x1508>
    a67c:	010000b4 	movhi	r4,2
    a680:	21032b84 	addi	r4,r4,3246
    a684:	d9002c15 	stw	r4,176(sp)
    a688:	01c001c4 	movi	r7,7
    a68c:	00000306 	br	a69c <___vfprintf_internal_r+0x12e8>
    a690:	94800204 	addi	r18,r18,8
    a694:	ad7ffc04 	addi	r21,r21,-16
    a698:	e5408b0e 	bge	fp,r21,a8c8 <___vfprintf_internal_r+0x1514>
    a69c:	18c00404 	addi	r3,r3,16
    a6a0:	84000044 	addi	r16,r16,1
    a6a4:	95000015 	stw	r20,0(r18)
    a6a8:	97000115 	stw	fp,4(r18)
    a6ac:	d8c02015 	stw	r3,128(sp)
    a6b0:	dc001f15 	stw	r16,124(sp)
    a6b4:	3c3ff60e 	bge	r7,r16,a690 <__alt_mem_Flash_flash_data+0xf400a690>
    a6b8:	b009883a 	mov	r4,r22
    a6bc:	b80b883a 	mov	r5,r23
    a6c0:	d9801e04 	addi	r6,sp,120
    a6c4:	d9c03d15 	stw	r7,244(sp)
    a6c8:	0010f4c0 	call	10f4c <__sprint_r>
    a6cc:	d9c03d17 	ldw	r7,244(sp)
    a6d0:	103c2c1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a6d4:	d8c02017 	ldw	r3,128(sp)
    a6d8:	dc001f17 	ldw	r16,124(sp)
    a6dc:	dc800404 	addi	r18,sp,16
    a6e0:	003fec06 	br	a694 <__alt_mem_Flash_flash_data+0xf400a694>
    a6e4:	dac02d17 	ldw	r11,180(sp)
    a6e8:	0039883a 	mov	fp,zero
    a6ec:	0005883a 	mov	r2,zero
    a6f0:	5cc00017 	ldw	r19,0(r11)
    a6f4:	5ac00104 	addi	r11,r11,4
    a6f8:	dac02d15 	stw	r11,180(sp)
    a6fc:	9807883a 	mov	r3,r19
    a700:	003d5b06 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    a704:	db002d17 	ldw	r12,180(sp)
    a708:	0039883a 	mov	fp,zero
    a70c:	00800044 	movi	r2,1
    a710:	64c00017 	ldw	r19,0(r12)
    a714:	63000104 	addi	r12,r12,4
    a718:	db002d15 	stw	r12,180(sp)
    a71c:	9807883a 	mov	r3,r19
    a720:	003d5306 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    a724:	00800084 	movi	r2,2
    a728:	9f06b03a 	or	r3,r19,fp
    a72c:	003d5006 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    a730:	10803fcc 	andi	r2,r2,255
    a734:	1080201c 	xori	r2,r2,128
    a738:	10bfe004 	addi	r2,r2,-128
    a73c:	01000c04 	movi	r4,48
    a740:	1101a526 	beq	r2,r4,add8 <___vfprintf_internal_r+0x1a24>
    a744:	dac03117 	ldw	r11,196(sp)
    a748:	db002817 	ldw	r12,160(sp)
    a74c:	193fffc5 	stb	r4,-1(r3)
    a750:	5affffc4 	addi	r11,r11,-1
    a754:	dac03115 	stw	r11,196(sp)
    a758:	62e5c83a 	sub	r18,r12,r11
    a75c:	003c6306 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a760:	b009883a 	mov	r4,r22
    a764:	b80b883a 	mov	r5,r23
    a768:	d9801e04 	addi	r6,sp,120
    a76c:	0010f4c0 	call	10f4c <__sprint_r>
    a770:	103c041e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a774:	d8c02017 	ldw	r3,128(sp)
    a778:	da000404 	addi	r8,sp,16
    a77c:	db003117 	ldw	r12,196(sp)
    a780:	dac03417 	ldw	r11,208(sp)
    a784:	d8802617 	ldw	r2,152(sp)
    a788:	62e5883a 	add	r18,r12,r11
    a78c:	db003317 	ldw	r12,204(sp)
    a790:	13000216 	blt	r2,r12,a79c <___vfprintf_internal_r+0x13e8>
    a794:	8900004c 	andi	r4,r17,1
    a798:	20000c26 	beq	r4,zero,a7cc <___vfprintf_internal_r+0x1418>
    a79c:	dac03817 	ldw	r11,224(sp)
    a7a0:	d9001f17 	ldw	r4,124(sp)
    a7a4:	db003517 	ldw	r12,212(sp)
    a7a8:	1ac7883a 	add	r3,r3,r11
    a7ac:	21000044 	addi	r4,r4,1
    a7b0:	43000015 	stw	r12,0(r8)
    a7b4:	42c00115 	stw	r11,4(r8)
    a7b8:	d8c02015 	stw	r3,128(sp)
    a7bc:	d9001f15 	stw	r4,124(sp)
    a7c0:	014001c4 	movi	r5,7
    a7c4:	2901cc16 	blt	r5,r4,aef8 <___vfprintf_internal_r+0x1b44>
    a7c8:	42000204 	addi	r8,r8,8
    a7cc:	dac03317 	ldw	r11,204(sp)
    a7d0:	8489c83a 	sub	r4,r16,r18
    a7d4:	5885c83a 	sub	r2,r11,r2
    a7d8:	1021883a 	mov	r16,r2
    a7dc:	2080010e 	bge	r4,r2,a7e4 <___vfprintf_internal_r+0x1430>
    a7e0:	2021883a 	mov	r16,r4
    a7e4:	04000a0e 	bge	zero,r16,a810 <___vfprintf_internal_r+0x145c>
    a7e8:	d9001f17 	ldw	r4,124(sp)
    a7ec:	1c07883a 	add	r3,r3,r16
    a7f0:	44800015 	stw	r18,0(r8)
    a7f4:	21000044 	addi	r4,r4,1
    a7f8:	44000115 	stw	r16,4(r8)
    a7fc:	d8c02015 	stw	r3,128(sp)
    a800:	d9001f15 	stw	r4,124(sp)
    a804:	014001c4 	movi	r5,7
    a808:	2901e316 	blt	r5,r4,af98 <___vfprintf_internal_r+0x1be4>
    a80c:	42000204 	addi	r8,r8,8
    a810:	8001df16 	blt	r16,zero,af90 <___vfprintf_internal_r+0x1bdc>
    a814:	1421c83a 	sub	r16,r2,r16
    a818:	043ccc0e 	bge	zero,r16,9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    a81c:	04800404 	movi	r18,16
    a820:	d8801f17 	ldw	r2,124(sp)
    a824:	943efc0e 	bge	r18,r16,a418 <__alt_mem_Flash_flash_data+0xf400a418>
    a828:	014000b4 	movhi	r5,2
    a82c:	29432b84 	addi	r5,r5,3246
    a830:	d9402c15 	stw	r5,176(sp)
    a834:	054001c4 	movi	r21,7
    a838:	00000306 	br	a848 <___vfprintf_internal_r+0x1494>
    a83c:	42000204 	addi	r8,r8,8
    a840:	843ffc04 	addi	r16,r16,-16
    a844:	943ef70e 	bge	r18,r16,a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a848:	18c00404 	addi	r3,r3,16
    a84c:	10800044 	addi	r2,r2,1
    a850:	45000015 	stw	r20,0(r8)
    a854:	44800115 	stw	r18,4(r8)
    a858:	d8c02015 	stw	r3,128(sp)
    a85c:	d8801f15 	stw	r2,124(sp)
    a860:	a8bff60e 	bge	r21,r2,a83c <__alt_mem_Flash_flash_data+0xf400a83c>
    a864:	b009883a 	mov	r4,r22
    a868:	b80b883a 	mov	r5,r23
    a86c:	d9801e04 	addi	r6,sp,120
    a870:	0010f4c0 	call	10f4c <__sprint_r>
    a874:	103bc31e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a878:	d8c02017 	ldw	r3,128(sp)
    a87c:	d8801f17 	ldw	r2,124(sp)
    a880:	da000404 	addi	r8,sp,16
    a884:	003fee06 	br	a840 <__alt_mem_Flash_flash_data+0xf400a840>
    a888:	8888703a 	and	r4,r17,r2
    a88c:	203eab1e 	bne	r4,zero,a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a890:	dc001f17 	ldw	r16,124(sp)
    a894:	db003117 	ldw	r12,196(sp)
    a898:	40800115 	stw	r2,4(r8)
    a89c:	84000044 	addi	r16,r16,1
    a8a0:	43000015 	stw	r12,0(r8)
    a8a4:	d8c02015 	stw	r3,128(sp)
    a8a8:	dc001f15 	stw	r16,124(sp)
    a8ac:	008001c4 	movi	r2,7
    a8b0:	14000e16 	blt	r2,r16,a8ec <___vfprintf_internal_r+0x1538>
    a8b4:	44800204 	addi	r18,r8,8
    a8b8:	003ecb06 	br	a3e8 <__alt_mem_Flash_flash_data+0xf400a3e8>
    a8bc:	008000b4 	movhi	r2,2
    a8c0:	10832b84 	addi	r2,r2,3246
    a8c4:	d8802c15 	stw	r2,176(sp)
    a8c8:	dac02c17 	ldw	r11,176(sp)
    a8cc:	1d47883a 	add	r3,r3,r21
    a8d0:	84000044 	addi	r16,r16,1
    a8d4:	92c00015 	stw	r11,0(r18)
    a8d8:	95400115 	stw	r21,4(r18)
    a8dc:	d8c02015 	stw	r3,128(sp)
    a8e0:	dc001f15 	stw	r16,124(sp)
    a8e4:	008001c4 	movi	r2,7
    a8e8:	143ebe0e 	bge	r2,r16,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a8ec:	b009883a 	mov	r4,r22
    a8f0:	b80b883a 	mov	r5,r23
    a8f4:	d9801e04 	addi	r6,sp,120
    a8f8:	0010f4c0 	call	10f4c <__sprint_r>
    a8fc:	103ba11e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a900:	d8c02017 	ldw	r3,128(sp)
    a904:	dc001f17 	ldw	r16,124(sp)
    a908:	dc800404 	addi	r18,sp,16
    a90c:	003eb606 	br	a3e8 <__alt_mem_Flash_flash_data+0xf400a3e8>
    a910:	b009883a 	mov	r4,r22
    a914:	b80b883a 	mov	r5,r23
    a918:	d9801e04 	addi	r6,sp,120
    a91c:	0010f4c0 	call	10f4c <__sprint_r>
    a920:	103b981e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a924:	d8c02017 	ldw	r3,128(sp)
    a928:	dc001f17 	ldw	r16,124(sp)
    a92c:	da000404 	addi	r8,sp,16
    a930:	003e8d06 	br	a368 <__alt_mem_Flash_flash_data+0xf400a368>
    a934:	b009883a 	mov	r4,r22
    a938:	b80b883a 	mov	r5,r23
    a93c:	d9801e04 	addi	r6,sp,120
    a940:	0010f4c0 	call	10f4c <__sprint_r>
    a944:	103b8f1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a948:	d8c02017 	ldw	r3,128(sp)
    a94c:	dc001f17 	ldw	r16,124(sp)
    a950:	dc800404 	addi	r18,sp,16
    a954:	003e8f06 	br	a394 <__alt_mem_Flash_flash_data+0xf400a394>
    a958:	db001e04 	addi	r12,sp,120
    a95c:	0025883a 	mov	r18,zero
    a960:	db003115 	stw	r12,196(sp)
    a964:	003be106 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    a968:	b009883a 	mov	r4,r22
    a96c:	b80b883a 	mov	r5,r23
    a970:	d9801e04 	addi	r6,sp,120
    a974:	0010f4c0 	call	10f4c <__sprint_r>
    a978:	103b821e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a97c:	d8c02017 	ldw	r3,128(sp)
    a980:	da000404 	addi	r8,sp,16
    a984:	003c3b06 	br	9a74 <__alt_mem_Flash_flash_data+0xf4009a74>
    a988:	04e7c83a 	sub	r19,zero,r19
    a98c:	9804c03a 	cmpne	r2,r19,zero
    a990:	0739c83a 	sub	fp,zero,fp
    a994:	e0b9c83a 	sub	fp,fp,r2
    a998:	05400b44 	movi	r21,45
    a99c:	dd402785 	stb	r21,158(sp)
    a9a0:	da403215 	stw	r9,200(sp)
    a9a4:	00800044 	movi	r2,1
    a9a8:	9f06b03a 	or	r3,r19,fp
    a9ac:	003bb506 	br	9884 <__alt_mem_Flash_flash_data+0xf4009884>
    a9b0:	da003f15 	stw	r8,252(sp)
    a9b4:	da403e15 	stw	r9,248(sp)
    a9b8:	000f9f80 	call	f9f8 <__fpclassifyd>
    a9bc:	da003f17 	ldw	r8,252(sp)
    a9c0:	da403e17 	ldw	r9,248(sp)
    a9c4:	1000ce26 	beq	r2,zero,ad00 <___vfprintf_internal_r+0x194c>
    a9c8:	057ff7c4 	movi	r21,-33
    a9cc:	00bfffc4 	movi	r2,-1
    a9d0:	856a703a 	and	r21,r16,r21
    a9d4:	4881e826 	beq	r9,r2,b178 <___vfprintf_internal_r+0x1dc4>
    a9d8:	008011c4 	movi	r2,71
    a9dc:	a881e326 	beq	r21,r2,b16c <___vfprintf_internal_r+0x1db8>
    a9e0:	db003917 	ldw	r12,228(sp)
    a9e4:	8ac04014 	ori	r11,r17,256
    a9e8:	dac02d15 	stw	r11,180(sp)
    a9ec:	6001ed16 	blt	r12,zero,b1a4 <___vfprintf_internal_r+0x1df0>
    a9f0:	dc803917 	ldw	r18,228(sp)
    a9f4:	d8002b05 	stb	zero,172(sp)
    a9f8:	00801984 	movi	r2,102
    a9fc:	80811826 	beq	r16,r2,ae60 <___vfprintf_internal_r+0x1aac>
    aa00:	00801184 	movi	r2,70
    aa04:	80811626 	beq	r16,r2,ae60 <___vfprintf_internal_r+0x1aac>
    aa08:	00801144 	movi	r2,69
    aa0c:	a881e926 	beq	r21,r2,b1b4 <___vfprintf_internal_r+0x1e00>
    aa10:	4839883a 	mov	fp,r9
    aa14:	d8802604 	addi	r2,sp,152
    aa18:	d8800115 	stw	r2,4(sp)
    aa1c:	d9403717 	ldw	r5,220(sp)
    aa20:	d8802504 	addi	r2,sp,148
    aa24:	d8800215 	stw	r2,8(sp)
    aa28:	d8802104 	addi	r2,sp,132
    aa2c:	df000015 	stw	fp,0(sp)
    aa30:	d8800315 	stw	r2,12(sp)
    aa34:	b009883a 	mov	r4,r22
    aa38:	900d883a 	mov	r6,r18
    aa3c:	01c00084 	movi	r7,2
    aa40:	da003f15 	stw	r8,252(sp)
    aa44:	da403e15 	stw	r9,248(sp)
    aa48:	000b7380 	call	b738 <_dtoa_r>
    aa4c:	d8803115 	stw	r2,196(sp)
    aa50:	008019c4 	movi	r2,103
    aa54:	da003f17 	ldw	r8,252(sp)
    aa58:	da403e17 	ldw	r9,248(sp)
    aa5c:	80800226 	beq	r16,r2,aa68 <___vfprintf_internal_r+0x16b4>
    aa60:	008011c4 	movi	r2,71
    aa64:	8081101e 	bne	r16,r2,aea8 <___vfprintf_internal_r+0x1af4>
    aa68:	8880004c 	andi	r2,r17,1
    aa6c:	1001dd26 	beq	r2,zero,b1e4 <___vfprintf_internal_r+0x1e30>
    aa70:	db003117 	ldw	r12,196(sp)
    aa74:	6715883a 	add	r10,r12,fp
    aa78:	d9003717 	ldw	r4,220(sp)
    aa7c:	900b883a 	mov	r5,r18
    aa80:	000d883a 	mov	r6,zero
    aa84:	000f883a 	mov	r7,zero
    aa88:	da003f15 	stw	r8,252(sp)
    aa8c:	da403e15 	stw	r9,248(sp)
    aa90:	da803d15 	stw	r10,244(sp)
    aa94:	000528c0 	call	528c <__eqdf2>
    aa98:	da003f17 	ldw	r8,252(sp)
    aa9c:	da403e17 	ldw	r9,248(sp)
    aaa0:	da803d17 	ldw	r10,244(sp)
    aaa4:	10016526 	beq	r2,zero,b03c <___vfprintf_internal_r+0x1c88>
    aaa8:	d8802117 	ldw	r2,132(sp)
    aaac:	1280062e 	bgeu	r2,r10,aac8 <___vfprintf_internal_r+0x1714>
    aab0:	01000c04 	movi	r4,48
    aab4:	10c00044 	addi	r3,r2,1
    aab8:	d8c02115 	stw	r3,132(sp)
    aabc:	11000005 	stb	r4,0(r2)
    aac0:	d8802117 	ldw	r2,132(sp)
    aac4:	12bffb36 	bltu	r2,r10,aab4 <__alt_mem_Flash_flash_data+0xf400aab4>
    aac8:	db003117 	ldw	r12,196(sp)
    aacc:	1305c83a 	sub	r2,r2,r12
    aad0:	d8803315 	stw	r2,204(sp)
    aad4:	008011c4 	movi	r2,71
    aad8:	a8814d26 	beq	r21,r2,b010 <___vfprintf_internal_r+0x1c5c>
    aadc:	00801944 	movi	r2,101
    aae0:	1402060e 	bge	r2,r16,b2fc <___vfprintf_internal_r+0x1f48>
    aae4:	00801984 	movi	r2,102
    aae8:	8081b426 	beq	r16,r2,b1bc <___vfprintf_internal_r+0x1e08>
    aaec:	db002617 	ldw	r12,152(sp)
    aaf0:	db003415 	stw	r12,208(sp)
    aaf4:	db003417 	ldw	r12,208(sp)
    aaf8:	dac03317 	ldw	r11,204(sp)
    aafc:	62c1a016 	blt	r12,r11,b180 <___vfprintf_internal_r+0x1dcc>
    ab00:	8c40004c 	andi	r17,r17,1
    ab04:	8801bf1e 	bne	r17,zero,b204 <___vfprintf_internal_r+0x1e50>
    ab08:	6005883a 	mov	r2,r12
    ab0c:	6001b316 	blt	r12,zero,b1dc <___vfprintf_internal_r+0x1e28>
    ab10:	dc803417 	ldw	r18,208(sp)
    ab14:	df002b07 	ldb	fp,172(sp)
    ab18:	e0012e1e 	bne	fp,zero,afd4 <___vfprintf_internal_r+0x1c20>
    ab1c:	dc402d17 	ldw	r17,180(sp)
    ab20:	dd402783 	ldbu	r21,158(sp)
    ab24:	d8802b15 	stw	r2,172(sp)
    ab28:	dcc02d15 	stw	r19,180(sp)
    ab2c:	d8003215 	stw	zero,200(sp)
    ab30:	003b7306 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    ab34:	00800084 	movi	r2,2
    ab38:	003c4d06 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    ab3c:	8880040c 	andi	r2,r17,16
    ab40:	1000091e 	bne	r2,zero,ab68 <___vfprintf_internal_r+0x17b4>
    ab44:	8c40100c 	andi	r17,r17,64
    ab48:	88000726 	beq	r17,zero,ab68 <___vfprintf_internal_r+0x17b4>
    ab4c:	db002d17 	ldw	r12,180(sp)
    ab50:	dac02f17 	ldw	r11,188(sp)
    ab54:	60800017 	ldw	r2,0(r12)
    ab58:	63000104 	addi	r12,r12,4
    ab5c:	db002d15 	stw	r12,180(sp)
    ab60:	12c0000d 	sth	r11,0(r2)
    ab64:	003a4e06 	br	94a0 <__alt_mem_Flash_flash_data+0xf40094a0>
    ab68:	db002d17 	ldw	r12,180(sp)
    ab6c:	dac02f17 	ldw	r11,188(sp)
    ab70:	60800017 	ldw	r2,0(r12)
    ab74:	63000104 	addi	r12,r12,4
    ab78:	db002d15 	stw	r12,180(sp)
    ab7c:	12c00015 	stw	r11,0(r2)
    ab80:	003a4706 	br	94a0 <__alt_mem_Flash_flash_data+0xf40094a0>
    ab84:	1c000007 	ldb	r16,0(r3)
    ab88:	1805883a 	mov	r2,r3
    ab8c:	003a6e06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    ab90:	88c0100c 	andi	r3,r17,64
    ab94:	18006b26 	beq	r3,zero,ad44 <___vfprintf_internal_r+0x1990>
    ab98:	dac02d17 	ldw	r11,180(sp)
    ab9c:	14c0000b 	ldhu	r19,0(r2)
    aba0:	0039883a 	mov	fp,zero
    aba4:	5ac00104 	addi	r11,r11,4
    aba8:	dac02d15 	stw	r11,180(sp)
    abac:	003cb206 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    abb0:	010000b4 	movhi	r4,2
    abb4:	21032b84 	addi	r4,r4,3246
    abb8:	d9002c15 	stw	r4,176(sp)
    abbc:	dac02c17 	ldw	r11,176(sp)
    abc0:	1c87883a 	add	r3,r3,r18
    abc4:	10800044 	addi	r2,r2,1
    abc8:	42c00015 	stw	r11,0(r8)
    abcc:	44800115 	stw	r18,4(r8)
    abd0:	d8c02015 	stw	r3,128(sp)
    abd4:	d8801f15 	stw	r2,124(sp)
    abd8:	010001c4 	movi	r4,7
    abdc:	20bee016 	blt	r4,r2,a760 <__alt_mem_Flash_flash_data+0xf400a760>
    abe0:	42000204 	addi	r8,r8,8
    abe4:	003ee506 	br	a77c <__alt_mem_Flash_flash_data+0xf400a77c>
    abe8:	010000b4 	movhi	r4,2
    abec:	21032b84 	addi	r4,r4,3246
    abf0:	d9002c15 	stw	r4,176(sp)
    abf4:	003bbe06 	br	9af0 <__alt_mem_Flash_flash_data+0xf4009af0>
    abf8:	b009883a 	mov	r4,r22
    abfc:	b80b883a 	mov	r5,r23
    ac00:	d9801e04 	addi	r6,sp,120
    ac04:	0010f4c0 	call	10f4c <__sprint_r>
    ac08:	103ade1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    ac0c:	d8c02017 	ldw	r3,128(sp)
    ac10:	da000404 	addi	r8,sp,16
    ac14:	003d6b06 	br	a1c4 <__alt_mem_Flash_flash_data+0xf400a1c4>
    ac18:	d8801f17 	ldw	r2,124(sp)
    ac1c:	030000b4 	movhi	r12,2
    ac20:	01000044 	movi	r4,1
    ac24:	18c00044 	addi	r3,r3,1
    ac28:	10800044 	addi	r2,r2,1
    ac2c:	63032304 	addi	r12,r12,3212
    ac30:	41000115 	stw	r4,4(r8)
    ac34:	43000015 	stw	r12,0(r8)
    ac38:	d8c02015 	stw	r3,128(sp)
    ac3c:	d8801f15 	stw	r2,124(sp)
    ac40:	010001c4 	movi	r4,7
    ac44:	20804916 	blt	r4,r2,ad6c <___vfprintf_internal_r+0x19b8>
    ac48:	42000204 	addi	r8,r8,8
    ac4c:	8000041e 	bne	r16,zero,ac60 <___vfprintf_internal_r+0x18ac>
    ac50:	dac03317 	ldw	r11,204(sp)
    ac54:	5800021e 	bne	r11,zero,ac60 <___vfprintf_internal_r+0x18ac>
    ac58:	8880004c 	andi	r2,r17,1
    ac5c:	103bbb26 	beq	r2,zero,9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    ac60:	db003817 	ldw	r12,224(sp)
    ac64:	d8801f17 	ldw	r2,124(sp)
    ac68:	dac03517 	ldw	r11,212(sp)
    ac6c:	1b07883a 	add	r3,r3,r12
    ac70:	10800044 	addi	r2,r2,1
    ac74:	42c00015 	stw	r11,0(r8)
    ac78:	43000115 	stw	r12,4(r8)
    ac7c:	d8c02015 	stw	r3,128(sp)
    ac80:	d8801f15 	stw	r2,124(sp)
    ac84:	010001c4 	movi	r4,7
    ac88:	20812e16 	blt	r4,r2,b144 <___vfprintf_internal_r+0x1d90>
    ac8c:	42000204 	addi	r8,r8,8
    ac90:	0421c83a 	sub	r16,zero,r16
    ac94:	04005c0e 	bge	zero,r16,ae08 <___vfprintf_internal_r+0x1a54>
    ac98:	04800404 	movi	r18,16
    ac9c:	94009f0e 	bge	r18,r16,af1c <___vfprintf_internal_r+0x1b68>
    aca0:	010000b4 	movhi	r4,2
    aca4:	21032b84 	addi	r4,r4,3246
    aca8:	d9002c15 	stw	r4,176(sp)
    acac:	054001c4 	movi	r21,7
    acb0:	00000306 	br	acc0 <___vfprintf_internal_r+0x190c>
    acb4:	42000204 	addi	r8,r8,8
    acb8:	843ffc04 	addi	r16,r16,-16
    acbc:	94009a0e 	bge	r18,r16,af28 <___vfprintf_internal_r+0x1b74>
    acc0:	18c00404 	addi	r3,r3,16
    acc4:	10800044 	addi	r2,r2,1
    acc8:	45000015 	stw	r20,0(r8)
    accc:	44800115 	stw	r18,4(r8)
    acd0:	d8c02015 	stw	r3,128(sp)
    acd4:	d8801f15 	stw	r2,124(sp)
    acd8:	a8bff60e 	bge	r21,r2,acb4 <__alt_mem_Flash_flash_data+0xf400acb4>
    acdc:	b009883a 	mov	r4,r22
    ace0:	b80b883a 	mov	r5,r23
    ace4:	d9801e04 	addi	r6,sp,120
    ace8:	0010f4c0 	call	10f4c <__sprint_r>
    acec:	103aa51e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    acf0:	d8c02017 	ldw	r3,128(sp)
    acf4:	d8801f17 	ldw	r2,124(sp)
    acf8:	da000404 	addi	r8,sp,16
    acfc:	003fee06 	br	acb8 <__alt_mem_Flash_flash_data+0xf400acb8>
    ad00:	008011c4 	movi	r2,71
    ad04:	1400be16 	blt	r2,r16,b000 <___vfprintf_internal_r+0x1c4c>
    ad08:	030000b4 	movhi	r12,2
    ad0c:	63031504 	addi	r12,r12,3156
    ad10:	db003115 	stw	r12,196(sp)
    ad14:	00c000c4 	movi	r3,3
    ad18:	00bfdfc4 	movi	r2,-129
    ad1c:	d8c02b15 	stw	r3,172(sp)
    ad20:	88a2703a 	and	r17,r17,r2
    ad24:	dd402783 	ldbu	r21,158(sp)
    ad28:	dcc02d15 	stw	r19,180(sp)
    ad2c:	1825883a 	mov	r18,r3
    ad30:	d8003215 	stw	zero,200(sp)
    ad34:	d8003415 	stw	zero,208(sp)
    ad38:	003af106 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    ad3c:	4825883a 	mov	r18,r9
    ad40:	003c9306 	br	9f90 <__alt_mem_Flash_flash_data+0xf4009f90>
    ad44:	db002d17 	ldw	r12,180(sp)
    ad48:	14c00017 	ldw	r19,0(r2)
    ad4c:	0039883a 	mov	fp,zero
    ad50:	63000104 	addi	r12,r12,4
    ad54:	db002d15 	stw	r12,180(sp)
    ad58:	003c4706 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    ad5c:	008000b4 	movhi	r2,2
    ad60:	10831304 	addi	r2,r2,3148
    ad64:	d8803115 	stw	r2,196(sp)
    ad68:	003bf106 	br	9d30 <__alt_mem_Flash_flash_data+0xf4009d30>
    ad6c:	b009883a 	mov	r4,r22
    ad70:	b80b883a 	mov	r5,r23
    ad74:	d9801e04 	addi	r6,sp,120
    ad78:	0010f4c0 	call	10f4c <__sprint_r>
    ad7c:	103a811e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    ad80:	dc002617 	ldw	r16,152(sp)
    ad84:	d8c02017 	ldw	r3,128(sp)
    ad88:	da000404 	addi	r8,sp,16
    ad8c:	003faf06 	br	ac4c <__alt_mem_Flash_flash_data+0xf400ac4c>
    ad90:	db002e17 	ldw	r12,184(sp)
    ad94:	1805883a 	mov	r2,r3
    ad98:	dac02d15 	stw	r11,180(sp)
    ad9c:	0319c83a 	sub	r12,zero,r12
    ada0:	db002e15 	stw	r12,184(sp)
    ada4:	003a8206 	br	97b0 <__alt_mem_Flash_flash_data+0xf40097b0>
    ada8:	18800044 	addi	r2,r3,1
    adac:	8c400814 	ori	r17,r17,32
    adb0:	1c000047 	ldb	r16,1(r3)
    adb4:	0039e406 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    adb8:	b009883a 	mov	r4,r22
    adbc:	b80b883a 	mov	r5,r23
    adc0:	d9801e04 	addi	r6,sp,120
    adc4:	0010f4c0 	call	10f4c <__sprint_r>
    adc8:	103a6e1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    adcc:	d8c02017 	ldw	r3,128(sp)
    add0:	da000404 	addi	r8,sp,16
    add4:	003d0c06 	br	a208 <__alt_mem_Flash_flash_data+0xf400a208>
    add8:	db002817 	ldw	r12,160(sp)
    addc:	d8c03117 	ldw	r3,196(sp)
    ade0:	60e5c83a 	sub	r18,r12,r3
    ade4:	003ac106 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    ade8:	b009883a 	mov	r4,r22
    adec:	b80b883a 	mov	r5,r23
    adf0:	d9801e04 	addi	r6,sp,120
    adf4:	0010f4c0 	call	10f4c <__sprint_r>
    adf8:	103a621e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    adfc:	d8c02017 	ldw	r3,128(sp)
    ae00:	d8801f17 	ldw	r2,124(sp)
    ae04:	da000404 	addi	r8,sp,16
    ae08:	db003317 	ldw	r12,204(sp)
    ae0c:	dac03117 	ldw	r11,196(sp)
    ae10:	10800044 	addi	r2,r2,1
    ae14:	1b07883a 	add	r3,r3,r12
    ae18:	42c00015 	stw	r11,0(r8)
    ae1c:	43000115 	stw	r12,4(r8)
    ae20:	d8c02015 	stw	r3,128(sp)
    ae24:	d8801f15 	stw	r2,124(sp)
    ae28:	010001c4 	movi	r4,7
    ae2c:	20bb460e 	bge	r4,r2,9b48 <__alt_mem_Flash_flash_data+0xf4009b48>
    ae30:	003d8506 	br	a448 <__alt_mem_Flash_flash_data+0xf400a448>
    ae34:	da003f15 	stw	r8,252(sp)
    ae38:	000738c0 	call	738c <strlen>
    ae3c:	1025883a 	mov	r18,r2
    ae40:	da003f17 	ldw	r8,252(sp)
    ae44:	903c540e 	bge	r18,zero,9f98 <__alt_mem_Flash_flash_data+0xf4009f98>
    ae48:	0005883a 	mov	r2,zero
    ae4c:	003c5206 	br	9f98 <__alt_mem_Flash_flash_data+0xf4009f98>
    ae50:	010000b4 	movhi	r4,2
    ae54:	21032f84 	addi	r4,r4,3262
    ae58:	d9003615 	stw	r4,216(sp)
    ae5c:	003adc06 	br	99d0 <__alt_mem_Flash_flash_data+0xf40099d0>
    ae60:	d8802604 	addi	r2,sp,152
    ae64:	d8800115 	stw	r2,4(sp)
    ae68:	d9403717 	ldw	r5,220(sp)
    ae6c:	d8802504 	addi	r2,sp,148
    ae70:	d8800215 	stw	r2,8(sp)
    ae74:	d8802104 	addi	r2,sp,132
    ae78:	da400015 	stw	r9,0(sp)
    ae7c:	d8800315 	stw	r2,12(sp)
    ae80:	b009883a 	mov	r4,r22
    ae84:	900d883a 	mov	r6,r18
    ae88:	01c000c4 	movi	r7,3
    ae8c:	da003f15 	stw	r8,252(sp)
    ae90:	da403e15 	stw	r9,248(sp)
    ae94:	000b7380 	call	b738 <_dtoa_r>
    ae98:	da403e17 	ldw	r9,248(sp)
    ae9c:	da003f17 	ldw	r8,252(sp)
    aea0:	d8803115 	stw	r2,196(sp)
    aea4:	4839883a 	mov	fp,r9
    aea8:	dac03117 	ldw	r11,196(sp)
    aeac:	00801184 	movi	r2,70
    aeb0:	5f15883a 	add	r10,r11,fp
    aeb4:	a8bef01e 	bne	r21,r2,aa78 <__alt_mem_Flash_flash_data+0xf400aa78>
    aeb8:	59000007 	ldb	r4,0(r11)
    aebc:	00800c04 	movi	r2,48
    aec0:	2080d526 	beq	r4,r2,b218 <___vfprintf_internal_r+0x1e64>
    aec4:	d8c02617 	ldw	r3,152(sp)
    aec8:	50d5883a 	add	r10,r10,r3
    aecc:	003eea06 	br	aa78 <__alt_mem_Flash_flash_data+0xf400aa78>
    aed0:	0025883a 	mov	r18,zero
    aed4:	003db306 	br	a5a4 <__alt_mem_Flash_flash_data+0xf400a5a4>
    aed8:	b009883a 	mov	r4,r22
    aedc:	b80b883a 	mov	r5,r23
    aee0:	d9801e04 	addi	r6,sp,120
    aee4:	0010f4c0 	call	10f4c <__sprint_r>
    aee8:	103a261e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    aeec:	d8c02017 	ldw	r3,128(sp)
    aef0:	da000404 	addi	r8,sp,16
    aef4:	003daa06 	br	a5a0 <__alt_mem_Flash_flash_data+0xf400a5a0>
    aef8:	b009883a 	mov	r4,r22
    aefc:	b80b883a 	mov	r5,r23
    af00:	d9801e04 	addi	r6,sp,120
    af04:	0010f4c0 	call	10f4c <__sprint_r>
    af08:	103a1e1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    af0c:	d8802617 	ldw	r2,152(sp)
    af10:	d8c02017 	ldw	r3,128(sp)
    af14:	da000404 	addi	r8,sp,16
    af18:	003e2c06 	br	a7cc <__alt_mem_Flash_flash_data+0xf400a7cc>
    af1c:	030000b4 	movhi	r12,2
    af20:	63032b84 	addi	r12,r12,3246
    af24:	db002c15 	stw	r12,176(sp)
    af28:	dac02c17 	ldw	r11,176(sp)
    af2c:	1c07883a 	add	r3,r3,r16
    af30:	10800044 	addi	r2,r2,1
    af34:	42c00015 	stw	r11,0(r8)
    af38:	44000115 	stw	r16,4(r8)
    af3c:	d8c02015 	stw	r3,128(sp)
    af40:	d8801f15 	stw	r2,124(sp)
    af44:	010001c4 	movi	r4,7
    af48:	20bfa716 	blt	r4,r2,ade8 <__alt_mem_Flash_flash_data+0xf400ade8>
    af4c:	42000204 	addi	r8,r8,8
    af50:	003fad06 	br	ae08 <__alt_mem_Flash_flash_data+0xf400ae08>
    af54:	00800184 	movi	r2,6
    af58:	1240012e 	bgeu	r2,r9,af60 <___vfprintf_internal_r+0x1bac>
    af5c:	1013883a 	mov	r9,r2
    af60:	4825883a 	mov	r18,r9
    af64:	4805883a 	mov	r2,r9
    af68:	4800c216 	blt	r9,zero,b274 <___vfprintf_internal_r+0x1ec0>
    af6c:	d8802b15 	stw	r2,172(sp)
    af70:	008000b4 	movhi	r2,2
    af74:	10832104 	addi	r2,r2,3204
    af78:	d8803115 	stw	r2,196(sp)
    af7c:	dcc02d15 	stw	r19,180(sp)
    af80:	d8003215 	stw	zero,200(sp)
    af84:	d8003415 	stw	zero,208(sp)
    af88:	0005883a 	mov	r2,zero
    af8c:	003a6306 	br	991c <__alt_mem_Flash_flash_data+0xf400991c>
    af90:	0021883a 	mov	r16,zero
    af94:	003e1f06 	br	a814 <__alt_mem_Flash_flash_data+0xf400a814>
    af98:	b009883a 	mov	r4,r22
    af9c:	b80b883a 	mov	r5,r23
    afa0:	d9801e04 	addi	r6,sp,120
    afa4:	0010f4c0 	call	10f4c <__sprint_r>
    afa8:	1039f61e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    afac:	d8802617 	ldw	r2,152(sp)
    afb0:	db003317 	ldw	r12,204(sp)
    afb4:	d8c02017 	ldw	r3,128(sp)
    afb8:	da000404 	addi	r8,sp,16
    afbc:	6085c83a 	sub	r2,r12,r2
    afc0:	003e1306 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    afc4:	030000b4 	movhi	r12,2
    afc8:	63032f84 	addi	r12,r12,3262
    afcc:	db003615 	stw	r12,216(sp)
    afd0:	003b0206 	br	9bdc <__alt_mem_Flash_flash_data+0xf4009bdc>
    afd4:	00c00b44 	movi	r3,45
    afd8:	d8802b15 	stw	r2,172(sp)
    afdc:	dc402d17 	ldw	r17,180(sp)
    afe0:	d8c02785 	stb	r3,158(sp)
    afe4:	dcc02d15 	stw	r19,180(sp)
    afe8:	d8003215 	stw	zero,200(sp)
    afec:	00800b44 	movi	r2,45
    aff0:	003a4706 	br	9910 <__alt_mem_Flash_flash_data+0xf4009910>
    aff4:	05400b44 	movi	r21,45
    aff8:	dd402785 	stb	r21,158(sp)
    affc:	003b4706 	br	9d1c <__alt_mem_Flash_flash_data+0xf4009d1c>
    b000:	008000b4 	movhi	r2,2
    b004:	10831604 	addi	r2,r2,3160
    b008:	d8803115 	stw	r2,196(sp)
    b00c:	003f4106 	br	ad14 <__alt_mem_Flash_flash_data+0xf400ad14>
    b010:	d8c02617 	ldw	r3,152(sp)
    b014:	00bfff44 	movi	r2,-3
    b018:	18801116 	blt	r3,r2,b060 <___vfprintf_internal_r+0x1cac>
    b01c:	48c01016 	blt	r9,r3,b060 <___vfprintf_internal_r+0x1cac>
    b020:	d8c03415 	stw	r3,208(sp)
    b024:	040019c4 	movi	r16,103
    b028:	003eb206 	br	aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    b02c:	010000b4 	movhi	r4,2
    b030:	21032b84 	addi	r4,r4,3246
    b034:	d9002c15 	stw	r4,176(sp)
    b038:	003cb106 	br	a300 <__alt_mem_Flash_flash_data+0xf400a300>
    b03c:	5005883a 	mov	r2,r10
    b040:	003ea106 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    b044:	da402b15 	stw	r9,172(sp)
    b048:	dd402783 	ldbu	r21,158(sp)
    b04c:	4825883a 	mov	r18,r9
    b050:	dcc02d15 	stw	r19,180(sp)
    b054:	d8003215 	stw	zero,200(sp)
    b058:	d8003415 	stw	zero,208(sp)
    b05c:	003a2806 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    b060:	843fff84 	addi	r16,r16,-2
    b064:	1f3fffc4 	addi	fp,r3,-1
    b068:	df002615 	stw	fp,152(sp)
    b06c:	dc0022c5 	stb	r16,139(sp)
    b070:	e0009816 	blt	fp,zero,b2d4 <___vfprintf_internal_r+0x1f20>
    b074:	00800ac4 	movi	r2,43
    b078:	d8802305 	stb	r2,140(sp)
    b07c:	00800244 	movi	r2,9
    b080:	1700750e 	bge	r2,fp,b258 <___vfprintf_internal_r+0x1ea4>
    b084:	dd4022c4 	addi	r21,sp,139
    b088:	dc002c15 	stw	r16,176(sp)
    b08c:	4025883a 	mov	r18,r8
    b090:	a821883a 	mov	r16,r21
    b094:	e009883a 	mov	r4,fp
    b098:	01400284 	movi	r5,10
    b09c:	00045f40 	call	45f4 <__modsi3>
    b0a0:	10800c04 	addi	r2,r2,48
    b0a4:	843fffc4 	addi	r16,r16,-1
    b0a8:	e009883a 	mov	r4,fp
    b0ac:	01400284 	movi	r5,10
    b0b0:	80800005 	stb	r2,0(r16)
    b0b4:	00045a00 	call	45a0 <__divsi3>
    b0b8:	1039883a 	mov	fp,r2
    b0bc:	00800244 	movi	r2,9
    b0c0:	173ff416 	blt	r2,fp,b094 <__alt_mem_Flash_flash_data+0xf400b094>
    b0c4:	9011883a 	mov	r8,r18
    b0c8:	e0800c04 	addi	r2,fp,48
    b0cc:	8025883a 	mov	r18,r16
    b0d0:	913fffc4 	addi	r4,r18,-1
    b0d4:	90bfffc5 	stb	r2,-1(r18)
    b0d8:	dc002c17 	ldw	r16,176(sp)
    b0dc:	2540852e 	bgeu	r4,r21,b2f4 <___vfprintf_internal_r+0x1f40>
    b0e0:	d9402384 	addi	r5,sp,142
    b0e4:	2c8bc83a 	sub	r5,r5,r18
    b0e8:	d8c02344 	addi	r3,sp,141
    b0ec:	a94b883a 	add	r5,r21,r5
    b0f0:	00000106 	br	b0f8 <___vfprintf_internal_r+0x1d44>
    b0f4:	20800003 	ldbu	r2,0(r4)
    b0f8:	18800005 	stb	r2,0(r3)
    b0fc:	18c00044 	addi	r3,r3,1
    b100:	21000044 	addi	r4,r4,1
    b104:	197ffb1e 	bne	r3,r5,b0f4 <__alt_mem_Flash_flash_data+0xf400b0f4>
    b108:	d8802304 	addi	r2,sp,140
    b10c:	1485c83a 	sub	r2,r2,r18
    b110:	d8c02344 	addi	r3,sp,141
    b114:	1885883a 	add	r2,r3,r2
    b118:	dac03317 	ldw	r11,204(sp)
    b11c:	156bc83a 	sub	r21,r2,r21
    b120:	dd403a15 	stw	r21,232(sp)
    b124:	00800044 	movi	r2,1
    b128:	5d65883a 	add	r18,r11,r21
    b12c:	12c0660e 	bge	r2,r11,b2c8 <___vfprintf_internal_r+0x1f14>
    b130:	94800044 	addi	r18,r18,1
    b134:	9005883a 	mov	r2,r18
    b138:	90006116 	blt	r18,zero,b2c0 <___vfprintf_internal_r+0x1f0c>
    b13c:	d8003415 	stw	zero,208(sp)
    b140:	003e7406 	br	ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b144:	b009883a 	mov	r4,r22
    b148:	b80b883a 	mov	r5,r23
    b14c:	d9801e04 	addi	r6,sp,120
    b150:	0010f4c0 	call	10f4c <__sprint_r>
    b154:	10398b1e 	bne	r2,zero,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    b158:	dc002617 	ldw	r16,152(sp)
    b15c:	d8c02017 	ldw	r3,128(sp)
    b160:	d8801f17 	ldw	r2,124(sp)
    b164:	da000404 	addi	r8,sp,16
    b168:	003ec906 	br	ac90 <__alt_mem_Flash_flash_data+0xf400ac90>
    b16c:	483e1c1e 	bne	r9,zero,a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    b170:	9013883a 	mov	r9,r18
    b174:	003e1a06 	br	a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    b178:	02400184 	movi	r9,6
    b17c:	003e1806 	br	a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    b180:	d8c03417 	ldw	r3,208(sp)
    b184:	00c04b0e 	bge	zero,r3,b2b4 <___vfprintf_internal_r+0x1f00>
    b188:	04800044 	movi	r18,1
    b18c:	dac03317 	ldw	r11,204(sp)
    b190:	92e5883a 	add	r18,r18,r11
    b194:	9005883a 	mov	r2,r18
    b198:	903e5e0e 	bge	r18,zero,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b19c:	0005883a 	mov	r2,zero
    b1a0:	003e5c06 	br	ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b1a4:	00c00b44 	movi	r3,45
    b1a8:	64a0003c 	xorhi	r18,r12,32768
    b1ac:	d8c02b05 	stb	r3,172(sp)
    b1b0:	003e1106 	br	a9f8 <__alt_mem_Flash_flash_data+0xf400a9f8>
    b1b4:	4f000044 	addi	fp,r9,1
    b1b8:	003e1606 	br	aa14 <__alt_mem_Flash_flash_data+0xf400aa14>
    b1bc:	d8c02617 	ldw	r3,152(sp)
    b1c0:	d8c03415 	stw	r3,208(sp)
    b1c4:	00c0350e 	bge	zero,r3,b29c <___vfprintf_internal_r+0x1ee8>
    b1c8:	4800081e 	bne	r9,zero,b1ec <___vfprintf_internal_r+0x1e38>
    b1cc:	8c40004c 	andi	r17,r17,1
    b1d0:	8800061e 	bne	r17,zero,b1ec <___vfprintf_internal_r+0x1e38>
    b1d4:	1805883a 	mov	r2,r3
    b1d8:	183e4d0e 	bge	r3,zero,ab10 <__alt_mem_Flash_flash_data+0xf400ab10>
    b1dc:	0005883a 	mov	r2,zero
    b1e0:	003e4b06 	br	ab10 <__alt_mem_Flash_flash_data+0xf400ab10>
    b1e4:	d8802117 	ldw	r2,132(sp)
    b1e8:	003e3706 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    b1ec:	dac03417 	ldw	r11,208(sp)
    b1f0:	4a400044 	addi	r9,r9,1
    b1f4:	5a65883a 	add	r18,r11,r9
    b1f8:	9005883a 	mov	r2,r18
    b1fc:	903e450e 	bge	r18,zero,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b200:	003fe606 	br	b19c <__alt_mem_Flash_flash_data+0xf400b19c>
    b204:	db003417 	ldw	r12,208(sp)
    b208:	64800044 	addi	r18,r12,1
    b20c:	9005883a 	mov	r2,r18
    b210:	903e400e 	bge	r18,zero,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b214:	003fe106 	br	b19c <__alt_mem_Flash_flash_data+0xf400b19c>
    b218:	d9003717 	ldw	r4,220(sp)
    b21c:	900b883a 	mov	r5,r18
    b220:	000d883a 	mov	r6,zero
    b224:	000f883a 	mov	r7,zero
    b228:	da003f15 	stw	r8,252(sp)
    b22c:	da403e15 	stw	r9,248(sp)
    b230:	da803d15 	stw	r10,244(sp)
    b234:	000528c0 	call	528c <__eqdf2>
    b238:	da003f17 	ldw	r8,252(sp)
    b23c:	da403e17 	ldw	r9,248(sp)
    b240:	da803d17 	ldw	r10,244(sp)
    b244:	103f1f26 	beq	r2,zero,aec4 <__alt_mem_Flash_flash_data+0xf400aec4>
    b248:	00800044 	movi	r2,1
    b24c:	1707c83a 	sub	r3,r2,fp
    b250:	d8c02615 	stw	r3,152(sp)
    b254:	003f1c06 	br	aec8 <__alt_mem_Flash_flash_data+0xf400aec8>
    b258:	00800c04 	movi	r2,48
    b25c:	e0c00c04 	addi	r3,fp,48
    b260:	d8802345 	stb	r2,141(sp)
    b264:	d8c02385 	stb	r3,142(sp)
    b268:	d88023c4 	addi	r2,sp,143
    b26c:	dd4022c4 	addi	r21,sp,139
    b270:	003fa906 	br	b118 <__alt_mem_Flash_flash_data+0xf400b118>
    b274:	0005883a 	mov	r2,zero
    b278:	003f3c06 	br	af6c <__alt_mem_Flash_flash_data+0xf400af6c>
    b27c:	dac02d17 	ldw	r11,180(sp)
    b280:	5a400017 	ldw	r9,0(r11)
    b284:	5ac00104 	addi	r11,r11,4
    b288:	dac02d15 	stw	r11,180(sp)
    b28c:	483ec80e 	bge	r9,zero,adb0 <__alt_mem_Flash_flash_data+0xf400adb0>
    b290:	027fffc4 	movi	r9,-1
    b294:	1c000047 	ldb	r16,1(r3)
    b298:	0038ab06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    b29c:	4800111e 	bne	r9,zero,b2e4 <___vfprintf_internal_r+0x1f30>
    b2a0:	8c40004c 	andi	r17,r17,1
    b2a4:	88000f1e 	bne	r17,zero,b2e4 <___vfprintf_internal_r+0x1f30>
    b2a8:	00800044 	movi	r2,1
    b2ac:	1025883a 	mov	r18,r2
    b2b0:	003e1806 	br	ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b2b4:	04800084 	movi	r18,2
    b2b8:	90e5c83a 	sub	r18,r18,r3
    b2bc:	003fb306 	br	b18c <__alt_mem_Flash_flash_data+0xf400b18c>
    b2c0:	0005883a 	mov	r2,zero
    b2c4:	003f9d06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b2c8:	88a2703a 	and	r17,r17,r2
    b2cc:	883f9926 	beq	r17,zero,b134 <__alt_mem_Flash_flash_data+0xf400b134>
    b2d0:	003f9706 	br	b130 <__alt_mem_Flash_flash_data+0xf400b130>
    b2d4:	00800b44 	movi	r2,45
    b2d8:	0739c83a 	sub	fp,zero,fp
    b2dc:	d8802305 	stb	r2,140(sp)
    b2e0:	003f6606 	br	b07c <__alt_mem_Flash_flash_data+0xf400b07c>
    b2e4:	4c800084 	addi	r18,r9,2
    b2e8:	9005883a 	mov	r2,r18
    b2ec:	903e090e 	bge	r18,zero,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    b2f0:	003faa06 	br	b19c <__alt_mem_Flash_flash_data+0xf400b19c>
    b2f4:	d8802344 	addi	r2,sp,141
    b2f8:	003f8706 	br	b118 <__alt_mem_Flash_flash_data+0xf400b118>
    b2fc:	d8c02617 	ldw	r3,152(sp)
    b300:	003f5806 	br	b064 <__alt_mem_Flash_flash_data+0xf400b064>

0000b304 <__vfprintf_internal>:
    b304:	2007883a 	mov	r3,r4
    b308:	010000b4 	movhi	r4,2
    b30c:	210be204 	addi	r4,r4,12168
    b310:	21000017 	ldw	r4,0(r4)
    b314:	2805883a 	mov	r2,r5
    b318:	300f883a 	mov	r7,r6
    b31c:	180b883a 	mov	r5,r3
    b320:	100d883a 	mov	r6,r2
    b324:	00093b41 	jmpi	93b4 <___vfprintf_internal_r>

0000b328 <__sbprintf>:
    b328:	2880030b 	ldhu	r2,12(r5)
    b32c:	2ac01917 	ldw	r11,100(r5)
    b330:	2a80038b 	ldhu	r10,14(r5)
    b334:	2a400717 	ldw	r9,28(r5)
    b338:	2a000917 	ldw	r8,36(r5)
    b33c:	defee204 	addi	sp,sp,-1144
    b340:	00c10004 	movi	r3,1024
    b344:	dc011a15 	stw	r16,1128(sp)
    b348:	10bfff4c 	andi	r2,r2,65533
    b34c:	2821883a 	mov	r16,r5
    b350:	d8cb883a 	add	r5,sp,r3
    b354:	dc811c15 	stw	r18,1136(sp)
    b358:	dc411b15 	stw	r17,1132(sp)
    b35c:	dfc11d15 	stw	ra,1140(sp)
    b360:	2025883a 	mov	r18,r4
    b364:	d881030d 	sth	r2,1036(sp)
    b368:	dac11915 	stw	r11,1124(sp)
    b36c:	da81038d 	sth	r10,1038(sp)
    b370:	da410715 	stw	r9,1052(sp)
    b374:	da010915 	stw	r8,1060(sp)
    b378:	dec10015 	stw	sp,1024(sp)
    b37c:	dec10415 	stw	sp,1040(sp)
    b380:	d8c10215 	stw	r3,1032(sp)
    b384:	d8c10515 	stw	r3,1044(sp)
    b388:	d8010615 	stw	zero,1048(sp)
    b38c:	00093b40 	call	93b4 <___vfprintf_internal_r>
    b390:	1023883a 	mov	r17,r2
    b394:	10000416 	blt	r2,zero,b3a8 <__sbprintf+0x80>
    b398:	9009883a 	mov	r4,r18
    b39c:	d9410004 	addi	r5,sp,1024
    b3a0:	000d0680 	call	d068 <_fflush_r>
    b3a4:	10000d1e 	bne	r2,zero,b3dc <__sbprintf+0xb4>
    b3a8:	d8c1030b 	ldhu	r3,1036(sp)
    b3ac:	18c0100c 	andi	r3,r3,64
    b3b0:	18000326 	beq	r3,zero,b3c0 <__sbprintf+0x98>
    b3b4:	8080030b 	ldhu	r2,12(r16)
    b3b8:	10801014 	ori	r2,r2,64
    b3bc:	8080030d 	sth	r2,12(r16)
    b3c0:	8805883a 	mov	r2,r17
    b3c4:	dfc11d17 	ldw	ra,1140(sp)
    b3c8:	dc811c17 	ldw	r18,1136(sp)
    b3cc:	dc411b17 	ldw	r17,1132(sp)
    b3d0:	dc011a17 	ldw	r16,1128(sp)
    b3d4:	dec11e04 	addi	sp,sp,1144
    b3d8:	f800283a 	ret
    b3dc:	047fffc4 	movi	r17,-1
    b3e0:	003ff106 	br	b3a8 <__alt_mem_Flash_flash_data+0xf400b3a8>

0000b3e4 <__swsetup_r>:
    b3e4:	008000b4 	movhi	r2,2
    b3e8:	defffd04 	addi	sp,sp,-12
    b3ec:	108be204 	addi	r2,r2,12168
    b3f0:	dc400115 	stw	r17,4(sp)
    b3f4:	2023883a 	mov	r17,r4
    b3f8:	11000017 	ldw	r4,0(r2)
    b3fc:	dc000015 	stw	r16,0(sp)
    b400:	dfc00215 	stw	ra,8(sp)
    b404:	2821883a 	mov	r16,r5
    b408:	20000226 	beq	r4,zero,b414 <__swsetup_r+0x30>
    b40c:	20c00e17 	ldw	r3,56(r4)
    b410:	18003126 	beq	r3,zero,b4d8 <__swsetup_r+0xf4>
    b414:	8080030b 	ldhu	r2,12(r16)
    b418:	10c0020c 	andi	r3,r2,8
    b41c:	100d883a 	mov	r6,r2
    b420:	18000f26 	beq	r3,zero,b460 <__swsetup_r+0x7c>
    b424:	80c00417 	ldw	r3,16(r16)
    b428:	18001526 	beq	r3,zero,b480 <__swsetup_r+0x9c>
    b42c:	1100004c 	andi	r4,r2,1
    b430:	20001c1e 	bne	r4,zero,b4a4 <__swsetup_r+0xc0>
    b434:	1080008c 	andi	r2,r2,2
    b438:	1000291e 	bne	r2,zero,b4e0 <__swsetup_r+0xfc>
    b43c:	80800517 	ldw	r2,20(r16)
    b440:	80800215 	stw	r2,8(r16)
    b444:	18001c26 	beq	r3,zero,b4b8 <__swsetup_r+0xd4>
    b448:	0005883a 	mov	r2,zero
    b44c:	dfc00217 	ldw	ra,8(sp)
    b450:	dc400117 	ldw	r17,4(sp)
    b454:	dc000017 	ldw	r16,0(sp)
    b458:	dec00304 	addi	sp,sp,12
    b45c:	f800283a 	ret
    b460:	3080040c 	andi	r2,r6,16
    b464:	10002e26 	beq	r2,zero,b520 <__swsetup_r+0x13c>
    b468:	3080010c 	andi	r2,r6,4
    b46c:	10001e1e 	bne	r2,zero,b4e8 <__swsetup_r+0x104>
    b470:	80c00417 	ldw	r3,16(r16)
    b474:	30800214 	ori	r2,r6,8
    b478:	8080030d 	sth	r2,12(r16)
    b47c:	183feb1e 	bne	r3,zero,b42c <__alt_mem_Flash_flash_data+0xf400b42c>
    b480:	1140a00c 	andi	r5,r2,640
    b484:	01008004 	movi	r4,512
    b488:	293fe826 	beq	r5,r4,b42c <__alt_mem_Flash_flash_data+0xf400b42c>
    b48c:	8809883a 	mov	r4,r17
    b490:	800b883a 	mov	r5,r16
    b494:	000dfd00 	call	dfd0 <__smakebuf_r>
    b498:	8080030b 	ldhu	r2,12(r16)
    b49c:	80c00417 	ldw	r3,16(r16)
    b4a0:	003fe206 	br	b42c <__alt_mem_Flash_flash_data+0xf400b42c>
    b4a4:	80800517 	ldw	r2,20(r16)
    b4a8:	80000215 	stw	zero,8(r16)
    b4ac:	0085c83a 	sub	r2,zero,r2
    b4b0:	80800615 	stw	r2,24(r16)
    b4b4:	183fe41e 	bne	r3,zero,b448 <__alt_mem_Flash_flash_data+0xf400b448>
    b4b8:	80c0030b 	ldhu	r3,12(r16)
    b4bc:	0005883a 	mov	r2,zero
    b4c0:	1900200c 	andi	r4,r3,128
    b4c4:	203fe126 	beq	r4,zero,b44c <__alt_mem_Flash_flash_data+0xf400b44c>
    b4c8:	18c01014 	ori	r3,r3,64
    b4cc:	80c0030d 	sth	r3,12(r16)
    b4d0:	00bfffc4 	movi	r2,-1
    b4d4:	003fdd06 	br	b44c <__alt_mem_Flash_flash_data+0xf400b44c>
    b4d8:	000d4440 	call	d444 <__sinit>
    b4dc:	003fcd06 	br	b414 <__alt_mem_Flash_flash_data+0xf400b414>
    b4e0:	0005883a 	mov	r2,zero
    b4e4:	003fd606 	br	b440 <__alt_mem_Flash_flash_data+0xf400b440>
    b4e8:	81400c17 	ldw	r5,48(r16)
    b4ec:	28000626 	beq	r5,zero,b508 <__swsetup_r+0x124>
    b4f0:	80801004 	addi	r2,r16,64
    b4f4:	28800326 	beq	r5,r2,b504 <__swsetup_r+0x120>
    b4f8:	8809883a 	mov	r4,r17
    b4fc:	000d5b80 	call	d5b8 <_free_r>
    b500:	8180030b 	ldhu	r6,12(r16)
    b504:	80000c15 	stw	zero,48(r16)
    b508:	80c00417 	ldw	r3,16(r16)
    b50c:	00bff6c4 	movi	r2,-37
    b510:	118c703a 	and	r6,r2,r6
    b514:	80000115 	stw	zero,4(r16)
    b518:	80c00015 	stw	r3,0(r16)
    b51c:	003fd506 	br	b474 <__alt_mem_Flash_flash_data+0xf400b474>
    b520:	00800244 	movi	r2,9
    b524:	88800015 	stw	r2,0(r17)
    b528:	30801014 	ori	r2,r6,64
    b52c:	8080030d 	sth	r2,12(r16)
    b530:	00bfffc4 	movi	r2,-1
    b534:	003fc506 	br	b44c <__alt_mem_Flash_flash_data+0xf400b44c>

0000b538 <quorem>:
    b538:	defff704 	addi	sp,sp,-36
    b53c:	dc800215 	stw	r18,8(sp)
    b540:	20800417 	ldw	r2,16(r4)
    b544:	2c800417 	ldw	r18,16(r5)
    b548:	dfc00815 	stw	ra,32(sp)
    b54c:	ddc00715 	stw	r23,28(sp)
    b550:	dd800615 	stw	r22,24(sp)
    b554:	dd400515 	stw	r21,20(sp)
    b558:	dd000415 	stw	r20,16(sp)
    b55c:	dcc00315 	stw	r19,12(sp)
    b560:	dc400115 	stw	r17,4(sp)
    b564:	dc000015 	stw	r16,0(sp)
    b568:	14807116 	blt	r2,r18,b730 <quorem+0x1f8>
    b56c:	94bfffc4 	addi	r18,r18,-1
    b570:	94ad883a 	add	r22,r18,r18
    b574:	b5ad883a 	add	r22,r22,r22
    b578:	2c400504 	addi	r17,r5,20
    b57c:	8da9883a 	add	r20,r17,r22
    b580:	25400504 	addi	r21,r4,20
    b584:	282f883a 	mov	r23,r5
    b588:	adad883a 	add	r22,r21,r22
    b58c:	a1400017 	ldw	r5,0(r20)
    b590:	2021883a 	mov	r16,r4
    b594:	b1000017 	ldw	r4,0(r22)
    b598:	29400044 	addi	r5,r5,1
    b59c:	00046500 	call	4650 <__udivsi3>
    b5a0:	1027883a 	mov	r19,r2
    b5a4:	10002c26 	beq	r2,zero,b658 <quorem+0x120>
    b5a8:	a813883a 	mov	r9,r21
    b5ac:	8811883a 	mov	r8,r17
    b5b0:	0009883a 	mov	r4,zero
    b5b4:	000d883a 	mov	r6,zero
    b5b8:	41c00017 	ldw	r7,0(r8)
    b5bc:	49400017 	ldw	r5,0(r9)
    b5c0:	42000104 	addi	r8,r8,4
    b5c4:	38bfffcc 	andi	r2,r7,65535
    b5c8:	14c5383a 	mul	r2,r2,r19
    b5cc:	380ed43a 	srli	r7,r7,16
    b5d0:	28ffffcc 	andi	r3,r5,65535
    b5d4:	2085883a 	add	r2,r4,r2
    b5d8:	1008d43a 	srli	r4,r2,16
    b5dc:	3ccf383a 	mul	r7,r7,r19
    b5e0:	198d883a 	add	r6,r3,r6
    b5e4:	10ffffcc 	andi	r3,r2,65535
    b5e8:	30c7c83a 	sub	r3,r6,r3
    b5ec:	280ad43a 	srli	r5,r5,16
    b5f0:	21c9883a 	add	r4,r4,r7
    b5f4:	180dd43a 	srai	r6,r3,16
    b5f8:	20bfffcc 	andi	r2,r4,65535
    b5fc:	288bc83a 	sub	r5,r5,r2
    b600:	298b883a 	add	r5,r5,r6
    b604:	280e943a 	slli	r7,r5,16
    b608:	18ffffcc 	andi	r3,r3,65535
    b60c:	2008d43a 	srli	r4,r4,16
    b610:	38ceb03a 	or	r7,r7,r3
    b614:	49c00015 	stw	r7,0(r9)
    b618:	280dd43a 	srai	r6,r5,16
    b61c:	4a400104 	addi	r9,r9,4
    b620:	a23fe52e 	bgeu	r20,r8,b5b8 <__alt_mem_Flash_flash_data+0xf400b5b8>
    b624:	b0800017 	ldw	r2,0(r22)
    b628:	10000b1e 	bne	r2,zero,b658 <quorem+0x120>
    b62c:	b0bfff04 	addi	r2,r22,-4
    b630:	a880082e 	bgeu	r21,r2,b654 <quorem+0x11c>
    b634:	b0ffff17 	ldw	r3,-4(r22)
    b638:	18000326 	beq	r3,zero,b648 <quorem+0x110>
    b63c:	00000506 	br	b654 <quorem+0x11c>
    b640:	10c00017 	ldw	r3,0(r2)
    b644:	1800031e 	bne	r3,zero,b654 <quorem+0x11c>
    b648:	10bfff04 	addi	r2,r2,-4
    b64c:	94bfffc4 	addi	r18,r18,-1
    b650:	a8bffb36 	bltu	r21,r2,b640 <__alt_mem_Flash_flash_data+0xf400b640>
    b654:	84800415 	stw	r18,16(r16)
    b658:	8009883a 	mov	r4,r16
    b65c:	b80b883a 	mov	r5,r23
    b660:	000edc40 	call	edc4 <__mcmp>
    b664:	10002616 	blt	r2,zero,b700 <quorem+0x1c8>
    b668:	9cc00044 	addi	r19,r19,1
    b66c:	a80d883a 	mov	r6,r21
    b670:	000b883a 	mov	r5,zero
    b674:	31000017 	ldw	r4,0(r6)
    b678:	88800017 	ldw	r2,0(r17)
    b67c:	31800104 	addi	r6,r6,4
    b680:	20ffffcc 	andi	r3,r4,65535
    b684:	194b883a 	add	r5,r3,r5
    b688:	10ffffcc 	andi	r3,r2,65535
    b68c:	28c7c83a 	sub	r3,r5,r3
    b690:	1004d43a 	srli	r2,r2,16
    b694:	2008d43a 	srli	r4,r4,16
    b698:	180bd43a 	srai	r5,r3,16
    b69c:	18ffffcc 	andi	r3,r3,65535
    b6a0:	2089c83a 	sub	r4,r4,r2
    b6a4:	2149883a 	add	r4,r4,r5
    b6a8:	2004943a 	slli	r2,r4,16
    b6ac:	8c400104 	addi	r17,r17,4
    b6b0:	200bd43a 	srai	r5,r4,16
    b6b4:	10c6b03a 	or	r3,r2,r3
    b6b8:	30ffff15 	stw	r3,-4(r6)
    b6bc:	a47fed2e 	bgeu	r20,r17,b674 <__alt_mem_Flash_flash_data+0xf400b674>
    b6c0:	9485883a 	add	r2,r18,r18
    b6c4:	1085883a 	add	r2,r2,r2
    b6c8:	a887883a 	add	r3,r21,r2
    b6cc:	18800017 	ldw	r2,0(r3)
    b6d0:	10000b1e 	bne	r2,zero,b700 <quorem+0x1c8>
    b6d4:	18bfff04 	addi	r2,r3,-4
    b6d8:	a880082e 	bgeu	r21,r2,b6fc <quorem+0x1c4>
    b6dc:	18ffff17 	ldw	r3,-4(r3)
    b6e0:	18000326 	beq	r3,zero,b6f0 <quorem+0x1b8>
    b6e4:	00000506 	br	b6fc <quorem+0x1c4>
    b6e8:	10c00017 	ldw	r3,0(r2)
    b6ec:	1800031e 	bne	r3,zero,b6fc <quorem+0x1c4>
    b6f0:	10bfff04 	addi	r2,r2,-4
    b6f4:	94bfffc4 	addi	r18,r18,-1
    b6f8:	a8bffb36 	bltu	r21,r2,b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    b6fc:	84800415 	stw	r18,16(r16)
    b700:	9805883a 	mov	r2,r19
    b704:	dfc00817 	ldw	ra,32(sp)
    b708:	ddc00717 	ldw	r23,28(sp)
    b70c:	dd800617 	ldw	r22,24(sp)
    b710:	dd400517 	ldw	r21,20(sp)
    b714:	dd000417 	ldw	r20,16(sp)
    b718:	dcc00317 	ldw	r19,12(sp)
    b71c:	dc800217 	ldw	r18,8(sp)
    b720:	dc400117 	ldw	r17,4(sp)
    b724:	dc000017 	ldw	r16,0(sp)
    b728:	dec00904 	addi	sp,sp,36
    b72c:	f800283a 	ret
    b730:	0005883a 	mov	r2,zero
    b734:	003ff306 	br	b704 <__alt_mem_Flash_flash_data+0xf400b704>

0000b738 <_dtoa_r>:
    b738:	20801017 	ldw	r2,64(r4)
    b73c:	deffde04 	addi	sp,sp,-136
    b740:	dd401d15 	stw	r21,116(sp)
    b744:	dcc01b15 	stw	r19,108(sp)
    b748:	dc801a15 	stw	r18,104(sp)
    b74c:	dc401915 	stw	r17,100(sp)
    b750:	dc001815 	stw	r16,96(sp)
    b754:	dfc02115 	stw	ra,132(sp)
    b758:	df002015 	stw	fp,128(sp)
    b75c:	ddc01f15 	stw	r23,124(sp)
    b760:	dd801e15 	stw	r22,120(sp)
    b764:	dd001c15 	stw	r20,112(sp)
    b768:	d9c00315 	stw	r7,12(sp)
    b76c:	2021883a 	mov	r16,r4
    b770:	302b883a 	mov	r21,r6
    b774:	2825883a 	mov	r18,r5
    b778:	dc402417 	ldw	r17,144(sp)
    b77c:	3027883a 	mov	r19,r6
    b780:	10000826 	beq	r2,zero,b7a4 <_dtoa_r+0x6c>
    b784:	21801117 	ldw	r6,68(r4)
    b788:	00c00044 	movi	r3,1
    b78c:	100b883a 	mov	r5,r2
    b790:	1986983a 	sll	r3,r3,r6
    b794:	11800115 	stw	r6,4(r2)
    b798:	10c00215 	stw	r3,8(r2)
    b79c:	000e5980 	call	e598 <_Bfree>
    b7a0:	80001015 	stw	zero,64(r16)
    b7a4:	a8002d16 	blt	r21,zero,b85c <_dtoa_r+0x124>
    b7a8:	88000015 	stw	zero,0(r17)
    b7ac:	a8dffc2c 	andhi	r3,r21,32752
    b7b0:	009ffc34 	movhi	r2,32752
    b7b4:	18801b26 	beq	r3,r2,b824 <_dtoa_r+0xec>
    b7b8:	9009883a 	mov	r4,r18
    b7bc:	980b883a 	mov	r5,r19
    b7c0:	000d883a 	mov	r6,zero
    b7c4:	000f883a 	mov	r7,zero
    b7c8:	000528c0 	call	528c <__eqdf2>
    b7cc:	10002a1e 	bne	r2,zero,b878 <_dtoa_r+0x140>
    b7d0:	d8c02317 	ldw	r3,140(sp)
    b7d4:	d9002517 	ldw	r4,148(sp)
    b7d8:	00800044 	movi	r2,1
    b7dc:	18800015 	stw	r2,0(r3)
    b7e0:	2001a226 	beq	r4,zero,be6c <_dtoa_r+0x734>
    b7e4:	008000b4 	movhi	r2,2
    b7e8:	10832344 	addi	r2,r2,3213
    b7ec:	20800015 	stw	r2,0(r4)
    b7f0:	10bfffc4 	addi	r2,r2,-1
    b7f4:	dfc02117 	ldw	ra,132(sp)
    b7f8:	df002017 	ldw	fp,128(sp)
    b7fc:	ddc01f17 	ldw	r23,124(sp)
    b800:	dd801e17 	ldw	r22,120(sp)
    b804:	dd401d17 	ldw	r21,116(sp)
    b808:	dd001c17 	ldw	r20,112(sp)
    b80c:	dcc01b17 	ldw	r19,108(sp)
    b810:	dc801a17 	ldw	r18,104(sp)
    b814:	dc401917 	ldw	r17,100(sp)
    b818:	dc001817 	ldw	r16,96(sp)
    b81c:	dec02204 	addi	sp,sp,136
    b820:	f800283a 	ret
    b824:	d8c02317 	ldw	r3,140(sp)
    b828:	0089c3c4 	movi	r2,9999
    b82c:	18800015 	stw	r2,0(r3)
    b830:	90017c26 	beq	r18,zero,be24 <_dtoa_r+0x6ec>
    b834:	008000b4 	movhi	r2,2
    b838:	10833704 	addi	r2,r2,3292
    b83c:	d9002517 	ldw	r4,148(sp)
    b840:	203fec26 	beq	r4,zero,b7f4 <__alt_mem_Flash_flash_data+0xf400b7f4>
    b844:	10c000c7 	ldb	r3,3(r2)
    b848:	18017d1e 	bne	r3,zero,be40 <_dtoa_r+0x708>
    b84c:	10c000c4 	addi	r3,r2,3
    b850:	d9802517 	ldw	r6,148(sp)
    b854:	30c00015 	stw	r3,0(r6)
    b858:	003fe606 	br	b7f4 <__alt_mem_Flash_flash_data+0xf400b7f4>
    b85c:	04e00034 	movhi	r19,32768
    b860:	9cffffc4 	addi	r19,r19,-1
    b864:	00800044 	movi	r2,1
    b868:	ace6703a 	and	r19,r21,r19
    b86c:	88800015 	stw	r2,0(r17)
    b870:	982b883a 	mov	r21,r19
    b874:	003fcd06 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>
    b878:	d8800204 	addi	r2,sp,8
    b87c:	a822d53a 	srli	r17,r21,20
    b880:	d8800015 	stw	r2,0(sp)
    b884:	8009883a 	mov	r4,r16
    b888:	900b883a 	mov	r5,r18
    b88c:	980d883a 	mov	r6,r19
    b890:	d9c00104 	addi	r7,sp,4
    b894:	000f1380 	call	f138 <__d2b>
    b898:	1039883a 	mov	fp,r2
    b89c:	88016a1e 	bne	r17,zero,be48 <_dtoa_r+0x710>
    b8a0:	dd000217 	ldw	r20,8(sp)
    b8a4:	dc400117 	ldw	r17,4(sp)
    b8a8:	00befbc4 	movi	r2,-1041
    b8ac:	a463883a 	add	r17,r20,r17
    b8b0:	8882ea16 	blt	r17,r2,c45c <_dtoa_r+0xd24>
    b8b4:	00bf0384 	movi	r2,-1010
    b8b8:	1445c83a 	sub	r2,r2,r17
    b8bc:	89010484 	addi	r4,r17,1042
    b8c0:	a8aa983a 	sll	r21,r21,r2
    b8c4:	9108d83a 	srl	r4,r18,r4
    b8c8:	a908b03a 	or	r4,r21,r4
    b8cc:	00141080 	call	14108 <__floatunsidf>
    b8d0:	017f8434 	movhi	r5,65040
    b8d4:	01800044 	movi	r6,1
    b8d8:	1009883a 	mov	r4,r2
    b8dc:	194b883a 	add	r5,r3,r5
    b8e0:	8c7fffc4 	addi	r17,r17,-1
    b8e4:	d9800f15 	stw	r6,60(sp)
    b8e8:	000d883a 	mov	r6,zero
    b8ec:	01cffe34 	movhi	r7,16376
    b8f0:	0005b140 	call	5b14 <__subdf3>
    b8f4:	0198dbf4 	movhi	r6,25455
    b8f8:	01cff4f4 	movhi	r7,16339
    b8fc:	1009883a 	mov	r4,r2
    b900:	180b883a 	mov	r5,r3
    b904:	3190d844 	addi	r6,r6,17249
    b908:	39e1e9c4 	addi	r7,r7,-30809
    b90c:	00053f00 	call	53f0 <__muldf3>
    b910:	01a2d874 	movhi	r6,35681
    b914:	01cff1f4 	movhi	r7,16327
    b918:	180b883a 	mov	r5,r3
    b91c:	31b22cc4 	addi	r6,r6,-14157
    b920:	39e28a04 	addi	r7,r7,-30168
    b924:	1009883a 	mov	r4,r2
    b928:	00049f00 	call	49f0 <__adddf3>
    b92c:	8809883a 	mov	r4,r17
    b930:	102d883a 	mov	r22,r2
    b934:	182b883a 	mov	r21,r3
    b938:	000646c0 	call	646c <__floatsidf>
    b93c:	019427f4 	movhi	r6,20639
    b940:	01cff4f4 	movhi	r7,16339
    b944:	1009883a 	mov	r4,r2
    b948:	180b883a 	mov	r5,r3
    b94c:	319e7ec4 	addi	r6,r6,31227
    b950:	39d104c4 	addi	r7,r7,17427
    b954:	00053f00 	call	53f0 <__muldf3>
    b958:	b009883a 	mov	r4,r22
    b95c:	a80b883a 	mov	r5,r21
    b960:	100d883a 	mov	r6,r2
    b964:	180f883a 	mov	r7,r3
    b968:	00049f00 	call	49f0 <__adddf3>
    b96c:	1009883a 	mov	r4,r2
    b970:	180b883a 	mov	r5,r3
    b974:	102d883a 	mov	r22,r2
    b978:	182b883a 	mov	r21,r3
    b97c:	00063e40 	call	63e4 <__fixdfsi>
    b980:	b009883a 	mov	r4,r22
    b984:	a80b883a 	mov	r5,r21
    b988:	000d883a 	mov	r6,zero
    b98c:	000f883a 	mov	r7,zero
    b990:	d8800515 	stw	r2,20(sp)
    b994:	00140280 	call	14028 <__ledf2>
    b998:	10023116 	blt	r2,zero,c260 <_dtoa_r+0xb28>
    b99c:	d8c00517 	ldw	r3,20(sp)
    b9a0:	00800584 	movi	r2,22
    b9a4:	10c21f36 	bltu	r2,r3,c224 <_dtoa_r+0xaec>
    b9a8:	180490fa 	slli	r2,r3,3
    b9ac:	00c000b4 	movhi	r3,2
    b9b0:	18c35304 	addi	r3,r3,3404
    b9b4:	1885883a 	add	r2,r3,r2
    b9b8:	11000017 	ldw	r4,0(r2)
    b9bc:	11400117 	ldw	r5,4(r2)
    b9c0:	900d883a 	mov	r6,r18
    b9c4:	980f883a 	mov	r7,r19
    b9c8:	00053100 	call	5310 <__gedf2>
    b9cc:	0082a70e 	bge	zero,r2,c46c <_dtoa_r+0xd34>
    b9d0:	d9000517 	ldw	r4,20(sp)
    b9d4:	d8000d15 	stw	zero,52(sp)
    b9d8:	213fffc4 	addi	r4,r4,-1
    b9dc:	d9000515 	stw	r4,20(sp)
    b9e0:	a463c83a 	sub	r17,r20,r17
    b9e4:	8dbfffc4 	addi	r22,r17,-1
    b9e8:	b0021916 	blt	r22,zero,c250 <_dtoa_r+0xb18>
    b9ec:	d8000815 	stw	zero,32(sp)
    b9f0:	d8800517 	ldw	r2,20(sp)
    b9f4:	10020e16 	blt	r2,zero,c230 <_dtoa_r+0xaf8>
    b9f8:	b0ad883a 	add	r22,r22,r2
    b9fc:	d8800a15 	stw	r2,40(sp)
    ba00:	d8000915 	stw	zero,36(sp)
    ba04:	d8c00317 	ldw	r3,12(sp)
    ba08:	00800244 	movi	r2,9
    ba0c:	10c11a36 	bltu	r2,r3,be78 <_dtoa_r+0x740>
    ba10:	00800144 	movi	r2,5
    ba14:	10c4fc0e 	bge	r2,r3,ce08 <_dtoa_r+0x16d0>
    ba18:	18ffff04 	addi	r3,r3,-4
    ba1c:	d8c00315 	stw	r3,12(sp)
    ba20:	0029883a 	mov	r20,zero
    ba24:	d9800317 	ldw	r6,12(sp)
    ba28:	008000c4 	movi	r2,3
    ba2c:	3083bd26 	beq	r6,r2,c924 <_dtoa_r+0x11ec>
    ba30:	1183670e 	bge	r2,r6,c7d0 <_dtoa_r+0x1098>
    ba34:	d8c00317 	ldw	r3,12(sp)
    ba38:	00800104 	movi	r2,4
    ba3c:	1882e726 	beq	r3,r2,c5dc <_dtoa_r+0xea4>
    ba40:	00800144 	movi	r2,5
    ba44:	1884f21e 	bne	r3,r2,ce10 <_dtoa_r+0x16d8>
    ba48:	00800044 	movi	r2,1
    ba4c:	d8800b15 	stw	r2,44(sp)
    ba50:	d8c02217 	ldw	r3,136(sp)
    ba54:	d9000517 	ldw	r4,20(sp)
    ba58:	1907883a 	add	r3,r3,r4
    ba5c:	19800044 	addi	r6,r3,1
    ba60:	d8c00c15 	stw	r3,48(sp)
    ba64:	d9800615 	stw	r6,24(sp)
    ba68:	0183c30e 	bge	zero,r6,c978 <_dtoa_r+0x1240>
    ba6c:	d9800617 	ldw	r6,24(sp)
    ba70:	3023883a 	mov	r17,r6
    ba74:	80001115 	stw	zero,68(r16)
    ba78:	008005c4 	movi	r2,23
    ba7c:	1184f62e 	bgeu	r2,r6,ce58 <_dtoa_r+0x1720>
    ba80:	00c00044 	movi	r3,1
    ba84:	00800104 	movi	r2,4
    ba88:	1085883a 	add	r2,r2,r2
    ba8c:	11000504 	addi	r4,r2,20
    ba90:	180b883a 	mov	r5,r3
    ba94:	18c00044 	addi	r3,r3,1
    ba98:	313ffb2e 	bgeu	r6,r4,ba88 <__alt_mem_Flash_flash_data+0xf400ba88>
    ba9c:	81401115 	stw	r5,68(r16)
    baa0:	8009883a 	mov	r4,r16
    baa4:	000e4f00 	call	e4f0 <_Balloc>
    baa8:	d8800715 	stw	r2,28(sp)
    baac:	80801015 	stw	r2,64(r16)
    bab0:	00800384 	movi	r2,14
    bab4:	1440fd36 	bltu	r2,r17,beac <_dtoa_r+0x774>
    bab8:	a000fc26 	beq	r20,zero,beac <_dtoa_r+0x774>
    babc:	d8800517 	ldw	r2,20(sp)
    bac0:	0083b90e 	bge	zero,r2,c9a8 <_dtoa_r+0x1270>
    bac4:	d8c00517 	ldw	r3,20(sp)
    bac8:	108003cc 	andi	r2,r2,15
    bacc:	100490fa 	slli	r2,r2,3
    bad0:	182fd13a 	srai	r23,r3,4
    bad4:	00c000b4 	movhi	r3,2
    bad8:	18c35304 	addi	r3,r3,3404
    badc:	1885883a 	add	r2,r3,r2
    bae0:	b8c0040c 	andi	r3,r23,16
    bae4:	12c00017 	ldw	r11,0(r2)
    bae8:	12800117 	ldw	r10,4(r2)
    baec:	18039726 	beq	r3,zero,c94c <_dtoa_r+0x1214>
    baf0:	008000b4 	movhi	r2,2
    baf4:	10834904 	addi	r2,r2,3364
    baf8:	11800817 	ldw	r6,32(r2)
    bafc:	11c00917 	ldw	r7,36(r2)
    bb00:	9009883a 	mov	r4,r18
    bb04:	980b883a 	mov	r5,r19
    bb08:	da801615 	stw	r10,88(sp)
    bb0c:	dac01515 	stw	r11,84(sp)
    bb10:	001375c0 	call	1375c <__divdf3>
    bb14:	da801617 	ldw	r10,88(sp)
    bb18:	dac01517 	ldw	r11,84(sp)
    bb1c:	bdc003cc 	andi	r23,r23,15
    bb20:	044000c4 	movi	r17,3
    bb24:	d8800e15 	stw	r2,56(sp)
    bb28:	182b883a 	mov	r21,r3
    bb2c:	b8001126 	beq	r23,zero,bb74 <_dtoa_r+0x43c>
    bb30:	050000b4 	movhi	r20,2
    bb34:	a5034904 	addi	r20,r20,3364
    bb38:	5805883a 	mov	r2,r11
    bb3c:	5007883a 	mov	r3,r10
    bb40:	b980004c 	andi	r6,r23,1
    bb44:	1009883a 	mov	r4,r2
    bb48:	b82fd07a 	srai	r23,r23,1
    bb4c:	180b883a 	mov	r5,r3
    bb50:	30000426 	beq	r6,zero,bb64 <_dtoa_r+0x42c>
    bb54:	a1800017 	ldw	r6,0(r20)
    bb58:	a1c00117 	ldw	r7,4(r20)
    bb5c:	8c400044 	addi	r17,r17,1
    bb60:	00053f00 	call	53f0 <__muldf3>
    bb64:	a5000204 	addi	r20,r20,8
    bb68:	b83ff51e 	bne	r23,zero,bb40 <__alt_mem_Flash_flash_data+0xf400bb40>
    bb6c:	1017883a 	mov	r11,r2
    bb70:	1815883a 	mov	r10,r3
    bb74:	d9000e17 	ldw	r4,56(sp)
    bb78:	a80b883a 	mov	r5,r21
    bb7c:	580d883a 	mov	r6,r11
    bb80:	500f883a 	mov	r7,r10
    bb84:	001375c0 	call	1375c <__divdf3>
    bb88:	1029883a 	mov	r20,r2
    bb8c:	182b883a 	mov	r21,r3
    bb90:	d9800d17 	ldw	r6,52(sp)
    bb94:	30000626 	beq	r6,zero,bbb0 <_dtoa_r+0x478>
    bb98:	a009883a 	mov	r4,r20
    bb9c:	a80b883a 	mov	r5,r21
    bba0:	000d883a 	mov	r6,zero
    bba4:	01cffc34 	movhi	r7,16368
    bba8:	00140280 	call	14028 <__ledf2>
    bbac:	10043216 	blt	r2,zero,cc78 <_dtoa_r+0x1540>
    bbb0:	8809883a 	mov	r4,r17
    bbb4:	000646c0 	call	646c <__floatsidf>
    bbb8:	1009883a 	mov	r4,r2
    bbbc:	180b883a 	mov	r5,r3
    bbc0:	a00d883a 	mov	r6,r20
    bbc4:	a80f883a 	mov	r7,r21
    bbc8:	00053f00 	call	53f0 <__muldf3>
    bbcc:	000d883a 	mov	r6,zero
    bbd0:	1009883a 	mov	r4,r2
    bbd4:	180b883a 	mov	r5,r3
    bbd8:	01d00734 	movhi	r7,16412
    bbdc:	00049f00 	call	49f0 <__adddf3>
    bbe0:	1023883a 	mov	r17,r2
    bbe4:	d9800617 	ldw	r6,24(sp)
    bbe8:	00bf3034 	movhi	r2,64704
    bbec:	1885883a 	add	r2,r3,r2
    bbf0:	d8800e15 	stw	r2,56(sp)
    bbf4:	30032e26 	beq	r6,zero,c8b0 <_dtoa_r+0x1178>
    bbf8:	d8c00517 	ldw	r3,20(sp)
    bbfc:	da800617 	ldw	r10,24(sp)
    bc00:	d8c01215 	stw	r3,72(sp)
    bc04:	d9000b17 	ldw	r4,44(sp)
    bc08:	2003b026 	beq	r4,zero,cacc <_dtoa_r+0x1394>
    bc0c:	50bfffc4 	addi	r2,r10,-1
    bc10:	100490fa 	slli	r2,r2,3
    bc14:	00c000b4 	movhi	r3,2
    bc18:	18c35304 	addi	r3,r3,3404
    bc1c:	1885883a 	add	r2,r3,r2
    bc20:	11800017 	ldw	r6,0(r2)
    bc24:	11c00117 	ldw	r7,4(r2)
    bc28:	d8800717 	ldw	r2,28(sp)
    bc2c:	0009883a 	mov	r4,zero
    bc30:	014ff834 	movhi	r5,16352
    bc34:	da801615 	stw	r10,88(sp)
    bc38:	15c00044 	addi	r23,r2,1
    bc3c:	001375c0 	call	1375c <__divdf3>
    bc40:	d9c00e17 	ldw	r7,56(sp)
    bc44:	880d883a 	mov	r6,r17
    bc48:	1009883a 	mov	r4,r2
    bc4c:	180b883a 	mov	r5,r3
    bc50:	0005b140 	call	5b14 <__subdf3>
    bc54:	a80b883a 	mov	r5,r21
    bc58:	a009883a 	mov	r4,r20
    bc5c:	d8c01015 	stw	r3,64(sp)
    bc60:	d8800e15 	stw	r2,56(sp)
    bc64:	00063e40 	call	63e4 <__fixdfsi>
    bc68:	1009883a 	mov	r4,r2
    bc6c:	d8801715 	stw	r2,92(sp)
    bc70:	000646c0 	call	646c <__floatsidf>
    bc74:	a009883a 	mov	r4,r20
    bc78:	a80b883a 	mov	r5,r21
    bc7c:	100d883a 	mov	r6,r2
    bc80:	180f883a 	mov	r7,r3
    bc84:	0005b140 	call	5b14 <__subdf3>
    bc88:	da001717 	ldw	r8,92(sp)
    bc8c:	1829883a 	mov	r20,r3
    bc90:	d8c00717 	ldw	r3,28(sp)
    bc94:	d9000e17 	ldw	r4,56(sp)
    bc98:	d9401017 	ldw	r5,64(sp)
    bc9c:	42000c04 	addi	r8,r8,48
    bca0:	1023883a 	mov	r17,r2
    bca4:	1a000005 	stb	r8,0(r3)
    bca8:	880d883a 	mov	r6,r17
    bcac:	a00f883a 	mov	r7,r20
    bcb0:	402b883a 	mov	r21,r8
    bcb4:	00053100 	call	5310 <__gedf2>
    bcb8:	00844516 	blt	zero,r2,cdd0 <_dtoa_r+0x1698>
    bcbc:	0009883a 	mov	r4,zero
    bcc0:	014ffc34 	movhi	r5,16368
    bcc4:	880d883a 	mov	r6,r17
    bcc8:	a00f883a 	mov	r7,r20
    bccc:	0005b140 	call	5b14 <__subdf3>
    bcd0:	d9000e17 	ldw	r4,56(sp)
    bcd4:	d9401017 	ldw	r5,64(sp)
    bcd8:	100d883a 	mov	r6,r2
    bcdc:	180f883a 	mov	r7,r3
    bce0:	00053100 	call	5310 <__gedf2>
    bce4:	da801617 	ldw	r10,88(sp)
    bce8:	00843616 	blt	zero,r2,cdc4 <_dtoa_r+0x168c>
    bcec:	00800044 	movi	r2,1
    bcf0:	12806e0e 	bge	r2,r10,beac <_dtoa_r+0x774>
    bcf4:	d9000717 	ldw	r4,28(sp)
    bcf8:	dd801315 	stw	r22,76(sp)
    bcfc:	dc001115 	stw	r16,68(sp)
    bd00:	2295883a 	add	r10,r4,r10
    bd04:	dcc01415 	stw	r19,80(sp)
    bd08:	502d883a 	mov	r22,r10
    bd0c:	dcc01017 	ldw	r19,64(sp)
    bd10:	b821883a 	mov	r16,r23
    bd14:	dc801015 	stw	r18,64(sp)
    bd18:	dc800e17 	ldw	r18,56(sp)
    bd1c:	00000906 	br	bd44 <_dtoa_r+0x60c>
    bd20:	0005b140 	call	5b14 <__subdf3>
    bd24:	1009883a 	mov	r4,r2
    bd28:	180b883a 	mov	r5,r3
    bd2c:	900d883a 	mov	r6,r18
    bd30:	980f883a 	mov	r7,r19
    bd34:	00140280 	call	14028 <__ledf2>
    bd38:	10040e16 	blt	r2,zero,cd74 <_dtoa_r+0x163c>
    bd3c:	b821883a 	mov	r16,r23
    bd40:	bd841026 	beq	r23,r22,cd84 <_dtoa_r+0x164c>
    bd44:	9009883a 	mov	r4,r18
    bd48:	980b883a 	mov	r5,r19
    bd4c:	000d883a 	mov	r6,zero
    bd50:	01d00934 	movhi	r7,16420
    bd54:	00053f00 	call	53f0 <__muldf3>
    bd58:	000d883a 	mov	r6,zero
    bd5c:	01d00934 	movhi	r7,16420
    bd60:	8809883a 	mov	r4,r17
    bd64:	a00b883a 	mov	r5,r20
    bd68:	1025883a 	mov	r18,r2
    bd6c:	1827883a 	mov	r19,r3
    bd70:	00053f00 	call	53f0 <__muldf3>
    bd74:	180b883a 	mov	r5,r3
    bd78:	1009883a 	mov	r4,r2
    bd7c:	1823883a 	mov	r17,r3
    bd80:	1029883a 	mov	r20,r2
    bd84:	00063e40 	call	63e4 <__fixdfsi>
    bd88:	1009883a 	mov	r4,r2
    bd8c:	102b883a 	mov	r21,r2
    bd90:	000646c0 	call	646c <__floatsidf>
    bd94:	a009883a 	mov	r4,r20
    bd98:	880b883a 	mov	r5,r17
    bd9c:	100d883a 	mov	r6,r2
    bda0:	180f883a 	mov	r7,r3
    bda4:	0005b140 	call	5b14 <__subdf3>
    bda8:	ad400c04 	addi	r21,r21,48
    bdac:	1009883a 	mov	r4,r2
    bdb0:	180b883a 	mov	r5,r3
    bdb4:	900d883a 	mov	r6,r18
    bdb8:	980f883a 	mov	r7,r19
    bdbc:	85400005 	stb	r21,0(r16)
    bdc0:	1023883a 	mov	r17,r2
    bdc4:	1829883a 	mov	r20,r3
    bdc8:	00140280 	call	14028 <__ledf2>
    bdcc:	bdc00044 	addi	r23,r23,1
    bdd0:	0009883a 	mov	r4,zero
    bdd4:	014ffc34 	movhi	r5,16368
    bdd8:	880d883a 	mov	r6,r17
    bddc:	a00f883a 	mov	r7,r20
    bde0:	103fcf0e 	bge	r2,zero,bd20 <__alt_mem_Flash_flash_data+0xf400bd20>
    bde4:	d9801217 	ldw	r6,72(sp)
    bde8:	dc001117 	ldw	r16,68(sp)
    bdec:	d9800515 	stw	r6,20(sp)
    bdf0:	8009883a 	mov	r4,r16
    bdf4:	e00b883a 	mov	r5,fp
    bdf8:	000e5980 	call	e598 <_Bfree>
    bdfc:	d8c00517 	ldw	r3,20(sp)
    be00:	d9002317 	ldw	r4,140(sp)
    be04:	d9802517 	ldw	r6,148(sp)
    be08:	b8000005 	stb	zero,0(r23)
    be0c:	18800044 	addi	r2,r3,1
    be10:	20800015 	stw	r2,0(r4)
    be14:	30027226 	beq	r6,zero,c7e0 <_dtoa_r+0x10a8>
    be18:	35c00015 	stw	r23,0(r6)
    be1c:	d8800717 	ldw	r2,28(sp)
    be20:	003e7406 	br	b7f4 <__alt_mem_Flash_flash_data+0xf400b7f4>
    be24:	00800434 	movhi	r2,16
    be28:	10bfffc4 	addi	r2,r2,-1
    be2c:	a8aa703a 	and	r21,r21,r2
    be30:	a83e801e 	bne	r21,zero,b834 <__alt_mem_Flash_flash_data+0xf400b834>
    be34:	008000b4 	movhi	r2,2
    be38:	10833404 	addi	r2,r2,3280
    be3c:	003e7f06 	br	b83c <__alt_mem_Flash_flash_data+0xf400b83c>
    be40:	10c00204 	addi	r3,r2,8
    be44:	003e8206 	br	b850 <__alt_mem_Flash_flash_data+0xf400b850>
    be48:	01400434 	movhi	r5,16
    be4c:	297fffc4 	addi	r5,r5,-1
    be50:	994a703a 	and	r5,r19,r5
    be54:	9009883a 	mov	r4,r18
    be58:	8c7f0044 	addi	r17,r17,-1023
    be5c:	294ffc34 	orhi	r5,r5,16368
    be60:	dd000217 	ldw	r20,8(sp)
    be64:	d8000f15 	stw	zero,60(sp)
    be68:	003e9f06 	br	b8e8 <__alt_mem_Flash_flash_data+0xf400b8e8>
    be6c:	008000b4 	movhi	r2,2
    be70:	10832304 	addi	r2,r2,3212
    be74:	003e5f06 	br	b7f4 <__alt_mem_Flash_flash_data+0xf400b7f4>
    be78:	80001115 	stw	zero,68(r16)
    be7c:	8009883a 	mov	r4,r16
    be80:	000b883a 	mov	r5,zero
    be84:	000e4f00 	call	e4f0 <_Balloc>
    be88:	01bfffc4 	movi	r6,-1
    be8c:	d8800715 	stw	r2,28(sp)
    be90:	80801015 	stw	r2,64(r16)
    be94:	00800044 	movi	r2,1
    be98:	d9800c15 	stw	r6,48(sp)
    be9c:	d8800b15 	stw	r2,44(sp)
    bea0:	d9800615 	stw	r6,24(sp)
    bea4:	d8002215 	stw	zero,136(sp)
    bea8:	d8000315 	stw	zero,12(sp)
    beac:	d8800117 	ldw	r2,4(sp)
    beb0:	10008e16 	blt	r2,zero,c0ec <_dtoa_r+0x9b4>
    beb4:	d9000517 	ldw	r4,20(sp)
    beb8:	00c00384 	movi	r3,14
    bebc:	19008b16 	blt	r3,r4,c0ec <_dtoa_r+0x9b4>
    bec0:	200490fa 	slli	r2,r4,3
    bec4:	00c000b4 	movhi	r3,2
    bec8:	d9802217 	ldw	r6,136(sp)
    becc:	18c35304 	addi	r3,r3,3404
    bed0:	1885883a 	add	r2,r3,r2
    bed4:	14400017 	ldw	r17,0(r2)
    bed8:	15000117 	ldw	r20,4(r2)
    bedc:	3001c716 	blt	r6,zero,c5fc <_dtoa_r+0xec4>
    bee0:	880d883a 	mov	r6,r17
    bee4:	a00f883a 	mov	r7,r20
    bee8:	9009883a 	mov	r4,r18
    beec:	980b883a 	mov	r5,r19
    bef0:	001375c0 	call	1375c <__divdf3>
    bef4:	180b883a 	mov	r5,r3
    bef8:	1009883a 	mov	r4,r2
    befc:	00063e40 	call	63e4 <__fixdfsi>
    bf00:	1009883a 	mov	r4,r2
    bf04:	102d883a 	mov	r22,r2
    bf08:	000646c0 	call	646c <__floatsidf>
    bf0c:	1009883a 	mov	r4,r2
    bf10:	180b883a 	mov	r5,r3
    bf14:	880d883a 	mov	r6,r17
    bf18:	a00f883a 	mov	r7,r20
    bf1c:	00053f00 	call	53f0 <__muldf3>
    bf20:	9009883a 	mov	r4,r18
    bf24:	980b883a 	mov	r5,r19
    bf28:	100d883a 	mov	r6,r2
    bf2c:	180f883a 	mov	r7,r3
    bf30:	0005b140 	call	5b14 <__subdf3>
    bf34:	d9000717 	ldw	r4,28(sp)
    bf38:	d9800617 	ldw	r6,24(sp)
    bf3c:	180b883a 	mov	r5,r3
    bf40:	b0c00c04 	addi	r3,r22,48
    bf44:	20c00005 	stb	r3,0(r4)
    bf48:	25c00044 	addi	r23,r4,1
    bf4c:	01000044 	movi	r4,1
    bf50:	1011883a 	mov	r8,r2
    bf54:	2807883a 	mov	r3,r5
    bf58:	31003d26 	beq	r6,r4,c050 <_dtoa_r+0x918>
    bf5c:	000d883a 	mov	r6,zero
    bf60:	01d00934 	movhi	r7,16420
    bf64:	1009883a 	mov	r4,r2
    bf68:	00053f00 	call	53f0 <__muldf3>
    bf6c:	1009883a 	mov	r4,r2
    bf70:	180b883a 	mov	r5,r3
    bf74:	000d883a 	mov	r6,zero
    bf78:	000f883a 	mov	r7,zero
    bf7c:	1027883a 	mov	r19,r2
    bf80:	182b883a 	mov	r21,r3
    bf84:	000528c0 	call	528c <__eqdf2>
    bf88:	103f9926 	beq	r2,zero,bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    bf8c:	d8c00617 	ldw	r3,24(sp)
    bf90:	d9000717 	ldw	r4,28(sp)
    bf94:	b825883a 	mov	r18,r23
    bf98:	18bfffc4 	addi	r2,r3,-1
    bf9c:	20ad883a 	add	r22,r4,r2
    bfa0:	dc000315 	stw	r16,12(sp)
    bfa4:	00000a06 	br	bfd0 <_dtoa_r+0x898>
    bfa8:	00053f00 	call	53f0 <__muldf3>
    bfac:	1009883a 	mov	r4,r2
    bfb0:	180b883a 	mov	r5,r3
    bfb4:	000d883a 	mov	r6,zero
    bfb8:	000f883a 	mov	r7,zero
    bfbc:	1027883a 	mov	r19,r2
    bfc0:	182b883a 	mov	r21,r3
    bfc4:	b825883a 	mov	r18,r23
    bfc8:	000528c0 	call	528c <__eqdf2>
    bfcc:	10022626 	beq	r2,zero,c868 <_dtoa_r+0x1130>
    bfd0:	880d883a 	mov	r6,r17
    bfd4:	a00f883a 	mov	r7,r20
    bfd8:	9809883a 	mov	r4,r19
    bfdc:	a80b883a 	mov	r5,r21
    bfe0:	001375c0 	call	1375c <__divdf3>
    bfe4:	180b883a 	mov	r5,r3
    bfe8:	1009883a 	mov	r4,r2
    bfec:	00063e40 	call	63e4 <__fixdfsi>
    bff0:	1009883a 	mov	r4,r2
    bff4:	1021883a 	mov	r16,r2
    bff8:	000646c0 	call	646c <__floatsidf>
    bffc:	1009883a 	mov	r4,r2
    c000:	180b883a 	mov	r5,r3
    c004:	880d883a 	mov	r6,r17
    c008:	a00f883a 	mov	r7,r20
    c00c:	00053f00 	call	53f0 <__muldf3>
    c010:	9809883a 	mov	r4,r19
    c014:	a80b883a 	mov	r5,r21
    c018:	100d883a 	mov	r6,r2
    c01c:	180f883a 	mov	r7,r3
    c020:	0005b140 	call	5b14 <__subdf3>
    c024:	82000c04 	addi	r8,r16,48
    c028:	92000005 	stb	r8,0(r18)
    c02c:	1009883a 	mov	r4,r2
    c030:	180b883a 	mov	r5,r3
    c034:	000d883a 	mov	r6,zero
    c038:	01d00934 	movhi	r7,16420
    c03c:	1011883a 	mov	r8,r2
    c040:	bdc00044 	addi	r23,r23,1
    c044:	95bfd81e 	bne	r18,r22,bfa8 <__alt_mem_Flash_flash_data+0xf400bfa8>
    c048:	802d883a 	mov	r22,r16
    c04c:	dc000317 	ldw	r16,12(sp)
    c050:	4009883a 	mov	r4,r8
    c054:	180b883a 	mov	r5,r3
    c058:	400d883a 	mov	r6,r8
    c05c:	180f883a 	mov	r7,r3
    c060:	00049f00 	call	49f0 <__adddf3>
    c064:	8809883a 	mov	r4,r17
    c068:	a00b883a 	mov	r5,r20
    c06c:	100d883a 	mov	r6,r2
    c070:	180f883a 	mov	r7,r3
    c074:	1027883a 	mov	r19,r2
    c078:	1825883a 	mov	r18,r3
    c07c:	00140280 	call	14028 <__ledf2>
    c080:	10000816 	blt	r2,zero,c0a4 <_dtoa_r+0x96c>
    c084:	8809883a 	mov	r4,r17
    c088:	a00b883a 	mov	r5,r20
    c08c:	980d883a 	mov	r6,r19
    c090:	900f883a 	mov	r7,r18
    c094:	000528c0 	call	528c <__eqdf2>
    c098:	103f551e 	bne	r2,zero,bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c09c:	b580004c 	andi	r22,r22,1
    c0a0:	b03f5326 	beq	r22,zero,bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c0a4:	bd7fffc3 	ldbu	r21,-1(r23)
    c0a8:	b8bfffc4 	addi	r2,r23,-1
    c0ac:	1007883a 	mov	r3,r2
    c0b0:	01400e44 	movi	r5,57
    c0b4:	d9800717 	ldw	r6,28(sp)
    c0b8:	00000506 	br	c0d0 <_dtoa_r+0x998>
    c0bc:	18ffffc4 	addi	r3,r3,-1
    c0c0:	30825e26 	beq	r6,r2,ca3c <_dtoa_r+0x1304>
    c0c4:	1d400003 	ldbu	r21,0(r3)
    c0c8:	102f883a 	mov	r23,r2
    c0cc:	10bfffc4 	addi	r2,r2,-1
    c0d0:	a9003fcc 	andi	r4,r21,255
    c0d4:	2100201c 	xori	r4,r4,128
    c0d8:	213fe004 	addi	r4,r4,-128
    c0dc:	217ff726 	beq	r4,r5,c0bc <__alt_mem_Flash_flash_data+0xf400c0bc>
    c0e0:	aa000044 	addi	r8,r21,1
    c0e4:	12000005 	stb	r8,0(r2)
    c0e8:	003f4106 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c0ec:	d8c00b17 	ldw	r3,44(sp)
    c0f0:	18006726 	beq	r3,zero,c290 <_dtoa_r+0xb58>
    c0f4:	d9000317 	ldw	r4,12(sp)
    c0f8:	00c00044 	movi	r3,1
    c0fc:	19016a0e 	bge	r3,r4,c6a8 <_dtoa_r+0xf70>
    c100:	d8800617 	ldw	r2,24(sp)
    c104:	d8c00917 	ldw	r3,36(sp)
    c108:	157fffc4 	addi	r21,r2,-1
    c10c:	1d420716 	blt	r3,r21,c92c <_dtoa_r+0x11f4>
    c110:	1d6bc83a 	sub	r21,r3,r21
    c114:	d8800617 	ldw	r2,24(sp)
    c118:	1002c716 	blt	r2,zero,cc38 <_dtoa_r+0x1500>
    c11c:	dd000817 	ldw	r20,32(sp)
    c120:	d8800617 	ldw	r2,24(sp)
    c124:	d9800817 	ldw	r6,32(sp)
    c128:	8009883a 	mov	r4,r16
    c12c:	01400044 	movi	r5,1
    c130:	308d883a 	add	r6,r6,r2
    c134:	d9800815 	stw	r6,32(sp)
    c138:	b0ad883a 	add	r22,r22,r2
    c13c:	000e8fc0 	call	e8fc <__i2b>
    c140:	1023883a 	mov	r17,r2
    c144:	a0000826 	beq	r20,zero,c168 <_dtoa_r+0xa30>
    c148:	0580070e 	bge	zero,r22,c168 <_dtoa_r+0xa30>
    c14c:	b005883a 	mov	r2,r22
    c150:	a5812016 	blt	r20,r22,c5d4 <_dtoa_r+0xe9c>
    c154:	d8c00817 	ldw	r3,32(sp)
    c158:	a0a9c83a 	sub	r20,r20,r2
    c15c:	b0adc83a 	sub	r22,r22,r2
    c160:	1887c83a 	sub	r3,r3,r2
    c164:	d8c00815 	stw	r3,32(sp)
    c168:	d9000917 	ldw	r4,36(sp)
    c16c:	0100140e 	bge	zero,r4,c1c0 <_dtoa_r+0xa88>
    c170:	d9800b17 	ldw	r6,44(sp)
    c174:	3001e526 	beq	r6,zero,c90c <_dtoa_r+0x11d4>
    c178:	05400e0e 	bge	zero,r21,c1b4 <_dtoa_r+0xa7c>
    c17c:	880b883a 	mov	r5,r17
    c180:	8009883a 	mov	r4,r16
    c184:	a80d883a 	mov	r6,r21
    c188:	000eb340 	call	eb34 <__pow5mult>
    c18c:	e00d883a 	mov	r6,fp
    c190:	8009883a 	mov	r4,r16
    c194:	100b883a 	mov	r5,r2
    c198:	1023883a 	mov	r17,r2
    c19c:	000e9380 	call	e938 <__multiply>
    c1a0:	102f883a 	mov	r23,r2
    c1a4:	e00b883a 	mov	r5,fp
    c1a8:	8009883a 	mov	r4,r16
    c1ac:	000e5980 	call	e598 <_Bfree>
    c1b0:	b839883a 	mov	fp,r23
    c1b4:	d8800917 	ldw	r2,36(sp)
    c1b8:	154dc83a 	sub	r6,r2,r21
    c1bc:	3001281e 	bne	r6,zero,c660 <_dtoa_r+0xf28>
    c1c0:	05c00044 	movi	r23,1
    c1c4:	8009883a 	mov	r4,r16
    c1c8:	b80b883a 	mov	r5,r23
    c1cc:	000e8fc0 	call	e8fc <__i2b>
    c1d0:	d8c00a17 	ldw	r3,40(sp)
    c1d4:	102b883a 	mov	r21,r2
    c1d8:	00c0310e 	bge	zero,r3,c2a0 <_dtoa_r+0xb68>
    c1dc:	8009883a 	mov	r4,r16
    c1e0:	100b883a 	mov	r5,r2
    c1e4:	180d883a 	mov	r6,r3
    c1e8:	000eb340 	call	eb34 <__pow5mult>
    c1ec:	d9000317 	ldw	r4,12(sp)
    c1f0:	102b883a 	mov	r21,r2
    c1f4:	b9011f0e 	bge	r23,r4,c674 <_dtoa_r+0xf3c>
    c1f8:	0027883a 	mov	r19,zero
    c1fc:	a8800417 	ldw	r2,16(r21)
    c200:	10800104 	addi	r2,r2,4
    c204:	1085883a 	add	r2,r2,r2
    c208:	1085883a 	add	r2,r2,r2
    c20c:	a885883a 	add	r2,r21,r2
    c210:	11000017 	ldw	r4,0(r2)
    c214:	000e7e40 	call	e7e4 <__hi0bits>
    c218:	00c00804 	movi	r3,32
    c21c:	1885c83a 	sub	r2,r3,r2
    c220:	00002506 	br	c2b8 <_dtoa_r+0xb80>
    c224:	01800044 	movi	r6,1
    c228:	d9800d15 	stw	r6,52(sp)
    c22c:	003dec06 	br	b9e0 <__alt_mem_Flash_flash_data+0xf400b9e0>
    c230:	d8c00817 	ldw	r3,32(sp)
    c234:	d9000517 	ldw	r4,20(sp)
    c238:	d8000a15 	stw	zero,40(sp)
    c23c:	1907c83a 	sub	r3,r3,r4
    c240:	010dc83a 	sub	r6,zero,r4
    c244:	d8c00815 	stw	r3,32(sp)
    c248:	d9800915 	stw	r6,36(sp)
    c24c:	003ded06 	br	ba04 <__alt_mem_Flash_flash_data+0xf400ba04>
    c250:	05adc83a 	sub	r22,zero,r22
    c254:	dd800815 	stw	r22,32(sp)
    c258:	002d883a 	mov	r22,zero
    c25c:	003de406 	br	b9f0 <__alt_mem_Flash_flash_data+0xf400b9f0>
    c260:	d9000517 	ldw	r4,20(sp)
    c264:	000646c0 	call	646c <__floatsidf>
    c268:	1009883a 	mov	r4,r2
    c26c:	180b883a 	mov	r5,r3
    c270:	b00d883a 	mov	r6,r22
    c274:	a80f883a 	mov	r7,r21
    c278:	000528c0 	call	528c <__eqdf2>
    c27c:	103dc726 	beq	r2,zero,b99c <__alt_mem_Flash_flash_data+0xf400b99c>
    c280:	d8800517 	ldw	r2,20(sp)
    c284:	10bfffc4 	addi	r2,r2,-1
    c288:	d8800515 	stw	r2,20(sp)
    c28c:	003dc306 	br	b99c <__alt_mem_Flash_flash_data+0xf400b99c>
    c290:	dd400917 	ldw	r21,36(sp)
    c294:	dd000817 	ldw	r20,32(sp)
    c298:	0023883a 	mov	r17,zero
    c29c:	003fa906 	br	c144 <__alt_mem_Flash_flash_data+0xf400c144>
    c2a0:	d9800317 	ldw	r6,12(sp)
    c2a4:	b981670e 	bge	r23,r6,c844 <_dtoa_r+0x110c>
    c2a8:	0027883a 	mov	r19,zero
    c2ac:	d8c00a17 	ldw	r3,40(sp)
    c2b0:	183fd21e 	bne	r3,zero,c1fc <__alt_mem_Flash_flash_data+0xf400c1fc>
    c2b4:	00800044 	movi	r2,1
    c2b8:	1585883a 	add	r2,r2,r22
    c2bc:	108007cc 	andi	r2,r2,31
    c2c0:	10005f26 	beq	r2,zero,c440 <_dtoa_r+0xd08>
    c2c4:	00c00804 	movi	r3,32
    c2c8:	1887c83a 	sub	r3,r3,r2
    c2cc:	01000104 	movi	r4,4
    c2d0:	20c2dd0e 	bge	r4,r3,ce48 <_dtoa_r+0x1710>
    c2d4:	d9000817 	ldw	r4,32(sp)
    c2d8:	00c00704 	movi	r3,28
    c2dc:	1885c83a 	sub	r2,r3,r2
    c2e0:	2089883a 	add	r4,r4,r2
    c2e4:	d9000815 	stw	r4,32(sp)
    c2e8:	a0a9883a 	add	r20,r20,r2
    c2ec:	b0ad883a 	add	r22,r22,r2
    c2f0:	d8800817 	ldw	r2,32(sp)
    c2f4:	0080050e 	bge	zero,r2,c30c <_dtoa_r+0xbd4>
    c2f8:	e00b883a 	mov	r5,fp
    c2fc:	8009883a 	mov	r4,r16
    c300:	100d883a 	mov	r6,r2
    c304:	000ec740 	call	ec74 <__lshift>
    c308:	1039883a 	mov	fp,r2
    c30c:	0580050e 	bge	zero,r22,c324 <_dtoa_r+0xbec>
    c310:	a80b883a 	mov	r5,r21
    c314:	8009883a 	mov	r4,r16
    c318:	b00d883a 	mov	r6,r22
    c31c:	000ec740 	call	ec74 <__lshift>
    c320:	102b883a 	mov	r21,r2
    c324:	d8c00d17 	ldw	r3,52(sp)
    c328:	1801161e 	bne	r3,zero,c784 <_dtoa_r+0x104c>
    c32c:	d8c00617 	ldw	r3,24(sp)
    c330:	00c12d0e 	bge	zero,r3,c7e8 <_dtoa_r+0x10b0>
    c334:	d8c00b17 	ldw	r3,44(sp)
    c338:	1800571e 	bne	r3,zero,c498 <_dtoa_r+0xd60>
    c33c:	dc800717 	ldw	r18,28(sp)
    c340:	dcc00617 	ldw	r19,24(sp)
    c344:	9029883a 	mov	r20,r18
    c348:	00000206 	br	c354 <_dtoa_r+0xc1c>
    c34c:	000e5c00 	call	e5c0 <__multadd>
    c350:	1039883a 	mov	fp,r2
    c354:	e009883a 	mov	r4,fp
    c358:	a80b883a 	mov	r5,r21
    c35c:	000b5380 	call	b538 <quorem>
    c360:	10800c04 	addi	r2,r2,48
    c364:	90800005 	stb	r2,0(r18)
    c368:	94800044 	addi	r18,r18,1
    c36c:	9507c83a 	sub	r3,r18,r20
    c370:	8009883a 	mov	r4,r16
    c374:	e00b883a 	mov	r5,fp
    c378:	01800284 	movi	r6,10
    c37c:	000f883a 	mov	r7,zero
    c380:	1cfff216 	blt	r3,r19,c34c <__alt_mem_Flash_flash_data+0xf400c34c>
    c384:	1011883a 	mov	r8,r2
    c388:	d8800617 	ldw	r2,24(sp)
    c38c:	00822e0e 	bge	zero,r2,cc48 <_dtoa_r+0x1510>
    c390:	d9000717 	ldw	r4,28(sp)
    c394:	0025883a 	mov	r18,zero
    c398:	20af883a 	add	r23,r4,r2
    c39c:	e00b883a 	mov	r5,fp
    c3a0:	01800044 	movi	r6,1
    c3a4:	8009883a 	mov	r4,r16
    c3a8:	da001715 	stw	r8,92(sp)
    c3ac:	000ec740 	call	ec74 <__lshift>
    c3b0:	1009883a 	mov	r4,r2
    c3b4:	a80b883a 	mov	r5,r21
    c3b8:	1039883a 	mov	fp,r2
    c3bc:	000edc40 	call	edc4 <__mcmp>
    c3c0:	da001717 	ldw	r8,92(sp)
    c3c4:	00816e0e 	bge	zero,r2,c980 <_dtoa_r+0x1248>
    c3c8:	b93fffc3 	ldbu	r4,-1(r23)
    c3cc:	b8bfffc4 	addi	r2,r23,-1
    c3d0:	1007883a 	mov	r3,r2
    c3d4:	01800e44 	movi	r6,57
    c3d8:	d9c00717 	ldw	r7,28(sp)
    c3dc:	00000506 	br	c3f4 <_dtoa_r+0xcbc>
    c3e0:	18ffffc4 	addi	r3,r3,-1
    c3e4:	38811926 	beq	r7,r2,c84c <_dtoa_r+0x1114>
    c3e8:	19000003 	ldbu	r4,0(r3)
    c3ec:	102f883a 	mov	r23,r2
    c3f0:	10bfffc4 	addi	r2,r2,-1
    c3f4:	21403fcc 	andi	r5,r4,255
    c3f8:	2940201c 	xori	r5,r5,128
    c3fc:	297fe004 	addi	r5,r5,-128
    c400:	29bff726 	beq	r5,r6,c3e0 <__alt_mem_Flash_flash_data+0xf400c3e0>
    c404:	21000044 	addi	r4,r4,1
    c408:	11000005 	stb	r4,0(r2)
    c40c:	8009883a 	mov	r4,r16
    c410:	a80b883a 	mov	r5,r21
    c414:	000e5980 	call	e598 <_Bfree>
    c418:	883e7526 	beq	r17,zero,bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c41c:	90000426 	beq	r18,zero,c430 <_dtoa_r+0xcf8>
    c420:	94400326 	beq	r18,r17,c430 <_dtoa_r+0xcf8>
    c424:	8009883a 	mov	r4,r16
    c428:	900b883a 	mov	r5,r18
    c42c:	000e5980 	call	e598 <_Bfree>
    c430:	8009883a 	mov	r4,r16
    c434:	880b883a 	mov	r5,r17
    c438:	000e5980 	call	e598 <_Bfree>
    c43c:	003e6c06 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c440:	00800704 	movi	r2,28
    c444:	d9800817 	ldw	r6,32(sp)
    c448:	a0a9883a 	add	r20,r20,r2
    c44c:	b0ad883a 	add	r22,r22,r2
    c450:	308d883a 	add	r6,r6,r2
    c454:	d9800815 	stw	r6,32(sp)
    c458:	003fa506 	br	c2f0 <__alt_mem_Flash_flash_data+0xf400c2f0>
    c45c:	013efb84 	movi	r4,-1042
    c460:	246bc83a 	sub	r21,r4,r17
    c464:	9548983a 	sll	r4,r18,r21
    c468:	003d1806 	br	b8cc <__alt_mem_Flash_flash_data+0xf400b8cc>
    c46c:	d8000d15 	stw	zero,52(sp)
    c470:	003d5b06 	br	b9e0 <__alt_mem_Flash_flash_data+0xf400b9e0>
    c474:	880b883a 	mov	r5,r17
    c478:	8009883a 	mov	r4,r16
    c47c:	01800284 	movi	r6,10
    c480:	000f883a 	mov	r7,zero
    c484:	000e5c00 	call	e5c0 <__multadd>
    c488:	1023883a 	mov	r17,r2
    c48c:	d8800c17 	ldw	r2,48(sp)
    c490:	0082550e 	bge	zero,r2,cde8 <_dtoa_r+0x16b0>
    c494:	d8800615 	stw	r2,24(sp)
    c498:	0500050e 	bge	zero,r20,c4b0 <_dtoa_r+0xd78>
    c49c:	880b883a 	mov	r5,r17
    c4a0:	8009883a 	mov	r4,r16
    c4a4:	a00d883a 	mov	r6,r20
    c4a8:	000ec740 	call	ec74 <__lshift>
    c4ac:	1023883a 	mov	r17,r2
    c4b0:	98016a1e 	bne	r19,zero,ca5c <_dtoa_r+0x1324>
    c4b4:	8829883a 	mov	r20,r17
    c4b8:	d9000617 	ldw	r4,24(sp)
    c4bc:	dcc00717 	ldw	r19,28(sp)
    c4c0:	9480004c 	andi	r18,r18,1
    c4c4:	20bfffc4 	addi	r2,r4,-1
    c4c8:	9885883a 	add	r2,r19,r2
    c4cc:	d8800415 	stw	r2,16(sp)
    c4d0:	dc800615 	stw	r18,24(sp)
    c4d4:	e009883a 	mov	r4,fp
    c4d8:	a80b883a 	mov	r5,r21
    c4dc:	000b5380 	call	b538 <quorem>
    c4e0:	e009883a 	mov	r4,fp
    c4e4:	880b883a 	mov	r5,r17
    c4e8:	102f883a 	mov	r23,r2
    c4ec:	000edc40 	call	edc4 <__mcmp>
    c4f0:	8009883a 	mov	r4,r16
    c4f4:	a80b883a 	mov	r5,r21
    c4f8:	a00d883a 	mov	r6,r20
    c4fc:	102d883a 	mov	r22,r2
    c500:	000ee240 	call	ee24 <__mdiff>
    c504:	1007883a 	mov	r3,r2
    c508:	10800317 	ldw	r2,12(r2)
    c50c:	bc800c04 	addi	r18,r23,48
    c510:	1000971e 	bne	r2,zero,c770 <_dtoa_r+0x1038>
    c514:	180b883a 	mov	r5,r3
    c518:	e009883a 	mov	r4,fp
    c51c:	d8c01515 	stw	r3,84(sp)
    c520:	000edc40 	call	edc4 <__mcmp>
    c524:	d8c01517 	ldw	r3,84(sp)
    c528:	8009883a 	mov	r4,r16
    c52c:	d8801515 	stw	r2,84(sp)
    c530:	180b883a 	mov	r5,r3
    c534:	000e5980 	call	e598 <_Bfree>
    c538:	d8801517 	ldw	r2,84(sp)
    c53c:	1000041e 	bne	r2,zero,c550 <_dtoa_r+0xe18>
    c540:	d9800317 	ldw	r6,12(sp)
    c544:	3000021e 	bne	r6,zero,c550 <_dtoa_r+0xe18>
    c548:	d8c00617 	ldw	r3,24(sp)
    c54c:	18007626 	beq	r3,zero,c728 <_dtoa_r+0xff0>
    c550:	b0005b16 	blt	r22,zero,c6c0 <_dtoa_r+0xf88>
    c554:	b000041e 	bne	r22,zero,c568 <_dtoa_r+0xe30>
    c558:	d9000317 	ldw	r4,12(sp)
    c55c:	2000021e 	bne	r4,zero,c568 <_dtoa_r+0xe30>
    c560:	d8c00617 	ldw	r3,24(sp)
    c564:	18005626 	beq	r3,zero,c6c0 <_dtoa_r+0xf88>
    c568:	00814d16 	blt	zero,r2,caa0 <_dtoa_r+0x1368>
    c56c:	d8c00417 	ldw	r3,16(sp)
    c570:	9d800044 	addi	r22,r19,1
    c574:	9c800005 	stb	r18,0(r19)
    c578:	b02f883a 	mov	r23,r22
    c57c:	98c14c26 	beq	r19,r3,cab0 <_dtoa_r+0x1378>
    c580:	e00b883a 	mov	r5,fp
    c584:	8009883a 	mov	r4,r16
    c588:	01800284 	movi	r6,10
    c58c:	000f883a 	mov	r7,zero
    c590:	000e5c00 	call	e5c0 <__multadd>
    c594:	1039883a 	mov	fp,r2
    c598:	8d006d26 	beq	r17,r20,c750 <_dtoa_r+0x1018>
    c59c:	880b883a 	mov	r5,r17
    c5a0:	01800284 	movi	r6,10
    c5a4:	000f883a 	mov	r7,zero
    c5a8:	8009883a 	mov	r4,r16
    c5ac:	000e5c00 	call	e5c0 <__multadd>
    c5b0:	a00b883a 	mov	r5,r20
    c5b4:	8009883a 	mov	r4,r16
    c5b8:	01800284 	movi	r6,10
    c5bc:	000f883a 	mov	r7,zero
    c5c0:	1023883a 	mov	r17,r2
    c5c4:	000e5c00 	call	e5c0 <__multadd>
    c5c8:	1029883a 	mov	r20,r2
    c5cc:	b027883a 	mov	r19,r22
    c5d0:	003fc006 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c5d4:	a005883a 	mov	r2,r20
    c5d8:	003ede06 	br	c154 <__alt_mem_Flash_flash_data+0xf400c154>
    c5dc:	01000044 	movi	r4,1
    c5e0:	d9000b15 	stw	r4,44(sp)
    c5e4:	d9802217 	ldw	r6,136(sp)
    c5e8:	0180dc0e 	bge	zero,r6,c95c <_dtoa_r+0x1224>
    c5ec:	3023883a 	mov	r17,r6
    c5f0:	d9800c15 	stw	r6,48(sp)
    c5f4:	d9800615 	stw	r6,24(sp)
    c5f8:	003d1e06 	br	ba74 <__alt_mem_Flash_flash_data+0xf400ba74>
    c5fc:	d8800617 	ldw	r2,24(sp)
    c600:	00be3716 	blt	zero,r2,bee0 <__alt_mem_Flash_flash_data+0xf400bee0>
    c604:	1000be1e 	bne	r2,zero,c900 <_dtoa_r+0x11c8>
    c608:	8809883a 	mov	r4,r17
    c60c:	a00b883a 	mov	r5,r20
    c610:	000d883a 	mov	r6,zero
    c614:	01d00534 	movhi	r7,16404
    c618:	00053f00 	call	53f0 <__muldf3>
    c61c:	1009883a 	mov	r4,r2
    c620:	180b883a 	mov	r5,r3
    c624:	900d883a 	mov	r6,r18
    c628:	980f883a 	mov	r7,r19
    c62c:	00053100 	call	5310 <__gedf2>
    c630:	002b883a 	mov	r21,zero
    c634:	0023883a 	mov	r17,zero
    c638:	10007a16 	blt	r2,zero,c824 <_dtoa_r+0x10ec>
    c63c:	d9002217 	ldw	r4,136(sp)
    c640:	ddc00717 	ldw	r23,28(sp)
    c644:	0108303a 	nor	r4,zero,r4
    c648:	d9000515 	stw	r4,20(sp)
    c64c:	8009883a 	mov	r4,r16
    c650:	a80b883a 	mov	r5,r21
    c654:	000e5980 	call	e598 <_Bfree>
    c658:	883f751e 	bne	r17,zero,c430 <__alt_mem_Flash_flash_data+0xf400c430>
    c65c:	003de406 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c660:	e00b883a 	mov	r5,fp
    c664:	8009883a 	mov	r4,r16
    c668:	000eb340 	call	eb34 <__pow5mult>
    c66c:	1039883a 	mov	fp,r2
    c670:	003ed306 	br	c1c0 <__alt_mem_Flash_flash_data+0xf400c1c0>
    c674:	903ee01e 	bne	r18,zero,c1f8 <__alt_mem_Flash_flash_data+0xf400c1f8>
    c678:	00800434 	movhi	r2,16
    c67c:	10bfffc4 	addi	r2,r2,-1
    c680:	9884703a 	and	r2,r19,r2
    c684:	103f081e 	bne	r2,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c688:	9cdffc2c 	andhi	r19,r19,32752
    c68c:	983f0626 	beq	r19,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c690:	d8800817 	ldw	r2,32(sp)
    c694:	b5800044 	addi	r22,r22,1
    c698:	04c00044 	movi	r19,1
    c69c:	10800044 	addi	r2,r2,1
    c6a0:	d8800815 	stw	r2,32(sp)
    c6a4:	003f0106 	br	c2ac <__alt_mem_Flash_flash_data+0xf400c2ac>
    c6a8:	d9800f17 	ldw	r6,60(sp)
    c6ac:	30016826 	beq	r6,zero,cc50 <_dtoa_r+0x1518>
    c6b0:	10810cc4 	addi	r2,r2,1075
    c6b4:	dd400917 	ldw	r21,36(sp)
    c6b8:	dd000817 	ldw	r20,32(sp)
    c6bc:	003e9906 	br	c124 <__alt_mem_Flash_flash_data+0xf400c124>
    c6c0:	9011883a 	mov	r8,r18
    c6c4:	4007883a 	mov	r3,r8
    c6c8:	e02d883a 	mov	r22,fp
    c6cc:	0080100e 	bge	zero,r2,c710 <_dtoa_r+0xfd8>
    c6d0:	01800044 	movi	r6,1
    c6d4:	8009883a 	mov	r4,r16
    c6d8:	e00b883a 	mov	r5,fp
    c6dc:	da001515 	stw	r8,84(sp)
    c6e0:	da001715 	stw	r8,92(sp)
    c6e4:	000ec740 	call	ec74 <__lshift>
    c6e8:	1009883a 	mov	r4,r2
    c6ec:	a80b883a 	mov	r5,r21
    c6f0:	102d883a 	mov	r22,r2
    c6f4:	000edc40 	call	edc4 <__mcmp>
    c6f8:	d8c01517 	ldw	r3,84(sp)
    c6fc:	da001717 	ldw	r8,92(sp)
    c700:	0081a50e 	bge	zero,r2,cd98 <_dtoa_r+0x1660>
    c704:	00800e44 	movi	r2,57
    c708:	40817b26 	beq	r8,r2,ccf8 <_dtoa_r+0x15c0>
    c70c:	40c00044 	addi	r3,r8,1
    c710:	8825883a 	mov	r18,r17
    c714:	9dc00044 	addi	r23,r19,1
    c718:	98c00005 	stb	r3,0(r19)
    c71c:	a023883a 	mov	r17,r20
    c720:	b039883a 	mov	fp,r22
    c724:	003f3906 	br	c40c <__alt_mem_Flash_flash_data+0xf400c40c>
    c728:	00800e44 	movi	r2,57
    c72c:	9011883a 	mov	r8,r18
    c730:	90817226 	beq	r18,r2,ccfc <_dtoa_r+0x15c4>
    c734:	0580010e 	bge	zero,r22,c73c <_dtoa_r+0x1004>
    c738:	ba000c44 	addi	r8,r23,49
    c73c:	8825883a 	mov	r18,r17
    c740:	9dc00044 	addi	r23,r19,1
    c744:	9a000005 	stb	r8,0(r19)
    c748:	a023883a 	mov	r17,r20
    c74c:	003f2f06 	br	c40c <__alt_mem_Flash_flash_data+0xf400c40c>
    c750:	880b883a 	mov	r5,r17
    c754:	8009883a 	mov	r4,r16
    c758:	01800284 	movi	r6,10
    c75c:	000f883a 	mov	r7,zero
    c760:	000e5c00 	call	e5c0 <__multadd>
    c764:	1023883a 	mov	r17,r2
    c768:	1029883a 	mov	r20,r2
    c76c:	003f9706 	br	c5cc <__alt_mem_Flash_flash_data+0xf400c5cc>
    c770:	8009883a 	mov	r4,r16
    c774:	180b883a 	mov	r5,r3
    c778:	000e5980 	call	e598 <_Bfree>
    c77c:	00800044 	movi	r2,1
    c780:	003f7306 	br	c550 <__alt_mem_Flash_flash_data+0xf400c550>
    c784:	e009883a 	mov	r4,fp
    c788:	a80b883a 	mov	r5,r21
    c78c:	000edc40 	call	edc4 <__mcmp>
    c790:	103ee60e 	bge	r2,zero,c32c <__alt_mem_Flash_flash_data+0xf400c32c>
    c794:	8009883a 	mov	r4,r16
    c798:	e00b883a 	mov	r5,fp
    c79c:	01800284 	movi	r6,10
    c7a0:	000f883a 	mov	r7,zero
    c7a4:	000e5c00 	call	e5c0 <__multadd>
    c7a8:	d9000517 	ldw	r4,20(sp)
    c7ac:	d9800b17 	ldw	r6,44(sp)
    c7b0:	1039883a 	mov	fp,r2
    c7b4:	213fffc4 	addi	r4,r4,-1
    c7b8:	d9000515 	stw	r4,20(sp)
    c7bc:	303f2d1e 	bne	r6,zero,c474 <__alt_mem_Flash_flash_data+0xf400c474>
    c7c0:	d9000c17 	ldw	r4,48(sp)
    c7c4:	0101780e 	bge	zero,r4,cda8 <_dtoa_r+0x1670>
    c7c8:	d9000615 	stw	r4,24(sp)
    c7cc:	003edb06 	br	c33c <__alt_mem_Flash_flash_data+0xf400c33c>
    c7d0:	00800084 	movi	r2,2
    c7d4:	30818e1e 	bne	r6,r2,ce10 <_dtoa_r+0x16d8>
    c7d8:	d8000b15 	stw	zero,44(sp)
    c7dc:	003f8106 	br	c5e4 <__alt_mem_Flash_flash_data+0xf400c5e4>
    c7e0:	d8800717 	ldw	r2,28(sp)
    c7e4:	003c0306 	br	b7f4 <__alt_mem_Flash_flash_data+0xf400b7f4>
    c7e8:	d9000317 	ldw	r4,12(sp)
    c7ec:	00800084 	movi	r2,2
    c7f0:	113ed00e 	bge	r2,r4,c334 <__alt_mem_Flash_flash_data+0xf400c334>
    c7f4:	d8c00617 	ldw	r3,24(sp)
    c7f8:	183f901e 	bne	r3,zero,c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    c7fc:	a80b883a 	mov	r5,r21
    c800:	8009883a 	mov	r4,r16
    c804:	01800144 	movi	r6,5
    c808:	000f883a 	mov	r7,zero
    c80c:	000e5c00 	call	e5c0 <__multadd>
    c810:	e009883a 	mov	r4,fp
    c814:	100b883a 	mov	r5,r2
    c818:	102b883a 	mov	r21,r2
    c81c:	000edc40 	call	edc4 <__mcmp>
    c820:	00bf860e 	bge	zero,r2,c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    c824:	d9800717 	ldw	r6,28(sp)
    c828:	00800c44 	movi	r2,49
    c82c:	30800005 	stb	r2,0(r6)
    c830:	d8800517 	ldw	r2,20(sp)
    c834:	35c00044 	addi	r23,r6,1
    c838:	10800044 	addi	r2,r2,1
    c83c:	d8800515 	stw	r2,20(sp)
    c840:	003f8206 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    c844:	903e981e 	bne	r18,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c848:	003f8b06 	br	c678 <__alt_mem_Flash_flash_data+0xf400c678>
    c84c:	d9800517 	ldw	r6,20(sp)
    c850:	d8c00717 	ldw	r3,28(sp)
    c854:	00800c44 	movi	r2,49
    c858:	31800044 	addi	r6,r6,1
    c85c:	d9800515 	stw	r6,20(sp)
    c860:	18800005 	stb	r2,0(r3)
    c864:	003ee906 	br	c40c <__alt_mem_Flash_flash_data+0xf400c40c>
    c868:	dc000317 	ldw	r16,12(sp)
    c86c:	003d6006 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    c870:	8809883a 	mov	r4,r17
    c874:	000646c0 	call	646c <__floatsidf>
    c878:	a009883a 	mov	r4,r20
    c87c:	a80b883a 	mov	r5,r21
    c880:	100d883a 	mov	r6,r2
    c884:	180f883a 	mov	r7,r3
    c888:	00053f00 	call	53f0 <__muldf3>
    c88c:	1009883a 	mov	r4,r2
    c890:	180b883a 	mov	r5,r3
    c894:	000d883a 	mov	r6,zero
    c898:	01d00734 	movhi	r7,16412
    c89c:	00049f00 	call	49f0 <__adddf3>
    c8a0:	1023883a 	mov	r17,r2
    c8a4:	00bf3034 	movhi	r2,64704
    c8a8:	1885883a 	add	r2,r3,r2
    c8ac:	d8800e15 	stw	r2,56(sp)
    c8b0:	a009883a 	mov	r4,r20
    c8b4:	a80b883a 	mov	r5,r21
    c8b8:	000d883a 	mov	r6,zero
    c8bc:	01d00534 	movhi	r7,16404
    c8c0:	0005b140 	call	5b14 <__subdf3>
    c8c4:	d9c00e17 	ldw	r7,56(sp)
    c8c8:	1009883a 	mov	r4,r2
    c8cc:	180b883a 	mov	r5,r3
    c8d0:	880d883a 	mov	r6,r17
    c8d4:	102b883a 	mov	r21,r2
    c8d8:	1829883a 	mov	r20,r3
    c8dc:	00053100 	call	5310 <__gedf2>
    c8e0:	00807716 	blt	zero,r2,cac0 <_dtoa_r+0x1388>
    c8e4:	d8800e17 	ldw	r2,56(sp)
    c8e8:	a809883a 	mov	r4,r21
    c8ec:	a00b883a 	mov	r5,r20
    c8f0:	11e0003c 	xorhi	r7,r2,32768
    c8f4:	880d883a 	mov	r6,r17
    c8f8:	00140280 	call	14028 <__ledf2>
    c8fc:	103d6b0e 	bge	r2,zero,beac <__alt_mem_Flash_flash_data+0xf400beac>
    c900:	002b883a 	mov	r21,zero
    c904:	0023883a 	mov	r17,zero
    c908:	003f4c06 	br	c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    c90c:	d9800917 	ldw	r6,36(sp)
    c910:	e00b883a 	mov	r5,fp
    c914:	8009883a 	mov	r4,r16
    c918:	000eb340 	call	eb34 <__pow5mult>
    c91c:	1039883a 	mov	fp,r2
    c920:	003e2706 	br	c1c0 <__alt_mem_Flash_flash_data+0xf400c1c0>
    c924:	d8000b15 	stw	zero,44(sp)
    c928:	003c4906 	br	ba50 <__alt_mem_Flash_flash_data+0xf400ba50>
    c92c:	d9000917 	ldw	r4,36(sp)
    c930:	d9800a17 	ldw	r6,40(sp)
    c934:	dd400915 	stw	r21,36(sp)
    c938:	a905c83a 	sub	r2,r21,r4
    c93c:	308d883a 	add	r6,r6,r2
    c940:	d9800a15 	stw	r6,40(sp)
    c944:	002b883a 	mov	r21,zero
    c948:	003df206 	br	c114 <__alt_mem_Flash_flash_data+0xf400c114>
    c94c:	dc800e15 	stw	r18,56(sp)
    c950:	982b883a 	mov	r21,r19
    c954:	04400084 	movi	r17,2
    c958:	003c7406 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c95c:	04400044 	movi	r17,1
    c960:	dc400c15 	stw	r17,48(sp)
    c964:	dc400615 	stw	r17,24(sp)
    c968:	dc402215 	stw	r17,136(sp)
    c96c:	80001115 	stw	zero,68(r16)
    c970:	000b883a 	mov	r5,zero
    c974:	003c4a06 	br	baa0 <__alt_mem_Flash_flash_data+0xf400baa0>
    c978:	3023883a 	mov	r17,r6
    c97c:	003ffb06 	br	c96c <__alt_mem_Flash_flash_data+0xf400c96c>
    c980:	1000021e 	bne	r2,zero,c98c <_dtoa_r+0x1254>
    c984:	4200004c 	andi	r8,r8,1
    c988:	403e8f1e 	bne	r8,zero,c3c8 <__alt_mem_Flash_flash_data+0xf400c3c8>
    c98c:	01000c04 	movi	r4,48
    c990:	00000106 	br	c998 <_dtoa_r+0x1260>
    c994:	102f883a 	mov	r23,r2
    c998:	b8bfffc4 	addi	r2,r23,-1
    c99c:	10c00007 	ldb	r3,0(r2)
    c9a0:	193ffc26 	beq	r3,r4,c994 <__alt_mem_Flash_flash_data+0xf400c994>
    c9a4:	003e9906 	br	c40c <__alt_mem_Flash_flash_data+0xf400c40c>
    c9a8:	d9000517 	ldw	r4,20(sp)
    c9ac:	012fc83a 	sub	r23,zero,r4
    c9b0:	b800ad26 	beq	r23,zero,cc68 <_dtoa_r+0x1530>
    c9b4:	b88003cc 	andi	r2,r23,15
    c9b8:	100490fa 	slli	r2,r2,3
    c9bc:	00c000b4 	movhi	r3,2
    c9c0:	18c35304 	addi	r3,r3,3404
    c9c4:	1885883a 	add	r2,r3,r2
    c9c8:	11800017 	ldw	r6,0(r2)
    c9cc:	11c00117 	ldw	r7,4(r2)
    c9d0:	b82fd13a 	srai	r23,r23,4
    c9d4:	9009883a 	mov	r4,r18
    c9d8:	980b883a 	mov	r5,r19
    c9dc:	00053f00 	call	53f0 <__muldf3>
    c9e0:	1029883a 	mov	r20,r2
    c9e4:	182b883a 	mov	r21,r3
    c9e8:	b800f426 	beq	r23,zero,cdbc <_dtoa_r+0x1684>
    c9ec:	020000b4 	movhi	r8,2
    c9f0:	42034904 	addi	r8,r8,3364
    c9f4:	8029883a 	mov	r20,r16
    c9f8:	04400084 	movi	r17,2
    c9fc:	4021883a 	mov	r16,r8
    ca00:	b980004c 	andi	r6,r23,1
    ca04:	1009883a 	mov	r4,r2
    ca08:	b82fd07a 	srai	r23,r23,1
    ca0c:	180b883a 	mov	r5,r3
    ca10:	30000426 	beq	r6,zero,ca24 <_dtoa_r+0x12ec>
    ca14:	81800017 	ldw	r6,0(r16)
    ca18:	81c00117 	ldw	r7,4(r16)
    ca1c:	8c400044 	addi	r17,r17,1
    ca20:	00053f00 	call	53f0 <__muldf3>
    ca24:	84000204 	addi	r16,r16,8
    ca28:	b83ff51e 	bne	r23,zero,ca00 <__alt_mem_Flash_flash_data+0xf400ca00>
    ca2c:	a021883a 	mov	r16,r20
    ca30:	182b883a 	mov	r21,r3
    ca34:	1029883a 	mov	r20,r2
    ca38:	003c5506 	br	bb90 <__alt_mem_Flash_flash_data+0xf400bb90>
    ca3c:	d9800517 	ldw	r6,20(sp)
    ca40:	d9000717 	ldw	r4,28(sp)
    ca44:	00c00c04 	movi	r3,48
    ca48:	31800044 	addi	r6,r6,1
    ca4c:	d9800515 	stw	r6,20(sp)
    ca50:	20c00005 	stb	r3,0(r4)
    ca54:	02000c44 	movi	r8,49
    ca58:	003da206 	br	c0e4 <__alt_mem_Flash_flash_data+0xf400c0e4>
    ca5c:	89400117 	ldw	r5,4(r17)
    ca60:	8009883a 	mov	r4,r16
    ca64:	000e4f00 	call	e4f0 <_Balloc>
    ca68:	89800417 	ldw	r6,16(r17)
    ca6c:	11000304 	addi	r4,r2,12
    ca70:	89400304 	addi	r5,r17,12
    ca74:	31800084 	addi	r6,r6,2
    ca78:	318d883a 	add	r6,r6,r6
    ca7c:	318d883a 	add	r6,r6,r6
    ca80:	1027883a 	mov	r19,r2
    ca84:	00070180 	call	7018 <memcpy>
    ca88:	8009883a 	mov	r4,r16
    ca8c:	980b883a 	mov	r5,r19
    ca90:	01800044 	movi	r6,1
    ca94:	000ec740 	call	ec74 <__lshift>
    ca98:	1029883a 	mov	r20,r2
    ca9c:	003e8606 	br	c4b8 <__alt_mem_Flash_flash_data+0xf400c4b8>
    caa0:	00800e44 	movi	r2,57
    caa4:	90809526 	beq	r18,r2,ccfc <_dtoa_r+0x15c4>
    caa8:	92000044 	addi	r8,r18,1
    caac:	003f2306 	br	c73c <__alt_mem_Flash_flash_data+0xf400c73c>
    cab0:	9011883a 	mov	r8,r18
    cab4:	8825883a 	mov	r18,r17
    cab8:	a023883a 	mov	r17,r20
    cabc:	003e3706 	br	c39c <__alt_mem_Flash_flash_data+0xf400c39c>
    cac0:	002b883a 	mov	r21,zero
    cac4:	0023883a 	mov	r17,zero
    cac8:	003f5606 	br	c824 <__alt_mem_Flash_flash_data+0xf400c824>
    cacc:	51bfffc4 	addi	r6,r10,-1
    cad0:	300490fa 	slli	r2,r6,3
    cad4:	00c000b4 	movhi	r3,2
    cad8:	18c35304 	addi	r3,r3,3404
    cadc:	1885883a 	add	r2,r3,r2
    cae0:	d9c00e17 	ldw	r7,56(sp)
    cae4:	11000017 	ldw	r4,0(r2)
    cae8:	11400117 	ldw	r5,4(r2)
    caec:	d8800717 	ldw	r2,28(sp)
    caf0:	d9801015 	stw	r6,64(sp)
    caf4:	880d883a 	mov	r6,r17
    caf8:	da801615 	stw	r10,88(sp)
    cafc:	15c00044 	addi	r23,r2,1
    cb00:	00053f00 	call	53f0 <__muldf3>
    cb04:	a80b883a 	mov	r5,r21
    cb08:	a009883a 	mov	r4,r20
    cb0c:	d8c01115 	stw	r3,68(sp)
    cb10:	d8800e15 	stw	r2,56(sp)
    cb14:	00063e40 	call	63e4 <__fixdfsi>
    cb18:	1009883a 	mov	r4,r2
    cb1c:	1023883a 	mov	r17,r2
    cb20:	000646c0 	call	646c <__floatsidf>
    cb24:	a009883a 	mov	r4,r20
    cb28:	a80b883a 	mov	r5,r21
    cb2c:	100d883a 	mov	r6,r2
    cb30:	180f883a 	mov	r7,r3
    cb34:	0005b140 	call	5b14 <__subdf3>
    cb38:	1813883a 	mov	r9,r3
    cb3c:	d8c00717 	ldw	r3,28(sp)
    cb40:	8c400c04 	addi	r17,r17,48
    cb44:	1011883a 	mov	r8,r2
    cb48:	1c400005 	stb	r17,0(r3)
    cb4c:	da801617 	ldw	r10,88(sp)
    cb50:	00800044 	movi	r2,1
    cb54:	50802326 	beq	r10,r2,cbe4 <_dtoa_r+0x14ac>
    cb58:	d8800717 	ldw	r2,28(sp)
    cb5c:	b82b883a 	mov	r21,r23
    cb60:	dc001315 	stw	r16,76(sp)
    cb64:	12a9883a 	add	r20,r2,r10
    cb68:	4807883a 	mov	r3,r9
    cb6c:	4005883a 	mov	r2,r8
    cb70:	dc801415 	stw	r18,80(sp)
    cb74:	000d883a 	mov	r6,zero
    cb78:	01d00934 	movhi	r7,16420
    cb7c:	1009883a 	mov	r4,r2
    cb80:	180b883a 	mov	r5,r3
    cb84:	00053f00 	call	53f0 <__muldf3>
    cb88:	180b883a 	mov	r5,r3
    cb8c:	1009883a 	mov	r4,r2
    cb90:	1821883a 	mov	r16,r3
    cb94:	1025883a 	mov	r18,r2
    cb98:	00063e40 	call	63e4 <__fixdfsi>
    cb9c:	1009883a 	mov	r4,r2
    cba0:	1023883a 	mov	r17,r2
    cba4:	000646c0 	call	646c <__floatsidf>
    cba8:	9009883a 	mov	r4,r18
    cbac:	800b883a 	mov	r5,r16
    cbb0:	100d883a 	mov	r6,r2
    cbb4:	180f883a 	mov	r7,r3
    cbb8:	8c400c04 	addi	r17,r17,48
    cbbc:	0005b140 	call	5b14 <__subdf3>
    cbc0:	ad400044 	addi	r21,r21,1
    cbc4:	ac7fffc5 	stb	r17,-1(r21)
    cbc8:	ad3fea1e 	bne	r21,r20,cb74 <__alt_mem_Flash_flash_data+0xf400cb74>
    cbcc:	1813883a 	mov	r9,r3
    cbd0:	d8c01017 	ldw	r3,64(sp)
    cbd4:	dc001317 	ldw	r16,76(sp)
    cbd8:	dc801417 	ldw	r18,80(sp)
    cbdc:	1011883a 	mov	r8,r2
    cbe0:	b8ef883a 	add	r23,r23,r3
    cbe4:	d9000e17 	ldw	r4,56(sp)
    cbe8:	d9401117 	ldw	r5,68(sp)
    cbec:	000d883a 	mov	r6,zero
    cbf0:	01cff834 	movhi	r7,16352
    cbf4:	da001715 	stw	r8,92(sp)
    cbf8:	da401515 	stw	r9,84(sp)
    cbfc:	00049f00 	call	49f0 <__adddf3>
    cc00:	da001717 	ldw	r8,92(sp)
    cc04:	da401517 	ldw	r9,84(sp)
    cc08:	1009883a 	mov	r4,r2
    cc0c:	400d883a 	mov	r6,r8
    cc10:	480f883a 	mov	r7,r9
    cc14:	180b883a 	mov	r5,r3
    cc18:	00140280 	call	14028 <__ledf2>
    cc1c:	da001717 	ldw	r8,92(sp)
    cc20:	da401517 	ldw	r9,84(sp)
    cc24:	10003b0e 	bge	r2,zero,cd14 <_dtoa_r+0x15dc>
    cc28:	d9001217 	ldw	r4,72(sp)
    cc2c:	bd7fffc3 	ldbu	r21,-1(r23)
    cc30:	d9000515 	stw	r4,20(sp)
    cc34:	003d1c06 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>
    cc38:	d8c00817 	ldw	r3,32(sp)
    cc3c:	18a9c83a 	sub	r20,r3,r2
    cc40:	0005883a 	mov	r2,zero
    cc44:	003d3706 	br	c124 <__alt_mem_Flash_flash_data+0xf400c124>
    cc48:	00800044 	movi	r2,1
    cc4c:	003dd006 	br	c390 <__alt_mem_Flash_flash_data+0xf400c390>
    cc50:	d8c00217 	ldw	r3,8(sp)
    cc54:	00800d84 	movi	r2,54
    cc58:	dd400917 	ldw	r21,36(sp)
    cc5c:	10c5c83a 	sub	r2,r2,r3
    cc60:	dd000817 	ldw	r20,32(sp)
    cc64:	003d2f06 	br	c124 <__alt_mem_Flash_flash_data+0xf400c124>
    cc68:	9029883a 	mov	r20,r18
    cc6c:	982b883a 	mov	r21,r19
    cc70:	04400084 	movi	r17,2
    cc74:	003bc606 	br	bb90 <__alt_mem_Flash_flash_data+0xf400bb90>
    cc78:	d8800617 	ldw	r2,24(sp)
    cc7c:	103efc26 	beq	r2,zero,c870 <__alt_mem_Flash_flash_data+0xf400c870>
    cc80:	d8c00c17 	ldw	r3,48(sp)
    cc84:	00fc890e 	bge	zero,r3,beac <__alt_mem_Flash_flash_data+0xf400beac>
    cc88:	a80b883a 	mov	r5,r21
    cc8c:	a009883a 	mov	r4,r20
    cc90:	000d883a 	mov	r6,zero
    cc94:	01d00934 	movhi	r7,16420
    cc98:	00053f00 	call	53f0 <__muldf3>
    cc9c:	89000044 	addi	r4,r17,1
    cca0:	1029883a 	mov	r20,r2
    cca4:	182b883a 	mov	r21,r3
    cca8:	000646c0 	call	646c <__floatsidf>
    ccac:	a009883a 	mov	r4,r20
    ccb0:	a80b883a 	mov	r5,r21
    ccb4:	100d883a 	mov	r6,r2
    ccb8:	180f883a 	mov	r7,r3
    ccbc:	00053f00 	call	53f0 <__muldf3>
    ccc0:	1009883a 	mov	r4,r2
    ccc4:	180b883a 	mov	r5,r3
    ccc8:	000d883a 	mov	r6,zero
    cccc:	01d00734 	movhi	r7,16412
    ccd0:	00049f00 	call	49f0 <__adddf3>
    ccd4:	d9000517 	ldw	r4,20(sp)
    ccd8:	1023883a 	mov	r17,r2
    ccdc:	00bf3034 	movhi	r2,64704
    cce0:	213fffc4 	addi	r4,r4,-1
    cce4:	1885883a 	add	r2,r3,r2
    cce8:	d9001215 	stw	r4,72(sp)
    ccec:	d8800e15 	stw	r2,56(sp)
    ccf0:	da800c17 	ldw	r10,48(sp)
    ccf4:	003bc306 	br	bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    ccf8:	b039883a 	mov	fp,r22
    ccfc:	01000e44 	movi	r4,57
    cd00:	8825883a 	mov	r18,r17
    cd04:	9dc00044 	addi	r23,r19,1
    cd08:	99000005 	stb	r4,0(r19)
    cd0c:	a023883a 	mov	r17,r20
    cd10:	003dae06 	br	c3cc <__alt_mem_Flash_flash_data+0xf400c3cc>
    cd14:	d9800e17 	ldw	r6,56(sp)
    cd18:	d9c01117 	ldw	r7,68(sp)
    cd1c:	0009883a 	mov	r4,zero
    cd20:	014ff834 	movhi	r5,16352
    cd24:	da001715 	stw	r8,92(sp)
    cd28:	da401515 	stw	r9,84(sp)
    cd2c:	0005b140 	call	5b14 <__subdf3>
    cd30:	da001717 	ldw	r8,92(sp)
    cd34:	da401517 	ldw	r9,84(sp)
    cd38:	1009883a 	mov	r4,r2
    cd3c:	180b883a 	mov	r5,r3
    cd40:	400d883a 	mov	r6,r8
    cd44:	480f883a 	mov	r7,r9
    cd48:	00053100 	call	5310 <__gedf2>
    cd4c:	00bc570e 	bge	zero,r2,beac <__alt_mem_Flash_flash_data+0xf400beac>
    cd50:	01000c04 	movi	r4,48
    cd54:	00000106 	br	cd5c <_dtoa_r+0x1624>
    cd58:	102f883a 	mov	r23,r2
    cd5c:	b8bfffc4 	addi	r2,r23,-1
    cd60:	10c00007 	ldb	r3,0(r2)
    cd64:	193ffc26 	beq	r3,r4,cd58 <__alt_mem_Flash_flash_data+0xf400cd58>
    cd68:	d9801217 	ldw	r6,72(sp)
    cd6c:	d9800515 	stw	r6,20(sp)
    cd70:	003c1f06 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    cd74:	d8801217 	ldw	r2,72(sp)
    cd78:	dc001117 	ldw	r16,68(sp)
    cd7c:	d8800515 	stw	r2,20(sp)
    cd80:	003cc906 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>
    cd84:	dd801317 	ldw	r22,76(sp)
    cd88:	dc001117 	ldw	r16,68(sp)
    cd8c:	dcc01417 	ldw	r19,80(sp)
    cd90:	dc801017 	ldw	r18,64(sp)
    cd94:	003c4506 	br	beac <__alt_mem_Flash_flash_data+0xf400beac>
    cd98:	103e5d1e 	bne	r2,zero,c710 <__alt_mem_Flash_flash_data+0xf400c710>
    cd9c:	4080004c 	andi	r2,r8,1
    cda0:	103e5b26 	beq	r2,zero,c710 <__alt_mem_Flash_flash_data+0xf400c710>
    cda4:	003e5706 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    cda8:	d8c00317 	ldw	r3,12(sp)
    cdac:	00800084 	movi	r2,2
    cdb0:	10c00a16 	blt	r2,r3,cddc <_dtoa_r+0x16a4>
    cdb4:	d9000c17 	ldw	r4,48(sp)
    cdb8:	003e8306 	br	c7c8 <__alt_mem_Flash_flash_data+0xf400c7c8>
    cdbc:	04400084 	movi	r17,2
    cdc0:	003b7306 	br	bb90 <__alt_mem_Flash_flash_data+0xf400bb90>
    cdc4:	d9801217 	ldw	r6,72(sp)
    cdc8:	d9800515 	stw	r6,20(sp)
    cdcc:	003cb606 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>
    cdd0:	d9001217 	ldw	r4,72(sp)
    cdd4:	d9000515 	stw	r4,20(sp)
    cdd8:	003c0506 	br	bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    cddc:	d9800c17 	ldw	r6,48(sp)
    cde0:	d9800615 	stw	r6,24(sp)
    cde4:	003e8306 	br	c7f4 <__alt_mem_Flash_flash_data+0xf400c7f4>
    cde8:	d9800317 	ldw	r6,12(sp)
    cdec:	00800084 	movi	r2,2
    cdf0:	11800216 	blt	r2,r6,cdfc <_dtoa_r+0x16c4>
    cdf4:	d8800c17 	ldw	r2,48(sp)
    cdf8:	003da606 	br	c494 <__alt_mem_Flash_flash_data+0xf400c494>
    cdfc:	d8800c17 	ldw	r2,48(sp)
    ce00:	d8800615 	stw	r2,24(sp)
    ce04:	003e7b06 	br	c7f4 <__alt_mem_Flash_flash_data+0xf400c7f4>
    ce08:	05000044 	movi	r20,1
    ce0c:	003b0506 	br	ba24 <__alt_mem_Flash_flash_data+0xf400ba24>
    ce10:	8009883a 	mov	r4,r16
    ce14:	80001115 	stw	zero,68(r16)
    ce18:	000b883a 	mov	r5,zero
    ce1c:	000e4f00 	call	e4f0 <_Balloc>
    ce20:	d8800715 	stw	r2,28(sp)
    ce24:	d8c00717 	ldw	r3,28(sp)
    ce28:	00bfffc4 	movi	r2,-1
    ce2c:	01000044 	movi	r4,1
    ce30:	d8800c15 	stw	r2,48(sp)
    ce34:	80c01015 	stw	r3,64(r16)
    ce38:	d9000b15 	stw	r4,44(sp)
    ce3c:	d8800615 	stw	r2,24(sp)
    ce40:	d8002215 	stw	zero,136(sp)
    ce44:	003c1906 	br	beac <__alt_mem_Flash_flash_data+0xf400beac>
    ce48:	193d2926 	beq	r3,r4,c2f0 <__alt_mem_Flash_flash_data+0xf400c2f0>
    ce4c:	00c00f04 	movi	r3,60
    ce50:	1885c83a 	sub	r2,r3,r2
    ce54:	003d7b06 	br	c444 <__alt_mem_Flash_flash_data+0xf400c444>
    ce58:	000b883a 	mov	r5,zero
    ce5c:	003b1006 	br	baa0 <__alt_mem_Flash_flash_data+0xf400baa0>

0000ce60 <__sflush_r>:
    ce60:	2880030b 	ldhu	r2,12(r5)
    ce64:	defffb04 	addi	sp,sp,-20
    ce68:	dcc00315 	stw	r19,12(sp)
    ce6c:	dc400115 	stw	r17,4(sp)
    ce70:	dfc00415 	stw	ra,16(sp)
    ce74:	dc800215 	stw	r18,8(sp)
    ce78:	dc000015 	stw	r16,0(sp)
    ce7c:	10c0020c 	andi	r3,r2,8
    ce80:	2823883a 	mov	r17,r5
    ce84:	2027883a 	mov	r19,r4
    ce88:	1800311e 	bne	r3,zero,cf50 <__sflush_r+0xf0>
    ce8c:	28c00117 	ldw	r3,4(r5)
    ce90:	10820014 	ori	r2,r2,2048
    ce94:	2880030d 	sth	r2,12(r5)
    ce98:	00c04b0e 	bge	zero,r3,cfc8 <__sflush_r+0x168>
    ce9c:	8a000a17 	ldw	r8,40(r17)
    cea0:	40002326 	beq	r8,zero,cf30 <__sflush_r+0xd0>
    cea4:	9c000017 	ldw	r16,0(r19)
    cea8:	10c4000c 	andi	r3,r2,4096
    ceac:	98000015 	stw	zero,0(r19)
    ceb0:	18004826 	beq	r3,zero,cfd4 <__sflush_r+0x174>
    ceb4:	89801417 	ldw	r6,80(r17)
    ceb8:	10c0010c 	andi	r3,r2,4
    cebc:	18000626 	beq	r3,zero,ced8 <__sflush_r+0x78>
    cec0:	88c00117 	ldw	r3,4(r17)
    cec4:	88800c17 	ldw	r2,48(r17)
    cec8:	30cdc83a 	sub	r6,r6,r3
    cecc:	10000226 	beq	r2,zero,ced8 <__sflush_r+0x78>
    ced0:	88800f17 	ldw	r2,60(r17)
    ced4:	308dc83a 	sub	r6,r6,r2
    ced8:	89400717 	ldw	r5,28(r17)
    cedc:	9809883a 	mov	r4,r19
    cee0:	000f883a 	mov	r7,zero
    cee4:	403ee83a 	callr	r8
    cee8:	00ffffc4 	movi	r3,-1
    ceec:	10c04426 	beq	r2,r3,d000 <__sflush_r+0x1a0>
    cef0:	88c0030b 	ldhu	r3,12(r17)
    cef4:	89000417 	ldw	r4,16(r17)
    cef8:	88000115 	stw	zero,4(r17)
    cefc:	197dffcc 	andi	r5,r3,63487
    cf00:	8940030d 	sth	r5,12(r17)
    cf04:	89000015 	stw	r4,0(r17)
    cf08:	18c4000c 	andi	r3,r3,4096
    cf0c:	18002c1e 	bne	r3,zero,cfc0 <__sflush_r+0x160>
    cf10:	89400c17 	ldw	r5,48(r17)
    cf14:	9c000015 	stw	r16,0(r19)
    cf18:	28000526 	beq	r5,zero,cf30 <__sflush_r+0xd0>
    cf1c:	88801004 	addi	r2,r17,64
    cf20:	28800226 	beq	r5,r2,cf2c <__sflush_r+0xcc>
    cf24:	9809883a 	mov	r4,r19
    cf28:	000d5b80 	call	d5b8 <_free_r>
    cf2c:	88000c15 	stw	zero,48(r17)
    cf30:	0005883a 	mov	r2,zero
    cf34:	dfc00417 	ldw	ra,16(sp)
    cf38:	dcc00317 	ldw	r19,12(sp)
    cf3c:	dc800217 	ldw	r18,8(sp)
    cf40:	dc400117 	ldw	r17,4(sp)
    cf44:	dc000017 	ldw	r16,0(sp)
    cf48:	dec00504 	addi	sp,sp,20
    cf4c:	f800283a 	ret
    cf50:	2c800417 	ldw	r18,16(r5)
    cf54:	903ff626 	beq	r18,zero,cf30 <__alt_mem_Flash_flash_data+0xf400cf30>
    cf58:	2c000017 	ldw	r16,0(r5)
    cf5c:	108000cc 	andi	r2,r2,3
    cf60:	2c800015 	stw	r18,0(r5)
    cf64:	84a1c83a 	sub	r16,r16,r18
    cf68:	1000131e 	bne	r2,zero,cfb8 <__sflush_r+0x158>
    cf6c:	28800517 	ldw	r2,20(r5)
    cf70:	88800215 	stw	r2,8(r17)
    cf74:	04000316 	blt	zero,r16,cf84 <__sflush_r+0x124>
    cf78:	003fed06 	br	cf30 <__alt_mem_Flash_flash_data+0xf400cf30>
    cf7c:	90a5883a 	add	r18,r18,r2
    cf80:	043feb0e 	bge	zero,r16,cf30 <__alt_mem_Flash_flash_data+0xf400cf30>
    cf84:	88800917 	ldw	r2,36(r17)
    cf88:	89400717 	ldw	r5,28(r17)
    cf8c:	800f883a 	mov	r7,r16
    cf90:	900d883a 	mov	r6,r18
    cf94:	9809883a 	mov	r4,r19
    cf98:	103ee83a 	callr	r2
    cf9c:	80a1c83a 	sub	r16,r16,r2
    cfa0:	00bff616 	blt	zero,r2,cf7c <__alt_mem_Flash_flash_data+0xf400cf7c>
    cfa4:	88c0030b 	ldhu	r3,12(r17)
    cfa8:	00bfffc4 	movi	r2,-1
    cfac:	18c01014 	ori	r3,r3,64
    cfb0:	88c0030d 	sth	r3,12(r17)
    cfb4:	003fdf06 	br	cf34 <__alt_mem_Flash_flash_data+0xf400cf34>
    cfb8:	0005883a 	mov	r2,zero
    cfbc:	003fec06 	br	cf70 <__alt_mem_Flash_flash_data+0xf400cf70>
    cfc0:	88801415 	stw	r2,80(r17)
    cfc4:	003fd206 	br	cf10 <__alt_mem_Flash_flash_data+0xf400cf10>
    cfc8:	28c00f17 	ldw	r3,60(r5)
    cfcc:	00ffb316 	blt	zero,r3,ce9c <__alt_mem_Flash_flash_data+0xf400ce9c>
    cfd0:	003fd706 	br	cf30 <__alt_mem_Flash_flash_data+0xf400cf30>
    cfd4:	89400717 	ldw	r5,28(r17)
    cfd8:	000d883a 	mov	r6,zero
    cfdc:	9809883a 	mov	r4,r19
    cfe0:	01c00044 	movi	r7,1
    cfe4:	403ee83a 	callr	r8
    cfe8:	100d883a 	mov	r6,r2
    cfec:	00bfffc4 	movi	r2,-1
    cff0:	30801426 	beq	r6,r2,d044 <__sflush_r+0x1e4>
    cff4:	8880030b 	ldhu	r2,12(r17)
    cff8:	8a000a17 	ldw	r8,40(r17)
    cffc:	003fae06 	br	ceb8 <__alt_mem_Flash_flash_data+0xf400ceb8>
    d000:	98c00017 	ldw	r3,0(r19)
    d004:	183fba26 	beq	r3,zero,cef0 <__alt_mem_Flash_flash_data+0xf400cef0>
    d008:	01000744 	movi	r4,29
    d00c:	19000626 	beq	r3,r4,d028 <__sflush_r+0x1c8>
    d010:	01000584 	movi	r4,22
    d014:	19000426 	beq	r3,r4,d028 <__sflush_r+0x1c8>
    d018:	88c0030b 	ldhu	r3,12(r17)
    d01c:	18c01014 	ori	r3,r3,64
    d020:	88c0030d 	sth	r3,12(r17)
    d024:	003fc306 	br	cf34 <__alt_mem_Flash_flash_data+0xf400cf34>
    d028:	8880030b 	ldhu	r2,12(r17)
    d02c:	88c00417 	ldw	r3,16(r17)
    d030:	88000115 	stw	zero,4(r17)
    d034:	10bdffcc 	andi	r2,r2,63487
    d038:	8880030d 	sth	r2,12(r17)
    d03c:	88c00015 	stw	r3,0(r17)
    d040:	003fb306 	br	cf10 <__alt_mem_Flash_flash_data+0xf400cf10>
    d044:	98800017 	ldw	r2,0(r19)
    d048:	103fea26 	beq	r2,zero,cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d04c:	00c00744 	movi	r3,29
    d050:	10c00226 	beq	r2,r3,d05c <__sflush_r+0x1fc>
    d054:	00c00584 	movi	r3,22
    d058:	10ffd21e 	bne	r2,r3,cfa4 <__alt_mem_Flash_flash_data+0xf400cfa4>
    d05c:	9c000015 	stw	r16,0(r19)
    d060:	0005883a 	mov	r2,zero
    d064:	003fb306 	br	cf34 <__alt_mem_Flash_flash_data+0xf400cf34>

0000d068 <_fflush_r>:
    d068:	defffd04 	addi	sp,sp,-12
    d06c:	dc000115 	stw	r16,4(sp)
    d070:	dfc00215 	stw	ra,8(sp)
    d074:	2021883a 	mov	r16,r4
    d078:	20000226 	beq	r4,zero,d084 <_fflush_r+0x1c>
    d07c:	20800e17 	ldw	r2,56(r4)
    d080:	10000c26 	beq	r2,zero,d0b4 <_fflush_r+0x4c>
    d084:	2880030f 	ldh	r2,12(r5)
    d088:	1000051e 	bne	r2,zero,d0a0 <_fflush_r+0x38>
    d08c:	0005883a 	mov	r2,zero
    d090:	dfc00217 	ldw	ra,8(sp)
    d094:	dc000117 	ldw	r16,4(sp)
    d098:	dec00304 	addi	sp,sp,12
    d09c:	f800283a 	ret
    d0a0:	8009883a 	mov	r4,r16
    d0a4:	dfc00217 	ldw	ra,8(sp)
    d0a8:	dc000117 	ldw	r16,4(sp)
    d0ac:	dec00304 	addi	sp,sp,12
    d0b0:	000ce601 	jmpi	ce60 <__sflush_r>
    d0b4:	d9400015 	stw	r5,0(sp)
    d0b8:	000d4440 	call	d444 <__sinit>
    d0bc:	d9400017 	ldw	r5,0(sp)
    d0c0:	003ff006 	br	d084 <__alt_mem_Flash_flash_data+0xf400d084>

0000d0c4 <fflush>:
    d0c4:	20000526 	beq	r4,zero,d0dc <fflush+0x18>
    d0c8:	008000b4 	movhi	r2,2
    d0cc:	108be204 	addi	r2,r2,12168
    d0d0:	200b883a 	mov	r5,r4
    d0d4:	11000017 	ldw	r4,0(r2)
    d0d8:	000d0681 	jmpi	d068 <_fflush_r>
    d0dc:	008000b4 	movhi	r2,2
    d0e0:	108be104 	addi	r2,r2,12164
    d0e4:	11000017 	ldw	r4,0(r2)
    d0e8:	01400074 	movhi	r5,1
    d0ec:	29741a04 	addi	r5,r5,-12184
    d0f0:	000de2c1 	jmpi	de2c <_fwalk_reent>

0000d0f4 <__fp_lock>:
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	f800283a 	ret

0000d0fc <__fp_unlock>:
    d0fc:	0005883a 	mov	r2,zero
    d100:	f800283a 	ret

0000d104 <_cleanup_r>:
    d104:	01400074 	movhi	r5,1
    d108:	29492204 	addi	r5,r5,9352
    d10c:	000de2c1 	jmpi	de2c <_fwalk_reent>

0000d110 <__sinit.part.1>:
    d110:	defff704 	addi	sp,sp,-36
    d114:	00c00074 	movhi	r3,1
    d118:	dfc00815 	stw	ra,32(sp)
    d11c:	ddc00715 	stw	r23,28(sp)
    d120:	dd800615 	stw	r22,24(sp)
    d124:	dd400515 	stw	r21,20(sp)
    d128:	dd000415 	stw	r20,16(sp)
    d12c:	dcc00315 	stw	r19,12(sp)
    d130:	dc800215 	stw	r18,8(sp)
    d134:	dc400115 	stw	r17,4(sp)
    d138:	dc000015 	stw	r16,0(sp)
    d13c:	18f44104 	addi	r3,r3,-12028
    d140:	24000117 	ldw	r16,4(r4)
    d144:	20c00f15 	stw	r3,60(r4)
    d148:	2080bb04 	addi	r2,r4,748
    d14c:	00c000c4 	movi	r3,3
    d150:	20c0b915 	stw	r3,740(r4)
    d154:	2080ba15 	stw	r2,744(r4)
    d158:	2000b815 	stw	zero,736(r4)
    d15c:	05c00204 	movi	r23,8
    d160:	00800104 	movi	r2,4
    d164:	2025883a 	mov	r18,r4
    d168:	b80d883a 	mov	r6,r23
    d16c:	81001704 	addi	r4,r16,92
    d170:	000b883a 	mov	r5,zero
    d174:	80000015 	stw	zero,0(r16)
    d178:	80000115 	stw	zero,4(r16)
    d17c:	80000215 	stw	zero,8(r16)
    d180:	8080030d 	sth	r2,12(r16)
    d184:	80001915 	stw	zero,100(r16)
    d188:	8000038d 	sth	zero,14(r16)
    d18c:	80000415 	stw	zero,16(r16)
    d190:	80000515 	stw	zero,20(r16)
    d194:	80000615 	stw	zero,24(r16)
    d198:	000e3cc0 	call	e3cc <memset>
    d19c:	05800074 	movhi	r22,1
    d1a0:	94400217 	ldw	r17,8(r18)
    d1a4:	05400074 	movhi	r21,1
    d1a8:	05000074 	movhi	r20,1
    d1ac:	04c00074 	movhi	r19,1
    d1b0:	b5be9b04 	addi	r22,r22,-1428
    d1b4:	ad7eb204 	addi	r21,r21,-1336
    d1b8:	a53ed104 	addi	r20,r20,-1212
    d1bc:	9cfee804 	addi	r19,r19,-1120
    d1c0:	85800815 	stw	r22,32(r16)
    d1c4:	85400915 	stw	r21,36(r16)
    d1c8:	85000a15 	stw	r20,40(r16)
    d1cc:	84c00b15 	stw	r19,44(r16)
    d1d0:	84000715 	stw	r16,28(r16)
    d1d4:	00800284 	movi	r2,10
    d1d8:	8880030d 	sth	r2,12(r17)
    d1dc:	00800044 	movi	r2,1
    d1e0:	89001704 	addi	r4,r17,92
    d1e4:	b80d883a 	mov	r6,r23
    d1e8:	000b883a 	mov	r5,zero
    d1ec:	88000015 	stw	zero,0(r17)
    d1f0:	88000115 	stw	zero,4(r17)
    d1f4:	88000215 	stw	zero,8(r17)
    d1f8:	88001915 	stw	zero,100(r17)
    d1fc:	8880038d 	sth	r2,14(r17)
    d200:	88000415 	stw	zero,16(r17)
    d204:	88000515 	stw	zero,20(r17)
    d208:	88000615 	stw	zero,24(r17)
    d20c:	000e3cc0 	call	e3cc <memset>
    d210:	94000317 	ldw	r16,12(r18)
    d214:	00800484 	movi	r2,18
    d218:	8c400715 	stw	r17,28(r17)
    d21c:	8d800815 	stw	r22,32(r17)
    d220:	8d400915 	stw	r21,36(r17)
    d224:	8d000a15 	stw	r20,40(r17)
    d228:	8cc00b15 	stw	r19,44(r17)
    d22c:	8080030d 	sth	r2,12(r16)
    d230:	00800084 	movi	r2,2
    d234:	80000015 	stw	zero,0(r16)
    d238:	80000115 	stw	zero,4(r16)
    d23c:	80000215 	stw	zero,8(r16)
    d240:	80001915 	stw	zero,100(r16)
    d244:	8080038d 	sth	r2,14(r16)
    d248:	80000415 	stw	zero,16(r16)
    d24c:	80000515 	stw	zero,20(r16)
    d250:	80000615 	stw	zero,24(r16)
    d254:	81001704 	addi	r4,r16,92
    d258:	000b883a 	mov	r5,zero
    d25c:	b80d883a 	mov	r6,r23
    d260:	000e3cc0 	call	e3cc <memset>
    d264:	00800044 	movi	r2,1
    d268:	84000715 	stw	r16,28(r16)
    d26c:	85800815 	stw	r22,32(r16)
    d270:	85400915 	stw	r21,36(r16)
    d274:	85000a15 	stw	r20,40(r16)
    d278:	84c00b15 	stw	r19,44(r16)
    d27c:	90800e15 	stw	r2,56(r18)
    d280:	dfc00817 	ldw	ra,32(sp)
    d284:	ddc00717 	ldw	r23,28(sp)
    d288:	dd800617 	ldw	r22,24(sp)
    d28c:	dd400517 	ldw	r21,20(sp)
    d290:	dd000417 	ldw	r20,16(sp)
    d294:	dcc00317 	ldw	r19,12(sp)
    d298:	dc800217 	ldw	r18,8(sp)
    d29c:	dc400117 	ldw	r17,4(sp)
    d2a0:	dc000017 	ldw	r16,0(sp)
    d2a4:	dec00904 	addi	sp,sp,36
    d2a8:	f800283a 	ret

0000d2ac <__sfmoreglue>:
    d2ac:	defffc04 	addi	sp,sp,-16
    d2b0:	dc400115 	stw	r17,4(sp)
    d2b4:	2c7fffc4 	addi	r17,r5,-1
    d2b8:	8c401a24 	muli	r17,r17,104
    d2bc:	dc800215 	stw	r18,8(sp)
    d2c0:	2825883a 	mov	r18,r5
    d2c4:	89401d04 	addi	r5,r17,116
    d2c8:	dc000015 	stw	r16,0(sp)
    d2cc:	dfc00315 	stw	ra,12(sp)
    d2d0:	00068700 	call	6870 <_malloc_r>
    d2d4:	1021883a 	mov	r16,r2
    d2d8:	10000726 	beq	r2,zero,d2f8 <__sfmoreglue+0x4c>
    d2dc:	11000304 	addi	r4,r2,12
    d2e0:	10000015 	stw	zero,0(r2)
    d2e4:	14800115 	stw	r18,4(r2)
    d2e8:	11000215 	stw	r4,8(r2)
    d2ec:	000b883a 	mov	r5,zero
    d2f0:	89801a04 	addi	r6,r17,104
    d2f4:	000e3cc0 	call	e3cc <memset>
    d2f8:	8005883a 	mov	r2,r16
    d2fc:	dfc00317 	ldw	ra,12(sp)
    d300:	dc800217 	ldw	r18,8(sp)
    d304:	dc400117 	ldw	r17,4(sp)
    d308:	dc000017 	ldw	r16,0(sp)
    d30c:	dec00404 	addi	sp,sp,16
    d310:	f800283a 	ret

0000d314 <__sfp>:
    d314:	008000b4 	movhi	r2,2
    d318:	defffb04 	addi	sp,sp,-20
    d31c:	108be104 	addi	r2,r2,12164
    d320:	dc800215 	stw	r18,8(sp)
    d324:	14800017 	ldw	r18,0(r2)
    d328:	dcc00315 	stw	r19,12(sp)
    d32c:	dfc00415 	stw	ra,16(sp)
    d330:	90800e17 	ldw	r2,56(r18)
    d334:	dc400115 	stw	r17,4(sp)
    d338:	dc000015 	stw	r16,0(sp)
    d33c:	2027883a 	mov	r19,r4
    d340:	1000021e 	bne	r2,zero,d34c <__sfp+0x38>
    d344:	9009883a 	mov	r4,r18
    d348:	000d1100 	call	d110 <__sinit.part.1>
    d34c:	9480b804 	addi	r18,r18,736
    d350:	047fffc4 	movi	r17,-1
    d354:	91400117 	ldw	r5,4(r18)
    d358:	94000217 	ldw	r16,8(r18)
    d35c:	297fffc4 	addi	r5,r5,-1
    d360:	28000a16 	blt	r5,zero,d38c <__sfp+0x78>
    d364:	8080030f 	ldh	r2,12(r16)
    d368:	10000c26 	beq	r2,zero,d39c <__sfp+0x88>
    d36c:	80c01d04 	addi	r3,r16,116
    d370:	00000206 	br	d37c <__sfp+0x68>
    d374:	18bfe60f 	ldh	r2,-104(r3)
    d378:	10000826 	beq	r2,zero,d39c <__sfp+0x88>
    d37c:	297fffc4 	addi	r5,r5,-1
    d380:	1c3ffd04 	addi	r16,r3,-12
    d384:	18c01a04 	addi	r3,r3,104
    d388:	2c7ffa1e 	bne	r5,r17,d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d38c:	90800017 	ldw	r2,0(r18)
    d390:	10001d26 	beq	r2,zero,d408 <__sfp+0xf4>
    d394:	1025883a 	mov	r18,r2
    d398:	003fee06 	br	d354 <__alt_mem_Flash_flash_data+0xf400d354>
    d39c:	00bfffc4 	movi	r2,-1
    d3a0:	8080038d 	sth	r2,14(r16)
    d3a4:	00800044 	movi	r2,1
    d3a8:	8080030d 	sth	r2,12(r16)
    d3ac:	80001915 	stw	zero,100(r16)
    d3b0:	80000015 	stw	zero,0(r16)
    d3b4:	80000215 	stw	zero,8(r16)
    d3b8:	80000115 	stw	zero,4(r16)
    d3bc:	80000415 	stw	zero,16(r16)
    d3c0:	80000515 	stw	zero,20(r16)
    d3c4:	80000615 	stw	zero,24(r16)
    d3c8:	81001704 	addi	r4,r16,92
    d3cc:	000b883a 	mov	r5,zero
    d3d0:	01800204 	movi	r6,8
    d3d4:	000e3cc0 	call	e3cc <memset>
    d3d8:	8005883a 	mov	r2,r16
    d3dc:	80000c15 	stw	zero,48(r16)
    d3e0:	80000d15 	stw	zero,52(r16)
    d3e4:	80001115 	stw	zero,68(r16)
    d3e8:	80001215 	stw	zero,72(r16)
    d3ec:	dfc00417 	ldw	ra,16(sp)
    d3f0:	dcc00317 	ldw	r19,12(sp)
    d3f4:	dc800217 	ldw	r18,8(sp)
    d3f8:	dc400117 	ldw	r17,4(sp)
    d3fc:	dc000017 	ldw	r16,0(sp)
    d400:	dec00504 	addi	sp,sp,20
    d404:	f800283a 	ret
    d408:	9809883a 	mov	r4,r19
    d40c:	01400104 	movi	r5,4
    d410:	000d2ac0 	call	d2ac <__sfmoreglue>
    d414:	90800015 	stw	r2,0(r18)
    d418:	103fde1e 	bne	r2,zero,d394 <__alt_mem_Flash_flash_data+0xf400d394>
    d41c:	00800304 	movi	r2,12
    d420:	98800015 	stw	r2,0(r19)
    d424:	0005883a 	mov	r2,zero
    d428:	003ff006 	br	d3ec <__alt_mem_Flash_flash_data+0xf400d3ec>

0000d42c <_cleanup>:
    d42c:	008000b4 	movhi	r2,2
    d430:	108be104 	addi	r2,r2,12164
    d434:	11000017 	ldw	r4,0(r2)
    d438:	01400074 	movhi	r5,1
    d43c:	29492204 	addi	r5,r5,9352
    d440:	000de2c1 	jmpi	de2c <_fwalk_reent>

0000d444 <__sinit>:
    d444:	20800e17 	ldw	r2,56(r4)
    d448:	10000126 	beq	r2,zero,d450 <__sinit+0xc>
    d44c:	f800283a 	ret
    d450:	000d1101 	jmpi	d110 <__sinit.part.1>

0000d454 <__sfp_lock_acquire>:
    d454:	f800283a 	ret

0000d458 <__sfp_lock_release>:
    d458:	f800283a 	ret

0000d45c <__sinit_lock_acquire>:
    d45c:	f800283a 	ret

0000d460 <__sinit_lock_release>:
    d460:	f800283a 	ret

0000d464 <__fp_lock_all>:
    d464:	008000b4 	movhi	r2,2
    d468:	108be204 	addi	r2,r2,12168
    d46c:	11000017 	ldw	r4,0(r2)
    d470:	01400074 	movhi	r5,1
    d474:	29743d04 	addi	r5,r5,-12044
    d478:	000dd681 	jmpi	dd68 <_fwalk>

0000d47c <__fp_unlock_all>:
    d47c:	008000b4 	movhi	r2,2
    d480:	108be204 	addi	r2,r2,12168
    d484:	11000017 	ldw	r4,0(r2)
    d488:	01400074 	movhi	r5,1
    d48c:	29743f04 	addi	r5,r5,-12036
    d490:	000dd681 	jmpi	dd68 <_fwalk>

0000d494 <_malloc_trim_r>:
    d494:	defffb04 	addi	sp,sp,-20
    d498:	dcc00315 	stw	r19,12(sp)
    d49c:	04c000b4 	movhi	r19,2
    d4a0:	dc800215 	stw	r18,8(sp)
    d4a4:	dc400115 	stw	r17,4(sp)
    d4a8:	dc000015 	stw	r16,0(sp)
    d4ac:	dfc00415 	stw	ra,16(sp)
    d4b0:	2821883a 	mov	r16,r5
    d4b4:	9cc45004 	addi	r19,r19,4416
    d4b8:	2025883a 	mov	r18,r4
    d4bc:	0014c880 	call	14c88 <__malloc_lock>
    d4c0:	98800217 	ldw	r2,8(r19)
    d4c4:	14400117 	ldw	r17,4(r2)
    d4c8:	00bfff04 	movi	r2,-4
    d4cc:	88a2703a 	and	r17,r17,r2
    d4d0:	8c21c83a 	sub	r16,r17,r16
    d4d4:	8403fbc4 	addi	r16,r16,4079
    d4d8:	8020d33a 	srli	r16,r16,12
    d4dc:	0083ffc4 	movi	r2,4095
    d4e0:	843fffc4 	addi	r16,r16,-1
    d4e4:	8020933a 	slli	r16,r16,12
    d4e8:	1400060e 	bge	r2,r16,d504 <_malloc_trim_r+0x70>
    d4ec:	9009883a 	mov	r4,r18
    d4f0:	000b883a 	mov	r5,zero
    d4f4:	00072740 	call	7274 <_sbrk_r>
    d4f8:	98c00217 	ldw	r3,8(r19)
    d4fc:	1c47883a 	add	r3,r3,r17
    d500:	10c00a26 	beq	r2,r3,d52c <_malloc_trim_r+0x98>
    d504:	9009883a 	mov	r4,r18
    d508:	0014da80 	call	14da8 <__malloc_unlock>
    d50c:	0005883a 	mov	r2,zero
    d510:	dfc00417 	ldw	ra,16(sp)
    d514:	dcc00317 	ldw	r19,12(sp)
    d518:	dc800217 	ldw	r18,8(sp)
    d51c:	dc400117 	ldw	r17,4(sp)
    d520:	dc000017 	ldw	r16,0(sp)
    d524:	dec00504 	addi	sp,sp,20
    d528:	f800283a 	ret
    d52c:	9009883a 	mov	r4,r18
    d530:	040bc83a 	sub	r5,zero,r16
    d534:	00072740 	call	7274 <_sbrk_r>
    d538:	00ffffc4 	movi	r3,-1
    d53c:	10c00d26 	beq	r2,r3,d574 <_malloc_trim_r+0xe0>
    d540:	00c000b4 	movhi	r3,2
    d544:	18d3f704 	addi	r3,r3,20444
    d548:	18800017 	ldw	r2,0(r3)
    d54c:	99000217 	ldw	r4,8(r19)
    d550:	8c23c83a 	sub	r17,r17,r16
    d554:	8c400054 	ori	r17,r17,1
    d558:	1421c83a 	sub	r16,r2,r16
    d55c:	24400115 	stw	r17,4(r4)
    d560:	9009883a 	mov	r4,r18
    d564:	1c000015 	stw	r16,0(r3)
    d568:	0014da80 	call	14da8 <__malloc_unlock>
    d56c:	00800044 	movi	r2,1
    d570:	003fe706 	br	d510 <__alt_mem_Flash_flash_data+0xf400d510>
    d574:	9009883a 	mov	r4,r18
    d578:	000b883a 	mov	r5,zero
    d57c:	00072740 	call	7274 <_sbrk_r>
    d580:	99000217 	ldw	r4,8(r19)
    d584:	014003c4 	movi	r5,15
    d588:	1107c83a 	sub	r3,r2,r4
    d58c:	28ffdd0e 	bge	r5,r3,d504 <__alt_mem_Flash_flash_data+0xf400d504>
    d590:	014000b4 	movhi	r5,2
    d594:	294bdf04 	addi	r5,r5,12156
    d598:	29400017 	ldw	r5,0(r5)
    d59c:	18c00054 	ori	r3,r3,1
    d5a0:	20c00115 	stw	r3,4(r4)
    d5a4:	00c000b4 	movhi	r3,2
    d5a8:	1145c83a 	sub	r2,r2,r5
    d5ac:	18d3f704 	addi	r3,r3,20444
    d5b0:	18800015 	stw	r2,0(r3)
    d5b4:	003fd306 	br	d504 <__alt_mem_Flash_flash_data+0xf400d504>

0000d5b8 <_free_r>:
    d5b8:	28004c26 	beq	r5,zero,d6ec <_free_r+0x134>
    d5bc:	defffd04 	addi	sp,sp,-12
    d5c0:	dc400115 	stw	r17,4(sp)
    d5c4:	dc000015 	stw	r16,0(sp)
    d5c8:	2023883a 	mov	r17,r4
    d5cc:	2821883a 	mov	r16,r5
    d5d0:	dfc00215 	stw	ra,8(sp)
    d5d4:	0014c880 	call	14c88 <__malloc_lock>
    d5d8:	813fff17 	ldw	r4,-4(r16)
    d5dc:	00bfff84 	movi	r2,-2
    d5e0:	024000b4 	movhi	r9,2
    d5e4:	81bffe04 	addi	r6,r16,-8
    d5e8:	2084703a 	and	r2,r4,r2
    d5ec:	4a445004 	addi	r9,r9,4416
    d5f0:	308b883a 	add	r5,r6,r2
    d5f4:	2a000117 	ldw	r8,4(r5)
    d5f8:	49c00217 	ldw	r7,8(r9)
    d5fc:	00ffff04 	movi	r3,-4
    d600:	40c6703a 	and	r3,r8,r3
    d604:	39405326 	beq	r7,r5,d754 <_free_r+0x19c>
    d608:	28c00115 	stw	r3,4(r5)
    d60c:	2100004c 	andi	r4,r4,1
    d610:	2000091e 	bne	r4,zero,d638 <_free_r+0x80>
    d614:	81fffe17 	ldw	r7,-8(r16)
    d618:	4a000204 	addi	r8,r9,8
    d61c:	31cdc83a 	sub	r6,r6,r7
    d620:	31000217 	ldw	r4,8(r6)
    d624:	11c5883a 	add	r2,r2,r7
    d628:	22006126 	beq	r4,r8,d7b0 <_free_r+0x1f8>
    d62c:	31c00317 	ldw	r7,12(r6)
    d630:	21c00315 	stw	r7,12(r4)
    d634:	39000215 	stw	r4,8(r7)
    d638:	28c9883a 	add	r4,r5,r3
    d63c:	21c00117 	ldw	r7,4(r4)
    d640:	39c0004c 	andi	r7,r7,1
    d644:	38000d1e 	bne	r7,zero,d67c <_free_r+0xc4>
    d648:	29000217 	ldw	r4,8(r5)
    d64c:	10c5883a 	add	r2,r2,r3
    d650:	00c000b4 	movhi	r3,2
    d654:	18c45204 	addi	r3,r3,4424
    d658:	20c07526 	beq	r4,r3,d830 <_free_r+0x278>
    d65c:	29c00317 	ldw	r7,12(r5)
    d660:	11400054 	ori	r5,r2,1
    d664:	3087883a 	add	r3,r6,r2
    d668:	21c00315 	stw	r7,12(r4)
    d66c:	39000215 	stw	r4,8(r7)
    d670:	31400115 	stw	r5,4(r6)
    d674:	18800015 	stw	r2,0(r3)
    d678:	00000406 	br	d68c <_free_r+0xd4>
    d67c:	10c00054 	ori	r3,r2,1
    d680:	30c00115 	stw	r3,4(r6)
    d684:	3087883a 	add	r3,r6,r2
    d688:	18800015 	stw	r2,0(r3)
    d68c:	00c07fc4 	movi	r3,511
    d690:	18801736 	bltu	r3,r2,d6f0 <_free_r+0x138>
    d694:	1004d0fa 	srli	r2,r2,3
    d698:	01400044 	movi	r5,1
    d69c:	49000117 	ldw	r4,4(r9)
    d6a0:	1087883a 	add	r3,r2,r2
    d6a4:	18c7883a 	add	r3,r3,r3
    d6a8:	1005d0ba 	srai	r2,r2,2
    d6ac:	18c7883a 	add	r3,r3,r3
    d6b0:	1a47883a 	add	r3,r3,r9
    d6b4:	19c00217 	ldw	r7,8(r3)
    d6b8:	2884983a 	sll	r2,r5,r2
    d6bc:	30c00315 	stw	r3,12(r6)
    d6c0:	31c00215 	stw	r7,8(r6)
    d6c4:	1104b03a 	or	r2,r2,r4
    d6c8:	19800215 	stw	r6,8(r3)
    d6cc:	48800115 	stw	r2,4(r9)
    d6d0:	39800315 	stw	r6,12(r7)
    d6d4:	8809883a 	mov	r4,r17
    d6d8:	dfc00217 	ldw	ra,8(sp)
    d6dc:	dc400117 	ldw	r17,4(sp)
    d6e0:	dc000017 	ldw	r16,0(sp)
    d6e4:	dec00304 	addi	sp,sp,12
    d6e8:	0014da81 	jmpi	14da8 <__malloc_unlock>
    d6ec:	f800283a 	ret
    d6f0:	1006d27a 	srli	r3,r2,9
    d6f4:	01000104 	movi	r4,4
    d6f8:	20c04036 	bltu	r4,r3,d7fc <_free_r+0x244>
    d6fc:	1006d1ba 	srli	r3,r2,6
    d700:	19400e04 	addi	r5,r3,56
    d704:	2947883a 	add	r3,r5,r5
    d708:	18c7883a 	add	r3,r3,r3
    d70c:	18c7883a 	add	r3,r3,r3
    d710:	1a49883a 	add	r4,r3,r9
    d714:	20c00217 	ldw	r3,8(r4)
    d718:	01c000b4 	movhi	r7,2
    d71c:	39c45004 	addi	r7,r7,4416
    d720:	19003b26 	beq	r3,r4,d810 <_free_r+0x258>
    d724:	01ffff04 	movi	r7,-4
    d728:	19400117 	ldw	r5,4(r3)
    d72c:	29ca703a 	and	r5,r5,r7
    d730:	1140022e 	bgeu	r2,r5,d73c <_free_r+0x184>
    d734:	18c00217 	ldw	r3,8(r3)
    d738:	20fffb1e 	bne	r4,r3,d728 <__alt_mem_Flash_flash_data+0xf400d728>
    d73c:	18800317 	ldw	r2,12(r3)
    d740:	30800315 	stw	r2,12(r6)
    d744:	30c00215 	stw	r3,8(r6)
    d748:	11800215 	stw	r6,8(r2)
    d74c:	19800315 	stw	r6,12(r3)
    d750:	003fe006 	br	d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d754:	2100004c 	andi	r4,r4,1
    d758:	1885883a 	add	r2,r3,r2
    d75c:	2000071e 	bne	r4,zero,d77c <_free_r+0x1c4>
    d760:	817ffe17 	ldw	r5,-8(r16)
    d764:	314dc83a 	sub	r6,r6,r5
    d768:	30c00317 	ldw	r3,12(r6)
    d76c:	31000217 	ldw	r4,8(r6)
    d770:	1145883a 	add	r2,r2,r5
    d774:	20c00315 	stw	r3,12(r4)
    d778:	19000215 	stw	r4,8(r3)
    d77c:	10c00054 	ori	r3,r2,1
    d780:	30c00115 	stw	r3,4(r6)
    d784:	00c000b4 	movhi	r3,2
    d788:	18cbe004 	addi	r3,r3,12160
    d78c:	18c00017 	ldw	r3,0(r3)
    d790:	49800215 	stw	r6,8(r9)
    d794:	10ffcf36 	bltu	r2,r3,d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d798:	008000b4 	movhi	r2,2
    d79c:	1093d204 	addi	r2,r2,20296
    d7a0:	11400017 	ldw	r5,0(r2)
    d7a4:	8809883a 	mov	r4,r17
    d7a8:	000d4940 	call	d494 <_malloc_trim_r>
    d7ac:	003fc906 	br	d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d7b0:	28c9883a 	add	r4,r5,r3
    d7b4:	21000117 	ldw	r4,4(r4)
    d7b8:	2100004c 	andi	r4,r4,1
    d7bc:	20000a1e 	bne	r4,zero,d7e8 <_free_r+0x230>
    d7c0:	29000317 	ldw	r4,12(r5)
    d7c4:	29400217 	ldw	r5,8(r5)
    d7c8:	10c5883a 	add	r2,r2,r3
    d7cc:	10c00054 	ori	r3,r2,1
    d7d0:	29000315 	stw	r4,12(r5)
    d7d4:	21400215 	stw	r5,8(r4)
    d7d8:	30c00115 	stw	r3,4(r6)
    d7dc:	308d883a 	add	r6,r6,r2
    d7e0:	30800015 	stw	r2,0(r6)
    d7e4:	003fbb06 	br	d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d7e8:	10c00054 	ori	r3,r2,1
    d7ec:	30c00115 	stw	r3,4(r6)
    d7f0:	308d883a 	add	r6,r6,r2
    d7f4:	30800015 	stw	r2,0(r6)
    d7f8:	003fb606 	br	d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d7fc:	01000504 	movi	r4,20
    d800:	20c01436 	bltu	r4,r3,d854 <_free_r+0x29c>
    d804:	194016c4 	addi	r5,r3,91
    d808:	2947883a 	add	r3,r5,r5
    d80c:	003fbe06 	br	d708 <__alt_mem_Flash_flash_data+0xf400d708>
    d810:	280bd0ba 	srai	r5,r5,2
    d814:	00800044 	movi	r2,1
    d818:	39000117 	ldw	r4,4(r7)
    d81c:	114a983a 	sll	r5,r2,r5
    d820:	1805883a 	mov	r2,r3
    d824:	2908b03a 	or	r4,r5,r4
    d828:	39000115 	stw	r4,4(r7)
    d82c:	003fc406 	br	d740 <__alt_mem_Flash_flash_data+0xf400d740>
    d830:	49800515 	stw	r6,20(r9)
    d834:	49800415 	stw	r6,16(r9)
    d838:	10c00054 	ori	r3,r2,1
    d83c:	31000315 	stw	r4,12(r6)
    d840:	31000215 	stw	r4,8(r6)
    d844:	30c00115 	stw	r3,4(r6)
    d848:	308d883a 	add	r6,r6,r2
    d84c:	30800015 	stw	r2,0(r6)
    d850:	003fa006 	br	d6d4 <__alt_mem_Flash_flash_data+0xf400d6d4>
    d854:	01001504 	movi	r4,84
    d858:	20c00436 	bltu	r4,r3,d86c <_free_r+0x2b4>
    d85c:	1006d33a 	srli	r3,r2,12
    d860:	19401b84 	addi	r5,r3,110
    d864:	2947883a 	add	r3,r5,r5
    d868:	003fa706 	br	d708 <__alt_mem_Flash_flash_data+0xf400d708>
    d86c:	01005504 	movi	r4,340
    d870:	20c00436 	bltu	r4,r3,d884 <_free_r+0x2cc>
    d874:	1006d3fa 	srli	r3,r2,15
    d878:	19401dc4 	addi	r5,r3,119
    d87c:	2947883a 	add	r3,r5,r5
    d880:	003fa106 	br	d708 <__alt_mem_Flash_flash_data+0xf400d708>
    d884:	01015504 	movi	r4,1364
    d888:	20c00436 	bltu	r4,r3,d89c <_free_r+0x2e4>
    d88c:	1006d4ba 	srli	r3,r2,18
    d890:	19401f04 	addi	r5,r3,124
    d894:	2947883a 	add	r3,r5,r5
    d898:	003f9b06 	br	d708 <__alt_mem_Flash_flash_data+0xf400d708>
    d89c:	00c03f04 	movi	r3,252
    d8a0:	01401f84 	movi	r5,126
    d8a4:	003f9806 	br	d708 <__alt_mem_Flash_flash_data+0xf400d708>

0000d8a8 <__sfvwrite_r>:
    d8a8:	30800217 	ldw	r2,8(r6)
    d8ac:	10006726 	beq	r2,zero,da4c <__sfvwrite_r+0x1a4>
    d8b0:	defff404 	addi	sp,sp,-48
    d8b4:	dd000615 	stw	r20,24(sp)
    d8b8:	2029883a 	mov	r20,r4
    d8bc:	2900030b 	ldhu	r4,12(r5)
    d8c0:	ddc00915 	stw	r23,36(sp)
    d8c4:	dc000215 	stw	r16,8(sp)
    d8c8:	dfc00b15 	stw	ra,44(sp)
    d8cc:	df000a15 	stw	fp,40(sp)
    d8d0:	dd800815 	stw	r22,32(sp)
    d8d4:	dd400715 	stw	r21,28(sp)
    d8d8:	dcc00515 	stw	r19,20(sp)
    d8dc:	dc800415 	stw	r18,16(sp)
    d8e0:	dc400315 	stw	r17,12(sp)
    d8e4:	2080020c 	andi	r2,r4,8
    d8e8:	2821883a 	mov	r16,r5
    d8ec:	302f883a 	mov	r23,r6
    d8f0:	10002726 	beq	r2,zero,d990 <__sfvwrite_r+0xe8>
    d8f4:	28800417 	ldw	r2,16(r5)
    d8f8:	10002526 	beq	r2,zero,d990 <__sfvwrite_r+0xe8>
    d8fc:	2080008c 	andi	r2,r4,2
    d900:	bc400017 	ldw	r17,0(r23)
    d904:	10002a26 	beq	r2,zero,d9b0 <__sfvwrite_r+0x108>
    d908:	05600034 	movhi	r21,32768
    d90c:	0027883a 	mov	r19,zero
    d910:	0025883a 	mov	r18,zero
    d914:	ad7f0004 	addi	r21,r21,-1024
    d918:	980d883a 	mov	r6,r19
    d91c:	a009883a 	mov	r4,r20
    d920:	90004626 	beq	r18,zero,da3c <__sfvwrite_r+0x194>
    d924:	900f883a 	mov	r7,r18
    d928:	81400717 	ldw	r5,28(r16)
    d92c:	ac80022e 	bgeu	r21,r18,d938 <__sfvwrite_r+0x90>
    d930:	01e00034 	movhi	r7,32768
    d934:	39ff0004 	addi	r7,r7,-1024
    d938:	80800917 	ldw	r2,36(r16)
    d93c:	103ee83a 	callr	r2
    d940:	0080520e 	bge	zero,r2,da8c <__sfvwrite_r+0x1e4>
    d944:	b8c00217 	ldw	r3,8(r23)
    d948:	98a7883a 	add	r19,r19,r2
    d94c:	90a5c83a 	sub	r18,r18,r2
    d950:	1885c83a 	sub	r2,r3,r2
    d954:	b8800215 	stw	r2,8(r23)
    d958:	103fef1e 	bne	r2,zero,d918 <__alt_mem_Flash_flash_data+0xf400d918>
    d95c:	0005883a 	mov	r2,zero
    d960:	dfc00b17 	ldw	ra,44(sp)
    d964:	df000a17 	ldw	fp,40(sp)
    d968:	ddc00917 	ldw	r23,36(sp)
    d96c:	dd800817 	ldw	r22,32(sp)
    d970:	dd400717 	ldw	r21,28(sp)
    d974:	dd000617 	ldw	r20,24(sp)
    d978:	dcc00517 	ldw	r19,20(sp)
    d97c:	dc800417 	ldw	r18,16(sp)
    d980:	dc400317 	ldw	r17,12(sp)
    d984:	dc000217 	ldw	r16,8(sp)
    d988:	dec00c04 	addi	sp,sp,48
    d98c:	f800283a 	ret
    d990:	a009883a 	mov	r4,r20
    d994:	800b883a 	mov	r5,r16
    d998:	000b3e40 	call	b3e4 <__swsetup_r>
    d99c:	1000ec1e 	bne	r2,zero,dd50 <__sfvwrite_r+0x4a8>
    d9a0:	8100030b 	ldhu	r4,12(r16)
    d9a4:	bc400017 	ldw	r17,0(r23)
    d9a8:	2080008c 	andi	r2,r4,2
    d9ac:	103fd61e 	bne	r2,zero,d908 <__alt_mem_Flash_flash_data+0xf400d908>
    d9b0:	2080004c 	andi	r2,r4,1
    d9b4:	10003a1e 	bne	r2,zero,daa0 <__sfvwrite_r+0x1f8>
    d9b8:	0039883a 	mov	fp,zero
    d9bc:	0025883a 	mov	r18,zero
    d9c0:	90001a26 	beq	r18,zero,da2c <__sfvwrite_r+0x184>
    d9c4:	2080800c 	andi	r2,r4,512
    d9c8:	85800217 	ldw	r22,8(r16)
    d9cc:	10007626 	beq	r2,zero,dba8 <__sfvwrite_r+0x300>
    d9d0:	b027883a 	mov	r19,r22
    d9d4:	95809436 	bltu	r18,r22,dc28 <__sfvwrite_r+0x380>
    d9d8:	2081200c 	andi	r2,r4,1152
    d9dc:	10009f1e 	bne	r2,zero,dc5c <__sfvwrite_r+0x3b4>
    d9e0:	81000017 	ldw	r4,0(r16)
    d9e4:	e00b883a 	mov	r5,fp
    d9e8:	980d883a 	mov	r6,r19
    d9ec:	000e2700 	call	e270 <memmove>
    d9f0:	81000217 	ldw	r4,8(r16)
    d9f4:	81400017 	ldw	r5,0(r16)
    d9f8:	9005883a 	mov	r2,r18
    d9fc:	2587c83a 	sub	r3,r4,r22
    da00:	2ce7883a 	add	r19,r5,r19
    da04:	80c00215 	stw	r3,8(r16)
    da08:	84c00015 	stw	r19,0(r16)
    da0c:	b8c00217 	ldw	r3,8(r23)
    da10:	e0b9883a 	add	fp,fp,r2
    da14:	90a5c83a 	sub	r18,r18,r2
    da18:	1885c83a 	sub	r2,r3,r2
    da1c:	b8800215 	stw	r2,8(r23)
    da20:	103fce26 	beq	r2,zero,d95c <__alt_mem_Flash_flash_data+0xf400d95c>
    da24:	8100030b 	ldhu	r4,12(r16)
    da28:	903fe61e 	bne	r18,zero,d9c4 <__alt_mem_Flash_flash_data+0xf400d9c4>
    da2c:	8f000017 	ldw	fp,0(r17)
    da30:	8c800117 	ldw	r18,4(r17)
    da34:	8c400204 	addi	r17,r17,8
    da38:	003fe106 	br	d9c0 <__alt_mem_Flash_flash_data+0xf400d9c0>
    da3c:	8cc00017 	ldw	r19,0(r17)
    da40:	8c800117 	ldw	r18,4(r17)
    da44:	8c400204 	addi	r17,r17,8
    da48:	003fb306 	br	d918 <__alt_mem_Flash_flash_data+0xf400d918>
    da4c:	0005883a 	mov	r2,zero
    da50:	f800283a 	ret
    da54:	00a00034 	movhi	r2,32768
    da58:	10bfffc4 	addi	r2,r2,-1
    da5c:	9009883a 	mov	r4,r18
    da60:	1480012e 	bgeu	r2,r18,da68 <__sfvwrite_r+0x1c0>
    da64:	1009883a 	mov	r4,r2
    da68:	980b883a 	mov	r5,r19
    da6c:	00045a00 	call	45a0 <__divsi3>
    da70:	81400717 	ldw	r5,28(r16)
    da74:	80c00917 	ldw	r3,36(r16)
    da78:	988f383a 	mul	r7,r19,r2
    da7c:	a009883a 	mov	r4,r20
    da80:	e00d883a 	mov	r6,fp
    da84:	183ee83a 	callr	r3
    da88:	00bfe016 	blt	zero,r2,da0c <__alt_mem_Flash_flash_data+0xf400da0c>
    da8c:	8080030b 	ldhu	r2,12(r16)
    da90:	10801014 	ori	r2,r2,64
    da94:	8080030d 	sth	r2,12(r16)
    da98:	00bfffc4 	movi	r2,-1
    da9c:	003fb006 	br	d960 <__alt_mem_Flash_flash_data+0xf400d960>
    daa0:	0027883a 	mov	r19,zero
    daa4:	0011883a 	mov	r8,zero
    daa8:	0039883a 	mov	fp,zero
    daac:	0025883a 	mov	r18,zero
    dab0:	90001f26 	beq	r18,zero,db30 <__sfvwrite_r+0x288>
    dab4:	40006026 	beq	r8,zero,dc38 <__sfvwrite_r+0x390>
    dab8:	982b883a 	mov	r21,r19
    dabc:	94c0012e 	bgeu	r18,r19,dac4 <__sfvwrite_r+0x21c>
    dac0:	902b883a 	mov	r21,r18
    dac4:	81000017 	ldw	r4,0(r16)
    dac8:	80800417 	ldw	r2,16(r16)
    dacc:	a82d883a 	mov	r22,r21
    dad0:	81800217 	ldw	r6,8(r16)
    dad4:	81c00517 	ldw	r7,20(r16)
    dad8:	1100022e 	bgeu	r2,r4,dae4 <__sfvwrite_r+0x23c>
    dadc:	31c7883a 	add	r3,r6,r7
    dae0:	1d401816 	blt	r3,r21,db44 <__sfvwrite_r+0x29c>
    dae4:	a9c04416 	blt	r21,r7,dbf8 <__sfvwrite_r+0x350>
    dae8:	80800917 	ldw	r2,36(r16)
    daec:	81400717 	ldw	r5,28(r16)
    daf0:	a009883a 	mov	r4,r20
    daf4:	da000115 	stw	r8,4(sp)
    daf8:	e00d883a 	mov	r6,fp
    dafc:	103ee83a 	callr	r2
    db00:	102d883a 	mov	r22,r2
    db04:	da000117 	ldw	r8,4(sp)
    db08:	00bfe00e 	bge	zero,r2,da8c <__alt_mem_Flash_flash_data+0xf400da8c>
    db0c:	9da7c83a 	sub	r19,r19,r22
    db10:	98001f26 	beq	r19,zero,db90 <__sfvwrite_r+0x2e8>
    db14:	b8800217 	ldw	r2,8(r23)
    db18:	e5b9883a 	add	fp,fp,r22
    db1c:	95a5c83a 	sub	r18,r18,r22
    db20:	15adc83a 	sub	r22,r2,r22
    db24:	bd800215 	stw	r22,8(r23)
    db28:	b03f8c26 	beq	r22,zero,d95c <__alt_mem_Flash_flash_data+0xf400d95c>
    db2c:	903fe11e 	bne	r18,zero,dab4 <__alt_mem_Flash_flash_data+0xf400dab4>
    db30:	8f000017 	ldw	fp,0(r17)
    db34:	8c800117 	ldw	r18,4(r17)
    db38:	0011883a 	mov	r8,zero
    db3c:	8c400204 	addi	r17,r17,8
    db40:	003fdb06 	br	dab0 <__alt_mem_Flash_flash_data+0xf400dab0>
    db44:	180d883a 	mov	r6,r3
    db48:	e00b883a 	mov	r5,fp
    db4c:	da000115 	stw	r8,4(sp)
    db50:	d8c00015 	stw	r3,0(sp)
    db54:	000e2700 	call	e270 <memmove>
    db58:	d8c00017 	ldw	r3,0(sp)
    db5c:	80800017 	ldw	r2,0(r16)
    db60:	a009883a 	mov	r4,r20
    db64:	800b883a 	mov	r5,r16
    db68:	10c5883a 	add	r2,r2,r3
    db6c:	80800015 	stw	r2,0(r16)
    db70:	d8c00015 	stw	r3,0(sp)
    db74:	000d0680 	call	d068 <_fflush_r>
    db78:	d8c00017 	ldw	r3,0(sp)
    db7c:	da000117 	ldw	r8,4(sp)
    db80:	103fc21e 	bne	r2,zero,da8c <__alt_mem_Flash_flash_data+0xf400da8c>
    db84:	182d883a 	mov	r22,r3
    db88:	9da7c83a 	sub	r19,r19,r22
    db8c:	983fe11e 	bne	r19,zero,db14 <__alt_mem_Flash_flash_data+0xf400db14>
    db90:	a009883a 	mov	r4,r20
    db94:	800b883a 	mov	r5,r16
    db98:	000d0680 	call	d068 <_fflush_r>
    db9c:	103fbb1e 	bne	r2,zero,da8c <__alt_mem_Flash_flash_data+0xf400da8c>
    dba0:	0011883a 	mov	r8,zero
    dba4:	003fdb06 	br	db14 <__alt_mem_Flash_flash_data+0xf400db14>
    dba8:	81000017 	ldw	r4,0(r16)
    dbac:	80800417 	ldw	r2,16(r16)
    dbb0:	11000236 	bltu	r2,r4,dbbc <__sfvwrite_r+0x314>
    dbb4:	84c00517 	ldw	r19,20(r16)
    dbb8:	94ffa62e 	bgeu	r18,r19,da54 <__alt_mem_Flash_flash_data+0xf400da54>
    dbbc:	9027883a 	mov	r19,r18
    dbc0:	b480012e 	bgeu	r22,r18,dbc8 <__sfvwrite_r+0x320>
    dbc4:	b027883a 	mov	r19,r22
    dbc8:	e00b883a 	mov	r5,fp
    dbcc:	980d883a 	mov	r6,r19
    dbd0:	000e2700 	call	e270 <memmove>
    dbd4:	80800217 	ldw	r2,8(r16)
    dbd8:	80c00017 	ldw	r3,0(r16)
    dbdc:	14c5c83a 	sub	r2,r2,r19
    dbe0:	1cc7883a 	add	r3,r3,r19
    dbe4:	80800215 	stw	r2,8(r16)
    dbe8:	80c00015 	stw	r3,0(r16)
    dbec:	10004326 	beq	r2,zero,dcfc <__sfvwrite_r+0x454>
    dbf0:	9805883a 	mov	r2,r19
    dbf4:	003f8506 	br	da0c <__alt_mem_Flash_flash_data+0xf400da0c>
    dbf8:	a80d883a 	mov	r6,r21
    dbfc:	e00b883a 	mov	r5,fp
    dc00:	da000115 	stw	r8,4(sp)
    dc04:	000e2700 	call	e270 <memmove>
    dc08:	80800217 	ldw	r2,8(r16)
    dc0c:	80c00017 	ldw	r3,0(r16)
    dc10:	da000117 	ldw	r8,4(sp)
    dc14:	1545c83a 	sub	r2,r2,r21
    dc18:	1d6b883a 	add	r21,r3,r21
    dc1c:	80800215 	stw	r2,8(r16)
    dc20:	85400015 	stw	r21,0(r16)
    dc24:	003fb906 	br	db0c <__alt_mem_Flash_flash_data+0xf400db0c>
    dc28:	81000017 	ldw	r4,0(r16)
    dc2c:	902d883a 	mov	r22,r18
    dc30:	9027883a 	mov	r19,r18
    dc34:	003f6b06 	br	d9e4 <__alt_mem_Flash_flash_data+0xf400d9e4>
    dc38:	e009883a 	mov	r4,fp
    dc3c:	01400284 	movi	r5,10
    dc40:	900d883a 	mov	r6,r18
    dc44:	000e1880 	call	e188 <memchr>
    dc48:	10003e26 	beq	r2,zero,dd44 <__sfvwrite_r+0x49c>
    dc4c:	10800044 	addi	r2,r2,1
    dc50:	1727c83a 	sub	r19,r2,fp
    dc54:	02000044 	movi	r8,1
    dc58:	003f9706 	br	dab8 <__alt_mem_Flash_flash_data+0xf400dab8>
    dc5c:	80800517 	ldw	r2,20(r16)
    dc60:	81400417 	ldw	r5,16(r16)
    dc64:	80c00017 	ldw	r3,0(r16)
    dc68:	10a7883a 	add	r19,r2,r2
    dc6c:	9885883a 	add	r2,r19,r2
    dc70:	1026d7fa 	srli	r19,r2,31
    dc74:	196bc83a 	sub	r21,r3,r5
    dc78:	a9800044 	addi	r6,r21,1
    dc7c:	9885883a 	add	r2,r19,r2
    dc80:	1027d07a 	srai	r19,r2,1
    dc84:	3485883a 	add	r2,r6,r18
    dc88:	980d883a 	mov	r6,r19
    dc8c:	9880022e 	bgeu	r19,r2,dc98 <__sfvwrite_r+0x3f0>
    dc90:	1027883a 	mov	r19,r2
    dc94:	100d883a 	mov	r6,r2
    dc98:	2101000c 	andi	r4,r4,1024
    dc9c:	20001c26 	beq	r4,zero,dd10 <__sfvwrite_r+0x468>
    dca0:	a009883a 	mov	r4,r20
    dca4:	300b883a 	mov	r5,r6
    dca8:	00068700 	call	6870 <_malloc_r>
    dcac:	102d883a 	mov	r22,r2
    dcb0:	10002926 	beq	r2,zero,dd58 <__sfvwrite_r+0x4b0>
    dcb4:	81400417 	ldw	r5,16(r16)
    dcb8:	1009883a 	mov	r4,r2
    dcbc:	a80d883a 	mov	r6,r21
    dcc0:	00070180 	call	7018 <memcpy>
    dcc4:	8080030b 	ldhu	r2,12(r16)
    dcc8:	00fedfc4 	movi	r3,-1153
    dccc:	10c4703a 	and	r2,r2,r3
    dcd0:	10802014 	ori	r2,r2,128
    dcd4:	8080030d 	sth	r2,12(r16)
    dcd8:	b549883a 	add	r4,r22,r21
    dcdc:	9d4bc83a 	sub	r5,r19,r21
    dce0:	85800415 	stw	r22,16(r16)
    dce4:	84c00515 	stw	r19,20(r16)
    dce8:	81000015 	stw	r4,0(r16)
    dcec:	902d883a 	mov	r22,r18
    dcf0:	81400215 	stw	r5,8(r16)
    dcf4:	9027883a 	mov	r19,r18
    dcf8:	003f3a06 	br	d9e4 <__alt_mem_Flash_flash_data+0xf400d9e4>
    dcfc:	a009883a 	mov	r4,r20
    dd00:	800b883a 	mov	r5,r16
    dd04:	000d0680 	call	d068 <_fflush_r>
    dd08:	103fb926 	beq	r2,zero,dbf0 <__alt_mem_Flash_flash_data+0xf400dbf0>
    dd0c:	003f5f06 	br	da8c <__alt_mem_Flash_flash_data+0xf400da8c>
    dd10:	a009883a 	mov	r4,r20
    dd14:	000f4900 	call	f490 <_realloc_r>
    dd18:	102d883a 	mov	r22,r2
    dd1c:	103fee1e 	bne	r2,zero,dcd8 <__alt_mem_Flash_flash_data+0xf400dcd8>
    dd20:	81400417 	ldw	r5,16(r16)
    dd24:	a009883a 	mov	r4,r20
    dd28:	000d5b80 	call	d5b8 <_free_r>
    dd2c:	8080030b 	ldhu	r2,12(r16)
    dd30:	00ffdfc4 	movi	r3,-129
    dd34:	1884703a 	and	r2,r3,r2
    dd38:	00c00304 	movi	r3,12
    dd3c:	a0c00015 	stw	r3,0(r20)
    dd40:	003f5306 	br	da90 <__alt_mem_Flash_flash_data+0xf400da90>
    dd44:	94c00044 	addi	r19,r18,1
    dd48:	02000044 	movi	r8,1
    dd4c:	003f5a06 	br	dab8 <__alt_mem_Flash_flash_data+0xf400dab8>
    dd50:	00bfffc4 	movi	r2,-1
    dd54:	003f0206 	br	d960 <__alt_mem_Flash_flash_data+0xf400d960>
    dd58:	00800304 	movi	r2,12
    dd5c:	a0800015 	stw	r2,0(r20)
    dd60:	8080030b 	ldhu	r2,12(r16)
    dd64:	003f4a06 	br	da90 <__alt_mem_Flash_flash_data+0xf400da90>

0000dd68 <_fwalk>:
    dd68:	defff704 	addi	sp,sp,-36
    dd6c:	dd000415 	stw	r20,16(sp)
    dd70:	dfc00815 	stw	ra,32(sp)
    dd74:	ddc00715 	stw	r23,28(sp)
    dd78:	dd800615 	stw	r22,24(sp)
    dd7c:	dd400515 	stw	r21,20(sp)
    dd80:	dcc00315 	stw	r19,12(sp)
    dd84:	dc800215 	stw	r18,8(sp)
    dd88:	dc400115 	stw	r17,4(sp)
    dd8c:	dc000015 	stw	r16,0(sp)
    dd90:	2500b804 	addi	r20,r4,736
    dd94:	a0002326 	beq	r20,zero,de24 <_fwalk+0xbc>
    dd98:	282b883a 	mov	r21,r5
    dd9c:	002f883a 	mov	r23,zero
    dda0:	05800044 	movi	r22,1
    dda4:	04ffffc4 	movi	r19,-1
    dda8:	a4400117 	ldw	r17,4(r20)
    ddac:	a4800217 	ldw	r18,8(r20)
    ddb0:	8c7fffc4 	addi	r17,r17,-1
    ddb4:	88000d16 	blt	r17,zero,ddec <_fwalk+0x84>
    ddb8:	94000304 	addi	r16,r18,12
    ddbc:	94800384 	addi	r18,r18,14
    ddc0:	80c0000b 	ldhu	r3,0(r16)
    ddc4:	8c7fffc4 	addi	r17,r17,-1
    ddc8:	813ffd04 	addi	r4,r16,-12
    ddcc:	b0c0042e 	bgeu	r22,r3,dde0 <_fwalk+0x78>
    ddd0:	90c0000f 	ldh	r3,0(r18)
    ddd4:	1cc00226 	beq	r3,r19,dde0 <_fwalk+0x78>
    ddd8:	a83ee83a 	callr	r21
    dddc:	b8aeb03a 	or	r23,r23,r2
    dde0:	84001a04 	addi	r16,r16,104
    dde4:	94801a04 	addi	r18,r18,104
    dde8:	8cfff51e 	bne	r17,r19,ddc0 <__alt_mem_Flash_flash_data+0xf400ddc0>
    ddec:	a5000017 	ldw	r20,0(r20)
    ddf0:	a03fed1e 	bne	r20,zero,dda8 <__alt_mem_Flash_flash_data+0xf400dda8>
    ddf4:	b805883a 	mov	r2,r23
    ddf8:	dfc00817 	ldw	ra,32(sp)
    ddfc:	ddc00717 	ldw	r23,28(sp)
    de00:	dd800617 	ldw	r22,24(sp)
    de04:	dd400517 	ldw	r21,20(sp)
    de08:	dd000417 	ldw	r20,16(sp)
    de0c:	dcc00317 	ldw	r19,12(sp)
    de10:	dc800217 	ldw	r18,8(sp)
    de14:	dc400117 	ldw	r17,4(sp)
    de18:	dc000017 	ldw	r16,0(sp)
    de1c:	dec00904 	addi	sp,sp,36
    de20:	f800283a 	ret
    de24:	002f883a 	mov	r23,zero
    de28:	003ff206 	br	ddf4 <__alt_mem_Flash_flash_data+0xf400ddf4>

0000de2c <_fwalk_reent>:
    de2c:	defff704 	addi	sp,sp,-36
    de30:	dd400515 	stw	r21,20(sp)
    de34:	dfc00815 	stw	ra,32(sp)
    de38:	ddc00715 	stw	r23,28(sp)
    de3c:	dd800615 	stw	r22,24(sp)
    de40:	dd000415 	stw	r20,16(sp)
    de44:	dcc00315 	stw	r19,12(sp)
    de48:	dc800215 	stw	r18,8(sp)
    de4c:	dc400115 	stw	r17,4(sp)
    de50:	dc000015 	stw	r16,0(sp)
    de54:	2540b804 	addi	r21,r4,736
    de58:	a8002326 	beq	r21,zero,dee8 <_fwalk_reent+0xbc>
    de5c:	2829883a 	mov	r20,r5
    de60:	202d883a 	mov	r22,r4
    de64:	002f883a 	mov	r23,zero
    de68:	04c00044 	movi	r19,1
    de6c:	04bfffc4 	movi	r18,-1
    de70:	ac400117 	ldw	r17,4(r21)
    de74:	ac000217 	ldw	r16,8(r21)
    de78:	8c7fffc4 	addi	r17,r17,-1
    de7c:	88000c16 	blt	r17,zero,deb0 <_fwalk_reent+0x84>
    de80:	84000304 	addi	r16,r16,12
    de84:	80c0000b 	ldhu	r3,0(r16)
    de88:	8c7fffc4 	addi	r17,r17,-1
    de8c:	817ffd04 	addi	r5,r16,-12
    de90:	98c0052e 	bgeu	r19,r3,dea8 <_fwalk_reent+0x7c>
    de94:	80c0008f 	ldh	r3,2(r16)
    de98:	b009883a 	mov	r4,r22
    de9c:	1c800226 	beq	r3,r18,dea8 <_fwalk_reent+0x7c>
    dea0:	a03ee83a 	callr	r20
    dea4:	b8aeb03a 	or	r23,r23,r2
    dea8:	84001a04 	addi	r16,r16,104
    deac:	8cbff51e 	bne	r17,r18,de84 <__alt_mem_Flash_flash_data+0xf400de84>
    deb0:	ad400017 	ldw	r21,0(r21)
    deb4:	a83fee1e 	bne	r21,zero,de70 <__alt_mem_Flash_flash_data+0xf400de70>
    deb8:	b805883a 	mov	r2,r23
    debc:	dfc00817 	ldw	ra,32(sp)
    dec0:	ddc00717 	ldw	r23,28(sp)
    dec4:	dd800617 	ldw	r22,24(sp)
    dec8:	dd400517 	ldw	r21,20(sp)
    decc:	dd000417 	ldw	r20,16(sp)
    ded0:	dcc00317 	ldw	r19,12(sp)
    ded4:	dc800217 	ldw	r18,8(sp)
    ded8:	dc400117 	ldw	r17,4(sp)
    dedc:	dc000017 	ldw	r16,0(sp)
    dee0:	dec00904 	addi	sp,sp,36
    dee4:	f800283a 	ret
    dee8:	002f883a 	mov	r23,zero
    deec:	003ff206 	br	deb8 <__alt_mem_Flash_flash_data+0xf400deb8>

0000def0 <_setlocale_r>:
    def0:	30001b26 	beq	r6,zero,df60 <_setlocale_r+0x70>
    def4:	014000b4 	movhi	r5,2
    def8:	defffe04 	addi	sp,sp,-8
    defc:	29433904 	addi	r5,r5,3300
    df00:	3009883a 	mov	r4,r6
    df04:	dc000015 	stw	r16,0(sp)
    df08:	dfc00115 	stw	ra,4(sp)
    df0c:	3021883a 	mov	r16,r6
    df10:	000fba80 	call	fba8 <strcmp>
    df14:	1000061e 	bne	r2,zero,df30 <_setlocale_r+0x40>
    df18:	008000b4 	movhi	r2,2
    df1c:	10833804 	addi	r2,r2,3296
    df20:	dfc00117 	ldw	ra,4(sp)
    df24:	dc000017 	ldw	r16,0(sp)
    df28:	dec00204 	addi	sp,sp,8
    df2c:	f800283a 	ret
    df30:	014000b4 	movhi	r5,2
    df34:	29433804 	addi	r5,r5,3296
    df38:	8009883a 	mov	r4,r16
    df3c:	000fba80 	call	fba8 <strcmp>
    df40:	103ff526 	beq	r2,zero,df18 <__alt_mem_Flash_flash_data+0xf400df18>
    df44:	014000b4 	movhi	r5,2
    df48:	29431b04 	addi	r5,r5,3180
    df4c:	8009883a 	mov	r4,r16
    df50:	000fba80 	call	fba8 <strcmp>
    df54:	103ff026 	beq	r2,zero,df18 <__alt_mem_Flash_flash_data+0xf400df18>
    df58:	0005883a 	mov	r2,zero
    df5c:	003ff006 	br	df20 <__alt_mem_Flash_flash_data+0xf400df20>
    df60:	008000b4 	movhi	r2,2
    df64:	10833804 	addi	r2,r2,3296
    df68:	f800283a 	ret

0000df6c <__locale_charset>:
    df6c:	008000b4 	movhi	r2,2
    df70:	10866304 	addi	r2,r2,6540
    df74:	f800283a 	ret

0000df78 <__locale_mb_cur_max>:
    df78:	008000b4 	movhi	r2,2
    df7c:	108be304 	addi	r2,r2,12172
    df80:	10800017 	ldw	r2,0(r2)
    df84:	f800283a 	ret

0000df88 <__locale_msgcharset>:
    df88:	008000b4 	movhi	r2,2
    df8c:	10865b04 	addi	r2,r2,6508
    df90:	f800283a 	ret

0000df94 <__locale_cjk_lang>:
    df94:	0005883a 	mov	r2,zero
    df98:	f800283a 	ret

0000df9c <_localeconv_r>:
    df9c:	008000b4 	movhi	r2,2
    dfa0:	10866b04 	addi	r2,r2,6572
    dfa4:	f800283a 	ret

0000dfa8 <setlocale>:
    dfa8:	00c000b4 	movhi	r3,2
    dfac:	18cbe204 	addi	r3,r3,12168
    dfb0:	2005883a 	mov	r2,r4
    dfb4:	19000017 	ldw	r4,0(r3)
    dfb8:	280d883a 	mov	r6,r5
    dfbc:	100b883a 	mov	r5,r2
    dfc0:	000def01 	jmpi	def0 <_setlocale_r>

0000dfc4 <localeconv>:
    dfc4:	008000b4 	movhi	r2,2
    dfc8:	10866b04 	addi	r2,r2,6572
    dfcc:	f800283a 	ret

0000dfd0 <__smakebuf_r>:
    dfd0:	2880030b 	ldhu	r2,12(r5)
    dfd4:	10c0008c 	andi	r3,r2,2
    dfd8:	1800401e 	bne	r3,zero,e0dc <__smakebuf_r+0x10c>
    dfdc:	deffec04 	addi	sp,sp,-80
    dfe0:	dc000f15 	stw	r16,60(sp)
    dfe4:	2821883a 	mov	r16,r5
    dfe8:	2940038f 	ldh	r5,14(r5)
    dfec:	dc401015 	stw	r17,64(sp)
    dff0:	dfc01315 	stw	ra,76(sp)
    dff4:	dcc01215 	stw	r19,72(sp)
    dff8:	dc801115 	stw	r18,68(sp)
    dffc:	2023883a 	mov	r17,r4
    e000:	28001b16 	blt	r5,zero,e070 <__smakebuf_r+0xa0>
    e004:	d80d883a 	mov	r6,sp
    e008:	001276c0 	call	1276c <_fstat_r>
    e00c:	10001716 	blt	r2,zero,e06c <__smakebuf_r+0x9c>
    e010:	d8800117 	ldw	r2,4(sp)
    e014:	00e00014 	movui	r3,32768
    e018:	10bc000c 	andi	r2,r2,61440
    e01c:	10c03726 	beq	r2,r3,e0fc <__smakebuf_r+0x12c>
    e020:	80c0030b 	ldhu	r3,12(r16)
    e024:	18c20014 	ori	r3,r3,2048
    e028:	80c0030d 	sth	r3,12(r16)
    e02c:	00c80004 	movi	r3,8192
    e030:	10c03c1e 	bne	r2,r3,e124 <__smakebuf_r+0x154>
    e034:	8140038f 	ldh	r5,14(r16)
    e038:	8809883a 	mov	r4,r17
    e03c:	00127c40 	call	127c4 <_isatty_r>
    e040:	10004e26 	beq	r2,zero,e17c <__smakebuf_r+0x1ac>
    e044:	8080030b 	ldhu	r2,12(r16)
    e048:	04c00044 	movi	r19,1
    e04c:	80c010c4 	addi	r3,r16,67
    e050:	14c4b03a 	or	r2,r2,r19
    e054:	8080030d 	sth	r2,12(r16)
    e058:	80c00015 	stw	r3,0(r16)
    e05c:	80c00415 	stw	r3,16(r16)
    e060:	84c00515 	stw	r19,20(r16)
    e064:	04810004 	movi	r18,1024
    e068:	00000706 	br	e088 <__smakebuf_r+0xb8>
    e06c:	8080030b 	ldhu	r2,12(r16)
    e070:	10c0200c 	andi	r3,r2,128
    e074:	18001f1e 	bne	r3,zero,e0f4 <__smakebuf_r+0x124>
    e078:	04810004 	movi	r18,1024
    e07c:	10820014 	ori	r2,r2,2048
    e080:	8080030d 	sth	r2,12(r16)
    e084:	0027883a 	mov	r19,zero
    e088:	8809883a 	mov	r4,r17
    e08c:	900b883a 	mov	r5,r18
    e090:	00068700 	call	6870 <_malloc_r>
    e094:	10002e26 	beq	r2,zero,e150 <__smakebuf_r+0x180>
    e098:	80c0030b 	ldhu	r3,12(r16)
    e09c:	01000074 	movhi	r4,1
    e0a0:	21344104 	addi	r4,r4,-12028
    e0a4:	89000f15 	stw	r4,60(r17)
    e0a8:	18c02014 	ori	r3,r3,128
    e0ac:	80c0030d 	sth	r3,12(r16)
    e0b0:	80800015 	stw	r2,0(r16)
    e0b4:	80800415 	stw	r2,16(r16)
    e0b8:	84800515 	stw	r18,20(r16)
    e0bc:	98001c1e 	bne	r19,zero,e130 <__smakebuf_r+0x160>
    e0c0:	dfc01317 	ldw	ra,76(sp)
    e0c4:	dcc01217 	ldw	r19,72(sp)
    e0c8:	dc801117 	ldw	r18,68(sp)
    e0cc:	dc401017 	ldw	r17,64(sp)
    e0d0:	dc000f17 	ldw	r16,60(sp)
    e0d4:	dec01404 	addi	sp,sp,80
    e0d8:	f800283a 	ret
    e0dc:	288010c4 	addi	r2,r5,67
    e0e0:	28800015 	stw	r2,0(r5)
    e0e4:	28800415 	stw	r2,16(r5)
    e0e8:	00800044 	movi	r2,1
    e0ec:	28800515 	stw	r2,20(r5)
    e0f0:	f800283a 	ret
    e0f4:	04801004 	movi	r18,64
    e0f8:	003fe006 	br	e07c <__alt_mem_Flash_flash_data+0xf400e07c>
    e0fc:	81000a17 	ldw	r4,40(r16)
    e100:	00c00074 	movhi	r3,1
    e104:	18fed104 	addi	r3,r3,-1212
    e108:	20ffc51e 	bne	r4,r3,e020 <__alt_mem_Flash_flash_data+0xf400e020>
    e10c:	80c0030b 	ldhu	r3,12(r16)
    e110:	01010004 	movi	r4,1024
    e114:	81001315 	stw	r4,76(r16)
    e118:	1906b03a 	or	r3,r3,r4
    e11c:	80c0030d 	sth	r3,12(r16)
    e120:	003fc206 	br	e02c <__alt_mem_Flash_flash_data+0xf400e02c>
    e124:	0027883a 	mov	r19,zero
    e128:	04810004 	movi	r18,1024
    e12c:	003fd606 	br	e088 <__alt_mem_Flash_flash_data+0xf400e088>
    e130:	8140038f 	ldh	r5,14(r16)
    e134:	8809883a 	mov	r4,r17
    e138:	00127c40 	call	127c4 <_isatty_r>
    e13c:	103fe026 	beq	r2,zero,e0c0 <__alt_mem_Flash_flash_data+0xf400e0c0>
    e140:	8080030b 	ldhu	r2,12(r16)
    e144:	10800054 	ori	r2,r2,1
    e148:	8080030d 	sth	r2,12(r16)
    e14c:	003fdc06 	br	e0c0 <__alt_mem_Flash_flash_data+0xf400e0c0>
    e150:	8080030b 	ldhu	r2,12(r16)
    e154:	10c0800c 	andi	r3,r2,512
    e158:	183fd91e 	bne	r3,zero,e0c0 <__alt_mem_Flash_flash_data+0xf400e0c0>
    e15c:	10800094 	ori	r2,r2,2
    e160:	80c010c4 	addi	r3,r16,67
    e164:	8080030d 	sth	r2,12(r16)
    e168:	00800044 	movi	r2,1
    e16c:	80c00015 	stw	r3,0(r16)
    e170:	80c00415 	stw	r3,16(r16)
    e174:	80800515 	stw	r2,20(r16)
    e178:	003fd106 	br	e0c0 <__alt_mem_Flash_flash_data+0xf400e0c0>
    e17c:	04c00044 	movi	r19,1
    e180:	04810004 	movi	r18,1024
    e184:	003fc006 	br	e088 <__alt_mem_Flash_flash_data+0xf400e088>

0000e188 <memchr>:
    e188:	208000cc 	andi	r2,r4,3
    e18c:	280f883a 	mov	r7,r5
    e190:	10003526 	beq	r2,zero,e268 <memchr+0xe0>
    e194:	30bfffc4 	addi	r2,r6,-1
    e198:	30001b26 	beq	r6,zero,e208 <memchr+0x80>
    e19c:	21800003 	ldbu	r6,0(r4)
    e1a0:	28c03fcc 	andi	r3,r5,255
    e1a4:	30c01a26 	beq	r6,r3,e210 <memchr+0x88>
    e1a8:	180d883a 	mov	r6,r3
    e1ac:	00000406 	br	e1c0 <memchr+0x38>
    e1b0:	10001526 	beq	r2,zero,e208 <memchr+0x80>
    e1b4:	20c00003 	ldbu	r3,0(r4)
    e1b8:	10bfffc4 	addi	r2,r2,-1
    e1bc:	19801426 	beq	r3,r6,e210 <memchr+0x88>
    e1c0:	21000044 	addi	r4,r4,1
    e1c4:	20c000cc 	andi	r3,r4,3
    e1c8:	183ff91e 	bne	r3,zero,e1b0 <__alt_mem_Flash_flash_data+0xf400e1b0>
    e1cc:	024000c4 	movi	r9,3
    e1d0:	48801136 	bltu	r9,r2,e218 <memchr+0x90>
    e1d4:	10000c26 	beq	r2,zero,e208 <memchr+0x80>
    e1d8:	20c00003 	ldbu	r3,0(r4)
    e1dc:	29403fcc 	andi	r5,r5,255
    e1e0:	19400b26 	beq	r3,r5,e210 <memchr+0x88>
    e1e4:	20c00044 	addi	r3,r4,1
    e1e8:	2085883a 	add	r2,r4,r2
    e1ec:	39803fcc 	andi	r6,r7,255
    e1f0:	00000306 	br	e200 <memchr+0x78>
    e1f4:	18c00044 	addi	r3,r3,1
    e1f8:	197fffc3 	ldbu	r5,-1(r3)
    e1fc:	29800426 	beq	r5,r6,e210 <memchr+0x88>
    e200:	1809883a 	mov	r4,r3
    e204:	18bffb1e 	bne	r3,r2,e1f4 <__alt_mem_Flash_flash_data+0xf400e1f4>
    e208:	0005883a 	mov	r2,zero
    e20c:	f800283a 	ret
    e210:	2005883a 	mov	r2,r4
    e214:	f800283a 	ret
    e218:	28c03fcc 	andi	r3,r5,255
    e21c:	1810923a 	slli	r8,r3,8
    e220:	02ffbff4 	movhi	r11,65279
    e224:	02a02074 	movhi	r10,32897
    e228:	40c6b03a 	or	r3,r8,r3
    e22c:	1810943a 	slli	r8,r3,16
    e230:	5affbfc4 	addi	r11,r11,-257
    e234:	52a02004 	addi	r10,r10,-32640
    e238:	40d0b03a 	or	r8,r8,r3
    e23c:	20c00017 	ldw	r3,0(r4)
    e240:	40c6f03a 	xor	r3,r8,r3
    e244:	1acd883a 	add	r6,r3,r11
    e248:	00c6303a 	nor	r3,zero,r3
    e24c:	30c6703a 	and	r3,r6,r3
    e250:	1a86703a 	and	r3,r3,r10
    e254:	183fdf1e 	bne	r3,zero,e1d4 <__alt_mem_Flash_flash_data+0xf400e1d4>
    e258:	10bfff04 	addi	r2,r2,-4
    e25c:	21000104 	addi	r4,r4,4
    e260:	48bff636 	bltu	r9,r2,e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e264:	003fdb06 	br	e1d4 <__alt_mem_Flash_flash_data+0xf400e1d4>
    e268:	3005883a 	mov	r2,r6
    e26c:	003fd706 	br	e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>

0000e270 <memmove>:
    e270:	2005883a 	mov	r2,r4
    e274:	29000b2e 	bgeu	r5,r4,e2a4 <memmove+0x34>
    e278:	298f883a 	add	r7,r5,r6
    e27c:	21c0092e 	bgeu	r4,r7,e2a4 <memmove+0x34>
    e280:	2187883a 	add	r3,r4,r6
    e284:	198bc83a 	sub	r5,r3,r6
    e288:	30004b26 	beq	r6,zero,e3b8 <memmove+0x148>
    e28c:	39ffffc4 	addi	r7,r7,-1
    e290:	39000003 	ldbu	r4,0(r7)
    e294:	18ffffc4 	addi	r3,r3,-1
    e298:	19000005 	stb	r4,0(r3)
    e29c:	197ffb1e 	bne	r3,r5,e28c <__alt_mem_Flash_flash_data+0xf400e28c>
    e2a0:	f800283a 	ret
    e2a4:	00c003c4 	movi	r3,15
    e2a8:	1980412e 	bgeu	r3,r6,e3b0 <memmove+0x140>
    e2ac:	1146b03a 	or	r3,r2,r5
    e2b0:	18c000cc 	andi	r3,r3,3
    e2b4:	1800411e 	bne	r3,zero,e3bc <memmove+0x14c>
    e2b8:	33fffc04 	addi	r15,r6,-16
    e2bc:	781ed13a 	srli	r15,r15,4
    e2c0:	28c00104 	addi	r3,r5,4
    e2c4:	13400104 	addi	r13,r2,4
    e2c8:	781c913a 	slli	r14,r15,4
    e2cc:	2b000204 	addi	r12,r5,8
    e2d0:	12c00204 	addi	r11,r2,8
    e2d4:	73800504 	addi	r14,r14,20
    e2d8:	2a800304 	addi	r10,r5,12
    e2dc:	12400304 	addi	r9,r2,12
    e2e0:	2b9d883a 	add	r14,r5,r14
    e2e4:	2811883a 	mov	r8,r5
    e2e8:	100f883a 	mov	r7,r2
    e2ec:	41000017 	ldw	r4,0(r8)
    e2f0:	39c00404 	addi	r7,r7,16
    e2f4:	18c00404 	addi	r3,r3,16
    e2f8:	393ffc15 	stw	r4,-16(r7)
    e2fc:	193ffc17 	ldw	r4,-16(r3)
    e300:	6b400404 	addi	r13,r13,16
    e304:	5ac00404 	addi	r11,r11,16
    e308:	693ffc15 	stw	r4,-16(r13)
    e30c:	61000017 	ldw	r4,0(r12)
    e310:	4a400404 	addi	r9,r9,16
    e314:	42000404 	addi	r8,r8,16
    e318:	593ffc15 	stw	r4,-16(r11)
    e31c:	51000017 	ldw	r4,0(r10)
    e320:	63000404 	addi	r12,r12,16
    e324:	52800404 	addi	r10,r10,16
    e328:	493ffc15 	stw	r4,-16(r9)
    e32c:	1bbfef1e 	bne	r3,r14,e2ec <__alt_mem_Flash_flash_data+0xf400e2ec>
    e330:	79000044 	addi	r4,r15,1
    e334:	2008913a 	slli	r4,r4,4
    e338:	328003cc 	andi	r10,r6,15
    e33c:	02c000c4 	movi	r11,3
    e340:	1107883a 	add	r3,r2,r4
    e344:	290b883a 	add	r5,r5,r4
    e348:	5a801e2e 	bgeu	r11,r10,e3c4 <memmove+0x154>
    e34c:	1813883a 	mov	r9,r3
    e350:	2811883a 	mov	r8,r5
    e354:	500f883a 	mov	r7,r10
    e358:	41000017 	ldw	r4,0(r8)
    e35c:	4a400104 	addi	r9,r9,4
    e360:	39ffff04 	addi	r7,r7,-4
    e364:	493fff15 	stw	r4,-4(r9)
    e368:	42000104 	addi	r8,r8,4
    e36c:	59fffa36 	bltu	r11,r7,e358 <__alt_mem_Flash_flash_data+0xf400e358>
    e370:	513fff04 	addi	r4,r10,-4
    e374:	2008d0ba 	srli	r4,r4,2
    e378:	318000cc 	andi	r6,r6,3
    e37c:	21000044 	addi	r4,r4,1
    e380:	2109883a 	add	r4,r4,r4
    e384:	2109883a 	add	r4,r4,r4
    e388:	1907883a 	add	r3,r3,r4
    e38c:	290b883a 	add	r5,r5,r4
    e390:	30000926 	beq	r6,zero,e3b8 <memmove+0x148>
    e394:	198d883a 	add	r6,r3,r6
    e398:	29c00003 	ldbu	r7,0(r5)
    e39c:	18c00044 	addi	r3,r3,1
    e3a0:	29400044 	addi	r5,r5,1
    e3a4:	19ffffc5 	stb	r7,-1(r3)
    e3a8:	19bffb1e 	bne	r3,r6,e398 <__alt_mem_Flash_flash_data+0xf400e398>
    e3ac:	f800283a 	ret
    e3b0:	1007883a 	mov	r3,r2
    e3b4:	003ff606 	br	e390 <__alt_mem_Flash_flash_data+0xf400e390>
    e3b8:	f800283a 	ret
    e3bc:	1007883a 	mov	r3,r2
    e3c0:	003ff406 	br	e394 <__alt_mem_Flash_flash_data+0xf400e394>
    e3c4:	500d883a 	mov	r6,r10
    e3c8:	003ff106 	br	e390 <__alt_mem_Flash_flash_data+0xf400e390>

0000e3cc <memset>:
    e3cc:	20c000cc 	andi	r3,r4,3
    e3d0:	2005883a 	mov	r2,r4
    e3d4:	18004326 	beq	r3,zero,e4e4 <memset+0x118>
    e3d8:	31ffffc4 	addi	r7,r6,-1
    e3dc:	30004026 	beq	r6,zero,e4e0 <memset+0x114>
    e3e0:	2813883a 	mov	r9,r5
    e3e4:	200d883a 	mov	r6,r4
    e3e8:	2007883a 	mov	r3,r4
    e3ec:	00000406 	br	e400 <memset+0x34>
    e3f0:	3a3fffc4 	addi	r8,r7,-1
    e3f4:	31800044 	addi	r6,r6,1
    e3f8:	38003926 	beq	r7,zero,e4e0 <memset+0x114>
    e3fc:	400f883a 	mov	r7,r8
    e400:	18c00044 	addi	r3,r3,1
    e404:	32400005 	stb	r9,0(r6)
    e408:	1a0000cc 	andi	r8,r3,3
    e40c:	403ff81e 	bne	r8,zero,e3f0 <__alt_mem_Flash_flash_data+0xf400e3f0>
    e410:	010000c4 	movi	r4,3
    e414:	21c02d2e 	bgeu	r4,r7,e4cc <memset+0x100>
    e418:	29803fcc 	andi	r6,r5,255
    e41c:	3008923a 	slli	r4,r6,8
    e420:	218cb03a 	or	r6,r4,r6
    e424:	3008943a 	slli	r4,r6,16
    e428:	218cb03a 	or	r6,r4,r6
    e42c:	010003c4 	movi	r4,15
    e430:	21c0182e 	bgeu	r4,r7,e494 <memset+0xc8>
    e434:	3b3ffc04 	addi	r12,r7,-16
    e438:	6018d13a 	srli	r12,r12,4
    e43c:	1a000104 	addi	r8,r3,4
    e440:	1ac00204 	addi	r11,r3,8
    e444:	6008913a 	slli	r4,r12,4
    e448:	1a800304 	addi	r10,r3,12
    e44c:	1813883a 	mov	r9,r3
    e450:	21000504 	addi	r4,r4,20
    e454:	1909883a 	add	r4,r3,r4
    e458:	49800015 	stw	r6,0(r9)
    e45c:	41800015 	stw	r6,0(r8)
    e460:	59800015 	stw	r6,0(r11)
    e464:	51800015 	stw	r6,0(r10)
    e468:	42000404 	addi	r8,r8,16
    e46c:	4a400404 	addi	r9,r9,16
    e470:	5ac00404 	addi	r11,r11,16
    e474:	52800404 	addi	r10,r10,16
    e478:	413ff71e 	bne	r8,r4,e458 <__alt_mem_Flash_flash_data+0xf400e458>
    e47c:	63000044 	addi	r12,r12,1
    e480:	6018913a 	slli	r12,r12,4
    e484:	39c003cc 	andi	r7,r7,15
    e488:	010000c4 	movi	r4,3
    e48c:	1b07883a 	add	r3,r3,r12
    e490:	21c00e2e 	bgeu	r4,r7,e4cc <memset+0x100>
    e494:	1813883a 	mov	r9,r3
    e498:	3811883a 	mov	r8,r7
    e49c:	010000c4 	movi	r4,3
    e4a0:	49800015 	stw	r6,0(r9)
    e4a4:	423fff04 	addi	r8,r8,-4
    e4a8:	4a400104 	addi	r9,r9,4
    e4ac:	223ffc36 	bltu	r4,r8,e4a0 <__alt_mem_Flash_flash_data+0xf400e4a0>
    e4b0:	393fff04 	addi	r4,r7,-4
    e4b4:	2008d0ba 	srli	r4,r4,2
    e4b8:	39c000cc 	andi	r7,r7,3
    e4bc:	21000044 	addi	r4,r4,1
    e4c0:	2109883a 	add	r4,r4,r4
    e4c4:	2109883a 	add	r4,r4,r4
    e4c8:	1907883a 	add	r3,r3,r4
    e4cc:	38000426 	beq	r7,zero,e4e0 <memset+0x114>
    e4d0:	19cf883a 	add	r7,r3,r7
    e4d4:	19400005 	stb	r5,0(r3)
    e4d8:	18c00044 	addi	r3,r3,1
    e4dc:	19fffd1e 	bne	r3,r7,e4d4 <__alt_mem_Flash_flash_data+0xf400e4d4>
    e4e0:	f800283a 	ret
    e4e4:	2007883a 	mov	r3,r4
    e4e8:	300f883a 	mov	r7,r6
    e4ec:	003fc806 	br	e410 <__alt_mem_Flash_flash_data+0xf400e410>

0000e4f0 <_Balloc>:
    e4f0:	20801317 	ldw	r2,76(r4)
    e4f4:	defffc04 	addi	sp,sp,-16
    e4f8:	dc400115 	stw	r17,4(sp)
    e4fc:	dc000015 	stw	r16,0(sp)
    e500:	dfc00315 	stw	ra,12(sp)
    e504:	dc800215 	stw	r18,8(sp)
    e508:	2023883a 	mov	r17,r4
    e50c:	2821883a 	mov	r16,r5
    e510:	10000f26 	beq	r2,zero,e550 <_Balloc+0x60>
    e514:	8407883a 	add	r3,r16,r16
    e518:	18c7883a 	add	r3,r3,r3
    e51c:	10c7883a 	add	r3,r2,r3
    e520:	18800017 	ldw	r2,0(r3)
    e524:	10001126 	beq	r2,zero,e56c <_Balloc+0x7c>
    e528:	11000017 	ldw	r4,0(r2)
    e52c:	19000015 	stw	r4,0(r3)
    e530:	10000415 	stw	zero,16(r2)
    e534:	10000315 	stw	zero,12(r2)
    e538:	dfc00317 	ldw	ra,12(sp)
    e53c:	dc800217 	ldw	r18,8(sp)
    e540:	dc400117 	ldw	r17,4(sp)
    e544:	dc000017 	ldw	r16,0(sp)
    e548:	dec00404 	addi	sp,sp,16
    e54c:	f800283a 	ret
    e550:	01400104 	movi	r5,4
    e554:	01800844 	movi	r6,33
    e558:	00123c40 	call	123c4 <_calloc_r>
    e55c:	88801315 	stw	r2,76(r17)
    e560:	103fec1e 	bne	r2,zero,e514 <__alt_mem_Flash_flash_data+0xf400e514>
    e564:	0005883a 	mov	r2,zero
    e568:	003ff306 	br	e538 <__alt_mem_Flash_flash_data+0xf400e538>
    e56c:	01400044 	movi	r5,1
    e570:	2c24983a 	sll	r18,r5,r16
    e574:	8809883a 	mov	r4,r17
    e578:	91800144 	addi	r6,r18,5
    e57c:	318d883a 	add	r6,r6,r6
    e580:	318d883a 	add	r6,r6,r6
    e584:	00123c40 	call	123c4 <_calloc_r>
    e588:	103ff626 	beq	r2,zero,e564 <__alt_mem_Flash_flash_data+0xf400e564>
    e58c:	14000115 	stw	r16,4(r2)
    e590:	14800215 	stw	r18,8(r2)
    e594:	003fe606 	br	e530 <__alt_mem_Flash_flash_data+0xf400e530>

0000e598 <_Bfree>:
    e598:	28000826 	beq	r5,zero,e5bc <_Bfree+0x24>
    e59c:	28c00117 	ldw	r3,4(r5)
    e5a0:	20801317 	ldw	r2,76(r4)
    e5a4:	18c7883a 	add	r3,r3,r3
    e5a8:	18c7883a 	add	r3,r3,r3
    e5ac:	10c5883a 	add	r2,r2,r3
    e5b0:	10c00017 	ldw	r3,0(r2)
    e5b4:	28c00015 	stw	r3,0(r5)
    e5b8:	11400015 	stw	r5,0(r2)
    e5bc:	f800283a 	ret

0000e5c0 <__multadd>:
    e5c0:	defffa04 	addi	sp,sp,-24
    e5c4:	dc000115 	stw	r16,4(sp)
    e5c8:	2c000417 	ldw	r16,16(r5)
    e5cc:	dc800315 	stw	r18,12(sp)
    e5d0:	dc400215 	stw	r17,8(sp)
    e5d4:	dfc00515 	stw	ra,20(sp)
    e5d8:	dcc00415 	stw	r19,16(sp)
    e5dc:	2823883a 	mov	r17,r5
    e5e0:	2025883a 	mov	r18,r4
    e5e4:	2a400504 	addi	r9,r5,20
    e5e8:	0015883a 	mov	r10,zero
    e5ec:	4a000017 	ldw	r8,0(r9)
    e5f0:	4a400104 	addi	r9,r9,4
    e5f4:	52800044 	addi	r10,r10,1
    e5f8:	40ffffcc 	andi	r3,r8,65535
    e5fc:	1987383a 	mul	r3,r3,r6
    e600:	4010d43a 	srli	r8,r8,16
    e604:	19cf883a 	add	r7,r3,r7
    e608:	4191383a 	mul	r8,r8,r6
    e60c:	3816d43a 	srli	r11,r7,16
    e610:	38ffffcc 	andi	r3,r7,65535
    e614:	5a0f883a 	add	r7,r11,r8
    e618:	3810943a 	slli	r8,r7,16
    e61c:	380ed43a 	srli	r7,r7,16
    e620:	40c7883a 	add	r3,r8,r3
    e624:	48ffff15 	stw	r3,-4(r9)
    e628:	543ff016 	blt	r10,r16,e5ec <__alt_mem_Flash_flash_data+0xf400e5ec>
    e62c:	38000926 	beq	r7,zero,e654 <__multadd+0x94>
    e630:	88800217 	ldw	r2,8(r17)
    e634:	80800f0e 	bge	r16,r2,e674 <__multadd+0xb4>
    e638:	80800144 	addi	r2,r16,5
    e63c:	1085883a 	add	r2,r2,r2
    e640:	1085883a 	add	r2,r2,r2
    e644:	8885883a 	add	r2,r17,r2
    e648:	11c00015 	stw	r7,0(r2)
    e64c:	84000044 	addi	r16,r16,1
    e650:	8c000415 	stw	r16,16(r17)
    e654:	8805883a 	mov	r2,r17
    e658:	dfc00517 	ldw	ra,20(sp)
    e65c:	dcc00417 	ldw	r19,16(sp)
    e660:	dc800317 	ldw	r18,12(sp)
    e664:	dc400217 	ldw	r17,8(sp)
    e668:	dc000117 	ldw	r16,4(sp)
    e66c:	dec00604 	addi	sp,sp,24
    e670:	f800283a 	ret
    e674:	89400117 	ldw	r5,4(r17)
    e678:	9009883a 	mov	r4,r18
    e67c:	d9c00015 	stw	r7,0(sp)
    e680:	29400044 	addi	r5,r5,1
    e684:	000e4f00 	call	e4f0 <_Balloc>
    e688:	89800417 	ldw	r6,16(r17)
    e68c:	11000304 	addi	r4,r2,12
    e690:	89400304 	addi	r5,r17,12
    e694:	31800084 	addi	r6,r6,2
    e698:	318d883a 	add	r6,r6,r6
    e69c:	318d883a 	add	r6,r6,r6
    e6a0:	1027883a 	mov	r19,r2
    e6a4:	00070180 	call	7018 <memcpy>
    e6a8:	d9c00017 	ldw	r7,0(sp)
    e6ac:	88000a26 	beq	r17,zero,e6d8 <__multadd+0x118>
    e6b0:	89000117 	ldw	r4,4(r17)
    e6b4:	90c01317 	ldw	r3,76(r18)
    e6b8:	2109883a 	add	r4,r4,r4
    e6bc:	2109883a 	add	r4,r4,r4
    e6c0:	1907883a 	add	r3,r3,r4
    e6c4:	18800017 	ldw	r2,0(r3)
    e6c8:	88800015 	stw	r2,0(r17)
    e6cc:	1c400015 	stw	r17,0(r3)
    e6d0:	9823883a 	mov	r17,r19
    e6d4:	003fd806 	br	e638 <__alt_mem_Flash_flash_data+0xf400e638>
    e6d8:	9823883a 	mov	r17,r19
    e6dc:	003fd606 	br	e638 <__alt_mem_Flash_flash_data+0xf400e638>

0000e6e0 <__s2b>:
    e6e0:	defff904 	addi	sp,sp,-28
    e6e4:	dc400115 	stw	r17,4(sp)
    e6e8:	dc000015 	stw	r16,0(sp)
    e6ec:	2023883a 	mov	r17,r4
    e6f0:	2821883a 	mov	r16,r5
    e6f4:	39000204 	addi	r4,r7,8
    e6f8:	01400244 	movi	r5,9
    e6fc:	dcc00315 	stw	r19,12(sp)
    e700:	dc800215 	stw	r18,8(sp)
    e704:	dfc00615 	stw	ra,24(sp)
    e708:	dd400515 	stw	r21,20(sp)
    e70c:	dd000415 	stw	r20,16(sp)
    e710:	3825883a 	mov	r18,r7
    e714:	3027883a 	mov	r19,r6
    e718:	00045a00 	call	45a0 <__divsi3>
    e71c:	00c00044 	movi	r3,1
    e720:	000b883a 	mov	r5,zero
    e724:	1880030e 	bge	r3,r2,e734 <__s2b+0x54>
    e728:	18c7883a 	add	r3,r3,r3
    e72c:	29400044 	addi	r5,r5,1
    e730:	18bffd16 	blt	r3,r2,e728 <__alt_mem_Flash_flash_data+0xf400e728>
    e734:	8809883a 	mov	r4,r17
    e738:	000e4f00 	call	e4f0 <_Balloc>
    e73c:	d8c00717 	ldw	r3,28(sp)
    e740:	10c00515 	stw	r3,20(r2)
    e744:	00c00044 	movi	r3,1
    e748:	10c00415 	stw	r3,16(r2)
    e74c:	00c00244 	movi	r3,9
    e750:	1cc0210e 	bge	r3,r19,e7d8 <__s2b+0xf8>
    e754:	80eb883a 	add	r21,r16,r3
    e758:	a829883a 	mov	r20,r21
    e75c:	84e1883a 	add	r16,r16,r19
    e760:	a1c00007 	ldb	r7,0(r20)
    e764:	8809883a 	mov	r4,r17
    e768:	a5000044 	addi	r20,r20,1
    e76c:	100b883a 	mov	r5,r2
    e770:	01800284 	movi	r6,10
    e774:	39fff404 	addi	r7,r7,-48
    e778:	000e5c00 	call	e5c0 <__multadd>
    e77c:	a43ff81e 	bne	r20,r16,e760 <__alt_mem_Flash_flash_data+0xf400e760>
    e780:	ace1883a 	add	r16,r21,r19
    e784:	843ffe04 	addi	r16,r16,-8
    e788:	9c800a0e 	bge	r19,r18,e7b4 <__s2b+0xd4>
    e78c:	94e5c83a 	sub	r18,r18,r19
    e790:	84a5883a 	add	r18,r16,r18
    e794:	81c00007 	ldb	r7,0(r16)
    e798:	8809883a 	mov	r4,r17
    e79c:	84000044 	addi	r16,r16,1
    e7a0:	100b883a 	mov	r5,r2
    e7a4:	01800284 	movi	r6,10
    e7a8:	39fff404 	addi	r7,r7,-48
    e7ac:	000e5c00 	call	e5c0 <__multadd>
    e7b0:	84bff81e 	bne	r16,r18,e794 <__alt_mem_Flash_flash_data+0xf400e794>
    e7b4:	dfc00617 	ldw	ra,24(sp)
    e7b8:	dd400517 	ldw	r21,20(sp)
    e7bc:	dd000417 	ldw	r20,16(sp)
    e7c0:	dcc00317 	ldw	r19,12(sp)
    e7c4:	dc800217 	ldw	r18,8(sp)
    e7c8:	dc400117 	ldw	r17,4(sp)
    e7cc:	dc000017 	ldw	r16,0(sp)
    e7d0:	dec00704 	addi	sp,sp,28
    e7d4:	f800283a 	ret
    e7d8:	84000284 	addi	r16,r16,10
    e7dc:	1827883a 	mov	r19,r3
    e7e0:	003fe906 	br	e788 <__alt_mem_Flash_flash_data+0xf400e788>

0000e7e4 <__hi0bits>:
    e7e4:	20bfffec 	andhi	r2,r4,65535
    e7e8:	1000141e 	bne	r2,zero,e83c <__hi0bits+0x58>
    e7ec:	2008943a 	slli	r4,r4,16
    e7f0:	00800404 	movi	r2,16
    e7f4:	20ffc02c 	andhi	r3,r4,65280
    e7f8:	1800021e 	bne	r3,zero,e804 <__hi0bits+0x20>
    e7fc:	2008923a 	slli	r4,r4,8
    e800:	10800204 	addi	r2,r2,8
    e804:	20fc002c 	andhi	r3,r4,61440
    e808:	1800021e 	bne	r3,zero,e814 <__hi0bits+0x30>
    e80c:	2008913a 	slli	r4,r4,4
    e810:	10800104 	addi	r2,r2,4
    e814:	20f0002c 	andhi	r3,r4,49152
    e818:	1800031e 	bne	r3,zero,e828 <__hi0bits+0x44>
    e81c:	2109883a 	add	r4,r4,r4
    e820:	10800084 	addi	r2,r2,2
    e824:	2109883a 	add	r4,r4,r4
    e828:	20000316 	blt	r4,zero,e838 <__hi0bits+0x54>
    e82c:	2110002c 	andhi	r4,r4,16384
    e830:	2000041e 	bne	r4,zero,e844 <__hi0bits+0x60>
    e834:	00800804 	movi	r2,32
    e838:	f800283a 	ret
    e83c:	0005883a 	mov	r2,zero
    e840:	003fec06 	br	e7f4 <__alt_mem_Flash_flash_data+0xf400e7f4>
    e844:	10800044 	addi	r2,r2,1
    e848:	f800283a 	ret

0000e84c <__lo0bits>:
    e84c:	20c00017 	ldw	r3,0(r4)
    e850:	188001cc 	andi	r2,r3,7
    e854:	10000826 	beq	r2,zero,e878 <__lo0bits+0x2c>
    e858:	1880004c 	andi	r2,r3,1
    e85c:	1000211e 	bne	r2,zero,e8e4 <__lo0bits+0x98>
    e860:	1880008c 	andi	r2,r3,2
    e864:	1000211e 	bne	r2,zero,e8ec <__lo0bits+0xa0>
    e868:	1806d0ba 	srli	r3,r3,2
    e86c:	00800084 	movi	r2,2
    e870:	20c00015 	stw	r3,0(r4)
    e874:	f800283a 	ret
    e878:	18bfffcc 	andi	r2,r3,65535
    e87c:	10001326 	beq	r2,zero,e8cc <__lo0bits+0x80>
    e880:	0005883a 	mov	r2,zero
    e884:	19403fcc 	andi	r5,r3,255
    e888:	2800021e 	bne	r5,zero,e894 <__lo0bits+0x48>
    e88c:	1806d23a 	srli	r3,r3,8
    e890:	10800204 	addi	r2,r2,8
    e894:	194003cc 	andi	r5,r3,15
    e898:	2800021e 	bne	r5,zero,e8a4 <__lo0bits+0x58>
    e89c:	1806d13a 	srli	r3,r3,4
    e8a0:	10800104 	addi	r2,r2,4
    e8a4:	194000cc 	andi	r5,r3,3
    e8a8:	2800021e 	bne	r5,zero,e8b4 <__lo0bits+0x68>
    e8ac:	1806d0ba 	srli	r3,r3,2
    e8b0:	10800084 	addi	r2,r2,2
    e8b4:	1940004c 	andi	r5,r3,1
    e8b8:	2800081e 	bne	r5,zero,e8dc <__lo0bits+0x90>
    e8bc:	1806d07a 	srli	r3,r3,1
    e8c0:	1800051e 	bne	r3,zero,e8d8 <__lo0bits+0x8c>
    e8c4:	00800804 	movi	r2,32
    e8c8:	f800283a 	ret
    e8cc:	1806d43a 	srli	r3,r3,16
    e8d0:	00800404 	movi	r2,16
    e8d4:	003feb06 	br	e884 <__alt_mem_Flash_flash_data+0xf400e884>
    e8d8:	10800044 	addi	r2,r2,1
    e8dc:	20c00015 	stw	r3,0(r4)
    e8e0:	f800283a 	ret
    e8e4:	0005883a 	mov	r2,zero
    e8e8:	f800283a 	ret
    e8ec:	1806d07a 	srli	r3,r3,1
    e8f0:	00800044 	movi	r2,1
    e8f4:	20c00015 	stw	r3,0(r4)
    e8f8:	f800283a 	ret

0000e8fc <__i2b>:
    e8fc:	defffd04 	addi	sp,sp,-12
    e900:	dc000015 	stw	r16,0(sp)
    e904:	04000044 	movi	r16,1
    e908:	dc400115 	stw	r17,4(sp)
    e90c:	2823883a 	mov	r17,r5
    e910:	800b883a 	mov	r5,r16
    e914:	dfc00215 	stw	ra,8(sp)
    e918:	000e4f00 	call	e4f0 <_Balloc>
    e91c:	14400515 	stw	r17,20(r2)
    e920:	14000415 	stw	r16,16(r2)
    e924:	dfc00217 	ldw	ra,8(sp)
    e928:	dc400117 	ldw	r17,4(sp)
    e92c:	dc000017 	ldw	r16,0(sp)
    e930:	dec00304 	addi	sp,sp,12
    e934:	f800283a 	ret

0000e938 <__multiply>:
    e938:	defffa04 	addi	sp,sp,-24
    e93c:	dcc00315 	stw	r19,12(sp)
    e940:	dc800215 	stw	r18,8(sp)
    e944:	2cc00417 	ldw	r19,16(r5)
    e948:	34800417 	ldw	r18,16(r6)
    e94c:	dd000415 	stw	r20,16(sp)
    e950:	dc400115 	stw	r17,4(sp)
    e954:	dfc00515 	stw	ra,20(sp)
    e958:	dc000015 	stw	r16,0(sp)
    e95c:	2829883a 	mov	r20,r5
    e960:	3023883a 	mov	r17,r6
    e964:	9c807016 	blt	r19,r18,eb28 <__multiply+0x1f0>
    e968:	9005883a 	mov	r2,r18
    e96c:	9825883a 	mov	r18,r19
    e970:	1027883a 	mov	r19,r2
    e974:	a0800217 	ldw	r2,8(r20)
    e978:	94e1883a 	add	r16,r18,r19
    e97c:	a1400117 	ldw	r5,4(r20)
    e980:	1400010e 	bge	r2,r16,e988 <__multiply+0x50>
    e984:	29400044 	addi	r5,r5,1
    e988:	000e4f00 	call	e4f0 <_Balloc>
    e98c:	8417883a 	add	r11,r16,r16
    e990:	13000504 	addi	r12,r2,20
    e994:	5ad7883a 	add	r11,r11,r11
    e998:	62d7883a 	add	r11,r12,r11
    e99c:	6007883a 	mov	r3,r12
    e9a0:	62c0032e 	bgeu	r12,r11,e9b0 <__multiply+0x78>
    e9a4:	18000015 	stw	zero,0(r3)
    e9a8:	18c00104 	addi	r3,r3,4
    e9ac:	1afffd36 	bltu	r3,r11,e9a4 <__alt_mem_Flash_flash_data+0xf400e9a4>
    e9b0:	9ce7883a 	add	r19,r19,r19
    e9b4:	94a5883a 	add	r18,r18,r18
    e9b8:	89800504 	addi	r6,r17,20
    e9bc:	9ce7883a 	add	r19,r19,r19
    e9c0:	a3800504 	addi	r14,r20,20
    e9c4:	94a5883a 	add	r18,r18,r18
    e9c8:	34db883a 	add	r13,r6,r19
    e9cc:	7495883a 	add	r10,r14,r18
    e9d0:	3340422e 	bgeu	r6,r13,eadc <__multiply+0x1a4>
    e9d4:	34400017 	ldw	r17,0(r6)
    e9d8:	8cbfffcc 	andi	r18,r17,65535
    e9dc:	90001b26 	beq	r18,zero,ea4c <__multiply+0x114>
    e9e0:	6013883a 	mov	r9,r12
    e9e4:	7023883a 	mov	r17,r14
    e9e8:	0011883a 	mov	r8,zero
    e9ec:	88c00017 	ldw	r3,0(r17)
    e9f0:	4bc00017 	ldw	r15,0(r9)
    e9f4:	8c400104 	addi	r17,r17,4
    e9f8:	19ffffcc 	andi	r7,r3,65535
    e9fc:	3c8f383a 	mul	r7,r7,r18
    ea00:	1808d43a 	srli	r4,r3,16
    ea04:	797fffcc 	andi	r5,r15,65535
    ea08:	29cb883a 	add	r5,r5,r7
    ea0c:	2a0b883a 	add	r5,r5,r8
    ea10:	2489383a 	mul	r4,r4,r18
    ea14:	7806d43a 	srli	r3,r15,16
    ea18:	2810d43a 	srli	r8,r5,16
    ea1c:	297fffcc 	andi	r5,r5,65535
    ea20:	1907883a 	add	r3,r3,r4
    ea24:	1a07883a 	add	r3,r3,r8
    ea28:	1808943a 	slli	r4,r3,16
    ea2c:	480f883a 	mov	r7,r9
    ea30:	1810d43a 	srli	r8,r3,16
    ea34:	214ab03a 	or	r5,r4,r5
    ea38:	49400015 	stw	r5,0(r9)
    ea3c:	4a400104 	addi	r9,r9,4
    ea40:	8abfea36 	bltu	r17,r10,e9ec <__alt_mem_Flash_flash_data+0xf400e9ec>
    ea44:	3a000115 	stw	r8,4(r7)
    ea48:	34400017 	ldw	r17,0(r6)
    ea4c:	8822d43a 	srli	r17,r17,16
    ea50:	88001f26 	beq	r17,zero,ead0 <__multiply+0x198>
    ea54:	60c00017 	ldw	r3,0(r12)
    ea58:	7013883a 	mov	r9,r14
    ea5c:	601f883a 	mov	r15,r12
    ea60:	1811883a 	mov	r8,r3
    ea64:	6027883a 	mov	r19,r12
    ea68:	000f883a 	mov	r7,zero
    ea6c:	00000106 	br	ea74 <__multiply+0x13c>
    ea70:	9027883a 	mov	r19,r18
    ea74:	4940000b 	ldhu	r5,0(r9)
    ea78:	4010d43a 	srli	r8,r8,16
    ea7c:	193fffcc 	andi	r4,r3,65535
    ea80:	2c4b383a 	mul	r5,r5,r17
    ea84:	7bc00104 	addi	r15,r15,4
    ea88:	4a400104 	addi	r9,r9,4
    ea8c:	2a0b883a 	add	r5,r5,r8
    ea90:	29cb883a 	add	r5,r5,r7
    ea94:	2806943a 	slli	r3,r5,16
    ea98:	9c800104 	addi	r18,r19,4
    ea9c:	280ad43a 	srli	r5,r5,16
    eaa0:	1908b03a 	or	r4,r3,r4
    eaa4:	793fff15 	stw	r4,-4(r15)
    eaa8:	48ffff17 	ldw	r3,-4(r9)
    eaac:	92000017 	ldw	r8,0(r18)
    eab0:	1806d43a 	srli	r3,r3,16
    eab4:	413fffcc 	andi	r4,r8,65535
    eab8:	1c47383a 	mul	r3,r3,r17
    eabc:	1907883a 	add	r3,r3,r4
    eac0:	1947883a 	add	r3,r3,r5
    eac4:	180ed43a 	srli	r7,r3,16
    eac8:	4abfe936 	bltu	r9,r10,ea70 <__alt_mem_Flash_flash_data+0xf400ea70>
    eacc:	98c00115 	stw	r3,4(r19)
    ead0:	31800104 	addi	r6,r6,4
    ead4:	63000104 	addi	r12,r12,4
    ead8:	337fbe36 	bltu	r6,r13,e9d4 <__alt_mem_Flash_flash_data+0xf400e9d4>
    eadc:	0400090e 	bge	zero,r16,eb04 <__multiply+0x1cc>
    eae0:	58ffff17 	ldw	r3,-4(r11)
    eae4:	5affff04 	addi	r11,r11,-4
    eae8:	18000326 	beq	r3,zero,eaf8 <__multiply+0x1c0>
    eaec:	00000506 	br	eb04 <__multiply+0x1cc>
    eaf0:	58c00017 	ldw	r3,0(r11)
    eaf4:	1800031e 	bne	r3,zero,eb04 <__multiply+0x1cc>
    eaf8:	843fffc4 	addi	r16,r16,-1
    eafc:	5affff04 	addi	r11,r11,-4
    eb00:	803ffb1e 	bne	r16,zero,eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>
    eb04:	14000415 	stw	r16,16(r2)
    eb08:	dfc00517 	ldw	ra,20(sp)
    eb0c:	dd000417 	ldw	r20,16(sp)
    eb10:	dcc00317 	ldw	r19,12(sp)
    eb14:	dc800217 	ldw	r18,8(sp)
    eb18:	dc400117 	ldw	r17,4(sp)
    eb1c:	dc000017 	ldw	r16,0(sp)
    eb20:	dec00604 	addi	sp,sp,24
    eb24:	f800283a 	ret
    eb28:	3029883a 	mov	r20,r6
    eb2c:	2823883a 	mov	r17,r5
    eb30:	003f9006 	br	e974 <__alt_mem_Flash_flash_data+0xf400e974>

0000eb34 <__pow5mult>:
    eb34:	defffa04 	addi	sp,sp,-24
    eb38:	dcc00315 	stw	r19,12(sp)
    eb3c:	dc800215 	stw	r18,8(sp)
    eb40:	dc000015 	stw	r16,0(sp)
    eb44:	dfc00515 	stw	ra,20(sp)
    eb48:	dd000415 	stw	r20,16(sp)
    eb4c:	dc400115 	stw	r17,4(sp)
    eb50:	308000cc 	andi	r2,r6,3
    eb54:	3021883a 	mov	r16,r6
    eb58:	2027883a 	mov	r19,r4
    eb5c:	2825883a 	mov	r18,r5
    eb60:	10002e1e 	bne	r2,zero,ec1c <__pow5mult+0xe8>
    eb64:	8021d0ba 	srai	r16,r16,2
    eb68:	80001a26 	beq	r16,zero,ebd4 <__pow5mult+0xa0>
    eb6c:	9c401217 	ldw	r17,72(r19)
    eb70:	8800061e 	bne	r17,zero,eb8c <__pow5mult+0x58>
    eb74:	00003406 	br	ec48 <__pow5mult+0x114>
    eb78:	8021d07a 	srai	r16,r16,1
    eb7c:	80001526 	beq	r16,zero,ebd4 <__pow5mult+0xa0>
    eb80:	88800017 	ldw	r2,0(r17)
    eb84:	10001c26 	beq	r2,zero,ebf8 <__pow5mult+0xc4>
    eb88:	1023883a 	mov	r17,r2
    eb8c:	80c0004c 	andi	r3,r16,1
    eb90:	183ff926 	beq	r3,zero,eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    eb94:	900b883a 	mov	r5,r18
    eb98:	880d883a 	mov	r6,r17
    eb9c:	9809883a 	mov	r4,r19
    eba0:	000e9380 	call	e938 <__multiply>
    eba4:	90001b26 	beq	r18,zero,ec14 <__pow5mult+0xe0>
    eba8:	91c00117 	ldw	r7,4(r18)
    ebac:	98c01317 	ldw	r3,76(r19)
    ebb0:	8021d07a 	srai	r16,r16,1
    ebb4:	39cf883a 	add	r7,r7,r7
    ebb8:	39cf883a 	add	r7,r7,r7
    ebbc:	19c7883a 	add	r3,r3,r7
    ebc0:	19000017 	ldw	r4,0(r3)
    ebc4:	91000015 	stw	r4,0(r18)
    ebc8:	1c800015 	stw	r18,0(r3)
    ebcc:	1025883a 	mov	r18,r2
    ebd0:	803feb1e 	bne	r16,zero,eb80 <__alt_mem_Flash_flash_data+0xf400eb80>
    ebd4:	9005883a 	mov	r2,r18
    ebd8:	dfc00517 	ldw	ra,20(sp)
    ebdc:	dd000417 	ldw	r20,16(sp)
    ebe0:	dcc00317 	ldw	r19,12(sp)
    ebe4:	dc800217 	ldw	r18,8(sp)
    ebe8:	dc400117 	ldw	r17,4(sp)
    ebec:	dc000017 	ldw	r16,0(sp)
    ebf0:	dec00604 	addi	sp,sp,24
    ebf4:	f800283a 	ret
    ebf8:	9809883a 	mov	r4,r19
    ebfc:	880b883a 	mov	r5,r17
    ec00:	880d883a 	mov	r6,r17
    ec04:	000e9380 	call	e938 <__multiply>
    ec08:	88800015 	stw	r2,0(r17)
    ec0c:	10000015 	stw	zero,0(r2)
    ec10:	003fdd06 	br	eb88 <__alt_mem_Flash_flash_data+0xf400eb88>
    ec14:	1025883a 	mov	r18,r2
    ec18:	003fd706 	br	eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    ec1c:	10bfffc4 	addi	r2,r2,-1
    ec20:	1085883a 	add	r2,r2,r2
    ec24:	00c000b4 	movhi	r3,2
    ec28:	18c33c04 	addi	r3,r3,3312
    ec2c:	1085883a 	add	r2,r2,r2
    ec30:	1885883a 	add	r2,r3,r2
    ec34:	11800017 	ldw	r6,0(r2)
    ec38:	000f883a 	mov	r7,zero
    ec3c:	000e5c00 	call	e5c0 <__multadd>
    ec40:	1025883a 	mov	r18,r2
    ec44:	003fc706 	br	eb64 <__alt_mem_Flash_flash_data+0xf400eb64>
    ec48:	05000044 	movi	r20,1
    ec4c:	9809883a 	mov	r4,r19
    ec50:	a00b883a 	mov	r5,r20
    ec54:	000e4f00 	call	e4f0 <_Balloc>
    ec58:	1023883a 	mov	r17,r2
    ec5c:	00809c44 	movi	r2,625
    ec60:	88800515 	stw	r2,20(r17)
    ec64:	8d000415 	stw	r20,16(r17)
    ec68:	9c401215 	stw	r17,72(r19)
    ec6c:	88000015 	stw	zero,0(r17)
    ec70:	003fc606 	br	eb8c <__alt_mem_Flash_flash_data+0xf400eb8c>

0000ec74 <__lshift>:
    ec74:	defff904 	addi	sp,sp,-28
    ec78:	dd000415 	stw	r20,16(sp)
    ec7c:	dcc00315 	stw	r19,12(sp)
    ec80:	3029d17a 	srai	r20,r6,5
    ec84:	2cc00417 	ldw	r19,16(r5)
    ec88:	28800217 	ldw	r2,8(r5)
    ec8c:	dd400515 	stw	r21,20(sp)
    ec90:	a4e7883a 	add	r19,r20,r19
    ec94:	dc800215 	stw	r18,8(sp)
    ec98:	dc400115 	stw	r17,4(sp)
    ec9c:	dc000015 	stw	r16,0(sp)
    eca0:	dfc00615 	stw	ra,24(sp)
    eca4:	9c000044 	addi	r16,r19,1
    eca8:	2823883a 	mov	r17,r5
    ecac:	302b883a 	mov	r21,r6
    ecb0:	2025883a 	mov	r18,r4
    ecb4:	29400117 	ldw	r5,4(r5)
    ecb8:	1400030e 	bge	r2,r16,ecc8 <__lshift+0x54>
    ecbc:	1085883a 	add	r2,r2,r2
    ecc0:	29400044 	addi	r5,r5,1
    ecc4:	143ffd16 	blt	r2,r16,ecbc <__alt_mem_Flash_flash_data+0xf400ecbc>
    ecc8:	9009883a 	mov	r4,r18
    eccc:	000e4f00 	call	e4f0 <_Balloc>
    ecd0:	11c00504 	addi	r7,r2,20
    ecd4:	0500090e 	bge	zero,r20,ecfc <__lshift+0x88>
    ecd8:	3811883a 	mov	r8,r7
    ecdc:	0007883a 	mov	r3,zero
    ece0:	40000015 	stw	zero,0(r8)
    ece4:	18c00044 	addi	r3,r3,1
    ece8:	42000104 	addi	r8,r8,4
    ecec:	1d3ffc1e 	bne	r3,r20,ece0 <__alt_mem_Flash_flash_data+0xf400ece0>
    ecf0:	18c7883a 	add	r3,r3,r3
    ecf4:	18c7883a 	add	r3,r3,r3
    ecf8:	38cf883a 	add	r7,r7,r3
    ecfc:	89000417 	ldw	r4,16(r17)
    ed00:	88c00504 	addi	r3,r17,20
    ed04:	a98007cc 	andi	r6,r21,31
    ed08:	2109883a 	add	r4,r4,r4
    ed0c:	2109883a 	add	r4,r4,r4
    ed10:	1909883a 	add	r4,r3,r4
    ed14:	30002326 	beq	r6,zero,eda4 <__lshift+0x130>
    ed18:	01400804 	movi	r5,32
    ed1c:	298bc83a 	sub	r5,r5,r6
    ed20:	0013883a 	mov	r9,zero
    ed24:	1a000017 	ldw	r8,0(r3)
    ed28:	3815883a 	mov	r10,r7
    ed2c:	39c00104 	addi	r7,r7,4
    ed30:	4190983a 	sll	r8,r8,r6
    ed34:	18c00104 	addi	r3,r3,4
    ed38:	4a10b03a 	or	r8,r9,r8
    ed3c:	3a3fff15 	stw	r8,-4(r7)
    ed40:	1a3fff17 	ldw	r8,-4(r3)
    ed44:	4152d83a 	srl	r9,r8,r5
    ed48:	193ff636 	bltu	r3,r4,ed24 <__alt_mem_Flash_flash_data+0xf400ed24>
    ed4c:	52400115 	stw	r9,4(r10)
    ed50:	48001a1e 	bne	r9,zero,edbc <__lshift+0x148>
    ed54:	843fffc4 	addi	r16,r16,-1
    ed58:	14000415 	stw	r16,16(r2)
    ed5c:	88000826 	beq	r17,zero,ed80 <__lshift+0x10c>
    ed60:	89000117 	ldw	r4,4(r17)
    ed64:	90c01317 	ldw	r3,76(r18)
    ed68:	2109883a 	add	r4,r4,r4
    ed6c:	2109883a 	add	r4,r4,r4
    ed70:	1907883a 	add	r3,r3,r4
    ed74:	19000017 	ldw	r4,0(r3)
    ed78:	89000015 	stw	r4,0(r17)
    ed7c:	1c400015 	stw	r17,0(r3)
    ed80:	dfc00617 	ldw	ra,24(sp)
    ed84:	dd400517 	ldw	r21,20(sp)
    ed88:	dd000417 	ldw	r20,16(sp)
    ed8c:	dcc00317 	ldw	r19,12(sp)
    ed90:	dc800217 	ldw	r18,8(sp)
    ed94:	dc400117 	ldw	r17,4(sp)
    ed98:	dc000017 	ldw	r16,0(sp)
    ed9c:	dec00704 	addi	sp,sp,28
    eda0:	f800283a 	ret
    eda4:	19400017 	ldw	r5,0(r3)
    eda8:	39c00104 	addi	r7,r7,4
    edac:	18c00104 	addi	r3,r3,4
    edb0:	397fff15 	stw	r5,-4(r7)
    edb4:	193ffb36 	bltu	r3,r4,eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    edb8:	003fe606 	br	ed54 <__alt_mem_Flash_flash_data+0xf400ed54>
    edbc:	9c000084 	addi	r16,r19,2
    edc0:	003fe406 	br	ed54 <__alt_mem_Flash_flash_data+0xf400ed54>

0000edc4 <__mcmp>:
    edc4:	20800417 	ldw	r2,16(r4)
    edc8:	28c00417 	ldw	r3,16(r5)
    edcc:	10c5c83a 	sub	r2,r2,r3
    edd0:	1000111e 	bne	r2,zero,ee18 <__mcmp+0x54>
    edd4:	18c7883a 	add	r3,r3,r3
    edd8:	18c7883a 	add	r3,r3,r3
    eddc:	21000504 	addi	r4,r4,20
    ede0:	29400504 	addi	r5,r5,20
    ede4:	20c5883a 	add	r2,r4,r3
    ede8:	28cb883a 	add	r5,r5,r3
    edec:	00000106 	br	edf4 <__mcmp+0x30>
    edf0:	20800a2e 	bgeu	r4,r2,ee1c <__mcmp+0x58>
    edf4:	10bfff04 	addi	r2,r2,-4
    edf8:	297fff04 	addi	r5,r5,-4
    edfc:	11800017 	ldw	r6,0(r2)
    ee00:	28c00017 	ldw	r3,0(r5)
    ee04:	30fffa26 	beq	r6,r3,edf0 <__alt_mem_Flash_flash_data+0xf400edf0>
    ee08:	30c00236 	bltu	r6,r3,ee14 <__mcmp+0x50>
    ee0c:	00800044 	movi	r2,1
    ee10:	f800283a 	ret
    ee14:	00bfffc4 	movi	r2,-1
    ee18:	f800283a 	ret
    ee1c:	0005883a 	mov	r2,zero
    ee20:	f800283a 	ret

0000ee24 <__mdiff>:
    ee24:	defffb04 	addi	sp,sp,-20
    ee28:	dc000015 	stw	r16,0(sp)
    ee2c:	2821883a 	mov	r16,r5
    ee30:	dcc00315 	stw	r19,12(sp)
    ee34:	300b883a 	mov	r5,r6
    ee38:	2027883a 	mov	r19,r4
    ee3c:	8009883a 	mov	r4,r16
    ee40:	dc800215 	stw	r18,8(sp)
    ee44:	dfc00415 	stw	ra,16(sp)
    ee48:	dc400115 	stw	r17,4(sp)
    ee4c:	3025883a 	mov	r18,r6
    ee50:	000edc40 	call	edc4 <__mcmp>
    ee54:	10005226 	beq	r2,zero,efa0 <__mdiff+0x17c>
    ee58:	10004c16 	blt	r2,zero,ef8c <__mdiff+0x168>
    ee5c:	0023883a 	mov	r17,zero
    ee60:	81400117 	ldw	r5,4(r16)
    ee64:	9809883a 	mov	r4,r19
    ee68:	000e4f00 	call	e4f0 <_Balloc>
    ee6c:	83400417 	ldw	r13,16(r16)
    ee70:	93800417 	ldw	r14,16(r18)
    ee74:	81000504 	addi	r4,r16,20
    ee78:	6b59883a 	add	r12,r13,r13
    ee7c:	739d883a 	add	r14,r14,r14
    ee80:	6319883a 	add	r12,r12,r12
    ee84:	91800504 	addi	r6,r18,20
    ee88:	739d883a 	add	r14,r14,r14
    ee8c:	14400315 	stw	r17,12(r2)
    ee90:	2319883a 	add	r12,r4,r12
    ee94:	339d883a 	add	r14,r6,r14
    ee98:	12400504 	addi	r9,r2,20
    ee9c:	0007883a 	mov	r3,zero
    eea0:	22000017 	ldw	r8,0(r4)
    eea4:	32800017 	ldw	r10,0(r6)
    eea8:	4ac00104 	addi	r11,r9,4
    eeac:	41ffffcc 	andi	r7,r8,65535
    eeb0:	38c7883a 	add	r3,r7,r3
    eeb4:	51ffffcc 	andi	r7,r10,65535
    eeb8:	19cfc83a 	sub	r7,r3,r7
    eebc:	4010d43a 	srli	r8,r8,16
    eec0:	5014d43a 	srli	r10,r10,16
    eec4:	3807d43a 	srai	r3,r7,16
    eec8:	39ffffcc 	andi	r7,r7,65535
    eecc:	4291c83a 	sub	r8,r8,r10
    eed0:	40c7883a 	add	r3,r8,r3
    eed4:	1810943a 	slli	r8,r3,16
    eed8:	31800104 	addi	r6,r6,4
    eedc:	21000104 	addi	r4,r4,4
    eee0:	41ceb03a 	or	r7,r8,r7
    eee4:	49c00015 	stw	r7,0(r9)
    eee8:	1807d43a 	srai	r3,r3,16
    eeec:	580b883a 	mov	r5,r11
    eef0:	5813883a 	mov	r9,r11
    eef4:	33bfea36 	bltu	r6,r14,eea0 <__alt_mem_Flash_flash_data+0xf400eea0>
    eef8:	2011883a 	mov	r8,r4
    eefc:	2300152e 	bgeu	r4,r12,ef54 <__mdiff+0x130>
    ef00:	21400017 	ldw	r5,0(r4)
    ef04:	4a400104 	addi	r9,r9,4
    ef08:	21000104 	addi	r4,r4,4
    ef0c:	29ffffcc 	andi	r7,r5,65535
    ef10:	38c7883a 	add	r3,r7,r3
    ef14:	280ad43a 	srli	r5,r5,16
    ef18:	180dd43a 	srai	r6,r3,16
    ef1c:	19ffffcc 	andi	r7,r3,65535
    ef20:	3147883a 	add	r3,r6,r5
    ef24:	180a943a 	slli	r5,r3,16
    ef28:	1807d43a 	srai	r3,r3,16
    ef2c:	29ceb03a 	or	r7,r5,r7
    ef30:	49ffff15 	stw	r7,-4(r9)
    ef34:	233ff236 	bltu	r4,r12,ef00 <__alt_mem_Flash_flash_data+0xf400ef00>
    ef38:	0206303a 	nor	r3,zero,r8
    ef3c:	1b07883a 	add	r3,r3,r12
    ef40:	1806d0ba 	srli	r3,r3,2
    ef44:	18c00044 	addi	r3,r3,1
    ef48:	18c7883a 	add	r3,r3,r3
    ef4c:	18c7883a 	add	r3,r3,r3
    ef50:	58cb883a 	add	r5,r11,r3
    ef54:	28ffff04 	addi	r3,r5,-4
    ef58:	3800041e 	bne	r7,zero,ef6c <__mdiff+0x148>
    ef5c:	18ffff04 	addi	r3,r3,-4
    ef60:	19000017 	ldw	r4,0(r3)
    ef64:	6b7fffc4 	addi	r13,r13,-1
    ef68:	203ffc26 	beq	r4,zero,ef5c <__alt_mem_Flash_flash_data+0xf400ef5c>
    ef6c:	13400415 	stw	r13,16(r2)
    ef70:	dfc00417 	ldw	ra,16(sp)
    ef74:	dcc00317 	ldw	r19,12(sp)
    ef78:	dc800217 	ldw	r18,8(sp)
    ef7c:	dc400117 	ldw	r17,4(sp)
    ef80:	dc000017 	ldw	r16,0(sp)
    ef84:	dec00504 	addi	sp,sp,20
    ef88:	f800283a 	ret
    ef8c:	8005883a 	mov	r2,r16
    ef90:	04400044 	movi	r17,1
    ef94:	9021883a 	mov	r16,r18
    ef98:	1025883a 	mov	r18,r2
    ef9c:	003fb006 	br	ee60 <__alt_mem_Flash_flash_data+0xf400ee60>
    efa0:	9809883a 	mov	r4,r19
    efa4:	000b883a 	mov	r5,zero
    efa8:	000e4f00 	call	e4f0 <_Balloc>
    efac:	00c00044 	movi	r3,1
    efb0:	10c00415 	stw	r3,16(r2)
    efb4:	10000515 	stw	zero,20(r2)
    efb8:	003fed06 	br	ef70 <__alt_mem_Flash_flash_data+0xf400ef70>

0000efbc <__ulp>:
    efbc:	295ffc2c 	andhi	r5,r5,32752
    efc0:	00bf3034 	movhi	r2,64704
    efc4:	2887883a 	add	r3,r5,r2
    efc8:	00c0020e 	bge	zero,r3,efd4 <__ulp+0x18>
    efcc:	0005883a 	mov	r2,zero
    efd0:	f800283a 	ret
    efd4:	00c7c83a 	sub	r3,zero,r3
    efd8:	180bd53a 	srai	r5,r3,20
    efdc:	008004c4 	movi	r2,19
    efe0:	11400a0e 	bge	r2,r5,f00c <__ulp+0x50>
    efe4:	00800c84 	movi	r2,50
    efe8:	0007883a 	mov	r3,zero
    efec:	11400516 	blt	r2,r5,f004 <__ulp+0x48>
    eff0:	00800cc4 	movi	r2,51
    eff4:	114bc83a 	sub	r5,r2,r5
    eff8:	00800044 	movi	r2,1
    effc:	1144983a 	sll	r2,r2,r5
    f000:	f800283a 	ret
    f004:	00800044 	movi	r2,1
    f008:	f800283a 	ret
    f00c:	00800234 	movhi	r2,8
    f010:	1147d83a 	sra	r3,r2,r5
    f014:	0005883a 	mov	r2,zero
    f018:	f800283a 	ret

0000f01c <__b2d>:
    f01c:	defffa04 	addi	sp,sp,-24
    f020:	dc000015 	stw	r16,0(sp)
    f024:	24000417 	ldw	r16,16(r4)
    f028:	dc400115 	stw	r17,4(sp)
    f02c:	24400504 	addi	r17,r4,20
    f030:	8421883a 	add	r16,r16,r16
    f034:	8421883a 	add	r16,r16,r16
    f038:	8c21883a 	add	r16,r17,r16
    f03c:	dc800215 	stw	r18,8(sp)
    f040:	84bfff17 	ldw	r18,-4(r16)
    f044:	dd000415 	stw	r20,16(sp)
    f048:	dcc00315 	stw	r19,12(sp)
    f04c:	9009883a 	mov	r4,r18
    f050:	2829883a 	mov	r20,r5
    f054:	dfc00515 	stw	ra,20(sp)
    f058:	000e7e40 	call	e7e4 <__hi0bits>
    f05c:	00c00804 	movi	r3,32
    f060:	1887c83a 	sub	r3,r3,r2
    f064:	a0c00015 	stw	r3,0(r20)
    f068:	00c00284 	movi	r3,10
    f06c:	84ffff04 	addi	r19,r16,-4
    f070:	18801216 	blt	r3,r2,f0bc <__b2d+0xa0>
    f074:	014002c4 	movi	r5,11
    f078:	2889c83a 	sub	r4,r5,r2
    f07c:	9106d83a 	srl	r3,r18,r4
    f080:	18cffc34 	orhi	r3,r3,16368
    f084:	8cc0282e 	bgeu	r17,r19,f128 <__b2d+0x10c>
    f088:	817ffe17 	ldw	r5,-8(r16)
    f08c:	290ad83a 	srl	r5,r5,r4
    f090:	10800544 	addi	r2,r2,21
    f094:	9084983a 	sll	r2,r18,r2
    f098:	2884b03a 	or	r2,r5,r2
    f09c:	dfc00517 	ldw	ra,20(sp)
    f0a0:	dd000417 	ldw	r20,16(sp)
    f0a4:	dcc00317 	ldw	r19,12(sp)
    f0a8:	dc800217 	ldw	r18,8(sp)
    f0ac:	dc400117 	ldw	r17,4(sp)
    f0b0:	dc000017 	ldw	r16,0(sp)
    f0b4:	dec00604 	addi	sp,sp,24
    f0b8:	f800283a 	ret
    f0bc:	113ffd44 	addi	r4,r2,-11
    f0c0:	8cc00f2e 	bgeu	r17,r19,f100 <__b2d+0xe4>
    f0c4:	81bffe04 	addi	r6,r16,-8
    f0c8:	817ffe17 	ldw	r5,-8(r16)
    f0cc:	20001326 	beq	r4,zero,f11c <__b2d+0x100>
    f0d0:	00c00ac4 	movi	r3,43
    f0d4:	1885c83a 	sub	r2,r3,r2
    f0d8:	2886d83a 	srl	r3,r5,r2
    f0dc:	9124983a 	sll	r18,r18,r4
    f0e0:	90e4b03a 	or	r18,r18,r3
    f0e4:	90cffc34 	orhi	r3,r18,16368
    f0e8:	8980112e 	bgeu	r17,r6,f130 <__b2d+0x114>
    f0ec:	81bffd17 	ldw	r6,-12(r16)
    f0f0:	308cd83a 	srl	r6,r6,r2
    f0f4:	2904983a 	sll	r2,r5,r4
    f0f8:	1184b03a 	or	r2,r2,r6
    f0fc:	003fe706 	br	f09c <__alt_mem_Flash_flash_data+0xf400f09c>
    f100:	20000526 	beq	r4,zero,f118 <__b2d+0xfc>
    f104:	9124983a 	sll	r18,r18,r4
    f108:	000d883a 	mov	r6,zero
    f10c:	000b883a 	mov	r5,zero
    f110:	90cffc34 	orhi	r3,r18,16368
    f114:	003ff706 	br	f0f4 <__alt_mem_Flash_flash_data+0xf400f0f4>
    f118:	000b883a 	mov	r5,zero
    f11c:	90cffc34 	orhi	r3,r18,16368
    f120:	2805883a 	mov	r2,r5
    f124:	003fdd06 	br	f09c <__alt_mem_Flash_flash_data+0xf400f09c>
    f128:	000b883a 	mov	r5,zero
    f12c:	003fd806 	br	f090 <__alt_mem_Flash_flash_data+0xf400f090>
    f130:	000d883a 	mov	r6,zero
    f134:	003fef06 	br	f0f4 <__alt_mem_Flash_flash_data+0xf400f0f4>

0000f138 <__d2b>:
    f138:	defff704 	addi	sp,sp,-36
    f13c:	dc000215 	stw	r16,8(sp)
    f140:	3021883a 	mov	r16,r6
    f144:	dc400315 	stw	r17,12(sp)
    f148:	8022907a 	slli	r17,r16,1
    f14c:	dd400715 	stw	r21,28(sp)
    f150:	282b883a 	mov	r21,r5
    f154:	01400044 	movi	r5,1
    f158:	dd000615 	stw	r20,24(sp)
    f15c:	dcc00515 	stw	r19,20(sp)
    f160:	dc800415 	stw	r18,16(sp)
    f164:	dfc00815 	stw	ra,32(sp)
    f168:	3829883a 	mov	r20,r7
    f16c:	dc800917 	ldw	r18,36(sp)
    f170:	8822d57a 	srli	r17,r17,21
    f174:	000e4f00 	call	e4f0 <_Balloc>
    f178:	1027883a 	mov	r19,r2
    f17c:	00800434 	movhi	r2,16
    f180:	10bfffc4 	addi	r2,r2,-1
    f184:	808c703a 	and	r6,r16,r2
    f188:	88000126 	beq	r17,zero,f190 <__d2b+0x58>
    f18c:	31800434 	orhi	r6,r6,16
    f190:	d9800015 	stw	r6,0(sp)
    f194:	a8001f26 	beq	r21,zero,f214 <__d2b+0xdc>
    f198:	d9000104 	addi	r4,sp,4
    f19c:	dd400115 	stw	r21,4(sp)
    f1a0:	000e84c0 	call	e84c <__lo0bits>
    f1a4:	d8c00017 	ldw	r3,0(sp)
    f1a8:	1000291e 	bne	r2,zero,f250 <__d2b+0x118>
    f1ac:	d9000117 	ldw	r4,4(sp)
    f1b0:	99000515 	stw	r4,20(r19)
    f1b4:	1820c03a 	cmpne	r16,r3,zero
    f1b8:	84000044 	addi	r16,r16,1
    f1bc:	98c00615 	stw	r3,24(r19)
    f1c0:	9c000415 	stw	r16,16(r19)
    f1c4:	88001b1e 	bne	r17,zero,f234 <__d2b+0xfc>
    f1c8:	800690ba 	slli	r3,r16,2
    f1cc:	10bef384 	addi	r2,r2,-1074
    f1d0:	a0800015 	stw	r2,0(r20)
    f1d4:	98c5883a 	add	r2,r19,r3
    f1d8:	11000417 	ldw	r4,16(r2)
    f1dc:	8020917a 	slli	r16,r16,5
    f1e0:	000e7e40 	call	e7e4 <__hi0bits>
    f1e4:	8085c83a 	sub	r2,r16,r2
    f1e8:	90800015 	stw	r2,0(r18)
    f1ec:	9805883a 	mov	r2,r19
    f1f0:	dfc00817 	ldw	ra,32(sp)
    f1f4:	dd400717 	ldw	r21,28(sp)
    f1f8:	dd000617 	ldw	r20,24(sp)
    f1fc:	dcc00517 	ldw	r19,20(sp)
    f200:	dc800417 	ldw	r18,16(sp)
    f204:	dc400317 	ldw	r17,12(sp)
    f208:	dc000217 	ldw	r16,8(sp)
    f20c:	dec00904 	addi	sp,sp,36
    f210:	f800283a 	ret
    f214:	d809883a 	mov	r4,sp
    f218:	000e84c0 	call	e84c <__lo0bits>
    f21c:	d8c00017 	ldw	r3,0(sp)
    f220:	04000044 	movi	r16,1
    f224:	9c000415 	stw	r16,16(r19)
    f228:	98c00515 	stw	r3,20(r19)
    f22c:	10800804 	addi	r2,r2,32
    f230:	883fe526 	beq	r17,zero,f1c8 <__alt_mem_Flash_flash_data+0xf400f1c8>
    f234:	8c7ef344 	addi	r17,r17,-1075
    f238:	88a3883a 	add	r17,r17,r2
    f23c:	00c00d44 	movi	r3,53
    f240:	a4400015 	stw	r17,0(r20)
    f244:	1885c83a 	sub	r2,r3,r2
    f248:	90800015 	stw	r2,0(r18)
    f24c:	003fe706 	br	f1ec <__alt_mem_Flash_flash_data+0xf400f1ec>
    f250:	01000804 	movi	r4,32
    f254:	2089c83a 	sub	r4,r4,r2
    f258:	1908983a 	sll	r4,r3,r4
    f25c:	d9400117 	ldw	r5,4(sp)
    f260:	1886d83a 	srl	r3,r3,r2
    f264:	2148b03a 	or	r4,r4,r5
    f268:	99000515 	stw	r4,20(r19)
    f26c:	d8c00015 	stw	r3,0(sp)
    f270:	003fd006 	br	f1b4 <__alt_mem_Flash_flash_data+0xf400f1b4>

0000f274 <__ratio>:
    f274:	defff904 	addi	sp,sp,-28
    f278:	dc400315 	stw	r17,12(sp)
    f27c:	2823883a 	mov	r17,r5
    f280:	d9400104 	addi	r5,sp,4
    f284:	dfc00615 	stw	ra,24(sp)
    f288:	dcc00515 	stw	r19,20(sp)
    f28c:	dc800415 	stw	r18,16(sp)
    f290:	2027883a 	mov	r19,r4
    f294:	dc000215 	stw	r16,8(sp)
    f298:	000f01c0 	call	f01c <__b2d>
    f29c:	8809883a 	mov	r4,r17
    f2a0:	d80b883a 	mov	r5,sp
    f2a4:	1025883a 	mov	r18,r2
    f2a8:	1821883a 	mov	r16,r3
    f2ac:	000f01c0 	call	f01c <__b2d>
    f2b0:	8a400417 	ldw	r9,16(r17)
    f2b4:	9a000417 	ldw	r8,16(r19)
    f2b8:	100d883a 	mov	r6,r2
    f2bc:	d8800017 	ldw	r2,0(sp)
    f2c0:	4251c83a 	sub	r8,r8,r9
    f2c4:	4012917a 	slli	r9,r8,5
    f2c8:	da000117 	ldw	r8,4(sp)
    f2cc:	4091c83a 	sub	r8,r8,r2
    f2d0:	4251883a 	add	r8,r8,r9
    f2d4:	02000d0e 	bge	zero,r8,f30c <__ratio+0x98>
    f2d8:	4010953a 	slli	r8,r8,20
    f2dc:	4421883a 	add	r16,r8,r16
    f2e0:	9009883a 	mov	r4,r18
    f2e4:	800b883a 	mov	r5,r16
    f2e8:	180f883a 	mov	r7,r3
    f2ec:	001375c0 	call	1375c <__divdf3>
    f2f0:	dfc00617 	ldw	ra,24(sp)
    f2f4:	dcc00517 	ldw	r19,20(sp)
    f2f8:	dc800417 	ldw	r18,16(sp)
    f2fc:	dc400317 	ldw	r17,12(sp)
    f300:	dc000217 	ldw	r16,8(sp)
    f304:	dec00704 	addi	sp,sp,28
    f308:	f800283a 	ret
    f30c:	4010953a 	slli	r8,r8,20
    f310:	1a07c83a 	sub	r3,r3,r8
    f314:	003ff206 	br	f2e0 <__alt_mem_Flash_flash_data+0xf400f2e0>

0000f318 <_mprec_log10>:
    f318:	defffe04 	addi	sp,sp,-8
    f31c:	dc000015 	stw	r16,0(sp)
    f320:	dfc00115 	stw	ra,4(sp)
    f324:	008005c4 	movi	r2,23
    f328:	2021883a 	mov	r16,r4
    f32c:	11000d0e 	bge	r2,r4,f364 <_mprec_log10+0x4c>
    f330:	0005883a 	mov	r2,zero
    f334:	00cffc34 	movhi	r3,16368
    f338:	843fffc4 	addi	r16,r16,-1
    f33c:	1009883a 	mov	r4,r2
    f340:	180b883a 	mov	r5,r3
    f344:	000d883a 	mov	r6,zero
    f348:	01d00934 	movhi	r7,16420
    f34c:	00053f00 	call	53f0 <__muldf3>
    f350:	803ff91e 	bne	r16,zero,f338 <__alt_mem_Flash_flash_data+0xf400f338>
    f354:	dfc00117 	ldw	ra,4(sp)
    f358:	dc000017 	ldw	r16,0(sp)
    f35c:	dec00204 	addi	sp,sp,8
    f360:	f800283a 	ret
    f364:	202090fa 	slli	r16,r4,3
    f368:	008000b4 	movhi	r2,2
    f36c:	10835304 	addi	r2,r2,3404
    f370:	1421883a 	add	r16,r2,r16
    f374:	80800017 	ldw	r2,0(r16)
    f378:	80c00117 	ldw	r3,4(r16)
    f37c:	dfc00117 	ldw	ra,4(sp)
    f380:	dc000017 	ldw	r16,0(sp)
    f384:	dec00204 	addi	sp,sp,8
    f388:	f800283a 	ret

0000f38c <__copybits>:
    f38c:	297fffc4 	addi	r5,r5,-1
    f390:	280fd17a 	srai	r7,r5,5
    f394:	30c00417 	ldw	r3,16(r6)
    f398:	30800504 	addi	r2,r6,20
    f39c:	39c00044 	addi	r7,r7,1
    f3a0:	18c7883a 	add	r3,r3,r3
    f3a4:	39cf883a 	add	r7,r7,r7
    f3a8:	18c7883a 	add	r3,r3,r3
    f3ac:	39cf883a 	add	r7,r7,r7
    f3b0:	10c7883a 	add	r3,r2,r3
    f3b4:	21cf883a 	add	r7,r4,r7
    f3b8:	10c00d2e 	bgeu	r2,r3,f3f0 <__copybits+0x64>
    f3bc:	200b883a 	mov	r5,r4
    f3c0:	12000017 	ldw	r8,0(r2)
    f3c4:	29400104 	addi	r5,r5,4
    f3c8:	10800104 	addi	r2,r2,4
    f3cc:	2a3fff15 	stw	r8,-4(r5)
    f3d0:	10fffb36 	bltu	r2,r3,f3c0 <__alt_mem_Flash_flash_data+0xf400f3c0>
    f3d4:	1985c83a 	sub	r2,r3,r6
    f3d8:	10bffac4 	addi	r2,r2,-21
    f3dc:	1004d0ba 	srli	r2,r2,2
    f3e0:	10800044 	addi	r2,r2,1
    f3e4:	1085883a 	add	r2,r2,r2
    f3e8:	1085883a 	add	r2,r2,r2
    f3ec:	2089883a 	add	r4,r4,r2
    f3f0:	21c0032e 	bgeu	r4,r7,f400 <__copybits+0x74>
    f3f4:	20000015 	stw	zero,0(r4)
    f3f8:	21000104 	addi	r4,r4,4
    f3fc:	21fffd36 	bltu	r4,r7,f3f4 <__alt_mem_Flash_flash_data+0xf400f3f4>
    f400:	f800283a 	ret

0000f404 <__any_on>:
    f404:	20c00417 	ldw	r3,16(r4)
    f408:	2805d17a 	srai	r2,r5,5
    f40c:	21000504 	addi	r4,r4,20
    f410:	18800d0e 	bge	r3,r2,f448 <__any_on+0x44>
    f414:	18c7883a 	add	r3,r3,r3
    f418:	18c7883a 	add	r3,r3,r3
    f41c:	20c7883a 	add	r3,r4,r3
    f420:	20c0192e 	bgeu	r4,r3,f488 <__any_on+0x84>
    f424:	18bfff17 	ldw	r2,-4(r3)
    f428:	18ffff04 	addi	r3,r3,-4
    f42c:	1000041e 	bne	r2,zero,f440 <__any_on+0x3c>
    f430:	20c0142e 	bgeu	r4,r3,f484 <__any_on+0x80>
    f434:	18ffff04 	addi	r3,r3,-4
    f438:	19400017 	ldw	r5,0(r3)
    f43c:	283ffc26 	beq	r5,zero,f430 <__alt_mem_Flash_flash_data+0xf400f430>
    f440:	00800044 	movi	r2,1
    f444:	f800283a 	ret
    f448:	10c00a0e 	bge	r2,r3,f474 <__any_on+0x70>
    f44c:	1085883a 	add	r2,r2,r2
    f450:	1085883a 	add	r2,r2,r2
    f454:	294007cc 	andi	r5,r5,31
    f458:	2087883a 	add	r3,r4,r2
    f45c:	283ff026 	beq	r5,zero,f420 <__alt_mem_Flash_flash_data+0xf400f420>
    f460:	19800017 	ldw	r6,0(r3)
    f464:	3144d83a 	srl	r2,r6,r5
    f468:	114a983a 	sll	r5,r2,r5
    f46c:	29bff41e 	bne	r5,r6,f440 <__alt_mem_Flash_flash_data+0xf400f440>
    f470:	003feb06 	br	f420 <__alt_mem_Flash_flash_data+0xf400f420>
    f474:	1085883a 	add	r2,r2,r2
    f478:	1085883a 	add	r2,r2,r2
    f47c:	2087883a 	add	r3,r4,r2
    f480:	003fe706 	br	f420 <__alt_mem_Flash_flash_data+0xf400f420>
    f484:	f800283a 	ret
    f488:	0005883a 	mov	r2,zero
    f48c:	f800283a 	ret

0000f490 <_realloc_r>:
    f490:	defff604 	addi	sp,sp,-40
    f494:	dd000415 	stw	r20,16(sp)
    f498:	dc400115 	stw	r17,4(sp)
    f49c:	dfc00915 	stw	ra,36(sp)
    f4a0:	df000815 	stw	fp,32(sp)
    f4a4:	ddc00715 	stw	r23,28(sp)
    f4a8:	dd800615 	stw	r22,24(sp)
    f4ac:	dd400515 	stw	r21,20(sp)
    f4b0:	dcc00315 	stw	r19,12(sp)
    f4b4:	dc800215 	stw	r18,8(sp)
    f4b8:	dc000015 	stw	r16,0(sp)
    f4bc:	2829883a 	mov	r20,r5
    f4c0:	3023883a 	mov	r17,r6
    f4c4:	2800ad26 	beq	r5,zero,f77c <_realloc_r+0x2ec>
    f4c8:	2025883a 	mov	r18,r4
    f4cc:	0014c880 	call	14c88 <__malloc_lock>
    f4d0:	a0ffff17 	ldw	r3,-4(r20)
    f4d4:	043fff04 	movi	r16,-4
    f4d8:	890002c4 	addi	r4,r17,11
    f4dc:	01c00584 	movi	r7,22
    f4e0:	a57ffe04 	addi	r21,r20,-8
    f4e4:	1c20703a 	and	r16,r3,r16
    f4e8:	39001d2e 	bgeu	r7,r4,f560 <_realloc_r+0xd0>
    f4ec:	05bffe04 	movi	r22,-8
    f4f0:	25ac703a 	and	r22,r4,r22
    f4f4:	b00f883a 	mov	r7,r22
    f4f8:	b0006516 	blt	r22,zero,f690 <_realloc_r+0x200>
    f4fc:	b4406436 	bltu	r22,r17,f690 <_realloc_r+0x200>
    f500:	81c01a0e 	bge	r16,r7,f56c <_realloc_r+0xdc>
    f504:	070000b4 	movhi	fp,2
    f508:	e7045004 	addi	fp,fp,4416
    f50c:	e1400217 	ldw	r5,8(fp)
    f510:	ac11883a 	add	r8,r21,r16
    f514:	2a006226 	beq	r5,r8,f6a0 <_realloc_r+0x210>
    f518:	41800117 	ldw	r6,4(r8)
    f51c:	027fff84 	movi	r9,-2
    f520:	3252703a 	and	r9,r6,r9
    f524:	4253883a 	add	r9,r8,r9
    f528:	49000117 	ldw	r4,4(r9)
    f52c:	2100004c 	andi	r4,r4,1
    f530:	2000281e 	bne	r4,zero,f5d4 <_realloc_r+0x144>
    f534:	00bfff04 	movi	r2,-4
    f538:	3084703a 	and	r2,r6,r2
    f53c:	1409883a 	add	r4,r2,r16
    f540:	21c05e16 	blt	r4,r7,f6bc <_realloc_r+0x22c>
    f544:	40800317 	ldw	r2,12(r8)
    f548:	41400217 	ldw	r5,8(r8)
    f54c:	a023883a 	mov	r17,r20
    f550:	2021883a 	mov	r16,r4
    f554:	28800315 	stw	r2,12(r5)
    f558:	11400215 	stw	r5,8(r2)
    f55c:	00000406 	br	f570 <_realloc_r+0xe0>
    f560:	01c00404 	movi	r7,16
    f564:	382d883a 	mov	r22,r7
    f568:	003fe406 	br	f4fc <__alt_mem_Flash_flash_data+0xf400f4fc>
    f56c:	a023883a 	mov	r17,r20
    f570:	858fc83a 	sub	r7,r16,r22
    f574:	008003c4 	movi	r2,15
    f578:	18c0004c 	andi	r3,r3,1
    f57c:	11c07236 	bltu	r2,r7,f748 <_realloc_r+0x2b8>
    f580:	1c06b03a 	or	r3,r3,r16
    f584:	a8c00115 	stw	r3,4(r21)
    f588:	ac21883a 	add	r16,r21,r16
    f58c:	80800117 	ldw	r2,4(r16)
    f590:	10800054 	ori	r2,r2,1
    f594:	80800115 	stw	r2,4(r16)
    f598:	9009883a 	mov	r4,r18
    f59c:	0014da80 	call	14da8 <__malloc_unlock>
    f5a0:	8805883a 	mov	r2,r17
    f5a4:	dfc00917 	ldw	ra,36(sp)
    f5a8:	df000817 	ldw	fp,32(sp)
    f5ac:	ddc00717 	ldw	r23,28(sp)
    f5b0:	dd800617 	ldw	r22,24(sp)
    f5b4:	dd400517 	ldw	r21,20(sp)
    f5b8:	dd000417 	ldw	r20,16(sp)
    f5bc:	dcc00317 	ldw	r19,12(sp)
    f5c0:	dc800217 	ldw	r18,8(sp)
    f5c4:	dc400117 	ldw	r17,4(sp)
    f5c8:	dc000017 	ldw	r16,0(sp)
    f5cc:	dec00a04 	addi	sp,sp,40
    f5d0:	f800283a 	ret
    f5d4:	18c0004c 	andi	r3,r3,1
    f5d8:	1800081e 	bne	r3,zero,f5fc <_realloc_r+0x16c>
    f5dc:	a4fffe17 	ldw	r19,-8(r20)
    f5e0:	00bfff04 	movi	r2,-4
    f5e4:	ace7c83a 	sub	r19,r21,r19
    f5e8:	98c00117 	ldw	r3,4(r19)
    f5ec:	1886703a 	and	r3,r3,r2
    f5f0:	98000226 	beq	r19,zero,f5fc <_realloc_r+0x16c>
    f5f4:	1c2f883a 	add	r23,r3,r16
    f5f8:	b9c06d0e 	bge	r23,r7,f7b0 <_realloc_r+0x320>
    f5fc:	880b883a 	mov	r5,r17
    f600:	9009883a 	mov	r4,r18
    f604:	00068700 	call	6870 <_malloc_r>
    f608:	1023883a 	mov	r17,r2
    f60c:	1000ef26 	beq	r2,zero,f9cc <_realloc_r+0x53c>
    f610:	a0ffff17 	ldw	r3,-4(r20)
    f614:	113ffe04 	addi	r4,r2,-8
    f618:	00bfff84 	movi	r2,-2
    f61c:	1884703a 	and	r2,r3,r2
    f620:	a885883a 	add	r2,r21,r2
    f624:	2080bf26 	beq	r4,r2,f924 <_realloc_r+0x494>
    f628:	81bfff04 	addi	r6,r16,-4
    f62c:	00800904 	movi	r2,36
    f630:	11808936 	bltu	r2,r6,f858 <_realloc_r+0x3c8>
    f634:	00c004c4 	movi	r3,19
    f638:	19806c2e 	bgeu	r3,r6,f7ec <_realloc_r+0x35c>
    f63c:	a0c00017 	ldw	r3,0(r20)
    f640:	88c00015 	stw	r3,0(r17)
    f644:	a0c00117 	ldw	r3,4(r20)
    f648:	88c00115 	stw	r3,4(r17)
    f64c:	00c006c4 	movi	r3,27
    f650:	1980ac36 	bltu	r3,r6,f904 <_realloc_r+0x474>
    f654:	88800204 	addi	r2,r17,8
    f658:	a0c00204 	addi	r3,r20,8
    f65c:	19000017 	ldw	r4,0(r3)
    f660:	11000015 	stw	r4,0(r2)
    f664:	19000117 	ldw	r4,4(r3)
    f668:	11000115 	stw	r4,4(r2)
    f66c:	18c00217 	ldw	r3,8(r3)
    f670:	10c00215 	stw	r3,8(r2)
    f674:	a00b883a 	mov	r5,r20
    f678:	9009883a 	mov	r4,r18
    f67c:	000d5b80 	call	d5b8 <_free_r>
    f680:	9009883a 	mov	r4,r18
    f684:	0014da80 	call	14da8 <__malloc_unlock>
    f688:	8805883a 	mov	r2,r17
    f68c:	003fc506 	br	f5a4 <__alt_mem_Flash_flash_data+0xf400f5a4>
    f690:	00800304 	movi	r2,12
    f694:	90800015 	stw	r2,0(r18)
    f698:	0005883a 	mov	r2,zero
    f69c:	003fc106 	br	f5a4 <__alt_mem_Flash_flash_data+0xf400f5a4>
    f6a0:	29800117 	ldw	r6,4(r5)
    f6a4:	00bfff04 	movi	r2,-4
    f6a8:	b1000404 	addi	r4,r22,16
    f6ac:	3084703a 	and	r2,r6,r2
    f6b0:	140d883a 	add	r6,r2,r16
    f6b4:	31005b0e 	bge	r6,r4,f824 <_realloc_r+0x394>
    f6b8:	2811883a 	mov	r8,r5
    f6bc:	18c0004c 	andi	r3,r3,1
    f6c0:	183fce1e 	bne	r3,zero,f5fc <__alt_mem_Flash_flash_data+0xf400f5fc>
    f6c4:	a4fffe17 	ldw	r19,-8(r20)
    f6c8:	00ffff04 	movi	r3,-4
    f6cc:	ace7c83a 	sub	r19,r21,r19
    f6d0:	99000117 	ldw	r4,4(r19)
    f6d4:	20c6703a 	and	r3,r4,r3
    f6d8:	403fc526 	beq	r8,zero,f5f0 <__alt_mem_Flash_flash_data+0xf400f5f0>
    f6dc:	1c2f883a 	add	r23,r3,r16
    f6e0:	b8af883a 	add	r23,r23,r2
    f6e4:	41406026 	beq	r8,r5,f868 <_realloc_r+0x3d8>
    f6e8:	b9ffc116 	blt	r23,r7,f5f0 <__alt_mem_Flash_flash_data+0xf400f5f0>
    f6ec:	40c00217 	ldw	r3,8(r8)
    f6f0:	40800317 	ldw	r2,12(r8)
    f6f4:	81bfff04 	addi	r6,r16,-4
    f6f8:	01000904 	movi	r4,36
    f6fc:	18800315 	stw	r2,12(r3)
    f700:	10c00215 	stw	r3,8(r2)
    f704:	99400217 	ldw	r5,8(r19)
    f708:	98c00317 	ldw	r3,12(r19)
    f70c:	9c400204 	addi	r17,r19,8
    f710:	28c00315 	stw	r3,12(r5)
    f714:	19400215 	stw	r5,8(r3)
    f718:	21802d36 	bltu	r4,r6,f7d0 <_realloc_r+0x340>
    f71c:	008004c4 	movi	r2,19
    f720:	1180352e 	bgeu	r2,r6,f7f8 <_realloc_r+0x368>
    f724:	a0800017 	ldw	r2,0(r20)
    f728:	98800215 	stw	r2,8(r19)
    f72c:	a0800117 	ldw	r2,4(r20)
    f730:	98800315 	stw	r2,12(r19)
    f734:	008006c4 	movi	r2,27
    f738:	11808036 	bltu	r2,r6,f93c <_realloc_r+0x4ac>
    f73c:	98c00404 	addi	r3,r19,16
    f740:	a5000204 	addi	r20,r20,8
    f744:	00002d06 	br	f7fc <_realloc_r+0x36c>
    f748:	1d86b03a 	or	r3,r3,r22
    f74c:	ad8b883a 	add	r5,r21,r22
    f750:	a8c00115 	stw	r3,4(r21)
    f754:	38800054 	ori	r2,r7,1
    f758:	28800115 	stw	r2,4(r5)
    f75c:	29cf883a 	add	r7,r5,r7
    f760:	38800117 	ldw	r2,4(r7)
    f764:	9009883a 	mov	r4,r18
    f768:	29400204 	addi	r5,r5,8
    f76c:	10800054 	ori	r2,r2,1
    f770:	38800115 	stw	r2,4(r7)
    f774:	000d5b80 	call	d5b8 <_free_r>
    f778:	003f8706 	br	f598 <__alt_mem_Flash_flash_data+0xf400f598>
    f77c:	300b883a 	mov	r5,r6
    f780:	dfc00917 	ldw	ra,36(sp)
    f784:	df000817 	ldw	fp,32(sp)
    f788:	ddc00717 	ldw	r23,28(sp)
    f78c:	dd800617 	ldw	r22,24(sp)
    f790:	dd400517 	ldw	r21,20(sp)
    f794:	dd000417 	ldw	r20,16(sp)
    f798:	dcc00317 	ldw	r19,12(sp)
    f79c:	dc800217 	ldw	r18,8(sp)
    f7a0:	dc400117 	ldw	r17,4(sp)
    f7a4:	dc000017 	ldw	r16,0(sp)
    f7a8:	dec00a04 	addi	sp,sp,40
    f7ac:	00068701 	jmpi	6870 <_malloc_r>
    f7b0:	98800317 	ldw	r2,12(r19)
    f7b4:	98c00217 	ldw	r3,8(r19)
    f7b8:	81bfff04 	addi	r6,r16,-4
    f7bc:	01000904 	movi	r4,36
    f7c0:	18800315 	stw	r2,12(r3)
    f7c4:	10c00215 	stw	r3,8(r2)
    f7c8:	9c400204 	addi	r17,r19,8
    f7cc:	21bfd32e 	bgeu	r4,r6,f71c <__alt_mem_Flash_flash_data+0xf400f71c>
    f7d0:	8809883a 	mov	r4,r17
    f7d4:	a00b883a 	mov	r5,r20
    f7d8:	000e2700 	call	e270 <memmove>
    f7dc:	98c00117 	ldw	r3,4(r19)
    f7e0:	b821883a 	mov	r16,r23
    f7e4:	982b883a 	mov	r21,r19
    f7e8:	003f6106 	br	f570 <__alt_mem_Flash_flash_data+0xf400f570>
    f7ec:	8805883a 	mov	r2,r17
    f7f0:	a007883a 	mov	r3,r20
    f7f4:	003f9906 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f7f8:	8807883a 	mov	r3,r17
    f7fc:	a0800017 	ldw	r2,0(r20)
    f800:	b821883a 	mov	r16,r23
    f804:	982b883a 	mov	r21,r19
    f808:	18800015 	stw	r2,0(r3)
    f80c:	a0800117 	ldw	r2,4(r20)
    f810:	18800115 	stw	r2,4(r3)
    f814:	a0800217 	ldw	r2,8(r20)
    f818:	18800215 	stw	r2,8(r3)
    f81c:	98c00117 	ldw	r3,4(r19)
    f820:	003f5306 	br	f570 <__alt_mem_Flash_flash_data+0xf400f570>
    f824:	adab883a 	add	r21,r21,r22
    f828:	3585c83a 	sub	r2,r6,r22
    f82c:	e5400215 	stw	r21,8(fp)
    f830:	10800054 	ori	r2,r2,1
    f834:	a8800115 	stw	r2,4(r21)
    f838:	a0bfff17 	ldw	r2,-4(r20)
    f83c:	9009883a 	mov	r4,r18
    f840:	1080004c 	andi	r2,r2,1
    f844:	b0acb03a 	or	r22,r22,r2
    f848:	a5bfff15 	stw	r22,-4(r20)
    f84c:	0014da80 	call	14da8 <__malloc_unlock>
    f850:	a005883a 	mov	r2,r20
    f854:	003f5306 	br	f5a4 <__alt_mem_Flash_flash_data+0xf400f5a4>
    f858:	8809883a 	mov	r4,r17
    f85c:	a00b883a 	mov	r5,r20
    f860:	000e2700 	call	e270 <memmove>
    f864:	003f8306 	br	f674 <__alt_mem_Flash_flash_data+0xf400f674>
    f868:	b0800404 	addi	r2,r22,16
    f86c:	b8bf6016 	blt	r23,r2,f5f0 <__alt_mem_Flash_flash_data+0xf400f5f0>
    f870:	98800317 	ldw	r2,12(r19)
    f874:	98c00217 	ldw	r3,8(r19)
    f878:	81bfff04 	addi	r6,r16,-4
    f87c:	01000904 	movi	r4,36
    f880:	18800315 	stw	r2,12(r3)
    f884:	10c00215 	stw	r3,8(r2)
    f888:	9c400204 	addi	r17,r19,8
    f88c:	21804336 	bltu	r4,r6,f99c <_realloc_r+0x50c>
    f890:	008004c4 	movi	r2,19
    f894:	11803f2e 	bgeu	r2,r6,f994 <_realloc_r+0x504>
    f898:	a0800017 	ldw	r2,0(r20)
    f89c:	98800215 	stw	r2,8(r19)
    f8a0:	a0800117 	ldw	r2,4(r20)
    f8a4:	98800315 	stw	r2,12(r19)
    f8a8:	008006c4 	movi	r2,27
    f8ac:	11803f36 	bltu	r2,r6,f9ac <_realloc_r+0x51c>
    f8b0:	98800404 	addi	r2,r19,16
    f8b4:	a5000204 	addi	r20,r20,8
    f8b8:	a0c00017 	ldw	r3,0(r20)
    f8bc:	10c00015 	stw	r3,0(r2)
    f8c0:	a0c00117 	ldw	r3,4(r20)
    f8c4:	10c00115 	stw	r3,4(r2)
    f8c8:	a0c00217 	ldw	r3,8(r20)
    f8cc:	10c00215 	stw	r3,8(r2)
    f8d0:	9d87883a 	add	r3,r19,r22
    f8d4:	bd85c83a 	sub	r2,r23,r22
    f8d8:	e0c00215 	stw	r3,8(fp)
    f8dc:	10800054 	ori	r2,r2,1
    f8e0:	18800115 	stw	r2,4(r3)
    f8e4:	98800117 	ldw	r2,4(r19)
    f8e8:	9009883a 	mov	r4,r18
    f8ec:	1080004c 	andi	r2,r2,1
    f8f0:	b0acb03a 	or	r22,r22,r2
    f8f4:	9d800115 	stw	r22,4(r19)
    f8f8:	0014da80 	call	14da8 <__malloc_unlock>
    f8fc:	8805883a 	mov	r2,r17
    f900:	003f2806 	br	f5a4 <__alt_mem_Flash_flash_data+0xf400f5a4>
    f904:	a0c00217 	ldw	r3,8(r20)
    f908:	88c00215 	stw	r3,8(r17)
    f90c:	a0c00317 	ldw	r3,12(r20)
    f910:	88c00315 	stw	r3,12(r17)
    f914:	30801126 	beq	r6,r2,f95c <_realloc_r+0x4cc>
    f918:	88800404 	addi	r2,r17,16
    f91c:	a0c00404 	addi	r3,r20,16
    f920:	003f4e06 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f924:	893fff17 	ldw	r4,-4(r17)
    f928:	00bfff04 	movi	r2,-4
    f92c:	a023883a 	mov	r17,r20
    f930:	2084703a 	and	r2,r4,r2
    f934:	80a1883a 	add	r16,r16,r2
    f938:	003f0d06 	br	f570 <__alt_mem_Flash_flash_data+0xf400f570>
    f93c:	a0800217 	ldw	r2,8(r20)
    f940:	98800415 	stw	r2,16(r19)
    f944:	a0800317 	ldw	r2,12(r20)
    f948:	98800515 	stw	r2,20(r19)
    f94c:	31000a26 	beq	r6,r4,f978 <_realloc_r+0x4e8>
    f950:	98c00604 	addi	r3,r19,24
    f954:	a5000404 	addi	r20,r20,16
    f958:	003fa806 	br	f7fc <__alt_mem_Flash_flash_data+0xf400f7fc>
    f95c:	a1000417 	ldw	r4,16(r20)
    f960:	88800604 	addi	r2,r17,24
    f964:	a0c00604 	addi	r3,r20,24
    f968:	89000415 	stw	r4,16(r17)
    f96c:	a1000517 	ldw	r4,20(r20)
    f970:	89000515 	stw	r4,20(r17)
    f974:	003f3906 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f978:	a0800417 	ldw	r2,16(r20)
    f97c:	a5000604 	addi	r20,r20,24
    f980:	98c00804 	addi	r3,r19,32
    f984:	98800615 	stw	r2,24(r19)
    f988:	a0bfff17 	ldw	r2,-4(r20)
    f98c:	98800715 	stw	r2,28(r19)
    f990:	003f9a06 	br	f7fc <__alt_mem_Flash_flash_data+0xf400f7fc>
    f994:	8805883a 	mov	r2,r17
    f998:	003fc706 	br	f8b8 <__alt_mem_Flash_flash_data+0xf400f8b8>
    f99c:	8809883a 	mov	r4,r17
    f9a0:	a00b883a 	mov	r5,r20
    f9a4:	000e2700 	call	e270 <memmove>
    f9a8:	003fc906 	br	f8d0 <__alt_mem_Flash_flash_data+0xf400f8d0>
    f9ac:	a0800217 	ldw	r2,8(r20)
    f9b0:	98800415 	stw	r2,16(r19)
    f9b4:	a0800317 	ldw	r2,12(r20)
    f9b8:	98800515 	stw	r2,20(r19)
    f9bc:	31000726 	beq	r6,r4,f9dc <_realloc_r+0x54c>
    f9c0:	98800604 	addi	r2,r19,24
    f9c4:	a5000404 	addi	r20,r20,16
    f9c8:	003fbb06 	br	f8b8 <__alt_mem_Flash_flash_data+0xf400f8b8>
    f9cc:	9009883a 	mov	r4,r18
    f9d0:	0014da80 	call	14da8 <__malloc_unlock>
    f9d4:	0005883a 	mov	r2,zero
    f9d8:	003ef206 	br	f5a4 <__alt_mem_Flash_flash_data+0xf400f5a4>
    f9dc:	a0c00417 	ldw	r3,16(r20)
    f9e0:	a5000604 	addi	r20,r20,24
    f9e4:	98800804 	addi	r2,r19,32
    f9e8:	98c00615 	stw	r3,24(r19)
    f9ec:	a0ffff17 	ldw	r3,-4(r20)
    f9f0:	98c00715 	stw	r3,28(r19)
    f9f4:	003fb006 	br	f8b8 <__alt_mem_Flash_flash_data+0xf400f8b8>

0000f9f8 <__fpclassifyd>:
    f9f8:	00a00034 	movhi	r2,32768
    f9fc:	10bfffc4 	addi	r2,r2,-1
    fa00:	2884703a 	and	r2,r5,r2
    fa04:	10000726 	beq	r2,zero,fa24 <__fpclassifyd+0x2c>
    fa08:	00fffc34 	movhi	r3,65520
    fa0c:	019ff834 	movhi	r6,32736
    fa10:	28c7883a 	add	r3,r5,r3
    fa14:	31bfffc4 	addi	r6,r6,-1
    fa18:	30c00536 	bltu	r6,r3,fa30 <__fpclassifyd+0x38>
    fa1c:	00800104 	movi	r2,4
    fa20:	f800283a 	ret
    fa24:	2000021e 	bne	r4,zero,fa30 <__fpclassifyd+0x38>
    fa28:	00800084 	movi	r2,2
    fa2c:	f800283a 	ret
    fa30:	00dffc34 	movhi	r3,32752
    fa34:	019ff834 	movhi	r6,32736
    fa38:	28cb883a 	add	r5,r5,r3
    fa3c:	31bfffc4 	addi	r6,r6,-1
    fa40:	317ff62e 	bgeu	r6,r5,fa1c <__alt_mem_Flash_flash_data+0xf400fa1c>
    fa44:	01400434 	movhi	r5,16
    fa48:	297fffc4 	addi	r5,r5,-1
    fa4c:	28800236 	bltu	r5,r2,fa58 <__fpclassifyd+0x60>
    fa50:	008000c4 	movi	r2,3
    fa54:	f800283a 	ret
    fa58:	10c00226 	beq	r2,r3,fa64 <__fpclassifyd+0x6c>
    fa5c:	0005883a 	mov	r2,zero
    fa60:	f800283a 	ret
    fa64:	2005003a 	cmpeq	r2,r4,zero
    fa68:	f800283a 	ret

0000fa6c <__sread>:
    fa6c:	defffe04 	addi	sp,sp,-8
    fa70:	dc000015 	stw	r16,0(sp)
    fa74:	2821883a 	mov	r16,r5
    fa78:	2940038f 	ldh	r5,14(r5)
    fa7c:	dfc00115 	stw	ra,4(sp)
    fa80:	00128740 	call	12874 <_read_r>
    fa84:	10000716 	blt	r2,zero,faa4 <__sread+0x38>
    fa88:	80c01417 	ldw	r3,80(r16)
    fa8c:	1887883a 	add	r3,r3,r2
    fa90:	80c01415 	stw	r3,80(r16)
    fa94:	dfc00117 	ldw	ra,4(sp)
    fa98:	dc000017 	ldw	r16,0(sp)
    fa9c:	dec00204 	addi	sp,sp,8
    faa0:	f800283a 	ret
    faa4:	80c0030b 	ldhu	r3,12(r16)
    faa8:	18fbffcc 	andi	r3,r3,61439
    faac:	80c0030d 	sth	r3,12(r16)
    fab0:	dfc00117 	ldw	ra,4(sp)
    fab4:	dc000017 	ldw	r16,0(sp)
    fab8:	dec00204 	addi	sp,sp,8
    fabc:	f800283a 	ret

0000fac0 <__seofread>:
    fac0:	0005883a 	mov	r2,zero
    fac4:	f800283a 	ret

0000fac8 <__swrite>:
    fac8:	2880030b 	ldhu	r2,12(r5)
    facc:	defffb04 	addi	sp,sp,-20
    fad0:	dcc00315 	stw	r19,12(sp)
    fad4:	dc800215 	stw	r18,8(sp)
    fad8:	dc400115 	stw	r17,4(sp)
    fadc:	dc000015 	stw	r16,0(sp)
    fae0:	dfc00415 	stw	ra,16(sp)
    fae4:	10c0400c 	andi	r3,r2,256
    fae8:	2821883a 	mov	r16,r5
    faec:	2027883a 	mov	r19,r4
    faf0:	3025883a 	mov	r18,r6
    faf4:	3823883a 	mov	r17,r7
    faf8:	18000526 	beq	r3,zero,fb10 <__swrite+0x48>
    fafc:	2940038f 	ldh	r5,14(r5)
    fb00:	000d883a 	mov	r6,zero
    fb04:	01c00084 	movi	r7,2
    fb08:	00128180 	call	12818 <_lseek_r>
    fb0c:	8080030b 	ldhu	r2,12(r16)
    fb10:	8140038f 	ldh	r5,14(r16)
    fb14:	10bbffcc 	andi	r2,r2,61439
    fb18:	9809883a 	mov	r4,r19
    fb1c:	900d883a 	mov	r6,r18
    fb20:	880f883a 	mov	r7,r17
    fb24:	8080030d 	sth	r2,12(r16)
    fb28:	dfc00417 	ldw	ra,16(sp)
    fb2c:	dcc00317 	ldw	r19,12(sp)
    fb30:	dc800217 	ldw	r18,8(sp)
    fb34:	dc400117 	ldw	r17,4(sp)
    fb38:	dc000017 	ldw	r16,0(sp)
    fb3c:	dec00504 	addi	sp,sp,20
    fb40:	00123141 	jmpi	12314 <_write_r>

0000fb44 <__sseek>:
    fb44:	defffe04 	addi	sp,sp,-8
    fb48:	dc000015 	stw	r16,0(sp)
    fb4c:	2821883a 	mov	r16,r5
    fb50:	2940038f 	ldh	r5,14(r5)
    fb54:	dfc00115 	stw	ra,4(sp)
    fb58:	00128180 	call	12818 <_lseek_r>
    fb5c:	00ffffc4 	movi	r3,-1
    fb60:	10c00826 	beq	r2,r3,fb84 <__sseek+0x40>
    fb64:	80c0030b 	ldhu	r3,12(r16)
    fb68:	80801415 	stw	r2,80(r16)
    fb6c:	18c40014 	ori	r3,r3,4096
    fb70:	80c0030d 	sth	r3,12(r16)
    fb74:	dfc00117 	ldw	ra,4(sp)
    fb78:	dc000017 	ldw	r16,0(sp)
    fb7c:	dec00204 	addi	sp,sp,8
    fb80:	f800283a 	ret
    fb84:	80c0030b 	ldhu	r3,12(r16)
    fb88:	18fbffcc 	andi	r3,r3,61439
    fb8c:	80c0030d 	sth	r3,12(r16)
    fb90:	dfc00117 	ldw	ra,4(sp)
    fb94:	dc000017 	ldw	r16,0(sp)
    fb98:	dec00204 	addi	sp,sp,8
    fb9c:	f800283a 	ret

0000fba0 <__sclose>:
    fba0:	2940038f 	ldh	r5,14(r5)
    fba4:	00123701 	jmpi	12370 <_close_r>

0000fba8 <strcmp>:
    fba8:	2144b03a 	or	r2,r4,r5
    fbac:	108000cc 	andi	r2,r2,3
    fbb0:	1000171e 	bne	r2,zero,fc10 <strcmp+0x68>
    fbb4:	20800017 	ldw	r2,0(r4)
    fbb8:	28c00017 	ldw	r3,0(r5)
    fbbc:	10c0141e 	bne	r2,r3,fc10 <strcmp+0x68>
    fbc0:	027fbff4 	movhi	r9,65279
    fbc4:	4a7fbfc4 	addi	r9,r9,-257
    fbc8:	0086303a 	nor	r3,zero,r2
    fbcc:	02202074 	movhi	r8,32897
    fbd0:	1245883a 	add	r2,r2,r9
    fbd4:	42202004 	addi	r8,r8,-32640
    fbd8:	10c4703a 	and	r2,r2,r3
    fbdc:	1204703a 	and	r2,r2,r8
    fbe0:	10000226 	beq	r2,zero,fbec <strcmp+0x44>
    fbe4:	00001706 	br	fc44 <strcmp+0x9c>
    fbe8:	1000161e 	bne	r2,zero,fc44 <strcmp+0x9c>
    fbec:	21000104 	addi	r4,r4,4
    fbf0:	20c00017 	ldw	r3,0(r4)
    fbf4:	29400104 	addi	r5,r5,4
    fbf8:	29800017 	ldw	r6,0(r5)
    fbfc:	1a4f883a 	add	r7,r3,r9
    fc00:	00c4303a 	nor	r2,zero,r3
    fc04:	3884703a 	and	r2,r7,r2
    fc08:	1204703a 	and	r2,r2,r8
    fc0c:	19bff626 	beq	r3,r6,fbe8 <__alt_mem_Flash_flash_data+0xf400fbe8>
    fc10:	20800007 	ldb	r2,0(r4)
    fc14:	1000051e 	bne	r2,zero,fc2c <strcmp+0x84>
    fc18:	00000606 	br	fc34 <strcmp+0x8c>
    fc1c:	21000044 	addi	r4,r4,1
    fc20:	20800007 	ldb	r2,0(r4)
    fc24:	29400044 	addi	r5,r5,1
    fc28:	10000226 	beq	r2,zero,fc34 <strcmp+0x8c>
    fc2c:	28c00007 	ldb	r3,0(r5)
    fc30:	10fffa26 	beq	r2,r3,fc1c <__alt_mem_Flash_flash_data+0xf400fc1c>
    fc34:	20800003 	ldbu	r2,0(r4)
    fc38:	28c00003 	ldbu	r3,0(r5)
    fc3c:	10c5c83a 	sub	r2,r2,r3
    fc40:	f800283a 	ret
    fc44:	0005883a 	mov	r2,zero
    fc48:	f800283a 	ret

0000fc4c <__ssprint_r>:
    fc4c:	30800217 	ldw	r2,8(r6)
    fc50:	defff604 	addi	sp,sp,-40
    fc54:	ddc00715 	stw	r23,28(sp)
    fc58:	dc800215 	stw	r18,8(sp)
    fc5c:	dfc00915 	stw	ra,36(sp)
    fc60:	df000815 	stw	fp,32(sp)
    fc64:	dd800615 	stw	r22,24(sp)
    fc68:	dd400515 	stw	r21,20(sp)
    fc6c:	dd000415 	stw	r20,16(sp)
    fc70:	dcc00315 	stw	r19,12(sp)
    fc74:	dc400115 	stw	r17,4(sp)
    fc78:	dc000015 	stw	r16,0(sp)
    fc7c:	3025883a 	mov	r18,r6
    fc80:	35c00017 	ldw	r23,0(r6)
    fc84:	10005626 	beq	r2,zero,fde0 <__ssprint_r+0x194>
    fc88:	2027883a 	mov	r19,r4
    fc8c:	28800217 	ldw	r2,8(r5)
    fc90:	29000017 	ldw	r4,0(r5)
    fc94:	2823883a 	mov	r17,r5
    fc98:	0039883a 	mov	fp,zero
    fc9c:	0021883a 	mov	r16,zero
    fca0:	80003926 	beq	r16,zero,fd88 <__ssprint_r+0x13c>
    fca4:	102b883a 	mov	r21,r2
    fca8:	102d883a 	mov	r22,r2
    fcac:	80803a36 	bltu	r16,r2,fd98 <__ssprint_r+0x14c>
    fcb0:	88c0030b 	ldhu	r3,12(r17)
    fcb4:	1881200c 	andi	r2,r3,1152
    fcb8:	10002626 	beq	r2,zero,fd54 <__ssprint_r+0x108>
    fcbc:	88800517 	ldw	r2,20(r17)
    fcc0:	89400417 	ldw	r5,16(r17)
    fcc4:	81c00044 	addi	r7,r16,1
    fcc8:	108d883a 	add	r6,r2,r2
    fccc:	3085883a 	add	r2,r6,r2
    fcd0:	100cd7fa 	srli	r6,r2,31
    fcd4:	216dc83a 	sub	r22,r4,r5
    fcd8:	3d89883a 	add	r4,r7,r22
    fcdc:	3085883a 	add	r2,r6,r2
    fce0:	102bd07a 	srai	r21,r2,1
    fce4:	a80d883a 	mov	r6,r21
    fce8:	a900022e 	bgeu	r21,r4,fcf4 <__ssprint_r+0xa8>
    fcec:	202b883a 	mov	r21,r4
    fcf0:	200d883a 	mov	r6,r4
    fcf4:	18c1000c 	andi	r3,r3,1024
    fcf8:	9809883a 	mov	r4,r19
    fcfc:	18002926 	beq	r3,zero,fda4 <__ssprint_r+0x158>
    fd00:	300b883a 	mov	r5,r6
    fd04:	00068700 	call	6870 <_malloc_r>
    fd08:	1029883a 	mov	r20,r2
    fd0c:	10002b26 	beq	r2,zero,fdbc <__ssprint_r+0x170>
    fd10:	89400417 	ldw	r5,16(r17)
    fd14:	1009883a 	mov	r4,r2
    fd18:	b00d883a 	mov	r6,r22
    fd1c:	00070180 	call	7018 <memcpy>
    fd20:	8880030b 	ldhu	r2,12(r17)
    fd24:	00fedfc4 	movi	r3,-1153
    fd28:	10c4703a 	and	r2,r2,r3
    fd2c:	10802014 	ori	r2,r2,128
    fd30:	8880030d 	sth	r2,12(r17)
    fd34:	a589883a 	add	r4,r20,r22
    fd38:	adadc83a 	sub	r22,r21,r22
    fd3c:	8d400515 	stw	r21,20(r17)
    fd40:	8d800215 	stw	r22,8(r17)
    fd44:	8d000415 	stw	r20,16(r17)
    fd48:	89000015 	stw	r4,0(r17)
    fd4c:	802b883a 	mov	r21,r16
    fd50:	802d883a 	mov	r22,r16
    fd54:	e00b883a 	mov	r5,fp
    fd58:	b00d883a 	mov	r6,r22
    fd5c:	000e2700 	call	e270 <memmove>
    fd60:	88800217 	ldw	r2,8(r17)
    fd64:	89000017 	ldw	r4,0(r17)
    fd68:	90c00217 	ldw	r3,8(r18)
    fd6c:	1545c83a 	sub	r2,r2,r21
    fd70:	2589883a 	add	r4,r4,r22
    fd74:	88800215 	stw	r2,8(r17)
    fd78:	89000015 	stw	r4,0(r17)
    fd7c:	1c21c83a 	sub	r16,r3,r16
    fd80:	94000215 	stw	r16,8(r18)
    fd84:	80001626 	beq	r16,zero,fde0 <__ssprint_r+0x194>
    fd88:	bf000017 	ldw	fp,0(r23)
    fd8c:	bc000117 	ldw	r16,4(r23)
    fd90:	bdc00204 	addi	r23,r23,8
    fd94:	003fc206 	br	fca0 <__alt_mem_Flash_flash_data+0xf400fca0>
    fd98:	802b883a 	mov	r21,r16
    fd9c:	802d883a 	mov	r22,r16
    fda0:	003fec06 	br	fd54 <__alt_mem_Flash_flash_data+0xf400fd54>
    fda4:	000f4900 	call	f490 <_realloc_r>
    fda8:	1029883a 	mov	r20,r2
    fdac:	103fe11e 	bne	r2,zero,fd34 <__alt_mem_Flash_flash_data+0xf400fd34>
    fdb0:	89400417 	ldw	r5,16(r17)
    fdb4:	9809883a 	mov	r4,r19
    fdb8:	000d5b80 	call	d5b8 <_free_r>
    fdbc:	88c0030b 	ldhu	r3,12(r17)
    fdc0:	00800304 	movi	r2,12
    fdc4:	98800015 	stw	r2,0(r19)
    fdc8:	18c01014 	ori	r3,r3,64
    fdcc:	88c0030d 	sth	r3,12(r17)
    fdd0:	00bfffc4 	movi	r2,-1
    fdd4:	90000215 	stw	zero,8(r18)
    fdd8:	90000115 	stw	zero,4(r18)
    fddc:	00000206 	br	fde8 <__ssprint_r+0x19c>
    fde0:	90000115 	stw	zero,4(r18)
    fde4:	0005883a 	mov	r2,zero
    fde8:	dfc00917 	ldw	ra,36(sp)
    fdec:	df000817 	ldw	fp,32(sp)
    fdf0:	ddc00717 	ldw	r23,28(sp)
    fdf4:	dd800617 	ldw	r22,24(sp)
    fdf8:	dd400517 	ldw	r21,20(sp)
    fdfc:	dd000417 	ldw	r20,16(sp)
    fe00:	dcc00317 	ldw	r19,12(sp)
    fe04:	dc800217 	ldw	r18,8(sp)
    fe08:	dc400117 	ldw	r17,4(sp)
    fe0c:	dc000017 	ldw	r16,0(sp)
    fe10:	dec00a04 	addi	sp,sp,40
    fe14:	f800283a 	ret

0000fe18 <___svfiprintf_internal_r>:
    fe18:	2880030b 	ldhu	r2,12(r5)
    fe1c:	deffc904 	addi	sp,sp,-220
    fe20:	dd403215 	stw	r21,200(sp)
    fe24:	dfc03615 	stw	ra,216(sp)
    fe28:	df003515 	stw	fp,212(sp)
    fe2c:	ddc03415 	stw	r23,208(sp)
    fe30:	dd803315 	stw	r22,204(sp)
    fe34:	dd003115 	stw	r20,196(sp)
    fe38:	dcc03015 	stw	r19,192(sp)
    fe3c:	dc802f15 	stw	r18,188(sp)
    fe40:	dc402e15 	stw	r17,184(sp)
    fe44:	dc002d15 	stw	r16,180(sp)
    fe48:	d9402715 	stw	r5,156(sp)
    fe4c:	d9002915 	stw	r4,164(sp)
    fe50:	1080200c 	andi	r2,r2,128
    fe54:	d9c02315 	stw	r7,140(sp)
    fe58:	302b883a 	mov	r21,r6
    fe5c:	10000226 	beq	r2,zero,fe68 <___svfiprintf_internal_r+0x50>
    fe60:	28800417 	ldw	r2,16(r5)
    fe64:	1003ce26 	beq	r2,zero,10da0 <___svfiprintf_internal_r+0xf88>
    fe68:	dac01a04 	addi	r11,sp,104
    fe6c:	da8019c4 	addi	r10,sp,103
    fe70:	dc802917 	ldw	r18,164(sp)
    fe74:	dd002717 	ldw	r20,156(sp)
    fe78:	04c000b4 	movhi	r19,2
    fe7c:	dac01e15 	stw	r11,120(sp)
    fe80:	5a97c83a 	sub	r11,r11,r10
    fe84:	9cc38504 	addi	r19,r19,3604
    fe88:	da801f15 	stw	r10,124(sp)
    fe8c:	dec01a15 	stw	sp,104(sp)
    fe90:	d8001c15 	stw	zero,112(sp)
    fe94:	d8001b15 	stw	zero,108(sp)
    fe98:	d811883a 	mov	r8,sp
    fe9c:	d8002a15 	stw	zero,168(sp)
    fea0:	d8002415 	stw	zero,144(sp)
    fea4:	dac02b15 	stw	r11,172(sp)
    fea8:	a8800007 	ldb	r2,0(r21)
    feac:	10026a26 	beq	r2,zero,10858 <___svfiprintf_internal_r+0xa40>
    feb0:	01000944 	movi	r4,37
    feb4:	11026826 	beq	r2,r4,10858 <___svfiprintf_internal_r+0xa40>
    feb8:	a805883a 	mov	r2,r21
    febc:	00000106 	br	fec4 <___svfiprintf_internal_r+0xac>
    fec0:	19000326 	beq	r3,r4,fed0 <___svfiprintf_internal_r+0xb8>
    fec4:	10800044 	addi	r2,r2,1
    fec8:	10c00007 	ldb	r3,0(r2)
    fecc:	183ffc1e 	bne	r3,zero,fec0 <__alt_mem_Flash_flash_data+0xf400fec0>
    fed0:	1561c83a 	sub	r16,r2,r21
    fed4:	102d883a 	mov	r22,r2
    fed8:	80000e26 	beq	r16,zero,ff14 <___svfiprintf_internal_r+0xfc>
    fedc:	d8c01c17 	ldw	r3,112(sp)
    fee0:	d8801b17 	ldw	r2,108(sp)
    fee4:	45400015 	stw	r21,0(r8)
    fee8:	1c07883a 	add	r3,r3,r16
    feec:	10800044 	addi	r2,r2,1
    fef0:	d8c01c15 	stw	r3,112(sp)
    fef4:	44000115 	stw	r16,4(r8)
    fef8:	d8801b15 	stw	r2,108(sp)
    fefc:	00c001c4 	movi	r3,7
    ff00:	1882d816 	blt	r3,r2,10a64 <___svfiprintf_internal_r+0xc4c>
    ff04:	42000204 	addi	r8,r8,8
    ff08:	da802417 	ldw	r10,144(sp)
    ff0c:	5415883a 	add	r10,r10,r16
    ff10:	da802415 	stw	r10,144(sp)
    ff14:	b0800007 	ldb	r2,0(r22)
    ff18:	10027526 	beq	r2,zero,108f0 <___svfiprintf_internal_r+0xad8>
    ff1c:	b1000047 	ldb	r4,1(r22)
    ff20:	b5400044 	addi	r21,r22,1
    ff24:	d8001d85 	stb	zero,118(sp)
    ff28:	000d883a 	mov	r6,zero
    ff2c:	043fffc4 	movi	r16,-1
    ff30:	d8002115 	stw	zero,132(sp)
    ff34:	0023883a 	mov	r17,zero
    ff38:	00c01604 	movi	r3,88
    ff3c:	01400244 	movi	r5,9
    ff40:	02400a84 	movi	r9,42
    ff44:	01c01b04 	movi	r7,108
    ff48:	ad400044 	addi	r21,r21,1
    ff4c:	20bff804 	addi	r2,r4,-32
    ff50:	18819736 	bltu	r3,r2,105b0 <___svfiprintf_internal_r+0x798>
    ff54:	100490ba 	slli	r2,r2,2
    ff58:	02c00074 	movhi	r11,1
    ff5c:	5affdb04 	addi	r11,r11,-148
    ff60:	12c5883a 	add	r2,r2,r11
    ff64:	10800017 	ldw	r2,0(r2)
    ff68:	1000683a 	jmp	r2
    ff6c:	000104a8 	cmpgeui	zero,zero,1042
    ff70:	000105b0 	cmpltui	zero,zero,1046
    ff74:	000105b0 	cmpltui	zero,zero,1046
    ff78:	0001049c 	xori	zero,zero,1042
    ff7c:	000105b0 	cmpltui	zero,zero,1046
    ff80:	000105b0 	cmpltui	zero,zero,1046
    ff84:	000105b0 	cmpltui	zero,zero,1046
    ff88:	000105b0 	cmpltui	zero,zero,1046
    ff8c:	000105b0 	cmpltui	zero,zero,1046
    ff90:	000105b0 	cmpltui	zero,zero,1046
    ff94:	000101c8 	cmpgei	zero,zero,1031
    ff98:	000105e4 	muli	zero,zero,1047
    ff9c:	000105b0 	cmpltui	zero,zero,1046
    ffa0:	000101f0 	cmpltui	zero,zero,1031
    ffa4:	000105f0 	cmpltui	zero,zero,1047
    ffa8:	000105b0 	cmpltui	zero,zero,1046
    ffac:	000105d8 	cmpnei	zero,zero,1047
    ffb0:	00010578 	rdprs	zero,zero,1045
    ffb4:	00010578 	rdprs	zero,zero,1045
    ffb8:	00010578 	rdprs	zero,zero,1045
    ffbc:	00010578 	rdprs	zero,zero,1045
    ffc0:	00010578 	rdprs	zero,zero,1045
    ffc4:	00010578 	rdprs	zero,zero,1045
    ffc8:	00010578 	rdprs	zero,zero,1045
    ffcc:	00010578 	rdprs	zero,zero,1045
    ffd0:	00010578 	rdprs	zero,zero,1045
    ffd4:	000105b0 	cmpltui	zero,zero,1046
    ffd8:	000105b0 	cmpltui	zero,zero,1046
    ffdc:	000105b0 	cmpltui	zero,zero,1046
    ffe0:	000105b0 	cmpltui	zero,zero,1046
    ffe4:	000105b0 	cmpltui	zero,zero,1046
    ffe8:	000105b0 	cmpltui	zero,zero,1046
    ffec:	000105b0 	cmpltui	zero,zero,1046
    fff0:	000105b0 	cmpltui	zero,zero,1046
    fff4:	000105b0 	cmpltui	zero,zero,1046
    fff8:	000105b0 	cmpltui	zero,zero,1046
    fffc:	00010510 	cmplti	zero,zero,1044
   10000:	000105b0 	cmpltui	zero,zero,1046
   10004:	000105b0 	cmpltui	zero,zero,1046
   10008:	000105b0 	cmpltui	zero,zero,1046
   1000c:	000105b0 	cmpltui	zero,zero,1046
   10010:	000105b0 	cmpltui	zero,zero,1046
   10014:	000105b0 	cmpltui	zero,zero,1046
   10018:	000105b0 	cmpltui	zero,zero,1046
   1001c:	000105b0 	cmpltui	zero,zero,1046
   10020:	000105b0 	cmpltui	zero,zero,1046
   10024:	000105b0 	cmpltui	zero,zero,1046
   10028:	0001019c 	xori	zero,zero,1030
   1002c:	000105b0 	cmpltui	zero,zero,1046
   10030:	000105b0 	cmpltui	zero,zero,1046
   10034:	000105b0 	cmpltui	zero,zero,1046
   10038:	000105b0 	cmpltui	zero,zero,1046
   1003c:	000105b0 	cmpltui	zero,zero,1046
   10040:	000100d0 	cmplti	zero,zero,1027
   10044:	000105b0 	cmpltui	zero,zero,1046
   10048:	000105b0 	cmpltui	zero,zero,1046
   1004c:	000103fc 	xorhi	zero,zero,1039
   10050:	000105b0 	cmpltui	zero,zero,1046
   10054:	000105b0 	cmpltui	zero,zero,1046
   10058:	000105b0 	cmpltui	zero,zero,1046
   1005c:	000105b0 	cmpltui	zero,zero,1046
   10060:	000105b0 	cmpltui	zero,zero,1046
   10064:	000105b0 	cmpltui	zero,zero,1046
   10068:	000105b0 	cmpltui	zero,zero,1046
   1006c:	000105b0 	cmpltui	zero,zero,1046
   10070:	000105b0 	cmpltui	zero,zero,1046
   10074:	000105b0 	cmpltui	zero,zero,1046
   10078:	000102e8 	cmpgeui	zero,zero,1035
   1007c:	000102a8 	cmpgeui	zero,zero,1034
   10080:	000105b0 	cmpltui	zero,zero,1046
   10084:	000105b0 	cmpltui	zero,zero,1046
   10088:	000105b0 	cmpltui	zero,zero,1046
   1008c:	00010458 	cmpnei	zero,zero,1041
   10090:	000102a8 	cmpgeui	zero,zero,1034
   10094:	000105b0 	cmpltui	zero,zero,1046
   10098:	000105b0 	cmpltui	zero,zero,1046
   1009c:	00010444 	movi	zero,1041
   100a0:	000105b0 	cmpltui	zero,zero,1046
   100a4:	00010464 	muli	zero,zero,1041
   100a8:	000101a0 	cmpeqi	zero,zero,1030
   100ac:	00010264 	muli	zero,zero,1033
   100b0:	00010258 	cmpnei	zero,zero,1033
   100b4:	000105b0 	cmpltui	zero,zero,1046
   100b8:	000101fc 	xorhi	zero,zero,1031
   100bc:	000105b0 	cmpltui	zero,zero,1046
   100c0:	000100d4 	movui	zero,1027
   100c4:	000105b0 	cmpltui	zero,zero,1046
   100c8:	000105b0 	cmpltui	zero,zero,1046
   100cc:	000104c4 	movi	zero,1043
   100d0:	8c400414 	ori	r17,r17,16
   100d4:	8880080c 	andi	r2,r17,32
   100d8:	10029626 	beq	r2,zero,10b34 <___svfiprintf_internal_r+0xd1c>
   100dc:	da802317 	ldw	r10,140(sp)
   100e0:	dac02317 	ldw	r11,140(sp)
   100e4:	00800044 	movi	r2,1
   100e8:	52400017 	ldw	r9,0(r10)
   100ec:	52800117 	ldw	r10,4(r10)
   100f0:	5ac00204 	addi	r11,r11,8
   100f4:	dac02315 	stw	r11,140(sp)
   100f8:	4a86b03a 	or	r3,r9,r10
   100fc:	d8001d85 	stb	zero,118(sp)
   10100:	8039883a 	mov	fp,r16
   10104:	0017883a 	mov	r11,zero
   10108:	80000216 	blt	r16,zero,10114 <___svfiprintf_internal_r+0x2fc>
   1010c:	013fdfc4 	movi	r4,-129
   10110:	8922703a 	and	r17,r17,r4
   10114:	1801d21e 	bne	r3,zero,10860 <___svfiprintf_internal_r+0xa48>
   10118:	80024626 	beq	r16,zero,10a34 <___svfiprintf_internal_r+0xc1c>
   1011c:	10803fcc 	andi	r2,r2,255
   10120:	00c00044 	movi	r3,1
   10124:	10c2b426 	beq	r2,r3,10bf8 <___svfiprintf_internal_r+0xde0>
   10128:	00c00084 	movi	r3,2
   1012c:	10c25d26 	beq	r2,r3,10aa4 <___svfiprintf_internal_r+0xc8c>
   10130:	d8c01a04 	addi	r3,sp,104
   10134:	4808d0fa 	srli	r4,r9,3
   10138:	500a977a 	slli	r5,r10,29
   1013c:	5014d0fa 	srli	r10,r10,3
   10140:	4a4001cc 	andi	r9,r9,7
   10144:	48800c04 	addi	r2,r9,48
   10148:	18ffffc4 	addi	r3,r3,-1
   1014c:	2912b03a 	or	r9,r5,r4
   10150:	18800005 	stb	r2,0(r3)
   10154:	4a88b03a 	or	r4,r9,r10
   10158:	203ff61e 	bne	r4,zero,10134 <__alt_mem_Flash_flash_data+0xf4010134>
   1015c:	8900004c 	andi	r4,r17,1
   10160:	d8c02615 	stw	r3,152(sp)
   10164:	2002961e 	bne	r4,zero,10bc0 <___svfiprintf_internal_r+0xda8>
   10168:	da801e17 	ldw	r10,120(sp)
   1016c:	50f9c83a 	sub	fp,r10,r3
   10170:	df002015 	stw	fp,128(sp)
   10174:	e400010e 	bge	fp,r16,1017c <___svfiprintf_internal_r+0x364>
   10178:	dc002015 	stw	r16,128(sp)
   1017c:	5ac03fcc 	andi	r11,r11,255
   10180:	5ac0201c 	xori	r11,r11,128
   10184:	5affe004 	addi	r11,r11,-128
   10188:	58006326 	beq	r11,zero,10318 <___svfiprintf_internal_r+0x500>
   1018c:	d8c02017 	ldw	r3,128(sp)
   10190:	18c00044 	addi	r3,r3,1
   10194:	d8c02015 	stw	r3,128(sp)
   10198:	00005f06 	br	10318 <___svfiprintf_internal_r+0x500>
   1019c:	8c400414 	ori	r17,r17,16
   101a0:	8880080c 	andi	r2,r17,32
   101a4:	10027926 	beq	r2,zero,10b8c <___svfiprintf_internal_r+0xd74>
   101a8:	dac02317 	ldw	r11,140(sp)
   101ac:	0005883a 	mov	r2,zero
   101b0:	5a400017 	ldw	r9,0(r11)
   101b4:	5a800117 	ldw	r10,4(r11)
   101b8:	5ac00204 	addi	r11,r11,8
   101bc:	dac02315 	stw	r11,140(sp)
   101c0:	4a86b03a 	or	r3,r9,r10
   101c4:	003fcd06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   101c8:	da802317 	ldw	r10,140(sp)
   101cc:	dac02317 	ldw	r11,140(sp)
   101d0:	52800017 	ldw	r10,0(r10)
   101d4:	58800104 	addi	r2,r11,4
   101d8:	da802115 	stw	r10,132(sp)
   101dc:	50028c0e 	bge	r10,zero,10c10 <___svfiprintf_internal_r+0xdf8>
   101e0:	da802117 	ldw	r10,132(sp)
   101e4:	d8802315 	stw	r2,140(sp)
   101e8:	0295c83a 	sub	r10,zero,r10
   101ec:	da802115 	stw	r10,132(sp)
   101f0:	8c400114 	ori	r17,r17,4
   101f4:	a9000007 	ldb	r4,0(r21)
   101f8:	003f5306 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   101fc:	da802317 	ldw	r10,140(sp)
   10200:	dac02317 	ldw	r11,140(sp)
   10204:	d8001d85 	stb	zero,118(sp)
   10208:	52800017 	ldw	r10,0(r10)
   1020c:	5dc00104 	addi	r23,r11,4
   10210:	da802615 	stw	r10,152(sp)
   10214:	5002d626 	beq	r10,zero,10d70 <___svfiprintf_internal_r+0xf58>
   10218:	d9002617 	ldw	r4,152(sp)
   1021c:	8002cc16 	blt	r16,zero,10d50 <___svfiprintf_internal_r+0xf38>
   10220:	000b883a 	mov	r5,zero
   10224:	800d883a 	mov	r6,r16
   10228:	da002c15 	stw	r8,176(sp)
   1022c:	000e1880 	call	e188 <memchr>
   10230:	da002c17 	ldw	r8,176(sp)
   10234:	1002f026 	beq	r2,zero,10df8 <___svfiprintf_internal_r+0xfe0>
   10238:	d8c02617 	ldw	r3,152(sp)
   1023c:	10f9c83a 	sub	fp,r2,r3
   10240:	8700010e 	bge	r16,fp,10248 <___svfiprintf_internal_r+0x430>
   10244:	8039883a 	mov	fp,r16
   10248:	dac01d83 	ldbu	r11,118(sp)
   1024c:	ddc02315 	stw	r23,140(sp)
   10250:	0021883a 	mov	r16,zero
   10254:	003fc606 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10258:	8c400814 	ori	r17,r17,32
   1025c:	a9000007 	ldb	r4,0(r21)
   10260:	003f3906 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10264:	da802317 	ldw	r10,140(sp)
   10268:	00800c04 	movi	r2,48
   1026c:	dac02317 	ldw	r11,140(sp)
   10270:	52400017 	ldw	r9,0(r10)
   10274:	d8801d05 	stb	r2,116(sp)
   10278:	00801e04 	movi	r2,120
   1027c:	d8801d45 	stb	r2,117(sp)
   10280:	008000b4 	movhi	r2,2
   10284:	10831c04 	addi	r2,r2,3184
   10288:	5ac00104 	addi	r11,r11,4
   1028c:	d8802a15 	stw	r2,168(sp)
   10290:	0015883a 	mov	r10,zero
   10294:	8c400094 	ori	r17,r17,2
   10298:	dac02315 	stw	r11,140(sp)
   1029c:	00800084 	movi	r2,2
   102a0:	4807883a 	mov	r3,r9
   102a4:	003f9506 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   102a8:	d9801d85 	stb	r6,118(sp)
   102ac:	8880080c 	andi	r2,r17,32
   102b0:	d8c02317 	ldw	r3,140(sp)
   102b4:	10009b26 	beq	r2,zero,10524 <___svfiprintf_internal_r+0x70c>
   102b8:	dac02317 	ldw	r11,140(sp)
   102bc:	18800117 	ldw	r2,4(r3)
   102c0:	1a400017 	ldw	r9,0(r3)
   102c4:	5ac00204 	addi	r11,r11,8
   102c8:	dac02315 	stw	r11,140(sp)
   102cc:	1015883a 	mov	r10,r2
   102d0:	10009f16 	blt	r2,zero,10550 <___svfiprintf_internal_r+0x738>
   102d4:	dac01d83 	ldbu	r11,118(sp)
   102d8:	8039883a 	mov	fp,r16
   102dc:	00800044 	movi	r2,1
   102e0:	4a86b03a 	or	r3,r9,r10
   102e4:	003f8806 	br	10108 <__alt_mem_Flash_flash_data+0xf4010108>
   102e8:	dac02317 	ldw	r11,140(sp)
   102ec:	00c00044 	movi	r3,1
   102f0:	da801004 	addi	r10,sp,64
   102f4:	58800017 	ldw	r2,0(r11)
   102f8:	5ac00104 	addi	r11,r11,4
   102fc:	d8c02015 	stw	r3,128(sp)
   10300:	d8001d85 	stb	zero,118(sp)
   10304:	d8801005 	stb	r2,64(sp)
   10308:	dac02315 	stw	r11,140(sp)
   1030c:	1839883a 	mov	fp,r3
   10310:	da802615 	stw	r10,152(sp)
   10314:	0021883a 	mov	r16,zero
   10318:	8a80008c 	andi	r10,r17,2
   1031c:	da802215 	stw	r10,136(sp)
   10320:	50000326 	beq	r10,zero,10330 <___svfiprintf_internal_r+0x518>
   10324:	dac02017 	ldw	r11,128(sp)
   10328:	5ac00084 	addi	r11,r11,2
   1032c:	dac02015 	stw	r11,128(sp)
   10330:	88c0210c 	andi	r3,r17,132
   10334:	d8c02515 	stw	r3,148(sp)
   10338:	1800bd1e 	bne	r3,zero,10630 <___svfiprintf_internal_r+0x818>
   1033c:	da802117 	ldw	r10,132(sp)
   10340:	dac02017 	ldw	r11,128(sp)
   10344:	52edc83a 	sub	r22,r10,r11
   10348:	0580b90e 	bge	zero,r22,10630 <___svfiprintf_internal_r+0x818>
   1034c:	02400404 	movi	r9,16
   10350:	d8c01c17 	ldw	r3,112(sp)
   10354:	d8801b17 	ldw	r2,108(sp)
   10358:	4d829b0e 	bge	r9,r22,10dc8 <___svfiprintf_internal_r+0xfb0>
   1035c:	014000b4 	movhi	r5,2
   10360:	29438904 	addi	r5,r5,3620
   10364:	d9402815 	stw	r5,160(sp)
   10368:	05c001c4 	movi	r23,7
   1036c:	00000306 	br	1037c <___svfiprintf_internal_r+0x564>
   10370:	b5bffc04 	addi	r22,r22,-16
   10374:	42000204 	addi	r8,r8,8
   10378:	4d80150e 	bge	r9,r22,103d0 <___svfiprintf_internal_r+0x5b8>
   1037c:	028000b4 	movhi	r10,2
   10380:	18c00404 	addi	r3,r3,16
   10384:	10800044 	addi	r2,r2,1
   10388:	52838904 	addi	r10,r10,3620
   1038c:	42800015 	stw	r10,0(r8)
   10390:	42400115 	stw	r9,4(r8)
   10394:	d8c01c15 	stw	r3,112(sp)
   10398:	d8801b15 	stw	r2,108(sp)
   1039c:	b8bff40e 	bge	r23,r2,10370 <__alt_mem_Flash_flash_data+0xf4010370>
   103a0:	9009883a 	mov	r4,r18
   103a4:	a00b883a 	mov	r5,r20
   103a8:	d9801a04 	addi	r6,sp,104
   103ac:	da402c15 	stw	r9,176(sp)
   103b0:	000fc4c0 	call	fc4c <__ssprint_r>
   103b4:	da402c17 	ldw	r9,176(sp)
   103b8:	1001531e 	bne	r2,zero,10908 <___svfiprintf_internal_r+0xaf0>
   103bc:	b5bffc04 	addi	r22,r22,-16
   103c0:	d8c01c17 	ldw	r3,112(sp)
   103c4:	d8801b17 	ldw	r2,108(sp)
   103c8:	d811883a 	mov	r8,sp
   103cc:	4dbfeb16 	blt	r9,r22,1037c <__alt_mem_Flash_flash_data+0xf401037c>
   103d0:	dac02817 	ldw	r11,160(sp)
   103d4:	b0c7883a 	add	r3,r22,r3
   103d8:	10800044 	addi	r2,r2,1
   103dc:	42c00015 	stw	r11,0(r8)
   103e0:	45800115 	stw	r22,4(r8)
   103e4:	d8c01c15 	stw	r3,112(sp)
   103e8:	d8801b15 	stw	r2,108(sp)
   103ec:	010001c4 	movi	r4,7
   103f0:	2081dd16 	blt	r4,r2,10b68 <___svfiprintf_internal_r+0xd50>
   103f4:	42000204 	addi	r8,r8,8
   103f8:	00008f06 	br	10638 <___svfiprintf_internal_r+0x820>
   103fc:	008000b4 	movhi	r2,2
   10400:	10831704 	addi	r2,r2,3164
   10404:	d8802a15 	stw	r2,168(sp)
   10408:	d9801d85 	stb	r6,118(sp)
   1040c:	8880080c 	andi	r2,r17,32
   10410:	10003226 	beq	r2,zero,104dc <___svfiprintf_internal_r+0x6c4>
   10414:	da802317 	ldw	r10,140(sp)
   10418:	dac02317 	ldw	r11,140(sp)
   1041c:	52400017 	ldw	r9,0(r10)
   10420:	52800117 	ldw	r10,4(r10)
   10424:	5ac00204 	addi	r11,r11,8
   10428:	dac02315 	stw	r11,140(sp)
   1042c:	8880004c 	andi	r2,r17,1
   10430:	10003426 	beq	r2,zero,10504 <___svfiprintf_internal_r+0x6ec>
   10434:	4a86b03a 	or	r3,r9,r10
   10438:	1802231e 	bne	r3,zero,10cc8 <___svfiprintf_internal_r+0xeb0>
   1043c:	00800084 	movi	r2,2
   10440:	003f2e06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10444:	a9000007 	ldb	r4,0(r21)
   10448:	a805883a 	mov	r2,r21
   1044c:	21c22426 	beq	r4,r7,10ce0 <___svfiprintf_internal_r+0xec8>
   10450:	8c400414 	ori	r17,r17,16
   10454:	003ebc06 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10458:	8c401014 	ori	r17,r17,64
   1045c:	a9000007 	ldb	r4,0(r21)
   10460:	003eb906 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10464:	d9801d85 	stb	r6,118(sp)
   10468:	8880080c 	andi	r2,r17,32
   1046c:	10020d1e 	bne	r2,zero,10ca4 <___svfiprintf_internal_r+0xe8c>
   10470:	8880040c 	andi	r2,r17,16
   10474:	10021e1e 	bne	r2,zero,10cf0 <___svfiprintf_internal_r+0xed8>
   10478:	8c40100c 	andi	r17,r17,64
   1047c:	88021c26 	beq	r17,zero,10cf0 <___svfiprintf_internal_r+0xed8>
   10480:	dac02317 	ldw	r11,140(sp)
   10484:	da802417 	ldw	r10,144(sp)
   10488:	58800017 	ldw	r2,0(r11)
   1048c:	5ac00104 	addi	r11,r11,4
   10490:	dac02315 	stw	r11,140(sp)
   10494:	1280000d 	sth	r10,0(r2)
   10498:	003e8306 	br	fea8 <__alt_mem_Flash_flash_data+0xf400fea8>
   1049c:	8c400054 	ori	r17,r17,1
   104a0:	a9000007 	ldb	r4,0(r21)
   104a4:	003ea806 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   104a8:	30803fcc 	andi	r2,r6,255
   104ac:	1080201c 	xori	r2,r2,128
   104b0:	10bfe004 	addi	r2,r2,-128
   104b4:	1001f91e 	bne	r2,zero,10c9c <___svfiprintf_internal_r+0xe84>
   104b8:	01800804 	movi	r6,32
   104bc:	a9000007 	ldb	r4,0(r21)
   104c0:	003ea106 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   104c4:	008000b4 	movhi	r2,2
   104c8:	10831c04 	addi	r2,r2,3184
   104cc:	d8802a15 	stw	r2,168(sp)
   104d0:	d9801d85 	stb	r6,118(sp)
   104d4:	8880080c 	andi	r2,r17,32
   104d8:	103fce1e 	bne	r2,zero,10414 <__alt_mem_Flash_flash_data+0xf4010414>
   104dc:	8880040c 	andi	r2,r17,16
   104e0:	1001e526 	beq	r2,zero,10c78 <___svfiprintf_internal_r+0xe60>
   104e4:	da802317 	ldw	r10,140(sp)
   104e8:	dac02317 	ldw	r11,140(sp)
   104ec:	52400017 	ldw	r9,0(r10)
   104f0:	8880004c 	andi	r2,r17,1
   104f4:	5ac00104 	addi	r11,r11,4
   104f8:	dac02315 	stw	r11,140(sp)
   104fc:	0015883a 	mov	r10,zero
   10500:	103fcc1e 	bne	r2,zero,10434 <__alt_mem_Flash_flash_data+0xf4010434>
   10504:	00800084 	movi	r2,2
   10508:	4a86b03a 	or	r3,r9,r10
   1050c:	003efb06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10510:	8c400414 	ori	r17,r17,16
   10514:	d9801d85 	stb	r6,118(sp)
   10518:	8880080c 	andi	r2,r17,32
   1051c:	d8c02317 	ldw	r3,140(sp)
   10520:	103f651e 	bne	r2,zero,102b8 <__alt_mem_Flash_flash_data+0xf40102b8>
   10524:	8880040c 	andi	r2,r17,16
   10528:	1001c61e 	bne	r2,zero,10c44 <___svfiprintf_internal_r+0xe2c>
   1052c:	8880100c 	andi	r2,r17,64
   10530:	1001c426 	beq	r2,zero,10c44 <___svfiprintf_internal_r+0xe2c>
   10534:	1a40000f 	ldh	r9,0(r3)
   10538:	dac02317 	ldw	r11,140(sp)
   1053c:	4815d7fa 	srai	r10,r9,31
   10540:	5ac00104 	addi	r11,r11,4
   10544:	dac02315 	stw	r11,140(sp)
   10548:	5005883a 	mov	r2,r10
   1054c:	103f610e 	bge	r2,zero,102d4 <__alt_mem_Flash_flash_data+0xf40102d4>
   10550:	0253c83a 	sub	r9,zero,r9
   10554:	4804c03a 	cmpne	r2,r9,zero
   10558:	0295c83a 	sub	r10,zero,r10
   1055c:	5095c83a 	sub	r10,r10,r2
   10560:	02c00b44 	movi	r11,45
   10564:	dac01d85 	stb	r11,118(sp)
   10568:	8039883a 	mov	fp,r16
   1056c:	00800044 	movi	r2,1
   10570:	4a86b03a 	or	r3,r9,r10
   10574:	003ee406 	br	10108 <__alt_mem_Flash_flash_data+0xf4010108>
   10578:	a815883a 	mov	r10,r21
   1057c:	d8002115 	stw	zero,132(sp)
   10580:	20bff404 	addi	r2,r4,-48
   10584:	51000007 	ldb	r4,0(r10)
   10588:	da802117 	ldw	r10,132(sp)
   1058c:	ad400044 	addi	r21,r21,1
   10590:	52c002a4 	muli	r11,r10,10
   10594:	a815883a 	mov	r10,r21
   10598:	5885883a 	add	r2,r11,r2
   1059c:	d8802115 	stw	r2,132(sp)
   105a0:	20bff404 	addi	r2,r4,-48
   105a4:	28bff72e 	bgeu	r5,r2,10584 <__alt_mem_Flash_flash_data+0xf4010584>
   105a8:	20bff804 	addi	r2,r4,-32
   105ac:	18be692e 	bgeu	r3,r2,ff54 <__alt_mem_Flash_flash_data+0xf400ff54>
   105b0:	d9801d85 	stb	r6,118(sp)
   105b4:	2000ce26 	beq	r4,zero,108f0 <___svfiprintf_internal_r+0xad8>
   105b8:	02800044 	movi	r10,1
   105bc:	dac01004 	addi	r11,sp,64
   105c0:	da802015 	stw	r10,128(sp)
   105c4:	d9001005 	stb	r4,64(sp)
   105c8:	d8001d85 	stb	zero,118(sp)
   105cc:	5039883a 	mov	fp,r10
   105d0:	dac02615 	stw	r11,152(sp)
   105d4:	003f4f06 	br	10314 <__alt_mem_Flash_flash_data+0xf4010314>
   105d8:	8c402014 	ori	r17,r17,128
   105dc:	a9000007 	ldb	r4,0(r21)
   105e0:	003e5906 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   105e4:	01800ac4 	movi	r6,43
   105e8:	a9000007 	ldb	r4,0(r21)
   105ec:	003e5606 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   105f0:	a9000007 	ldb	r4,0(r21)
   105f4:	aa800044 	addi	r10,r21,1
   105f8:	22420626 	beq	r4,r9,10e14 <___svfiprintf_internal_r+0xffc>
   105fc:	20bff404 	addi	r2,r4,-48
   10600:	502b883a 	mov	r21,r10
   10604:	0021883a 	mov	r16,zero
   10608:	28be5036 	bltu	r5,r2,ff4c <__alt_mem_Flash_flash_data+0xf400ff4c>
   1060c:	a9000007 	ldb	r4,0(r21)
   10610:	840002a4 	muli	r16,r16,10
   10614:	ad400044 	addi	r21,r21,1
   10618:	1421883a 	add	r16,r2,r16
   1061c:	20bff404 	addi	r2,r4,-48
   10620:	28bffa2e 	bgeu	r5,r2,1060c <__alt_mem_Flash_flash_data+0xf401060c>
   10624:	803e490e 	bge	r16,zero,ff4c <__alt_mem_Flash_flash_data+0xf400ff4c>
   10628:	043fffc4 	movi	r16,-1
   1062c:	003e4706 	br	ff4c <__alt_mem_Flash_flash_data+0xf400ff4c>
   10630:	d8c01c17 	ldw	r3,112(sp)
   10634:	d8801b17 	ldw	r2,108(sp)
   10638:	d9001d87 	ldb	r4,118(sp)
   1063c:	20000b26 	beq	r4,zero,1066c <___svfiprintf_internal_r+0x854>
   10640:	d9001d84 	addi	r4,sp,118
   10644:	18c00044 	addi	r3,r3,1
   10648:	10800044 	addi	r2,r2,1
   1064c:	41000015 	stw	r4,0(r8)
   10650:	01000044 	movi	r4,1
   10654:	41000115 	stw	r4,4(r8)
   10658:	d8c01c15 	stw	r3,112(sp)
   1065c:	d8801b15 	stw	r2,108(sp)
   10660:	010001c4 	movi	r4,7
   10664:	20811e16 	blt	r4,r2,10ae0 <___svfiprintf_internal_r+0xcc8>
   10668:	42000204 	addi	r8,r8,8
   1066c:	da802217 	ldw	r10,136(sp)
   10670:	50000b26 	beq	r10,zero,106a0 <___svfiprintf_internal_r+0x888>
   10674:	d9001d04 	addi	r4,sp,116
   10678:	18c00084 	addi	r3,r3,2
   1067c:	10800044 	addi	r2,r2,1
   10680:	41000015 	stw	r4,0(r8)
   10684:	01000084 	movi	r4,2
   10688:	41000115 	stw	r4,4(r8)
   1068c:	d8c01c15 	stw	r3,112(sp)
   10690:	d8801b15 	stw	r2,108(sp)
   10694:	010001c4 	movi	r4,7
   10698:	20811a16 	blt	r4,r2,10b04 <___svfiprintf_internal_r+0xcec>
   1069c:	42000204 	addi	r8,r8,8
   106a0:	dac02517 	ldw	r11,148(sp)
   106a4:	01002004 	movi	r4,128
   106a8:	5900a826 	beq	r11,r4,1094c <___svfiprintf_internal_r+0xb34>
   106ac:	8721c83a 	sub	r16,r16,fp
   106b0:	0400260e 	bge	zero,r16,1074c <___svfiprintf_internal_r+0x934>
   106b4:	01c00404 	movi	r7,16
   106b8:	3c019d0e 	bge	r7,r16,10d30 <___svfiprintf_internal_r+0xf18>
   106bc:	010000b4 	movhi	r4,2
   106c0:	21038504 	addi	r4,r4,3604
   106c4:	d9002215 	stw	r4,136(sp)
   106c8:	382f883a 	mov	r23,r7
   106cc:	058001c4 	movi	r22,7
   106d0:	00000306 	br	106e0 <___svfiprintf_internal_r+0x8c8>
   106d4:	843ffc04 	addi	r16,r16,-16
   106d8:	42000204 	addi	r8,r8,8
   106dc:	bc00110e 	bge	r23,r16,10724 <___svfiprintf_internal_r+0x90c>
   106e0:	18c00404 	addi	r3,r3,16
   106e4:	10800044 	addi	r2,r2,1
   106e8:	44c00015 	stw	r19,0(r8)
   106ec:	45c00115 	stw	r23,4(r8)
   106f0:	d8c01c15 	stw	r3,112(sp)
   106f4:	d8801b15 	stw	r2,108(sp)
   106f8:	b0bff60e 	bge	r22,r2,106d4 <__alt_mem_Flash_flash_data+0xf40106d4>
   106fc:	9009883a 	mov	r4,r18
   10700:	a00b883a 	mov	r5,r20
   10704:	d9801a04 	addi	r6,sp,104
   10708:	000fc4c0 	call	fc4c <__ssprint_r>
   1070c:	10007e1e 	bne	r2,zero,10908 <___svfiprintf_internal_r+0xaf0>
   10710:	843ffc04 	addi	r16,r16,-16
   10714:	d8c01c17 	ldw	r3,112(sp)
   10718:	d8801b17 	ldw	r2,108(sp)
   1071c:	d811883a 	mov	r8,sp
   10720:	bc3fef16 	blt	r23,r16,106e0 <__alt_mem_Flash_flash_data+0xf40106e0>
   10724:	da802217 	ldw	r10,136(sp)
   10728:	1c07883a 	add	r3,r3,r16
   1072c:	10800044 	addi	r2,r2,1
   10730:	42800015 	stw	r10,0(r8)
   10734:	44000115 	stw	r16,4(r8)
   10738:	d8c01c15 	stw	r3,112(sp)
   1073c:	d8801b15 	stw	r2,108(sp)
   10740:	010001c4 	movi	r4,7
   10744:	2080ce16 	blt	r4,r2,10a80 <___svfiprintf_internal_r+0xc68>
   10748:	42000204 	addi	r8,r8,8
   1074c:	dac02617 	ldw	r11,152(sp)
   10750:	1f07883a 	add	r3,r3,fp
   10754:	10800044 	addi	r2,r2,1
   10758:	42c00015 	stw	r11,0(r8)
   1075c:	47000115 	stw	fp,4(r8)
   10760:	d8c01c15 	stw	r3,112(sp)
   10764:	d8801b15 	stw	r2,108(sp)
   10768:	010001c4 	movi	r4,7
   1076c:	2080a316 	blt	r4,r2,109fc <___svfiprintf_internal_r+0xbe4>
   10770:	42000204 	addi	r8,r8,8
   10774:	8c40010c 	andi	r17,r17,4
   10778:	88002b26 	beq	r17,zero,10828 <___svfiprintf_internal_r+0xa10>
   1077c:	da802117 	ldw	r10,132(sp)
   10780:	dac02017 	ldw	r11,128(sp)
   10784:	52e1c83a 	sub	r16,r10,r11
   10788:	0400270e 	bge	zero,r16,10828 <___svfiprintf_internal_r+0xa10>
   1078c:	04400404 	movi	r17,16
   10790:	d8801b17 	ldw	r2,108(sp)
   10794:	8c01900e 	bge	r17,r16,10dd8 <___svfiprintf_internal_r+0xfc0>
   10798:	014000b4 	movhi	r5,2
   1079c:	29438904 	addi	r5,r5,3620
   107a0:	d9402815 	stw	r5,160(sp)
   107a4:	070001c4 	movi	fp,7
   107a8:	00000306 	br	107b8 <___svfiprintf_internal_r+0x9a0>
   107ac:	843ffc04 	addi	r16,r16,-16
   107b0:	42000204 	addi	r8,r8,8
   107b4:	8c00130e 	bge	r17,r16,10804 <___svfiprintf_internal_r+0x9ec>
   107b8:	028000b4 	movhi	r10,2
   107bc:	18c00404 	addi	r3,r3,16
   107c0:	10800044 	addi	r2,r2,1
   107c4:	52838904 	addi	r10,r10,3620
   107c8:	42800015 	stw	r10,0(r8)
   107cc:	44400115 	stw	r17,4(r8)
   107d0:	d8c01c15 	stw	r3,112(sp)
   107d4:	d8801b15 	stw	r2,108(sp)
   107d8:	e0bff40e 	bge	fp,r2,107ac <__alt_mem_Flash_flash_data+0xf40107ac>
   107dc:	9009883a 	mov	r4,r18
   107e0:	a00b883a 	mov	r5,r20
   107e4:	d9801a04 	addi	r6,sp,104
   107e8:	000fc4c0 	call	fc4c <__ssprint_r>
   107ec:	1000461e 	bne	r2,zero,10908 <___svfiprintf_internal_r+0xaf0>
   107f0:	843ffc04 	addi	r16,r16,-16
   107f4:	d8c01c17 	ldw	r3,112(sp)
   107f8:	d8801b17 	ldw	r2,108(sp)
   107fc:	d811883a 	mov	r8,sp
   10800:	8c3fed16 	blt	r17,r16,107b8 <__alt_mem_Flash_flash_data+0xf40107b8>
   10804:	dac02817 	ldw	r11,160(sp)
   10808:	1c07883a 	add	r3,r3,r16
   1080c:	10800044 	addi	r2,r2,1
   10810:	42c00015 	stw	r11,0(r8)
   10814:	44000115 	stw	r16,4(r8)
   10818:	d8c01c15 	stw	r3,112(sp)
   1081c:	d8801b15 	stw	r2,108(sp)
   10820:	010001c4 	movi	r4,7
   10824:	2080fd16 	blt	r4,r2,10c1c <___svfiprintf_internal_r+0xe04>
   10828:	dd802017 	ldw	r22,128(sp)
   1082c:	da802117 	ldw	r10,132(sp)
   10830:	b280010e 	bge	r22,r10,10838 <___svfiprintf_internal_r+0xa20>
   10834:	502d883a 	mov	r22,r10
   10838:	dac02417 	ldw	r11,144(sp)
   1083c:	5d97883a 	add	r11,r11,r22
   10840:	dac02415 	stw	r11,144(sp)
   10844:	1800751e 	bne	r3,zero,10a1c <___svfiprintf_internal_r+0xc04>
   10848:	a8800007 	ldb	r2,0(r21)
   1084c:	d8001b15 	stw	zero,108(sp)
   10850:	d811883a 	mov	r8,sp
   10854:	103d961e 	bne	r2,zero,feb0 <__alt_mem_Flash_flash_data+0xf400feb0>
   10858:	a82d883a 	mov	r22,r21
   1085c:	003dad06 	br	ff14 <__alt_mem_Flash_flash_data+0xf400ff14>
   10860:	10803fcc 	andi	r2,r2,255
   10864:	00c00044 	movi	r3,1
   10868:	10fe2f1e 	bne	r2,r3,10128 <__alt_mem_Flash_flash_data+0xf4010128>
   1086c:	5000e026 	beq	r10,zero,10bf0 <___svfiprintf_internal_r+0xdd8>
   10870:	dc002015 	stw	r16,128(sp)
   10874:	dc402215 	stw	r17,136(sp)
   10878:	dd801a04 	addi	r22,sp,104
   1087c:	402f883a 	mov	r23,r8
   10880:	5839883a 	mov	fp,r11
   10884:	4821883a 	mov	r16,r9
   10888:	5023883a 	mov	r17,r10
   1088c:	8009883a 	mov	r4,r16
   10890:	880b883a 	mov	r5,r17
   10894:	01800284 	movi	r6,10
   10898:	000f883a 	mov	r7,zero
   1089c:	00131cc0 	call	131cc <__umoddi3>
   108a0:	10800c04 	addi	r2,r2,48
   108a4:	b5bfffc4 	addi	r22,r22,-1
   108a8:	8009883a 	mov	r4,r16
   108ac:	880b883a 	mov	r5,r17
   108b0:	01800284 	movi	r6,10
   108b4:	000f883a 	mov	r7,zero
   108b8:	b0800005 	stb	r2,0(r22)
   108bc:	0012c0c0 	call	12c0c <__udivdi3>
   108c0:	1021883a 	mov	r16,r2
   108c4:	10c4b03a 	or	r2,r2,r3
   108c8:	1823883a 	mov	r17,r3
   108cc:	103fef1e 	bne	r2,zero,1088c <__alt_mem_Flash_flash_data+0xf401088c>
   108d0:	da801e17 	ldw	r10,120(sp)
   108d4:	e017883a 	mov	r11,fp
   108d8:	dc002017 	ldw	r16,128(sp)
   108dc:	dc402217 	ldw	r17,136(sp)
   108e0:	b811883a 	mov	r8,r23
   108e4:	dd802615 	stw	r22,152(sp)
   108e8:	55b9c83a 	sub	fp,r10,r22
   108ec:	003e2006 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   108f0:	d8801c17 	ldw	r2,112(sp)
   108f4:	10000426 	beq	r2,zero,10908 <___svfiprintf_internal_r+0xaf0>
   108f8:	d9002917 	ldw	r4,164(sp)
   108fc:	d9402717 	ldw	r5,156(sp)
   10900:	d9801a04 	addi	r6,sp,104
   10904:	000fc4c0 	call	fc4c <__ssprint_r>
   10908:	da802717 	ldw	r10,156(sp)
   1090c:	5080030b 	ldhu	r2,12(r10)
   10910:	1080100c 	andi	r2,r2,64
   10914:	1000511e 	bne	r2,zero,10a5c <___svfiprintf_internal_r+0xc44>
   10918:	d8802417 	ldw	r2,144(sp)
   1091c:	dfc03617 	ldw	ra,216(sp)
   10920:	df003517 	ldw	fp,212(sp)
   10924:	ddc03417 	ldw	r23,208(sp)
   10928:	dd803317 	ldw	r22,204(sp)
   1092c:	dd403217 	ldw	r21,200(sp)
   10930:	dd003117 	ldw	r20,196(sp)
   10934:	dcc03017 	ldw	r19,192(sp)
   10938:	dc802f17 	ldw	r18,188(sp)
   1093c:	dc402e17 	ldw	r17,184(sp)
   10940:	dc002d17 	ldw	r16,180(sp)
   10944:	dec03704 	addi	sp,sp,220
   10948:	f800283a 	ret
   1094c:	da802117 	ldw	r10,132(sp)
   10950:	dac02017 	ldw	r11,128(sp)
   10954:	52edc83a 	sub	r22,r10,r11
   10958:	05bf540e 	bge	zero,r22,106ac <__alt_mem_Flash_flash_data+0xf40106ac>
   1095c:	02400404 	movi	r9,16
   10960:	4d81210e 	bge	r9,r22,10de8 <___svfiprintf_internal_r+0xfd0>
   10964:	014000b4 	movhi	r5,2
   10968:	29438504 	addi	r5,r5,3604
   1096c:	d9402215 	stw	r5,136(sp)
   10970:	05c001c4 	movi	r23,7
   10974:	00000306 	br	10984 <___svfiprintf_internal_r+0xb6c>
   10978:	b5bffc04 	addi	r22,r22,-16
   1097c:	42000204 	addi	r8,r8,8
   10980:	4d80130e 	bge	r9,r22,109d0 <___svfiprintf_internal_r+0xbb8>
   10984:	18c00404 	addi	r3,r3,16
   10988:	10800044 	addi	r2,r2,1
   1098c:	44c00015 	stw	r19,0(r8)
   10990:	42400115 	stw	r9,4(r8)
   10994:	d8c01c15 	stw	r3,112(sp)
   10998:	d8801b15 	stw	r2,108(sp)
   1099c:	b8bff60e 	bge	r23,r2,10978 <__alt_mem_Flash_flash_data+0xf4010978>
   109a0:	9009883a 	mov	r4,r18
   109a4:	a00b883a 	mov	r5,r20
   109a8:	d9801a04 	addi	r6,sp,104
   109ac:	da402c15 	stw	r9,176(sp)
   109b0:	000fc4c0 	call	fc4c <__ssprint_r>
   109b4:	da402c17 	ldw	r9,176(sp)
   109b8:	103fd31e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   109bc:	b5bffc04 	addi	r22,r22,-16
   109c0:	d8c01c17 	ldw	r3,112(sp)
   109c4:	d8801b17 	ldw	r2,108(sp)
   109c8:	d811883a 	mov	r8,sp
   109cc:	4dbfed16 	blt	r9,r22,10984 <__alt_mem_Flash_flash_data+0xf4010984>
   109d0:	da802217 	ldw	r10,136(sp)
   109d4:	1d87883a 	add	r3,r3,r22
   109d8:	10800044 	addi	r2,r2,1
   109dc:	42800015 	stw	r10,0(r8)
   109e0:	45800115 	stw	r22,4(r8)
   109e4:	d8c01c15 	stw	r3,112(sp)
   109e8:	d8801b15 	stw	r2,108(sp)
   109ec:	010001c4 	movi	r4,7
   109f0:	2080c616 	blt	r4,r2,10d0c <___svfiprintf_internal_r+0xef4>
   109f4:	42000204 	addi	r8,r8,8
   109f8:	003f2c06 	br	106ac <__alt_mem_Flash_flash_data+0xf40106ac>
   109fc:	9009883a 	mov	r4,r18
   10a00:	a00b883a 	mov	r5,r20
   10a04:	d9801a04 	addi	r6,sp,104
   10a08:	000fc4c0 	call	fc4c <__ssprint_r>
   10a0c:	103fbe1e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10a10:	d8c01c17 	ldw	r3,112(sp)
   10a14:	d811883a 	mov	r8,sp
   10a18:	003f5606 	br	10774 <__alt_mem_Flash_flash_data+0xf4010774>
   10a1c:	9009883a 	mov	r4,r18
   10a20:	a00b883a 	mov	r5,r20
   10a24:	d9801a04 	addi	r6,sp,104
   10a28:	000fc4c0 	call	fc4c <__ssprint_r>
   10a2c:	103f8626 	beq	r2,zero,10848 <__alt_mem_Flash_flash_data+0xf4010848>
   10a30:	003fb506 	br	10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10a34:	10803fcc 	andi	r2,r2,255
   10a38:	10003b1e 	bne	r2,zero,10b28 <___svfiprintf_internal_r+0xd10>
   10a3c:	8880004c 	andi	r2,r17,1
   10a40:	10007d26 	beq	r2,zero,10c38 <___svfiprintf_internal_r+0xe20>
   10a44:	00800c04 	movi	r2,48
   10a48:	d8c019c4 	addi	r3,sp,103
   10a4c:	d88019c5 	stb	r2,103(sp)
   10a50:	df002b17 	ldw	fp,172(sp)
   10a54:	d8c02615 	stw	r3,152(sp)
   10a58:	003dc506 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10a5c:	00bfffc4 	movi	r2,-1
   10a60:	003fae06 	br	1091c <__alt_mem_Flash_flash_data+0xf401091c>
   10a64:	9009883a 	mov	r4,r18
   10a68:	a00b883a 	mov	r5,r20
   10a6c:	d9801a04 	addi	r6,sp,104
   10a70:	000fc4c0 	call	fc4c <__ssprint_r>
   10a74:	103fa41e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10a78:	d811883a 	mov	r8,sp
   10a7c:	003d2206 	br	ff08 <__alt_mem_Flash_flash_data+0xf400ff08>
   10a80:	9009883a 	mov	r4,r18
   10a84:	a00b883a 	mov	r5,r20
   10a88:	d9801a04 	addi	r6,sp,104
   10a8c:	000fc4c0 	call	fc4c <__ssprint_r>
   10a90:	103f9d1e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10a94:	d8c01c17 	ldw	r3,112(sp)
   10a98:	d8801b17 	ldw	r2,108(sp)
   10a9c:	d811883a 	mov	r8,sp
   10aa0:	003f2a06 	br	1074c <__alt_mem_Flash_flash_data+0xf401074c>
   10aa4:	d9402a17 	ldw	r5,168(sp)
   10aa8:	d8c01a04 	addi	r3,sp,104
   10aac:	488003cc 	andi	r2,r9,15
   10ab0:	5008973a 	slli	r4,r10,28
   10ab4:	2885883a 	add	r2,r5,r2
   10ab8:	4812d13a 	srli	r9,r9,4
   10abc:	10800003 	ldbu	r2,0(r2)
   10ac0:	5014d13a 	srli	r10,r10,4
   10ac4:	18ffffc4 	addi	r3,r3,-1
   10ac8:	2252b03a 	or	r9,r4,r9
   10acc:	18800005 	stb	r2,0(r3)
   10ad0:	4a84b03a 	or	r2,r9,r10
   10ad4:	103ff51e 	bne	r2,zero,10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10ad8:	d8c02615 	stw	r3,152(sp)
   10adc:	003da206 	br	10168 <__alt_mem_Flash_flash_data+0xf4010168>
   10ae0:	9009883a 	mov	r4,r18
   10ae4:	a00b883a 	mov	r5,r20
   10ae8:	d9801a04 	addi	r6,sp,104
   10aec:	000fc4c0 	call	fc4c <__ssprint_r>
   10af0:	103f851e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10af4:	d8c01c17 	ldw	r3,112(sp)
   10af8:	d8801b17 	ldw	r2,108(sp)
   10afc:	d811883a 	mov	r8,sp
   10b00:	003eda06 	br	1066c <__alt_mem_Flash_flash_data+0xf401066c>
   10b04:	9009883a 	mov	r4,r18
   10b08:	a00b883a 	mov	r5,r20
   10b0c:	d9801a04 	addi	r6,sp,104
   10b10:	000fc4c0 	call	fc4c <__ssprint_r>
   10b14:	103f7c1e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10b18:	d8c01c17 	ldw	r3,112(sp)
   10b1c:	d8801b17 	ldw	r2,108(sp)
   10b20:	d811883a 	mov	r8,sp
   10b24:	003ede06 	br	106a0 <__alt_mem_Flash_flash_data+0xf40106a0>
   10b28:	da801a04 	addi	r10,sp,104
   10b2c:	da802615 	stw	r10,152(sp)
   10b30:	003d8f06 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10b34:	8880040c 	andi	r2,r17,16
   10b38:	10004c1e 	bne	r2,zero,10c6c <___svfiprintf_internal_r+0xe54>
   10b3c:	8880100c 	andi	r2,r17,64
   10b40:	da802317 	ldw	r10,140(sp)
   10b44:	10004a26 	beq	r2,zero,10c70 <___svfiprintf_internal_r+0xe58>
   10b48:	5240000b 	ldhu	r9,0(r10)
   10b4c:	dac02317 	ldw	r11,140(sp)
   10b50:	0015883a 	mov	r10,zero
   10b54:	00800044 	movi	r2,1
   10b58:	5ac00104 	addi	r11,r11,4
   10b5c:	dac02315 	stw	r11,140(sp)
   10b60:	4807883a 	mov	r3,r9
   10b64:	003d6506 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10b68:	9009883a 	mov	r4,r18
   10b6c:	a00b883a 	mov	r5,r20
   10b70:	d9801a04 	addi	r6,sp,104
   10b74:	000fc4c0 	call	fc4c <__ssprint_r>
   10b78:	103f631e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10b7c:	d8c01c17 	ldw	r3,112(sp)
   10b80:	d8801b17 	ldw	r2,108(sp)
   10b84:	d811883a 	mov	r8,sp
   10b88:	003eab06 	br	10638 <__alt_mem_Flash_flash_data+0xf4010638>
   10b8c:	8880040c 	andi	r2,r17,16
   10b90:	1000331e 	bne	r2,zero,10c60 <___svfiprintf_internal_r+0xe48>
   10b94:	8880100c 	andi	r2,r17,64
   10b98:	da802317 	ldw	r10,140(sp)
   10b9c:	10003126 	beq	r2,zero,10c64 <___svfiprintf_internal_r+0xe4c>
   10ba0:	5240000b 	ldhu	r9,0(r10)
   10ba4:	dac02317 	ldw	r11,140(sp)
   10ba8:	0015883a 	mov	r10,zero
   10bac:	0005883a 	mov	r2,zero
   10bb0:	5ac00104 	addi	r11,r11,4
   10bb4:	dac02315 	stw	r11,140(sp)
   10bb8:	4807883a 	mov	r3,r9
   10bbc:	003d4f06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10bc0:	10803fcc 	andi	r2,r2,255
   10bc4:	1080201c 	xori	r2,r2,128
   10bc8:	10bfe004 	addi	r2,r2,-128
   10bcc:	01000c04 	movi	r4,48
   10bd0:	11005b26 	beq	r2,r4,10d40 <___svfiprintf_internal_r+0xf28>
   10bd4:	da802617 	ldw	r10,152(sp)
   10bd8:	d8801e17 	ldw	r2,120(sp)
   10bdc:	193fffc5 	stb	r4,-1(r3)
   10be0:	52bfffc4 	addi	r10,r10,-1
   10be4:	da802615 	stw	r10,152(sp)
   10be8:	12b9c83a 	sub	fp,r2,r10
   10bec:	003d6006 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10bf0:	00800244 	movi	r2,9
   10bf4:	127f1e36 	bltu	r2,r9,10870 <__alt_mem_Flash_flash_data+0xf4010870>
   10bf8:	4a400c04 	addi	r9,r9,48
   10bfc:	d8c019c4 	addi	r3,sp,103
   10c00:	da4019c5 	stb	r9,103(sp)
   10c04:	df002b17 	ldw	fp,172(sp)
   10c08:	d8c02615 	stw	r3,152(sp)
   10c0c:	003d5806 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10c10:	d8802315 	stw	r2,140(sp)
   10c14:	a9000007 	ldb	r4,0(r21)
   10c18:	003ccb06 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10c1c:	9009883a 	mov	r4,r18
   10c20:	a00b883a 	mov	r5,r20
   10c24:	d9801a04 	addi	r6,sp,104
   10c28:	000fc4c0 	call	fc4c <__ssprint_r>
   10c2c:	103f361e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10c30:	d8c01c17 	ldw	r3,112(sp)
   10c34:	003efc06 	br	10828 <__alt_mem_Flash_flash_data+0xf4010828>
   10c38:	d8c01a04 	addi	r3,sp,104
   10c3c:	d8c02615 	stw	r3,152(sp)
   10c40:	003d4b06 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10c44:	da802317 	ldw	r10,140(sp)
   10c48:	1a400017 	ldw	r9,0(r3)
   10c4c:	52800104 	addi	r10,r10,4
   10c50:	da802315 	stw	r10,140(sp)
   10c54:	4815d7fa 	srai	r10,r9,31
   10c58:	5005883a 	mov	r2,r10
   10c5c:	003d9c06 	br	102d0 <__alt_mem_Flash_flash_data+0xf40102d0>
   10c60:	da802317 	ldw	r10,140(sp)
   10c64:	52400017 	ldw	r9,0(r10)
   10c68:	003fce06 	br	10ba4 <__alt_mem_Flash_flash_data+0xf4010ba4>
   10c6c:	da802317 	ldw	r10,140(sp)
   10c70:	52400017 	ldw	r9,0(r10)
   10c74:	003fb506 	br	10b4c <__alt_mem_Flash_flash_data+0xf4010b4c>
   10c78:	8880100c 	andi	r2,r17,64
   10c7c:	da802317 	ldw	r10,140(sp)
   10c80:	103e1926 	beq	r2,zero,104e8 <__alt_mem_Flash_flash_data+0xf40104e8>
   10c84:	dac02317 	ldw	r11,140(sp)
   10c88:	5240000b 	ldhu	r9,0(r10)
   10c8c:	0015883a 	mov	r10,zero
   10c90:	5ac00104 	addi	r11,r11,4
   10c94:	dac02315 	stw	r11,140(sp)
   10c98:	003de406 	br	1042c <__alt_mem_Flash_flash_data+0xf401042c>
   10c9c:	a9000007 	ldb	r4,0(r21)
   10ca0:	003ca906 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10ca4:	dac02317 	ldw	r11,140(sp)
   10ca8:	da802417 	ldw	r10,144(sp)
   10cac:	58800017 	ldw	r2,0(r11)
   10cb0:	5007d7fa 	srai	r3,r10,31
   10cb4:	5ac00104 	addi	r11,r11,4
   10cb8:	dac02315 	stw	r11,140(sp)
   10cbc:	12800015 	stw	r10,0(r2)
   10cc0:	10c00115 	stw	r3,4(r2)
   10cc4:	003c7806 	br	fea8 <__alt_mem_Flash_flash_data+0xf400fea8>
   10cc8:	00800c04 	movi	r2,48
   10ccc:	d8801d05 	stb	r2,116(sp)
   10cd0:	d9001d45 	stb	r4,117(sp)
   10cd4:	8c400094 	ori	r17,r17,2
   10cd8:	00800084 	movi	r2,2
   10cdc:	003d0706 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10ce0:	ad400044 	addi	r21,r21,1
   10ce4:	8c400814 	ori	r17,r17,32
   10ce8:	11000047 	ldb	r4,1(r2)
   10cec:	003c9606 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10cf0:	dac02317 	ldw	r11,140(sp)
   10cf4:	da802417 	ldw	r10,144(sp)
   10cf8:	58800017 	ldw	r2,0(r11)
   10cfc:	5ac00104 	addi	r11,r11,4
   10d00:	dac02315 	stw	r11,140(sp)
   10d04:	12800015 	stw	r10,0(r2)
   10d08:	003c6706 	br	fea8 <__alt_mem_Flash_flash_data+0xf400fea8>
   10d0c:	9009883a 	mov	r4,r18
   10d10:	a00b883a 	mov	r5,r20
   10d14:	d9801a04 	addi	r6,sp,104
   10d18:	000fc4c0 	call	fc4c <__ssprint_r>
   10d1c:	103efa1e 	bne	r2,zero,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10d20:	d8c01c17 	ldw	r3,112(sp)
   10d24:	d8801b17 	ldw	r2,108(sp)
   10d28:	d811883a 	mov	r8,sp
   10d2c:	003e5f06 	br	106ac <__alt_mem_Flash_flash_data+0xf40106ac>
   10d30:	02c000b4 	movhi	r11,2
   10d34:	5ac38504 	addi	r11,r11,3604
   10d38:	dac02215 	stw	r11,136(sp)
   10d3c:	003e7906 	br	10724 <__alt_mem_Flash_flash_data+0xf4010724>
   10d40:	da801e17 	ldw	r10,120(sp)
   10d44:	d8c02617 	ldw	r3,152(sp)
   10d48:	50f9c83a 	sub	fp,r10,r3
   10d4c:	003d0806 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10d50:	da002c15 	stw	r8,176(sp)
   10d54:	000738c0 	call	738c <strlen>
   10d58:	1039883a 	mov	fp,r2
   10d5c:	dac01d83 	ldbu	r11,118(sp)
   10d60:	ddc02315 	stw	r23,140(sp)
   10d64:	0021883a 	mov	r16,zero
   10d68:	da002c17 	ldw	r8,176(sp)
   10d6c:	003d0006 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10d70:	00800184 	movi	r2,6
   10d74:	1400012e 	bgeu	r2,r16,10d7c <___svfiprintf_internal_r+0xf64>
   10d78:	1021883a 	mov	r16,r2
   10d7c:	8039883a 	mov	fp,r16
   10d80:	802d883a 	mov	r22,r16
   10d84:	80002116 	blt	r16,zero,10e0c <___svfiprintf_internal_r+0xff4>
   10d88:	008000b4 	movhi	r2,2
   10d8c:	10832104 	addi	r2,r2,3204
   10d90:	dd802015 	stw	r22,128(sp)
   10d94:	ddc02315 	stw	r23,140(sp)
   10d98:	d8802615 	stw	r2,152(sp)
   10d9c:	003d5d06 	br	10314 <__alt_mem_Flash_flash_data+0xf4010314>
   10da0:	04001004 	movi	r16,64
   10da4:	800b883a 	mov	r5,r16
   10da8:	00068700 	call	6870 <_malloc_r>
   10dac:	da802717 	ldw	r10,156(sp)
   10db0:	50800015 	stw	r2,0(r10)
   10db4:	50800415 	stw	r2,16(r10)
   10db8:	10002026 	beq	r2,zero,10e3c <___svfiprintf_internal_r+0x1024>
   10dbc:	da802717 	ldw	r10,156(sp)
   10dc0:	54000515 	stw	r16,20(r10)
   10dc4:	003c2806 	br	fe68 <__alt_mem_Flash_flash_data+0xf400fe68>
   10dc8:	010000b4 	movhi	r4,2
   10dcc:	21038904 	addi	r4,r4,3620
   10dd0:	d9002815 	stw	r4,160(sp)
   10dd4:	003d7e06 	br	103d0 <__alt_mem_Flash_flash_data+0xf40103d0>
   10dd8:	010000b4 	movhi	r4,2
   10ddc:	21038904 	addi	r4,r4,3620
   10de0:	d9002815 	stw	r4,160(sp)
   10de4:	003e8706 	br	10804 <__alt_mem_Flash_flash_data+0xf4010804>
   10de8:	010000b4 	movhi	r4,2
   10dec:	21038504 	addi	r4,r4,3604
   10df0:	d9002215 	stw	r4,136(sp)
   10df4:	003ef606 	br	109d0 <__alt_mem_Flash_flash_data+0xf40109d0>
   10df8:	8039883a 	mov	fp,r16
   10dfc:	dac01d83 	ldbu	r11,118(sp)
   10e00:	ddc02315 	stw	r23,140(sp)
   10e04:	0021883a 	mov	r16,zero
   10e08:	003cd906 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>
   10e0c:	002d883a 	mov	r22,zero
   10e10:	003fdd06 	br	10d88 <__alt_mem_Flash_flash_data+0xf4010d88>
   10e14:	dac02317 	ldw	r11,140(sp)
   10e18:	a805883a 	mov	r2,r21
   10e1c:	502b883a 	mov	r21,r10
   10e20:	5c000017 	ldw	r16,0(r11)
   10e24:	59000104 	addi	r4,r11,4
   10e28:	d9002315 	stw	r4,140(sp)
   10e2c:	803fae0e 	bge	r16,zero,10ce8 <__alt_mem_Flash_flash_data+0xf4010ce8>
   10e30:	043fffc4 	movi	r16,-1
   10e34:	11000047 	ldb	r4,1(r2)
   10e38:	003c4306 	br	ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
   10e3c:	dac02917 	ldw	r11,164(sp)
   10e40:	00800304 	movi	r2,12
   10e44:	58800015 	stw	r2,0(r11)
   10e48:	00bfffc4 	movi	r2,-1
   10e4c:	003eb306 	br	1091c <__alt_mem_Flash_flash_data+0xf401091c>

00010e50 <__sprint_r.part.0>:
   10e50:	28801917 	ldw	r2,100(r5)
   10e54:	defff604 	addi	sp,sp,-40
   10e58:	dd400515 	stw	r21,20(sp)
   10e5c:	dcc00315 	stw	r19,12(sp)
   10e60:	dfc00915 	stw	ra,36(sp)
   10e64:	df000815 	stw	fp,32(sp)
   10e68:	ddc00715 	stw	r23,28(sp)
   10e6c:	dd800615 	stw	r22,24(sp)
   10e70:	dd000415 	stw	r20,16(sp)
   10e74:	dc800215 	stw	r18,8(sp)
   10e78:	dc400115 	stw	r17,4(sp)
   10e7c:	dc000015 	stw	r16,0(sp)
   10e80:	1088000c 	andi	r2,r2,8192
   10e84:	2827883a 	mov	r19,r5
   10e88:	302b883a 	mov	r21,r6
   10e8c:	10002d26 	beq	r2,zero,10f44 <__sprint_r.part.0+0xf4>
   10e90:	30800217 	ldw	r2,8(r6)
   10e94:	35800017 	ldw	r22,0(r6)
   10e98:	10002826 	beq	r2,zero,10f3c <__sprint_r.part.0+0xec>
   10e9c:	2029883a 	mov	r20,r4
   10ea0:	b5c00104 	addi	r23,r22,4
   10ea4:	04bfffc4 	movi	r18,-1
   10ea8:	bc400017 	ldw	r17,0(r23)
   10eac:	b4000017 	ldw	r16,0(r22)
   10eb0:	0039883a 	mov	fp,zero
   10eb4:	8822d0ba 	srli	r17,r17,2
   10eb8:	04400316 	blt	zero,r17,10ec8 <__sprint_r.part.0+0x78>
   10ebc:	00001806 	br	10f20 <__sprint_r.part.0+0xd0>
   10ec0:	84000104 	addi	r16,r16,4
   10ec4:	8f001526 	beq	r17,fp,10f1c <__sprint_r.part.0+0xcc>
   10ec8:	81400017 	ldw	r5,0(r16)
   10ecc:	a009883a 	mov	r4,r20
   10ed0:	980d883a 	mov	r6,r19
   10ed4:	001258c0 	call	1258c <_fputwc_r>
   10ed8:	e7000044 	addi	fp,fp,1
   10edc:	14bff81e 	bne	r2,r18,10ec0 <__alt_mem_Flash_flash_data+0xf4010ec0>
   10ee0:	9005883a 	mov	r2,r18
   10ee4:	a8000215 	stw	zero,8(r21)
   10ee8:	a8000115 	stw	zero,4(r21)
   10eec:	dfc00917 	ldw	ra,36(sp)
   10ef0:	df000817 	ldw	fp,32(sp)
   10ef4:	ddc00717 	ldw	r23,28(sp)
   10ef8:	dd800617 	ldw	r22,24(sp)
   10efc:	dd400517 	ldw	r21,20(sp)
   10f00:	dd000417 	ldw	r20,16(sp)
   10f04:	dcc00317 	ldw	r19,12(sp)
   10f08:	dc800217 	ldw	r18,8(sp)
   10f0c:	dc400117 	ldw	r17,4(sp)
   10f10:	dc000017 	ldw	r16,0(sp)
   10f14:	dec00a04 	addi	sp,sp,40
   10f18:	f800283a 	ret
   10f1c:	a8800217 	ldw	r2,8(r21)
   10f20:	8c63883a 	add	r17,r17,r17
   10f24:	8c63883a 	add	r17,r17,r17
   10f28:	1445c83a 	sub	r2,r2,r17
   10f2c:	a8800215 	stw	r2,8(r21)
   10f30:	b5800204 	addi	r22,r22,8
   10f34:	bdc00204 	addi	r23,r23,8
   10f38:	103fdb1e 	bne	r2,zero,10ea8 <__alt_mem_Flash_flash_data+0xf4010ea8>
   10f3c:	0005883a 	mov	r2,zero
   10f40:	003fe806 	br	10ee4 <__alt_mem_Flash_flash_data+0xf4010ee4>
   10f44:	000d8a80 	call	d8a8 <__sfvwrite_r>
   10f48:	003fe606 	br	10ee4 <__alt_mem_Flash_flash_data+0xf4010ee4>

00010f4c <__sprint_r>:
   10f4c:	30c00217 	ldw	r3,8(r6)
   10f50:	18000126 	beq	r3,zero,10f58 <__sprint_r+0xc>
   10f54:	0010e501 	jmpi	10e50 <__sprint_r.part.0>
   10f58:	30000115 	stw	zero,4(r6)
   10f5c:	0005883a 	mov	r2,zero
   10f60:	f800283a 	ret

00010f64 <___vfiprintf_internal_r>:
   10f64:	deffca04 	addi	sp,sp,-216
   10f68:	dd803215 	stw	r22,200(sp)
   10f6c:	dd403115 	stw	r21,196(sp)
   10f70:	dfc03515 	stw	ra,212(sp)
   10f74:	df003415 	stw	fp,208(sp)
   10f78:	ddc03315 	stw	r23,204(sp)
   10f7c:	dd003015 	stw	r20,192(sp)
   10f80:	dcc02f15 	stw	r19,188(sp)
   10f84:	dc802e15 	stw	r18,184(sp)
   10f88:	dc402d15 	stw	r17,180(sp)
   10f8c:	dc002c15 	stw	r16,176(sp)
   10f90:	d9002015 	stw	r4,128(sp)
   10f94:	d9c02215 	stw	r7,136(sp)
   10f98:	282b883a 	mov	r21,r5
   10f9c:	302d883a 	mov	r22,r6
   10fa0:	20000226 	beq	r4,zero,10fac <___vfiprintf_internal_r+0x48>
   10fa4:	20800e17 	ldw	r2,56(r4)
   10fa8:	1001b126 	beq	r2,zero,11670 <___vfiprintf_internal_r+0x70c>
   10fac:	a880030b 	ldhu	r2,12(r21)
   10fb0:	10c8000c 	andi	r3,r2,8192
   10fb4:	1800061e 	bne	r3,zero,10fd0 <___vfiprintf_internal_r+0x6c>
   10fb8:	a9001917 	ldw	r4,100(r21)
   10fbc:	00f7ffc4 	movi	r3,-8193
   10fc0:	10880014 	ori	r2,r2,8192
   10fc4:	20c6703a 	and	r3,r4,r3
   10fc8:	a880030d 	sth	r2,12(r21)
   10fcc:	a8c01915 	stw	r3,100(r21)
   10fd0:	10c0020c 	andi	r3,r2,8
   10fd4:	18018926 	beq	r3,zero,115fc <___vfiprintf_internal_r+0x698>
   10fd8:	a8c00417 	ldw	r3,16(r21)
   10fdc:	18018726 	beq	r3,zero,115fc <___vfiprintf_internal_r+0x698>
   10fe0:	1080068c 	andi	r2,r2,26
   10fe4:	00c00284 	movi	r3,10
   10fe8:	10c18c26 	beq	r2,r3,1161c <___vfiprintf_internal_r+0x6b8>
   10fec:	d8801a04 	addi	r2,sp,104
   10ff0:	d8c019c4 	addi	r3,sp,103
   10ff4:	070000b4 	movhi	fp,2
   10ff8:	05c000b4 	movhi	r23,2
   10ffc:	10c9c83a 	sub	r4,r2,r3
   11000:	e7039104 	addi	fp,fp,3652
   11004:	bdc38d04 	addi	r23,r23,3636
   11008:	d8801e15 	stw	r2,120(sp)
   1100c:	d8c01f15 	stw	r3,124(sp)
   11010:	dec01a15 	stw	sp,104(sp)
   11014:	d8001c15 	stw	zero,112(sp)
   11018:	d8001b15 	stw	zero,108(sp)
   1101c:	d8002615 	stw	zero,152(sp)
   11020:	d8002315 	stw	zero,140(sp)
   11024:	d9002715 	stw	r4,156(sp)
   11028:	d811883a 	mov	r8,sp
   1102c:	dd402115 	stw	r21,132(sp)
   11030:	b021883a 	mov	r16,r22
   11034:	80800007 	ldb	r2,0(r16)
   11038:	10037226 	beq	r2,zero,11e04 <___vfiprintf_internal_r+0xea0>
   1103c:	01000944 	movi	r4,37
   11040:	11037026 	beq	r2,r4,11e04 <___vfiprintf_internal_r+0xea0>
   11044:	8005883a 	mov	r2,r16
   11048:	00000106 	br	11050 <___vfiprintf_internal_r+0xec>
   1104c:	19000326 	beq	r3,r4,1105c <___vfiprintf_internal_r+0xf8>
   11050:	10800044 	addi	r2,r2,1
   11054:	10c00007 	ldb	r3,0(r2)
   11058:	183ffc1e 	bne	r3,zero,1104c <__alt_mem_Flash_flash_data+0xf401104c>
   1105c:	1425c83a 	sub	r18,r2,r16
   11060:	1023883a 	mov	r17,r2
   11064:	90001026 	beq	r18,zero,110a8 <___vfiprintf_internal_r+0x144>
   11068:	d8c01c17 	ldw	r3,112(sp)
   1106c:	d8801b17 	ldw	r2,108(sp)
   11070:	44000015 	stw	r16,0(r8)
   11074:	90c7883a 	add	r3,r18,r3
   11078:	10800044 	addi	r2,r2,1
   1107c:	44800115 	stw	r18,4(r8)
   11080:	d8c01c15 	stw	r3,112(sp)
   11084:	d8801b15 	stw	r2,108(sp)
   11088:	010001c4 	movi	r4,7
   1108c:	2080750e 	bge	r4,r2,11264 <___vfiprintf_internal_r+0x300>
   11090:	18036f1e 	bne	r3,zero,11e50 <___vfiprintf_internal_r+0xeec>
   11094:	d8802317 	ldw	r2,140(sp)
   11098:	d8001b15 	stw	zero,108(sp)
   1109c:	d811883a 	mov	r8,sp
   110a0:	1485883a 	add	r2,r2,r18
   110a4:	d8802315 	stw	r2,140(sp)
   110a8:	88800007 	ldb	r2,0(r17)
   110ac:	10041026 	beq	r2,zero,120f0 <___vfiprintf_internal_r+0x118c>
   110b0:	88c00047 	ldb	r3,1(r17)
   110b4:	88800044 	addi	r2,r17,1
   110b8:	d8001d85 	stb	zero,118(sp)
   110bc:	000f883a 	mov	r7,zero
   110c0:	027fffc4 	movi	r9,-1
   110c4:	0025883a 	mov	r18,zero
   110c8:	002b883a 	mov	r21,zero
   110cc:	01401604 	movi	r5,88
   110d0:	01800244 	movi	r6,9
   110d4:	03400a84 	movi	r13,42
   110d8:	03001b04 	movi	r12,108
   110dc:	14000044 	addi	r16,r2,1
   110e0:	18bff804 	addi	r2,r3,-32
   110e4:	28825536 	bltu	r5,r2,11a3c <___vfiprintf_internal_r+0xad8>
   110e8:	100490ba 	slli	r2,r2,2
   110ec:	01000074 	movhi	r4,1
   110f0:	21044004 	addi	r4,r4,4352
   110f4:	1105883a 	add	r2,r2,r4
   110f8:	10800017 	ldw	r2,0(r2)
   110fc:	1000683a 	jmp	r2
   11100:	00011800 	call	1180 <task2+0x6c8>
   11104:	00011a3c 	xorhi	zero,zero,1128
   11108:	00011a3c 	xorhi	zero,zero,1128
   1110c:	00011820 	cmpeqi	zero,zero,1120
   11110:	00011a3c 	xorhi	zero,zero,1128
   11114:	00011a3c 	xorhi	zero,zero,1128
   11118:	00011a3c 	xorhi	zero,zero,1128
   1111c:	00011a3c 	xorhi	zero,zero,1128
   11120:	00011a3c 	xorhi	zero,zero,1128
   11124:	00011a3c 	xorhi	zero,zero,1128
   11128:	00011830 	cmpltui	zero,zero,1120
   1112c:	00011850 	cmplti	zero,zero,1121
   11130:	00011a3c 	xorhi	zero,zero,1128
   11134:	00011678 	rdprs	zero,zero,1113
   11138:	00011764 	muli	zero,zero,1117
   1113c:	00011a3c 	xorhi	zero,zero,1128
   11140:	000116e4 	muli	zero,zero,1115
   11144:	000116f4 	movhi	zero,1115
   11148:	000116f4 	movhi	zero,1115
   1114c:	000116f4 	movhi	zero,1115
   11150:	000116f4 	movhi	zero,1115
   11154:	000116f4 	movhi	zero,1115
   11158:	000116f4 	movhi	zero,1115
   1115c:	000116f4 	movhi	zero,1115
   11160:	000116f4 	movhi	zero,1115
   11164:	000116f4 	movhi	zero,1115
   11168:	00011a3c 	xorhi	zero,zero,1128
   1116c:	00011a3c 	xorhi	zero,zero,1128
   11170:	00011a3c 	xorhi	zero,zero,1128
   11174:	00011a3c 	xorhi	zero,zero,1128
   11178:	00011a3c 	xorhi	zero,zero,1128
   1117c:	00011a3c 	xorhi	zero,zero,1128
   11180:	00011a3c 	xorhi	zero,zero,1128
   11184:	00011a3c 	xorhi	zero,zero,1128
   11188:	00011a3c 	xorhi	zero,zero,1128
   1118c:	00011a3c 	xorhi	zero,zero,1128
   11190:	00011720 	cmpeqi	zero,zero,1116
   11194:	00011a3c 	xorhi	zero,zero,1128
   11198:	00011a3c 	xorhi	zero,zero,1128
   1119c:	00011a3c 	xorhi	zero,zero,1128
   111a0:	00011a3c 	xorhi	zero,zero,1128
   111a4:	00011a3c 	xorhi	zero,zero,1128
   111a8:	00011a3c 	xorhi	zero,zero,1128
   111ac:	00011a3c 	xorhi	zero,zero,1128
   111b0:	00011a3c 	xorhi	zero,zero,1128
   111b4:	00011a3c 	xorhi	zero,zero,1128
   111b8:	00011a3c 	xorhi	zero,zero,1128
   111bc:	000112ac 	andhi	zero,zero,1098
   111c0:	00011a3c 	xorhi	zero,zero,1128
   111c4:	00011a3c 	xorhi	zero,zero,1128
   111c8:	00011a3c 	xorhi	zero,zero,1128
   111cc:	00011a3c 	xorhi	zero,zero,1128
   111d0:	00011a3c 	xorhi	zero,zero,1128
   111d4:	00011278 	rdprs	zero,zero,1097
   111d8:	00011a3c 	xorhi	zero,zero,1128
   111dc:	00011a3c 	xorhi	zero,zero,1128
   111e0:	000118c0 	call	118c <task2+0x6d4>
   111e4:	00011a3c 	xorhi	zero,zero,1128
   111e8:	00011a3c 	xorhi	zero,zero,1128
   111ec:	00011a3c 	xorhi	zero,zero,1128
   111f0:	00011a3c 	xorhi	zero,zero,1128
   111f4:	00011a3c 	xorhi	zero,zero,1128
   111f8:	00011a3c 	xorhi	zero,zero,1128
   111fc:	00011a3c 	xorhi	zero,zero,1128
   11200:	00011a3c 	xorhi	zero,zero,1128
   11204:	00011a3c 	xorhi	zero,zero,1128
   11208:	00011a3c 	xorhi	zero,zero,1128
   1120c:	00011860 	cmpeqi	zero,zero,1121
   11210:	0001188c 	andi	zero,zero,1122
   11214:	00011a3c 	xorhi	zero,zero,1128
   11218:	00011a3c 	xorhi	zero,zero,1128
   1121c:	00011a3c 	xorhi	zero,zero,1128
   11220:	00011968 	cmpgeui	zero,zero,1125
   11224:	0001188c 	andi	zero,zero,1122
   11228:	00011a3c 	xorhi	zero,zero,1128
   1122c:	00011a3c 	xorhi	zero,zero,1128
   11230:	00011978 	rdprs	zero,zero,1125
   11234:	00011a3c 	xorhi	zero,zero,1128
   11238:	000117a4 	muli	zero,zero,1118
   1123c:	000112b0 	cmpltui	zero,zero,1098
   11240:	0001198c 	andi	zero,zero,1126
   11244:	000119cc 	andi	zero,zero,1127
   11248:	00011a3c 	xorhi	zero,zero,1128
   1124c:	00011914 	movui	zero,1124
   11250:	00011a3c 	xorhi	zero,zero,1128
   11254:	0001127c 	xorhi	zero,zero,1097
   11258:	00011a3c 	xorhi	zero,zero,1128
   1125c:	00011a3c 	xorhi	zero,zero,1128
   11260:	000119dc 	xori	zero,zero,1127
   11264:	42000204 	addi	r8,r8,8
   11268:	d8802317 	ldw	r2,140(sp)
   1126c:	1485883a 	add	r2,r2,r18
   11270:	d8802315 	stw	r2,140(sp)
   11274:	003f8c06 	br	110a8 <__alt_mem_Flash_flash_data+0xf40110a8>
   11278:	ad400414 	ori	r21,r21,16
   1127c:	a880080c 	andi	r2,r21,32
   11280:	1001e61e 	bne	r2,zero,11a1c <___vfiprintf_internal_r+0xab8>
   11284:	a880040c 	andi	r2,r21,16
   11288:	10034726 	beq	r2,zero,11fa8 <___vfiprintf_internal_r+0x1044>
   1128c:	d8802217 	ldw	r2,136(sp)
   11290:	001b883a 	mov	r13,zero
   11294:	15800017 	ldw	r22,0(r2)
   11298:	10800104 	addi	r2,r2,4
   1129c:	d8802215 	stw	r2,136(sp)
   112a0:	b009883a 	mov	r4,r22
   112a4:	00800044 	movi	r2,1
   112a8:	00000c06 	br	112dc <___vfiprintf_internal_r+0x378>
   112ac:	ad400414 	ori	r21,r21,16
   112b0:	a880080c 	andi	r2,r21,32
   112b4:	1001491e 	bne	r2,zero,117dc <___vfiprintf_internal_r+0x878>
   112b8:	a880040c 	andi	r2,r21,16
   112bc:	10032d26 	beq	r2,zero,11f74 <___vfiprintf_internal_r+0x1010>
   112c0:	d9002217 	ldw	r4,136(sp)
   112c4:	001b883a 	mov	r13,zero
   112c8:	0005883a 	mov	r2,zero
   112cc:	25800017 	ldw	r22,0(r4)
   112d0:	21000104 	addi	r4,r4,4
   112d4:	d9002215 	stw	r4,136(sp)
   112d8:	b009883a 	mov	r4,r22
   112dc:	d8001d85 	stb	zero,118(sp)
   112e0:	4827883a 	mov	r19,r9
   112e4:	001d883a 	mov	r14,zero
   112e8:	48000216 	blt	r9,zero,112f4 <___vfiprintf_internal_r+0x390>
   112ec:	00ffdfc4 	movi	r3,-129
   112f0:	a8ea703a 	and	r21,r21,r3
   112f4:	2002071e 	bne	r4,zero,11b14 <___vfiprintf_internal_r+0xbb0>
   112f8:	4802ad26 	beq	r9,zero,11db0 <___vfiprintf_internal_r+0xe4c>
   112fc:	10803fcc 	andi	r2,r2,255
   11300:	00c00044 	movi	r3,1
   11304:	10c22b26 	beq	r2,r3,11bb4 <___vfiprintf_internal_r+0xc50>
   11308:	00c00084 	movi	r3,2
   1130c:	dd001a04 	addi	r20,sp,104
   11310:	10c0dd1e 	bne	r2,r3,11688 <___vfiprintf_internal_r+0x724>
   11314:	d9002617 	ldw	r4,152(sp)
   11318:	b08003cc 	andi	r2,r22,15
   1131c:	6806973a 	slli	r3,r13,28
   11320:	2085883a 	add	r2,r4,r2
   11324:	b02cd13a 	srli	r22,r22,4
   11328:	10800003 	ldbu	r2,0(r2)
   1132c:	681ad13a 	srli	r13,r13,4
   11330:	a53fffc4 	addi	r20,r20,-1
   11334:	1dacb03a 	or	r22,r3,r22
   11338:	a0800005 	stb	r2,0(r20)
   1133c:	b344b03a 	or	r2,r22,r13
   11340:	103ff51e 	bne	r2,zero,11318 <__alt_mem_Flash_flash_data+0xf4011318>
   11344:	d9001e17 	ldw	r4,120(sp)
   11348:	2527c83a 	sub	r19,r4,r20
   1134c:	9823883a 	mov	r17,r19
   11350:	9a40010e 	bge	r19,r9,11358 <___vfiprintf_internal_r+0x3f4>
   11354:	4823883a 	mov	r17,r9
   11358:	73803fcc 	andi	r14,r14,255
   1135c:	7380201c 	xori	r14,r14,128
   11360:	73bfe004 	addi	r14,r14,-128
   11364:	70000126 	beq	r14,zero,1136c <___vfiprintf_internal_r+0x408>
   11368:	8c400044 	addi	r17,r17,1
   1136c:	ab40008c 	andi	r13,r21,2
   11370:	68000126 	beq	r13,zero,11378 <___vfiprintf_internal_r+0x414>
   11374:	8c400084 	addi	r17,r17,2
   11378:	ad80210c 	andi	r22,r21,132
   1137c:	b001c51e 	bne	r22,zero,11a94 <___vfiprintf_internal_r+0xb30>
   11380:	9447c83a 	sub	r3,r18,r17
   11384:	00c1c30e 	bge	zero,r3,11a94 <___vfiprintf_internal_r+0xb30>
   11388:	01c00404 	movi	r7,16
   1138c:	d8801c17 	ldw	r2,112(sp)
   11390:	38c37b0e 	bge	r7,r3,12180 <___vfiprintf_internal_r+0x121c>
   11394:	010000b4 	movhi	r4,2
   11398:	21039104 	addi	r4,r4,3652
   1139c:	dc002915 	stw	r16,164(sp)
   113a0:	d9801b17 	ldw	r6,108(sp)
   113a4:	d9002415 	stw	r4,144(sp)
   113a8:	03c001c4 	movi	r15,7
   113ac:	da402515 	stw	r9,148(sp)
   113b0:	db402815 	stw	r13,160(sp)
   113b4:	1821883a 	mov	r16,r3
   113b8:	00000506 	br	113d0 <___vfiprintf_internal_r+0x46c>
   113bc:	31400084 	addi	r5,r6,2
   113c0:	42000204 	addi	r8,r8,8
   113c4:	200d883a 	mov	r6,r4
   113c8:	843ffc04 	addi	r16,r16,-16
   113cc:	3c000d0e 	bge	r7,r16,11404 <___vfiprintf_internal_r+0x4a0>
   113d0:	10800404 	addi	r2,r2,16
   113d4:	31000044 	addi	r4,r6,1
   113d8:	47000015 	stw	fp,0(r8)
   113dc:	41c00115 	stw	r7,4(r8)
   113e0:	d8801c15 	stw	r2,112(sp)
   113e4:	d9001b15 	stw	r4,108(sp)
   113e8:	793ff40e 	bge	r15,r4,113bc <__alt_mem_Flash_flash_data+0xf40113bc>
   113ec:	10019b1e 	bne	r2,zero,11a5c <___vfiprintf_internal_r+0xaf8>
   113f0:	843ffc04 	addi	r16,r16,-16
   113f4:	000d883a 	mov	r6,zero
   113f8:	01400044 	movi	r5,1
   113fc:	d811883a 	mov	r8,sp
   11400:	3c3ff316 	blt	r7,r16,113d0 <__alt_mem_Flash_flash_data+0xf40113d0>
   11404:	8007883a 	mov	r3,r16
   11408:	da402517 	ldw	r9,148(sp)
   1140c:	db402817 	ldw	r13,160(sp)
   11410:	dc002917 	ldw	r16,164(sp)
   11414:	d9002417 	ldw	r4,144(sp)
   11418:	1885883a 	add	r2,r3,r2
   1141c:	40c00115 	stw	r3,4(r8)
   11420:	41000015 	stw	r4,0(r8)
   11424:	d8801c15 	stw	r2,112(sp)
   11428:	d9401b15 	stw	r5,108(sp)
   1142c:	00c001c4 	movi	r3,7
   11430:	19426a16 	blt	r3,r5,11ddc <___vfiprintf_internal_r+0xe78>
   11434:	d8c01d87 	ldb	r3,118(sp)
   11438:	42000204 	addi	r8,r8,8
   1143c:	29000044 	addi	r4,r5,1
   11440:	1801991e 	bne	r3,zero,11aa8 <___vfiprintf_internal_r+0xb44>
   11444:	68000c26 	beq	r13,zero,11478 <___vfiprintf_internal_r+0x514>
   11448:	d8c01d04 	addi	r3,sp,116
   1144c:	10800084 	addi	r2,r2,2
   11450:	40c00015 	stw	r3,0(r8)
   11454:	00c00084 	movi	r3,2
   11458:	40c00115 	stw	r3,4(r8)
   1145c:	d8801c15 	stw	r2,112(sp)
   11460:	d9001b15 	stw	r4,108(sp)
   11464:	00c001c4 	movi	r3,7
   11468:	19024c16 	blt	r3,r4,11d9c <___vfiprintf_internal_r+0xe38>
   1146c:	200b883a 	mov	r5,r4
   11470:	42000204 	addi	r8,r8,8
   11474:	21000044 	addi	r4,r4,1
   11478:	00c02004 	movi	r3,128
   1147c:	b0c20126 	beq	r22,r3,11c84 <___vfiprintf_internal_r+0xd20>
   11480:	4cedc83a 	sub	r22,r9,r19
   11484:	0580230e 	bge	zero,r22,11514 <___vfiprintf_internal_r+0x5b0>
   11488:	01c00404 	movi	r7,16
   1148c:	3d83140e 	bge	r7,r22,120e0 <___vfiprintf_internal_r+0x117c>
   11490:	010000b4 	movhi	r4,2
   11494:	21038d04 	addi	r4,r4,3636
   11498:	d9002415 	stw	r4,144(sp)
   1149c:	034001c4 	movi	r13,7
   114a0:	00000506 	br	114b8 <___vfiprintf_internal_r+0x554>
   114a4:	29000084 	addi	r4,r5,2
   114a8:	42000204 	addi	r8,r8,8
   114ac:	180b883a 	mov	r5,r3
   114b0:	b5bffc04 	addi	r22,r22,-16
   114b4:	3d800d0e 	bge	r7,r22,114ec <___vfiprintf_internal_r+0x588>
   114b8:	10800404 	addi	r2,r2,16
   114bc:	28c00044 	addi	r3,r5,1
   114c0:	45c00015 	stw	r23,0(r8)
   114c4:	41c00115 	stw	r7,4(r8)
   114c8:	d8801c15 	stw	r2,112(sp)
   114cc:	d8c01b15 	stw	r3,108(sp)
   114d0:	68fff40e 	bge	r13,r3,114a4 <__alt_mem_Flash_flash_data+0xf40114a4>
   114d4:	1001811e 	bne	r2,zero,11adc <___vfiprintf_internal_r+0xb78>
   114d8:	b5bffc04 	addi	r22,r22,-16
   114dc:	01000044 	movi	r4,1
   114e0:	000b883a 	mov	r5,zero
   114e4:	d811883a 	mov	r8,sp
   114e8:	3dbff316 	blt	r7,r22,114b8 <__alt_mem_Flash_flash_data+0xf40114b8>
   114ec:	d8c02417 	ldw	r3,144(sp)
   114f0:	1585883a 	add	r2,r2,r22
   114f4:	45800115 	stw	r22,4(r8)
   114f8:	40c00015 	stw	r3,0(r8)
   114fc:	d8801c15 	stw	r2,112(sp)
   11500:	d9001b15 	stw	r4,108(sp)
   11504:	00c001c4 	movi	r3,7
   11508:	1901d016 	blt	r3,r4,11c4c <___vfiprintf_internal_r+0xce8>
   1150c:	42000204 	addi	r8,r8,8
   11510:	21000044 	addi	r4,r4,1
   11514:	14c5883a 	add	r2,r2,r19
   11518:	45000015 	stw	r20,0(r8)
   1151c:	44c00115 	stw	r19,4(r8)
   11520:	d8801c15 	stw	r2,112(sp)
   11524:	d9001b15 	stw	r4,108(sp)
   11528:	00c001c4 	movi	r3,7
   1152c:	1901cf0e 	bge	r3,r4,11c6c <___vfiprintf_internal_r+0xd08>
   11530:	1002361e 	bne	r2,zero,11e0c <___vfiprintf_internal_r+0xea8>
   11534:	d8001b15 	stw	zero,108(sp)
   11538:	aac0010c 	andi	r11,r21,4
   1153c:	58002826 	beq	r11,zero,115e0 <___vfiprintf_internal_r+0x67c>
   11540:	9467c83a 	sub	r19,r18,r17
   11544:	d811883a 	mov	r8,sp
   11548:	04c3340e 	bge	zero,r19,1221c <___vfiprintf_internal_r+0x12b8>
   1154c:	01c00404 	movi	r7,16
   11550:	3cc31b0e 	bge	r7,r19,121c0 <___vfiprintf_internal_r+0x125c>
   11554:	00c000b4 	movhi	r3,2
   11558:	18c39104 	addi	r3,r3,3652
   1155c:	d9001b17 	ldw	r4,108(sp)
   11560:	d8c02415 	stw	r3,144(sp)
   11564:	382b883a 	mov	r21,r7
   11568:	050001c4 	movi	r20,7
   1156c:	dd802017 	ldw	r22,128(sp)
   11570:	00000506 	br	11588 <___vfiprintf_internal_r+0x624>
   11574:	21400084 	addi	r5,r4,2
   11578:	42000204 	addi	r8,r8,8
   1157c:	1809883a 	mov	r4,r3
   11580:	9cfffc04 	addi	r19,r19,-16
   11584:	acc00d0e 	bge	r21,r19,115bc <___vfiprintf_internal_r+0x658>
   11588:	10800404 	addi	r2,r2,16
   1158c:	20c00044 	addi	r3,r4,1
   11590:	47000015 	stw	fp,0(r8)
   11594:	45400115 	stw	r21,4(r8)
   11598:	d8801c15 	stw	r2,112(sp)
   1159c:	d8c01b15 	stw	r3,108(sp)
   115a0:	a0fff40e 	bge	r20,r3,11574 <__alt_mem_Flash_flash_data+0xf4011574>
   115a4:	10019f1e 	bne	r2,zero,11c24 <___vfiprintf_internal_r+0xcc0>
   115a8:	9cfffc04 	addi	r19,r19,-16
   115ac:	01400044 	movi	r5,1
   115b0:	0009883a 	mov	r4,zero
   115b4:	d811883a 	mov	r8,sp
   115b8:	acfff316 	blt	r21,r19,11588 <__alt_mem_Flash_flash_data+0xf4011588>
   115bc:	d8c02417 	ldw	r3,144(sp)
   115c0:	14c5883a 	add	r2,r2,r19
   115c4:	44c00115 	stw	r19,4(r8)
   115c8:	40c00015 	stw	r3,0(r8)
   115cc:	d8801c15 	stw	r2,112(sp)
   115d0:	d9401b15 	stw	r5,108(sp)
   115d4:	00c001c4 	movi	r3,7
   115d8:	1941810e 	bge	r3,r5,11be0 <___vfiprintf_internal_r+0xc7c>
   115dc:	10017a1e 	bne	r2,zero,11bc8 <___vfiprintf_internal_r+0xc64>
   115e0:	8c82a416 	blt	r17,r18,12074 <___vfiprintf_internal_r+0x1110>
   115e4:	d9002317 	ldw	r4,140(sp)
   115e8:	2449883a 	add	r4,r4,r17
   115ec:	d9002315 	stw	r4,140(sp)
   115f0:	d8001b15 	stw	zero,108(sp)
   115f4:	d811883a 	mov	r8,sp
   115f8:	003e8e06 	br	11034 <__alt_mem_Flash_flash_data+0xf4011034>
   115fc:	d9002017 	ldw	r4,128(sp)
   11600:	a80b883a 	mov	r5,r21
   11604:	000b3e40 	call	b3e4 <__swsetup_r>
   11608:	10000c1e 	bne	r2,zero,1163c <___vfiprintf_internal_r+0x6d8>
   1160c:	a880030b 	ldhu	r2,12(r21)
   11610:	00c00284 	movi	r3,10
   11614:	1080068c 	andi	r2,r2,26
   11618:	10fe741e 	bne	r2,r3,10fec <__alt_mem_Flash_flash_data+0xf4010fec>
   1161c:	a880038f 	ldh	r2,14(r21)
   11620:	103e7216 	blt	r2,zero,10fec <__alt_mem_Flash_flash_data+0xf4010fec>
   11624:	d9002017 	ldw	r4,128(sp)
   11628:	d9c02217 	ldw	r7,136(sp)
   1162c:	a80b883a 	mov	r5,r21
   11630:	b00d883a 	mov	r6,r22
   11634:	00122580 	call	12258 <__sbprintf>
   11638:	00000106 	br	11640 <___vfiprintf_internal_r+0x6dc>
   1163c:	00bfffc4 	movi	r2,-1
   11640:	dfc03517 	ldw	ra,212(sp)
   11644:	df003417 	ldw	fp,208(sp)
   11648:	ddc03317 	ldw	r23,204(sp)
   1164c:	dd803217 	ldw	r22,200(sp)
   11650:	dd403117 	ldw	r21,196(sp)
   11654:	dd003017 	ldw	r20,192(sp)
   11658:	dcc02f17 	ldw	r19,188(sp)
   1165c:	dc802e17 	ldw	r18,184(sp)
   11660:	dc402d17 	ldw	r17,180(sp)
   11664:	dc002c17 	ldw	r16,176(sp)
   11668:	dec03604 	addi	sp,sp,216
   1166c:	f800283a 	ret
   11670:	000d4440 	call	d444 <__sinit>
   11674:	003e4d06 	br	10fac <__alt_mem_Flash_flash_data+0xf4010fac>
   11678:	8005883a 	mov	r2,r16
   1167c:	ad400114 	ori	r21,r21,4
   11680:	80c00007 	ldb	r3,0(r16)
   11684:	003e9506 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11688:	b006d0fa 	srli	r3,r22,3
   1168c:	6808977a 	slli	r4,r13,29
   11690:	681ad0fa 	srli	r13,r13,3
   11694:	b58001cc 	andi	r22,r22,7
   11698:	b0800c04 	addi	r2,r22,48
   1169c:	a53fffc4 	addi	r20,r20,-1
   116a0:	20ecb03a 	or	r22,r4,r3
   116a4:	a0800005 	stb	r2,0(r20)
   116a8:	b346b03a 	or	r3,r22,r13
   116ac:	183ff61e 	bne	r3,zero,11688 <__alt_mem_Flash_flash_data+0xf4011688>
   116b0:	a8c0004c 	andi	r3,r21,1
   116b4:	a009883a 	mov	r4,r20
   116b8:	18013b26 	beq	r3,zero,11ba8 <___vfiprintf_internal_r+0xc44>
   116bc:	10803fcc 	andi	r2,r2,255
   116c0:	1080201c 	xori	r2,r2,128
   116c4:	10bfe004 	addi	r2,r2,-128
   116c8:	00c00c04 	movi	r3,48
   116cc:	10ff1d26 	beq	r2,r3,11344 <__alt_mem_Flash_flash_data+0xf4011344>
   116d0:	d8801e17 	ldw	r2,120(sp)
   116d4:	a53fffc4 	addi	r20,r20,-1
   116d8:	20ffffc5 	stb	r3,-1(r4)
   116dc:	1527c83a 	sub	r19,r2,r20
   116e0:	003f1a06 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   116e4:	ad402014 	ori	r21,r21,128
   116e8:	8005883a 	mov	r2,r16
   116ec:	80c00007 	ldb	r3,0(r16)
   116f0:	003e7a06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   116f4:	8005883a 	mov	r2,r16
   116f8:	0025883a 	mov	r18,zero
   116fc:	193ff404 	addi	r4,r3,-48
   11700:	10c00007 	ldb	r3,0(r2)
   11704:	948002a4 	muli	r18,r18,10
   11708:	84000044 	addi	r16,r16,1
   1170c:	8005883a 	mov	r2,r16
   11710:	9125883a 	add	r18,r18,r4
   11714:	193ff404 	addi	r4,r3,-48
   11718:	313ff92e 	bgeu	r6,r4,11700 <__alt_mem_Flash_flash_data+0xf4011700>
   1171c:	003e7006 	br	110e0 <__alt_mem_Flash_flash_data+0xf40110e0>
   11720:	ad400414 	ori	r21,r21,16
   11724:	d9c01d85 	stb	r7,118(sp)
   11728:	a880080c 	andi	r2,r21,32
   1172c:	d8c02217 	ldw	r3,136(sp)
   11730:	10005a26 	beq	r2,zero,1189c <___vfiprintf_internal_r+0x938>
   11734:	d9002217 	ldw	r4,136(sp)
   11738:	18800117 	ldw	r2,4(r3)
   1173c:	1d800017 	ldw	r22,0(r3)
   11740:	21000204 	addi	r4,r4,8
   11744:	d9002215 	stw	r4,136(sp)
   11748:	101b883a 	mov	r13,r2
   1174c:	1001f416 	blt	r2,zero,11f20 <___vfiprintf_internal_r+0xfbc>
   11750:	db801d83 	ldbu	r14,118(sp)
   11754:	4827883a 	mov	r19,r9
   11758:	00800044 	movi	r2,1
   1175c:	b348b03a 	or	r4,r22,r13
   11760:	003ee106 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   11764:	80c00007 	ldb	r3,0(r16)
   11768:	80800044 	addi	r2,r16,1
   1176c:	1b42a326 	beq	r3,r13,121fc <___vfiprintf_internal_r+0x1298>
   11770:	193ff404 	addi	r4,r3,-48
   11774:	1021883a 	mov	r16,r2
   11778:	0013883a 	mov	r9,zero
   1177c:	313e5836 	bltu	r6,r4,110e0 <__alt_mem_Flash_flash_data+0xf40110e0>
   11780:	80c00007 	ldb	r3,0(r16)
   11784:	4a4002a4 	muli	r9,r9,10
   11788:	84000044 	addi	r16,r16,1
   1178c:	2253883a 	add	r9,r4,r9
   11790:	193ff404 	addi	r4,r3,-48
   11794:	313ffa2e 	bgeu	r6,r4,11780 <__alt_mem_Flash_flash_data+0xf4011780>
   11798:	483e510e 	bge	r9,zero,110e0 <__alt_mem_Flash_flash_data+0xf40110e0>
   1179c:	027fffc4 	movi	r9,-1
   117a0:	003e4f06 	br	110e0 <__alt_mem_Flash_flash_data+0xf40110e0>
   117a4:	d9c01d85 	stb	r7,118(sp)
   117a8:	a880080c 	andi	r2,r21,32
   117ac:	10020826 	beq	r2,zero,11fd0 <___vfiprintf_internal_r+0x106c>
   117b0:	d8c02217 	ldw	r3,136(sp)
   117b4:	d9002317 	ldw	r4,140(sp)
   117b8:	18800017 	ldw	r2,0(r3)
   117bc:	2007d7fa 	srai	r3,r4,31
   117c0:	d9002217 	ldw	r4,136(sp)
   117c4:	10c00115 	stw	r3,4(r2)
   117c8:	21000104 	addi	r4,r4,4
   117cc:	d9002215 	stw	r4,136(sp)
   117d0:	d9002317 	ldw	r4,140(sp)
   117d4:	11000015 	stw	r4,0(r2)
   117d8:	003e1606 	br	11034 <__alt_mem_Flash_flash_data+0xf4011034>
   117dc:	d8802217 	ldw	r2,136(sp)
   117e0:	d8c02217 	ldw	r3,136(sp)
   117e4:	15800017 	ldw	r22,0(r2)
   117e8:	13400117 	ldw	r13,4(r2)
   117ec:	18c00204 	addi	r3,r3,8
   117f0:	0005883a 	mov	r2,zero
   117f4:	d8c02215 	stw	r3,136(sp)
   117f8:	b348b03a 	or	r4,r22,r13
   117fc:	003eb706 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11800:	38803fcc 	andi	r2,r7,255
   11804:	1080201c 	xori	r2,r2,128
   11808:	10bfe004 	addi	r2,r2,-128
   1180c:	1001e31e 	bne	r2,zero,11f9c <___vfiprintf_internal_r+0x1038>
   11810:	8005883a 	mov	r2,r16
   11814:	01c00804 	movi	r7,32
   11818:	80c00007 	ldb	r3,0(r16)
   1181c:	003e2f06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11820:	ad400054 	ori	r21,r21,1
   11824:	8005883a 	mov	r2,r16
   11828:	80c00007 	ldb	r3,0(r16)
   1182c:	003e2b06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11830:	d8c02217 	ldw	r3,136(sp)
   11834:	1c800017 	ldw	r18,0(r3)
   11838:	18c00104 	addi	r3,r3,4
   1183c:	90023816 	blt	r18,zero,12120 <___vfiprintf_internal_r+0x11bc>
   11840:	d8c02215 	stw	r3,136(sp)
   11844:	8005883a 	mov	r2,r16
   11848:	80c00007 	ldb	r3,0(r16)
   1184c:	003e2306 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11850:	8005883a 	mov	r2,r16
   11854:	01c00ac4 	movi	r7,43
   11858:	80c00007 	ldb	r3,0(r16)
   1185c:	003e1f06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11860:	d8c02217 	ldw	r3,136(sp)
   11864:	04400044 	movi	r17,1
   11868:	d8001d85 	stb	zero,118(sp)
   1186c:	18800017 	ldw	r2,0(r3)
   11870:	18c00104 	addi	r3,r3,4
   11874:	d8c02215 	stw	r3,136(sp)
   11878:	d8801005 	stb	r2,64(sp)
   1187c:	8827883a 	mov	r19,r17
   11880:	dd001004 	addi	r20,sp,64
   11884:	0013883a 	mov	r9,zero
   11888:	003eb806 	br	1136c <__alt_mem_Flash_flash_data+0xf401136c>
   1188c:	d9c01d85 	stb	r7,118(sp)
   11890:	a880080c 	andi	r2,r21,32
   11894:	d8c02217 	ldw	r3,136(sp)
   11898:	103fa61e 	bne	r2,zero,11734 <__alt_mem_Flash_flash_data+0xf4011734>
   1189c:	a880040c 	andi	r2,r21,16
   118a0:	1001dd26 	beq	r2,zero,12018 <___vfiprintf_internal_r+0x10b4>
   118a4:	1d800017 	ldw	r22,0(r3)
   118a8:	d8802217 	ldw	r2,136(sp)
   118ac:	b01bd7fa 	srai	r13,r22,31
   118b0:	10800104 	addi	r2,r2,4
   118b4:	d8802215 	stw	r2,136(sp)
   118b8:	6805883a 	mov	r2,r13
   118bc:	003fa306 	br	1174c <__alt_mem_Flash_flash_data+0xf401174c>
   118c0:	008000b4 	movhi	r2,2
   118c4:	10831704 	addi	r2,r2,3164
   118c8:	d8802615 	stw	r2,152(sp)
   118cc:	d9c01d85 	stb	r7,118(sp)
   118d0:	a880080c 	andi	r2,r21,32
   118d4:	10004726 	beq	r2,zero,119f4 <___vfiprintf_internal_r+0xa90>
   118d8:	d9002217 	ldw	r4,136(sp)
   118dc:	25800017 	ldw	r22,0(r4)
   118e0:	23400117 	ldw	r13,4(r4)
   118e4:	21000204 	addi	r4,r4,8
   118e8:	d9002215 	stw	r4,136(sp)
   118ec:	a880004c 	andi	r2,r21,1
   118f0:	10014e26 	beq	r2,zero,11e2c <___vfiprintf_internal_r+0xec8>
   118f4:	b348b03a 	or	r4,r22,r13
   118f8:	20019c26 	beq	r4,zero,11f6c <___vfiprintf_internal_r+0x1008>
   118fc:	00800c04 	movi	r2,48
   11900:	d8801d05 	stb	r2,116(sp)
   11904:	d8c01d45 	stb	r3,117(sp)
   11908:	ad400094 	ori	r21,r21,2
   1190c:	00800084 	movi	r2,2
   11910:	003e7206 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11914:	d8c02217 	ldw	r3,136(sp)
   11918:	d8001d85 	stb	zero,118(sp)
   1191c:	1d000017 	ldw	r20,0(r3)
   11920:	1d800104 	addi	r22,r3,4
   11924:	a0021c26 	beq	r20,zero,12198 <___vfiprintf_internal_r+0x1234>
   11928:	a009883a 	mov	r4,r20
   1192c:	48020016 	blt	r9,zero,12130 <___vfiprintf_internal_r+0x11cc>
   11930:	480d883a 	mov	r6,r9
   11934:	000b883a 	mov	r5,zero
   11938:	da002a15 	stw	r8,168(sp)
   1193c:	da402b15 	stw	r9,172(sp)
   11940:	000e1880 	call	e188 <memchr>
   11944:	da002a17 	ldw	r8,168(sp)
   11948:	da402b17 	ldw	r9,172(sp)
   1194c:	10022226 	beq	r2,zero,121d8 <___vfiprintf_internal_r+0x1274>
   11950:	1527c83a 	sub	r19,r2,r20
   11954:	4cc1c916 	blt	r9,r19,1207c <___vfiprintf_internal_r+0x1118>
   11958:	db801d83 	ldbu	r14,118(sp)
   1195c:	dd802215 	stw	r22,136(sp)
   11960:	0013883a 	mov	r9,zero
   11964:	003e7906 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   11968:	ad401014 	ori	r21,r21,64
   1196c:	8005883a 	mov	r2,r16
   11970:	80c00007 	ldb	r3,0(r16)
   11974:	003dd906 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11978:	80c00007 	ldb	r3,0(r16)
   1197c:	8005883a 	mov	r2,r16
   11980:	1b01e326 	beq	r3,r12,12110 <___vfiprintf_internal_r+0x11ac>
   11984:	ad400414 	ori	r21,r21,16
   11988:	003dd406 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   1198c:	d9002217 	ldw	r4,136(sp)
   11990:	00800c04 	movi	r2,48
   11994:	d8801d05 	stb	r2,116(sp)
   11998:	25800017 	ldw	r22,0(r4)
   1199c:	00801e04 	movi	r2,120
   119a0:	d8801d45 	stb	r2,117(sp)
   119a4:	008000b4 	movhi	r2,2
   119a8:	21000104 	addi	r4,r4,4
   119ac:	10831c04 	addi	r2,r2,3184
   119b0:	d9002215 	stw	r4,136(sp)
   119b4:	d8802615 	stw	r2,152(sp)
   119b8:	001b883a 	mov	r13,zero
   119bc:	ad400094 	ori	r21,r21,2
   119c0:	00800084 	movi	r2,2
   119c4:	b009883a 	mov	r4,r22
   119c8:	003e4406 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   119cc:	ad400814 	ori	r21,r21,32
   119d0:	8005883a 	mov	r2,r16
   119d4:	80c00007 	ldb	r3,0(r16)
   119d8:	003dc006 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   119dc:	008000b4 	movhi	r2,2
   119e0:	10831c04 	addi	r2,r2,3184
   119e4:	d8802615 	stw	r2,152(sp)
   119e8:	d9c01d85 	stb	r7,118(sp)
   119ec:	a880080c 	andi	r2,r21,32
   119f0:	103fb91e 	bne	r2,zero,118d8 <__alt_mem_Flash_flash_data+0xf40118d8>
   119f4:	a880040c 	andi	r2,r21,16
   119f8:	10010f1e 	bne	r2,zero,11e38 <___vfiprintf_internal_r+0xed4>
   119fc:	a880100c 	andi	r2,r21,64
   11a00:	10010d26 	beq	r2,zero,11e38 <___vfiprintf_internal_r+0xed4>
   11a04:	d9002217 	ldw	r4,136(sp)
   11a08:	001b883a 	mov	r13,zero
   11a0c:	2580000b 	ldhu	r22,0(r4)
   11a10:	21000104 	addi	r4,r4,4
   11a14:	d9002215 	stw	r4,136(sp)
   11a18:	003fb406 	br	118ec <__alt_mem_Flash_flash_data+0xf40118ec>
   11a1c:	d9002217 	ldw	r4,136(sp)
   11a20:	00800044 	movi	r2,1
   11a24:	25800017 	ldw	r22,0(r4)
   11a28:	23400117 	ldw	r13,4(r4)
   11a2c:	21000204 	addi	r4,r4,8
   11a30:	d9002215 	stw	r4,136(sp)
   11a34:	b348b03a 	or	r4,r22,r13
   11a38:	003e2806 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11a3c:	d9c01d85 	stb	r7,118(sp)
   11a40:	1801ab26 	beq	r3,zero,120f0 <___vfiprintf_internal_r+0x118c>
   11a44:	04400044 	movi	r17,1
   11a48:	d8c01005 	stb	r3,64(sp)
   11a4c:	d8001d85 	stb	zero,118(sp)
   11a50:	8827883a 	mov	r19,r17
   11a54:	dd001004 	addi	r20,sp,64
   11a58:	003f8a06 	br	11884 <__alt_mem_Flash_flash_data+0xf4011884>
   11a5c:	d9002017 	ldw	r4,128(sp)
   11a60:	d9402117 	ldw	r5,132(sp)
   11a64:	d9801a04 	addi	r6,sp,104
   11a68:	d9c02b15 	stw	r7,172(sp)
   11a6c:	dbc02a15 	stw	r15,168(sp)
   11a70:	0010e500 	call	10e50 <__sprint_r.part.0>
   11a74:	d9c02b17 	ldw	r7,172(sp)
   11a78:	dbc02a17 	ldw	r15,168(sp)
   11a7c:	1000631e 	bne	r2,zero,11c0c <___vfiprintf_internal_r+0xca8>
   11a80:	d9801b17 	ldw	r6,108(sp)
   11a84:	d8801c17 	ldw	r2,112(sp)
   11a88:	d811883a 	mov	r8,sp
   11a8c:	31400044 	addi	r5,r6,1
   11a90:	003e4d06 	br	113c8 <__alt_mem_Flash_flash_data+0xf40113c8>
   11a94:	d9401b17 	ldw	r5,108(sp)
   11a98:	d8801c17 	ldw	r2,112(sp)
   11a9c:	29000044 	addi	r4,r5,1
   11aa0:	d8c01d87 	ldb	r3,118(sp)
   11aa4:	183e6726 	beq	r3,zero,11444 <__alt_mem_Flash_flash_data+0xf4011444>
   11aa8:	00c00044 	movi	r3,1
   11aac:	d9401d84 	addi	r5,sp,118
   11ab0:	10c5883a 	add	r2,r2,r3
   11ab4:	41400015 	stw	r5,0(r8)
   11ab8:	40c00115 	stw	r3,4(r8)
   11abc:	d8801c15 	stw	r2,112(sp)
   11ac0:	d9001b15 	stw	r4,108(sp)
   11ac4:	014001c4 	movi	r5,7
   11ac8:	2900ab16 	blt	r5,r4,11d78 <___vfiprintf_internal_r+0xe14>
   11acc:	200b883a 	mov	r5,r4
   11ad0:	42000204 	addi	r8,r8,8
   11ad4:	21000044 	addi	r4,r4,1
   11ad8:	003e5a06 	br	11444 <__alt_mem_Flash_flash_data+0xf4011444>
   11adc:	d9002017 	ldw	r4,128(sp)
   11ae0:	d9402117 	ldw	r5,132(sp)
   11ae4:	d9801a04 	addi	r6,sp,104
   11ae8:	d9c02b15 	stw	r7,172(sp)
   11aec:	db402a15 	stw	r13,168(sp)
   11af0:	0010e500 	call	10e50 <__sprint_r.part.0>
   11af4:	d9c02b17 	ldw	r7,172(sp)
   11af8:	db402a17 	ldw	r13,168(sp)
   11afc:	1000431e 	bne	r2,zero,11c0c <___vfiprintf_internal_r+0xca8>
   11b00:	d9401b17 	ldw	r5,108(sp)
   11b04:	d8801c17 	ldw	r2,112(sp)
   11b08:	d811883a 	mov	r8,sp
   11b0c:	29000044 	addi	r4,r5,1
   11b10:	003e6706 	br	114b0 <__alt_mem_Flash_flash_data+0xf40114b0>
   11b14:	10803fcc 	andi	r2,r2,255
   11b18:	00c00044 	movi	r3,1
   11b1c:	10fdfa1e 	bne	r2,r3,11308 <__alt_mem_Flash_flash_data+0xf4011308>
   11b20:	6800021e 	bne	r13,zero,11b2c <___vfiprintf_internal_r+0xbc8>
   11b24:	00800244 	movi	r2,9
   11b28:	1580222e 	bgeu	r2,r22,11bb4 <___vfiprintf_internal_r+0xc50>
   11b2c:	dc802415 	stw	r18,144(sp)
   11b30:	dc002515 	stw	r16,148(sp)
   11b34:	dc401a04 	addi	r17,sp,104
   11b38:	b021883a 	mov	r16,r22
   11b3c:	4827883a 	mov	r19,r9
   11b40:	4029883a 	mov	r20,r8
   11b44:	702d883a 	mov	r22,r14
   11b48:	6825883a 	mov	r18,r13
   11b4c:	8009883a 	mov	r4,r16
   11b50:	900b883a 	mov	r5,r18
   11b54:	01800284 	movi	r6,10
   11b58:	000f883a 	mov	r7,zero
   11b5c:	00131cc0 	call	131cc <__umoddi3>
   11b60:	10800c04 	addi	r2,r2,48
   11b64:	8c7fffc4 	addi	r17,r17,-1
   11b68:	8009883a 	mov	r4,r16
   11b6c:	900b883a 	mov	r5,r18
   11b70:	01800284 	movi	r6,10
   11b74:	000f883a 	mov	r7,zero
   11b78:	88800005 	stb	r2,0(r17)
   11b7c:	0012c0c0 	call	12c0c <__udivdi3>
   11b80:	1021883a 	mov	r16,r2
   11b84:	10c4b03a 	or	r2,r2,r3
   11b88:	1825883a 	mov	r18,r3
   11b8c:	103fef1e 	bne	r2,zero,11b4c <__alt_mem_Flash_flash_data+0xf4011b4c>
   11b90:	dc802417 	ldw	r18,144(sp)
   11b94:	dc002517 	ldw	r16,148(sp)
   11b98:	a011883a 	mov	r8,r20
   11b9c:	9813883a 	mov	r9,r19
   11ba0:	b01d883a 	mov	r14,r22
   11ba4:	8829883a 	mov	r20,r17
   11ba8:	d8c01e17 	ldw	r3,120(sp)
   11bac:	1d27c83a 	sub	r19,r3,r20
   11bb0:	003de606 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   11bb4:	b5800c04 	addi	r22,r22,48
   11bb8:	dd8019c5 	stb	r22,103(sp)
   11bbc:	dcc02717 	ldw	r19,156(sp)
   11bc0:	dd0019c4 	addi	r20,sp,103
   11bc4:	003de106 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   11bc8:	d9002017 	ldw	r4,128(sp)
   11bcc:	d9402117 	ldw	r5,132(sp)
   11bd0:	d9801a04 	addi	r6,sp,104
   11bd4:	0010e500 	call	10e50 <__sprint_r.part.0>
   11bd8:	10000c1e 	bne	r2,zero,11c0c <___vfiprintf_internal_r+0xca8>
   11bdc:	d8801c17 	ldw	r2,112(sp)
   11be0:	8c80010e 	bge	r17,r18,11be8 <___vfiprintf_internal_r+0xc84>
   11be4:	9023883a 	mov	r17,r18
   11be8:	d8c02317 	ldw	r3,140(sp)
   11bec:	1c47883a 	add	r3,r3,r17
   11bf0:	d8c02315 	stw	r3,140(sp)
   11bf4:	103e7e26 	beq	r2,zero,115f0 <__alt_mem_Flash_flash_data+0xf40115f0>
   11bf8:	d9002017 	ldw	r4,128(sp)
   11bfc:	d9402117 	ldw	r5,132(sp)
   11c00:	d9801a04 	addi	r6,sp,104
   11c04:	0010e500 	call	10e50 <__sprint_r.part.0>
   11c08:	103e7926 	beq	r2,zero,115f0 <__alt_mem_Flash_flash_data+0xf40115f0>
   11c0c:	dd402117 	ldw	r21,132(sp)
   11c10:	a880030b 	ldhu	r2,12(r21)
   11c14:	1080100c 	andi	r2,r2,64
   11c18:	103e881e 	bne	r2,zero,1163c <__alt_mem_Flash_flash_data+0xf401163c>
   11c1c:	d8802317 	ldw	r2,140(sp)
   11c20:	003e8706 	br	11640 <__alt_mem_Flash_flash_data+0xf4011640>
   11c24:	d9402117 	ldw	r5,132(sp)
   11c28:	b009883a 	mov	r4,r22
   11c2c:	d9801a04 	addi	r6,sp,104
   11c30:	0010e500 	call	10e50 <__sprint_r.part.0>
   11c34:	103ff51e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11c38:	d9001b17 	ldw	r4,108(sp)
   11c3c:	d8801c17 	ldw	r2,112(sp)
   11c40:	d811883a 	mov	r8,sp
   11c44:	21400044 	addi	r5,r4,1
   11c48:	003e4d06 	br	11580 <__alt_mem_Flash_flash_data+0xf4011580>
   11c4c:	1000aa1e 	bne	r2,zero,11ef8 <___vfiprintf_internal_r+0xf94>
   11c50:	00c00044 	movi	r3,1
   11c54:	9805883a 	mov	r2,r19
   11c58:	dd000015 	stw	r20,0(sp)
   11c5c:	dcc00115 	stw	r19,4(sp)
   11c60:	dcc01c15 	stw	r19,112(sp)
   11c64:	d8c01b15 	stw	r3,108(sp)
   11c68:	d811883a 	mov	r8,sp
   11c6c:	42000204 	addi	r8,r8,8
   11c70:	aac0010c 	andi	r11,r21,4
   11c74:	583fda26 	beq	r11,zero,11be0 <__alt_mem_Flash_flash_data+0xf4011be0>
   11c78:	9467c83a 	sub	r19,r18,r17
   11c7c:	04fe3316 	blt	zero,r19,1154c <__alt_mem_Flash_flash_data+0xf401154c>
   11c80:	003fd706 	br	11be0 <__alt_mem_Flash_flash_data+0xf4011be0>
   11c84:	946dc83a 	sub	r22,r18,r17
   11c88:	05bdfd0e 	bge	zero,r22,11480 <__alt_mem_Flash_flash_data+0xf4011480>
   11c8c:	00c000b4 	movhi	r3,2
   11c90:	18c38d04 	addi	r3,r3,3636
   11c94:	01c00404 	movi	r7,16
   11c98:	d8c02415 	stw	r3,144(sp)
   11c9c:	3d81530e 	bge	r7,r22,121ec <___vfiprintf_internal_r+0x1288>
   11ca0:	8007883a 	mov	r3,r16
   11ca4:	034001c4 	movi	r13,7
   11ca8:	b021883a 	mov	r16,r22
   11cac:	da402515 	stw	r9,148(sp)
   11cb0:	182d883a 	mov	r22,r3
   11cb4:	00000506 	br	11ccc <___vfiprintf_internal_r+0xd68>
   11cb8:	29800084 	addi	r6,r5,2
   11cbc:	42000204 	addi	r8,r8,8
   11cc0:	180b883a 	mov	r5,r3
   11cc4:	843ffc04 	addi	r16,r16,-16
   11cc8:	3c000d0e 	bge	r7,r16,11d00 <___vfiprintf_internal_r+0xd9c>
   11ccc:	10800404 	addi	r2,r2,16
   11cd0:	28c00044 	addi	r3,r5,1
   11cd4:	45c00015 	stw	r23,0(r8)
   11cd8:	41c00115 	stw	r7,4(r8)
   11cdc:	d8801c15 	stw	r2,112(sp)
   11ce0:	d8c01b15 	stw	r3,108(sp)
   11ce4:	68fff40e 	bge	r13,r3,11cb8 <__alt_mem_Flash_flash_data+0xf4011cb8>
   11ce8:	1000151e 	bne	r2,zero,11d40 <___vfiprintf_internal_r+0xddc>
   11cec:	843ffc04 	addi	r16,r16,-16
   11cf0:	01800044 	movi	r6,1
   11cf4:	000b883a 	mov	r5,zero
   11cf8:	d811883a 	mov	r8,sp
   11cfc:	3c3ff316 	blt	r7,r16,11ccc <__alt_mem_Flash_flash_data+0xf4011ccc>
   11d00:	da402517 	ldw	r9,148(sp)
   11d04:	b007883a 	mov	r3,r22
   11d08:	802d883a 	mov	r22,r16
   11d0c:	1821883a 	mov	r16,r3
   11d10:	d8c02417 	ldw	r3,144(sp)
   11d14:	1585883a 	add	r2,r2,r22
   11d18:	45800115 	stw	r22,4(r8)
   11d1c:	40c00015 	stw	r3,0(r8)
   11d20:	d8801c15 	stw	r2,112(sp)
   11d24:	d9801b15 	stw	r6,108(sp)
   11d28:	00c001c4 	movi	r3,7
   11d2c:	19806d16 	blt	r3,r6,11ee4 <___vfiprintf_internal_r+0xf80>
   11d30:	42000204 	addi	r8,r8,8
   11d34:	31000044 	addi	r4,r6,1
   11d38:	300b883a 	mov	r5,r6
   11d3c:	003dd006 	br	11480 <__alt_mem_Flash_flash_data+0xf4011480>
   11d40:	d9002017 	ldw	r4,128(sp)
   11d44:	d9402117 	ldw	r5,132(sp)
   11d48:	d9801a04 	addi	r6,sp,104
   11d4c:	d9c02b15 	stw	r7,172(sp)
   11d50:	db402a15 	stw	r13,168(sp)
   11d54:	0010e500 	call	10e50 <__sprint_r.part.0>
   11d58:	d9c02b17 	ldw	r7,172(sp)
   11d5c:	db402a17 	ldw	r13,168(sp)
   11d60:	103faa1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11d64:	d9401b17 	ldw	r5,108(sp)
   11d68:	d8801c17 	ldw	r2,112(sp)
   11d6c:	d811883a 	mov	r8,sp
   11d70:	29800044 	addi	r6,r5,1
   11d74:	003fd306 	br	11cc4 <__alt_mem_Flash_flash_data+0xf4011cc4>
   11d78:	1000401e 	bne	r2,zero,11e7c <___vfiprintf_internal_r+0xf18>
   11d7c:	68003b26 	beq	r13,zero,11e6c <___vfiprintf_internal_r+0xf08>
   11d80:	d9001d04 	addi	r4,sp,116
   11d84:	00800084 	movi	r2,2
   11d88:	d9000015 	stw	r4,0(sp)
   11d8c:	d8800115 	stw	r2,4(sp)
   11d90:	1809883a 	mov	r4,r3
   11d94:	d811883a 	mov	r8,sp
   11d98:	003db406 	br	1146c <__alt_mem_Flash_flash_data+0xf401146c>
   11d9c:	1000451e 	bne	r2,zero,11eb4 <___vfiprintf_internal_r+0xf50>
   11da0:	01000044 	movi	r4,1
   11da4:	000b883a 	mov	r5,zero
   11da8:	d811883a 	mov	r8,sp
   11dac:	003db206 	br	11478 <__alt_mem_Flash_flash_data+0xf4011478>
   11db0:	10803fcc 	andi	r2,r2,255
   11db4:	1000071e 	bne	r2,zero,11dd4 <___vfiprintf_internal_r+0xe70>
   11db8:	a880004c 	andi	r2,r21,1
   11dbc:	10000526 	beq	r2,zero,11dd4 <___vfiprintf_internal_r+0xe70>
   11dc0:	00800c04 	movi	r2,48
   11dc4:	d88019c5 	stb	r2,103(sp)
   11dc8:	dcc02717 	ldw	r19,156(sp)
   11dcc:	dd0019c4 	addi	r20,sp,103
   11dd0:	003d5e06 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   11dd4:	dd001a04 	addi	r20,sp,104
   11dd8:	003d5c06 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   11ddc:	1000971e 	bne	r2,zero,1203c <___vfiprintf_internal_r+0x10d8>
   11de0:	d8c01d87 	ldb	r3,118(sp)
   11de4:	18005826 	beq	r3,zero,11f48 <___vfiprintf_internal_r+0xfe4>
   11de8:	00800044 	movi	r2,1
   11dec:	d8c01d84 	addi	r3,sp,118
   11df0:	1009883a 	mov	r4,r2
   11df4:	d8c00015 	stw	r3,0(sp)
   11df8:	d8800115 	stw	r2,4(sp)
   11dfc:	d811883a 	mov	r8,sp
   11e00:	003f3206 	br	11acc <__alt_mem_Flash_flash_data+0xf4011acc>
   11e04:	8023883a 	mov	r17,r16
   11e08:	003ca706 	br	110a8 <__alt_mem_Flash_flash_data+0xf40110a8>
   11e0c:	d9002017 	ldw	r4,128(sp)
   11e10:	d9402117 	ldw	r5,132(sp)
   11e14:	d9801a04 	addi	r6,sp,104
   11e18:	0010e500 	call	10e50 <__sprint_r.part.0>
   11e1c:	103f7b1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11e20:	d8801c17 	ldw	r2,112(sp)
   11e24:	d811883a 	mov	r8,sp
   11e28:	003f9106 	br	11c70 <__alt_mem_Flash_flash_data+0xf4011c70>
   11e2c:	00800084 	movi	r2,2
   11e30:	b348b03a 	or	r4,r22,r13
   11e34:	003d2906 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11e38:	d8802217 	ldw	r2,136(sp)
   11e3c:	001b883a 	mov	r13,zero
   11e40:	15800017 	ldw	r22,0(r2)
   11e44:	10800104 	addi	r2,r2,4
   11e48:	d8802215 	stw	r2,136(sp)
   11e4c:	003ea706 	br	118ec <__alt_mem_Flash_flash_data+0xf40118ec>
   11e50:	d9002017 	ldw	r4,128(sp)
   11e54:	d9402117 	ldw	r5,132(sp)
   11e58:	d9801a04 	addi	r6,sp,104
   11e5c:	0010e500 	call	10e50 <__sprint_r.part.0>
   11e60:	103f6a1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11e64:	d811883a 	mov	r8,sp
   11e68:	003cff06 	br	11268 <__alt_mem_Flash_flash_data+0xf4011268>
   11e6c:	000b883a 	mov	r5,zero
   11e70:	1809883a 	mov	r4,r3
   11e74:	d811883a 	mov	r8,sp
   11e78:	003d7f06 	br	11478 <__alt_mem_Flash_flash_data+0xf4011478>
   11e7c:	d9002017 	ldw	r4,128(sp)
   11e80:	d9402117 	ldw	r5,132(sp)
   11e84:	d9801a04 	addi	r6,sp,104
   11e88:	da402b15 	stw	r9,172(sp)
   11e8c:	db402a15 	stw	r13,168(sp)
   11e90:	0010e500 	call	10e50 <__sprint_r.part.0>
   11e94:	da402b17 	ldw	r9,172(sp)
   11e98:	db402a17 	ldw	r13,168(sp)
   11e9c:	103f5b1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11ea0:	d9401b17 	ldw	r5,108(sp)
   11ea4:	d8801c17 	ldw	r2,112(sp)
   11ea8:	d811883a 	mov	r8,sp
   11eac:	29000044 	addi	r4,r5,1
   11eb0:	003d6406 	br	11444 <__alt_mem_Flash_flash_data+0xf4011444>
   11eb4:	d9002017 	ldw	r4,128(sp)
   11eb8:	d9402117 	ldw	r5,132(sp)
   11ebc:	d9801a04 	addi	r6,sp,104
   11ec0:	da402b15 	stw	r9,172(sp)
   11ec4:	0010e500 	call	10e50 <__sprint_r.part.0>
   11ec8:	da402b17 	ldw	r9,172(sp)
   11ecc:	103f4f1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11ed0:	d9401b17 	ldw	r5,108(sp)
   11ed4:	d8801c17 	ldw	r2,112(sp)
   11ed8:	d811883a 	mov	r8,sp
   11edc:	29000044 	addi	r4,r5,1
   11ee0:	003d6506 	br	11478 <__alt_mem_Flash_flash_data+0xf4011478>
   11ee4:	10009a1e 	bne	r2,zero,12150 <___vfiprintf_internal_r+0x11ec>
   11ee8:	01000044 	movi	r4,1
   11eec:	000b883a 	mov	r5,zero
   11ef0:	d811883a 	mov	r8,sp
   11ef4:	003d6206 	br	11480 <__alt_mem_Flash_flash_data+0xf4011480>
   11ef8:	d9002017 	ldw	r4,128(sp)
   11efc:	d9402117 	ldw	r5,132(sp)
   11f00:	d9801a04 	addi	r6,sp,104
   11f04:	0010e500 	call	10e50 <__sprint_r.part.0>
   11f08:	103f401e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   11f0c:	d9001b17 	ldw	r4,108(sp)
   11f10:	d8801c17 	ldw	r2,112(sp)
   11f14:	d811883a 	mov	r8,sp
   11f18:	21000044 	addi	r4,r4,1
   11f1c:	003d7d06 	br	11514 <__alt_mem_Flash_flash_data+0xf4011514>
   11f20:	05adc83a 	sub	r22,zero,r22
   11f24:	b004c03a 	cmpne	r2,r22,zero
   11f28:	035bc83a 	sub	r13,zero,r13
   11f2c:	689bc83a 	sub	r13,r13,r2
   11f30:	03800b44 	movi	r14,45
   11f34:	db801d85 	stb	r14,118(sp)
   11f38:	4827883a 	mov	r19,r9
   11f3c:	00800044 	movi	r2,1
   11f40:	b348b03a 	or	r4,r22,r13
   11f44:	003ce806 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   11f48:	000b883a 	mov	r5,zero
   11f4c:	01000044 	movi	r4,1
   11f50:	d811883a 	mov	r8,sp
   11f54:	683d4826 	beq	r13,zero,11478 <__alt_mem_Flash_flash_data+0xf4011478>
   11f58:	00800084 	movi	r2,2
   11f5c:	d8c01d04 	addi	r3,sp,116
   11f60:	d8c00015 	stw	r3,0(sp)
   11f64:	d8800115 	stw	r2,4(sp)
   11f68:	003d4006 	br	1146c <__alt_mem_Flash_flash_data+0xf401146c>
   11f6c:	00800084 	movi	r2,2
   11f70:	003cda06 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11f74:	a880100c 	andi	r2,r21,64
   11f78:	10004226 	beq	r2,zero,12084 <___vfiprintf_internal_r+0x1120>
   11f7c:	d8802217 	ldw	r2,136(sp)
   11f80:	001b883a 	mov	r13,zero
   11f84:	1580000b 	ldhu	r22,0(r2)
   11f88:	10800104 	addi	r2,r2,4
   11f8c:	d8802215 	stw	r2,136(sp)
   11f90:	b009883a 	mov	r4,r22
   11f94:	0005883a 	mov	r2,zero
   11f98:	003cd006 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11f9c:	80c00007 	ldb	r3,0(r16)
   11fa0:	8005883a 	mov	r2,r16
   11fa4:	003c4d06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11fa8:	a880100c 	andi	r2,r21,64
   11fac:	10004426 	beq	r2,zero,120c0 <___vfiprintf_internal_r+0x115c>
   11fb0:	d8c02217 	ldw	r3,136(sp)
   11fb4:	001b883a 	mov	r13,zero
   11fb8:	00800044 	movi	r2,1
   11fbc:	1d80000b 	ldhu	r22,0(r3)
   11fc0:	18c00104 	addi	r3,r3,4
   11fc4:	d8c02215 	stw	r3,136(sp)
   11fc8:	b009883a 	mov	r4,r22
   11fcc:	003cc306 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   11fd0:	a880040c 	andi	r2,r21,16
   11fd4:	1000091e 	bne	r2,zero,11ffc <___vfiprintf_internal_r+0x1098>
   11fd8:	aac0100c 	andi	r11,r21,64
   11fdc:	58000726 	beq	r11,zero,11ffc <___vfiprintf_internal_r+0x1098>
   11fe0:	d8c02217 	ldw	r3,136(sp)
   11fe4:	d9002317 	ldw	r4,140(sp)
   11fe8:	18800017 	ldw	r2,0(r3)
   11fec:	18c00104 	addi	r3,r3,4
   11ff0:	d8c02215 	stw	r3,136(sp)
   11ff4:	1100000d 	sth	r4,0(r2)
   11ff8:	003c0e06 	br	11034 <__alt_mem_Flash_flash_data+0xf4011034>
   11ffc:	d8c02217 	ldw	r3,136(sp)
   12000:	d9002317 	ldw	r4,140(sp)
   12004:	18800017 	ldw	r2,0(r3)
   12008:	18c00104 	addi	r3,r3,4
   1200c:	d8c02215 	stw	r3,136(sp)
   12010:	11000015 	stw	r4,0(r2)
   12014:	003c0706 	br	11034 <__alt_mem_Flash_flash_data+0xf4011034>
   12018:	a880100c 	andi	r2,r21,64
   1201c:	10002126 	beq	r2,zero,120a4 <___vfiprintf_internal_r+0x1140>
   12020:	1d80000f 	ldh	r22,0(r3)
   12024:	d8c02217 	ldw	r3,136(sp)
   12028:	b01bd7fa 	srai	r13,r22,31
   1202c:	18c00104 	addi	r3,r3,4
   12030:	d8c02215 	stw	r3,136(sp)
   12034:	6805883a 	mov	r2,r13
   12038:	003dc406 	br	1174c <__alt_mem_Flash_flash_data+0xf401174c>
   1203c:	d9002017 	ldw	r4,128(sp)
   12040:	d9402117 	ldw	r5,132(sp)
   12044:	d9801a04 	addi	r6,sp,104
   12048:	da402b15 	stw	r9,172(sp)
   1204c:	db402a15 	stw	r13,168(sp)
   12050:	0010e500 	call	10e50 <__sprint_r.part.0>
   12054:	da402b17 	ldw	r9,172(sp)
   12058:	db402a17 	ldw	r13,168(sp)
   1205c:	103eeb1e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   12060:	d9401b17 	ldw	r5,108(sp)
   12064:	d8801c17 	ldw	r2,112(sp)
   12068:	d811883a 	mov	r8,sp
   1206c:	29000044 	addi	r4,r5,1
   12070:	003e8b06 	br	11aa0 <__alt_mem_Flash_flash_data+0xf4011aa0>
   12074:	9023883a 	mov	r17,r18
   12078:	003d5a06 	br	115e4 <__alt_mem_Flash_flash_data+0xf40115e4>
   1207c:	4827883a 	mov	r19,r9
   12080:	003e3506 	br	11958 <__alt_mem_Flash_flash_data+0xf4011958>
   12084:	d8c02217 	ldw	r3,136(sp)
   12088:	001b883a 	mov	r13,zero
   1208c:	0005883a 	mov	r2,zero
   12090:	1d800017 	ldw	r22,0(r3)
   12094:	18c00104 	addi	r3,r3,4
   12098:	d8c02215 	stw	r3,136(sp)
   1209c:	b009883a 	mov	r4,r22
   120a0:	003c8e06 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   120a4:	1d800017 	ldw	r22,0(r3)
   120a8:	d9002217 	ldw	r4,136(sp)
   120ac:	b01bd7fa 	srai	r13,r22,31
   120b0:	21000104 	addi	r4,r4,4
   120b4:	d9002215 	stw	r4,136(sp)
   120b8:	6805883a 	mov	r2,r13
   120bc:	003da306 	br	1174c <__alt_mem_Flash_flash_data+0xf401174c>
   120c0:	d9002217 	ldw	r4,136(sp)
   120c4:	001b883a 	mov	r13,zero
   120c8:	00800044 	movi	r2,1
   120cc:	25800017 	ldw	r22,0(r4)
   120d0:	21000104 	addi	r4,r4,4
   120d4:	d9002215 	stw	r4,136(sp)
   120d8:	b009883a 	mov	r4,r22
   120dc:	003c7f06 	br	112dc <__alt_mem_Flash_flash_data+0xf40112dc>
   120e0:	00c000b4 	movhi	r3,2
   120e4:	18c38d04 	addi	r3,r3,3636
   120e8:	d8c02415 	stw	r3,144(sp)
   120ec:	003cff06 	br	114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   120f0:	d8801c17 	ldw	r2,112(sp)
   120f4:	dd402117 	ldw	r21,132(sp)
   120f8:	103ec526 	beq	r2,zero,11c10 <__alt_mem_Flash_flash_data+0xf4011c10>
   120fc:	d9002017 	ldw	r4,128(sp)
   12100:	a80b883a 	mov	r5,r21
   12104:	d9801a04 	addi	r6,sp,104
   12108:	0010e500 	call	10e50 <__sprint_r.part.0>
   1210c:	003ec006 	br	11c10 <__alt_mem_Flash_flash_data+0xf4011c10>
   12110:	80800044 	addi	r2,r16,1
   12114:	ad400814 	ori	r21,r21,32
   12118:	80c00047 	ldb	r3,1(r16)
   1211c:	003bef06 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   12120:	04a5c83a 	sub	r18,zero,r18
   12124:	8005883a 	mov	r2,r16
   12128:	d8c02215 	stw	r3,136(sp)
   1212c:	003d5306 	br	1167c <__alt_mem_Flash_flash_data+0xf401167c>
   12130:	da002a15 	stw	r8,168(sp)
   12134:	000738c0 	call	738c <strlen>
   12138:	1027883a 	mov	r19,r2
   1213c:	db801d83 	ldbu	r14,118(sp)
   12140:	dd802215 	stw	r22,136(sp)
   12144:	0013883a 	mov	r9,zero
   12148:	da002a17 	ldw	r8,168(sp)
   1214c:	003c7f06 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   12150:	d9002017 	ldw	r4,128(sp)
   12154:	d9402117 	ldw	r5,132(sp)
   12158:	d9801a04 	addi	r6,sp,104
   1215c:	da402b15 	stw	r9,172(sp)
   12160:	0010e500 	call	10e50 <__sprint_r.part.0>
   12164:	da402b17 	ldw	r9,172(sp)
   12168:	103ea81e 	bne	r2,zero,11c0c <__alt_mem_Flash_flash_data+0xf4011c0c>
   1216c:	d9401b17 	ldw	r5,108(sp)
   12170:	d8801c17 	ldw	r2,112(sp)
   12174:	d811883a 	mov	r8,sp
   12178:	29000044 	addi	r4,r5,1
   1217c:	003cc006 	br	11480 <__alt_mem_Flash_flash_data+0xf4011480>
   12180:	d9401b17 	ldw	r5,108(sp)
   12184:	010000b4 	movhi	r4,2
   12188:	21039104 	addi	r4,r4,3652
   1218c:	d9002415 	stw	r4,144(sp)
   12190:	29400044 	addi	r5,r5,1
   12194:	003c9f06 	br	11414 <__alt_mem_Flash_flash_data+0xf4011414>
   12198:	00800184 	movi	r2,6
   1219c:	1240012e 	bgeu	r2,r9,121a4 <___vfiprintf_internal_r+0x1240>
   121a0:	1013883a 	mov	r9,r2
   121a4:	4827883a 	mov	r19,r9
   121a8:	4823883a 	mov	r17,r9
   121ac:	48001116 	blt	r9,zero,121f4 <___vfiprintf_internal_r+0x1290>
   121b0:	050000b4 	movhi	r20,2
   121b4:	dd802215 	stw	r22,136(sp)
   121b8:	a5032104 	addi	r20,r20,3204
   121bc:	003db106 	br	11884 <__alt_mem_Flash_flash_data+0xf4011884>
   121c0:	d9401b17 	ldw	r5,108(sp)
   121c4:	010000b4 	movhi	r4,2
   121c8:	21039104 	addi	r4,r4,3652
   121cc:	d9002415 	stw	r4,144(sp)
   121d0:	29400044 	addi	r5,r5,1
   121d4:	003cf906 	br	115bc <__alt_mem_Flash_flash_data+0xf40115bc>
   121d8:	4827883a 	mov	r19,r9
   121dc:	db801d83 	ldbu	r14,118(sp)
   121e0:	dd802215 	stw	r22,136(sp)
   121e4:	0013883a 	mov	r9,zero
   121e8:	003c5806 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   121ec:	200d883a 	mov	r6,r4
   121f0:	003ec706 	br	11d10 <__alt_mem_Flash_flash_data+0xf4011d10>
   121f4:	0023883a 	mov	r17,zero
   121f8:	003fed06 	br	121b0 <__alt_mem_Flash_flash_data+0xf40121b0>
   121fc:	d9002217 	ldw	r4,136(sp)
   12200:	22400017 	ldw	r9,0(r4)
   12204:	20c00104 	addi	r3,r4,4
   12208:	d8c02215 	stw	r3,136(sp)
   1220c:	483fc20e 	bge	r9,zero,12118 <__alt_mem_Flash_flash_data+0xf4012118>
   12210:	027fffc4 	movi	r9,-1
   12214:	80c00047 	ldb	r3,1(r16)
   12218:	003bb006 	br	110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   1221c:	8c80010e 	bge	r17,r18,12224 <___vfiprintf_internal_r+0x12c0>
   12220:	9023883a 	mov	r17,r18
   12224:	d8802317 	ldw	r2,140(sp)
   12228:	1445883a 	add	r2,r2,r17
   1222c:	d8802315 	stw	r2,140(sp)
   12230:	003cef06 	br	115f0 <__alt_mem_Flash_flash_data+0xf40115f0>

00012234 <__vfiprintf_internal>:
   12234:	2007883a 	mov	r3,r4
   12238:	010000b4 	movhi	r4,2
   1223c:	210be204 	addi	r4,r4,12168
   12240:	21000017 	ldw	r4,0(r4)
   12244:	2805883a 	mov	r2,r5
   12248:	300f883a 	mov	r7,r6
   1224c:	180b883a 	mov	r5,r3
   12250:	100d883a 	mov	r6,r2
   12254:	0010f641 	jmpi	10f64 <___vfiprintf_internal_r>

00012258 <__sbprintf>:
   12258:	2880030b 	ldhu	r2,12(r5)
   1225c:	2ac01917 	ldw	r11,100(r5)
   12260:	2a80038b 	ldhu	r10,14(r5)
   12264:	2a400717 	ldw	r9,28(r5)
   12268:	2a000917 	ldw	r8,36(r5)
   1226c:	defee204 	addi	sp,sp,-1144
   12270:	00c10004 	movi	r3,1024
   12274:	dc011a15 	stw	r16,1128(sp)
   12278:	10bfff4c 	andi	r2,r2,65533
   1227c:	2821883a 	mov	r16,r5
   12280:	d8cb883a 	add	r5,sp,r3
   12284:	dc811c15 	stw	r18,1136(sp)
   12288:	dc411b15 	stw	r17,1132(sp)
   1228c:	dfc11d15 	stw	ra,1140(sp)
   12290:	2025883a 	mov	r18,r4
   12294:	d881030d 	sth	r2,1036(sp)
   12298:	dac11915 	stw	r11,1124(sp)
   1229c:	da81038d 	sth	r10,1038(sp)
   122a0:	da410715 	stw	r9,1052(sp)
   122a4:	da010915 	stw	r8,1060(sp)
   122a8:	dec10015 	stw	sp,1024(sp)
   122ac:	dec10415 	stw	sp,1040(sp)
   122b0:	d8c10215 	stw	r3,1032(sp)
   122b4:	d8c10515 	stw	r3,1044(sp)
   122b8:	d8010615 	stw	zero,1048(sp)
   122bc:	0010f640 	call	10f64 <___vfiprintf_internal_r>
   122c0:	1023883a 	mov	r17,r2
   122c4:	10000416 	blt	r2,zero,122d8 <__sbprintf+0x80>
   122c8:	9009883a 	mov	r4,r18
   122cc:	d9410004 	addi	r5,sp,1024
   122d0:	000d0680 	call	d068 <_fflush_r>
   122d4:	10000d1e 	bne	r2,zero,1230c <__sbprintf+0xb4>
   122d8:	d8c1030b 	ldhu	r3,1036(sp)
   122dc:	18c0100c 	andi	r3,r3,64
   122e0:	18000326 	beq	r3,zero,122f0 <__sbprintf+0x98>
   122e4:	8080030b 	ldhu	r2,12(r16)
   122e8:	10801014 	ori	r2,r2,64
   122ec:	8080030d 	sth	r2,12(r16)
   122f0:	8805883a 	mov	r2,r17
   122f4:	dfc11d17 	ldw	ra,1140(sp)
   122f8:	dc811c17 	ldw	r18,1136(sp)
   122fc:	dc411b17 	ldw	r17,1132(sp)
   12300:	dc011a17 	ldw	r16,1128(sp)
   12304:	dec11e04 	addi	sp,sp,1144
   12308:	f800283a 	ret
   1230c:	047fffc4 	movi	r17,-1
   12310:	003ff106 	br	122d8 <__alt_mem_Flash_flash_data+0xf40122d8>

00012314 <_write_r>:
   12314:	defffd04 	addi	sp,sp,-12
   12318:	dc000015 	stw	r16,0(sp)
   1231c:	040000b4 	movhi	r16,2
   12320:	dc400115 	stw	r17,4(sp)
   12324:	8413d304 	addi	r16,r16,20300
   12328:	2023883a 	mov	r17,r4
   1232c:	2809883a 	mov	r4,r5
   12330:	300b883a 	mov	r5,r6
   12334:	380d883a 	mov	r6,r7
   12338:	dfc00215 	stw	ra,8(sp)
   1233c:	80000015 	stw	zero,0(r16)
   12340:	0014a740 	call	14a74 <write>
   12344:	00ffffc4 	movi	r3,-1
   12348:	10c00526 	beq	r2,r3,12360 <_write_r+0x4c>
   1234c:	dfc00217 	ldw	ra,8(sp)
   12350:	dc400117 	ldw	r17,4(sp)
   12354:	dc000017 	ldw	r16,0(sp)
   12358:	dec00304 	addi	sp,sp,12
   1235c:	f800283a 	ret
   12360:	80c00017 	ldw	r3,0(r16)
   12364:	183ff926 	beq	r3,zero,1234c <__alt_mem_Flash_flash_data+0xf401234c>
   12368:	88c00015 	stw	r3,0(r17)
   1236c:	003ff706 	br	1234c <__alt_mem_Flash_flash_data+0xf401234c>

00012370 <_close_r>:
   12370:	defffd04 	addi	sp,sp,-12
   12374:	dc000015 	stw	r16,0(sp)
   12378:	040000b4 	movhi	r16,2
   1237c:	dc400115 	stw	r17,4(sp)
   12380:	8413d304 	addi	r16,r16,20300
   12384:	2023883a 	mov	r17,r4
   12388:	2809883a 	mov	r4,r5
   1238c:	dfc00215 	stw	ra,8(sp)
   12390:	80000015 	stw	zero,0(r16)
   12394:	00141fc0 	call	141fc <close>
   12398:	00ffffc4 	movi	r3,-1
   1239c:	10c00526 	beq	r2,r3,123b4 <_close_r+0x44>
   123a0:	dfc00217 	ldw	ra,8(sp)
   123a4:	dc400117 	ldw	r17,4(sp)
   123a8:	dc000017 	ldw	r16,0(sp)
   123ac:	dec00304 	addi	sp,sp,12
   123b0:	f800283a 	ret
   123b4:	80c00017 	ldw	r3,0(r16)
   123b8:	183ff926 	beq	r3,zero,123a0 <__alt_mem_Flash_flash_data+0xf40123a0>
   123bc:	88c00015 	stw	r3,0(r17)
   123c0:	003ff706 	br	123a0 <__alt_mem_Flash_flash_data+0xf40123a0>

000123c4 <_calloc_r>:
   123c4:	298b383a 	mul	r5,r5,r6
   123c8:	defffe04 	addi	sp,sp,-8
   123cc:	dc000015 	stw	r16,0(sp)
   123d0:	dfc00115 	stw	ra,4(sp)
   123d4:	00068700 	call	6870 <_malloc_r>
   123d8:	1021883a 	mov	r16,r2
   123dc:	10002826 	beq	r2,zero,12480 <_calloc_r+0xbc>
   123e0:	11bfff17 	ldw	r6,-4(r2)
   123e4:	00bfff04 	movi	r2,-4
   123e8:	00c00904 	movi	r3,36
   123ec:	308c703a 	and	r6,r6,r2
   123f0:	308d883a 	add	r6,r6,r2
   123f4:	19801436 	bltu	r3,r6,12448 <_calloc_r+0x84>
   123f8:	008004c4 	movi	r2,19
   123fc:	11800936 	bltu	r2,r6,12424 <_calloc_r+0x60>
   12400:	8005883a 	mov	r2,r16
   12404:	10000015 	stw	zero,0(r2)
   12408:	10000115 	stw	zero,4(r2)
   1240c:	10000215 	stw	zero,8(r2)
   12410:	8005883a 	mov	r2,r16
   12414:	dfc00117 	ldw	ra,4(sp)
   12418:	dc000017 	ldw	r16,0(sp)
   1241c:	dec00204 	addi	sp,sp,8
   12420:	f800283a 	ret
   12424:	80000015 	stw	zero,0(r16)
   12428:	80000115 	stw	zero,4(r16)
   1242c:	008006c4 	movi	r2,27
   12430:	11800d2e 	bgeu	r2,r6,12468 <_calloc_r+0xa4>
   12434:	80000215 	stw	zero,8(r16)
   12438:	80000315 	stw	zero,12(r16)
   1243c:	30c00c26 	beq	r6,r3,12470 <_calloc_r+0xac>
   12440:	80800404 	addi	r2,r16,16
   12444:	003fef06 	br	12404 <__alt_mem_Flash_flash_data+0xf4012404>
   12448:	8009883a 	mov	r4,r16
   1244c:	000b883a 	mov	r5,zero
   12450:	000e3cc0 	call	e3cc <memset>
   12454:	8005883a 	mov	r2,r16
   12458:	dfc00117 	ldw	ra,4(sp)
   1245c:	dc000017 	ldw	r16,0(sp)
   12460:	dec00204 	addi	sp,sp,8
   12464:	f800283a 	ret
   12468:	80800204 	addi	r2,r16,8
   1246c:	003fe506 	br	12404 <__alt_mem_Flash_flash_data+0xf4012404>
   12470:	80000415 	stw	zero,16(r16)
   12474:	80800604 	addi	r2,r16,24
   12478:	80000515 	stw	zero,20(r16)
   1247c:	003fe106 	br	12404 <__alt_mem_Flash_flash_data+0xf4012404>
   12480:	0005883a 	mov	r2,zero
   12484:	003fe306 	br	12414 <__alt_mem_Flash_flash_data+0xf4012414>

00012488 <_fclose_r>:
   12488:	28003926 	beq	r5,zero,12570 <_fclose_r+0xe8>
   1248c:	defffc04 	addi	sp,sp,-16
   12490:	dc400115 	stw	r17,4(sp)
   12494:	dc000015 	stw	r16,0(sp)
   12498:	dfc00315 	stw	ra,12(sp)
   1249c:	dc800215 	stw	r18,8(sp)
   124a0:	2023883a 	mov	r17,r4
   124a4:	2821883a 	mov	r16,r5
   124a8:	20000226 	beq	r4,zero,124b4 <_fclose_r+0x2c>
   124ac:	20800e17 	ldw	r2,56(r4)
   124b0:	10002726 	beq	r2,zero,12550 <_fclose_r+0xc8>
   124b4:	8080030f 	ldh	r2,12(r16)
   124b8:	1000071e 	bne	r2,zero,124d8 <_fclose_r+0x50>
   124bc:	0005883a 	mov	r2,zero
   124c0:	dfc00317 	ldw	ra,12(sp)
   124c4:	dc800217 	ldw	r18,8(sp)
   124c8:	dc400117 	ldw	r17,4(sp)
   124cc:	dc000017 	ldw	r16,0(sp)
   124d0:	dec00404 	addi	sp,sp,16
   124d4:	f800283a 	ret
   124d8:	8809883a 	mov	r4,r17
   124dc:	800b883a 	mov	r5,r16
   124e0:	000ce600 	call	ce60 <__sflush_r>
   124e4:	1025883a 	mov	r18,r2
   124e8:	80800b17 	ldw	r2,44(r16)
   124ec:	10000426 	beq	r2,zero,12500 <_fclose_r+0x78>
   124f0:	81400717 	ldw	r5,28(r16)
   124f4:	8809883a 	mov	r4,r17
   124f8:	103ee83a 	callr	r2
   124fc:	10001616 	blt	r2,zero,12558 <_fclose_r+0xd0>
   12500:	8080030b 	ldhu	r2,12(r16)
   12504:	1080200c 	andi	r2,r2,128
   12508:	1000151e 	bne	r2,zero,12560 <_fclose_r+0xd8>
   1250c:	81400c17 	ldw	r5,48(r16)
   12510:	28000526 	beq	r5,zero,12528 <_fclose_r+0xa0>
   12514:	80801004 	addi	r2,r16,64
   12518:	28800226 	beq	r5,r2,12524 <_fclose_r+0x9c>
   1251c:	8809883a 	mov	r4,r17
   12520:	000d5b80 	call	d5b8 <_free_r>
   12524:	80000c15 	stw	zero,48(r16)
   12528:	81401117 	ldw	r5,68(r16)
   1252c:	28000326 	beq	r5,zero,1253c <_fclose_r+0xb4>
   12530:	8809883a 	mov	r4,r17
   12534:	000d5b80 	call	d5b8 <_free_r>
   12538:	80001115 	stw	zero,68(r16)
   1253c:	000d4540 	call	d454 <__sfp_lock_acquire>
   12540:	8000030d 	sth	zero,12(r16)
   12544:	000d4580 	call	d458 <__sfp_lock_release>
   12548:	9005883a 	mov	r2,r18
   1254c:	003fdc06 	br	124c0 <__alt_mem_Flash_flash_data+0xf40124c0>
   12550:	000d4440 	call	d444 <__sinit>
   12554:	003fd706 	br	124b4 <__alt_mem_Flash_flash_data+0xf40124b4>
   12558:	04bfffc4 	movi	r18,-1
   1255c:	003fe806 	br	12500 <__alt_mem_Flash_flash_data+0xf4012500>
   12560:	81400417 	ldw	r5,16(r16)
   12564:	8809883a 	mov	r4,r17
   12568:	000d5b80 	call	d5b8 <_free_r>
   1256c:	003fe706 	br	1250c <__alt_mem_Flash_flash_data+0xf401250c>
   12570:	0005883a 	mov	r2,zero
   12574:	f800283a 	ret

00012578 <fclose>:
   12578:	008000b4 	movhi	r2,2
   1257c:	108be204 	addi	r2,r2,12168
   12580:	200b883a 	mov	r5,r4
   12584:	11000017 	ldw	r4,0(r2)
   12588:	00124881 	jmpi	12488 <_fclose_r>

0001258c <_fputwc_r>:
   1258c:	3080030b 	ldhu	r2,12(r6)
   12590:	defff804 	addi	sp,sp,-32
   12594:	dcc00415 	stw	r19,16(sp)
   12598:	dc800315 	stw	r18,12(sp)
   1259c:	dc000115 	stw	r16,4(sp)
   125a0:	dfc00715 	stw	ra,28(sp)
   125a4:	dd400615 	stw	r21,24(sp)
   125a8:	dd000515 	stw	r20,20(sp)
   125ac:	dc400215 	stw	r17,8(sp)
   125b0:	10c8000c 	andi	r3,r2,8192
   125b4:	3021883a 	mov	r16,r6
   125b8:	2027883a 	mov	r19,r4
   125bc:	2825883a 	mov	r18,r5
   125c0:	1800051e 	bne	r3,zero,125d8 <_fputwc_r+0x4c>
   125c4:	30c01917 	ldw	r3,100(r6)
   125c8:	10880014 	ori	r2,r2,8192
   125cc:	3080030d 	sth	r2,12(r6)
   125d0:	18880014 	ori	r2,r3,8192
   125d4:	30801915 	stw	r2,100(r6)
   125d8:	000df780 	call	df78 <__locale_mb_cur_max>
   125dc:	00c00044 	movi	r3,1
   125e0:	10c03e26 	beq	r2,r3,126dc <_fputwc_r+0x150>
   125e4:	9809883a 	mov	r4,r19
   125e8:	d80b883a 	mov	r5,sp
   125ec:	900d883a 	mov	r6,r18
   125f0:	81c01704 	addi	r7,r16,92
   125f4:	0012a240 	call	12a24 <_wcrtomb_r>
   125f8:	1029883a 	mov	r20,r2
   125fc:	00bfffc4 	movi	r2,-1
   12600:	a0802026 	beq	r20,r2,12684 <_fputwc_r+0xf8>
   12604:	d9400003 	ldbu	r5,0(sp)
   12608:	a0001c26 	beq	r20,zero,1267c <_fputwc_r+0xf0>
   1260c:	0023883a 	mov	r17,zero
   12610:	05400284 	movi	r21,10
   12614:	00000906 	br	1263c <_fputwc_r+0xb0>
   12618:	80800017 	ldw	r2,0(r16)
   1261c:	11400005 	stb	r5,0(r2)
   12620:	80c00017 	ldw	r3,0(r16)
   12624:	18c00044 	addi	r3,r3,1
   12628:	80c00015 	stw	r3,0(r16)
   1262c:	8c400044 	addi	r17,r17,1
   12630:	dc45883a 	add	r2,sp,r17
   12634:	8d00112e 	bgeu	r17,r20,1267c <_fputwc_r+0xf0>
   12638:	11400003 	ldbu	r5,0(r2)
   1263c:	80c00217 	ldw	r3,8(r16)
   12640:	18ffffc4 	addi	r3,r3,-1
   12644:	80c00215 	stw	r3,8(r16)
   12648:	183ff30e 	bge	r3,zero,12618 <__alt_mem_Flash_flash_data+0xf4012618>
   1264c:	80800617 	ldw	r2,24(r16)
   12650:	18801916 	blt	r3,r2,126b8 <_fputwc_r+0x12c>
   12654:	80800017 	ldw	r2,0(r16)
   12658:	11400005 	stb	r5,0(r2)
   1265c:	80800017 	ldw	r2,0(r16)
   12660:	10c00003 	ldbu	r3,0(r2)
   12664:	10800044 	addi	r2,r2,1
   12668:	1d402326 	beq	r3,r21,126f8 <_fputwc_r+0x16c>
   1266c:	80800015 	stw	r2,0(r16)
   12670:	8c400044 	addi	r17,r17,1
   12674:	dc45883a 	add	r2,sp,r17
   12678:	8d3fef36 	bltu	r17,r20,12638 <__alt_mem_Flash_flash_data+0xf4012638>
   1267c:	9005883a 	mov	r2,r18
   12680:	00000406 	br	12694 <_fputwc_r+0x108>
   12684:	80c0030b 	ldhu	r3,12(r16)
   12688:	a005883a 	mov	r2,r20
   1268c:	18c01014 	ori	r3,r3,64
   12690:	80c0030d 	sth	r3,12(r16)
   12694:	dfc00717 	ldw	ra,28(sp)
   12698:	dd400617 	ldw	r21,24(sp)
   1269c:	dd000517 	ldw	r20,20(sp)
   126a0:	dcc00417 	ldw	r19,16(sp)
   126a4:	dc800317 	ldw	r18,12(sp)
   126a8:	dc400217 	ldw	r17,8(sp)
   126ac:	dc000117 	ldw	r16,4(sp)
   126b0:	dec00804 	addi	sp,sp,32
   126b4:	f800283a 	ret
   126b8:	9809883a 	mov	r4,r19
   126bc:	29403fcc 	andi	r5,r5,255
   126c0:	800d883a 	mov	r6,r16
   126c4:	00128d00 	call	128d0 <__swbuf_r>
   126c8:	10bfffe0 	cmpeqi	r2,r2,-1
   126cc:	10803fcc 	andi	r2,r2,255
   126d0:	103fd626 	beq	r2,zero,1262c <__alt_mem_Flash_flash_data+0xf401262c>
   126d4:	00bfffc4 	movi	r2,-1
   126d8:	003fee06 	br	12694 <__alt_mem_Flash_flash_data+0xf4012694>
   126dc:	90ffffc4 	addi	r3,r18,-1
   126e0:	01003f84 	movi	r4,254
   126e4:	20ffbf36 	bltu	r4,r3,125e4 <__alt_mem_Flash_flash_data+0xf40125e4>
   126e8:	900b883a 	mov	r5,r18
   126ec:	dc800005 	stb	r18,0(sp)
   126f0:	1029883a 	mov	r20,r2
   126f4:	003fc506 	br	1260c <__alt_mem_Flash_flash_data+0xf401260c>
   126f8:	9809883a 	mov	r4,r19
   126fc:	a80b883a 	mov	r5,r21
   12700:	800d883a 	mov	r6,r16
   12704:	00128d00 	call	128d0 <__swbuf_r>
   12708:	10bfffe0 	cmpeqi	r2,r2,-1
   1270c:	003fef06 	br	126cc <__alt_mem_Flash_flash_data+0xf40126cc>

00012710 <fputwc>:
   12710:	008000b4 	movhi	r2,2
   12714:	defffc04 	addi	sp,sp,-16
   12718:	108be204 	addi	r2,r2,12168
   1271c:	dc000115 	stw	r16,4(sp)
   12720:	14000017 	ldw	r16,0(r2)
   12724:	dc400215 	stw	r17,8(sp)
   12728:	dfc00315 	stw	ra,12(sp)
   1272c:	2023883a 	mov	r17,r4
   12730:	280d883a 	mov	r6,r5
   12734:	80000626 	beq	r16,zero,12750 <fputwc+0x40>
   12738:	80800e17 	ldw	r2,56(r16)
   1273c:	1000041e 	bne	r2,zero,12750 <fputwc+0x40>
   12740:	8009883a 	mov	r4,r16
   12744:	d9400015 	stw	r5,0(sp)
   12748:	000d4440 	call	d444 <__sinit>
   1274c:	d9800017 	ldw	r6,0(sp)
   12750:	8009883a 	mov	r4,r16
   12754:	880b883a 	mov	r5,r17
   12758:	dfc00317 	ldw	ra,12(sp)
   1275c:	dc400217 	ldw	r17,8(sp)
   12760:	dc000117 	ldw	r16,4(sp)
   12764:	dec00404 	addi	sp,sp,16
   12768:	001258c1 	jmpi	1258c <_fputwc_r>

0001276c <_fstat_r>:
   1276c:	defffd04 	addi	sp,sp,-12
   12770:	dc000015 	stw	r16,0(sp)
   12774:	040000b4 	movhi	r16,2
   12778:	dc400115 	stw	r17,4(sp)
   1277c:	8413d304 	addi	r16,r16,20300
   12780:	2023883a 	mov	r17,r4
   12784:	2809883a 	mov	r4,r5
   12788:	300b883a 	mov	r5,r6
   1278c:	dfc00215 	stw	ra,8(sp)
   12790:	80000015 	stw	zero,0(r16)
   12794:	00143480 	call	14348 <fstat>
   12798:	00ffffc4 	movi	r3,-1
   1279c:	10c00526 	beq	r2,r3,127b4 <_fstat_r+0x48>
   127a0:	dfc00217 	ldw	ra,8(sp)
   127a4:	dc400117 	ldw	r17,4(sp)
   127a8:	dc000017 	ldw	r16,0(sp)
   127ac:	dec00304 	addi	sp,sp,12
   127b0:	f800283a 	ret
   127b4:	80c00017 	ldw	r3,0(r16)
   127b8:	183ff926 	beq	r3,zero,127a0 <__alt_mem_Flash_flash_data+0xf40127a0>
   127bc:	88c00015 	stw	r3,0(r17)
   127c0:	003ff706 	br	127a0 <__alt_mem_Flash_flash_data+0xf40127a0>

000127c4 <_isatty_r>:
   127c4:	defffd04 	addi	sp,sp,-12
   127c8:	dc000015 	stw	r16,0(sp)
   127cc:	040000b4 	movhi	r16,2
   127d0:	dc400115 	stw	r17,4(sp)
   127d4:	8413d304 	addi	r16,r16,20300
   127d8:	2023883a 	mov	r17,r4
   127dc:	2809883a 	mov	r4,r5
   127e0:	dfc00215 	stw	ra,8(sp)
   127e4:	80000015 	stw	zero,0(r16)
   127e8:	00144480 	call	14448 <isatty>
   127ec:	00ffffc4 	movi	r3,-1
   127f0:	10c00526 	beq	r2,r3,12808 <_isatty_r+0x44>
   127f4:	dfc00217 	ldw	ra,8(sp)
   127f8:	dc400117 	ldw	r17,4(sp)
   127fc:	dc000017 	ldw	r16,0(sp)
   12800:	dec00304 	addi	sp,sp,12
   12804:	f800283a 	ret
   12808:	80c00017 	ldw	r3,0(r16)
   1280c:	183ff926 	beq	r3,zero,127f4 <__alt_mem_Flash_flash_data+0xf40127f4>
   12810:	88c00015 	stw	r3,0(r17)
   12814:	003ff706 	br	127f4 <__alt_mem_Flash_flash_data+0xf40127f4>

00012818 <_lseek_r>:
   12818:	defffd04 	addi	sp,sp,-12
   1281c:	dc000015 	stw	r16,0(sp)
   12820:	040000b4 	movhi	r16,2
   12824:	dc400115 	stw	r17,4(sp)
   12828:	8413d304 	addi	r16,r16,20300
   1282c:	2023883a 	mov	r17,r4
   12830:	2809883a 	mov	r4,r5
   12834:	300b883a 	mov	r5,r6
   12838:	380d883a 	mov	r6,r7
   1283c:	dfc00215 	stw	ra,8(sp)
   12840:	80000015 	stw	zero,0(r16)
   12844:	00146200 	call	14620 <lseek>
   12848:	00ffffc4 	movi	r3,-1
   1284c:	10c00526 	beq	r2,r3,12864 <_lseek_r+0x4c>
   12850:	dfc00217 	ldw	ra,8(sp)
   12854:	dc400117 	ldw	r17,4(sp)
   12858:	dc000017 	ldw	r16,0(sp)
   1285c:	dec00304 	addi	sp,sp,12
   12860:	f800283a 	ret
   12864:	80c00017 	ldw	r3,0(r16)
   12868:	183ff926 	beq	r3,zero,12850 <__alt_mem_Flash_flash_data+0xf4012850>
   1286c:	88c00015 	stw	r3,0(r17)
   12870:	003ff706 	br	12850 <__alt_mem_Flash_flash_data+0xf4012850>

00012874 <_read_r>:
   12874:	defffd04 	addi	sp,sp,-12
   12878:	dc000015 	stw	r16,0(sp)
   1287c:	040000b4 	movhi	r16,2
   12880:	dc400115 	stw	r17,4(sp)
   12884:	8413d304 	addi	r16,r16,20300
   12888:	2023883a 	mov	r17,r4
   1288c:	2809883a 	mov	r4,r5
   12890:	300b883a 	mov	r5,r6
   12894:	380d883a 	mov	r6,r7
   12898:	dfc00215 	stw	ra,8(sp)
   1289c:	80000015 	stw	zero,0(r16)
   128a0:	00148180 	call	14818 <read>
   128a4:	00ffffc4 	movi	r3,-1
   128a8:	10c00526 	beq	r2,r3,128c0 <_read_r+0x4c>
   128ac:	dfc00217 	ldw	ra,8(sp)
   128b0:	dc400117 	ldw	r17,4(sp)
   128b4:	dc000017 	ldw	r16,0(sp)
   128b8:	dec00304 	addi	sp,sp,12
   128bc:	f800283a 	ret
   128c0:	80c00017 	ldw	r3,0(r16)
   128c4:	183ff926 	beq	r3,zero,128ac <__alt_mem_Flash_flash_data+0xf40128ac>
   128c8:	88c00015 	stw	r3,0(r17)
   128cc:	003ff706 	br	128ac <__alt_mem_Flash_flash_data+0xf40128ac>

000128d0 <__swbuf_r>:
   128d0:	defffc04 	addi	sp,sp,-16
   128d4:	dc800215 	stw	r18,8(sp)
   128d8:	dc400115 	stw	r17,4(sp)
   128dc:	dc000015 	stw	r16,0(sp)
   128e0:	dfc00315 	stw	ra,12(sp)
   128e4:	2025883a 	mov	r18,r4
   128e8:	2823883a 	mov	r17,r5
   128ec:	3021883a 	mov	r16,r6
   128f0:	20000226 	beq	r4,zero,128fc <__swbuf_r+0x2c>
   128f4:	20800e17 	ldw	r2,56(r4)
   128f8:	10004126 	beq	r2,zero,12a00 <__swbuf_r+0x130>
   128fc:	80c00617 	ldw	r3,24(r16)
   12900:	8180030b 	ldhu	r6,12(r16)
   12904:	80c00215 	stw	r3,8(r16)
   12908:	30c0020c 	andi	r3,r6,8
   1290c:	18003526 	beq	r3,zero,129e4 <__swbuf_r+0x114>
   12910:	80c00417 	ldw	r3,16(r16)
   12914:	18003326 	beq	r3,zero,129e4 <__swbuf_r+0x114>
   12918:	3088000c 	andi	r2,r6,8192
   1291c:	8c403fcc 	andi	r17,r17,255
   12920:	10001726 	beq	r2,zero,12980 <__swbuf_r+0xb0>
   12924:	80800017 	ldw	r2,0(r16)
   12928:	81000517 	ldw	r4,20(r16)
   1292c:	10c7c83a 	sub	r3,r2,r3
   12930:	19001d0e 	bge	r3,r4,129a8 <__swbuf_r+0xd8>
   12934:	18c00044 	addi	r3,r3,1
   12938:	81400217 	ldw	r5,8(r16)
   1293c:	11000044 	addi	r4,r2,1
   12940:	81000015 	stw	r4,0(r16)
   12944:	297fffc4 	addi	r5,r5,-1
   12948:	81400215 	stw	r5,8(r16)
   1294c:	14400005 	stb	r17,0(r2)
   12950:	80800517 	ldw	r2,20(r16)
   12954:	10c01d26 	beq	r2,r3,129cc <__swbuf_r+0xfc>
   12958:	8080030b 	ldhu	r2,12(r16)
   1295c:	1080004c 	andi	r2,r2,1
   12960:	1000181e 	bne	r2,zero,129c4 <__swbuf_r+0xf4>
   12964:	8805883a 	mov	r2,r17
   12968:	dfc00317 	ldw	ra,12(sp)
   1296c:	dc800217 	ldw	r18,8(sp)
   12970:	dc400117 	ldw	r17,4(sp)
   12974:	dc000017 	ldw	r16,0(sp)
   12978:	dec00404 	addi	sp,sp,16
   1297c:	f800283a 	ret
   12980:	81001917 	ldw	r4,100(r16)
   12984:	00b7ffc4 	movi	r2,-8193
   12988:	31880014 	ori	r6,r6,8192
   1298c:	2084703a 	and	r2,r4,r2
   12990:	80801915 	stw	r2,100(r16)
   12994:	80800017 	ldw	r2,0(r16)
   12998:	81000517 	ldw	r4,20(r16)
   1299c:	8180030d 	sth	r6,12(r16)
   129a0:	10c7c83a 	sub	r3,r2,r3
   129a4:	193fe316 	blt	r3,r4,12934 <__alt_mem_Flash_flash_data+0xf4012934>
   129a8:	9009883a 	mov	r4,r18
   129ac:	800b883a 	mov	r5,r16
   129b0:	000d0680 	call	d068 <_fflush_r>
   129b4:	1000091e 	bne	r2,zero,129dc <__swbuf_r+0x10c>
   129b8:	80800017 	ldw	r2,0(r16)
   129bc:	00c00044 	movi	r3,1
   129c0:	003fdd06 	br	12938 <__alt_mem_Flash_flash_data+0xf4012938>
   129c4:	00800284 	movi	r2,10
   129c8:	88bfe61e 	bne	r17,r2,12964 <__alt_mem_Flash_flash_data+0xf4012964>
   129cc:	9009883a 	mov	r4,r18
   129d0:	800b883a 	mov	r5,r16
   129d4:	000d0680 	call	d068 <_fflush_r>
   129d8:	103fe226 	beq	r2,zero,12964 <__alt_mem_Flash_flash_data+0xf4012964>
   129dc:	00bfffc4 	movi	r2,-1
   129e0:	003fe106 	br	12968 <__alt_mem_Flash_flash_data+0xf4012968>
   129e4:	9009883a 	mov	r4,r18
   129e8:	800b883a 	mov	r5,r16
   129ec:	000b3e40 	call	b3e4 <__swsetup_r>
   129f0:	103ffa1e 	bne	r2,zero,129dc <__alt_mem_Flash_flash_data+0xf40129dc>
   129f4:	8180030b 	ldhu	r6,12(r16)
   129f8:	80c00417 	ldw	r3,16(r16)
   129fc:	003fc606 	br	12918 <__alt_mem_Flash_flash_data+0xf4012918>
   12a00:	000d4440 	call	d444 <__sinit>
   12a04:	003fbd06 	br	128fc <__alt_mem_Flash_flash_data+0xf40128fc>

00012a08 <__swbuf>:
   12a08:	00c000b4 	movhi	r3,2
   12a0c:	18cbe204 	addi	r3,r3,12168
   12a10:	2005883a 	mov	r2,r4
   12a14:	19000017 	ldw	r4,0(r3)
   12a18:	280d883a 	mov	r6,r5
   12a1c:	100b883a 	mov	r5,r2
   12a20:	00128d01 	jmpi	128d0 <__swbuf_r>

00012a24 <_wcrtomb_r>:
   12a24:	defff604 	addi	sp,sp,-40
   12a28:	008000b4 	movhi	r2,2
   12a2c:	dc800815 	stw	r18,32(sp)
   12a30:	dc400715 	stw	r17,28(sp)
   12a34:	dc000615 	stw	r16,24(sp)
   12a38:	108be404 	addi	r2,r2,12176
   12a3c:	dfc00915 	stw	ra,36(sp)
   12a40:	2021883a 	mov	r16,r4
   12a44:	3823883a 	mov	r17,r7
   12a48:	14800017 	ldw	r18,0(r2)
   12a4c:	28001426 	beq	r5,zero,12aa0 <_wcrtomb_r+0x7c>
   12a50:	d9400415 	stw	r5,16(sp)
   12a54:	d9800515 	stw	r6,20(sp)
   12a58:	000df6c0 	call	df6c <__locale_charset>
   12a5c:	d9400417 	ldw	r5,16(sp)
   12a60:	d9800517 	ldw	r6,20(sp)
   12a64:	8009883a 	mov	r4,r16
   12a68:	dc400015 	stw	r17,0(sp)
   12a6c:	100f883a 	mov	r7,r2
   12a70:	903ee83a 	callr	r18
   12a74:	00ffffc4 	movi	r3,-1
   12a78:	10c0031e 	bne	r2,r3,12a88 <_wcrtomb_r+0x64>
   12a7c:	88000015 	stw	zero,0(r17)
   12a80:	00c02284 	movi	r3,138
   12a84:	80c00015 	stw	r3,0(r16)
   12a88:	dfc00917 	ldw	ra,36(sp)
   12a8c:	dc800817 	ldw	r18,32(sp)
   12a90:	dc400717 	ldw	r17,28(sp)
   12a94:	dc000617 	ldw	r16,24(sp)
   12a98:	dec00a04 	addi	sp,sp,40
   12a9c:	f800283a 	ret
   12aa0:	000df6c0 	call	df6c <__locale_charset>
   12aa4:	8009883a 	mov	r4,r16
   12aa8:	dc400015 	stw	r17,0(sp)
   12aac:	d9400104 	addi	r5,sp,4
   12ab0:	000d883a 	mov	r6,zero
   12ab4:	100f883a 	mov	r7,r2
   12ab8:	903ee83a 	callr	r18
   12abc:	003fed06 	br	12a74 <__alt_mem_Flash_flash_data+0xf4012a74>

00012ac0 <wcrtomb>:
   12ac0:	defff604 	addi	sp,sp,-40
   12ac4:	008000b4 	movhi	r2,2
   12ac8:	dc800615 	stw	r18,24(sp)
   12acc:	dc400515 	stw	r17,20(sp)
   12ad0:	dc000415 	stw	r16,16(sp)
   12ad4:	108be204 	addi	r2,r2,12168
   12ad8:	dfc00915 	stw	ra,36(sp)
   12adc:	dd000815 	stw	r20,32(sp)
   12ae0:	dcc00715 	stw	r19,28(sp)
   12ae4:	2021883a 	mov	r16,r4
   12ae8:	3025883a 	mov	r18,r6
   12aec:	14400017 	ldw	r17,0(r2)
   12af0:	20001826 	beq	r4,zero,12b54 <wcrtomb+0x94>
   12af4:	008000b4 	movhi	r2,2
   12af8:	108be404 	addi	r2,r2,12176
   12afc:	15000017 	ldw	r20,0(r2)
   12b00:	2827883a 	mov	r19,r5
   12b04:	000df6c0 	call	df6c <__locale_charset>
   12b08:	8809883a 	mov	r4,r17
   12b0c:	dc800015 	stw	r18,0(sp)
   12b10:	800b883a 	mov	r5,r16
   12b14:	980d883a 	mov	r6,r19
   12b18:	100f883a 	mov	r7,r2
   12b1c:	a03ee83a 	callr	r20
   12b20:	00ffffc4 	movi	r3,-1
   12b24:	10c0031e 	bne	r2,r3,12b34 <wcrtomb+0x74>
   12b28:	90000015 	stw	zero,0(r18)
   12b2c:	00c02284 	movi	r3,138
   12b30:	88c00015 	stw	r3,0(r17)
   12b34:	dfc00917 	ldw	ra,36(sp)
   12b38:	dd000817 	ldw	r20,32(sp)
   12b3c:	dcc00717 	ldw	r19,28(sp)
   12b40:	dc800617 	ldw	r18,24(sp)
   12b44:	dc400517 	ldw	r17,20(sp)
   12b48:	dc000417 	ldw	r16,16(sp)
   12b4c:	dec00a04 	addi	sp,sp,40
   12b50:	f800283a 	ret
   12b54:	008000b4 	movhi	r2,2
   12b58:	108be404 	addi	r2,r2,12176
   12b5c:	14000017 	ldw	r16,0(r2)
   12b60:	000df6c0 	call	df6c <__locale_charset>
   12b64:	8809883a 	mov	r4,r17
   12b68:	dc800015 	stw	r18,0(sp)
   12b6c:	d9400104 	addi	r5,sp,4
   12b70:	000d883a 	mov	r6,zero
   12b74:	100f883a 	mov	r7,r2
   12b78:	803ee83a 	callr	r16
   12b7c:	003fe806 	br	12b20 <__alt_mem_Flash_flash_data+0xf4012b20>

00012b80 <__ascii_wctomb>:
   12b80:	28000526 	beq	r5,zero,12b98 <__ascii_wctomb+0x18>
   12b84:	00803fc4 	movi	r2,255
   12b88:	11800536 	bltu	r2,r6,12ba0 <__ascii_wctomb+0x20>
   12b8c:	29800005 	stb	r6,0(r5)
   12b90:	00800044 	movi	r2,1
   12b94:	f800283a 	ret
   12b98:	0005883a 	mov	r2,zero
   12b9c:	f800283a 	ret
   12ba0:	00802284 	movi	r2,138
   12ba4:	20800015 	stw	r2,0(r4)
   12ba8:	00bfffc4 	movi	r2,-1
   12bac:	f800283a 	ret

00012bb0 <_wctomb_r>:
   12bb0:	008000b4 	movhi	r2,2
   12bb4:	defff904 	addi	sp,sp,-28
   12bb8:	108be404 	addi	r2,r2,12176
   12bbc:	dfc00615 	stw	ra,24(sp)
   12bc0:	dc400515 	stw	r17,20(sp)
   12bc4:	dc000415 	stw	r16,16(sp)
   12bc8:	3823883a 	mov	r17,r7
   12bcc:	14000017 	ldw	r16,0(r2)
   12bd0:	d9000115 	stw	r4,4(sp)
   12bd4:	d9400215 	stw	r5,8(sp)
   12bd8:	d9800315 	stw	r6,12(sp)
   12bdc:	000df6c0 	call	df6c <__locale_charset>
   12be0:	d9000117 	ldw	r4,4(sp)
   12be4:	d9400217 	ldw	r5,8(sp)
   12be8:	d9800317 	ldw	r6,12(sp)
   12bec:	dc400015 	stw	r17,0(sp)
   12bf0:	100f883a 	mov	r7,r2
   12bf4:	803ee83a 	callr	r16
   12bf8:	dfc00617 	ldw	ra,24(sp)
   12bfc:	dc400517 	ldw	r17,20(sp)
   12c00:	dc000417 	ldw	r16,16(sp)
   12c04:	dec00704 	addi	sp,sp,28
   12c08:	f800283a 	ret

00012c0c <__udivdi3>:
   12c0c:	defff504 	addi	sp,sp,-44
   12c10:	dcc00415 	stw	r19,16(sp)
   12c14:	dc000115 	stw	r16,4(sp)
   12c18:	dfc00a15 	stw	ra,40(sp)
   12c1c:	df000915 	stw	fp,36(sp)
   12c20:	ddc00815 	stw	r23,32(sp)
   12c24:	dd800715 	stw	r22,28(sp)
   12c28:	dd400615 	stw	r21,24(sp)
   12c2c:	dd000515 	stw	r20,20(sp)
   12c30:	dc800315 	stw	r18,12(sp)
   12c34:	dc400215 	stw	r17,8(sp)
   12c38:	2027883a 	mov	r19,r4
   12c3c:	2821883a 	mov	r16,r5
   12c40:	3800421e 	bne	r7,zero,12d4c <__udivdi3+0x140>
   12c44:	3025883a 	mov	r18,r6
   12c48:	2023883a 	mov	r17,r4
   12c4c:	2980542e 	bgeu	r5,r6,12da0 <__udivdi3+0x194>
   12c50:	00bfffd4 	movui	r2,65535
   12c54:	282d883a 	mov	r22,r5
   12c58:	1180a836 	bltu	r2,r6,12efc <__udivdi3+0x2f0>
   12c5c:	00803fc4 	movi	r2,255
   12c60:	1181422e 	bgeu	r2,r6,1316c <__udivdi3+0x560>
   12c64:	00800204 	movi	r2,8
   12c68:	1007883a 	mov	r3,r2
   12c6c:	3084d83a 	srl	r2,r6,r2
   12c70:	010000b4 	movhi	r4,2
   12c74:	2102d204 	addi	r4,r4,2888
   12c78:	2085883a 	add	r2,r4,r2
   12c7c:	10800003 	ldbu	r2,0(r2)
   12c80:	10c7883a 	add	r3,r2,r3
   12c84:	00800804 	movi	r2,32
   12c88:	10c5c83a 	sub	r2,r2,r3
   12c8c:	10000526 	beq	r2,zero,12ca4 <__udivdi3+0x98>
   12c90:	80a0983a 	sll	r16,r16,r2
   12c94:	98c6d83a 	srl	r3,r19,r3
   12c98:	30a4983a 	sll	r18,r6,r2
   12c9c:	98a2983a 	sll	r17,r19,r2
   12ca0:	80ecb03a 	or	r22,r16,r3
   12ca4:	902ad43a 	srli	r21,r18,16
   12ca8:	b009883a 	mov	r4,r22
   12cac:	953fffcc 	andi	r20,r18,65535
   12cb0:	a80b883a 	mov	r5,r21
   12cb4:	00046580 	call	4658 <__umodsi3>
   12cb8:	b009883a 	mov	r4,r22
   12cbc:	a80b883a 	mov	r5,r21
   12cc0:	1027883a 	mov	r19,r2
   12cc4:	00046500 	call	4650 <__udivsi3>
   12cc8:	1021883a 	mov	r16,r2
   12ccc:	8806d43a 	srli	r3,r17,16
   12cd0:	9804943a 	slli	r2,r19,16
   12cd4:	8527383a 	mul	r19,r16,r20
   12cd8:	10c4b03a 	or	r2,r2,r3
   12cdc:	14c0052e 	bgeu	r2,r19,12cf4 <__udivdi3+0xe8>
   12ce0:	1485883a 	add	r2,r2,r18
   12ce4:	80ffffc4 	addi	r3,r16,-1
   12ce8:	14800136 	bltu	r2,r18,12cf0 <__udivdi3+0xe4>
   12cec:	14c13436 	bltu	r2,r19,131c0 <__udivdi3+0x5b4>
   12cf0:	1821883a 	mov	r16,r3
   12cf4:	14e7c83a 	sub	r19,r2,r19
   12cf8:	9809883a 	mov	r4,r19
   12cfc:	a80b883a 	mov	r5,r21
   12d00:	00046580 	call	4658 <__umodsi3>
   12d04:	102d883a 	mov	r22,r2
   12d08:	9809883a 	mov	r4,r19
   12d0c:	a80b883a 	mov	r5,r21
   12d10:	00046500 	call	4650 <__udivsi3>
   12d14:	b02c943a 	slli	r22,r22,16
   12d18:	1529383a 	mul	r20,r2,r20
   12d1c:	8c7fffcc 	andi	r17,r17,65535
   12d20:	b462b03a 	or	r17,r22,r17
   12d24:	8d00052e 	bgeu	r17,r20,12d3c <__udivdi3+0x130>
   12d28:	8ca3883a 	add	r17,r17,r18
   12d2c:	10ffffc4 	addi	r3,r2,-1
   12d30:	8c80f636 	bltu	r17,r18,1310c <__udivdi3+0x500>
   12d34:	8d00f52e 	bgeu	r17,r20,1310c <__udivdi3+0x500>
   12d38:	10bfff84 	addi	r2,r2,-2
   12d3c:	8020943a 	slli	r16,r16,16
   12d40:	0007883a 	mov	r3,zero
   12d44:	1404b03a 	or	r2,r2,r16
   12d48:	00005b06 	br	12eb8 <__udivdi3+0x2ac>
   12d4c:	29c05836 	bltu	r5,r7,12eb0 <__udivdi3+0x2a4>
   12d50:	00bfffd4 	movui	r2,65535
   12d54:	11c0642e 	bgeu	r2,r7,12ee8 <__udivdi3+0x2dc>
   12d58:	00804034 	movhi	r2,256
   12d5c:	10bfffc4 	addi	r2,r2,-1
   12d60:	11c0f32e 	bgeu	r2,r7,13130 <__udivdi3+0x524>
   12d64:	00c00604 	movi	r3,24
   12d68:	180b883a 	mov	r5,r3
   12d6c:	38c6d83a 	srl	r3,r7,r3
   12d70:	008000b4 	movhi	r2,2
   12d74:	1082d204 	addi	r2,r2,2888
   12d78:	10c7883a 	add	r3,r2,r3
   12d7c:	18c00003 	ldbu	r3,0(r3)
   12d80:	01000804 	movi	r4,32
   12d84:	1947883a 	add	r3,r3,r5
   12d88:	20e5c83a 	sub	r18,r4,r3
   12d8c:	9000661e 	bne	r18,zero,12f28 <__udivdi3+0x31c>
   12d90:	3c00f936 	bltu	r7,r16,13178 <__udivdi3+0x56c>
   12d94:	9985403a 	cmpgeu	r2,r19,r6
   12d98:	0007883a 	mov	r3,zero
   12d9c:	00004606 	br	12eb8 <__udivdi3+0x2ac>
   12da0:	3000041e 	bne	r6,zero,12db4 <__udivdi3+0x1a8>
   12da4:	01000044 	movi	r4,1
   12da8:	000b883a 	mov	r5,zero
   12dac:	00046500 	call	4650 <__udivsi3>
   12db0:	1025883a 	mov	r18,r2
   12db4:	00bfffd4 	movui	r2,65535
   12db8:	1480562e 	bgeu	r2,r18,12f14 <__udivdi3+0x308>
   12dbc:	00804034 	movhi	r2,256
   12dc0:	10bfffc4 	addi	r2,r2,-1
   12dc4:	1480e32e 	bgeu	r2,r18,13154 <__udivdi3+0x548>
   12dc8:	00800604 	movi	r2,24
   12dcc:	1007883a 	mov	r3,r2
   12dd0:	9084d83a 	srl	r2,r18,r2
   12dd4:	010000b4 	movhi	r4,2
   12dd8:	2102d204 	addi	r4,r4,2888
   12ddc:	2085883a 	add	r2,r4,r2
   12de0:	10800003 	ldbu	r2,0(r2)
   12de4:	10c5883a 	add	r2,r2,r3
   12de8:	00c00804 	movi	r3,32
   12dec:	1887c83a 	sub	r3,r3,r2
   12df0:	1800911e 	bne	r3,zero,13038 <__udivdi3+0x42c>
   12df4:	9028d43a 	srli	r20,r18,16
   12df8:	84a1c83a 	sub	r16,r16,r18
   12dfc:	957fffcc 	andi	r21,r18,65535
   12e00:	00c00044 	movi	r3,1
   12e04:	8009883a 	mov	r4,r16
   12e08:	a00b883a 	mov	r5,r20
   12e0c:	d8c00015 	stw	r3,0(sp)
   12e10:	00046580 	call	4658 <__umodsi3>
   12e14:	8009883a 	mov	r4,r16
   12e18:	a00b883a 	mov	r5,r20
   12e1c:	1027883a 	mov	r19,r2
   12e20:	00046500 	call	4650 <__udivsi3>
   12e24:	1021883a 	mov	r16,r2
   12e28:	880cd43a 	srli	r6,r17,16
   12e2c:	9804943a 	slli	r2,r19,16
   12e30:	8567383a 	mul	r19,r16,r21
   12e34:	d8c00017 	ldw	r3,0(sp)
   12e38:	1188b03a 	or	r4,r2,r6
   12e3c:	24c0052e 	bgeu	r4,r19,12e54 <__udivdi3+0x248>
   12e40:	2489883a 	add	r4,r4,r18
   12e44:	80bfffc4 	addi	r2,r16,-1
   12e48:	24800136 	bltu	r4,r18,12e50 <__udivdi3+0x244>
   12e4c:	24c0d936 	bltu	r4,r19,131b4 <__udivdi3+0x5a8>
   12e50:	1021883a 	mov	r16,r2
   12e54:	24e7c83a 	sub	r19,r4,r19
   12e58:	9809883a 	mov	r4,r19
   12e5c:	a00b883a 	mov	r5,r20
   12e60:	d8c00015 	stw	r3,0(sp)
   12e64:	00046580 	call	4658 <__umodsi3>
   12e68:	102d883a 	mov	r22,r2
   12e6c:	9809883a 	mov	r4,r19
   12e70:	a00b883a 	mov	r5,r20
   12e74:	00046500 	call	4650 <__udivsi3>
   12e78:	b02c943a 	slli	r22,r22,16
   12e7c:	156b383a 	mul	r21,r2,r21
   12e80:	8c7fffcc 	andi	r17,r17,65535
   12e84:	b462b03a 	or	r17,r22,r17
   12e88:	d8c00017 	ldw	r3,0(sp)
   12e8c:	8d40052e 	bgeu	r17,r21,12ea4 <__udivdi3+0x298>
   12e90:	8ca3883a 	add	r17,r17,r18
   12e94:	113fffc4 	addi	r4,r2,-1
   12e98:	8c809a36 	bltu	r17,r18,13104 <__udivdi3+0x4f8>
   12e9c:	8d40992e 	bgeu	r17,r21,13104 <__udivdi3+0x4f8>
   12ea0:	10bfff84 	addi	r2,r2,-2
   12ea4:	8020943a 	slli	r16,r16,16
   12ea8:	1404b03a 	or	r2,r2,r16
   12eac:	00000206 	br	12eb8 <__udivdi3+0x2ac>
   12eb0:	0007883a 	mov	r3,zero
   12eb4:	0005883a 	mov	r2,zero
   12eb8:	dfc00a17 	ldw	ra,40(sp)
   12ebc:	df000917 	ldw	fp,36(sp)
   12ec0:	ddc00817 	ldw	r23,32(sp)
   12ec4:	dd800717 	ldw	r22,28(sp)
   12ec8:	dd400617 	ldw	r21,24(sp)
   12ecc:	dd000517 	ldw	r20,20(sp)
   12ed0:	dcc00417 	ldw	r19,16(sp)
   12ed4:	dc800317 	ldw	r18,12(sp)
   12ed8:	dc400217 	ldw	r17,8(sp)
   12edc:	dc000117 	ldw	r16,4(sp)
   12ee0:	dec00b04 	addi	sp,sp,44
   12ee4:	f800283a 	ret
   12ee8:	00803fc4 	movi	r2,255
   12eec:	11c0932e 	bgeu	r2,r7,1313c <__udivdi3+0x530>
   12ef0:	00c00204 	movi	r3,8
   12ef4:	180b883a 	mov	r5,r3
   12ef8:	003f9c06 	br	12d6c <__alt_mem_Flash_flash_data+0xf4012d6c>
   12efc:	00804034 	movhi	r2,256
   12f00:	10bfffc4 	addi	r2,r2,-1
   12f04:	1180902e 	bgeu	r2,r6,13148 <__udivdi3+0x53c>
   12f08:	00800604 	movi	r2,24
   12f0c:	1007883a 	mov	r3,r2
   12f10:	003f5606 	br	12c6c <__alt_mem_Flash_flash_data+0xf4012c6c>
   12f14:	00803fc4 	movi	r2,255
   12f18:	1480912e 	bgeu	r2,r18,13160 <__udivdi3+0x554>
   12f1c:	00800204 	movi	r2,8
   12f20:	1007883a 	mov	r3,r2
   12f24:	003faa06 	br	12dd0 <__alt_mem_Flash_flash_data+0xf4012dd0>
   12f28:	30eed83a 	srl	r23,r6,r3
   12f2c:	3c8e983a 	sll	r7,r7,r18
   12f30:	80f8d83a 	srl	fp,r16,r3
   12f34:	98c6d83a 	srl	r3,r19,r3
   12f38:	3deeb03a 	or	r23,r7,r23
   12f3c:	b828d43a 	srli	r20,r23,16
   12f40:	84a0983a 	sll	r16,r16,r18
   12f44:	e009883a 	mov	r4,fp
   12f48:	a00b883a 	mov	r5,r20
   12f4c:	80e2b03a 	or	r17,r16,r3
   12f50:	34aa983a 	sll	r21,r6,r18
   12f54:	00046580 	call	4658 <__umodsi3>
   12f58:	e009883a 	mov	r4,fp
   12f5c:	a00b883a 	mov	r5,r20
   12f60:	102d883a 	mov	r22,r2
   12f64:	00046500 	call	4650 <__udivsi3>
   12f68:	1021883a 	mov	r16,r2
   12f6c:	bf3fffcc 	andi	fp,r23,65535
   12f70:	b004943a 	slli	r2,r22,16
   12f74:	8808d43a 	srli	r4,r17,16
   12f78:	872d383a 	mul	r22,r16,fp
   12f7c:	1104b03a 	or	r2,r2,r4
   12f80:	1580042e 	bgeu	r2,r22,12f94 <__udivdi3+0x388>
   12f84:	15c5883a 	add	r2,r2,r23
   12f88:	80ffffc4 	addi	r3,r16,-1
   12f8c:	15c0812e 	bgeu	r2,r23,13194 <__udivdi3+0x588>
   12f90:	1821883a 	mov	r16,r3
   12f94:	15adc83a 	sub	r22,r2,r22
   12f98:	b009883a 	mov	r4,r22
   12f9c:	a00b883a 	mov	r5,r20
   12fa0:	00046580 	call	4658 <__umodsi3>
   12fa4:	a00b883a 	mov	r5,r20
   12fa8:	b009883a 	mov	r4,r22
   12fac:	d8800015 	stw	r2,0(sp)
   12fb0:	00046500 	call	4650 <__udivsi3>
   12fb4:	d8c00017 	ldw	r3,0(sp)
   12fb8:	170b383a 	mul	r5,r2,fp
   12fbc:	8c7fffcc 	andi	r17,r17,65535
   12fc0:	1806943a 	slli	r3,r3,16
   12fc4:	1c46b03a 	or	r3,r3,r17
   12fc8:	1940042e 	bgeu	r3,r5,12fdc <__udivdi3+0x3d0>
   12fcc:	1dc7883a 	add	r3,r3,r23
   12fd0:	113fffc4 	addi	r4,r2,-1
   12fd4:	1dc06b2e 	bgeu	r3,r23,13184 <__udivdi3+0x578>
   12fd8:	2005883a 	mov	r2,r4
   12fdc:	8020943a 	slli	r16,r16,16
   12fe0:	a9ffffcc 	andi	r7,r21,65535
   12fe4:	a82ad43a 	srli	r21,r21,16
   12fe8:	1404b03a 	or	r2,r2,r16
   12fec:	113fffcc 	andi	r4,r2,65535
   12ff0:	100cd43a 	srli	r6,r2,16
   12ff4:	21d3383a 	mul	r9,r4,r7
   12ff8:	2549383a 	mul	r4,r4,r21
   12ffc:	31cf383a 	mul	r7,r6,r7
   13000:	4810d43a 	srli	r8,r9,16
   13004:	1947c83a 	sub	r3,r3,r5
   13008:	3909883a 	add	r4,r7,r4
   1300c:	2209883a 	add	r4,r4,r8
   13010:	354d383a 	mul	r6,r6,r21
   13014:	21c0022e 	bgeu	r4,r7,13020 <__udivdi3+0x414>
   13018:	01400074 	movhi	r5,1
   1301c:	314d883a 	add	r6,r6,r5
   13020:	202ad43a 	srli	r21,r4,16
   13024:	354d883a 	add	r6,r6,r21
   13028:	19803f36 	bltu	r3,r6,13128 <__udivdi3+0x51c>
   1302c:	19803926 	beq	r3,r6,13114 <__udivdi3+0x508>
   13030:	0007883a 	mov	r3,zero
   13034:	003fa006 	br	12eb8 <__alt_mem_Flash_flash_data+0xf4012eb8>
   13038:	90e4983a 	sll	r18,r18,r3
   1303c:	80aad83a 	srl	r21,r16,r2
   13040:	80e0983a 	sll	r16,r16,r3
   13044:	9028d43a 	srli	r20,r18,16
   13048:	9884d83a 	srl	r2,r19,r2
   1304c:	a809883a 	mov	r4,r21
   13050:	a00b883a 	mov	r5,r20
   13054:	80acb03a 	or	r22,r16,r2
   13058:	98e2983a 	sll	r17,r19,r3
   1305c:	00046580 	call	4658 <__umodsi3>
   13060:	a809883a 	mov	r4,r21
   13064:	a00b883a 	mov	r5,r20
   13068:	1021883a 	mov	r16,r2
   1306c:	00046500 	call	4650 <__udivsi3>
   13070:	957fffcc 	andi	r21,r18,65535
   13074:	8020943a 	slli	r16,r16,16
   13078:	b00ad43a 	srli	r5,r22,16
   1307c:	1567383a 	mul	r19,r2,r21
   13080:	102f883a 	mov	r23,r2
   13084:	8148b03a 	or	r4,r16,r5
   13088:	24c0062e 	bgeu	r4,r19,130a4 <__udivdi3+0x498>
   1308c:	2489883a 	add	r4,r4,r18
   13090:	10bfffc4 	addi	r2,r2,-1
   13094:	24804536 	bltu	r4,r18,131ac <__udivdi3+0x5a0>
   13098:	24c0442e 	bgeu	r4,r19,131ac <__udivdi3+0x5a0>
   1309c:	bdffff84 	addi	r23,r23,-2
   130a0:	2489883a 	add	r4,r4,r18
   130a4:	24e7c83a 	sub	r19,r4,r19
   130a8:	9809883a 	mov	r4,r19
   130ac:	a00b883a 	mov	r5,r20
   130b0:	00046580 	call	4658 <__umodsi3>
   130b4:	1021883a 	mov	r16,r2
   130b8:	9809883a 	mov	r4,r19
   130bc:	a00b883a 	mov	r5,r20
   130c0:	00046500 	call	4650 <__udivsi3>
   130c4:	8020943a 	slli	r16,r16,16
   130c8:	1007883a 	mov	r3,r2
   130cc:	1545383a 	mul	r2,r2,r21
   130d0:	b13fffcc 	andi	r4,r22,65535
   130d4:	8108b03a 	or	r4,r16,r4
   130d8:	2080062e 	bgeu	r4,r2,130f4 <__udivdi3+0x4e8>
   130dc:	2489883a 	add	r4,r4,r18
   130e0:	197fffc4 	addi	r5,r3,-1
   130e4:	24802f36 	bltu	r4,r18,131a4 <__udivdi3+0x598>
   130e8:	20802e2e 	bgeu	r4,r2,131a4 <__udivdi3+0x598>
   130ec:	18ffff84 	addi	r3,r3,-2
   130f0:	2489883a 	add	r4,r4,r18
   130f4:	b82e943a 	slli	r23,r23,16
   130f8:	20a1c83a 	sub	r16,r4,r2
   130fc:	1dc6b03a 	or	r3,r3,r23
   13100:	003f4006 	br	12e04 <__alt_mem_Flash_flash_data+0xf4012e04>
   13104:	2005883a 	mov	r2,r4
   13108:	003f6606 	br	12ea4 <__alt_mem_Flash_flash_data+0xf4012ea4>
   1310c:	1805883a 	mov	r2,r3
   13110:	003f0a06 	br	12d3c <__alt_mem_Flash_flash_data+0xf4012d3c>
   13114:	2006943a 	slli	r3,r4,16
   13118:	9c88983a 	sll	r4,r19,r18
   1311c:	4a7fffcc 	andi	r9,r9,65535
   13120:	1a47883a 	add	r3,r3,r9
   13124:	20ffc22e 	bgeu	r4,r3,13030 <__alt_mem_Flash_flash_data+0xf4013030>
   13128:	10bfffc4 	addi	r2,r2,-1
   1312c:	003fc006 	br	13030 <__alt_mem_Flash_flash_data+0xf4013030>
   13130:	00c00404 	movi	r3,16
   13134:	180b883a 	mov	r5,r3
   13138:	003f0c06 	br	12d6c <__alt_mem_Flash_flash_data+0xf4012d6c>
   1313c:	0007883a 	mov	r3,zero
   13140:	000b883a 	mov	r5,zero
   13144:	003f0906 	br	12d6c <__alt_mem_Flash_flash_data+0xf4012d6c>
   13148:	00800404 	movi	r2,16
   1314c:	1007883a 	mov	r3,r2
   13150:	003ec606 	br	12c6c <__alt_mem_Flash_flash_data+0xf4012c6c>
   13154:	00800404 	movi	r2,16
   13158:	1007883a 	mov	r3,r2
   1315c:	003f1c06 	br	12dd0 <__alt_mem_Flash_flash_data+0xf4012dd0>
   13160:	0005883a 	mov	r2,zero
   13164:	0007883a 	mov	r3,zero
   13168:	003f1906 	br	12dd0 <__alt_mem_Flash_flash_data+0xf4012dd0>
   1316c:	0005883a 	mov	r2,zero
   13170:	0007883a 	mov	r3,zero
   13174:	003ebd06 	br	12c6c <__alt_mem_Flash_flash_data+0xf4012c6c>
   13178:	0007883a 	mov	r3,zero
   1317c:	00800044 	movi	r2,1
   13180:	003f4d06 	br	12eb8 <__alt_mem_Flash_flash_data+0xf4012eb8>
   13184:	197f942e 	bgeu	r3,r5,12fd8 <__alt_mem_Flash_flash_data+0xf4012fd8>
   13188:	10bfff84 	addi	r2,r2,-2
   1318c:	1dc7883a 	add	r3,r3,r23
   13190:	003f9206 	br	12fdc <__alt_mem_Flash_flash_data+0xf4012fdc>
   13194:	15bf7e2e 	bgeu	r2,r22,12f90 <__alt_mem_Flash_flash_data+0xf4012f90>
   13198:	843fff84 	addi	r16,r16,-2
   1319c:	15c5883a 	add	r2,r2,r23
   131a0:	003f7c06 	br	12f94 <__alt_mem_Flash_flash_data+0xf4012f94>
   131a4:	2807883a 	mov	r3,r5
   131a8:	003fd206 	br	130f4 <__alt_mem_Flash_flash_data+0xf40130f4>
   131ac:	102f883a 	mov	r23,r2
   131b0:	003fbc06 	br	130a4 <__alt_mem_Flash_flash_data+0xf40130a4>
   131b4:	843fff84 	addi	r16,r16,-2
   131b8:	2489883a 	add	r4,r4,r18
   131bc:	003f2506 	br	12e54 <__alt_mem_Flash_flash_data+0xf4012e54>
   131c0:	843fff84 	addi	r16,r16,-2
   131c4:	1485883a 	add	r2,r2,r18
   131c8:	003eca06 	br	12cf4 <__alt_mem_Flash_flash_data+0xf4012cf4>

000131cc <__umoddi3>:
   131cc:	defff404 	addi	sp,sp,-48
   131d0:	ddc00915 	stw	r23,36(sp)
   131d4:	dc400315 	stw	r17,12(sp)
   131d8:	dc000215 	stw	r16,8(sp)
   131dc:	dfc00b15 	stw	ra,44(sp)
   131e0:	df000a15 	stw	fp,40(sp)
   131e4:	dd800815 	stw	r22,32(sp)
   131e8:	dd400715 	stw	r21,28(sp)
   131ec:	dd000615 	stw	r20,24(sp)
   131f0:	dcc00515 	stw	r19,20(sp)
   131f4:	dc800415 	stw	r18,16(sp)
   131f8:	2021883a 	mov	r16,r4
   131fc:	2823883a 	mov	r17,r5
   13200:	282f883a 	mov	r23,r5
   13204:	3800381e 	bne	r7,zero,132e8 <__umoddi3+0x11c>
   13208:	3027883a 	mov	r19,r6
   1320c:	2029883a 	mov	r20,r4
   13210:	29804e2e 	bgeu	r5,r6,1334c <__umoddi3+0x180>
   13214:	00bfffd4 	movui	r2,65535
   13218:	11809c36 	bltu	r2,r6,1348c <__umoddi3+0x2c0>
   1321c:	00803fc4 	movi	r2,255
   13220:	11813b2e 	bgeu	r2,r6,13710 <__umoddi3+0x544>
   13224:	01400204 	movi	r5,8
   13228:	2805883a 	mov	r2,r5
   1322c:	314ad83a 	srl	r5,r6,r5
   13230:	00c000b4 	movhi	r3,2
   13234:	18c2d204 	addi	r3,r3,2888
   13238:	194b883a 	add	r5,r3,r5
   1323c:	29000003 	ldbu	r4,0(r5)
   13240:	2089883a 	add	r4,r4,r2
   13244:	00800804 	movi	r2,32
   13248:	1105c83a 	sub	r2,r2,r4
   1324c:	1000ec26 	beq	r2,zero,13600 <__umoddi3+0x434>
   13250:	88a2983a 	sll	r17,r17,r2
   13254:	8108d83a 	srl	r4,r16,r4
   13258:	30a6983a 	sll	r19,r6,r2
   1325c:	80a8983a 	sll	r20,r16,r2
   13260:	1025883a 	mov	r18,r2
   13264:	892eb03a 	or	r23,r17,r4
   13268:	982cd43a 	srli	r22,r19,16
   1326c:	b809883a 	mov	r4,r23
   13270:	9d7fffcc 	andi	r21,r19,65535
   13274:	b00b883a 	mov	r5,r22
   13278:	00046580 	call	4658 <__umodsi3>
   1327c:	b809883a 	mov	r4,r23
   13280:	b00b883a 	mov	r5,r22
   13284:	1021883a 	mov	r16,r2
   13288:	00046500 	call	4650 <__udivsi3>
   1328c:	8020943a 	slli	r16,r16,16
   13290:	a00cd43a 	srli	r6,r20,16
   13294:	1545383a 	mul	r2,r2,r21
   13298:	8188b03a 	or	r4,r16,r6
   1329c:	2080042e 	bgeu	r4,r2,132b0 <__umoddi3+0xe4>
   132a0:	24c9883a 	add	r4,r4,r19
   132a4:	24c00236 	bltu	r4,r19,132b0 <__umoddi3+0xe4>
   132a8:	2080012e 	bgeu	r4,r2,132b0 <__umoddi3+0xe4>
   132ac:	24c9883a 	add	r4,r4,r19
   132b0:	20a3c83a 	sub	r17,r4,r2
   132b4:	8809883a 	mov	r4,r17
   132b8:	b00b883a 	mov	r5,r22
   132bc:	00046580 	call	4658 <__umodsi3>
   132c0:	8809883a 	mov	r4,r17
   132c4:	b00b883a 	mov	r5,r22
   132c8:	1021883a 	mov	r16,r2
   132cc:	00046500 	call	4650 <__udivsi3>
   132d0:	8006943a 	slli	r3,r16,16
   132d4:	1545383a 	mul	r2,r2,r21
   132d8:	a13fffcc 	andi	r4,r20,65535
   132dc:	1906b03a 	or	r3,r3,r4
   132e0:	1880532e 	bgeu	r3,r2,13430 <__umoddi3+0x264>
   132e4:	00004e06 	br	13420 <__umoddi3+0x254>
   132e8:	29c05536 	bltu	r5,r7,13440 <__umoddi3+0x274>
   132ec:	00bfffd4 	movui	r2,65535
   132f0:	11c0612e 	bgeu	r2,r7,13478 <__umoddi3+0x2ac>
   132f4:	00804034 	movhi	r2,256
   132f8:	10bfffc4 	addi	r2,r2,-1
   132fc:	11c0f82e 	bgeu	r2,r7,136e0 <__umoddi3+0x514>
   13300:	01400604 	movi	r5,24
   13304:	282b883a 	mov	r21,r5
   13308:	394ad83a 	srl	r5,r7,r5
   1330c:	00c000b4 	movhi	r3,2
   13310:	18c2d204 	addi	r3,r3,2888
   13314:	194b883a 	add	r5,r3,r5
   13318:	28800003 	ldbu	r2,0(r5)
   1331c:	00c00804 	movi	r3,32
   13320:	156b883a 	add	r21,r2,r21
   13324:	1d69c83a 	sub	r20,r3,r21
   13328:	a000631e 	bne	r20,zero,134b8 <__umoddi3+0x2ec>
   1332c:	3c400136 	bltu	r7,r17,13334 <__umoddi3+0x168>
   13330:	81810436 	bltu	r16,r6,13744 <__umoddi3+0x578>
   13334:	8185c83a 	sub	r2,r16,r6
   13338:	89e3c83a 	sub	r17,r17,r7
   1333c:	8087803a 	cmpltu	r3,r16,r2
   13340:	88efc83a 	sub	r23,r17,r3
   13344:	b807883a 	mov	r3,r23
   13348:	00003f06 	br	13448 <__umoddi3+0x27c>
   1334c:	3000041e 	bne	r6,zero,13360 <__umoddi3+0x194>
   13350:	01000044 	movi	r4,1
   13354:	000b883a 	mov	r5,zero
   13358:	00046500 	call	4650 <__udivsi3>
   1335c:	1027883a 	mov	r19,r2
   13360:	00bfffd4 	movui	r2,65535
   13364:	14c04f2e 	bgeu	r2,r19,134a4 <__umoddi3+0x2d8>
   13368:	00804034 	movhi	r2,256
   1336c:	10bfffc4 	addi	r2,r2,-1
   13370:	14c0e42e 	bgeu	r2,r19,13704 <__umoddi3+0x538>
   13374:	00800604 	movi	r2,24
   13378:	1007883a 	mov	r3,r2
   1337c:	9884d83a 	srl	r2,r19,r2
   13380:	010000b4 	movhi	r4,2
   13384:	2102d204 	addi	r4,r4,2888
   13388:	2085883a 	add	r2,r4,r2
   1338c:	11000003 	ldbu	r4,0(r2)
   13390:	00800804 	movi	r2,32
   13394:	20c7883a 	add	r3,r4,r3
   13398:	10c5c83a 	sub	r2,r2,r3
   1339c:	10009a1e 	bne	r2,zero,13608 <__umoddi3+0x43c>
   133a0:	982cd43a 	srli	r22,r19,16
   133a4:	8ce3c83a 	sub	r17,r17,r19
   133a8:	9c3fffcc 	andi	r16,r19,65535
   133ac:	0025883a 	mov	r18,zero
   133b0:	8809883a 	mov	r4,r17
   133b4:	b00b883a 	mov	r5,r22
   133b8:	00046580 	call	4658 <__umodsi3>
   133bc:	8809883a 	mov	r4,r17
   133c0:	b00b883a 	mov	r5,r22
   133c4:	102b883a 	mov	r21,r2
   133c8:	00046500 	call	4650 <__udivsi3>
   133cc:	a806943a 	slli	r3,r21,16
   133d0:	a008d43a 	srli	r4,r20,16
   133d4:	1405383a 	mul	r2,r2,r16
   133d8:	190cb03a 	or	r6,r3,r4
   133dc:	3080032e 	bgeu	r6,r2,133ec <__umoddi3+0x220>
   133e0:	34cd883a 	add	r6,r6,r19
   133e4:	34c00136 	bltu	r6,r19,133ec <__umoddi3+0x220>
   133e8:	3080d436 	bltu	r6,r2,1373c <__umoddi3+0x570>
   133ec:	30abc83a 	sub	r21,r6,r2
   133f0:	a809883a 	mov	r4,r21
   133f4:	b00b883a 	mov	r5,r22
   133f8:	00046580 	call	4658 <__umodsi3>
   133fc:	1023883a 	mov	r17,r2
   13400:	a809883a 	mov	r4,r21
   13404:	b00b883a 	mov	r5,r22
   13408:	00046500 	call	4650 <__udivsi3>
   1340c:	8822943a 	slli	r17,r17,16
   13410:	1405383a 	mul	r2,r2,r16
   13414:	a13fffcc 	andi	r4,r20,65535
   13418:	8906b03a 	or	r3,r17,r4
   1341c:	1880042e 	bgeu	r3,r2,13430 <__umoddi3+0x264>
   13420:	1cc7883a 	add	r3,r3,r19
   13424:	1cc00236 	bltu	r3,r19,13430 <__umoddi3+0x264>
   13428:	1880012e 	bgeu	r3,r2,13430 <__umoddi3+0x264>
   1342c:	1cc7883a 	add	r3,r3,r19
   13430:	1887c83a 	sub	r3,r3,r2
   13434:	1c84d83a 	srl	r2,r3,r18
   13438:	0007883a 	mov	r3,zero
   1343c:	00000206 	br	13448 <__umoddi3+0x27c>
   13440:	2005883a 	mov	r2,r4
   13444:	2807883a 	mov	r3,r5
   13448:	dfc00b17 	ldw	ra,44(sp)
   1344c:	df000a17 	ldw	fp,40(sp)
   13450:	ddc00917 	ldw	r23,36(sp)
   13454:	dd800817 	ldw	r22,32(sp)
   13458:	dd400717 	ldw	r21,28(sp)
   1345c:	dd000617 	ldw	r20,24(sp)
   13460:	dcc00517 	ldw	r19,20(sp)
   13464:	dc800417 	ldw	r18,16(sp)
   13468:	dc400317 	ldw	r17,12(sp)
   1346c:	dc000217 	ldw	r16,8(sp)
   13470:	dec00c04 	addi	sp,sp,48
   13474:	f800283a 	ret
   13478:	00803fc4 	movi	r2,255
   1347c:	11c0952e 	bgeu	r2,r7,136d4 <__umoddi3+0x508>
   13480:	01400204 	movi	r5,8
   13484:	282b883a 	mov	r21,r5
   13488:	003f9f06 	br	13308 <__alt_mem_Flash_flash_data+0xf4013308>
   1348c:	00804034 	movhi	r2,256
   13490:	10bfffc4 	addi	r2,r2,-1
   13494:	1180952e 	bgeu	r2,r6,136ec <__umoddi3+0x520>
   13498:	01400604 	movi	r5,24
   1349c:	2805883a 	mov	r2,r5
   134a0:	003f6206 	br	1322c <__alt_mem_Flash_flash_data+0xf401322c>
   134a4:	00803fc4 	movi	r2,255
   134a8:	14c0932e 	bgeu	r2,r19,136f8 <__umoddi3+0x52c>
   134ac:	00800204 	movi	r2,8
   134b0:	1007883a 	mov	r3,r2
   134b4:	003fb106 	br	1337c <__alt_mem_Flash_flash_data+0xf401337c>
   134b8:	3548d83a 	srl	r4,r6,r21
   134bc:	3d0e983a 	sll	r7,r7,r20
   134c0:	8d10983a 	sll	r8,r17,r20
   134c4:	8d6cd83a 	srl	r22,r17,r21
   134c8:	3922b03a 	or	r17,r7,r4
   134cc:	882ed43a 	srli	r23,r17,16
   134d0:	8564d83a 	srl	r18,r16,r21
   134d4:	b009883a 	mov	r4,r22
   134d8:	b80b883a 	mov	r5,r23
   134dc:	44a4b03a 	or	r18,r8,r18
   134e0:	3526983a 	sll	r19,r6,r20
   134e4:	00046580 	call	4658 <__umodsi3>
   134e8:	b009883a 	mov	r4,r22
   134ec:	b80b883a 	mov	r5,r23
   134f0:	1039883a 	mov	fp,r2
   134f4:	00046500 	call	4650 <__udivsi3>
   134f8:	102d883a 	mov	r22,r2
   134fc:	8a3fffcc 	andi	r8,r17,65535
   13500:	e004943a 	slli	r2,fp,16
   13504:	900cd43a 	srli	r6,r18,16
   13508:	b239383a 	mul	fp,r22,r8
   1350c:	8520983a 	sll	r16,r16,r20
   13510:	118ab03a 	or	r5,r2,r6
   13514:	2f00042e 	bgeu	r5,fp,13528 <__umoddi3+0x35c>
   13518:	2c4b883a 	add	r5,r5,r17
   1351c:	b0bfffc4 	addi	r2,r22,-1
   13520:	2c40822e 	bgeu	r5,r17,1372c <__umoddi3+0x560>
   13524:	102d883a 	mov	r22,r2
   13528:	2f39c83a 	sub	fp,r5,fp
   1352c:	e009883a 	mov	r4,fp
   13530:	b80b883a 	mov	r5,r23
   13534:	da000115 	stw	r8,4(sp)
   13538:	00046580 	call	4658 <__umodsi3>
   1353c:	e009883a 	mov	r4,fp
   13540:	b80b883a 	mov	r5,r23
   13544:	d8800015 	stw	r2,0(sp)
   13548:	00046500 	call	4650 <__udivsi3>
   1354c:	d9800017 	ldw	r6,0(sp)
   13550:	da000117 	ldw	r8,4(sp)
   13554:	94bfffcc 	andi	r18,r18,65535
   13558:	300c943a 	slli	r6,r6,16
   1355c:	1209383a 	mul	r4,r2,r8
   13560:	3490b03a 	or	r8,r6,r18
   13564:	4100042e 	bgeu	r8,r4,13578 <__umoddi3+0x3ac>
   13568:	4451883a 	add	r8,r8,r17
   1356c:	10ffffc4 	addi	r3,r2,-1
   13570:	44406a2e 	bgeu	r8,r17,1371c <__umoddi3+0x550>
   13574:	1805883a 	mov	r2,r3
   13578:	b012943a 	slli	r9,r22,16
   1357c:	9abfffcc 	andi	r10,r19,65535
   13580:	980ed43a 	srli	r7,r19,16
   13584:	124ab03a 	or	r5,r2,r9
   13588:	2a7fffcc 	andi	r9,r5,65535
   1358c:	280ad43a 	srli	r5,r5,16
   13590:	4a8d383a 	mul	r6,r9,r10
   13594:	49d3383a 	mul	r9,r9,r7
   13598:	2a95383a 	mul	r10,r5,r10
   1359c:	3004d43a 	srli	r2,r6,16
   135a0:	4111c83a 	sub	r8,r8,r4
   135a4:	5253883a 	add	r9,r10,r9
   135a8:	4893883a 	add	r9,r9,r2
   135ac:	29cb383a 	mul	r5,r5,r7
   135b0:	4a80022e 	bgeu	r9,r10,135bc <__umoddi3+0x3f0>
   135b4:	00800074 	movhi	r2,1
   135b8:	288b883a 	add	r5,r5,r2
   135bc:	4808d43a 	srli	r4,r9,16
   135c0:	4812943a 	slli	r9,r9,16
   135c4:	31bfffcc 	andi	r6,r6,65535
   135c8:	290b883a 	add	r5,r5,r4
   135cc:	498d883a 	add	r6,r9,r6
   135d0:	41403a36 	bltu	r8,r5,136bc <__umoddi3+0x4f0>
   135d4:	41405d26 	beq	r8,r5,1374c <__umoddi3+0x580>
   135d8:	4149c83a 	sub	r4,r8,r5
   135dc:	300f883a 	mov	r7,r6
   135e0:	81cfc83a 	sub	r7,r16,r7
   135e4:	81c7803a 	cmpltu	r3,r16,r7
   135e8:	20c7c83a 	sub	r3,r4,r3
   135ec:	1d44983a 	sll	r2,r3,r21
   135f0:	3d0ed83a 	srl	r7,r7,r20
   135f4:	1d06d83a 	srl	r3,r3,r20
   135f8:	11c4b03a 	or	r2,r2,r7
   135fc:	003f9206 	br	13448 <__alt_mem_Flash_flash_data+0xf4013448>
   13600:	0025883a 	mov	r18,zero
   13604:	003f1806 	br	13268 <__alt_mem_Flash_flash_data+0xf4013268>
   13608:	98a6983a 	sll	r19,r19,r2
   1360c:	88e8d83a 	srl	r20,r17,r3
   13610:	80c6d83a 	srl	r3,r16,r3
   13614:	982cd43a 	srli	r22,r19,16
   13618:	88a2983a 	sll	r17,r17,r2
   1361c:	a009883a 	mov	r4,r20
   13620:	b00b883a 	mov	r5,r22
   13624:	88eab03a 	or	r21,r17,r3
   13628:	1025883a 	mov	r18,r2
   1362c:	00046580 	call	4658 <__umodsi3>
   13630:	a009883a 	mov	r4,r20
   13634:	b00b883a 	mov	r5,r22
   13638:	1023883a 	mov	r17,r2
   1363c:	00046500 	call	4650 <__udivsi3>
   13640:	9f3fffcc 	andi	fp,r19,65535
   13644:	8822943a 	slli	r17,r17,16
   13648:	a80ad43a 	srli	r5,r21,16
   1364c:	1705383a 	mul	r2,r2,fp
   13650:	84a8983a 	sll	r20,r16,r18
   13654:	8948b03a 	or	r4,r17,r5
   13658:	2080042e 	bgeu	r4,r2,1366c <__umoddi3+0x4a0>
   1365c:	24c9883a 	add	r4,r4,r19
   13660:	24c00236 	bltu	r4,r19,1366c <__umoddi3+0x4a0>
   13664:	2080012e 	bgeu	r4,r2,1366c <__umoddi3+0x4a0>
   13668:	24c9883a 	add	r4,r4,r19
   1366c:	20afc83a 	sub	r23,r4,r2
   13670:	b809883a 	mov	r4,r23
   13674:	b00b883a 	mov	r5,r22
   13678:	00046580 	call	4658 <__umodsi3>
   1367c:	1023883a 	mov	r17,r2
   13680:	b809883a 	mov	r4,r23
   13684:	b00b883a 	mov	r5,r22
   13688:	00046500 	call	4650 <__udivsi3>
   1368c:	8822943a 	slli	r17,r17,16
   13690:	1705383a 	mul	r2,r2,fp
   13694:	a93fffcc 	andi	r4,r21,65535
   13698:	8908b03a 	or	r4,r17,r4
   1369c:	2080042e 	bgeu	r4,r2,136b0 <__umoddi3+0x4e4>
   136a0:	24c9883a 	add	r4,r4,r19
   136a4:	24c00236 	bltu	r4,r19,136b0 <__umoddi3+0x4e4>
   136a8:	2080012e 	bgeu	r4,r2,136b0 <__umoddi3+0x4e4>
   136ac:	24c9883a 	add	r4,r4,r19
   136b0:	20a3c83a 	sub	r17,r4,r2
   136b4:	e021883a 	mov	r16,fp
   136b8:	003f3d06 	br	133b0 <__alt_mem_Flash_flash_data+0xf40133b0>
   136bc:	34cfc83a 	sub	r7,r6,r19
   136c0:	2c4bc83a 	sub	r5,r5,r17
   136c4:	31cd803a 	cmpltu	r6,r6,r7
   136c8:	298dc83a 	sub	r6,r5,r6
   136cc:	4189c83a 	sub	r4,r8,r6
   136d0:	003fc306 	br	135e0 <__alt_mem_Flash_flash_data+0xf40135e0>
   136d4:	000b883a 	mov	r5,zero
   136d8:	002b883a 	mov	r21,zero
   136dc:	003f0a06 	br	13308 <__alt_mem_Flash_flash_data+0xf4013308>
   136e0:	01400404 	movi	r5,16
   136e4:	282b883a 	mov	r21,r5
   136e8:	003f0706 	br	13308 <__alt_mem_Flash_flash_data+0xf4013308>
   136ec:	01400404 	movi	r5,16
   136f0:	2805883a 	mov	r2,r5
   136f4:	003ecd06 	br	1322c <__alt_mem_Flash_flash_data+0xf401322c>
   136f8:	0005883a 	mov	r2,zero
   136fc:	0007883a 	mov	r3,zero
   13700:	003f1e06 	br	1337c <__alt_mem_Flash_flash_data+0xf401337c>
   13704:	00800404 	movi	r2,16
   13708:	1007883a 	mov	r3,r2
   1370c:	003f1b06 	br	1337c <__alt_mem_Flash_flash_data+0xf401337c>
   13710:	000b883a 	mov	r5,zero
   13714:	0005883a 	mov	r2,zero
   13718:	003ec406 	br	1322c <__alt_mem_Flash_flash_data+0xf401322c>
   1371c:	413f952e 	bgeu	r8,r4,13574 <__alt_mem_Flash_flash_data+0xf4013574>
   13720:	10bfff84 	addi	r2,r2,-2
   13724:	4451883a 	add	r8,r8,r17
   13728:	003f9306 	br	13578 <__alt_mem_Flash_flash_data+0xf4013578>
   1372c:	2f3f7d2e 	bgeu	r5,fp,13524 <__alt_mem_Flash_flash_data+0xf4013524>
   13730:	b5bfff84 	addi	r22,r22,-2
   13734:	2c4b883a 	add	r5,r5,r17
   13738:	003f7b06 	br	13528 <__alt_mem_Flash_flash_data+0xf4013528>
   1373c:	34cd883a 	add	r6,r6,r19
   13740:	003f2a06 	br	133ec <__alt_mem_Flash_flash_data+0xf40133ec>
   13744:	8005883a 	mov	r2,r16
   13748:	003efe06 	br	13344 <__alt_mem_Flash_flash_data+0xf4013344>
   1374c:	81bfdb36 	bltu	r16,r6,136bc <__alt_mem_Flash_flash_data+0xf40136bc>
   13750:	300f883a 	mov	r7,r6
   13754:	0009883a 	mov	r4,zero
   13758:	003fa106 	br	135e0 <__alt_mem_Flash_flash_data+0xf40135e0>

0001375c <__divdf3>:
   1375c:	defff204 	addi	sp,sp,-56
   13760:	dd000815 	stw	r20,32(sp)
   13764:	2828d53a 	srli	r20,r5,20
   13768:	dd800a15 	stw	r22,40(sp)
   1376c:	282cd7fa 	srli	r22,r5,31
   13770:	dc000415 	stw	r16,16(sp)
   13774:	04000434 	movhi	r16,16
   13778:	df000c15 	stw	fp,48(sp)
   1377c:	dcc00715 	stw	r19,28(sp)
   13780:	dc800615 	stw	r18,24(sp)
   13784:	dc400515 	stw	r17,20(sp)
   13788:	843fffc4 	addi	r16,r16,-1
   1378c:	dfc00d15 	stw	ra,52(sp)
   13790:	ddc00b15 	stw	r23,44(sp)
   13794:	dd400915 	stw	r21,36(sp)
   13798:	a501ffcc 	andi	r20,r20,2047
   1379c:	2025883a 	mov	r18,r4
   137a0:	2027883a 	mov	r19,r4
   137a4:	2c22703a 	and	r17,r5,r16
   137a8:	b7003fcc 	andi	fp,r22,255
   137ac:	a0005e26 	beq	r20,zero,13928 <__divdf3+0x1cc>
   137b0:	0081ffc4 	movi	r2,2047
   137b4:	a0803526 	beq	r20,r2,1388c <__divdf3+0x130>
   137b8:	8c000434 	orhi	r16,r17,16
   137bc:	2004d77a 	srli	r2,r4,29
   137c0:	802090fa 	slli	r16,r16,3
   137c4:	202690fa 	slli	r19,r4,3
   137c8:	a53f0044 	addi	r20,r20,-1023
   137cc:	80a2b03a 	or	r17,r16,r2
   137d0:	0025883a 	mov	r18,zero
   137d4:	0011883a 	mov	r8,zero
   137d8:	380ad53a 	srli	r5,r7,20
   137dc:	382ed7fa 	srli	r23,r7,31
   137e0:	04000434 	movhi	r16,16
   137e4:	843fffc4 	addi	r16,r16,-1
   137e8:	2941ffcc 	andi	r5,r5,2047
   137ec:	302b883a 	mov	r21,r6
   137f0:	3c20703a 	and	r16,r7,r16
   137f4:	ba403fcc 	andi	r9,r23,255
   137f8:	28006726 	beq	r5,zero,13998 <__divdf3+0x23c>
   137fc:	0081ffc4 	movi	r2,2047
   13800:	28805f26 	beq	r5,r2,13980 <__divdf3+0x224>
   13804:	84000434 	orhi	r16,r16,16
   13808:	3004d77a 	srli	r2,r6,29
   1380c:	802090fa 	slli	r16,r16,3
   13810:	302a90fa 	slli	r21,r6,3
   13814:	297f0044 	addi	r5,r5,-1023
   13818:	80a0b03a 	or	r16,r16,r2
   1381c:	000f883a 	mov	r7,zero
   13820:	3c86b03a 	or	r3,r7,r18
   13824:	180690ba 	slli	r3,r3,2
   13828:	00800074 	movhi	r2,1
   1382c:	108e1304 	addi	r2,r2,14412
   13830:	1887883a 	add	r3,r3,r2
   13834:	18c00017 	ldw	r3,0(r3)
   13838:	b5c8f03a 	xor	r4,r22,r23
   1383c:	200d883a 	mov	r6,r4
   13840:	24803fcc 	andi	r18,r4,255
   13844:	a169c83a 	sub	r20,r20,r5
   13848:	1800683a 	jmp	r3
   1384c:	00013a94 	movui	zero,1258
   13850:	000138c4 	movi	zero,1251
   13854:	00013a58 	cmpnei	zero,zero,1257
   13858:	000138a8 	cmpgeui	zero,zero,1250
   1385c:	00013a58 	cmpnei	zero,zero,1257
   13860:	00013a2c 	andhi	zero,zero,1256
   13864:	00013a58 	cmpnei	zero,zero,1257
   13868:	000138a8 	cmpgeui	zero,zero,1250
   1386c:	000138c4 	movi	zero,1251
   13870:	000138c4 	movi	zero,1251
   13874:	00013a2c 	andhi	zero,zero,1256
   13878:	000138a8 	cmpgeui	zero,zero,1250
   1387c:	000138b8 	rdprs	zero,zero,1250
   13880:	000138b8 	rdprs	zero,zero,1250
   13884:	000138b8 	rdprs	zero,zero,1250
   13888:	00013a68 	cmpgeui	zero,zero,1257
   1388c:	8904b03a 	or	r2,r17,r4
   13890:	1000631e 	bne	r2,zero,13a20 <__divdf3+0x2c4>
   13894:	04800204 	movi	r18,8
   13898:	0023883a 	mov	r17,zero
   1389c:	0027883a 	mov	r19,zero
   138a0:	02000084 	movi	r8,2
   138a4:	003fcc06 	br	137d8 <__alt_mem_Flash_flash_data+0xf40137d8>
   138a8:	8023883a 	mov	r17,r16
   138ac:	a827883a 	mov	r19,r21
   138b0:	4839883a 	mov	fp,r9
   138b4:	3811883a 	mov	r8,r7
   138b8:	00800084 	movi	r2,2
   138bc:	40812a1e 	bne	r8,r2,13d68 <__divdf3+0x60c>
   138c0:	e025883a 	mov	r18,fp
   138c4:	9180004c 	andi	r6,r18,1
   138c8:	0101ffc4 	movi	r4,2047
   138cc:	000b883a 	mov	r5,zero
   138d0:	0027883a 	mov	r19,zero
   138d4:	2008953a 	slli	r4,r4,20
   138d8:	30c03fcc 	andi	r3,r6,255
   138dc:	04000434 	movhi	r16,16
   138e0:	180697fa 	slli	r3,r3,31
   138e4:	843fffc4 	addi	r16,r16,-1
   138e8:	2c20703a 	and	r16,r5,r16
   138ec:	8120b03a 	or	r16,r16,r4
   138f0:	80c6b03a 	or	r3,r16,r3
   138f4:	9805883a 	mov	r2,r19
   138f8:	dfc00d17 	ldw	ra,52(sp)
   138fc:	df000c17 	ldw	fp,48(sp)
   13900:	ddc00b17 	ldw	r23,44(sp)
   13904:	dd800a17 	ldw	r22,40(sp)
   13908:	dd400917 	ldw	r21,36(sp)
   1390c:	dd000817 	ldw	r20,32(sp)
   13910:	dcc00717 	ldw	r19,28(sp)
   13914:	dc800617 	ldw	r18,24(sp)
   13918:	dc400517 	ldw	r17,20(sp)
   1391c:	dc000417 	ldw	r16,16(sp)
   13920:	dec00e04 	addi	sp,sp,56
   13924:	f800283a 	ret
   13928:	8904b03a 	or	r2,r17,r4
   1392c:	10003726 	beq	r2,zero,13a0c <__divdf3+0x2b0>
   13930:	88011c26 	beq	r17,zero,13da4 <__divdf3+0x648>
   13934:	8809883a 	mov	r4,r17
   13938:	d9800315 	stw	r6,12(sp)
   1393c:	d9c00115 	stw	r7,4(sp)
   13940:	00067e40 	call	67e4 <__clzsi2>
   13944:	d9800317 	ldw	r6,12(sp)
   13948:	d9c00117 	ldw	r7,4(sp)
   1394c:	1007883a 	mov	r3,r2
   13950:	01000a04 	movi	r4,40
   13954:	1cfffe04 	addi	r19,r3,-8
   13958:	20c9c83a 	sub	r4,r4,r3
   1395c:	8cca983a 	sll	r5,r17,r19
   13960:	9108d83a 	srl	r4,r18,r4
   13964:	94e6983a 	sll	r19,r18,r19
   13968:	2162b03a 	or	r17,r4,r5
   1396c:	053f0344 	movi	r20,-1011
   13970:	a0e9c83a 	sub	r20,r20,r3
   13974:	0025883a 	mov	r18,zero
   13978:	0011883a 	mov	r8,zero
   1397c:	003f9606 	br	137d8 <__alt_mem_Flash_flash_data+0xf40137d8>
   13980:	8184b03a 	or	r2,r16,r6
   13984:	10001f1e 	bne	r2,zero,13a04 <__divdf3+0x2a8>
   13988:	0021883a 	mov	r16,zero
   1398c:	002b883a 	mov	r21,zero
   13990:	01c00084 	movi	r7,2
   13994:	003fa206 	br	13820 <__alt_mem_Flash_flash_data+0xf4013820>
   13998:	8184b03a 	or	r2,r16,r6
   1399c:	10001526 	beq	r2,zero,139f4 <__divdf3+0x298>
   139a0:	80010c26 	beq	r16,zero,13dd4 <__divdf3+0x678>
   139a4:	8009883a 	mov	r4,r16
   139a8:	d9800315 	stw	r6,12(sp)
   139ac:	da000215 	stw	r8,8(sp)
   139b0:	da400015 	stw	r9,0(sp)
   139b4:	00067e40 	call	67e4 <__clzsi2>
   139b8:	d9800317 	ldw	r6,12(sp)
   139bc:	da000217 	ldw	r8,8(sp)
   139c0:	da400017 	ldw	r9,0(sp)
   139c4:	1007883a 	mov	r3,r2
   139c8:	01000a04 	movi	r4,40
   139cc:	1d7ffe04 	addi	r21,r3,-8
   139d0:	20c9c83a 	sub	r4,r4,r3
   139d4:	8560983a 	sll	r16,r16,r21
   139d8:	3108d83a 	srl	r4,r6,r4
   139dc:	356a983a 	sll	r21,r6,r21
   139e0:	2420b03a 	or	r16,r4,r16
   139e4:	017f0344 	movi	r5,-1011
   139e8:	28cbc83a 	sub	r5,r5,r3
   139ec:	000f883a 	mov	r7,zero
   139f0:	003f8b06 	br	13820 <__alt_mem_Flash_flash_data+0xf4013820>
   139f4:	0021883a 	mov	r16,zero
   139f8:	002b883a 	mov	r21,zero
   139fc:	01c00044 	movi	r7,1
   13a00:	003f8706 	br	13820 <__alt_mem_Flash_flash_data+0xf4013820>
   13a04:	01c000c4 	movi	r7,3
   13a08:	003f8506 	br	13820 <__alt_mem_Flash_flash_data+0xf4013820>
   13a0c:	04800104 	movi	r18,4
   13a10:	0023883a 	mov	r17,zero
   13a14:	0027883a 	mov	r19,zero
   13a18:	02000044 	movi	r8,1
   13a1c:	003f6e06 	br	137d8 <__alt_mem_Flash_flash_data+0xf40137d8>
   13a20:	04800304 	movi	r18,12
   13a24:	020000c4 	movi	r8,3
   13a28:	003f6b06 	br	137d8 <__alt_mem_Flash_flash_data+0xf40137d8>
   13a2c:	01400434 	movhi	r5,16
   13a30:	000d883a 	mov	r6,zero
   13a34:	297fffc4 	addi	r5,r5,-1
   13a38:	04ffffc4 	movi	r19,-1
   13a3c:	0101ffc4 	movi	r4,2047
   13a40:	003fa406 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13a44:	043f0084 	movi	r16,-1022
   13a48:	8521c83a 	sub	r16,r16,r20
   13a4c:	00800e04 	movi	r2,56
   13a50:	1401200e 	bge	r2,r16,13ed4 <__divdf3+0x778>
   13a54:	9180004c 	andi	r6,r18,1
   13a58:	0009883a 	mov	r4,zero
   13a5c:	000b883a 	mov	r5,zero
   13a60:	0027883a 	mov	r19,zero
   13a64:	003f9b06 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13a68:	8880022c 	andhi	r2,r17,8
   13a6c:	1000c726 	beq	r2,zero,13d8c <__divdf3+0x630>
   13a70:	8080022c 	andhi	r2,r16,8
   13a74:	1000c51e 	bne	r2,zero,13d8c <__divdf3+0x630>
   13a78:	00800434 	movhi	r2,16
   13a7c:	81400234 	orhi	r5,r16,8
   13a80:	10bfffc4 	addi	r2,r2,-1
   13a84:	b80d883a 	mov	r6,r23
   13a88:	288a703a 	and	r5,r5,r2
   13a8c:	a827883a 	mov	r19,r21
   13a90:	003fea06 	br	13a3c <__alt_mem_Flash_flash_data+0xf4013a3c>
   13a94:	8440ea36 	bltu	r16,r17,13e40 <__divdf3+0x6e4>
   13a98:	8c00e826 	beq	r17,r16,13e3c <__divdf3+0x6e0>
   13a9c:	a53fffc4 	addi	r20,r20,-1
   13aa0:	882d883a 	mov	r22,r17
   13aa4:	000d883a 	mov	r6,zero
   13aa8:	a804d63a 	srli	r2,r21,24
   13aac:	8020923a 	slli	r16,r16,8
   13ab0:	b009883a 	mov	r4,r22
   13ab4:	d9800315 	stw	r6,12(sp)
   13ab8:	1420b03a 	or	r16,r2,r16
   13abc:	802ed43a 	srli	r23,r16,16
   13ac0:	873fffcc 	andi	fp,r16,65535
   13ac4:	a82a923a 	slli	r21,r21,8
   13ac8:	b80b883a 	mov	r5,r23
   13acc:	00046500 	call	4650 <__udivsi3>
   13ad0:	b009883a 	mov	r4,r22
   13ad4:	b80b883a 	mov	r5,r23
   13ad8:	1023883a 	mov	r17,r2
   13adc:	00046580 	call	4658 <__umodsi3>
   13ae0:	1004943a 	slli	r2,r2,16
   13ae4:	9808d43a 	srli	r4,r19,16
   13ae8:	8f2d383a 	mul	r22,r17,fp
   13aec:	d9800317 	ldw	r6,12(sp)
   13af0:	1106b03a 	or	r3,r2,r4
   13af4:	1d80062e 	bgeu	r3,r22,13b10 <__divdf3+0x3b4>
   13af8:	1c07883a 	add	r3,r3,r16
   13afc:	88bfffc4 	addi	r2,r17,-1
   13b00:	1c00dc36 	bltu	r3,r16,13e74 <__divdf3+0x718>
   13b04:	1d80db2e 	bgeu	r3,r22,13e74 <__divdf3+0x718>
   13b08:	8c7fff84 	addi	r17,r17,-2
   13b0c:	1c07883a 	add	r3,r3,r16
   13b10:	1dadc83a 	sub	r22,r3,r22
   13b14:	b009883a 	mov	r4,r22
   13b18:	b80b883a 	mov	r5,r23
   13b1c:	d9800315 	stw	r6,12(sp)
   13b20:	00046500 	call	4650 <__udivsi3>
   13b24:	b009883a 	mov	r4,r22
   13b28:	b80b883a 	mov	r5,r23
   13b2c:	d8800015 	stw	r2,0(sp)
   13b30:	00046580 	call	4658 <__umodsi3>
   13b34:	da400017 	ldw	r9,0(sp)
   13b38:	1004943a 	slli	r2,r2,16
   13b3c:	9cffffcc 	andi	r19,r19,65535
   13b40:	4f07383a 	mul	r3,r9,fp
   13b44:	14c8b03a 	or	r4,r2,r19
   13b48:	d9800317 	ldw	r6,12(sp)
   13b4c:	20c0062e 	bgeu	r4,r3,13b68 <__divdf3+0x40c>
   13b50:	2409883a 	add	r4,r4,r16
   13b54:	48bfffc4 	addi	r2,r9,-1
   13b58:	2400c436 	bltu	r4,r16,13e6c <__divdf3+0x710>
   13b5c:	20c0c32e 	bgeu	r4,r3,13e6c <__divdf3+0x710>
   13b60:	4a7fff84 	addi	r9,r9,-2
   13b64:	2409883a 	add	r4,r4,r16
   13b68:	8822943a 	slli	r17,r17,16
   13b6c:	a80ed43a 	srli	r7,r21,16
   13b70:	aa3fffcc 	andi	r8,r21,65535
   13b74:	4c62b03a 	or	r17,r9,r17
   13b78:	8816d43a 	srli	r11,r17,16
   13b7c:	897fffcc 	andi	r5,r17,65535
   13b80:	2a15383a 	mul	r10,r5,r8
   13b84:	5a19383a 	mul	r12,r11,r8
   13b88:	29cb383a 	mul	r5,r5,r7
   13b8c:	5012d43a 	srli	r9,r10,16
   13b90:	20c5c83a 	sub	r2,r4,r3
   13b94:	614b883a 	add	r5,r12,r5
   13b98:	2a4b883a 	add	r5,r5,r9
   13b9c:	59c7383a 	mul	r3,r11,r7
   13ba0:	2b00022e 	bgeu	r5,r12,13bac <__divdf3+0x450>
   13ba4:	01000074 	movhi	r4,1
   13ba8:	1907883a 	add	r3,r3,r4
   13bac:	2808d43a 	srli	r4,r5,16
   13bb0:	280a943a 	slli	r5,r5,16
   13bb4:	54ffffcc 	andi	r19,r10,65535
   13bb8:	1907883a 	add	r3,r3,r4
   13bbc:	2ccb883a 	add	r5,r5,r19
   13bc0:	10c09336 	bltu	r2,r3,13e10 <__divdf3+0x6b4>
   13bc4:	10c0ad26 	beq	r2,r3,13e7c <__divdf3+0x720>
   13bc8:	10c7c83a 	sub	r3,r2,r3
   13bcc:	3167c83a 	sub	r19,r6,r5
   13bd0:	34ed803a 	cmpltu	r22,r6,r19
   13bd4:	1dadc83a 	sub	r22,r3,r22
   13bd8:	b400b226 	beq	r22,r16,13ea4 <__divdf3+0x748>
   13bdc:	b009883a 	mov	r4,r22
   13be0:	b80b883a 	mov	r5,r23
   13be4:	d9c00115 	stw	r7,4(sp)
   13be8:	da000215 	stw	r8,8(sp)
   13bec:	00046500 	call	4650 <__udivsi3>
   13bf0:	b009883a 	mov	r4,r22
   13bf4:	b80b883a 	mov	r5,r23
   13bf8:	d8800315 	stw	r2,12(sp)
   13bfc:	00046580 	call	4658 <__umodsi3>
   13c00:	d9800317 	ldw	r6,12(sp)
   13c04:	1004943a 	slli	r2,r2,16
   13c08:	9808d43a 	srli	r4,r19,16
   13c0c:	372d383a 	mul	r22,r6,fp
   13c10:	d9c00117 	ldw	r7,4(sp)
   13c14:	1106b03a 	or	r3,r2,r4
   13c18:	da000217 	ldw	r8,8(sp)
   13c1c:	1d80062e 	bgeu	r3,r22,13c38 <__divdf3+0x4dc>
   13c20:	1c07883a 	add	r3,r3,r16
   13c24:	30bfffc4 	addi	r2,r6,-1
   13c28:	1c00a036 	bltu	r3,r16,13eac <__divdf3+0x750>
   13c2c:	1d809f2e 	bgeu	r3,r22,13eac <__divdf3+0x750>
   13c30:	31bfff84 	addi	r6,r6,-2
   13c34:	1c07883a 	add	r3,r3,r16
   13c38:	1dadc83a 	sub	r22,r3,r22
   13c3c:	b009883a 	mov	r4,r22
   13c40:	b80b883a 	mov	r5,r23
   13c44:	d9800315 	stw	r6,12(sp)
   13c48:	d9c00115 	stw	r7,4(sp)
   13c4c:	da000215 	stw	r8,8(sp)
   13c50:	00046500 	call	4650 <__udivsi3>
   13c54:	b009883a 	mov	r4,r22
   13c58:	b80b883a 	mov	r5,r23
   13c5c:	d8800015 	stw	r2,0(sp)
   13c60:	00046580 	call	4658 <__umodsi3>
   13c64:	da400017 	ldw	r9,0(sp)
   13c68:	1004943a 	slli	r2,r2,16
   13c6c:	993fffcc 	andi	r4,r19,65535
   13c70:	4f39383a 	mul	fp,r9,fp
   13c74:	1106b03a 	or	r3,r2,r4
   13c78:	d9800317 	ldw	r6,12(sp)
   13c7c:	d9c00117 	ldw	r7,4(sp)
   13c80:	da000217 	ldw	r8,8(sp)
   13c84:	1f00062e 	bgeu	r3,fp,13ca0 <__divdf3+0x544>
   13c88:	1c07883a 	add	r3,r3,r16
   13c8c:	48bfffc4 	addi	r2,r9,-1
   13c90:	1c008836 	bltu	r3,r16,13eb4 <__divdf3+0x758>
   13c94:	1f00872e 	bgeu	r3,fp,13eb4 <__divdf3+0x758>
   13c98:	4a7fff84 	addi	r9,r9,-2
   13c9c:	1c07883a 	add	r3,r3,r16
   13ca0:	3008943a 	slli	r4,r6,16
   13ca4:	1f07c83a 	sub	r3,r3,fp
   13ca8:	4926b03a 	or	r19,r9,r4
   13cac:	993fffcc 	andi	r4,r19,65535
   13cb0:	980cd43a 	srli	r6,r19,16
   13cb4:	220b383a 	mul	r5,r4,r8
   13cb8:	21c5383a 	mul	r2,r4,r7
   13cbc:	3211383a 	mul	r8,r6,r8
   13cc0:	2808d43a 	srli	r4,r5,16
   13cc4:	31cf383a 	mul	r7,r6,r7
   13cc8:	4085883a 	add	r2,r8,r2
   13ccc:	1105883a 	add	r2,r2,r4
   13cd0:	1200022e 	bgeu	r2,r8,13cdc <__divdf3+0x580>
   13cd4:	01000074 	movhi	r4,1
   13cd8:	390f883a 	add	r7,r7,r4
   13cdc:	1008d43a 	srli	r4,r2,16
   13ce0:	1004943a 	slli	r2,r2,16
   13ce4:	297fffcc 	andi	r5,r5,65535
   13ce8:	390f883a 	add	r7,r7,r4
   13cec:	1145883a 	add	r2,r2,r5
   13cf0:	19c06536 	bltu	r3,r7,13e88 <__divdf3+0x72c>
   13cf4:	19c09f26 	beq	r3,r7,13f74 <__divdf3+0x818>
   13cf8:	9cc00054 	ori	r19,r19,1
   13cfc:	a100ffc4 	addi	r4,r20,1023
   13d00:	013f500e 	bge	zero,r4,13a44 <__alt_mem_Flash_flash_data+0xf4013a44>
   13d04:	988001cc 	andi	r2,r19,7
   13d08:	10000726 	beq	r2,zero,13d28 <__divdf3+0x5cc>
   13d0c:	98c003cc 	andi	r3,r19,15
   13d10:	00800104 	movi	r2,4
   13d14:	18800426 	beq	r3,r2,13d28 <__divdf3+0x5cc>
   13d18:	9885883a 	add	r2,r19,r2
   13d1c:	14e1803a 	cmpltu	r16,r2,r19
   13d20:	8c23883a 	add	r17,r17,r16
   13d24:	1027883a 	mov	r19,r2
   13d28:	8880402c 	andhi	r2,r17,256
   13d2c:	10000426 	beq	r2,zero,13d40 <__divdf3+0x5e4>
   13d30:	00bfc034 	movhi	r2,65280
   13d34:	10bfffc4 	addi	r2,r2,-1
   13d38:	a1010004 	addi	r4,r20,1024
   13d3c:	88a2703a 	and	r17,r17,r2
   13d40:	0081ff84 	movi	r2,2046
   13d44:	113edf16 	blt	r2,r4,138c4 <__alt_mem_Flash_flash_data+0xf40138c4>
   13d48:	9826d0fa 	srli	r19,r19,3
   13d4c:	8804977a 	slli	r2,r17,29
   13d50:	8820927a 	slli	r16,r17,9
   13d54:	2101ffcc 	andi	r4,r4,2047
   13d58:	14e6b03a 	or	r19,r2,r19
   13d5c:	800ad33a 	srli	r5,r16,12
   13d60:	9180004c 	andi	r6,r18,1
   13d64:	003edb06 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13d68:	008000c4 	movi	r2,3
   13d6c:	4080a826 	beq	r8,r2,14010 <__divdf3+0x8b4>
   13d70:	00800044 	movi	r2,1
   13d74:	4080551e 	bne	r8,r2,13ecc <__divdf3+0x770>
   13d78:	e00d883a 	mov	r6,fp
   13d7c:	0009883a 	mov	r4,zero
   13d80:	000b883a 	mov	r5,zero
   13d84:	0027883a 	mov	r19,zero
   13d88:	003ed206 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13d8c:	00800434 	movhi	r2,16
   13d90:	89400234 	orhi	r5,r17,8
   13d94:	10bfffc4 	addi	r2,r2,-1
   13d98:	b00d883a 	mov	r6,r22
   13d9c:	288a703a 	and	r5,r5,r2
   13da0:	003f2606 	br	13a3c <__alt_mem_Flash_flash_data+0xf4013a3c>
   13da4:	d9800315 	stw	r6,12(sp)
   13da8:	d9c00115 	stw	r7,4(sp)
   13dac:	00067e40 	call	67e4 <__clzsi2>
   13db0:	10c00804 	addi	r3,r2,32
   13db4:	010009c4 	movi	r4,39
   13db8:	d9800317 	ldw	r6,12(sp)
   13dbc:	d9c00117 	ldw	r7,4(sp)
   13dc0:	20fee30e 	bge	r4,r3,13950 <__alt_mem_Flash_flash_data+0xf4013950>
   13dc4:	117ffe04 	addi	r5,r2,-8
   13dc8:	9162983a 	sll	r17,r18,r5
   13dcc:	0027883a 	mov	r19,zero
   13dd0:	003ee606 	br	1396c <__alt_mem_Flash_flash_data+0xf401396c>
   13dd4:	3009883a 	mov	r4,r6
   13dd8:	d9800315 	stw	r6,12(sp)
   13ddc:	da000215 	stw	r8,8(sp)
   13de0:	da400015 	stw	r9,0(sp)
   13de4:	00067e40 	call	67e4 <__clzsi2>
   13de8:	10c00804 	addi	r3,r2,32
   13dec:	010009c4 	movi	r4,39
   13df0:	d9800317 	ldw	r6,12(sp)
   13df4:	da000217 	ldw	r8,8(sp)
   13df8:	da400017 	ldw	r9,0(sp)
   13dfc:	20fef20e 	bge	r4,r3,139c8 <__alt_mem_Flash_flash_data+0xf40139c8>
   13e00:	10bffe04 	addi	r2,r2,-8
   13e04:	a8a0983a 	sll	r16,r21,r2
   13e08:	002b883a 	mov	r21,zero
   13e0c:	003ef506 	br	139e4 <__alt_mem_Flash_flash_data+0xf40139e4>
   13e10:	354d883a 	add	r6,r6,r21
   13e14:	3549803a 	cmpltu	r4,r6,r21
   13e18:	2409883a 	add	r4,r4,r16
   13e1c:	2089883a 	add	r4,r4,r2
   13e20:	88bfffc4 	addi	r2,r17,-1
   13e24:	81000c2e 	bgeu	r16,r4,13e58 <__divdf3+0x6fc>
   13e28:	20c04436 	bltu	r4,r3,13f3c <__divdf3+0x7e0>
   13e2c:	19006f26 	beq	r3,r4,13fec <__divdf3+0x890>
   13e30:	20c7c83a 	sub	r3,r4,r3
   13e34:	1023883a 	mov	r17,r2
   13e38:	003f6406 	br	13bcc <__alt_mem_Flash_flash_data+0xf4013bcc>
   13e3c:	9d7f1736 	bltu	r19,r21,13a9c <__alt_mem_Flash_flash_data+0xf4013a9c>
   13e40:	9806d07a 	srli	r3,r19,1
   13e44:	880497fa 	slli	r2,r17,31
   13e48:	980c97fa 	slli	r6,r19,31
   13e4c:	882cd07a 	srli	r22,r17,1
   13e50:	18a6b03a 	or	r19,r3,r2
   13e54:	003f1406 	br	13aa8 <__alt_mem_Flash_flash_data+0xf4013aa8>
   13e58:	243ff51e 	bne	r4,r16,13e30 <__alt_mem_Flash_flash_data+0xf4013e30>
   13e5c:	357ff22e 	bgeu	r6,r21,13e28 <__alt_mem_Flash_flash_data+0xf4013e28>
   13e60:	80c7c83a 	sub	r3,r16,r3
   13e64:	1023883a 	mov	r17,r2
   13e68:	003f5806 	br	13bcc <__alt_mem_Flash_flash_data+0xf4013bcc>
   13e6c:	1013883a 	mov	r9,r2
   13e70:	003f3d06 	br	13b68 <__alt_mem_Flash_flash_data+0xf4013b68>
   13e74:	1023883a 	mov	r17,r2
   13e78:	003f2506 	br	13b10 <__alt_mem_Flash_flash_data+0xf4013b10>
   13e7c:	317fe436 	bltu	r6,r5,13e10 <__alt_mem_Flash_flash_data+0xf4013e10>
   13e80:	0007883a 	mov	r3,zero
   13e84:	003f5106 	br	13bcc <__alt_mem_Flash_flash_data+0xf4013bcc>
   13e88:	1c07883a 	add	r3,r3,r16
   13e8c:	993fffc4 	addi	r4,r19,-1
   13e90:	1c000a2e 	bgeu	r3,r16,13ebc <__divdf3+0x760>
   13e94:	2027883a 	mov	r19,r4
   13e98:	19ff971e 	bne	r3,r7,13cf8 <__alt_mem_Flash_flash_data+0xf4013cf8>
   13e9c:	a8bf961e 	bne	r21,r2,13cf8 <__alt_mem_Flash_flash_data+0xf4013cf8>
   13ea0:	003f9606 	br	13cfc <__alt_mem_Flash_flash_data+0xf4013cfc>
   13ea4:	04ffffc4 	movi	r19,-1
   13ea8:	003f9406 	br	13cfc <__alt_mem_Flash_flash_data+0xf4013cfc>
   13eac:	100d883a 	mov	r6,r2
   13eb0:	003f6106 	br	13c38 <__alt_mem_Flash_flash_data+0xf4013c38>
   13eb4:	1013883a 	mov	r9,r2
   13eb8:	003f7906 	br	13ca0 <__alt_mem_Flash_flash_data+0xf4013ca0>
   13ebc:	19c02636 	bltu	r3,r7,13f58 <__divdf3+0x7fc>
   13ec0:	38c04d26 	beq	r7,r3,13ff8 <__divdf3+0x89c>
   13ec4:	2027883a 	mov	r19,r4
   13ec8:	003f8b06 	br	13cf8 <__alt_mem_Flash_flash_data+0xf4013cf8>
   13ecc:	e025883a 	mov	r18,fp
   13ed0:	003f8a06 	br	13cfc <__alt_mem_Flash_flash_data+0xf4013cfc>
   13ed4:	008007c4 	movi	r2,31
   13ed8:	14002a16 	blt	r2,r16,13f84 <__divdf3+0x828>
   13edc:	a5010784 	addi	r20,r20,1054
   13ee0:	8d04983a 	sll	r2,r17,r20
   13ee4:	9c06d83a 	srl	r3,r19,r16
   13ee8:	9d28983a 	sll	r20,r19,r20
   13eec:	8c20d83a 	srl	r16,r17,r16
   13ef0:	1886b03a 	or	r3,r3,r2
   13ef4:	a004c03a 	cmpne	r2,r20,zero
   13ef8:	1884b03a 	or	r2,r3,r2
   13efc:	10c001cc 	andi	r3,r2,7
   13f00:	18000726 	beq	r3,zero,13f20 <__divdf3+0x7c4>
   13f04:	110003cc 	andi	r4,r2,15
   13f08:	00c00104 	movi	r3,4
   13f0c:	20c00426 	beq	r4,r3,13f20 <__divdf3+0x7c4>
   13f10:	10c00104 	addi	r3,r2,4
   13f14:	1885803a 	cmpltu	r2,r3,r2
   13f18:	80a1883a 	add	r16,r16,r2
   13f1c:	1805883a 	mov	r2,r3
   13f20:	80c0202c 	andhi	r3,r16,128
   13f24:	18002d26 	beq	r3,zero,13fdc <__divdf3+0x880>
   13f28:	9180004c 	andi	r6,r18,1
   13f2c:	01000044 	movi	r4,1
   13f30:	000b883a 	mov	r5,zero
   13f34:	0027883a 	mov	r19,zero
   13f38:	003e6606 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13f3c:	354d883a 	add	r6,r6,r21
   13f40:	356d803a 	cmpltu	r22,r6,r21
   13f44:	b42d883a 	add	r22,r22,r16
   13f48:	b12d883a 	add	r22,r22,r4
   13f4c:	8c7fff84 	addi	r17,r17,-2
   13f50:	b0c7c83a 	sub	r3,r22,r3
   13f54:	003f1d06 	br	13bcc <__alt_mem_Flash_flash_data+0xf4013bcc>
   13f58:	ad4b883a 	add	r5,r21,r21
   13f5c:	2d6b803a 	cmpltu	r21,r5,r21
   13f60:	ac2b883a 	add	r21,r21,r16
   13f64:	1d47883a 	add	r3,r3,r21
   13f68:	993fff84 	addi	r4,r19,-2
   13f6c:	282b883a 	mov	r21,r5
   13f70:	003fc806 	br	13e94 <__alt_mem_Flash_flash_data+0xf4013e94>
   13f74:	103fc41e 	bne	r2,zero,13e88 <__alt_mem_Flash_flash_data+0xf4013e88>
   13f78:	002b883a 	mov	r21,zero
   13f7c:	a8bf5e1e 	bne	r21,r2,13cf8 <__alt_mem_Flash_flash_data+0xf4013cf8>
   13f80:	003f5e06 	br	13cfc <__alt_mem_Flash_flash_data+0xf4013cfc>
   13f84:	00bef884 	movi	r2,-1054
   13f88:	1505c83a 	sub	r2,r2,r20
   13f8c:	00c00804 	movi	r3,32
   13f90:	8884d83a 	srl	r2,r17,r2
   13f94:	80c01c26 	beq	r16,r3,14008 <__divdf3+0x8ac>
   13f98:	a0c10f84 	addi	r3,r20,1086
   13f9c:	88c6983a 	sll	r3,r17,r3
   13fa0:	1cc6b03a 	or	r3,r3,r19
   13fa4:	1806c03a 	cmpne	r3,r3,zero
   13fa8:	1884b03a 	or	r2,r3,r2
   13fac:	140001cc 	andi	r16,r2,7
   13fb0:	8000061e 	bne	r16,zero,13fcc <__divdf3+0x870>
   13fb4:	000b883a 	mov	r5,zero
   13fb8:	1004d0fa 	srli	r2,r2,3
   13fbc:	9180004c 	andi	r6,r18,1
   13fc0:	0009883a 	mov	r4,zero
   13fc4:	1426b03a 	or	r19,r2,r16
   13fc8:	003e4206 	br	138d4 <__alt_mem_Flash_flash_data+0xf40138d4>
   13fcc:	110003cc 	andi	r4,r2,15
   13fd0:	00c00104 	movi	r3,4
   13fd4:	0021883a 	mov	r16,zero
   13fd8:	20ffcd1e 	bne	r4,r3,13f10 <__alt_mem_Flash_flash_data+0xf4013f10>
   13fdc:	800a927a 	slli	r5,r16,9
   13fe0:	8020977a 	slli	r16,r16,29
   13fe4:	280ad33a 	srli	r5,r5,12
   13fe8:	003ff306 	br	13fb8 <__alt_mem_Flash_flash_data+0xf4013fb8>
   13fec:	317fd336 	bltu	r6,r5,13f3c <__alt_mem_Flash_flash_data+0xf4013f3c>
   13ff0:	1023883a 	mov	r17,r2
   13ff4:	003fa206 	br	13e80 <__alt_mem_Flash_flash_data+0xf4013e80>
   13ff8:	a8bfd736 	bltu	r21,r2,13f58 <__alt_mem_Flash_flash_data+0xf4013f58>
   13ffc:	2027883a 	mov	r19,r4
   14000:	a8bf3d1e 	bne	r21,r2,13cf8 <__alt_mem_Flash_flash_data+0xf4013cf8>
   14004:	003f3d06 	br	13cfc <__alt_mem_Flash_flash_data+0xf4013cfc>
   14008:	0007883a 	mov	r3,zero
   1400c:	003fe406 	br	13fa0 <__alt_mem_Flash_flash_data+0xf4013fa0>
   14010:	00800434 	movhi	r2,16
   14014:	89400234 	orhi	r5,r17,8
   14018:	10bfffc4 	addi	r2,r2,-1
   1401c:	e00d883a 	mov	r6,fp
   14020:	288a703a 	and	r5,r5,r2
   14024:	003e8506 	br	13a3c <__alt_mem_Flash_flash_data+0xf4013a3c>

00014028 <__ledf2>:
   14028:	2804d53a 	srli	r2,r5,20
   1402c:	3810d53a 	srli	r8,r7,20
   14030:	00c00434 	movhi	r3,16
   14034:	18ffffc4 	addi	r3,r3,-1
   14038:	0241ffc4 	movi	r9,2047
   1403c:	1081ffcc 	andi	r2,r2,2047
   14040:	28d4703a 	and	r10,r5,r3
   14044:	4250703a 	and	r8,r8,r9
   14048:	38c6703a 	and	r3,r7,r3
   1404c:	280ad7fa 	srli	r5,r5,31
   14050:	380ed7fa 	srli	r7,r7,31
   14054:	12400b26 	beq	r2,r9,14084 <__ledf2+0x5c>
   14058:	42401926 	beq	r8,r9,140c0 <__ledf2+0x98>
   1405c:	10000c1e 	bne	r2,zero,14090 <__ledf2+0x68>
   14060:	5112b03a 	or	r9,r10,r4
   14064:	4813003a 	cmpeq	r9,r9,zero
   14068:	4817883a 	mov	r11,r9
   1406c:	40000f26 	beq	r8,zero,140ac <__ledf2+0x84>
   14070:	39c03fcc 	andi	r7,r7,255
   14074:	58001826 	beq	r11,zero,140d8 <__ledf2+0xb0>
   14078:	38000a1e 	bne	r7,zero,140a4 <__ledf2+0x7c>
   1407c:	00bfffc4 	movi	r2,-1
   14080:	f800283a 	ret
   14084:	5112b03a 	or	r9,r10,r4
   14088:	48000f1e 	bne	r9,zero,140c8 <__ledf2+0xa0>
   1408c:	40800c26 	beq	r8,r2,140c0 <__ledf2+0x98>
   14090:	4000101e 	bne	r8,zero,140d4 <__ledf2+0xac>
   14094:	1992b03a 	or	r9,r3,r6
   14098:	0017883a 	mov	r11,zero
   1409c:	483ff41e 	bne	r9,zero,14070 <__alt_mem_Flash_flash_data+0xf4014070>
   140a0:	283ff61e 	bne	r5,zero,1407c <__alt_mem_Flash_flash_data+0xf401407c>
   140a4:	00800044 	movi	r2,1
   140a8:	f800283a 	ret
   140ac:	1998b03a 	or	r12,r3,r6
   140b0:	603fef1e 	bne	r12,zero,14070 <__alt_mem_Flash_flash_data+0xf4014070>
   140b4:	483ffa26 	beq	r9,zero,140a0 <__alt_mem_Flash_flash_data+0xf40140a0>
   140b8:	0005883a 	mov	r2,zero
   140bc:	f800283a 	ret
   140c0:	1992b03a 	or	r9,r3,r6
   140c4:	48000226 	beq	r9,zero,140d0 <__ledf2+0xa8>
   140c8:	00800084 	movi	r2,2
   140cc:	f800283a 	ret
   140d0:	103fe326 	beq	r2,zero,14060 <__alt_mem_Flash_flash_data+0xf4014060>
   140d4:	39c03fcc 	andi	r7,r7,255
   140d8:	29fff11e 	bne	r5,r7,140a0 <__alt_mem_Flash_flash_data+0xf40140a0>
   140dc:	40bff016 	blt	r8,r2,140a0 <__alt_mem_Flash_flash_data+0xf40140a0>
   140e0:	12000316 	blt	r2,r8,140f0 <__ledf2+0xc8>
   140e4:	1abfee36 	bltu	r3,r10,140a0 <__alt_mem_Flash_flash_data+0xf40140a0>
   140e8:	50c00326 	beq	r10,r3,140f8 <__ledf2+0xd0>
   140ec:	50fff22e 	bgeu	r10,r3,140b8 <__alt_mem_Flash_flash_data+0xf40140b8>
   140f0:	283fe226 	beq	r5,zero,1407c <__alt_mem_Flash_flash_data+0xf401407c>
   140f4:	003feb06 	br	140a4 <__alt_mem_Flash_flash_data+0xf40140a4>
   140f8:	313fe936 	bltu	r6,r4,140a0 <__alt_mem_Flash_flash_data+0xf40140a0>
   140fc:	21bfee2e 	bgeu	r4,r6,140b8 <__alt_mem_Flash_flash_data+0xf40140b8>
   14100:	283fde26 	beq	r5,zero,1407c <__alt_mem_Flash_flash_data+0xf401407c>
   14104:	003fe706 	br	140a4 <__alt_mem_Flash_flash_data+0xf40140a4>

00014108 <__floatunsidf>:
   14108:	defffe04 	addi	sp,sp,-8
   1410c:	dc000015 	stw	r16,0(sp)
   14110:	dfc00115 	stw	ra,4(sp)
   14114:	2021883a 	mov	r16,r4
   14118:	20001026 	beq	r4,zero,1415c <__floatunsidf+0x54>
   1411c:	00067e40 	call	67e4 <__clzsi2>
   14120:	01410784 	movi	r5,1054
   14124:	100d883a 	mov	r6,r2
   14128:	288bc83a 	sub	r5,r5,r2
   1412c:	00800284 	movi	r2,10
   14130:	11801616 	blt	r2,r6,1418c <__floatunsidf+0x84>
   14134:	008002c4 	movi	r2,11
   14138:	1185c83a 	sub	r2,r2,r6
   1413c:	8084d83a 	srl	r2,r16,r2
   14140:	00c00434 	movhi	r3,16
   14144:	31c00544 	addi	r7,r6,21
   14148:	18ffffc4 	addi	r3,r3,-1
   1414c:	81e0983a 	sll	r16,r16,r7
   14150:	10cc703a 	and	r6,r2,r3
   14154:	2941ffcc 	andi	r5,r5,2047
   14158:	00000206 	br	14164 <__floatunsidf+0x5c>
   1415c:	000b883a 	mov	r5,zero
   14160:	000d883a 	mov	r6,zero
   14164:	280a953a 	slli	r5,r5,20
   14168:	00c00434 	movhi	r3,16
   1416c:	18ffffc4 	addi	r3,r3,-1
   14170:	30c6703a 	and	r3,r6,r3
   14174:	8005883a 	mov	r2,r16
   14178:	1946b03a 	or	r3,r3,r5
   1417c:	dfc00117 	ldw	ra,4(sp)
   14180:	dc000017 	ldw	r16,0(sp)
   14184:	dec00204 	addi	sp,sp,8
   14188:	f800283a 	ret
   1418c:	31bffd44 	addi	r6,r6,-11
   14190:	818c983a 	sll	r6,r16,r6
   14194:	00800434 	movhi	r2,16
   14198:	10bfffc4 	addi	r2,r2,-1
   1419c:	2941ffcc 	andi	r5,r5,2047
   141a0:	0021883a 	mov	r16,zero
   141a4:	308c703a 	and	r6,r6,r2
   141a8:	003fee06 	br	14164 <__alt_mem_Flash_flash_data+0xf4014164>

000141ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   141ac:	defffe04 	addi	sp,sp,-8
   141b0:	dfc00115 	stw	ra,4(sp)
   141b4:	df000015 	stw	fp,0(sp)
   141b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   141bc:	008000b4 	movhi	r2,2
   141c0:	108bea04 	addi	r2,r2,12200
   141c4:	10800017 	ldw	r2,0(r2)
   141c8:	10000526 	beq	r2,zero,141e0 <alt_get_errno+0x34>
   141cc:	008000b4 	movhi	r2,2
   141d0:	108bea04 	addi	r2,r2,12200
   141d4:	10800017 	ldw	r2,0(r2)
   141d8:	103ee83a 	callr	r2
   141dc:	00000206 	br	141e8 <alt_get_errno+0x3c>
   141e0:	008000b4 	movhi	r2,2
   141e4:	1093d304 	addi	r2,r2,20300
}
   141e8:	e037883a 	mov	sp,fp
   141ec:	dfc00117 	ldw	ra,4(sp)
   141f0:	df000017 	ldw	fp,0(sp)
   141f4:	dec00204 	addi	sp,sp,8
   141f8:	f800283a 	ret

000141fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   141fc:	defffb04 	addi	sp,sp,-20
   14200:	dfc00415 	stw	ra,16(sp)
   14204:	df000315 	stw	fp,12(sp)
   14208:	df000304 	addi	fp,sp,12
   1420c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14210:	e0bfff17 	ldw	r2,-4(fp)
   14214:	10000616 	blt	r2,zero,14230 <close+0x34>
   14218:	e0bfff17 	ldw	r2,-4(fp)
   1421c:	10c00324 	muli	r3,r2,12
   14220:	008000b4 	movhi	r2,2
   14224:	10868304 	addi	r2,r2,6668
   14228:	1885883a 	add	r2,r3,r2
   1422c:	00000106 	br	14234 <close+0x38>
   14230:	0005883a 	mov	r2,zero
   14234:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   14238:	e0bffd17 	ldw	r2,-12(fp)
   1423c:	10001926 	beq	r2,zero,142a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14240:	e0bffd17 	ldw	r2,-12(fp)
   14244:	10800017 	ldw	r2,0(r2)
   14248:	10800417 	ldw	r2,16(r2)
   1424c:	10000626 	beq	r2,zero,14268 <close+0x6c>
   14250:	e0bffd17 	ldw	r2,-12(fp)
   14254:	10800017 	ldw	r2,0(r2)
   14258:	10800417 	ldw	r2,16(r2)
   1425c:	e13ffd17 	ldw	r4,-12(fp)
   14260:	103ee83a 	callr	r2
   14264:	00000106 	br	1426c <close+0x70>
   14268:	0005883a 	mov	r2,zero
   1426c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14270:	e13fff17 	ldw	r4,-4(fp)
   14274:	00149140 	call	14914 <alt_release_fd>
    if (rval < 0)
   14278:	e0bffe17 	ldw	r2,-8(fp)
   1427c:	1000070e 	bge	r2,zero,1429c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   14280:	00141ac0 	call	141ac <alt_get_errno>
   14284:	1007883a 	mov	r3,r2
   14288:	e0bffe17 	ldw	r2,-8(fp)
   1428c:	0085c83a 	sub	r2,zero,r2
   14290:	18800015 	stw	r2,0(r3)
      return -1;
   14294:	00bfffc4 	movi	r2,-1
   14298:	00000706 	br	142b8 <close+0xbc>
    }
    return 0;
   1429c:	0005883a 	mov	r2,zero
   142a0:	00000506 	br	142b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   142a4:	00141ac0 	call	141ac <alt_get_errno>
   142a8:	1007883a 	mov	r3,r2
   142ac:	00801444 	movi	r2,81
   142b0:	18800015 	stw	r2,0(r3)
    return -1;
   142b4:	00bfffc4 	movi	r2,-1
  }
}
   142b8:	e037883a 	mov	sp,fp
   142bc:	dfc00117 	ldw	ra,4(sp)
   142c0:	df000017 	ldw	fp,0(sp)
   142c4:	dec00204 	addi	sp,sp,8
   142c8:	f800283a 	ret

000142cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   142cc:	defffc04 	addi	sp,sp,-16
   142d0:	df000315 	stw	fp,12(sp)
   142d4:	df000304 	addi	fp,sp,12
   142d8:	e13ffd15 	stw	r4,-12(fp)
   142dc:	e17ffe15 	stw	r5,-8(fp)
   142e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   142e4:	e0bfff17 	ldw	r2,-4(fp)
}
   142e8:	e037883a 	mov	sp,fp
   142ec:	df000017 	ldw	fp,0(sp)
   142f0:	dec00104 	addi	sp,sp,4
   142f4:	f800283a 	ret

000142f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   142f8:	defffe04 	addi	sp,sp,-8
   142fc:	dfc00115 	stw	ra,4(sp)
   14300:	df000015 	stw	fp,0(sp)
   14304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14308:	008000b4 	movhi	r2,2
   1430c:	108bea04 	addi	r2,r2,12200
   14310:	10800017 	ldw	r2,0(r2)
   14314:	10000526 	beq	r2,zero,1432c <alt_get_errno+0x34>
   14318:	008000b4 	movhi	r2,2
   1431c:	108bea04 	addi	r2,r2,12200
   14320:	10800017 	ldw	r2,0(r2)
   14324:	103ee83a 	callr	r2
   14328:	00000206 	br	14334 <alt_get_errno+0x3c>
   1432c:	008000b4 	movhi	r2,2
   14330:	1093d304 	addi	r2,r2,20300
}
   14334:	e037883a 	mov	sp,fp
   14338:	dfc00117 	ldw	ra,4(sp)
   1433c:	df000017 	ldw	fp,0(sp)
   14340:	dec00204 	addi	sp,sp,8
   14344:	f800283a 	ret

00014348 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14348:	defffb04 	addi	sp,sp,-20
   1434c:	dfc00415 	stw	ra,16(sp)
   14350:	df000315 	stw	fp,12(sp)
   14354:	df000304 	addi	fp,sp,12
   14358:	e13ffe15 	stw	r4,-8(fp)
   1435c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14360:	e0bffe17 	ldw	r2,-8(fp)
   14364:	10000616 	blt	r2,zero,14380 <fstat+0x38>
   14368:	e0bffe17 	ldw	r2,-8(fp)
   1436c:	10c00324 	muli	r3,r2,12
   14370:	008000b4 	movhi	r2,2
   14374:	10868304 	addi	r2,r2,6668
   14378:	1885883a 	add	r2,r3,r2
   1437c:	00000106 	br	14384 <fstat+0x3c>
   14380:	0005883a 	mov	r2,zero
   14384:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14388:	e0bffd17 	ldw	r2,-12(fp)
   1438c:	10001026 	beq	r2,zero,143d0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14390:	e0bffd17 	ldw	r2,-12(fp)
   14394:	10800017 	ldw	r2,0(r2)
   14398:	10800817 	ldw	r2,32(r2)
   1439c:	10000726 	beq	r2,zero,143bc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   143a0:	e0bffd17 	ldw	r2,-12(fp)
   143a4:	10800017 	ldw	r2,0(r2)
   143a8:	10800817 	ldw	r2,32(r2)
   143ac:	e13ffd17 	ldw	r4,-12(fp)
   143b0:	e17fff17 	ldw	r5,-4(fp)
   143b4:	103ee83a 	callr	r2
   143b8:	00000a06 	br	143e4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   143bc:	e0bfff17 	ldw	r2,-4(fp)
   143c0:	00c80004 	movi	r3,8192
   143c4:	10c00115 	stw	r3,4(r2)
      return 0;
   143c8:	0005883a 	mov	r2,zero
   143cc:	00000506 	br	143e4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   143d0:	00142f80 	call	142f8 <alt_get_errno>
   143d4:	1007883a 	mov	r3,r2
   143d8:	00801444 	movi	r2,81
   143dc:	18800015 	stw	r2,0(r3)
    return -1;
   143e0:	00bfffc4 	movi	r2,-1
  }
}
   143e4:	e037883a 	mov	sp,fp
   143e8:	dfc00117 	ldw	ra,4(sp)
   143ec:	df000017 	ldw	fp,0(sp)
   143f0:	dec00204 	addi	sp,sp,8
   143f4:	f800283a 	ret

000143f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   143f8:	defffe04 	addi	sp,sp,-8
   143fc:	dfc00115 	stw	ra,4(sp)
   14400:	df000015 	stw	fp,0(sp)
   14404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14408:	008000b4 	movhi	r2,2
   1440c:	108bea04 	addi	r2,r2,12200
   14410:	10800017 	ldw	r2,0(r2)
   14414:	10000526 	beq	r2,zero,1442c <alt_get_errno+0x34>
   14418:	008000b4 	movhi	r2,2
   1441c:	108bea04 	addi	r2,r2,12200
   14420:	10800017 	ldw	r2,0(r2)
   14424:	103ee83a 	callr	r2
   14428:	00000206 	br	14434 <alt_get_errno+0x3c>
   1442c:	008000b4 	movhi	r2,2
   14430:	1093d304 	addi	r2,r2,20300
}
   14434:	e037883a 	mov	sp,fp
   14438:	dfc00117 	ldw	ra,4(sp)
   1443c:	df000017 	ldw	fp,0(sp)
   14440:	dec00204 	addi	sp,sp,8
   14444:	f800283a 	ret

00014448 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14448:	deffed04 	addi	sp,sp,-76
   1444c:	dfc01215 	stw	ra,72(sp)
   14450:	df001115 	stw	fp,68(sp)
   14454:	df001104 	addi	fp,sp,68
   14458:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1445c:	e0bfff17 	ldw	r2,-4(fp)
   14460:	10000616 	blt	r2,zero,1447c <isatty+0x34>
   14464:	e0bfff17 	ldw	r2,-4(fp)
   14468:	10c00324 	muli	r3,r2,12
   1446c:	008000b4 	movhi	r2,2
   14470:	10868304 	addi	r2,r2,6668
   14474:	1885883a 	add	r2,r3,r2
   14478:	00000106 	br	14480 <isatty+0x38>
   1447c:	0005883a 	mov	r2,zero
   14480:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14484:	e0bfef17 	ldw	r2,-68(fp)
   14488:	10000e26 	beq	r2,zero,144c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1448c:	e0bfef17 	ldw	r2,-68(fp)
   14490:	10800017 	ldw	r2,0(r2)
   14494:	10800817 	ldw	r2,32(r2)
   14498:	1000021e 	bne	r2,zero,144a4 <isatty+0x5c>
    {
      return 1;
   1449c:	00800044 	movi	r2,1
   144a0:	00000d06 	br	144d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   144a4:	e0bff004 	addi	r2,fp,-64
   144a8:	e13fff17 	ldw	r4,-4(fp)
   144ac:	100b883a 	mov	r5,r2
   144b0:	00143480 	call	14348 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   144b4:	e0bff117 	ldw	r2,-60(fp)
   144b8:	10880020 	cmpeqi	r2,r2,8192
   144bc:	10803fcc 	andi	r2,r2,255
   144c0:	00000506 	br	144d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   144c4:	00143f80 	call	143f8 <alt_get_errno>
   144c8:	1007883a 	mov	r3,r2
   144cc:	00801444 	movi	r2,81
   144d0:	18800015 	stw	r2,0(r3)
    return 0;
   144d4:	0005883a 	mov	r2,zero
  }
}
   144d8:	e037883a 	mov	sp,fp
   144dc:	dfc00117 	ldw	ra,4(sp)
   144e0:	df000017 	ldw	fp,0(sp)
   144e4:	dec00204 	addi	sp,sp,8
   144e8:	f800283a 	ret

000144ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   144ec:	defffc04 	addi	sp,sp,-16
   144f0:	df000315 	stw	fp,12(sp)
   144f4:	df000304 	addi	fp,sp,12
   144f8:	e13ffd15 	stw	r4,-12(fp)
   144fc:	e17ffe15 	stw	r5,-8(fp)
   14500:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   14504:	e0fffe17 	ldw	r3,-8(fp)
   14508:	e0bffd17 	ldw	r2,-12(fp)
   1450c:	18800c26 	beq	r3,r2,14540 <alt_load_section+0x54>
  {
    while( to != end )
   14510:	00000806 	br	14534 <alt_load_section+0x48>
    {
      *to++ = *from++;
   14514:	e0bffe17 	ldw	r2,-8(fp)
   14518:	10c00104 	addi	r3,r2,4
   1451c:	e0fffe15 	stw	r3,-8(fp)
   14520:	e0fffd17 	ldw	r3,-12(fp)
   14524:	19000104 	addi	r4,r3,4
   14528:	e13ffd15 	stw	r4,-12(fp)
   1452c:	18c00017 	ldw	r3,0(r3)
   14530:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   14534:	e0fffe17 	ldw	r3,-8(fp)
   14538:	e0bfff17 	ldw	r2,-4(fp)
   1453c:	18bff51e 	bne	r3,r2,14514 <__alt_mem_Flash_flash_data+0xf4014514>
    {
      *to++ = *from++;
    }
  }
}
   14540:	e037883a 	mov	sp,fp
   14544:	df000017 	ldw	fp,0(sp)
   14548:	dec00104 	addi	sp,sp,4
   1454c:	f800283a 	ret

00014550 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14550:	defffe04 	addi	sp,sp,-8
   14554:	dfc00115 	stw	ra,4(sp)
   14558:	df000015 	stw	fp,0(sp)
   1455c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14560:	010000b4 	movhi	r4,2
   14564:	210c0e04 	addi	r4,r4,12344
   14568:	014000b4 	movhi	r5,2
   1456c:	29445004 	addi	r5,r5,4416
   14570:	018000b4 	movhi	r6,2
   14574:	318c0e04 	addi	r6,r6,12344
   14578:	00144ec0 	call	144ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1457c:	01000034 	movhi	r4,0
   14580:	21000804 	addi	r4,r4,32
   14584:	01400034 	movhi	r5,0
   14588:	29400804 	addi	r5,r5,32
   1458c:	01800034 	movhi	r6,0
   14590:	31809104 	addi	r6,r6,580
   14594:	00144ec0 	call	144ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14598:	010000b4 	movhi	r4,2
   1459c:	2101fa04 	addi	r4,r4,2024
   145a0:	014000b4 	movhi	r5,2
   145a4:	2941fa04 	addi	r5,r5,2024
   145a8:	018000b4 	movhi	r6,2
   145ac:	31845004 	addi	r6,r6,4416
   145b0:	00144ec0 	call	144ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   145b4:	001f4300 	call	1f430 <alt_dcache_flush_all>
  alt_icache_flush_all();
   145b8:	001f6880 	call	1f688 <alt_icache_flush_all>
}
   145bc:	e037883a 	mov	sp,fp
   145c0:	dfc00117 	ldw	ra,4(sp)
   145c4:	df000017 	ldw	fp,0(sp)
   145c8:	dec00204 	addi	sp,sp,8
   145cc:	f800283a 	ret

000145d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   145d0:	defffe04 	addi	sp,sp,-8
   145d4:	dfc00115 	stw	ra,4(sp)
   145d8:	df000015 	stw	fp,0(sp)
   145dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   145e0:	008000b4 	movhi	r2,2
   145e4:	108bea04 	addi	r2,r2,12200
   145e8:	10800017 	ldw	r2,0(r2)
   145ec:	10000526 	beq	r2,zero,14604 <alt_get_errno+0x34>
   145f0:	008000b4 	movhi	r2,2
   145f4:	108bea04 	addi	r2,r2,12200
   145f8:	10800017 	ldw	r2,0(r2)
   145fc:	103ee83a 	callr	r2
   14600:	00000206 	br	1460c <alt_get_errno+0x3c>
   14604:	008000b4 	movhi	r2,2
   14608:	1093d304 	addi	r2,r2,20300
}
   1460c:	e037883a 	mov	sp,fp
   14610:	dfc00117 	ldw	ra,4(sp)
   14614:	df000017 	ldw	fp,0(sp)
   14618:	dec00204 	addi	sp,sp,8
   1461c:	f800283a 	ret

00014620 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14620:	defff904 	addi	sp,sp,-28
   14624:	dfc00615 	stw	ra,24(sp)
   14628:	df000515 	stw	fp,20(sp)
   1462c:	df000504 	addi	fp,sp,20
   14630:	e13ffd15 	stw	r4,-12(fp)
   14634:	e17ffe15 	stw	r5,-8(fp)
   14638:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1463c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14640:	e0bffd17 	ldw	r2,-12(fp)
   14644:	10000616 	blt	r2,zero,14660 <lseek+0x40>
   14648:	e0bffd17 	ldw	r2,-12(fp)
   1464c:	10c00324 	muli	r3,r2,12
   14650:	008000b4 	movhi	r2,2
   14654:	10868304 	addi	r2,r2,6668
   14658:	1885883a 	add	r2,r3,r2
   1465c:	00000106 	br	14664 <lseek+0x44>
   14660:	0005883a 	mov	r2,zero
   14664:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14668:	e0bffc17 	ldw	r2,-16(fp)
   1466c:	10001026 	beq	r2,zero,146b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14670:	e0bffc17 	ldw	r2,-16(fp)
   14674:	10800017 	ldw	r2,0(r2)
   14678:	10800717 	ldw	r2,28(r2)
   1467c:	10000926 	beq	r2,zero,146a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14680:	e0bffc17 	ldw	r2,-16(fp)
   14684:	10800017 	ldw	r2,0(r2)
   14688:	10800717 	ldw	r2,28(r2)
   1468c:	e13ffc17 	ldw	r4,-16(fp)
   14690:	e17ffe17 	ldw	r5,-8(fp)
   14694:	e1bfff17 	ldw	r6,-4(fp)
   14698:	103ee83a 	callr	r2
   1469c:	e0bffb15 	stw	r2,-20(fp)
   146a0:	00000506 	br	146b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   146a4:	00bfde84 	movi	r2,-134
   146a8:	e0bffb15 	stw	r2,-20(fp)
   146ac:	00000206 	br	146b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   146b0:	00bfebc4 	movi	r2,-81
   146b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   146b8:	e0bffb17 	ldw	r2,-20(fp)
   146bc:	1000070e 	bge	r2,zero,146dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   146c0:	00145d00 	call	145d0 <alt_get_errno>
   146c4:	1007883a 	mov	r3,r2
   146c8:	e0bffb17 	ldw	r2,-20(fp)
   146cc:	0085c83a 	sub	r2,zero,r2
   146d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   146d4:	00bfffc4 	movi	r2,-1
   146d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   146dc:	e0bffb17 	ldw	r2,-20(fp)
}
   146e0:	e037883a 	mov	sp,fp
   146e4:	dfc00117 	ldw	ra,4(sp)
   146e8:	df000017 	ldw	fp,0(sp)
   146ec:	dec00204 	addi	sp,sp,8
   146f0:	f800283a 	ret

000146f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   146f4:	defff904 	addi	sp,sp,-28
   146f8:	dfc00615 	stw	ra,24(sp)
   146fc:	df000515 	stw	fp,20(sp)
   14700:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14704:	0009883a 	mov	r4,zero
   14708:	001cb400 	call	1cb40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1470c:	00156e40 	call	156e4 <OSInit>
   14710:	01000044 	movi	r4,1
   14714:	001a2540 	call	1a254 <OSSemCreate>
   14718:	1007883a 	mov	r3,r2
   1471c:	008000b4 	movhi	r2,2
   14720:	1093dc04 	addi	r2,r2,20336
   14724:	10c00015 	stw	r3,0(r2)
   14728:	01000044 	movi	r4,1
   1472c:	001a2540 	call	1a254 <OSSemCreate>
   14730:	1007883a 	mov	r3,r2
   14734:	008000b4 	movhi	r2,2
   14738:	1093de04 	addi	r2,r2,20344
   1473c:	10c00015 	stw	r3,0(r2)
   14740:	008000b4 	movhi	r2,2
   14744:	1093d704 	addi	r2,r2,20316
   14748:	e0bffc15 	stw	r2,-16(fp)
   1474c:	00800044 	movi	r2,1
   14750:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   14754:	e0bffd0b 	ldhu	r2,-12(fp)
   14758:	1009883a 	mov	r4,r2
   1475c:	001a2540 	call	1a254 <OSSemCreate>
   14760:	1007883a 	mov	r3,r2
   14764:	e0bffc17 	ldw	r2,-16(fp)
   14768:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1476c:	001cb740 	call	1cb74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14770:	010000b4 	movhi	r4,2
   14774:	21039804 	addi	r4,r4,3680
   14778:	014000b4 	movhi	r5,2
   1477c:	29439804 	addi	r5,r5,3680
   14780:	018000b4 	movhi	r6,2
   14784:	31839804 	addi	r6,r6,3680
   14788:	001f7780 	call	1f778 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1478c:	001f5400 	call	1f540 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14790:	010000b4 	movhi	r4,2
   14794:	213d6704 	addi	r4,r4,-2660
   14798:	002043c0 	call	2043c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1479c:	d127f917 	ldw	r4,-24604(gp)
   147a0:	d0e7fa17 	ldw	r3,-24600(gp)
   147a4:	d0a7fb17 	ldw	r2,-24596(gp)
   147a8:	180b883a 	mov	r5,r3
   147ac:	100d883a 	mov	r6,r2
   147b0:	00021cc0 	call	21cc <main>
   147b4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   147b8:	01000044 	movi	r4,1
   147bc:	00141fc0 	call	141fc <close>
  exit (result);
   147c0:	e13ffb17 	ldw	r4,-20(fp)
   147c4:	00204500 	call	20450 <exit>

000147c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   147c8:	defffe04 	addi	sp,sp,-8
   147cc:	dfc00115 	stw	ra,4(sp)
   147d0:	df000015 	stw	fp,0(sp)
   147d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   147d8:	008000b4 	movhi	r2,2
   147dc:	108bea04 	addi	r2,r2,12200
   147e0:	10800017 	ldw	r2,0(r2)
   147e4:	10000526 	beq	r2,zero,147fc <alt_get_errno+0x34>
   147e8:	008000b4 	movhi	r2,2
   147ec:	108bea04 	addi	r2,r2,12200
   147f0:	10800017 	ldw	r2,0(r2)
   147f4:	103ee83a 	callr	r2
   147f8:	00000206 	br	14804 <alt_get_errno+0x3c>
   147fc:	008000b4 	movhi	r2,2
   14800:	1093d304 	addi	r2,r2,20300
}
   14804:	e037883a 	mov	sp,fp
   14808:	dfc00117 	ldw	ra,4(sp)
   1480c:	df000017 	ldw	fp,0(sp)
   14810:	dec00204 	addi	sp,sp,8
   14814:	f800283a 	ret

00014818 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14818:	defff904 	addi	sp,sp,-28
   1481c:	dfc00615 	stw	ra,24(sp)
   14820:	df000515 	stw	fp,20(sp)
   14824:	df000504 	addi	fp,sp,20
   14828:	e13ffd15 	stw	r4,-12(fp)
   1482c:	e17ffe15 	stw	r5,-8(fp)
   14830:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14834:	e0bffd17 	ldw	r2,-12(fp)
   14838:	10000616 	blt	r2,zero,14854 <read+0x3c>
   1483c:	e0bffd17 	ldw	r2,-12(fp)
   14840:	10c00324 	muli	r3,r2,12
   14844:	008000b4 	movhi	r2,2
   14848:	10868304 	addi	r2,r2,6668
   1484c:	1885883a 	add	r2,r3,r2
   14850:	00000106 	br	14858 <read+0x40>
   14854:	0005883a 	mov	r2,zero
   14858:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1485c:	e0bffb17 	ldw	r2,-20(fp)
   14860:	10002226 	beq	r2,zero,148ec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14864:	e0bffb17 	ldw	r2,-20(fp)
   14868:	10800217 	ldw	r2,8(r2)
   1486c:	108000cc 	andi	r2,r2,3
   14870:	10800060 	cmpeqi	r2,r2,1
   14874:	1000181e 	bne	r2,zero,148d8 <read+0xc0>
        (fd->dev->read))
   14878:	e0bffb17 	ldw	r2,-20(fp)
   1487c:	10800017 	ldw	r2,0(r2)
   14880:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14884:	10001426 	beq	r2,zero,148d8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14888:	e0bffb17 	ldw	r2,-20(fp)
   1488c:	10800017 	ldw	r2,0(r2)
   14890:	10800517 	ldw	r2,20(r2)
   14894:	e0ffff17 	ldw	r3,-4(fp)
   14898:	e13ffb17 	ldw	r4,-20(fp)
   1489c:	e17ffe17 	ldw	r5,-8(fp)
   148a0:	180d883a 	mov	r6,r3
   148a4:	103ee83a 	callr	r2
   148a8:	e0bffc15 	stw	r2,-16(fp)
   148ac:	e0bffc17 	ldw	r2,-16(fp)
   148b0:	1000070e 	bge	r2,zero,148d0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   148b4:	00147c80 	call	147c8 <alt_get_errno>
   148b8:	1007883a 	mov	r3,r2
   148bc:	e0bffc17 	ldw	r2,-16(fp)
   148c0:	0085c83a 	sub	r2,zero,r2
   148c4:	18800015 	stw	r2,0(r3)
          return -1;
   148c8:	00bfffc4 	movi	r2,-1
   148cc:	00000c06 	br	14900 <read+0xe8>
        }
        return rval;
   148d0:	e0bffc17 	ldw	r2,-16(fp)
   148d4:	00000a06 	br	14900 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   148d8:	00147c80 	call	147c8 <alt_get_errno>
   148dc:	1007883a 	mov	r3,r2
   148e0:	00800344 	movi	r2,13
   148e4:	18800015 	stw	r2,0(r3)
   148e8:	00000406 	br	148fc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   148ec:	00147c80 	call	147c8 <alt_get_errno>
   148f0:	1007883a 	mov	r3,r2
   148f4:	00801444 	movi	r2,81
   148f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   148fc:	00bfffc4 	movi	r2,-1
}
   14900:	e037883a 	mov	sp,fp
   14904:	dfc00117 	ldw	ra,4(sp)
   14908:	df000017 	ldw	fp,0(sp)
   1490c:	dec00204 	addi	sp,sp,8
   14910:	f800283a 	ret

00014914 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14914:	defffe04 	addi	sp,sp,-8
   14918:	df000115 	stw	fp,4(sp)
   1491c:	df000104 	addi	fp,sp,4
   14920:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14924:	e0bfff17 	ldw	r2,-4(fp)
   14928:	108000d0 	cmplti	r2,r2,3
   1492c:	10000d1e 	bne	r2,zero,14964 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   14930:	008000b4 	movhi	r2,2
   14934:	10868304 	addi	r2,r2,6668
   14938:	e0ffff17 	ldw	r3,-4(fp)
   1493c:	18c00324 	muli	r3,r3,12
   14940:	18c00204 	addi	r3,r3,8
   14944:	10c5883a 	add	r2,r2,r3
   14948:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1494c:	008000b4 	movhi	r2,2
   14950:	10868304 	addi	r2,r2,6668
   14954:	e0ffff17 	ldw	r3,-4(fp)
   14958:	18c00324 	muli	r3,r3,12
   1495c:	10c5883a 	add	r2,r2,r3
   14960:	10000015 	stw	zero,0(r2)
  }
}
   14964:	e037883a 	mov	sp,fp
   14968:	df000017 	ldw	fp,0(sp)
   1496c:	dec00104 	addi	sp,sp,4
   14970:	f800283a 	ret

00014974 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14974:	defff904 	addi	sp,sp,-28
   14978:	df000615 	stw	fp,24(sp)
   1497c:	df000604 	addi	fp,sp,24
   14980:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14984:	0005303a 	rdctl	r2,status
   14988:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1498c:	e0fffc17 	ldw	r3,-16(fp)
   14990:	00bfff84 	movi	r2,-2
   14994:	1884703a 	and	r2,r3,r2
   14998:	1001703a 	wrctl	status,r2
  
  return context;
   1499c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   149a0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   149a4:	d0a00c17 	ldw	r2,-32720(gp)
   149a8:	10c000c4 	addi	r3,r2,3
   149ac:	00bfff04 	movi	r2,-4
   149b0:	1884703a 	and	r2,r3,r2
   149b4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   149b8:	d0e00c17 	ldw	r3,-32720(gp)
   149bc:	e0bfff17 	ldw	r2,-4(fp)
   149c0:	1887883a 	add	r3,r3,r2
   149c4:	00810034 	movhi	r2,1024
   149c8:	10800004 	addi	r2,r2,0
   149cc:	10c0062e 	bgeu	r2,r3,149e8 <sbrk+0x74>
   149d0:	e0bffa17 	ldw	r2,-24(fp)
   149d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149d8:	e0bffd17 	ldw	r2,-12(fp)
   149dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   149e0:	00bfffc4 	movi	r2,-1
   149e4:	00000b06 	br	14a14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   149e8:	d0a00c17 	ldw	r2,-32720(gp)
   149ec:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   149f0:	d0e00c17 	ldw	r3,-32720(gp)
   149f4:	e0bfff17 	ldw	r2,-4(fp)
   149f8:	1885883a 	add	r2,r3,r2
   149fc:	d0a00c15 	stw	r2,-32720(gp)
   14a00:	e0bffa17 	ldw	r2,-24(fp)
   14a04:	e0bffe15 	stw	r2,-8(fp)
   14a08:	e0bffe17 	ldw	r2,-8(fp)
   14a0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14a10:	e0bffb17 	ldw	r2,-20(fp)
} 
   14a14:	e037883a 	mov	sp,fp
   14a18:	df000017 	ldw	fp,0(sp)
   14a1c:	dec00104 	addi	sp,sp,4
   14a20:	f800283a 	ret

00014a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a24:	defffe04 	addi	sp,sp,-8
   14a28:	dfc00115 	stw	ra,4(sp)
   14a2c:	df000015 	stw	fp,0(sp)
   14a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14a34:	008000b4 	movhi	r2,2
   14a38:	108bea04 	addi	r2,r2,12200
   14a3c:	10800017 	ldw	r2,0(r2)
   14a40:	10000526 	beq	r2,zero,14a58 <alt_get_errno+0x34>
   14a44:	008000b4 	movhi	r2,2
   14a48:	108bea04 	addi	r2,r2,12200
   14a4c:	10800017 	ldw	r2,0(r2)
   14a50:	103ee83a 	callr	r2
   14a54:	00000206 	br	14a60 <alt_get_errno+0x3c>
   14a58:	008000b4 	movhi	r2,2
   14a5c:	1093d304 	addi	r2,r2,20300
}
   14a60:	e037883a 	mov	sp,fp
   14a64:	dfc00117 	ldw	ra,4(sp)
   14a68:	df000017 	ldw	fp,0(sp)
   14a6c:	dec00204 	addi	sp,sp,8
   14a70:	f800283a 	ret

00014a74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14a74:	defff904 	addi	sp,sp,-28
   14a78:	dfc00615 	stw	ra,24(sp)
   14a7c:	df000515 	stw	fp,20(sp)
   14a80:	df000504 	addi	fp,sp,20
   14a84:	e13ffd15 	stw	r4,-12(fp)
   14a88:	e17ffe15 	stw	r5,-8(fp)
   14a8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14a90:	e0bffd17 	ldw	r2,-12(fp)
   14a94:	10000616 	blt	r2,zero,14ab0 <write+0x3c>
   14a98:	e0bffd17 	ldw	r2,-12(fp)
   14a9c:	10c00324 	muli	r3,r2,12
   14aa0:	008000b4 	movhi	r2,2
   14aa4:	10868304 	addi	r2,r2,6668
   14aa8:	1885883a 	add	r2,r3,r2
   14aac:	00000106 	br	14ab4 <write+0x40>
   14ab0:	0005883a 	mov	r2,zero
   14ab4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14ab8:	e0bffb17 	ldw	r2,-20(fp)
   14abc:	10002126 	beq	r2,zero,14b44 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14ac0:	e0bffb17 	ldw	r2,-20(fp)
   14ac4:	10800217 	ldw	r2,8(r2)
   14ac8:	108000cc 	andi	r2,r2,3
   14acc:	10001826 	beq	r2,zero,14b30 <write+0xbc>
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	10800017 	ldw	r2,0(r2)
   14ad8:	10800617 	ldw	r2,24(r2)
   14adc:	10001426 	beq	r2,zero,14b30 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14ae0:	e0bffb17 	ldw	r2,-20(fp)
   14ae4:	10800017 	ldw	r2,0(r2)
   14ae8:	10800617 	ldw	r2,24(r2)
   14aec:	e0ffff17 	ldw	r3,-4(fp)
   14af0:	e13ffb17 	ldw	r4,-20(fp)
   14af4:	e17ffe17 	ldw	r5,-8(fp)
   14af8:	180d883a 	mov	r6,r3
   14afc:	103ee83a 	callr	r2
   14b00:	e0bffc15 	stw	r2,-16(fp)
   14b04:	e0bffc17 	ldw	r2,-16(fp)
   14b08:	1000070e 	bge	r2,zero,14b28 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14b0c:	0014a240 	call	14a24 <alt_get_errno>
   14b10:	1007883a 	mov	r3,r2
   14b14:	e0bffc17 	ldw	r2,-16(fp)
   14b18:	0085c83a 	sub	r2,zero,r2
   14b1c:	18800015 	stw	r2,0(r3)
        return -1;
   14b20:	00bfffc4 	movi	r2,-1
   14b24:	00000c06 	br	14b58 <write+0xe4>
      }
      return rval;
   14b28:	e0bffc17 	ldw	r2,-16(fp)
   14b2c:	00000a06 	br	14b58 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14b30:	0014a240 	call	14a24 <alt_get_errno>
   14b34:	1007883a 	mov	r3,r2
   14b38:	00800344 	movi	r2,13
   14b3c:	18800015 	stw	r2,0(r3)
   14b40:	00000406 	br	14b54 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14b44:	0014a240 	call	14a24 <alt_get_errno>
   14b48:	1007883a 	mov	r3,r2
   14b4c:	00801444 	movi	r2,81
   14b50:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14b54:	00bfffc4 	movi	r2,-1
}
   14b58:	e037883a 	mov	sp,fp
   14b5c:	dfc00117 	ldw	ra,4(sp)
   14b60:	df000017 	ldw	fp,0(sp)
   14b64:	dec00204 	addi	sp,sp,8
   14b68:	f800283a 	ret

00014b6c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   14b6c:	deffdf04 	addi	sp,sp,-132
   14b70:	dfc02015 	stw	ra,128(sp)
   14b74:	df001f15 	stw	fp,124(sp)
   14b78:	df001f04 	addi	fp,sp,124
   14b7c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   14b80:	e0bfe204 	addi	r2,fp,-120
   14b84:	01003fc4 	movi	r4,255
   14b88:	100b883a 	mov	r5,r2
   14b8c:	001c4080 	call	1c408 <OSTaskQuery>
   14b90:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   14b94:	e0bffe83 	ldbu	r2,-6(fp)
   14b98:	10803fcc 	andi	r2,r2,255
   14b9c:	10000126 	beq	r2,zero,14ba4 <__env_lock+0x38>
    return;
   14ba0:	00001d06 	br	14c18 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   14ba4:	e0bfee83 	ldbu	r2,-70(fp)
   14ba8:	10803fcc 	andi	r2,r2,255
   14bac:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   14bb0:	d0e7fd17 	ldw	r3,-24588(gp)
   14bb4:	e0bffd04 	addi	r2,fp,-12
   14bb8:	1809883a 	mov	r4,r3
   14bbc:	100b883a 	mov	r5,r2
   14bc0:	001aaa00 	call	1aaa0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   14bc4:	e0bffe43 	ldbu	r2,-7(fp)
   14bc8:	10803fcc 	andi	r2,r2,255
   14bcc:	10000726 	beq	r2,zero,14bec <__env_lock+0x80>
   14bd0:	d0a00d17 	ldw	r2,-32716(gp)
   14bd4:	e0ffe117 	ldw	r3,-124(fp)
   14bd8:	1880041e 	bne	r3,r2,14bec <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   14bdc:	d0a7fc17 	ldw	r2,-24592(gp)
   14be0:	10800044 	addi	r2,r2,1
   14be4:	d0a7fc15 	stw	r2,-24592(gp)
   14be8:	00000a06 	br	14c14 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   14bec:	d0e7fd17 	ldw	r3,-24588(gp)
   14bf0:	e0bffe84 	addi	r2,fp,-6
   14bf4:	1809883a 	mov	r4,r3
   14bf8:	000b883a 	mov	r5,zero
   14bfc:	100d883a 	mov	r6,r2
   14c00:	001a5bc0 	call	1a5bc <OSSemPend>
    locks  = 1;
   14c04:	00800044 	movi	r2,1
   14c08:	d0a7fc15 	stw	r2,-24592(gp)
    lockid = id;
   14c0c:	e0bfe117 	ldw	r2,-124(fp)
   14c10:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   14c14:	0001883a 	nop
}
   14c18:	e037883a 	mov	sp,fp
   14c1c:	dfc00117 	ldw	ra,4(sp)
   14c20:	df000017 	ldw	fp,0(sp)
   14c24:	dec00204 	addi	sp,sp,8
   14c28:	f800283a 	ret

00014c2c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   14c2c:	defffd04 	addi	sp,sp,-12
   14c30:	dfc00215 	stw	ra,8(sp)
   14c34:	df000115 	stw	fp,4(sp)
   14c38:	df000104 	addi	fp,sp,4
   14c3c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   14c40:	d0a7fc17 	ldw	r2,-24592(gp)
   14c44:	1000011e 	bne	r2,zero,14c4c <__env_unlock+0x20>
    return;
   14c48:	00000a06 	br	14c74 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   14c4c:	d0a7fc17 	ldw	r2,-24592(gp)
   14c50:	10bfffc4 	addi	r2,r2,-1
   14c54:	d0a7fc15 	stw	r2,-24592(gp)
   14c58:	d0a7fc17 	ldw	r2,-24592(gp)
   14c5c:	1000051e 	bne	r2,zero,14c74 <__env_unlock+0x48>
  {
    lockid = -1;
   14c60:	00bfffc4 	movi	r2,-1
   14c64:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   14c68:	d0a7fd17 	ldw	r2,-24588(gp)
   14c6c:	1009883a 	mov	r4,r2
   14c70:	001a9900 	call	1a990 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   14c74:	e037883a 	mov	sp,fp
   14c78:	dfc00117 	ldw	ra,4(sp)
   14c7c:	df000017 	ldw	fp,0(sp)
   14c80:	dec00204 	addi	sp,sp,8
   14c84:	f800283a 	ret

00014c88 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   14c88:	deffdb04 	addi	sp,sp,-148
   14c8c:	dfc02415 	stw	ra,144(sp)
   14c90:	df002315 	stw	fp,140(sp)
   14c94:	df002304 	addi	fp,sp,140
   14c98:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c9c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   14ca0:	008000b4 	movhi	r2,2
   14ca4:	1093df44 	addi	r2,r2,20349
   14ca8:	10800003 	ldbu	r2,0(r2)
   14cac:	10803fcc 	andi	r2,r2,255
   14cb0:	10800060 	cmpeqi	r2,r2,1
   14cb4:	1000011e 	bne	r2,zero,14cbc <__malloc_lock+0x34>
      return;
   14cb8:	00003606 	br	14d94 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   14cbc:	e0bfe204 	addi	r2,fp,-120
   14cc0:	01003fc4 	movi	r4,255
   14cc4:	100b883a 	mov	r5,r2
   14cc8:	001c4080 	call	1c408 <OSTaskQuery>
   14ccc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   14cd0:	e0bffe83 	ldbu	r2,-6(fp)
   14cd4:	10803fcc 	andi	r2,r2,255
   14cd8:	10000126 	beq	r2,zero,14ce0 <__malloc_lock+0x58>
    return;
   14cdc:	00002d06 	br	14d94 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   14ce0:	e0bfee83 	ldbu	r2,-70(fp)
   14ce4:	10803fcc 	andi	r2,r2,255
   14ce8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   14cec:	d0e7ff17 	ldw	r3,-24580(gp)
   14cf0:	e0bffd04 	addi	r2,fp,-12
   14cf4:	1809883a 	mov	r4,r3
   14cf8:	100b883a 	mov	r5,r2
   14cfc:	001aaa00 	call	1aaa0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d00:	0005303a 	rdctl	r2,status
   14d04:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d08:	e0ffdf17 	ldw	r3,-132(fp)
   14d0c:	00bfff84 	movi	r2,-2
   14d10:	1884703a 	and	r2,r3,r2
   14d14:	1001703a 	wrctl	status,r2
  
  return context;
   14d18:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   14d1c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   14d20:	e0bffd0b 	ldhu	r2,-12(fp)
   14d24:	10bfffcc 	andi	r2,r2,65535
   14d28:	10000b1e 	bne	r2,zero,14d58 <__malloc_lock+0xd0>
   14d2c:	d0a00e17 	ldw	r2,-32712(gp)
   14d30:	e0ffde17 	ldw	r3,-136(fp)
   14d34:	1880081e 	bne	r3,r2,14d58 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   14d38:	d0a7fe17 	ldw	r2,-24584(gp)
   14d3c:	10800044 	addi	r2,r2,1
   14d40:	d0a7fe15 	stw	r2,-24584(gp)
   14d44:	e0bfdd17 	ldw	r2,-140(fp)
   14d48:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d4c:	e0bfe017 	ldw	r2,-128(fp)
   14d50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   14d54:	00000e06 	br	14d90 <__malloc_lock+0x108>
   14d58:	e0bfdd17 	ldw	r2,-140(fp)
   14d5c:	e0bfe115 	stw	r2,-124(fp)
   14d60:	e0bfe117 	ldw	r2,-124(fp)
   14d64:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   14d68:	d0e7ff17 	ldw	r3,-24580(gp)
   14d6c:	e0bffe84 	addi	r2,fp,-6
   14d70:	1809883a 	mov	r4,r3
   14d74:	000b883a 	mov	r5,zero
   14d78:	100d883a 	mov	r6,r2
   14d7c:	001a5bc0 	call	1a5bc <OSSemPend>
    locks  = 1;
   14d80:	00800044 	movi	r2,1
   14d84:	d0a7fe15 	stw	r2,-24584(gp)
    lockid = id;
   14d88:	e0bfde17 	ldw	r2,-136(fp)
   14d8c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   14d90:	0001883a 	nop
}
   14d94:	e037883a 	mov	sp,fp
   14d98:	dfc00117 	ldw	ra,4(sp)
   14d9c:	df000017 	ldw	fp,0(sp)
   14da0:	dec00204 	addi	sp,sp,8
   14da4:	f800283a 	ret

00014da8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14da8:	defff804 	addi	sp,sp,-32
   14dac:	dfc00715 	stw	ra,28(sp)
   14db0:	df000615 	stw	fp,24(sp)
   14db4:	df000604 	addi	fp,sp,24
   14db8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14dbc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   14dc0:	008000b4 	movhi	r2,2
   14dc4:	1093df44 	addi	r2,r2,20349
   14dc8:	10800003 	ldbu	r2,0(r2)
   14dcc:	10803fcc 	andi	r2,r2,255
   14dd0:	10800060 	cmpeqi	r2,r2,1
   14dd4:	1000011e 	bne	r2,zero,14ddc <__malloc_unlock+0x34>
      return;
   14dd8:	00002206 	br	14e64 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ddc:	0005303a 	rdctl	r2,status
   14de0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14de4:	e0fffb17 	ldw	r3,-20(fp)
   14de8:	00bfff84 	movi	r2,-2
   14dec:	1884703a 	and	r2,r3,r2
   14df0:	1001703a 	wrctl	status,r2
  
  return context;
   14df4:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   14df8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   14dfc:	d0a7fe17 	ldw	r2,-24584(gp)
   14e00:	1000051e 	bne	r2,zero,14e18 <__malloc_unlock+0x70>
   14e04:	e0bffa17 	ldw	r2,-24(fp)
   14e08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e0c:	e0bffc17 	ldw	r2,-16(fp)
   14e10:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   14e14:	00001306 	br	14e64 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   14e18:	d0a7fe17 	ldw	r2,-24584(gp)
   14e1c:	10bfffc4 	addi	r2,r2,-1
   14e20:	d0a7fe15 	stw	r2,-24584(gp)
   14e24:	d0a7fe17 	ldw	r2,-24584(gp)
   14e28:	10000a1e 	bne	r2,zero,14e54 <__malloc_unlock+0xac>
  {
    lockid = -1;
   14e2c:	00bfffc4 	movi	r2,-1
   14e30:	d0a00e15 	stw	r2,-32712(gp)
   14e34:	e0bffa17 	ldw	r2,-24(fp)
   14e38:	e0bffd15 	stw	r2,-12(fp)
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   14e44:	d0a7ff17 	ldw	r2,-24580(gp)
   14e48:	1009883a 	mov	r4,r2
   14e4c:	001a9900 	call	1a990 <OSSemPost>
   14e50:	00000406 	br	14e64 <__malloc_unlock+0xbc>
   14e54:	e0bffa17 	ldw	r2,-24(fp)
   14e58:	e0bffe15 	stw	r2,-8(fp)
   14e5c:	e0bffe17 	ldw	r2,-8(fp)
   14e60:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   14e64:	e037883a 	mov	sp,fp
   14e68:	dfc00117 	ldw	ra,4(sp)
   14e6c:	df000017 	ldw	fp,0(sp)
   14e70:	dec00204 	addi	sp,sp,8
   14e74:	f800283a 	ret

00014e78 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   14e78:	defff704 	addi	sp,sp,-36
   14e7c:	dfc00815 	stw	ra,32(sp)
   14e80:	df000715 	stw	fp,28(sp)
   14e84:	df000704 	addi	fp,sp,28
   14e88:	e13ffd15 	stw	r4,-12(fp)
   14e8c:	e17ffe15 	stw	r5,-8(fp)
   14e90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e94:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14e98:	e0bfff17 	ldw	r2,-4(fp)
   14e9c:	1000021e 	bne	r2,zero,14ea8 <OSEventNameGet+0x30>
        return (0);
   14ea0:	0005883a 	mov	r2,zero
   14ea4:	00003706 	br	14f84 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   14ea8:	e0bffd17 	ldw	r2,-12(fp)
   14eac:	1000051e 	bne	r2,zero,14ec4 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   14eb0:	e0bfff17 	ldw	r2,-4(fp)
   14eb4:	00c00104 	movi	r3,4
   14eb8:	10c00005 	stb	r3,0(r2)
        return (0);
   14ebc:	0005883a 	mov	r2,zero
   14ec0:	00003006 	br	14f84 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14ec4:	e0bffe17 	ldw	r2,-8(fp)
   14ec8:	1000051e 	bne	r2,zero,14ee0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14ecc:	e0bfff17 	ldw	r2,-4(fp)
   14ed0:	00c00304 	movi	r3,12
   14ed4:	10c00005 	stb	r3,0(r2)
        return (0);
   14ed8:	0005883a 	mov	r2,zero
   14edc:	00002906 	br	14f84 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14ee0:	d0a80e03 	ldbu	r2,-24520(gp)
   14ee4:	10803fcc 	andi	r2,r2,255
   14ee8:	10000526 	beq	r2,zero,14f00 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   14eec:	e0bfff17 	ldw	r2,-4(fp)
   14ef0:	00c00444 	movi	r3,17
   14ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   14ef8:	0005883a 	mov	r2,zero
   14efc:	00002106 	br	14f84 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   14f00:	e0bffd17 	ldw	r2,-12(fp)
   14f04:	10800003 	ldbu	r2,0(r2)
   14f08:	10803fcc 	andi	r2,r2,255
   14f0c:	10bfffc4 	addi	r2,r2,-1
   14f10:	10800128 	cmpgeui	r2,r2,4
   14f14:	10000526 	beq	r2,zero,14f2c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   14f18:	e0bfff17 	ldw	r2,-4(fp)
   14f1c:	00c00044 	movi	r3,1
   14f20:	10c00005 	stb	r3,0(r2)
             return (0);
   14f24:	0005883a 	mov	r2,zero
   14f28:	00001606 	br	14f84 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   14f2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f30:	0005303a 	rdctl	r2,status
   14f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f38:	e0fffb17 	ldw	r3,-20(fp)
   14f3c:	00bfff84 	movi	r2,-2
   14f40:	1884703a 	and	r2,r3,r2
   14f44:	1001703a 	wrctl	status,r2
  
  return context;
   14f48:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   14f4c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   14f50:	e0bffd17 	ldw	r2,-12(fp)
   14f54:	10800384 	addi	r2,r2,14
   14f58:	e13ffe17 	ldw	r4,-8(fp)
   14f5c:	100b883a 	mov	r5,r2
   14f60:	00168cc0 	call	168cc <OS_StrCopy>
   14f64:	e0bffa05 	stb	r2,-24(fp)
   14f68:	e0bff917 	ldw	r2,-28(fp)
   14f6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14f78:	e0bfff17 	ldw	r2,-4(fp)
   14f7c:	10000005 	stb	zero,0(r2)
    return (len);
   14f80:	e0bffa03 	ldbu	r2,-24(fp)
}
   14f84:	e037883a 	mov	sp,fp
   14f88:	dfc00117 	ldw	ra,4(sp)
   14f8c:	df000017 	ldw	fp,0(sp)
   14f90:	dec00204 	addi	sp,sp,8
   14f94:	f800283a 	ret

00014f98 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   14f98:	defff604 	addi	sp,sp,-40
   14f9c:	dfc00915 	stw	ra,36(sp)
   14fa0:	df000815 	stw	fp,32(sp)
   14fa4:	df000804 	addi	fp,sp,32
   14fa8:	e13ffd15 	stw	r4,-12(fp)
   14fac:	e17ffe15 	stw	r5,-8(fp)
   14fb0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14fb4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	1000011e 	bne	r2,zero,14fc4 <OSEventNameSet+0x2c>
        return;
   14fc0:	00003f06 	br	150c0 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	1000041e 	bne	r2,zero,14fdc <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14fcc:	e0bfff17 	ldw	r2,-4(fp)
   14fd0:	00c00104 	movi	r3,4
   14fd4:	10c00005 	stb	r3,0(r2)
        return;
   14fd8:	00003906 	br	150c0 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14fdc:	e0bffe17 	ldw	r2,-8(fp)
   14fe0:	1000041e 	bne	r2,zero,14ff4 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14fe4:	e0bfff17 	ldw	r2,-4(fp)
   14fe8:	00c00304 	movi	r3,12
   14fec:	10c00005 	stb	r3,0(r2)
        return;
   14ff0:	00003306 	br	150c0 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14ff4:	d0a80e03 	ldbu	r2,-24520(gp)
   14ff8:	10803fcc 	andi	r2,r2,255
   14ffc:	10000426 	beq	r2,zero,15010 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   15000:	e0bfff17 	ldw	r2,-4(fp)
   15004:	00c00484 	movi	r3,18
   15008:	10c00005 	stb	r3,0(r2)
        return;
   1500c:	00002c06 	br	150c0 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   15010:	e0bffd17 	ldw	r2,-12(fp)
   15014:	10800003 	ldbu	r2,0(r2)
   15018:	10803fcc 	andi	r2,r2,255
   1501c:	10bfffc4 	addi	r2,r2,-1
   15020:	10800128 	cmpgeui	r2,r2,4
   15024:	10000426 	beq	r2,zero,15038 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   15028:	e0bfff17 	ldw	r2,-4(fp)
   1502c:	00c00044 	movi	r3,1
   15030:	10c00005 	stb	r3,0(r2)
             return;
   15034:	00002206 	br	150c0 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   15038:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1503c:	0005303a 	rdctl	r2,status
   15040:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15044:	e0fffa17 	ldw	r3,-24(fp)
   15048:	00bfff84 	movi	r2,-2
   1504c:	1884703a 	and	r2,r3,r2
   15050:	1001703a 	wrctl	status,r2
  
  return context;
   15054:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   15058:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1505c:	e13ffe17 	ldw	r4,-8(fp)
   15060:	00169400 	call	16940 <OS_StrLen>
   15064:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   15068:	e0bff903 	ldbu	r2,-28(fp)
   1506c:	10800830 	cmpltui	r2,r2,32
   15070:	1000081e 	bne	r2,zero,15094 <OSEventNameSet+0xfc>
   15074:	e0bff817 	ldw	r2,-32(fp)
   15078:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1507c:	e0bffb17 	ldw	r2,-20(fp)
   15080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   15084:	e0bfff17 	ldw	r2,-4(fp)
   15088:	00c002c4 	movi	r3,11
   1508c:	10c00005 	stb	r3,0(r2)
        return;
   15090:	00000b06 	br	150c0 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   15094:	e0bffd17 	ldw	r2,-12(fp)
   15098:	10800384 	addi	r2,r2,14
   1509c:	1009883a 	mov	r4,r2
   150a0:	e17ffe17 	ldw	r5,-8(fp)
   150a4:	00168cc0 	call	168cc <OS_StrCopy>
   150a8:	e0bff817 	ldw	r2,-32(fp)
   150ac:	e0bffc15 	stw	r2,-16(fp)
   150b0:	e0bffc17 	ldw	r2,-16(fp)
   150b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   150b8:	e0bfff17 	ldw	r2,-4(fp)
   150bc:	10000005 	stb	zero,0(r2)
}
   150c0:	e037883a 	mov	sp,fp
   150c4:	dfc00117 	ldw	ra,4(sp)
   150c8:	df000017 	ldw	fp,0(sp)
   150cc:	dec00204 	addi	sp,sp,8
   150d0:	f800283a 	ret

000150d4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   150d4:	deffed04 	addi	sp,sp,-76
   150d8:	dfc01215 	stw	ra,72(sp)
   150dc:	df001115 	stw	fp,68(sp)
   150e0:	df001104 	addi	fp,sp,68
   150e4:	e13ffc15 	stw	r4,-16(fp)
   150e8:	e17ffd15 	stw	r5,-12(fp)
   150ec:	e1bffe15 	stw	r6,-8(fp)
   150f0:	3805883a 	mov	r2,r7
   150f4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   150f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   150fc:	e0800217 	ldw	r2,8(fp)
   15100:	1000021e 	bne	r2,zero,1510c <OSEventPendMulti+0x38>
        return (0);
   15104:	0005883a 	mov	r2,zero
   15108:	00017106 	br	156d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1510c:	e0bffc17 	ldw	r2,-16(fp)
   15110:	1000051e 	bne	r2,zero,15128 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   15114:	e0800217 	ldw	r2,8(fp)
   15118:	00c00104 	movi	r3,4
   1511c:	10c00005 	stb	r3,0(r2)
        return (0);
   15120:	0005883a 	mov	r2,zero
   15124:	00016a06 	br	156d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   15128:	e0bffd17 	ldw	r2,-12(fp)
   1512c:	1000051e 	bne	r2,zero,15144 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   15130:	e0800217 	ldw	r2,8(fp)
   15134:	00c00104 	movi	r3,4
   15138:	10c00005 	stb	r3,0(r2)
        return (0);
   1513c:	0005883a 	mov	r2,zero
   15140:	00016306 	br	156d0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   15144:	e0bffe17 	ldw	r2,-8(fp)
   15148:	1000051e 	bne	r2,zero,15160 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   1514c:	e0800217 	ldw	r2,8(fp)
   15150:	00c00104 	movi	r3,4
   15154:	10c00005 	stb	r3,0(r2)
        return (0);
   15158:	0005883a 	mov	r2,zero
   1515c:	00015c06 	br	156d0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   15160:	e0bffd17 	ldw	r2,-12(fp)
   15164:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   15168:	e0bffc17 	ldw	r2,-16(fp)
   1516c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   15170:	e0bfef17 	ldw	r2,-68(fp)
   15174:	10800017 	ldw	r2,0(r2)
   15178:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   1517c:	00001906 	br	151e4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   15180:	e0bff017 	ldw	r2,-64(fp)
   15184:	10800003 	ldbu	r2,0(r2)
   15188:	10803fcc 	andi	r2,r2,255
   1518c:	10c000a0 	cmpeqi	r3,r2,2
   15190:	1800091e 	bne	r3,zero,151b8 <OSEventPendMulti+0xe4>
   15194:	10c000e0 	cmpeqi	r3,r2,3
   15198:	1800091e 	bne	r3,zero,151c0 <OSEventPendMulti+0xec>
   1519c:	10800060 	cmpeqi	r2,r2,1
   151a0:	1000091e 	bne	r2,zero,151c8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   151a4:	e0800217 	ldw	r2,8(fp)
   151a8:	00c00044 	movi	r3,1
   151ac:	10c00005 	stb	r3,0(r2)
                 return (0);
   151b0:	0005883a 	mov	r2,zero
   151b4:	00014606 	br	156d0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   151b8:	0001883a 	nop
   151bc:	00000306 	br	151cc <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   151c0:	0001883a 	nop
   151c4:	00000106 	br	151cc <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   151c8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   151cc:	e0bfef17 	ldw	r2,-68(fp)
   151d0:	10800104 	addi	r2,r2,4
   151d4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   151d8:	e0bfef17 	ldw	r2,-68(fp)
   151dc:	10800017 	ldw	r2,0(r2)
   151e0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   151e4:	e0bff017 	ldw	r2,-64(fp)
   151e8:	103fe51e 	bne	r2,zero,15180 <__alt_mem_Flash_flash_data+0xf4015180>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   151ec:	d0a80e03 	ldbu	r2,-24520(gp)
   151f0:	10803fcc 	andi	r2,r2,255
   151f4:	10000526 	beq	r2,zero,1520c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   151f8:	e0800217 	ldw	r2,8(fp)
   151fc:	00c00084 	movi	r3,2
   15200:	10c00005 	stb	r3,0(r2)
        return (0);
   15204:	0005883a 	mov	r2,zero
   15208:	00013106 	br	156d0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1520c:	d0a80003 	ldbu	r2,-24576(gp)
   15210:	10803fcc 	andi	r2,r2,255
   15214:	10000526 	beq	r2,zero,1522c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   15218:	e0800217 	ldw	r2,8(fp)
   1521c:	00c00344 	movi	r3,13
   15220:	10c00005 	stb	r3,0(r2)
        return (0);
   15224:	0005883a 	mov	r2,zero
   15228:	00012906 	br	156d0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1522c:	0005303a 	rdctl	r2,status
   15230:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15234:	e0fff517 	ldw	r3,-44(fp)
   15238:	00bfff84 	movi	r2,-2
   1523c:	1884703a 	and	r2,r3,r2
   15240:	1001703a 	wrctl	status,r2
  
  return context;
   15244:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   15248:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   1524c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   15250:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   15254:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   15258:	e0bffc17 	ldw	r2,-16(fp)
   1525c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   15260:	e0bfef17 	ldw	r2,-68(fp)
   15264:	10800017 	ldw	r2,0(r2)
   15268:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1526c:	00008106 	br	15474 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   15270:	e0bff017 	ldw	r2,-64(fp)
   15274:	10800003 	ldbu	r2,0(r2)
   15278:	10803fcc 	andi	r2,r2,255
   1527c:	10c000a0 	cmpeqi	r3,r2,2
   15280:	18003c1e 	bne	r3,zero,15374 <OSEventPendMulti+0x2a0>
   15284:	10c000e0 	cmpeqi	r3,r2,3
   15288:	1800031e 	bne	r3,zero,15298 <OSEventPendMulti+0x1c4>
   1528c:	10800060 	cmpeqi	r2,r2,1
   15290:	10001e1e 	bne	r2,zero,1530c <OSEventPendMulti+0x238>
   15294:	00006606 	br	15430 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   15298:	e0bff017 	ldw	r2,-64(fp)
   1529c:	1080020b 	ldhu	r2,8(r2)
   152a0:	10bfffcc 	andi	r2,r2,65535
   152a4:	10001526 	beq	r2,zero,152fc <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   152a8:	e0bff017 	ldw	r2,-64(fp)
   152ac:	1080020b 	ldhu	r2,8(r2)
   152b0:	10bfffc4 	addi	r2,r2,-1
   152b4:	1007883a 	mov	r3,r2
   152b8:	e0bff017 	ldw	r2,-64(fp)
   152bc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   152c0:	e0bffd17 	ldw	r2,-12(fp)
   152c4:	10c00104 	addi	r3,r2,4
   152c8:	e0fffd15 	stw	r3,-12(fp)
   152cc:	e0fff017 	ldw	r3,-64(fp)
   152d0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   152d4:	00800044 	movi	r2,1
   152d8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   152dc:	e0bffe17 	ldw	r2,-8(fp)
   152e0:	10c00104 	addi	r3,r2,4
   152e4:	e0fffe15 	stw	r3,-8(fp)
   152e8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   152ec:	e0bff18b 	ldhu	r2,-58(fp)
   152f0:	10800044 	addi	r2,r2,1
   152f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   152f8:	00005806 	br	1545c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   152fc:	e0bff203 	ldbu	r2,-56(fp)
   15300:	10800054 	ori	r2,r2,1
   15304:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   15308:	00005406 	br	1545c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1530c:	e0bff017 	ldw	r2,-64(fp)
   15310:	10800117 	ldw	r2,4(r2)
   15314:	10001326 	beq	r2,zero,15364 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   15318:	e0bffe17 	ldw	r2,-8(fp)
   1531c:	10c00104 	addi	r3,r2,4
   15320:	e0fffe15 	stw	r3,-8(fp)
   15324:	e0fff017 	ldw	r3,-64(fp)
   15328:	18c00117 	ldw	r3,4(r3)
   1532c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   15330:	e0bff017 	ldw	r2,-64(fp)
   15334:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   15338:	e0bffd17 	ldw	r2,-12(fp)
   1533c:	10c00104 	addi	r3,r2,4
   15340:	e0fffd15 	stw	r3,-12(fp)
   15344:	e0fff017 	ldw	r3,-64(fp)
   15348:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   1534c:	00800044 	movi	r2,1
   15350:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   15354:	e0bff18b 	ldhu	r2,-58(fp)
   15358:	10800044 	addi	r2,r2,1
   1535c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   15360:	00003e06 	br	1545c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   15364:	e0bff203 	ldbu	r2,-56(fp)
   15368:	10800094 	ori	r2,r2,2
   1536c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   15370:	00003a06 	br	1545c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   15374:	e0bff017 	ldw	r2,-64(fp)
   15378:	10800117 	ldw	r2,4(r2)
   1537c:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   15380:	e0bff417 	ldw	r2,-48(fp)
   15384:	1080058b 	ldhu	r2,22(r2)
   15388:	10bfffcc 	andi	r2,r2,65535
   1538c:	10002426 	beq	r2,zero,15420 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   15390:	e0bffe17 	ldw	r2,-8(fp)
   15394:	10c00104 	addi	r3,r2,4
   15398:	e0fffe15 	stw	r3,-8(fp)
   1539c:	e0fff417 	ldw	r3,-48(fp)
   153a0:	18c00417 	ldw	r3,16(r3)
   153a4:	19400104 	addi	r5,r3,4
   153a8:	e13ff417 	ldw	r4,-48(fp)
   153ac:	21400415 	stw	r5,16(r4)
   153b0:	18c00017 	ldw	r3,0(r3)
   153b4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   153b8:	e0bff417 	ldw	r2,-48(fp)
   153bc:	10c00417 	ldw	r3,16(r2)
   153c0:	e0bff417 	ldw	r2,-48(fp)
   153c4:	10800217 	ldw	r2,8(r2)
   153c8:	1880041e 	bne	r3,r2,153dc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   153cc:	e0bff417 	ldw	r2,-48(fp)
   153d0:	10c00117 	ldw	r3,4(r2)
   153d4:	e0bff417 	ldw	r2,-48(fp)
   153d8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   153dc:	e0bff417 	ldw	r2,-48(fp)
   153e0:	1080058b 	ldhu	r2,22(r2)
   153e4:	10bfffc4 	addi	r2,r2,-1
   153e8:	1007883a 	mov	r3,r2
   153ec:	e0bff417 	ldw	r2,-48(fp)
   153f0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   153f4:	e0bffd17 	ldw	r2,-12(fp)
   153f8:	10c00104 	addi	r3,r2,4
   153fc:	e0fffd15 	stw	r3,-12(fp)
   15400:	e0fff017 	ldw	r3,-64(fp)
   15404:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   15408:	00800044 	movi	r2,1
   1540c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   15410:	e0bff18b 	ldhu	r2,-58(fp)
   15414:	10800044 	addi	r2,r2,1
   15418:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1541c:	00000f06 	br	1545c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   15420:	e0bff203 	ldbu	r2,-56(fp)
   15424:	10800114 	ori	r2,r2,4
   15428:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1542c:	00000b06 	br	1545c <OSEventPendMulti+0x388>
   15430:	e0bff317 	ldw	r2,-52(fp)
   15434:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15438:	e0bff617 	ldw	r2,-40(fp)
   1543c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   15440:	e0bffd17 	ldw	r2,-12(fp)
   15444:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   15448:	e0800217 	ldw	r2,8(fp)
   1544c:	00c00044 	movi	r3,1
   15450:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   15454:	e0bff18b 	ldhu	r2,-58(fp)
   15458:	00009d06 	br	156d0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   1545c:	e0bfef17 	ldw	r2,-68(fp)
   15460:	10800104 	addi	r2,r2,4
   15464:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   15468:	e0bfef17 	ldw	r2,-68(fp)
   1546c:	10800017 	ldw	r2,0(r2)
   15470:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   15474:	e0bff017 	ldw	r2,-64(fp)
   15478:	103f7d1e 	bne	r2,zero,15270 <__alt_mem_Flash_flash_data+0xf4015270>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   1547c:	e0bff103 	ldbu	r2,-60(fp)
   15480:	10800058 	cmpnei	r2,r2,1
   15484:	10000a1e 	bne	r2,zero,154b0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   15488:	e0bffd17 	ldw	r2,-12(fp)
   1548c:	10000015 	stw	zero,0(r2)
   15490:	e0bff317 	ldw	r2,-52(fp)
   15494:	e0bff715 	stw	r2,-36(fp)
   15498:	e0bff717 	ldw	r2,-36(fp)
   1549c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   154a0:	e0800217 	ldw	r2,8(fp)
   154a4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   154a8:	e0bff18b 	ldhu	r2,-58(fp)
   154ac:	00008806 	br	156d0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   154b0:	d0a80f17 	ldw	r2,-24516(gp)
   154b4:	d0e80f17 	ldw	r3,-24516(gp)
   154b8:	19000c03 	ldbu	r4,48(r3)
   154bc:	e0fff203 	ldbu	r3,-56(fp)
   154c0:	20c6b03a 	or	r3,r4,r3
   154c4:	1809883a 	mov	r4,r3
   154c8:	00ffe004 	movi	r3,-128
   154cc:	20c6b03a 	or	r3,r4,r3
   154d0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   154d4:	d0a80f17 	ldw	r2,-24516(gp)
   154d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   154dc:	d0a80f17 	ldw	r2,-24516(gp)
   154e0:	e0ffff0b 	ldhu	r3,-4(fp)
   154e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   154e8:	e13ffc17 	ldw	r4,-16(fp)
   154ec:	001601c0 	call	1601c <OS_EventTaskWaitMulti>
   154f0:	e0bff317 	ldw	r2,-52(fp)
   154f4:	e0bff815 	stw	r2,-32(fp)
   154f8:	e0bff817 	ldw	r2,-32(fp)
   154fc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   15500:	00167900 	call	16790 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15504:	0005303a 	rdctl	r2,status
   15508:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1550c:	e0fff917 	ldw	r3,-28(fp)
   15510:	00bfff84 	movi	r2,-2
   15514:	1884703a 	and	r2,r3,r2
   15518:	1001703a 	wrctl	status,r2
  
  return context;
   1551c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   15520:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   15524:	d0a80f17 	ldw	r2,-24516(gp)
   15528:	10800c43 	ldbu	r2,49(r2)
   1552c:	10803fcc 	andi	r2,r2,255
   15530:	10000226 	beq	r2,zero,1553c <OSEventPendMulti+0x468>
   15534:	108000a0 	cmpeqi	r2,r2,2
   15538:	10001826 	beq	r2,zero,1559c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   1553c:	d0a80f17 	ldw	r2,-24516(gp)
   15540:	10800717 	ldw	r2,28(r2)
   15544:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   15548:	e0bff017 	ldw	r2,-64(fp)
   1554c:	10000b26 	beq	r2,zero,1557c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	10c00104 	addi	r3,r2,4
   15558:	e0fffd15 	stw	r3,-12(fp)
   1555c:	e0fff017 	ldw	r3,-64(fp)
   15560:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   15564:	e0bffd17 	ldw	r2,-12(fp)
   15568:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   1556c:	e0bff18b 	ldhu	r2,-58(fp)
   15570:	10800044 	addi	r2,r2,1
   15574:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   15578:	00000d06 	br	155b0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   1557c:	d0a80f17 	ldw	r2,-24516(gp)
   15580:	00c00044 	movi	r3,1
   15584:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   15588:	d0a80f17 	ldw	r2,-24516(gp)
   1558c:	1009883a 	mov	r4,r2
   15590:	e17ffc17 	ldw	r5,-16(fp)
   15594:	001621c0 	call	1621c <OS_EventTaskRemoveMulti>
             }
			 break;
   15598:	00000506 	br	155b0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1559c:	d0a80f17 	ldw	r2,-24516(gp)
   155a0:	1009883a 	mov	r4,r2
   155a4:	e17ffc17 	ldw	r5,-16(fp)
   155a8:	001621c0 	call	1621c <OS_EventTaskRemoveMulti>
             break;
   155ac:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   155b0:	d0a80f17 	ldw	r2,-24516(gp)
   155b4:	10800c43 	ldbu	r2,49(r2)
   155b8:	10803fcc 	andi	r2,r2,255
   155bc:	10000326 	beq	r2,zero,155cc <OSEventPendMulti+0x4f8>
   155c0:	108000a0 	cmpeqi	r2,r2,2
   155c4:	1000231e 	bne	r2,zero,15654 <OSEventPendMulti+0x580>
   155c8:	00002a06 	br	15674 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   155cc:	e0bff017 	ldw	r2,-64(fp)
   155d0:	10800003 	ldbu	r2,0(r2)
   155d4:	10803fcc 	andi	r2,r2,255
   155d8:	0080100e 	bge	zero,r2,1561c <OSEventPendMulti+0x548>
   155dc:	10c000d0 	cmplti	r3,r2,3
   155e0:	1800071e 	bne	r3,zero,15600 <OSEventPendMulti+0x52c>
   155e4:	108000e0 	cmpeqi	r2,r2,3
   155e8:	10000c26 	beq	r2,zero,1561c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   155ec:	e0bffe17 	ldw	r2,-8(fp)
   155f0:	10c00104 	addi	r3,r2,4
   155f4:	e0fffe15 	stw	r3,-8(fp)
   155f8:	10000015 	stw	zero,0(r2)
                      break;
   155fc:	00001206 	br	15648 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   15600:	e0bffe17 	ldw	r2,-8(fp)
   15604:	10c00104 	addi	r3,r2,4
   15608:	e0fffe15 	stw	r3,-8(fp)
   1560c:	d0e80f17 	ldw	r3,-24516(gp)
   15610:	18c00917 	ldw	r3,36(r3)
   15614:	10c00015 	stw	r3,0(r2)
                      break;
   15618:	00000b06 	br	15648 <OSEventPendMulti+0x574>
   1561c:	e0bff317 	ldw	r2,-52(fp)
   15620:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15624:	e0bffa17 	ldw	r2,-24(fp)
   15628:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   15634:	e0800217 	ldw	r2,8(fp)
   15638:	00c00044 	movi	r3,1
   1563c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   15640:	e0bff18b 	ldhu	r2,-58(fp)
   15644:	00002206 	br	156d0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   15648:	e0800217 	ldw	r2,8(fp)
   1564c:	10000005 	stb	zero,0(r2)
             break;
   15650:	00001006 	br	15694 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   15654:	e0bffe17 	ldw	r2,-8(fp)
   15658:	10c00104 	addi	r3,r2,4
   1565c:	e0fffe15 	stw	r3,-8(fp)
   15660:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   15664:	e0800217 	ldw	r2,8(fp)
   15668:	00c00384 	movi	r3,14
   1566c:	10c00005 	stb	r3,0(r2)
             break;
   15670:	00000806 	br	15694 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   15674:	e0bffe17 	ldw	r2,-8(fp)
   15678:	10c00104 	addi	r3,r2,4
   1567c:	e0fffe15 	stw	r3,-8(fp)
   15680:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   15684:	e0800217 	ldw	r2,8(fp)
   15688:	00c00284 	movi	r3,10
   1568c:	10c00005 	stb	r3,0(r2)
             break;
   15690:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   15694:	d0a80f17 	ldw	r2,-24516(gp)
   15698:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   1569c:	d0a80f17 	ldw	r2,-24516(gp)
   156a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   156a4:	d0a80f17 	ldw	r2,-24516(gp)
   156a8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   156ac:	d0a80f17 	ldw	r2,-24516(gp)
   156b0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   156b4:	d0a80f17 	ldw	r2,-24516(gp)
   156b8:	10000915 	stw	zero,36(r2)
   156bc:	e0bff317 	ldw	r2,-52(fp)
   156c0:	e0bffb15 	stw	r2,-20(fp)
   156c4:	e0bffb17 	ldw	r2,-20(fp)
   156c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   156cc:	e0bff18b 	ldhu	r2,-58(fp)
}
   156d0:	e037883a 	mov	sp,fp
   156d4:	dfc00117 	ldw	ra,4(sp)
   156d8:	df000017 	ldw	fp,0(sp)
   156dc:	dec00204 	addi	sp,sp,8
   156e0:	f800283a 	ret

000156e4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   156e4:	defffe04 	addi	sp,sp,-8
   156e8:	dfc00115 	stw	ra,4(sp)
   156ec:	df000015 	stw	fp,0(sp)
   156f0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   156f4:	00200900 	call	20090 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   156f8:	00164580 	call	16458 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   156fc:	001649c0 	call	1649c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   15700:	00165fc0 	call	165fc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   15704:	001637c0 	call	1637c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   15708:	001857c0 	call	1857c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   1570c:	0018ec40 	call	18ec4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   15710:	001a0f80 	call	1a0f8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   15714:	00165040 	call	16504 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   15718:	00165800 	call	16580 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   1571c:	00200ac0 	call	200ac <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   15720:	0016e680 	call	16e68 <OSDebugInit>
#endif
}
   15724:	e037883a 	mov	sp,fp
   15728:	dfc00117 	ldw	ra,4(sp)
   1572c:	df000017 	ldw	fp,0(sp)
   15730:	dec00204 	addi	sp,sp,8
   15734:	f800283a 	ret

00015738 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   15738:	defffc04 	addi	sp,sp,-16
   1573c:	df000315 	stw	fp,12(sp)
   15740:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15744:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   15748:	d0a80043 	ldbu	r2,-24575(gp)
   1574c:	10803fcc 	andi	r2,r2,255
   15750:	10800058 	cmpnei	r2,r2,1
   15754:	1000131e 	bne	r2,zero,157a4 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15758:	0005303a 	rdctl	r2,status
   1575c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15760:	e0fffe17 	ldw	r3,-8(fp)
   15764:	00bfff84 	movi	r2,-2
   15768:	1884703a 	and	r2,r3,r2
   1576c:	1001703a 	wrctl	status,r2
  
  return context;
   15770:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15774:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   15778:	d0a80e03 	ldbu	r2,-24520(gp)
   1577c:	10803fcc 	andi	r2,r2,255
   15780:	10803fe0 	cmpeqi	r2,r2,255
   15784:	1000031e 	bne	r2,zero,15794 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   15788:	d0a80e03 	ldbu	r2,-24520(gp)
   1578c:	10800044 	addi	r2,r2,1
   15790:	d0a80e05 	stb	r2,-24520(gp)
   15794:	e0bffd17 	ldw	r2,-12(fp)
   15798:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1579c:	e0bfff17 	ldw	r2,-4(fp)
   157a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   157a4:	e037883a 	mov	sp,fp
   157a8:	df000017 	ldw	fp,0(sp)
   157ac:	dec00104 	addi	sp,sp,4
   157b0:	f800283a 	ret

000157b4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   157b4:	defffb04 	addi	sp,sp,-20
   157b8:	dfc00415 	stw	ra,16(sp)
   157bc:	df000315 	stw	fp,12(sp)
   157c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   157c4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   157c8:	d0a80043 	ldbu	r2,-24575(gp)
   157cc:	10803fcc 	andi	r2,r2,255
   157d0:	10800058 	cmpnei	r2,r2,1
   157d4:	10002f1e 	bne	r2,zero,15894 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157d8:	0005303a 	rdctl	r2,status
   157dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157e0:	e0fffe17 	ldw	r3,-8(fp)
   157e4:	00bfff84 	movi	r2,-2
   157e8:	1884703a 	and	r2,r3,r2
   157ec:	1001703a 	wrctl	status,r2
  
  return context;
   157f0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   157f4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   157f8:	d0a80e03 	ldbu	r2,-24520(gp)
   157fc:	10803fcc 	andi	r2,r2,255
   15800:	10000326 	beq	r2,zero,15810 <OSIntExit+0x5c>
            OSIntNesting--;
   15804:	d0a80e03 	ldbu	r2,-24520(gp)
   15808:	10bfffc4 	addi	r2,r2,-1
   1580c:	d0a80e05 	stb	r2,-24520(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   15810:	d0a80e03 	ldbu	r2,-24520(gp)
   15814:	10803fcc 	andi	r2,r2,255
   15818:	10001a1e 	bne	r2,zero,15884 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1581c:	d0a80003 	ldbu	r2,-24576(gp)
   15820:	10803fcc 	andi	r2,r2,255
   15824:	1000171e 	bne	r2,zero,15884 <OSIntExit+0xd0>
                OS_SchedNew();
   15828:	001685c0 	call	1685c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1582c:	d0e80203 	ldbu	r3,-24568(gp)
   15830:	d0a80243 	ldbu	r2,-24567(gp)
   15834:	18c03fcc 	andi	r3,r3,255
   15838:	10803fcc 	andi	r2,r2,255
   1583c:	18801126 	beq	r3,r2,15884 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   15840:	d0a80203 	ldbu	r2,-24568(gp)
   15844:	10c03fcc 	andi	r3,r2,255
   15848:	008000f4 	movhi	r2,3
   1584c:	10b07504 	addi	r2,r2,-15916
   15850:	18c7883a 	add	r3,r3,r3
   15854:	18c7883a 	add	r3,r3,r3
   15858:	10c5883a 	add	r2,r2,r3
   1585c:	10800017 	ldw	r2,0(r2)
   15860:	d0a80a15 	stw	r2,-24536(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   15864:	d0a80a17 	ldw	r2,-24536(gp)
   15868:	10c00e17 	ldw	r3,56(r2)
   1586c:	18c00044 	addi	r3,r3,1
   15870:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   15874:	d0a80517 	ldw	r2,-24556(gp)
   15878:	10800044 	addi	r2,r2,1
   1587c:	d0a80515 	stw	r2,-24556(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   15880:	001fdd00 	call	1fdd0 <OSCtxSw>
   15884:	e0bffd17 	ldw	r2,-12(fp)
   15888:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1588c:	e0bfff17 	ldw	r2,-4(fp)
   15890:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   15894:	e037883a 	mov	sp,fp
   15898:	dfc00117 	ldw	ra,4(sp)
   1589c:	df000017 	ldw	fp,0(sp)
   158a0:	dec00204 	addi	sp,sp,8
   158a4:	f800283a 	ret

000158a8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   158a8:	defffc04 	addi	sp,sp,-16
   158ac:	df000315 	stw	fp,12(sp)
   158b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158b4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   158b8:	d0a80043 	ldbu	r2,-24575(gp)
   158bc:	10803fcc 	andi	r2,r2,255
   158c0:	10800058 	cmpnei	r2,r2,1
   158c4:	1000161e 	bne	r2,zero,15920 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158c8:	0005303a 	rdctl	r2,status
   158cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158d0:	e0fffe17 	ldw	r3,-8(fp)
   158d4:	00bfff84 	movi	r2,-2
   158d8:	1884703a 	and	r2,r3,r2
   158dc:	1001703a 	wrctl	status,r2
  
  return context;
   158e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   158e4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   158e8:	d0a80e03 	ldbu	r2,-24520(gp)
   158ec:	10803fcc 	andi	r2,r2,255
   158f0:	1000071e 	bne	r2,zero,15910 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   158f4:	d0a80003 	ldbu	r2,-24576(gp)
   158f8:	10803fcc 	andi	r2,r2,255
   158fc:	10803fe0 	cmpeqi	r2,r2,255
   15900:	1000031e 	bne	r2,zero,15910 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   15904:	d0a80003 	ldbu	r2,-24576(gp)
   15908:	10800044 	addi	r2,r2,1
   1590c:	d0a80005 	stb	r2,-24576(gp)
   15910:	e0bffd17 	ldw	r2,-12(fp)
   15914:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15918:	e0bfff17 	ldw	r2,-4(fp)
   1591c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   15920:	e037883a 	mov	sp,fp
   15924:	df000017 	ldw	fp,0(sp)
   15928:	dec00104 	addi	sp,sp,4
   1592c:	f800283a 	ret

00015930 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   15930:	defff804 	addi	sp,sp,-32
   15934:	dfc00715 	stw	ra,28(sp)
   15938:	df000615 	stw	fp,24(sp)
   1593c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15940:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   15944:	d0a80043 	ldbu	r2,-24575(gp)
   15948:	10803fcc 	andi	r2,r2,255
   1594c:	10800058 	cmpnei	r2,r2,1
   15950:	1000281e 	bne	r2,zero,159f4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15954:	0005303a 	rdctl	r2,status
   15958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1595c:	e0fffb17 	ldw	r3,-20(fp)
   15960:	00bfff84 	movi	r2,-2
   15964:	1884703a 	and	r2,r3,r2
   15968:	1001703a 	wrctl	status,r2
  
  return context;
   1596c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   15970:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   15974:	d0a80003 	ldbu	r2,-24576(gp)
   15978:	10803fcc 	andi	r2,r2,255
   1597c:	10001926 	beq	r2,zero,159e4 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   15980:	d0a80003 	ldbu	r2,-24576(gp)
   15984:	10bfffc4 	addi	r2,r2,-1
   15988:	d0a80005 	stb	r2,-24576(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   1598c:	d0a80003 	ldbu	r2,-24576(gp)
   15990:	10803fcc 	andi	r2,r2,255
   15994:	10000e1e 	bne	r2,zero,159d0 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   15998:	d0a80e03 	ldbu	r2,-24520(gp)
   1599c:	10803fcc 	andi	r2,r2,255
   159a0:	1000061e 	bne	r2,zero,159bc <OSSchedUnlock+0x8c>
   159a4:	e0bffa17 	ldw	r2,-24(fp)
   159a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159ac:	e0bffc17 	ldw	r2,-16(fp)
   159b0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   159b4:	00167900 	call	16790 <OS_Sched>
   159b8:	00000e06 	br	159f4 <OSSchedUnlock+0xc4>
   159bc:	e0bffa17 	ldw	r2,-24(fp)
   159c0:	e0bffd15 	stw	r2,-12(fp)
   159c4:	e0bffd17 	ldw	r2,-12(fp)
   159c8:	1001703a 	wrctl	status,r2
   159cc:	00000906 	br	159f4 <OSSchedUnlock+0xc4>
   159d0:	e0bffa17 	ldw	r2,-24(fp)
   159d4:	e0bffe15 	stw	r2,-8(fp)
   159d8:	e0bffe17 	ldw	r2,-8(fp)
   159dc:	1001703a 	wrctl	status,r2
   159e0:	00000406 	br	159f4 <OSSchedUnlock+0xc4>
   159e4:	e0bffa17 	ldw	r2,-24(fp)
   159e8:	e0bfff15 	stw	r2,-4(fp)
   159ec:	e0bfff17 	ldw	r2,-4(fp)
   159f0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   159f4:	e037883a 	mov	sp,fp
   159f8:	dfc00117 	ldw	ra,4(sp)
   159fc:	df000017 	ldw	fp,0(sp)
   15a00:	dec00204 	addi	sp,sp,8
   15a04:	f800283a 	ret

00015a08 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   15a08:	defffe04 	addi	sp,sp,-8
   15a0c:	dfc00115 	stw	ra,4(sp)
   15a10:	df000015 	stw	fp,0(sp)
   15a14:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   15a18:	d0a80043 	ldbu	r2,-24575(gp)
   15a1c:	10803fcc 	andi	r2,r2,255
   15a20:	10000f1e 	bne	r2,zero,15a60 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   15a24:	001685c0 	call	1685c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   15a28:	d0a80203 	ldbu	r2,-24568(gp)
   15a2c:	d0a80245 	stb	r2,-24567(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   15a30:	d0a80203 	ldbu	r2,-24568(gp)
   15a34:	10c03fcc 	andi	r3,r2,255
   15a38:	008000f4 	movhi	r2,3
   15a3c:	10b07504 	addi	r2,r2,-15916
   15a40:	18c7883a 	add	r3,r3,r3
   15a44:	18c7883a 	add	r3,r3,r3
   15a48:	10c5883a 	add	r2,r2,r3
   15a4c:	10800017 	ldw	r2,0(r2)
   15a50:	d0a80a15 	stw	r2,-24536(gp)
        OSTCBCur      = OSTCBHighRdy;
   15a54:	d0a80a17 	ldw	r2,-24536(gp)
   15a58:	d0a80f15 	stw	r2,-24516(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   15a5c:	001fe5c0 	call	1fe5c <OSStartHighRdy>
    }
}
   15a60:	e037883a 	mov	sp,fp
   15a64:	dfc00117 	ldw	ra,4(sp)
   15a68:	df000017 	ldw	fp,0(sp)
   15a6c:	dec00204 	addi	sp,sp,8
   15a70:	f800283a 	ret

00015a74 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   15a74:	defff904 	addi	sp,sp,-28
   15a78:	dfc00615 	stw	ra,24(sp)
   15a7c:	df000515 	stw	fp,20(sp)
   15a80:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15a84:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   15a88:	01000084 	movi	r4,2
   15a8c:	001c5a00 	call	1c5a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a90:	0005303a 	rdctl	r2,status
   15a94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a98:	e0fffc17 	ldw	r3,-16(fp)
   15a9c:	00bfff84 	movi	r2,-2
   15aa0:	1884703a 	and	r2,r3,r2
   15aa4:	1001703a 	wrctl	status,r2
  
  return context;
   15aa8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   15aac:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   15ab0:	d0280115 	stw	zero,-24572(gp)
   15ab4:	e0bffb17 	ldw	r2,-20(fp)
   15ab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15abc:	e0bffd17 	ldw	r2,-12(fp)
   15ac0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   15ac4:	0009883a 	mov	r4,zero
   15ac8:	001c5a00 	call	1c5a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15acc:	0005303a 	rdctl	r2,status
   15ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ad4:	e0fffe17 	ldw	r3,-8(fp)
   15ad8:	00bfff84 	movi	r2,-2
   15adc:	1884703a 	and	r2,r3,r2
   15ae0:	1001703a 	wrctl	status,r2
  
  return context;
   15ae4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   15ae8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   15aec:	d0a80117 	ldw	r2,-24572(gp)
   15af0:	d0a80615 	stw	r2,-24552(gp)
    OSStatRdy    = OS_TRUE;
   15af4:	00800044 	movi	r2,1
   15af8:	d0a81205 	stb	r2,-24504(gp)
   15afc:	e0bffb17 	ldw	r2,-20(fp)
   15b00:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b04:	e0bfff17 	ldw	r2,-4(fp)
   15b08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15b0c:	e037883a 	mov	sp,fp
   15b10:	dfc00117 	ldw	ra,4(sp)
   15b14:	df000017 	ldw	fp,0(sp)
   15b18:	dec00204 	addi	sp,sp,8
   15b1c:	f800283a 	ret

00015b20 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   15b20:	defff704 	addi	sp,sp,-36
   15b24:	dfc00815 	stw	ra,32(sp)
   15b28:	df000715 	stw	fp,28(sp)
   15b2c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15b30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   15b34:	00200740 	call	20074 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b38:	0005303a 	rdctl	r2,status
   15b3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b40:	e0fffc17 	ldw	r3,-16(fp)
   15b44:	00bfff84 	movi	r2,-2
   15b48:	1884703a 	and	r2,r3,r2
   15b4c:	1001703a 	wrctl	status,r2
  
  return context;
   15b50:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   15b54:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   15b58:	d0a81017 	ldw	r2,-24512(gp)
   15b5c:	10800044 	addi	r2,r2,1
   15b60:	d0a81015 	stw	r2,-24512(gp)
   15b64:	e0bffb17 	ldw	r2,-20(fp)
   15b68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b6c:	e0bffd17 	ldw	r2,-12(fp)
   15b70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   15b74:	d0a80043 	ldbu	r2,-24575(gp)
   15b78:	10803fcc 	andi	r2,r2,255
   15b7c:	10800058 	cmpnei	r2,r2,1
   15b80:	1000691e 	bne	r2,zero,15d28 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   15b84:	d0a80403 	ldbu	r2,-24560(gp)
   15b88:	10803fcc 	andi	r2,r2,255
   15b8c:	10c00060 	cmpeqi	r3,r2,1
   15b90:	1800061e 	bne	r3,zero,15bac <OSTimeTick+0x8c>
   15b94:	10c000a0 	cmpeqi	r3,r2,2
   15b98:	1800061e 	bne	r3,zero,15bb4 <OSTimeTick+0x94>
   15b9c:	10000a1e 	bne	r2,zero,15bc8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   15ba0:	00800044 	movi	r2,1
   15ba4:	e0bffa05 	stb	r2,-24(fp)
                 break;
   15ba8:	00000b06 	br	15bd8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   15bac:	e03ffa05 	stb	zero,-24(fp)
                 break;
   15bb0:	00000906 	br	15bd8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   15bb4:	00800044 	movi	r2,1
   15bb8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   15bbc:	00800044 	movi	r2,1
   15bc0:	d0a80405 	stb	r2,-24560(gp)
                 break;
   15bc4:	00000406 	br	15bd8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   15bc8:	00800044 	movi	r2,1
   15bcc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   15bd0:	d0280405 	stb	zero,-24560(gp)
                 break;
   15bd4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   15bd8:	e0bffa03 	ldbu	r2,-24(fp)
   15bdc:	1000011e 	bne	r2,zero,15be4 <OSTimeTick+0xc4>
            return;
   15be0:	00005106 	br	15d28 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   15be4:	d0a80317 	ldw	r2,-24564(gp)
   15be8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   15bec:	00004906 	br	15d14 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15bf0:	0005303a 	rdctl	r2,status
   15bf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15bf8:	e0fffe17 	ldw	r3,-8(fp)
   15bfc:	00bfff84 	movi	r2,-2
   15c00:	1884703a 	and	r2,r3,r2
   15c04:	1001703a 	wrctl	status,r2
  
  return context;
   15c08:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   15c0c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   15c10:	e0bff917 	ldw	r2,-28(fp)
   15c14:	10800b8b 	ldhu	r2,46(r2)
   15c18:	10bfffcc 	andi	r2,r2,65535
   15c1c:	10003626 	beq	r2,zero,15cf8 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   15c20:	e0bff917 	ldw	r2,-28(fp)
   15c24:	10800b8b 	ldhu	r2,46(r2)
   15c28:	10bfffc4 	addi	r2,r2,-1
   15c2c:	1007883a 	mov	r3,r2
   15c30:	e0bff917 	ldw	r2,-28(fp)
   15c34:	10c00b8d 	sth	r3,46(r2)
   15c38:	e0bff917 	ldw	r2,-28(fp)
   15c3c:	10800b8b 	ldhu	r2,46(r2)
   15c40:	10bfffcc 	andi	r2,r2,65535
   15c44:	10002c1e 	bne	r2,zero,15cf8 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15c48:	e0bff917 	ldw	r2,-28(fp)
   15c4c:	10800c03 	ldbu	r2,48(r2)
   15c50:	10803fcc 	andi	r2,r2,255
   15c54:	10800dcc 	andi	r2,r2,55
   15c58:	10000b26 	beq	r2,zero,15c88 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   15c5c:	e0bff917 	ldw	r2,-28(fp)
   15c60:	10c00c03 	ldbu	r3,48(r2)
   15c64:	00bff204 	movi	r2,-56
   15c68:	1884703a 	and	r2,r3,r2
   15c6c:	1007883a 	mov	r3,r2
   15c70:	e0bff917 	ldw	r2,-28(fp)
   15c74:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   15c78:	e0bff917 	ldw	r2,-28(fp)
   15c7c:	00c00044 	movi	r3,1
   15c80:	10c00c45 	stb	r3,49(r2)
   15c84:	00000206 	br	15c90 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   15c88:	e0bff917 	ldw	r2,-28(fp)
   15c8c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   15c90:	e0bff917 	ldw	r2,-28(fp)
   15c94:	10800c03 	ldbu	r2,48(r2)
   15c98:	10803fcc 	andi	r2,r2,255
   15c9c:	1080020c 	andi	r2,r2,8
   15ca0:	1000151e 	bne	r2,zero,15cf8 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   15ca4:	e0bff917 	ldw	r2,-28(fp)
   15ca8:	10c00d83 	ldbu	r3,54(r2)
   15cac:	d0a80c03 	ldbu	r2,-24528(gp)
   15cb0:	1884b03a 	or	r2,r3,r2
   15cb4:	d0a80c05 	stb	r2,-24528(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15cb8:	e0bff917 	ldw	r2,-28(fp)
   15cbc:	10800d03 	ldbu	r2,52(r2)
   15cc0:	10c03fcc 	andi	r3,r2,255
   15cc4:	e0bff917 	ldw	r2,-28(fp)
   15cc8:	10800d03 	ldbu	r2,52(r2)
   15ccc:	11003fcc 	andi	r4,r2,255
   15cd0:	d0a80c44 	addi	r2,gp,-24527
   15cd4:	2085883a 	add	r2,r4,r2
   15cd8:	11000003 	ldbu	r4,0(r2)
   15cdc:	e0bff917 	ldw	r2,-28(fp)
   15ce0:	10800d43 	ldbu	r2,53(r2)
   15ce4:	2084b03a 	or	r2,r4,r2
   15ce8:	1009883a 	mov	r4,r2
   15cec:	d0a80c44 	addi	r2,gp,-24527
   15cf0:	1885883a 	add	r2,r3,r2
   15cf4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   15cf8:	e0bff917 	ldw	r2,-28(fp)
   15cfc:	10800517 	ldw	r2,20(r2)
   15d00:	e0bff915 	stw	r2,-28(fp)
   15d04:	e0bffb17 	ldw	r2,-20(fp)
   15d08:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d0c:	e0bfff17 	ldw	r2,-4(fp)
   15d10:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   15d14:	e0bff917 	ldw	r2,-28(fp)
   15d18:	10800c83 	ldbu	r2,50(r2)
   15d1c:	10803fcc 	andi	r2,r2,255
   15d20:	10800518 	cmpnei	r2,r2,20
   15d24:	103fb21e 	bne	r2,zero,15bf0 <__alt_mem_Flash_flash_data+0xf4015bf0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   15d28:	e037883a 	mov	sp,fp
   15d2c:	dfc00117 	ldw	ra,4(sp)
   15d30:	df000017 	ldw	fp,0(sp)
   15d34:	dec00204 	addi	sp,sp,8
   15d38:	f800283a 	ret

00015d3c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   15d3c:	deffff04 	addi	sp,sp,-4
   15d40:	df000015 	stw	fp,0(sp)
   15d44:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   15d48:	00804784 	movi	r2,286
}
   15d4c:	e037883a 	mov	sp,fp
   15d50:	df000017 	ldw	fp,0(sp)
   15d54:	dec00104 	addi	sp,sp,4
   15d58:	f800283a 	ret

00015d5c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   15d5c:	deffff04 	addi	sp,sp,-4
   15d60:	df000015 	stw	fp,0(sp)
   15d64:	d839883a 	mov	fp,sp
}
   15d68:	e037883a 	mov	sp,fp
   15d6c:	df000017 	ldw	fp,0(sp)
   15d70:	dec00104 	addi	sp,sp,4
   15d74:	f800283a 	ret

00015d78 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   15d78:	defff804 	addi	sp,sp,-32
   15d7c:	dfc00715 	stw	ra,28(sp)
   15d80:	df000615 	stw	fp,24(sp)
   15d84:	df000604 	addi	fp,sp,24
   15d88:	e13ffc15 	stw	r4,-16(fp)
   15d8c:	e17ffd15 	stw	r5,-12(fp)
   15d90:	3007883a 	mov	r3,r6
   15d94:	3805883a 	mov	r2,r7
   15d98:	e0fffe05 	stb	r3,-8(fp)
   15d9c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   15da0:	e0bffc17 	ldw	r2,-16(fp)
   15da4:	10800283 	ldbu	r2,10(r2)
   15da8:	10c03fcc 	andi	r3,r2,255
   15dac:	008000b4 	movhi	r2,2
   15db0:	10839c04 	addi	r2,r2,3696
   15db4:	10c5883a 	add	r2,r2,r3
   15db8:	10800003 	ldbu	r2,0(r2)
   15dbc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   15dc0:	e0bffa03 	ldbu	r2,-24(fp)
   15dc4:	e0fffc17 	ldw	r3,-16(fp)
   15dc8:	1885883a 	add	r2,r3,r2
   15dcc:	10800204 	addi	r2,r2,8
   15dd0:	108000c3 	ldbu	r2,3(r2)
   15dd4:	10c03fcc 	andi	r3,r2,255
   15dd8:	008000b4 	movhi	r2,2
   15ddc:	10839c04 	addi	r2,r2,3696
   15de0:	10c5883a 	add	r2,r2,r3
   15de4:	10800003 	ldbu	r2,0(r2)
   15de8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   15dec:	e0bffa03 	ldbu	r2,-24(fp)
   15df0:	100490fa 	slli	r2,r2,3
   15df4:	1007883a 	mov	r3,r2
   15df8:	e0bffa43 	ldbu	r2,-23(fp)
   15dfc:	1885883a 	add	r2,r3,r2
   15e00:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   15e04:	e0fffa83 	ldbu	r3,-22(fp)
   15e08:	008000f4 	movhi	r2,3
   15e0c:	10b07504 	addi	r2,r2,-15916
   15e10:	18c7883a 	add	r3,r3,r3
   15e14:	18c7883a 	add	r3,r3,r3
   15e18:	10c5883a 	add	r2,r2,r3
   15e1c:	10800017 	ldw	r2,0(r2)
   15e20:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   15e24:	e0bffb17 	ldw	r2,-20(fp)
   15e28:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   15e2c:	e0bffb17 	ldw	r2,-20(fp)
   15e30:	e0fffd17 	ldw	r3,-12(fp)
   15e34:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   15e38:	e0bffb17 	ldw	r2,-20(fp)
   15e3c:	10800c03 	ldbu	r2,48(r2)
   15e40:	1007883a 	mov	r3,r2
   15e44:	e0bffe03 	ldbu	r2,-8(fp)
   15e48:	0084303a 	nor	r2,zero,r2
   15e4c:	1884703a 	and	r2,r3,r2
   15e50:	1007883a 	mov	r3,r2
   15e54:	e0bffb17 	ldw	r2,-20(fp)
   15e58:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   15e5c:	e0bffb17 	ldw	r2,-20(fp)
   15e60:	e0ffff03 	ldbu	r3,-4(fp)
   15e64:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   15e68:	e0bffb17 	ldw	r2,-20(fp)
   15e6c:	10800c03 	ldbu	r2,48(r2)
   15e70:	10803fcc 	andi	r2,r2,255
   15e74:	1080020c 	andi	r2,r2,8
   15e78:	1000111e 	bne	r2,zero,15ec0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   15e7c:	e0bffb17 	ldw	r2,-20(fp)
   15e80:	10c00d83 	ldbu	r3,54(r2)
   15e84:	d0a80c03 	ldbu	r2,-24528(gp)
   15e88:	1884b03a 	or	r2,r3,r2
   15e8c:	d0a80c05 	stb	r2,-24528(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   15e90:	e0fffa03 	ldbu	r3,-24(fp)
   15e94:	e13ffa03 	ldbu	r4,-24(fp)
   15e98:	d0a80c44 	addi	r2,gp,-24527
   15e9c:	2085883a 	add	r2,r4,r2
   15ea0:	11000003 	ldbu	r4,0(r2)
   15ea4:	e0bffb17 	ldw	r2,-20(fp)
   15ea8:	10800d43 	ldbu	r2,53(r2)
   15eac:	2084b03a 	or	r2,r4,r2
   15eb0:	1009883a 	mov	r4,r2
   15eb4:	d0a80c44 	addi	r2,gp,-24527
   15eb8:	1885883a 	add	r2,r3,r2
   15ebc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   15ec0:	e13ffb17 	ldw	r4,-20(fp)
   15ec4:	e17ffc17 	ldw	r5,-16(fp)
   15ec8:	00161680 	call	16168 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   15ecc:	e0bffb17 	ldw	r2,-20(fp)
   15ed0:	10800817 	ldw	r2,32(r2)
   15ed4:	10000826 	beq	r2,zero,15ef8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   15ed8:	e0bffb17 	ldw	r2,-20(fp)
   15edc:	10800817 	ldw	r2,32(r2)
   15ee0:	e13ffb17 	ldw	r4,-20(fp)
   15ee4:	100b883a 	mov	r5,r2
   15ee8:	001621c0 	call	1621c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   15eec:	e0bffb17 	ldw	r2,-20(fp)
   15ef0:	e0fffc17 	ldw	r3,-16(fp)
   15ef4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   15ef8:	e0bffa83 	ldbu	r2,-22(fp)
}
   15efc:	e037883a 	mov	sp,fp
   15f00:	dfc00117 	ldw	ra,4(sp)
   15f04:	df000017 	ldw	fp,0(sp)
   15f08:	dec00204 	addi	sp,sp,8
   15f0c:	f800283a 	ret

00015f10 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   15f10:	defffd04 	addi	sp,sp,-12
   15f14:	df000215 	stw	fp,8(sp)
   15f18:	df000204 	addi	fp,sp,8
   15f1c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   15f20:	d0a80f17 	ldw	r2,-24516(gp)
   15f24:	e0ffff17 	ldw	r3,-4(fp)
   15f28:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   15f2c:	d0a80f17 	ldw	r2,-24516(gp)
   15f30:	10800d03 	ldbu	r2,52(r2)
   15f34:	10803fcc 	andi	r2,r2,255
   15f38:	d0e80f17 	ldw	r3,-24516(gp)
   15f3c:	18c00d03 	ldbu	r3,52(r3)
   15f40:	18c03fcc 	andi	r3,r3,255
   15f44:	e13fff17 	ldw	r4,-4(fp)
   15f48:	20c7883a 	add	r3,r4,r3
   15f4c:	18c00204 	addi	r3,r3,8
   15f50:	190000c3 	ldbu	r4,3(r3)
   15f54:	d0e80f17 	ldw	r3,-24516(gp)
   15f58:	18c00d43 	ldbu	r3,53(r3)
   15f5c:	20c6b03a 	or	r3,r4,r3
   15f60:	1809883a 	mov	r4,r3
   15f64:	e0ffff17 	ldw	r3,-4(fp)
   15f68:	1885883a 	add	r2,r3,r2
   15f6c:	10800204 	addi	r2,r2,8
   15f70:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   15f74:	e0bfff17 	ldw	r2,-4(fp)
   15f78:	10c00283 	ldbu	r3,10(r2)
   15f7c:	d0a80f17 	ldw	r2,-24516(gp)
   15f80:	10800d83 	ldbu	r2,54(r2)
   15f84:	1884b03a 	or	r2,r3,r2
   15f88:	1007883a 	mov	r3,r2
   15f8c:	e0bfff17 	ldw	r2,-4(fp)
   15f90:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   15f94:	d0a80f17 	ldw	r2,-24516(gp)
   15f98:	10800d03 	ldbu	r2,52(r2)
   15f9c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   15fa0:	e0fffe03 	ldbu	r3,-8(fp)
   15fa4:	e13ffe03 	ldbu	r4,-8(fp)
   15fa8:	d0a80c44 	addi	r2,gp,-24527
   15fac:	2085883a 	add	r2,r4,r2
   15fb0:	10800003 	ldbu	r2,0(r2)
   15fb4:	1009883a 	mov	r4,r2
   15fb8:	d0a80f17 	ldw	r2,-24516(gp)
   15fbc:	10800d43 	ldbu	r2,53(r2)
   15fc0:	0084303a 	nor	r2,zero,r2
   15fc4:	2084703a 	and	r2,r4,r2
   15fc8:	1009883a 	mov	r4,r2
   15fcc:	d0a80c44 	addi	r2,gp,-24527
   15fd0:	1885883a 	add	r2,r3,r2
   15fd4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15fd8:	e0fffe03 	ldbu	r3,-8(fp)
   15fdc:	d0a80c44 	addi	r2,gp,-24527
   15fe0:	1885883a 	add	r2,r3,r2
   15fe4:	10800003 	ldbu	r2,0(r2)
   15fe8:	10803fcc 	andi	r2,r2,255
   15fec:	1000071e 	bne	r2,zero,1600c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   15ff0:	d0a80f17 	ldw	r2,-24516(gp)
   15ff4:	10800d83 	ldbu	r2,54(r2)
   15ff8:	0084303a 	nor	r2,zero,r2
   15ffc:	1007883a 	mov	r3,r2
   16000:	d0a80c03 	ldbu	r2,-24528(gp)
   16004:	1884703a 	and	r2,r3,r2
   16008:	d0a80c05 	stb	r2,-24528(gp)
    }
}
   1600c:	e037883a 	mov	sp,fp
   16010:	df000017 	ldw	fp,0(sp)
   16014:	dec00104 	addi	sp,sp,4
   16018:	f800283a 	ret

0001601c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1601c:	defffb04 	addi	sp,sp,-20
   16020:	df000415 	stw	fp,16(sp)
   16024:	df000404 	addi	fp,sp,16
   16028:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1602c:	d0a80f17 	ldw	r2,-24516(gp)
   16030:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   16034:	d0a80f17 	ldw	r2,-24516(gp)
   16038:	e0ffff17 	ldw	r3,-4(fp)
   1603c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   16040:	e0bfff17 	ldw	r2,-4(fp)
   16044:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   16048:	e0bffc17 	ldw	r2,-16(fp)
   1604c:	10800017 	ldw	r2,0(r2)
   16050:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   16054:	00002006 	br	160d8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   16058:	d0a80f17 	ldw	r2,-24516(gp)
   1605c:	10800d03 	ldbu	r2,52(r2)
   16060:	10803fcc 	andi	r2,r2,255
   16064:	d0e80f17 	ldw	r3,-24516(gp)
   16068:	18c00d03 	ldbu	r3,52(r3)
   1606c:	18c03fcc 	andi	r3,r3,255
   16070:	e13ffd17 	ldw	r4,-12(fp)
   16074:	20c7883a 	add	r3,r4,r3
   16078:	18c00204 	addi	r3,r3,8
   1607c:	190000c3 	ldbu	r4,3(r3)
   16080:	d0e80f17 	ldw	r3,-24516(gp)
   16084:	18c00d43 	ldbu	r3,53(r3)
   16088:	20c6b03a 	or	r3,r4,r3
   1608c:	1809883a 	mov	r4,r3
   16090:	e0fffd17 	ldw	r3,-12(fp)
   16094:	1885883a 	add	r2,r3,r2
   16098:	10800204 	addi	r2,r2,8
   1609c:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   160a0:	e0bffd17 	ldw	r2,-12(fp)
   160a4:	10c00283 	ldbu	r3,10(r2)
   160a8:	d0a80f17 	ldw	r2,-24516(gp)
   160ac:	10800d83 	ldbu	r2,54(r2)
   160b0:	1884b03a 	or	r2,r3,r2
   160b4:	1007883a 	mov	r3,r2
   160b8:	e0bffd17 	ldw	r2,-12(fp)
   160bc:	10c00285 	stb	r3,10(r2)
        pevents++;
   160c0:	e0bffc17 	ldw	r2,-16(fp)
   160c4:	10800104 	addi	r2,r2,4
   160c8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   160cc:	e0bffc17 	ldw	r2,-16(fp)
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   160d8:	e0bffd17 	ldw	r2,-12(fp)
   160dc:	103fde1e 	bne	r2,zero,16058 <__alt_mem_Flash_flash_data+0xf4016058>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   160e0:	d0a80f17 	ldw	r2,-24516(gp)
   160e4:	10800d03 	ldbu	r2,52(r2)
   160e8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   160ec:	e0fffe03 	ldbu	r3,-8(fp)
   160f0:	e13ffe03 	ldbu	r4,-8(fp)
   160f4:	d0a80c44 	addi	r2,gp,-24527
   160f8:	2085883a 	add	r2,r4,r2
   160fc:	10800003 	ldbu	r2,0(r2)
   16100:	1009883a 	mov	r4,r2
   16104:	d0a80f17 	ldw	r2,-24516(gp)
   16108:	10800d43 	ldbu	r2,53(r2)
   1610c:	0084303a 	nor	r2,zero,r2
   16110:	2084703a 	and	r2,r4,r2
   16114:	1009883a 	mov	r4,r2
   16118:	d0a80c44 	addi	r2,gp,-24527
   1611c:	1885883a 	add	r2,r3,r2
   16120:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   16124:	e0fffe03 	ldbu	r3,-8(fp)
   16128:	d0a80c44 	addi	r2,gp,-24527
   1612c:	1885883a 	add	r2,r3,r2
   16130:	10800003 	ldbu	r2,0(r2)
   16134:	10803fcc 	andi	r2,r2,255
   16138:	1000071e 	bne	r2,zero,16158 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1613c:	d0a80f17 	ldw	r2,-24516(gp)
   16140:	10800d83 	ldbu	r2,54(r2)
   16144:	0084303a 	nor	r2,zero,r2
   16148:	1007883a 	mov	r3,r2
   1614c:	d0a80c03 	ldbu	r2,-24528(gp)
   16150:	1884703a 	and	r2,r3,r2
   16154:	d0a80c05 	stb	r2,-24528(gp)
    }
}
   16158:	e037883a 	mov	sp,fp
   1615c:	df000017 	ldw	fp,0(sp)
   16160:	dec00104 	addi	sp,sp,4
   16164:	f800283a 	ret

00016168 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   16168:	defffc04 	addi	sp,sp,-16
   1616c:	df000315 	stw	fp,12(sp)
   16170:	df000304 	addi	fp,sp,12
   16174:	e13ffe15 	stw	r4,-8(fp)
   16178:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1617c:	e0bffe17 	ldw	r2,-8(fp)
   16180:	10800d03 	ldbu	r2,52(r2)
   16184:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   16188:	e0bffd03 	ldbu	r2,-12(fp)
   1618c:	e0fffd03 	ldbu	r3,-12(fp)
   16190:	e13fff17 	ldw	r4,-4(fp)
   16194:	20c7883a 	add	r3,r4,r3
   16198:	18c00204 	addi	r3,r3,8
   1619c:	18c000c3 	ldbu	r3,3(r3)
   161a0:	1809883a 	mov	r4,r3
   161a4:	e0fffe17 	ldw	r3,-8(fp)
   161a8:	18c00d43 	ldbu	r3,53(r3)
   161ac:	00c6303a 	nor	r3,zero,r3
   161b0:	20c6703a 	and	r3,r4,r3
   161b4:	1809883a 	mov	r4,r3
   161b8:	e0ffff17 	ldw	r3,-4(fp)
   161bc:	1885883a 	add	r2,r3,r2
   161c0:	10800204 	addi	r2,r2,8
   161c4:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   161c8:	e0bffd03 	ldbu	r2,-12(fp)
   161cc:	e0ffff17 	ldw	r3,-4(fp)
   161d0:	1885883a 	add	r2,r3,r2
   161d4:	10800204 	addi	r2,r2,8
   161d8:	108000c3 	ldbu	r2,3(r2)
   161dc:	10803fcc 	andi	r2,r2,255
   161e0:	10000a1e 	bne	r2,zero,1620c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   161e4:	e0bfff17 	ldw	r2,-4(fp)
   161e8:	10800283 	ldbu	r2,10(r2)
   161ec:	1007883a 	mov	r3,r2
   161f0:	e0bffe17 	ldw	r2,-8(fp)
   161f4:	10800d83 	ldbu	r2,54(r2)
   161f8:	0084303a 	nor	r2,zero,r2
   161fc:	1884703a 	and	r2,r3,r2
   16200:	1007883a 	mov	r3,r2
   16204:	e0bfff17 	ldw	r2,-4(fp)
   16208:	10c00285 	stb	r3,10(r2)
    }
}
   1620c:	e037883a 	mov	sp,fp
   16210:	df000017 	ldw	fp,0(sp)
   16214:	dec00104 	addi	sp,sp,4
   16218:	f800283a 	ret

0001621c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1621c:	defffa04 	addi	sp,sp,-24
   16220:	df000515 	stw	fp,20(sp)
   16224:	df000504 	addi	fp,sp,20
   16228:	e13ffe15 	stw	r4,-8(fp)
   1622c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   16230:	e0bffe17 	ldw	r2,-8(fp)
   16234:	10800d03 	ldbu	r2,52(r2)
   16238:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1623c:	e0bffe17 	ldw	r2,-8(fp)
   16240:	10800d83 	ldbu	r2,54(r2)
   16244:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   16248:	e0bffe17 	ldw	r2,-8(fp)
   1624c:	10800d43 	ldbu	r2,53(r2)
   16250:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   16254:	e0bfff17 	ldw	r2,-4(fp)
   16258:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1625c:	e0bffb17 	ldw	r2,-20(fp)
   16260:	10800017 	ldw	r2,0(r2)
   16264:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   16268:	00002506 	br	16300 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1626c:	e0bffd03 	ldbu	r2,-12(fp)
   16270:	e0fffd03 	ldbu	r3,-12(fp)
   16274:	e13ffc17 	ldw	r4,-16(fp)
   16278:	20c7883a 	add	r3,r4,r3
   1627c:	18c00204 	addi	r3,r3,8
   16280:	18c000c3 	ldbu	r3,3(r3)
   16284:	1809883a 	mov	r4,r3
   16288:	e0fffd83 	ldbu	r3,-10(fp)
   1628c:	00c6303a 	nor	r3,zero,r3
   16290:	20c6703a 	and	r3,r4,r3
   16294:	1809883a 	mov	r4,r3
   16298:	e0fffc17 	ldw	r3,-16(fp)
   1629c:	1885883a 	add	r2,r3,r2
   162a0:	10800204 	addi	r2,r2,8
   162a4:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   162a8:	e0bffd03 	ldbu	r2,-12(fp)
   162ac:	e0fffc17 	ldw	r3,-16(fp)
   162b0:	1885883a 	add	r2,r3,r2
   162b4:	10800204 	addi	r2,r2,8
   162b8:	108000c3 	ldbu	r2,3(r2)
   162bc:	10803fcc 	andi	r2,r2,255
   162c0:	1000091e 	bne	r2,zero,162e8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   162c4:	e0bffc17 	ldw	r2,-16(fp)
   162c8:	10800283 	ldbu	r2,10(r2)
   162cc:	1007883a 	mov	r3,r2
   162d0:	e0bffd43 	ldbu	r2,-11(fp)
   162d4:	0084303a 	nor	r2,zero,r2
   162d8:	1884703a 	and	r2,r3,r2
   162dc:	1007883a 	mov	r3,r2
   162e0:	e0bffc17 	ldw	r2,-16(fp)
   162e4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   162e8:	e0bffb17 	ldw	r2,-20(fp)
   162ec:	10800104 	addi	r2,r2,4
   162f0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   162f4:	e0bffb17 	ldw	r2,-20(fp)
   162f8:	10800017 	ldw	r2,0(r2)
   162fc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   16300:	e0bffc17 	ldw	r2,-16(fp)
   16304:	103fd91e 	bne	r2,zero,1626c <__alt_mem_Flash_flash_data+0xf401626c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   16308:	e037883a 	mov	sp,fp
   1630c:	df000017 	ldw	fp,0(sp)
   16310:	dec00104 	addi	sp,sp,4
   16314:	f800283a 	ret

00016318 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   16318:	defffc04 	addi	sp,sp,-16
   1631c:	df000315 	stw	fp,12(sp)
   16320:	df000304 	addi	fp,sp,12
   16324:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   16328:	e0bfff17 	ldw	r2,-4(fp)
   1632c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   16330:	e0bfff17 	ldw	r2,-4(fp)
   16334:	108002c4 	addi	r2,r2,11
   16338:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1633c:	e03ffe05 	stb	zero,-8(fp)
   16340:	00000706 	br	16360 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   16344:	e0bffd17 	ldw	r2,-12(fp)
   16348:	10c00044 	addi	r3,r2,1
   1634c:	e0fffd15 	stw	r3,-12(fp)
   16350:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16354:	e0bffe03 	ldbu	r2,-8(fp)
   16358:	10800044 	addi	r2,r2,1
   1635c:	e0bffe05 	stb	r2,-8(fp)
   16360:	e0bffe03 	ldbu	r2,-8(fp)
   16364:	108000f0 	cmpltui	r2,r2,3
   16368:	103ff61e 	bne	r2,zero,16344 <__alt_mem_Flash_flash_data+0xf4016344>
        *ptbl++ = 0;
    }
}
   1636c:	e037883a 	mov	sp,fp
   16370:	df000017 	ldw	fp,0(sp)
   16374:	dec00104 	addi	sp,sp,4
   16378:	f800283a 	ret

0001637c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1637c:	defffb04 	addi	sp,sp,-20
   16380:	dfc00415 	stw	ra,16(sp)
   16384:	df000315 	stw	fp,12(sp)
   16388:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   1638c:	010000f4 	movhi	r4,3
   16390:	212c6104 	addi	r4,r4,-20092
   16394:	0142d004 	movi	r5,2880
   16398:	00166dc0 	call	166dc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1639c:	008000f4 	movhi	r2,3
   163a0:	10ac6104 	addi	r2,r2,-20092
   163a4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   163a8:	008000f4 	movhi	r2,3
   163ac:	10ac6d04 	addi	r2,r2,-20044
   163b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   163b4:	e03ffd0d 	sth	zero,-12(fp)
   163b8:	00001306 	br	16408 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   163bc:	e0bffe17 	ldw	r2,-8(fp)
   163c0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   163c4:	e0bffe17 	ldw	r2,-8(fp)
   163c8:	e0ffff17 	ldw	r3,-4(fp)
   163cc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   163d0:	e0bffe17 	ldw	r2,-8(fp)
   163d4:	00c00fc4 	movi	r3,63
   163d8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   163dc:	e0bffe17 	ldw	r2,-8(fp)
   163e0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   163e4:	e0bffe17 	ldw	r2,-8(fp)
   163e8:	10800c04 	addi	r2,r2,48
   163ec:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   163f0:	e0bfff17 	ldw	r2,-4(fp)
   163f4:	10800c04 	addi	r2,r2,48
   163f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   163fc:	e0bffd0b 	ldhu	r2,-12(fp)
   16400:	10800044 	addi	r2,r2,1
   16404:	e0bffd0d 	sth	r2,-12(fp)
   16408:	e0bffd0b 	ldhu	r2,-12(fp)
   1640c:	10800ef0 	cmpltui	r2,r2,59
   16410:	103fea1e 	bne	r2,zero,163bc <__alt_mem_Flash_flash_data+0xf40163bc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   16414:	e0bffe17 	ldw	r2,-8(fp)
   16418:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1641c:	e0bffe17 	ldw	r2,-8(fp)
   16420:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   16424:	e0bffe17 	ldw	r2,-8(fp)
   16428:	00c00fc4 	movi	r3,63
   1642c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   16430:	e0bffe17 	ldw	r2,-8(fp)
   16434:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   16438:	008000f4 	movhi	r2,3
   1643c:	10ac6104 	addi	r2,r2,-20092
   16440:	d0a80d15 	stw	r2,-24524(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   16444:	e037883a 	mov	sp,fp
   16448:	dfc00117 	ldw	ra,4(sp)
   1644c:	df000017 	ldw	fp,0(sp)
   16450:	dec00204 	addi	sp,sp,8
   16454:	f800283a 	ret

00016458 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   16458:	deffff04 	addi	sp,sp,-4
   1645c:	df000015 	stw	fp,0(sp)
   16460:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   16464:	d0281015 	stw	zero,-24512(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   16468:	d0280e05 	stb	zero,-24520(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1646c:	d0280005 	stb	zero,-24576(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   16470:	d0280845 	stb	zero,-24543(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   16474:	d0280045 	stb	zero,-24575(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   16478:	d0280515 	stw	zero,-24556(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1647c:	d0280115 	stw	zero,-24572(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   16480:	d0281315 	stw	zero,-24500(gp)
    OSIdleCtrMax  = 0L;
   16484:	d0280615 	stw	zero,-24552(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   16488:	d0281205 	stb	zero,-24504(gp)
#endif
}
   1648c:	e037883a 	mov	sp,fp
   16490:	df000017 	ldw	fp,0(sp)
   16494:	dec00104 	addi	sp,sp,4
   16498:	f800283a 	ret

0001649c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1649c:	defffd04 	addi	sp,sp,-12
   164a0:	df000215 	stw	fp,8(sp)
   164a4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   164a8:	d0280c05 	stb	zero,-24528(gp)
    prdytbl       = &OSRdyTbl[0];
   164ac:	d0a80c44 	addi	r2,gp,-24527
   164b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   164b4:	e03ffe05 	stb	zero,-8(fp)
   164b8:	00000706 	br	164d8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   164bc:	e0bfff17 	ldw	r2,-4(fp)
   164c0:	10c00044 	addi	r3,r2,1
   164c4:	e0ffff15 	stw	r3,-4(fp)
   164c8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   164cc:	e0bffe03 	ldbu	r2,-8(fp)
   164d0:	10800044 	addi	r2,r2,1
   164d4:	e0bffe05 	stb	r2,-8(fp)
   164d8:	e0bffe03 	ldbu	r2,-8(fp)
   164dc:	108000f0 	cmpltui	r2,r2,3
   164e0:	103ff61e 	bne	r2,zero,164bc <__alt_mem_Flash_flash_data+0xf40164bc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   164e4:	d0280245 	stb	zero,-24567(gp)
    OSPrioHighRdy = 0;
   164e8:	d0280205 	stb	zero,-24568(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   164ec:	d0280a15 	stw	zero,-24536(gp)
    OSTCBCur      = (OS_TCB *)0;
   164f0:	d0280f15 	stw	zero,-24516(gp)
}
   164f4:	e037883a 	mov	sp,fp
   164f8:	df000017 	ldw	fp,0(sp)
   164fc:	dec00104 	addi	sp,sp,4
   16500:	f800283a 	ret

00016504 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   16504:	defff804 	addi	sp,sp,-32
   16508:	dfc00715 	stw	ra,28(sp)
   1650c:	df000615 	stw	fp,24(sp)
   16510:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   16514:	00bfffd4 	movui	r2,65535
   16518:	d8800015 	stw	r2,0(sp)
   1651c:	008000f4 	movhi	r2,3
   16520:	10aa6104 	addi	r2,r2,-22140
   16524:	d8800115 	stw	r2,4(sp)
   16528:	00808004 	movi	r2,512
   1652c:	d8800215 	stw	r2,8(sp)
   16530:	d8000315 	stw	zero,12(sp)
   16534:	008000c4 	movi	r2,3
   16538:	d8800415 	stw	r2,16(sp)
   1653c:	01000074 	movhi	r4,1
   16540:	211a6504 	addi	r4,r4,27028
   16544:	000b883a 	mov	r5,zero
   16548:	018000f4 	movhi	r6,3
   1654c:	31ac6004 	addi	r6,r6,-20096
   16550:	01c00504 	movi	r7,20
   16554:	001b3a80 	call	1b3a8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   16558:	01000504 	movi	r4,20
   1655c:	014000b4 	movhi	r5,2
   16560:	2943dc04 	addi	r5,r5,3952
   16564:	e1bfff04 	addi	r6,fp,-4
   16568:	001bc740 	call	1bc74 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   1656c:	e037883a 	mov	sp,fp
   16570:	dfc00117 	ldw	ra,4(sp)
   16574:	df000017 	ldw	fp,0(sp)
   16578:	dec00204 	addi	sp,sp,8
   1657c:	f800283a 	ret

00016580 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   16580:	defff804 	addi	sp,sp,-32
   16584:	dfc00715 	stw	ra,28(sp)
   16588:	df000615 	stw	fp,24(sp)
   1658c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   16590:	00bfff94 	movui	r2,65534
   16594:	d8800015 	stw	r2,0(sp)
   16598:	008000f4 	movhi	r2,3
   1659c:	10a7e904 	addi	r2,r2,-24668
   165a0:	d8800115 	stw	r2,4(sp)
   165a4:	00808004 	movi	r2,512
   165a8:	d8800215 	stw	r2,8(sp)
   165ac:	d8000315 	stw	zero,12(sp)
   165b0:	008000c4 	movi	r2,3
   165b4:	d8800415 	stw	r2,16(sp)
   165b8:	01000074 	movhi	r4,1
   165bc:	211a7c04 	addi	r4,r4,27120
   165c0:	000b883a 	mov	r5,zero
   165c4:	018000f4 	movhi	r6,3
   165c8:	31a9e804 	addi	r6,r6,-22624
   165cc:	01c004c4 	movi	r7,19
   165d0:	001b3a80 	call	1b3a8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   165d4:	010004c4 	movi	r4,19
   165d8:	014000b4 	movhi	r5,2
   165dc:	2943e004 	addi	r5,r5,3968
   165e0:	e1bfff04 	addi	r6,fp,-4
   165e4:	001bc740 	call	1bc74 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   165e8:	e037883a 	mov	sp,fp
   165ec:	dfc00117 	ldw	ra,4(sp)
   165f0:	df000017 	ldw	fp,0(sp)
   165f4:	dec00204 	addi	sp,sp,8
   165f8:	f800283a 	ret

000165fc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   165fc:	defffb04 	addi	sp,sp,-20
   16600:	dfc00415 	stw	ra,16(sp)
   16604:	df000315 	stw	fp,12(sp)
   16608:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1660c:	010000f4 	movhi	r4,3
   16610:	212f3104 	addi	r4,r4,-17212
   16614:	01414404 	movi	r5,1296
   16618:	00166dc0 	call	166dc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1661c:	010000f4 	movhi	r4,3
   16620:	21307504 	addi	r4,r4,-15916
   16624:	01401504 	movi	r5,84
   16628:	00166dc0 	call	166dc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1662c:	008000f4 	movhi	r2,3
   16630:	10af3104 	addi	r2,r2,-17212
   16634:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   16638:	008000f4 	movhi	r2,3
   1663c:	10af4c04 	addi	r2,r2,-17104
   16640:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   16644:	e03ffd05 	stb	zero,-12(fp)
   16648:	00001106 	br	16690 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1664c:	e0bffe17 	ldw	r2,-8(fp)
   16650:	e0ffff17 	ldw	r3,-4(fp)
   16654:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   16658:	e0bffe17 	ldw	r2,-8(fp)
   1665c:	00c00fc4 	movi	r3,63
   16660:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   16664:	e0bffe17 	ldw	r2,-8(fp)
   16668:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1666c:	e0bffe17 	ldw	r2,-8(fp)
   16670:	10801b04 	addi	r2,r2,108
   16674:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   16678:	e0bfff17 	ldw	r2,-4(fp)
   1667c:	10801b04 	addi	r2,r2,108
   16680:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   16684:	e0bffd03 	ldbu	r2,-12(fp)
   16688:	10800044 	addi	r2,r2,1
   1668c:	e0bffd05 	stb	r2,-12(fp)
   16690:	e0bffd03 	ldbu	r2,-12(fp)
   16694:	108002f0 	cmpltui	r2,r2,11
   16698:	103fec1e 	bne	r2,zero,1664c <__alt_mem_Flash_flash_data+0xf401664c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1669c:	e0bffe17 	ldw	r2,-8(fp)
   166a0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   166a4:	e0bffe17 	ldw	r2,-8(fp)
   166a8:	00c00fc4 	movi	r3,63
   166ac:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   166b0:	e0bffe17 	ldw	r2,-8(fp)
   166b4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   166b8:	d0280315 	stw	zero,-24564(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   166bc:	008000f4 	movhi	r2,3
   166c0:	10af3104 	addi	r2,r2,-17212
   166c4:	d0a80715 	stw	r2,-24548(gp)
}
   166c8:	e037883a 	mov	sp,fp
   166cc:	dfc00117 	ldw	ra,4(sp)
   166d0:	df000017 	ldw	fp,0(sp)
   166d4:	dec00204 	addi	sp,sp,8
   166d8:	f800283a 	ret

000166dc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   166dc:	defffd04 	addi	sp,sp,-12
   166e0:	df000215 	stw	fp,8(sp)
   166e4:	df000204 	addi	fp,sp,8
   166e8:	e13ffe15 	stw	r4,-8(fp)
   166ec:	2805883a 	mov	r2,r5
   166f0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   166f4:	00000706 	br	16714 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   166f8:	e0bffe17 	ldw	r2,-8(fp)
   166fc:	10c00044 	addi	r3,r2,1
   16700:	e0fffe15 	stw	r3,-8(fp)
   16704:	10000005 	stb	zero,0(r2)
        size--;
   16708:	e0bfff0b 	ldhu	r2,-4(fp)
   1670c:	10bfffc4 	addi	r2,r2,-1
   16710:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   16714:	e0bfff0b 	ldhu	r2,-4(fp)
   16718:	103ff71e 	bne	r2,zero,166f8 <__alt_mem_Flash_flash_data+0xf40166f8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1671c:	e037883a 	mov	sp,fp
   16720:	df000017 	ldw	fp,0(sp)
   16724:	dec00104 	addi	sp,sp,4
   16728:	f800283a 	ret

0001672c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   1672c:	defffc04 	addi	sp,sp,-16
   16730:	df000315 	stw	fp,12(sp)
   16734:	df000304 	addi	fp,sp,12
   16738:	e13ffd15 	stw	r4,-12(fp)
   1673c:	e17ffe15 	stw	r5,-8(fp)
   16740:	3005883a 	mov	r2,r6
   16744:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   16748:	00000b06 	br	16778 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   1674c:	e0bffd17 	ldw	r2,-12(fp)
   16750:	10c00044 	addi	r3,r2,1
   16754:	e0fffd15 	stw	r3,-12(fp)
   16758:	e0fffe17 	ldw	r3,-8(fp)
   1675c:	19000044 	addi	r4,r3,1
   16760:	e13ffe15 	stw	r4,-8(fp)
   16764:	18c00003 	ldbu	r3,0(r3)
   16768:	10c00005 	stb	r3,0(r2)
        size--;
   1676c:	e0bfff0b 	ldhu	r2,-4(fp)
   16770:	10bfffc4 	addi	r2,r2,-1
   16774:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   16778:	e0bfff0b 	ldhu	r2,-4(fp)
   1677c:	103ff31e 	bne	r2,zero,1674c <__alt_mem_Flash_flash_data+0xf401674c>
        *pdest++ = *psrc++;
        size--;
    }
}
   16780:	e037883a 	mov	sp,fp
   16784:	df000017 	ldw	fp,0(sp)
   16788:	dec00104 	addi	sp,sp,4
   1678c:	f800283a 	ret

00016790 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   16790:	defffb04 	addi	sp,sp,-20
   16794:	dfc00415 	stw	ra,16(sp)
   16798:	df000315 	stw	fp,12(sp)
   1679c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   167a0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167a4:	0005303a 	rdctl	r2,status
   167a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167ac:	e0fffe17 	ldw	r3,-8(fp)
   167b0:	00bfff84 	movi	r2,-2
   167b4:	1884703a 	and	r2,r3,r2
   167b8:	1001703a 	wrctl	status,r2
  
  return context;
   167bc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   167c0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   167c4:	d0a80e03 	ldbu	r2,-24520(gp)
   167c8:	10803fcc 	andi	r2,r2,255
   167cc:	10001a1e 	bne	r2,zero,16838 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   167d0:	d0a80003 	ldbu	r2,-24576(gp)
   167d4:	10803fcc 	andi	r2,r2,255
   167d8:	1000171e 	bne	r2,zero,16838 <OS_Sched+0xa8>
            OS_SchedNew();
   167dc:	001685c0 	call	1685c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   167e0:	d0e80203 	ldbu	r3,-24568(gp)
   167e4:	d0a80243 	ldbu	r2,-24567(gp)
   167e8:	18c03fcc 	andi	r3,r3,255
   167ec:	10803fcc 	andi	r2,r2,255
   167f0:	18801126 	beq	r3,r2,16838 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   167f4:	d0a80203 	ldbu	r2,-24568(gp)
   167f8:	10c03fcc 	andi	r3,r2,255
   167fc:	008000f4 	movhi	r2,3
   16800:	10b07504 	addi	r2,r2,-15916
   16804:	18c7883a 	add	r3,r3,r3
   16808:	18c7883a 	add	r3,r3,r3
   1680c:	10c5883a 	add	r2,r2,r3
   16810:	10800017 	ldw	r2,0(r2)
   16814:	d0a80a15 	stw	r2,-24536(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   16818:	d0a80a17 	ldw	r2,-24536(gp)
   1681c:	10c00e17 	ldw	r3,56(r2)
   16820:	18c00044 	addi	r3,r3,1
   16824:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   16828:	d0a80517 	ldw	r2,-24556(gp)
   1682c:	10800044 	addi	r2,r2,1
   16830:	d0a80515 	stw	r2,-24556(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   16834:	001fdd00 	call	1fdd0 <OSCtxSw>
   16838:	e0bffd17 	ldw	r2,-12(fp)
   1683c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16840:	e0bfff17 	ldw	r2,-4(fp)
   16844:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   16848:	e037883a 	mov	sp,fp
   1684c:	dfc00117 	ldw	ra,4(sp)
   16850:	df000017 	ldw	fp,0(sp)
   16854:	dec00204 	addi	sp,sp,8
   16858:	f800283a 	ret

0001685c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1685c:	defffe04 	addi	sp,sp,-8
   16860:	df000115 	stw	fp,4(sp)
   16864:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   16868:	d0a80c03 	ldbu	r2,-24528(gp)
   1686c:	10c03fcc 	andi	r3,r2,255
   16870:	008000b4 	movhi	r2,2
   16874:	10839c04 	addi	r2,r2,3696
   16878:	10c5883a 	add	r2,r2,r3
   1687c:	10800003 	ldbu	r2,0(r2)
   16880:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   16884:	e0bfff03 	ldbu	r2,-4(fp)
   16888:	100490fa 	slli	r2,r2,3
   1688c:	1009883a 	mov	r4,r2
   16890:	e0ffff03 	ldbu	r3,-4(fp)
   16894:	d0a80c44 	addi	r2,gp,-24527
   16898:	1885883a 	add	r2,r3,r2
   1689c:	10800003 	ldbu	r2,0(r2)
   168a0:	10c03fcc 	andi	r3,r2,255
   168a4:	008000b4 	movhi	r2,2
   168a8:	10839c04 	addi	r2,r2,3696
   168ac:	10c5883a 	add	r2,r2,r3
   168b0:	10800003 	ldbu	r2,0(r2)
   168b4:	2085883a 	add	r2,r4,r2
   168b8:	d0a80205 	stb	r2,-24568(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   168bc:	e037883a 	mov	sp,fp
   168c0:	df000017 	ldw	fp,0(sp)
   168c4:	dec00104 	addi	sp,sp,4
   168c8:	f800283a 	ret

000168cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   168cc:	defffc04 	addi	sp,sp,-16
   168d0:	df000315 	stw	fp,12(sp)
   168d4:	df000304 	addi	fp,sp,12
   168d8:	e13ffe15 	stw	r4,-8(fp)
   168dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   168e0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   168e4:	00000b06 	br	16914 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   168e8:	e0bffe17 	ldw	r2,-8(fp)
   168ec:	10c00044 	addi	r3,r2,1
   168f0:	e0fffe15 	stw	r3,-8(fp)
   168f4:	e0ffff17 	ldw	r3,-4(fp)
   168f8:	19000044 	addi	r4,r3,1
   168fc:	e13fff15 	stw	r4,-4(fp)
   16900:	18c00003 	ldbu	r3,0(r3)
   16904:	10c00005 	stb	r3,0(r2)
        len++;
   16908:	e0bffd03 	ldbu	r2,-12(fp)
   1690c:	10800044 	addi	r2,r2,1
   16910:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   16914:	e0bfff17 	ldw	r2,-4(fp)
   16918:	10800003 	ldbu	r2,0(r2)
   1691c:	10803fcc 	andi	r2,r2,255
   16920:	103ff11e 	bne	r2,zero,168e8 <__alt_mem_Flash_flash_data+0xf40168e8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   16924:	e0bffe17 	ldw	r2,-8(fp)
   16928:	10000005 	stb	zero,0(r2)
    return (len);
   1692c:	e0bffd03 	ldbu	r2,-12(fp)
}
   16930:	e037883a 	mov	sp,fp
   16934:	df000017 	ldw	fp,0(sp)
   16938:	dec00104 	addi	sp,sp,4
   1693c:	f800283a 	ret

00016940 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   16940:	defffd04 	addi	sp,sp,-12
   16944:	df000215 	stw	fp,8(sp)
   16948:	df000204 	addi	fp,sp,8
   1694c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   16950:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   16954:	00000606 	br	16970 <OS_StrLen+0x30>
        psrc++;
   16958:	e0bfff17 	ldw	r2,-4(fp)
   1695c:	10800044 	addi	r2,r2,1
   16960:	e0bfff15 	stw	r2,-4(fp)
        len++;
   16964:	e0bffe03 	ldbu	r2,-8(fp)
   16968:	10800044 	addi	r2,r2,1
   1696c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   16970:	e0bfff17 	ldw	r2,-4(fp)
   16974:	10800003 	ldbu	r2,0(r2)
   16978:	10803fcc 	andi	r2,r2,255
   1697c:	103ff61e 	bne	r2,zero,16958 <__alt_mem_Flash_flash_data+0xf4016958>
        psrc++;
        len++;
    }
    return (len);
   16980:	e0bffe03 	ldbu	r2,-8(fp)
}
   16984:	e037883a 	mov	sp,fp
   16988:	df000017 	ldw	fp,0(sp)
   1698c:	dec00104 	addi	sp,sp,4
   16990:	f800283a 	ret

00016994 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   16994:	defffa04 	addi	sp,sp,-24
   16998:	dfc00515 	stw	ra,20(sp)
   1699c:	df000415 	stw	fp,16(sp)
   169a0:	df000404 	addi	fp,sp,16
   169a4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   169a8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169ac:	0005303a 	rdctl	r2,status
   169b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169b4:	e0fffd17 	ldw	r3,-12(fp)
   169b8:	00bfff84 	movi	r2,-2
   169bc:	1884703a 	and	r2,r3,r2
   169c0:	1001703a 	wrctl	status,r2
  
  return context;
   169c4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   169c8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   169cc:	d0a80117 	ldw	r2,-24572(gp)
   169d0:	10800044 	addi	r2,r2,1
   169d4:	d0a80115 	stw	r2,-24572(gp)
   169d8:	e0bffc17 	ldw	r2,-16(fp)
   169dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169e0:	e0bffe17 	ldw	r2,-8(fp)
   169e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   169e8:	00200c80 	call	200c8 <OSTaskIdleHook>
    }
   169ec:	003fef06 	br	169ac <__alt_mem_Flash_flash_data+0xf40169ac>

000169f0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   169f0:	defff804 	addi	sp,sp,-32
   169f4:	dfc00715 	stw	ra,28(sp)
   169f8:	df000615 	stw	fp,24(sp)
   169fc:	dc400515 	stw	r17,20(sp)
   16a00:	dc000415 	stw	r16,16(sp)
   16a04:	df000604 	addi	fp,sp,24
   16a08:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16a0c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   16a10:	00000206 	br	16a1c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   16a14:	01000044 	movi	r4,1
   16a18:	001c5a00 	call	1c5a0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   16a1c:	d0a81203 	ldbu	r2,-24504(gp)
   16a20:	10803fcc 	andi	r2,r2,255
   16a24:	103ffb26 	beq	r2,zero,16a14 <__alt_mem_Flash_flash_data+0xf4016a14>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   16a28:	d0e80617 	ldw	r3,-24552(gp)
   16a2c:	00947b34 	movhi	r2,20972
   16a30:	10a147c4 	addi	r2,r2,-31457
   16a34:	1888383a 	mulxuu	r4,r3,r2
   16a38:	1885383a 	mul	r2,r3,r2
   16a3c:	1021883a 	mov	r16,r2
   16a40:	2023883a 	mov	r17,r4
   16a44:	8804d17a 	srli	r2,r17,5
   16a48:	d0a80615 	stw	r2,-24552(gp)
    if (OSIdleCtrMax == 0L) {
   16a4c:	d0a80617 	ldw	r2,-24552(gp)
   16a50:	1000031e 	bne	r2,zero,16a60 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   16a54:	d0280805 	stb	zero,-24544(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   16a58:	01003fc4 	movi	r4,255
   16a5c:	001c1f40 	call	1c1f4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a60:	0005303a 	rdctl	r2,status
   16a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a68:	e0fffb17 	ldw	r3,-20(fp)
   16a6c:	00bfff84 	movi	r2,-2
   16a70:	1884703a 	and	r2,r3,r2
   16a74:	1001703a 	wrctl	status,r2
  
  return context;
   16a78:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   16a7c:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   16a80:	d0a80117 	ldw	r2,-24572(gp)
   16a84:	d0a81315 	stw	r2,-24500(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   16a88:	d0280115 	stw	zero,-24572(gp)
   16a8c:	e0bffa17 	ldw	r2,-24(fp)
   16a90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   16a9c:	d0e81317 	ldw	r3,-24500(gp)
   16aa0:	d0a80617 	ldw	r2,-24552(gp)
   16aa4:	1885203a 	divu	r2,r3,r2
   16aa8:	1007883a 	mov	r3,r2
   16aac:	00801904 	movi	r2,100
   16ab0:	10c5c83a 	sub	r2,r2,r3
   16ab4:	d0a80805 	stb	r2,-24544(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   16ab8:	00200580 	call	20058 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   16abc:	0016acc0 	call	16acc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   16ac0:	0009883a 	mov	r4,zero
   16ac4:	001c5a00 	call	1c5a0 <OSTimeDly>
    }
   16ac8:	003fe506 	br	16a60 <__alt_mem_Flash_flash_data+0xf4016a60>

00016acc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   16acc:	defffa04 	addi	sp,sp,-24
   16ad0:	dfc00515 	stw	ra,20(sp)
   16ad4:	df000415 	stw	fp,16(sp)
   16ad8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   16adc:	e03ffc05 	stb	zero,-16(fp)
   16ae0:	00002406 	br	16b74 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   16ae4:	e0fffc03 	ldbu	r3,-16(fp)
   16ae8:	e0bffe04 	addi	r2,fp,-8
   16aec:	1809883a 	mov	r4,r3
   16af0:	100b883a 	mov	r5,r2
   16af4:	001c02c0 	call	1c02c <OSTaskStkChk>
   16af8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   16afc:	e0bffc43 	ldbu	r2,-15(fp)
   16b00:	1000191e 	bne	r2,zero,16b68 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   16b04:	e0fffc03 	ldbu	r3,-16(fp)
   16b08:	008000f4 	movhi	r2,3
   16b0c:	10b07504 	addi	r2,r2,-15916
   16b10:	18c7883a 	add	r3,r3,r3
   16b14:	18c7883a 	add	r3,r3,r3
   16b18:	10c5883a 	add	r2,r2,r3
   16b1c:	10800017 	ldw	r2,0(r2)
   16b20:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   16b24:	e0bffd17 	ldw	r2,-12(fp)
   16b28:	10000f26 	beq	r2,zero,16b68 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   16b2c:	e0bffd17 	ldw	r2,-12(fp)
   16b30:	10800060 	cmpeqi	r2,r2,1
   16b34:	10000c1e 	bne	r2,zero,16b68 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   16b38:	e0bffd17 	ldw	r2,-12(fp)
   16b3c:	10c00217 	ldw	r3,8(r2)
   16b40:	e0bffd17 	ldw	r2,-12(fp)
   16b44:	10800317 	ldw	r2,12(r2)
   16b48:	1085883a 	add	r2,r2,r2
   16b4c:	1085883a 	add	r2,r2,r2
   16b50:	1887883a 	add	r3,r3,r2
   16b54:	e0bffd17 	ldw	r2,-12(fp)
   16b58:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   16b5c:	e0ffff17 	ldw	r3,-4(fp)
   16b60:	e0bffd17 	ldw	r2,-12(fp)
   16b64:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   16b68:	e0bffc03 	ldbu	r2,-16(fp)
   16b6c:	10800044 	addi	r2,r2,1
   16b70:	e0bffc05 	stb	r2,-16(fp)
   16b74:	e0bffc03 	ldbu	r2,-16(fp)
   16b78:	10800570 	cmpltui	r2,r2,21
   16b7c:	103fd91e 	bne	r2,zero,16ae4 <__alt_mem_Flash_flash_data+0xf4016ae4>
#endif
                }
            }
        }
    }
}
   16b80:	e037883a 	mov	sp,fp
   16b84:	dfc00117 	ldw	ra,4(sp)
   16b88:	df000017 	ldw	fp,0(sp)
   16b8c:	dec00204 	addi	sp,sp,8
   16b90:	f800283a 	ret

00016b94 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   16b94:	defff204 	addi	sp,sp,-56
   16b98:	dfc00d15 	stw	ra,52(sp)
   16b9c:	df000c15 	stw	fp,48(sp)
   16ba0:	df000c04 	addi	fp,sp,48
   16ba4:	e17ffc15 	stw	r5,-16(fp)
   16ba8:	e1bffd15 	stw	r6,-12(fp)
   16bac:	3807883a 	mov	r3,r7
   16bb0:	e0800417 	ldw	r2,16(fp)
   16bb4:	e13ffb05 	stb	r4,-20(fp)
   16bb8:	e0fffe0d 	sth	r3,-8(fp)
   16bbc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16bc0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bc4:	0005303a 	rdctl	r2,status
   16bc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bcc:	e0fff617 	ldw	r3,-40(fp)
   16bd0:	00bfff84 	movi	r2,-2
   16bd4:	1884703a 	and	r2,r3,r2
   16bd8:	1001703a 	wrctl	status,r2
  
  return context;
   16bdc:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   16be0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   16be4:	d0a80717 	ldw	r2,-24548(gp)
   16be8:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   16bec:	e0bff517 	ldw	r2,-44(fp)
   16bf0:	10009326 	beq	r2,zero,16e40 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   16bf4:	e0bff517 	ldw	r2,-44(fp)
   16bf8:	10800517 	ldw	r2,20(r2)
   16bfc:	d0a80715 	stw	r2,-24548(gp)
   16c00:	e0bff417 	ldw	r2,-48(fp)
   16c04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c08:	e0bff717 	ldw	r2,-36(fp)
   16c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   16c10:	e0bff517 	ldw	r2,-44(fp)
   16c14:	e0fffc17 	ldw	r3,-16(fp)
   16c18:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   16c1c:	e0bff517 	ldw	r2,-44(fp)
   16c20:	e0fffb03 	ldbu	r3,-20(fp)
   16c24:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   16c28:	e0bff517 	ldw	r2,-44(fp)
   16c2c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   16c30:	e0bff517 	ldw	r2,-44(fp)
   16c34:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   16c38:	e0bff517 	ldw	r2,-44(fp)
   16c3c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   16c40:	e0bff517 	ldw	r2,-44(fp)
   16c44:	e0c00317 	ldw	r3,12(fp)
   16c48:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   16c4c:	e0bff517 	ldw	r2,-44(fp)
   16c50:	e0c00217 	ldw	r3,8(fp)
   16c54:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   16c58:	e0bff517 	ldw	r2,-44(fp)
   16c5c:	e0fffd17 	ldw	r3,-12(fp)
   16c60:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   16c64:	e0bff517 	ldw	r2,-44(fp)
   16c68:	e0ffff0b 	ldhu	r3,-4(fp)
   16c6c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   16c70:	e0bff517 	ldw	r2,-44(fp)
   16c74:	e0fffe0b 	ldhu	r3,-8(fp)
   16c78:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   16c7c:	e0bff517 	ldw	r2,-44(fp)
   16c80:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   16c84:	e0bffb03 	ldbu	r2,-20(fp)
   16c88:	1004d0fa 	srli	r2,r2,3
   16c8c:	1007883a 	mov	r3,r2
   16c90:	e0bff517 	ldw	r2,-44(fp)
   16c94:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   16c98:	e0bffb03 	ldbu	r2,-20(fp)
   16c9c:	108001cc 	andi	r2,r2,7
   16ca0:	1007883a 	mov	r3,r2
   16ca4:	e0bff517 	ldw	r2,-44(fp)
   16ca8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   16cac:	e0bff517 	ldw	r2,-44(fp)
   16cb0:	10800d03 	ldbu	r2,52(r2)
   16cb4:	10803fcc 	andi	r2,r2,255
   16cb8:	00c00044 	movi	r3,1
   16cbc:	1884983a 	sll	r2,r3,r2
   16cc0:	1007883a 	mov	r3,r2
   16cc4:	e0bff517 	ldw	r2,-44(fp)
   16cc8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   16ccc:	e0bff517 	ldw	r2,-44(fp)
   16cd0:	10800cc3 	ldbu	r2,51(r2)
   16cd4:	10803fcc 	andi	r2,r2,255
   16cd8:	00c00044 	movi	r3,1
   16cdc:	1884983a 	sll	r2,r3,r2
   16ce0:	1007883a 	mov	r3,r2
   16ce4:	e0bff517 	ldw	r2,-44(fp)
   16ce8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   16cec:	e0bff517 	ldw	r2,-44(fp)
   16cf0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   16cf4:	e0bff517 	ldw	r2,-44(fp)
   16cf8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   16cfc:	e0bff517 	ldw	r2,-44(fp)
   16d00:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   16d04:	e0bff517 	ldw	r2,-44(fp)
   16d08:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   16d0c:	e0bff517 	ldw	r2,-44(fp)
   16d10:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   16d14:	e0bff517 	ldw	r2,-44(fp)
   16d18:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   16d1c:	e0bff517 	ldw	r2,-44(fp)
   16d20:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   16d24:	e0bff517 	ldw	r2,-44(fp)
   16d28:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   16d2c:	e0bff517 	ldw	r2,-44(fp)
   16d30:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   16d34:	e0bff517 	ldw	r2,-44(fp)
   16d38:	00c00fc4 	movi	r3,63
   16d3c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   16d40:	e0bff517 	ldw	r2,-44(fp)
   16d44:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   16d48:	e13ff517 	ldw	r4,-44(fp)
   16d4c:	00200e40 	call	200e4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   16d50:	e13ff517 	ldw	r4,-44(fp)
   16d54:	001fffc0 	call	1fffc <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d58:	0005303a 	rdctl	r2,status
   16d5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d60:	e0fff817 	ldw	r3,-32(fp)
   16d64:	00bfff84 	movi	r2,-2
   16d68:	1884703a 	and	r2,r3,r2
   16d6c:	1001703a 	wrctl	status,r2
  
  return context;
   16d70:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   16d74:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   16d78:	e0fffb03 	ldbu	r3,-20(fp)
   16d7c:	008000f4 	movhi	r2,3
   16d80:	10b07504 	addi	r2,r2,-15916
   16d84:	18c7883a 	add	r3,r3,r3
   16d88:	18c7883a 	add	r3,r3,r3
   16d8c:	10c5883a 	add	r2,r2,r3
   16d90:	e0fff517 	ldw	r3,-44(fp)
   16d94:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   16d98:	d0e80317 	ldw	r3,-24564(gp)
   16d9c:	e0bff517 	ldw	r2,-44(fp)
   16da0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   16da4:	e0bff517 	ldw	r2,-44(fp)
   16da8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   16dac:	d0a80317 	ldw	r2,-24564(gp)
   16db0:	10000326 	beq	r2,zero,16dc0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   16db4:	d0a80317 	ldw	r2,-24564(gp)
   16db8:	e0fff517 	ldw	r3,-44(fp)
   16dbc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   16dc0:	e0bff517 	ldw	r2,-44(fp)
   16dc4:	d0a80315 	stw	r2,-24564(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   16dc8:	e0bff517 	ldw	r2,-44(fp)
   16dcc:	10c00d83 	ldbu	r3,54(r2)
   16dd0:	d0a80c03 	ldbu	r2,-24528(gp)
   16dd4:	1884b03a 	or	r2,r3,r2
   16dd8:	d0a80c05 	stb	r2,-24528(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16ddc:	e0bff517 	ldw	r2,-44(fp)
   16de0:	10800d03 	ldbu	r2,52(r2)
   16de4:	10c03fcc 	andi	r3,r2,255
   16de8:	e0bff517 	ldw	r2,-44(fp)
   16dec:	10800d03 	ldbu	r2,52(r2)
   16df0:	11003fcc 	andi	r4,r2,255
   16df4:	d0a80c44 	addi	r2,gp,-24527
   16df8:	2085883a 	add	r2,r4,r2
   16dfc:	11000003 	ldbu	r4,0(r2)
   16e00:	e0bff517 	ldw	r2,-44(fp)
   16e04:	10800d43 	ldbu	r2,53(r2)
   16e08:	2084b03a 	or	r2,r4,r2
   16e0c:	1009883a 	mov	r4,r2
   16e10:	d0a80c44 	addi	r2,gp,-24527
   16e14:	1885883a 	add	r2,r3,r2
   16e18:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   16e1c:	d0a80843 	ldbu	r2,-24543(gp)
   16e20:	10800044 	addi	r2,r2,1
   16e24:	d0a80845 	stb	r2,-24543(gp)
   16e28:	e0bff417 	ldw	r2,-48(fp)
   16e2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e30:	e0bff917 	ldw	r2,-28(fp)
   16e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   16e38:	0005883a 	mov	r2,zero
   16e3c:	00000506 	br	16e54 <OS_TCBInit+0x2c0>
   16e40:	e0bff417 	ldw	r2,-48(fp)
   16e44:	e0bffa15 	stw	r2,-24(fp)
   16e48:	e0bffa17 	ldw	r2,-24(fp)
   16e4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   16e50:	00801084 	movi	r2,66
}
   16e54:	e037883a 	mov	sp,fp
   16e58:	dfc00117 	ldw	ra,4(sp)
   16e5c:	df000017 	ldw	fp,0(sp)
   16e60:	dec00204 	addi	sp,sp,8
   16e64:	f800283a 	ret

00016e68 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   16e68:	defffe04 	addi	sp,sp,-8
   16e6c:	df000115 	stw	fp,4(sp)
   16e70:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   16e74:	d0a00f04 	addi	r2,gp,-32708
   16e78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   16e7c:	d0a01004 	addi	r2,gp,-32704
   16e80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   16e84:	d0a01184 	addi	r2,gp,-32698
   16e88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   16e8c:	d0a01204 	addi	r2,gp,-32696
   16e90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   16e94:	d0a01104 	addi	r2,gp,-32700
   16e98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   16e9c:	d0a01284 	addi	r2,gp,-32694
   16ea0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   16ea4:	d0a01304 	addi	r2,gp,-32692
   16ea8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   16eac:	d0a01384 	addi	r2,gp,-32690
   16eb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   16eb4:	d0a01404 	addi	r2,gp,-32688
   16eb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   16ebc:	d0a01484 	addi	r2,gp,-32686
   16ec0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   16ec4:	d0a01504 	addi	r2,gp,-32684
   16ec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   16ecc:	d0a01584 	addi	r2,gp,-32682
   16ed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   16ed4:	d0a01604 	addi	r2,gp,-32680
   16ed8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   16edc:	d0a01684 	addi	r2,gp,-32678
   16ee0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   16ee4:	d0a01704 	addi	r2,gp,-32676
   16ee8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   16eec:	d0a01784 	addi	r2,gp,-32674
   16ef0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   16ef4:	d0a01804 	addi	r2,gp,-32672
   16ef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   16efc:	d0a01884 	addi	r2,gp,-32670
   16f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   16f04:	d0a01904 	addi	r2,gp,-32668
   16f08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   16f0c:	d0a01984 	addi	r2,gp,-32666
   16f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   16f14:	d0a01a04 	addi	r2,gp,-32664
   16f18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   16f1c:	d0a01a84 	addi	r2,gp,-32662
   16f20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   16f24:	d0a01b04 	addi	r2,gp,-32660
   16f28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   16f2c:	d0a01b84 	addi	r2,gp,-32658
   16f30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   16f34:	d0a01c04 	addi	r2,gp,-32656
   16f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   16f3c:	d0a01c84 	addi	r2,gp,-32654
   16f40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   16f44:	d0a01d04 	addi	r2,gp,-32652
   16f48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   16f4c:	d0a01d84 	addi	r2,gp,-32650
   16f50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   16f54:	d0a01e04 	addi	r2,gp,-32648
   16f58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   16f5c:	d0a01e84 	addi	r2,gp,-32646
   16f60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   16f64:	d0a01f04 	addi	r2,gp,-32644
   16f68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   16f6c:	d0a01f84 	addi	r2,gp,-32642
   16f70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   16f74:	d0a02004 	addi	r2,gp,-32640
   16f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   16f7c:	d0a02084 	addi	r2,gp,-32638
   16f80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   16f84:	d0a02104 	addi	r2,gp,-32636
   16f88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   16f8c:	d0a02184 	addi	r2,gp,-32634
   16f90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   16f94:	d0a02204 	addi	r2,gp,-32632
   16f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   16f9c:	d0a02284 	addi	r2,gp,-32630
   16fa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   16fa4:	d0a02304 	addi	r2,gp,-32628
   16fa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   16fac:	d0a02384 	addi	r2,gp,-32626
   16fb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   16fb4:	d0a02404 	addi	r2,gp,-32624
   16fb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   16fbc:	d0a02484 	addi	r2,gp,-32622
   16fc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   16fc4:	d0a02504 	addi	r2,gp,-32620
   16fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   16fcc:	d0a02584 	addi	r2,gp,-32618
   16fd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   16fd4:	d0a02604 	addi	r2,gp,-32616
   16fd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   16fdc:	d0a02b04 	addi	r2,gp,-32596
   16fe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   16fe4:	e037883a 	mov	sp,fp
   16fe8:	df000017 	ldw	fp,0(sp)
   16fec:	dec00104 	addi	sp,sp,4
   16ff0:	f800283a 	ret

00016ff4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   16ff4:	defff204 	addi	sp,sp,-56
   16ff8:	df000d15 	stw	fp,52(sp)
   16ffc:	df000d04 	addi	fp,sp,52
   17000:	e13ffc15 	stw	r4,-16(fp)
   17004:	2807883a 	mov	r3,r5
   17008:	3005883a 	mov	r2,r6
   1700c:	e1ffff15 	stw	r7,-4(fp)
   17010:	e0fffd0d 	sth	r3,-12(fp)
   17014:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   17018:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	1000021e 	bne	r2,zero,1702c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   17024:	0005883a 	mov	r2,zero
   17028:	0000b006 	br	172ec <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1702c:	e0bffc17 	ldw	r2,-16(fp)
   17030:	1000051e 	bne	r2,zero,17048 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17034:	e0bfff17 	ldw	r2,-4(fp)
   17038:	00c01b84 	movi	r3,110
   1703c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17040:	0005883a 	mov	r2,zero
   17044:	0000a906 	br	172ec <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   17048:	e0bffc17 	ldw	r2,-16(fp)
   1704c:	10800003 	ldbu	r2,0(r2)
   17050:	10803fcc 	andi	r2,r2,255
   17054:	10800160 	cmpeqi	r2,r2,5
   17058:	1000051e 	bne	r2,zero,17070 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1705c:	e0bfff17 	ldw	r2,-4(fp)
   17060:	00c00044 	movi	r3,1
   17064:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17068:	0005883a 	mov	r2,zero
   1706c:	00009f06 	br	172ec <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   17070:	e0fffe03 	ldbu	r3,-8(fp)
   17074:	00bfe004 	movi	r2,-128
   17078:	1884703a 	and	r2,r3,r2
   1707c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   17080:	e0bff503 	ldbu	r2,-44(fp)
   17084:	10000626 	beq	r2,zero,170a0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   17088:	e0bffe03 	ldbu	r2,-8(fp)
   1708c:	10801fcc 	andi	r2,r2,127
   17090:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   17094:	00800044 	movi	r2,1
   17098:	e0bff385 	stb	r2,-50(fp)
   1709c:	00000106 	br	170a4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   170a0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   170a4:	e0bfff17 	ldw	r2,-4(fp)
   170a8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170ac:	0005303a 	rdctl	r2,status
   170b0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170b4:	e0fff617 	ldw	r3,-40(fp)
   170b8:	00bfff84 	movi	r2,-2
   170bc:	1884703a 	and	r2,r3,r2
   170c0:	1001703a 	wrctl	status,r2
  
  return context;
   170c4:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   170c8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   170cc:	e0bffe03 	ldbu	r2,-8(fp)
   170d0:	10c00060 	cmpeqi	r3,r2,1
   170d4:	18005f1e 	bne	r3,zero,17254 <OSFlagAccept+0x260>
   170d8:	10c00088 	cmpgei	r3,r2,2
   170dc:	1800021e 	bne	r3,zero,170e8 <OSFlagAccept+0xf4>
   170e0:	10003f26 	beq	r2,zero,171e0 <OSFlagAccept+0x1ec>
   170e4:	00007706 	br	172c4 <OSFlagAccept+0x2d0>
   170e8:	10c000a0 	cmpeqi	r3,r2,2
   170ec:	1800031e 	bne	r3,zero,170fc <OSFlagAccept+0x108>
   170f0:	108000e0 	cmpeqi	r2,r2,3
   170f4:	10001e1e 	bne	r2,zero,17170 <OSFlagAccept+0x17c>
   170f8:	00007206 	br	172c4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   170fc:	e0bffc17 	ldw	r2,-16(fp)
   17100:	10c0020b 	ldhu	r3,8(r2)
   17104:	e0bffd0b 	ldhu	r2,-12(fp)
   17108:	1884703a 	and	r2,r3,r2
   1710c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   17110:	e0fff30b 	ldhu	r3,-52(fp)
   17114:	e0bffd0b 	ldhu	r2,-12(fp)
   17118:	18800d1e 	bne	r3,r2,17150 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1711c:	e0bff383 	ldbu	r2,-50(fp)
   17120:	10800058 	cmpnei	r2,r2,1
   17124:	10000d1e 	bne	r2,zero,1715c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   17128:	e0bffc17 	ldw	r2,-16(fp)
   1712c:	1080020b 	ldhu	r2,8(r2)
   17130:	1007883a 	mov	r3,r2
   17134:	e0bff30b 	ldhu	r2,-52(fp)
   17138:	0084303a 	nor	r2,zero,r2
   1713c:	1884703a 	and	r2,r3,r2
   17140:	1007883a 	mov	r3,r2
   17144:	e0bffc17 	ldw	r2,-16(fp)
   17148:	10c0020d 	sth	r3,8(r2)
   1714c:	00000306 	br	1715c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   17150:	e0bfff17 	ldw	r2,-4(fp)
   17154:	00c01c04 	movi	r3,112
   17158:	10c00005 	stb	r3,0(r2)
   1715c:	e0bff417 	ldw	r2,-48(fp)
   17160:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17164:	e0bff717 	ldw	r2,-36(fp)
   17168:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1716c:	00005e06 	br	172e8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   17170:	e0bffc17 	ldw	r2,-16(fp)
   17174:	10c0020b 	ldhu	r3,8(r2)
   17178:	e0bffd0b 	ldhu	r2,-12(fp)
   1717c:	1884703a 	and	r2,r3,r2
   17180:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   17184:	e0bff30b 	ldhu	r2,-52(fp)
   17188:	10000d26 	beq	r2,zero,171c0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1718c:	e0bff383 	ldbu	r2,-50(fp)
   17190:	10800058 	cmpnei	r2,r2,1
   17194:	10000d1e 	bne	r2,zero,171cc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   17198:	e0bffc17 	ldw	r2,-16(fp)
   1719c:	1080020b 	ldhu	r2,8(r2)
   171a0:	1007883a 	mov	r3,r2
   171a4:	e0bff30b 	ldhu	r2,-52(fp)
   171a8:	0084303a 	nor	r2,zero,r2
   171ac:	1884703a 	and	r2,r3,r2
   171b0:	1007883a 	mov	r3,r2
   171b4:	e0bffc17 	ldw	r2,-16(fp)
   171b8:	10c0020d 	sth	r3,8(r2)
   171bc:	00000306 	br	171cc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   171c0:	e0bfff17 	ldw	r2,-4(fp)
   171c4:	00c01c04 	movi	r3,112
   171c8:	10c00005 	stb	r3,0(r2)
   171cc:	e0bff417 	ldw	r2,-48(fp)
   171d0:	e0bff815 	stw	r2,-32(fp)
   171d4:	e0bff817 	ldw	r2,-32(fp)
   171d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   171dc:	00004206 	br	172e8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   171e0:	e0bffc17 	ldw	r2,-16(fp)
   171e4:	1080020b 	ldhu	r2,8(r2)
   171e8:	0084303a 	nor	r2,zero,r2
   171ec:	1007883a 	mov	r3,r2
   171f0:	e0bffd0b 	ldhu	r2,-12(fp)
   171f4:	1884703a 	and	r2,r3,r2
   171f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   171fc:	e0fff30b 	ldhu	r3,-52(fp)
   17200:	e0bffd0b 	ldhu	r2,-12(fp)
   17204:	18800b1e 	bne	r3,r2,17234 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17208:	e0bff383 	ldbu	r2,-50(fp)
   1720c:	10800058 	cmpnei	r2,r2,1
   17210:	10000b1e 	bne	r2,zero,17240 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   17214:	e0bffc17 	ldw	r2,-16(fp)
   17218:	10c0020b 	ldhu	r3,8(r2)
   1721c:	e0bff30b 	ldhu	r2,-52(fp)
   17220:	1884b03a 	or	r2,r3,r2
   17224:	1007883a 	mov	r3,r2
   17228:	e0bffc17 	ldw	r2,-16(fp)
   1722c:	10c0020d 	sth	r3,8(r2)
   17230:	00000306 	br	17240 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   17234:	e0bfff17 	ldw	r2,-4(fp)
   17238:	00c01c04 	movi	r3,112
   1723c:	10c00005 	stb	r3,0(r2)
   17240:	e0bff417 	ldw	r2,-48(fp)
   17244:	e0bff915 	stw	r2,-28(fp)
   17248:	e0bff917 	ldw	r2,-28(fp)
   1724c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   17250:	00002506 	br	172e8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   17254:	e0bffc17 	ldw	r2,-16(fp)
   17258:	1080020b 	ldhu	r2,8(r2)
   1725c:	0084303a 	nor	r2,zero,r2
   17260:	1007883a 	mov	r3,r2
   17264:	e0bffd0b 	ldhu	r2,-12(fp)
   17268:	1884703a 	and	r2,r3,r2
   1726c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   17270:	e0bff30b 	ldhu	r2,-52(fp)
   17274:	10000b26 	beq	r2,zero,172a4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17278:	e0bff383 	ldbu	r2,-50(fp)
   1727c:	10800058 	cmpnei	r2,r2,1
   17280:	10000b1e 	bne	r2,zero,172b0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   17284:	e0bffc17 	ldw	r2,-16(fp)
   17288:	10c0020b 	ldhu	r3,8(r2)
   1728c:	e0bff30b 	ldhu	r2,-52(fp)
   17290:	1884b03a 	or	r2,r3,r2
   17294:	1007883a 	mov	r3,r2
   17298:	e0bffc17 	ldw	r2,-16(fp)
   1729c:	10c0020d 	sth	r3,8(r2)
   172a0:	00000306 	br	172b0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   172a4:	e0bfff17 	ldw	r2,-4(fp)
   172a8:	00c01c04 	movi	r3,112
   172ac:	10c00005 	stb	r3,0(r2)
   172b0:	e0bff417 	ldw	r2,-48(fp)
   172b4:	e0bffa15 	stw	r2,-24(fp)
   172b8:	e0bffa17 	ldw	r2,-24(fp)
   172bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   172c0:	00000906 	br	172e8 <OSFlagAccept+0x2f4>
   172c4:	e0bff417 	ldw	r2,-48(fp)
   172c8:	e0bffb15 	stw	r2,-20(fp)
   172cc:	e0bffb17 	ldw	r2,-20(fp)
   172d0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   172d4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   172d8:	e0bfff17 	ldw	r2,-4(fp)
   172dc:	00c01bc4 	movi	r3,111
   172e0:	10c00005 	stb	r3,0(r2)
             break;
   172e4:	0001883a 	nop
    }
    return (flags_rdy);
   172e8:	e0bff30b 	ldhu	r2,-52(fp)
}
   172ec:	e037883a 	mov	sp,fp
   172f0:	df000017 	ldw	fp,0(sp)
   172f4:	dec00104 	addi	sp,sp,4
   172f8:	f800283a 	ret

000172fc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   172fc:	defff804 	addi	sp,sp,-32
   17300:	df000715 	stw	fp,28(sp)
   17304:	df000704 	addi	fp,sp,28
   17308:	2005883a 	mov	r2,r4
   1730c:	e17fff15 	stw	r5,-4(fp)
   17310:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   17314:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   17318:	e0bfff17 	ldw	r2,-4(fp)
   1731c:	1000021e 	bne	r2,zero,17328 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   17320:	0005883a 	mov	r2,zero
   17324:	00003b06 	br	17414 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   17328:	008000b4 	movhi	r2,2
   1732c:	1093ed04 	addi	r2,r2,20404
   17330:	10800003 	ldbu	r2,0(r2)
   17334:	10803fcc 	andi	r2,r2,255
   17338:	10000526 	beq	r2,zero,17350 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1733c:	e0bfff17 	ldw	r2,-4(fp)
   17340:	00c00404 	movi	r3,16
   17344:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   17348:	0005883a 	mov	r2,zero
   1734c:	00003106 	br	17414 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17350:	0005303a 	rdctl	r2,status
   17354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17358:	e0fffb17 	ldw	r3,-20(fp)
   1735c:	00bfff84 	movi	r2,-2
   17360:	1884703a 	and	r2,r3,r2
   17364:	1001703a 	wrctl	status,r2
  
  return context;
   17368:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1736c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   17370:	008000b4 	movhi	r2,2
   17374:	1093f004 	addi	r2,r2,20416
   17378:	10800017 	ldw	r2,0(r2)
   1737c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   17380:	e0bffa17 	ldw	r2,-24(fp)
   17384:	10001b26 	beq	r2,zero,173f4 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   17388:	008000b4 	movhi	r2,2
   1738c:	1093f004 	addi	r2,r2,20416
   17390:	10800017 	ldw	r2,0(r2)
   17394:	10c00117 	ldw	r3,4(r2)
   17398:	008000b4 	movhi	r2,2
   1739c:	1093f004 	addi	r2,r2,20416
   173a0:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   173a4:	e0bffa17 	ldw	r2,-24(fp)
   173a8:	00c00144 	movi	r3,5
   173ac:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   173b0:	e0bffa17 	ldw	r2,-24(fp)
   173b4:	e0fffe0b 	ldhu	r3,-8(fp)
   173b8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   173bc:	e0bffa17 	ldw	r2,-24(fp)
   173c0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   173c4:	e0bffa17 	ldw	r2,-24(fp)
   173c8:	00c00fc4 	movi	r3,63
   173cc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   173d0:	e0bffa17 	ldw	r2,-24(fp)
   173d4:	100002c5 	stb	zero,11(r2)
   173d8:	e0bff917 	ldw	r2,-28(fp)
   173dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173e0:	e0bffc17 	ldw	r2,-16(fp)
   173e4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   173e8:	e0bfff17 	ldw	r2,-4(fp)
   173ec:	10000005 	stb	zero,0(r2)
   173f0:	00000706 	br	17410 <OSFlagCreate+0x114>
   173f4:	e0bff917 	ldw	r2,-28(fp)
   173f8:	e0bffd15 	stw	r2,-12(fp)
   173fc:	e0bffd17 	ldw	r2,-12(fp)
   17400:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   17404:	e0bfff17 	ldw	r2,-4(fp)
   17408:	00c01c84 	movi	r3,114
   1740c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   17410:	e0bffa17 	ldw	r2,-24(fp)
}
   17414:	e037883a 	mov	sp,fp
   17418:	df000017 	ldw	fp,0(sp)
   1741c:	dec00104 	addi	sp,sp,4
   17420:	f800283a 	ret

00017424 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   17424:	defff204 	addi	sp,sp,-56
   17428:	dfc00d15 	stw	ra,52(sp)
   1742c:	df000c15 	stw	fp,48(sp)
   17430:	df000c04 	addi	fp,sp,48
   17434:	e13ffd15 	stw	r4,-12(fp)
   17438:	2805883a 	mov	r2,r5
   1743c:	e1bfff15 	stw	r6,-4(fp)
   17440:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   17444:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17448:	e0bfff17 	ldw	r2,-4(fp)
   1744c:	1000021e 	bne	r2,zero,17458 <OSFlagDel+0x34>
        return (pgrp);
   17450:	e0bffd17 	ldw	r2,-12(fp)
   17454:	00008a06 	br	17680 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   17458:	e0bffd17 	ldw	r2,-12(fp)
   1745c:	1000051e 	bne	r2,zero,17474 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17460:	e0bfff17 	ldw	r2,-4(fp)
   17464:	00c01b84 	movi	r3,110
   17468:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1746c:	e0bffd17 	ldw	r2,-12(fp)
   17470:	00008306 	br	17680 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17474:	008000b4 	movhi	r2,2
   17478:	1093ed04 	addi	r2,r2,20404
   1747c:	10800003 	ldbu	r2,0(r2)
   17480:	10803fcc 	andi	r2,r2,255
   17484:	10000526 	beq	r2,zero,1749c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17488:	e0bfff17 	ldw	r2,-4(fp)
   1748c:	00c003c4 	movi	r3,15
   17490:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   17494:	e0bffd17 	ldw	r2,-12(fp)
   17498:	00007906 	br	17680 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1749c:	e0bffd17 	ldw	r2,-12(fp)
   174a0:	10800003 	ldbu	r2,0(r2)
   174a4:	10803fcc 	andi	r2,r2,255
   174a8:	10800160 	cmpeqi	r2,r2,5
   174ac:	1000051e 	bne	r2,zero,174c4 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   174b0:	e0bfff17 	ldw	r2,-4(fp)
   174b4:	00c00044 	movi	r3,1
   174b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   174bc:	e0bffd17 	ldw	r2,-12(fp)
   174c0:	00006f06 	br	17680 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174c4:	0005303a 	rdctl	r2,status
   174c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174cc:	e0fff817 	ldw	r3,-32(fp)
   174d0:	00bfff84 	movi	r2,-2
   174d4:	1884703a 	and	r2,r3,r2
   174d8:	1001703a 	wrctl	status,r2
  
  return context;
   174dc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   174e0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   174e4:	e0bffd17 	ldw	r2,-12(fp)
   174e8:	10800117 	ldw	r2,4(r2)
   174ec:	10000326 	beq	r2,zero,174fc <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   174f0:	00800044 	movi	r2,1
   174f4:	e0bff405 	stb	r2,-48(fp)
   174f8:	00000106 	br	17500 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   174fc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   17500:	e0bffe03 	ldbu	r2,-8(fp)
   17504:	10000326 	beq	r2,zero,17514 <OSFlagDel+0xf0>
   17508:	10800060 	cmpeqi	r2,r2,1
   1750c:	1000271e 	bne	r2,zero,175ac <OSFlagDel+0x188>
   17510:	00005006 	br	17654 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   17514:	e0bff403 	ldbu	r2,-48(fp)
   17518:	10001a1e 	bne	r2,zero,17584 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1751c:	e0bffd17 	ldw	r2,-12(fp)
   17520:	00c00fc4 	movi	r3,63
   17524:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   17528:	e0bffd17 	ldw	r2,-12(fp)
   1752c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   17530:	e0bffd17 	ldw	r2,-12(fp)
   17534:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   17538:	008000b4 	movhi	r2,2
   1753c:	1093f004 	addi	r2,r2,20416
   17540:	10c00017 	ldw	r3,0(r2)
   17544:	e0bffd17 	ldw	r2,-12(fp)
   17548:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1754c:	e0bffd17 	ldw	r2,-12(fp)
   17550:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   17554:	008000b4 	movhi	r2,2
   17558:	1093f004 	addi	r2,r2,20416
   1755c:	e0fffd17 	ldw	r3,-12(fp)
   17560:	10c00015 	stw	r3,0(r2)
   17564:	e0bff717 	ldw	r2,-36(fp)
   17568:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1756c:	e0bff917 	ldw	r2,-28(fp)
   17570:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   17574:	e0bfff17 	ldw	r2,-4(fp)
   17578:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1757c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   17580:	00003e06 	br	1767c <OSFlagDel+0x258>
   17584:	e0bff717 	ldw	r2,-36(fp)
   17588:	e0bffa15 	stw	r2,-24(fp)
   1758c:	e0bffa17 	ldw	r2,-24(fp)
   17590:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   17594:	e0bfff17 	ldw	r2,-4(fp)
   17598:	00c01244 	movi	r3,73
   1759c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   175a0:	e0bffd17 	ldw	r2,-12(fp)
   175a4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   175a8:	00003406 	br	1767c <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   175ac:	e0bffd17 	ldw	r2,-12(fp)
   175b0:	10800117 	ldw	r2,4(r2)
   175b4:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   175b8:	00000606 	br	175d4 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   175bc:	e13ff517 	ldw	r4,-44(fp)
   175c0:	000b883a 	mov	r5,zero
   175c4:	00186600 	call	18660 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   175c8:	e0bff517 	ldw	r2,-44(fp)
   175cc:	10800017 	ldw	r2,0(r2)
   175d0:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   175d4:	e0bff517 	ldw	r2,-44(fp)
   175d8:	103ff81e 	bne	r2,zero,175bc <__alt_mem_Flash_flash_data+0xf40175bc>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   175dc:	e0bffd17 	ldw	r2,-12(fp)
   175e0:	00c00fc4 	movi	r3,63
   175e4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   175e8:	e0bffd17 	ldw	r2,-12(fp)
   175ec:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   175f0:	e0bffd17 	ldw	r2,-12(fp)
   175f4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   175f8:	008000b4 	movhi	r2,2
   175fc:	1093f004 	addi	r2,r2,20416
   17600:	10c00017 	ldw	r3,0(r2)
   17604:	e0bffd17 	ldw	r2,-12(fp)
   17608:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1760c:	e0bffd17 	ldw	r2,-12(fp)
   17610:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   17614:	008000b4 	movhi	r2,2
   17618:	1093f004 	addi	r2,r2,20416
   1761c:	e0fffd17 	ldw	r3,-12(fp)
   17620:	10c00015 	stw	r3,0(r2)
   17624:	e0bff717 	ldw	r2,-36(fp)
   17628:	e0bffb15 	stw	r2,-20(fp)
   1762c:	e0bffb17 	ldw	r2,-20(fp)
   17630:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17634:	e0bff403 	ldbu	r2,-48(fp)
   17638:	10800058 	cmpnei	r2,r2,1
   1763c:	1000011e 	bne	r2,zero,17644 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17640:	00167900 	call	16790 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   17644:	e0bfff17 	ldw	r2,-4(fp)
   17648:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1764c:	e03ff615 	stw	zero,-40(fp)
             break;
   17650:	00000a06 	br	1767c <OSFlagDel+0x258>
   17654:	e0bff717 	ldw	r2,-36(fp)
   17658:	e0bffc15 	stw	r2,-16(fp)
   1765c:	e0bffc17 	ldw	r2,-16(fp)
   17660:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   17664:	e0bfff17 	ldw	r2,-4(fp)
   17668:	00c001c4 	movi	r3,7
   1766c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   17670:	e0bffd17 	ldw	r2,-12(fp)
   17674:	e0bff615 	stw	r2,-40(fp)
             break;
   17678:	0001883a 	nop
    }
    return (pgrp_return);
   1767c:	e0bff617 	ldw	r2,-40(fp)
}
   17680:	e037883a 	mov	sp,fp
   17684:	dfc00117 	ldw	ra,4(sp)
   17688:	df000017 	ldw	fp,0(sp)
   1768c:	dec00204 	addi	sp,sp,8
   17690:	f800283a 	ret

00017694 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   17694:	defff604 	addi	sp,sp,-40
   17698:	dfc00915 	stw	ra,36(sp)
   1769c:	df000815 	stw	fp,32(sp)
   176a0:	df000804 	addi	fp,sp,32
   176a4:	e13ffd15 	stw	r4,-12(fp)
   176a8:	e17ffe15 	stw	r5,-8(fp)
   176ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   176b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   176b4:	e0bfff17 	ldw	r2,-4(fp)
   176b8:	1000021e 	bne	r2,zero,176c4 <OSFlagNameGet+0x30>
        return (0);
   176bc:	0005883a 	mov	r2,zero
   176c0:	00003b06 	br	177b0 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   176c4:	e0bffd17 	ldw	r2,-12(fp)
   176c8:	1000051e 	bne	r2,zero,176e0 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   176cc:	e0bfff17 	ldw	r2,-4(fp)
   176d0:	00c01b84 	movi	r3,110
   176d4:	10c00005 	stb	r3,0(r2)
        return (0);
   176d8:	0005883a 	mov	r2,zero
   176dc:	00003406 	br	177b0 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   176e0:	e0bffe17 	ldw	r2,-8(fp)
   176e4:	1000051e 	bne	r2,zero,176fc <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   176e8:	e0bfff17 	ldw	r2,-4(fp)
   176ec:	00c00304 	movi	r3,12
   176f0:	10c00005 	stb	r3,0(r2)
        return (0);
   176f4:	0005883a 	mov	r2,zero
   176f8:	00002d06 	br	177b0 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   176fc:	008000b4 	movhi	r2,2
   17700:	1093ed04 	addi	r2,r2,20404
   17704:	10800003 	ldbu	r2,0(r2)
   17708:	10803fcc 	andi	r2,r2,255
   1770c:	10000526 	beq	r2,zero,17724 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   17710:	e0bfff17 	ldw	r2,-4(fp)
   17714:	00c00444 	movi	r3,17
   17718:	10c00005 	stb	r3,0(r2)
        return (0);
   1771c:	0005883a 	mov	r2,zero
   17720:	00002306 	br	177b0 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17724:	0005303a 	rdctl	r2,status
   17728:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1772c:	e0fffa17 	ldw	r3,-24(fp)
   17730:	00bfff84 	movi	r2,-2
   17734:	1884703a 	and	r2,r3,r2
   17738:	1001703a 	wrctl	status,r2
  
  return context;
   1773c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17740:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   17744:	e0bffd17 	ldw	r2,-12(fp)
   17748:	10800003 	ldbu	r2,0(r2)
   1774c:	10803fcc 	andi	r2,r2,255
   17750:	10800160 	cmpeqi	r2,r2,5
   17754:	1000091e 	bne	r2,zero,1777c <OSFlagNameGet+0xe8>
   17758:	e0bff817 	ldw	r2,-32(fp)
   1775c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17760:	e0bffb17 	ldw	r2,-20(fp)
   17764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   17768:	e0bfff17 	ldw	r2,-4(fp)
   1776c:	00c00044 	movi	r3,1
   17770:	10c00005 	stb	r3,0(r2)
        return (0);
   17774:	0005883a 	mov	r2,zero
   17778:	00000d06 	br	177b0 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1777c:	e0bffd17 	ldw	r2,-12(fp)
   17780:	10800284 	addi	r2,r2,10
   17784:	e13ffe17 	ldw	r4,-8(fp)
   17788:	100b883a 	mov	r5,r2
   1778c:	00168cc0 	call	168cc <OS_StrCopy>
   17790:	e0bff905 	stb	r2,-28(fp)
   17794:	e0bff817 	ldw	r2,-32(fp)
   17798:	e0bffc15 	stw	r2,-16(fp)
   1779c:	e0bffc17 	ldw	r2,-16(fp)
   177a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   177a4:	e0bfff17 	ldw	r2,-4(fp)
   177a8:	10000005 	stb	zero,0(r2)
    return (len);
   177ac:	e0bff903 	ldbu	r2,-28(fp)
}
   177b0:	e037883a 	mov	sp,fp
   177b4:	dfc00117 	ldw	ra,4(sp)
   177b8:	df000017 	ldw	fp,0(sp)
   177bc:	dec00204 	addi	sp,sp,8
   177c0:	f800283a 	ret

000177c4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   177c4:	defff504 	addi	sp,sp,-44
   177c8:	dfc00a15 	stw	ra,40(sp)
   177cc:	df000915 	stw	fp,36(sp)
   177d0:	df000904 	addi	fp,sp,36
   177d4:	e13ffd15 	stw	r4,-12(fp)
   177d8:	e17ffe15 	stw	r5,-8(fp)
   177dc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   177e4:	e0bfff17 	ldw	r2,-4(fp)
   177e8:	1000011e 	bne	r2,zero,177f0 <OSFlagNameSet+0x2c>
        return;
   177ec:	00004406 	br	17900 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   177f0:	e0bffd17 	ldw	r2,-12(fp)
   177f4:	1000041e 	bne	r2,zero,17808 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   177f8:	e0bfff17 	ldw	r2,-4(fp)
   177fc:	00c01b84 	movi	r3,110
   17800:	10c00005 	stb	r3,0(r2)
        return;
   17804:	00003e06 	br	17900 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17808:	e0bffe17 	ldw	r2,-8(fp)
   1780c:	1000041e 	bne	r2,zero,17820 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   17810:	e0bfff17 	ldw	r2,-4(fp)
   17814:	00c00304 	movi	r3,12
   17818:	10c00005 	stb	r3,0(r2)
        return;
   1781c:	00003806 	br	17900 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17820:	008000b4 	movhi	r2,2
   17824:	1093ed04 	addi	r2,r2,20404
   17828:	10800003 	ldbu	r2,0(r2)
   1782c:	10803fcc 	andi	r2,r2,255
   17830:	10000426 	beq	r2,zero,17844 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   17834:	e0bfff17 	ldw	r2,-4(fp)
   17838:	00c00484 	movi	r3,18
   1783c:	10c00005 	stb	r3,0(r2)
        return;
   17840:	00002f06 	br	17900 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17844:	0005303a 	rdctl	r2,status
   17848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1784c:	e0fff917 	ldw	r3,-28(fp)
   17850:	00bfff84 	movi	r2,-2
   17854:	1884703a 	and	r2,r3,r2
   17858:	1001703a 	wrctl	status,r2
  
  return context;
   1785c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17860:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   17864:	e0bffd17 	ldw	r2,-12(fp)
   17868:	10800003 	ldbu	r2,0(r2)
   1786c:	10803fcc 	andi	r2,r2,255
   17870:	10800160 	cmpeqi	r2,r2,5
   17874:	1000081e 	bne	r2,zero,17898 <OSFlagNameSet+0xd4>
   17878:	e0bff717 	ldw	r2,-36(fp)
   1787c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17880:	e0bffa17 	ldw	r2,-24(fp)
   17884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   17888:	e0bfff17 	ldw	r2,-4(fp)
   1788c:	00c00044 	movi	r3,1
   17890:	10c00005 	stb	r3,0(r2)
        return;
   17894:	00001a06 	br	17900 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17898:	e13ffe17 	ldw	r4,-8(fp)
   1789c:	00169400 	call	16940 <OS_StrLen>
   178a0:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   178a4:	e0bff803 	ldbu	r2,-32(fp)
   178a8:	10800830 	cmpltui	r2,r2,32
   178ac:	1000081e 	bne	r2,zero,178d0 <OSFlagNameSet+0x10c>
   178b0:	e0bff717 	ldw	r2,-36(fp)
   178b4:	e0bffb15 	stw	r2,-20(fp)
   178b8:	e0bffb17 	ldw	r2,-20(fp)
   178bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   178c0:	e0bfff17 	ldw	r2,-4(fp)
   178c4:	00c01cc4 	movi	r3,115
   178c8:	10c00005 	stb	r3,0(r2)
        return;
   178cc:	00000c06 	br	17900 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   178d0:	e0bffd17 	ldw	r2,-12(fp)
   178d4:	10800284 	addi	r2,r2,10
   178d8:	1009883a 	mov	r4,r2
   178dc:	e17ffe17 	ldw	r5,-8(fp)
   178e0:	00168cc0 	call	168cc <OS_StrCopy>
   178e4:	e0bff717 	ldw	r2,-36(fp)
   178e8:	e0bffc15 	stw	r2,-16(fp)
   178ec:	e0bffc17 	ldw	r2,-16(fp)
   178f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   178f4:	e0bfff17 	ldw	r2,-4(fp)
   178f8:	10000005 	stb	zero,0(r2)
    return;
   178fc:	0001883a 	nop
}
   17900:	e037883a 	mov	sp,fp
   17904:	dfc00117 	ldw	ra,4(sp)
   17908:	df000017 	ldw	fp,0(sp)
   1790c:	dec00204 	addi	sp,sp,8
   17910:	f800283a 	ret

00017914 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   17914:	deffe204 	addi	sp,sp,-120
   17918:	dfc01d15 	stw	ra,116(sp)
   1791c:	df001c15 	stw	fp,112(sp)
   17920:	df001c04 	addi	fp,sp,112
   17924:	e13ffc15 	stw	r4,-16(fp)
   17928:	2809883a 	mov	r4,r5
   1792c:	3007883a 	mov	r3,r6
   17930:	3805883a 	mov	r2,r7
   17934:	e13ffd0d 	sth	r4,-12(fp)
   17938:	e0fffe05 	stb	r3,-8(fp)
   1793c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   17940:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17944:	e0800217 	ldw	r2,8(fp)
   17948:	1000021e 	bne	r2,zero,17954 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1794c:	0005883a 	mov	r2,zero
   17950:	00016706 	br	17ef0 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   17954:	e0bffc17 	ldw	r2,-16(fp)
   17958:	1000051e 	bne	r2,zero,17970 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1795c:	e0800217 	ldw	r2,8(fp)
   17960:	00c01b84 	movi	r3,110
   17964:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17968:	0005883a 	mov	r2,zero
   1796c:	00016006 	br	17ef0 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17970:	008000b4 	movhi	r2,2
   17974:	1093ed04 	addi	r2,r2,20404
   17978:	10800003 	ldbu	r2,0(r2)
   1797c:	10803fcc 	andi	r2,r2,255
   17980:	10000526 	beq	r2,zero,17998 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   17984:	e0800217 	ldw	r2,8(fp)
   17988:	00c00084 	movi	r3,2
   1798c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17990:	0005883a 	mov	r2,zero
   17994:	00015606 	br	17ef0 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   17998:	008000b4 	movhi	r2,2
   1799c:	1093df04 	addi	r2,r2,20348
   179a0:	10800003 	ldbu	r2,0(r2)
   179a4:	10803fcc 	andi	r2,r2,255
   179a8:	10000526 	beq	r2,zero,179c0 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   179ac:	e0800217 	ldw	r2,8(fp)
   179b0:	00c00344 	movi	r3,13
   179b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   179b8:	0005883a 	mov	r2,zero
   179bc:	00014c06 	br	17ef0 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   179c0:	e0bffc17 	ldw	r2,-16(fp)
   179c4:	10800003 	ldbu	r2,0(r2)
   179c8:	10803fcc 	andi	r2,r2,255
   179cc:	10800160 	cmpeqi	r2,r2,5
   179d0:	1000051e 	bne	r2,zero,179e8 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   179d4:	e0800217 	ldw	r2,8(fp)
   179d8:	00c00044 	movi	r3,1
   179dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   179e0:	0005883a 	mov	r2,zero
   179e4:	00014206 	br	17ef0 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   179e8:	e0fffe03 	ldbu	r3,-8(fp)
   179ec:	00bfe004 	movi	r2,-128
   179f0:	1884703a 	and	r2,r3,r2
   179f4:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   179f8:	e0bfe703 	ldbu	r2,-100(fp)
   179fc:	10000626 	beq	r2,zero,17a18 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   17a00:	e0bffe03 	ldbu	r2,-8(fp)
   17a04:	10801fcc 	andi	r2,r2,127
   17a08:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   17a0c:	00800044 	movi	r2,1
   17a10:	e0bfe505 	stb	r2,-108(fp)
   17a14:	00000106 	br	17a1c <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   17a18:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a1c:	0005303a 	rdctl	r2,status
   17a20:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a24:	e0ffe917 	ldw	r3,-92(fp)
   17a28:	00bfff84 	movi	r2,-2
   17a2c:	1884703a 	and	r2,r3,r2
   17a30:	1001703a 	wrctl	status,r2
  
  return context;
   17a34:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   17a38:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   17a3c:	e0bffe03 	ldbu	r2,-8(fp)
   17a40:	10c00060 	cmpeqi	r3,r2,1
   17a44:	1800921e 	bne	r3,zero,17c90 <OSFlagPend+0x37c>
   17a48:	10c00088 	cmpgei	r3,r2,2
   17a4c:	1800021e 	bne	r3,zero,17a58 <OSFlagPend+0x144>
   17a50:	10006126 	beq	r2,zero,17bd8 <OSFlagPend+0x2c4>
   17a54:	0000bb06 	br	17d44 <OSFlagPend+0x430>
   17a58:	10c000a0 	cmpeqi	r3,r2,2
   17a5c:	1800031e 	bne	r3,zero,17a6c <OSFlagPend+0x158>
   17a60:	108000e0 	cmpeqi	r2,r2,3
   17a64:	10002f1e 	bne	r2,zero,17b24 <OSFlagPend+0x210>
   17a68:	0000b606 	br	17d44 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   17a6c:	e0bffc17 	ldw	r2,-16(fp)
   17a70:	10c0020b 	ldhu	r3,8(r2)
   17a74:	e0bffd0b 	ldhu	r2,-12(fp)
   17a78:	1884703a 	and	r2,r3,r2
   17a7c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   17a80:	e0ffe78b 	ldhu	r3,-98(fp)
   17a84:	e0bffd0b 	ldhu	r2,-12(fp)
   17a88:	1880191e 	bne	r3,r2,17af0 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17a8c:	e0bfe503 	ldbu	r2,-108(fp)
   17a90:	10800058 	cmpnei	r2,r2,1
   17a94:	1000091e 	bne	r2,zero,17abc <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   17a98:	e0bffc17 	ldw	r2,-16(fp)
   17a9c:	1080020b 	ldhu	r2,8(r2)
   17aa0:	1007883a 	mov	r3,r2
   17aa4:	e0bfe78b 	ldhu	r2,-98(fp)
   17aa8:	0084303a 	nor	r2,zero,r2
   17aac:	1884703a 	and	r2,r3,r2
   17ab0:	1007883a 	mov	r3,r2
   17ab4:	e0bffc17 	ldw	r2,-16(fp)
   17ab8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17abc:	008000b4 	movhi	r2,2
   17ac0:	1093ee04 	addi	r2,r2,20408
   17ac4:	10800017 	ldw	r2,0(r2)
   17ac8:	e0ffe78b 	ldhu	r3,-98(fp)
   17acc:	10c00b0d 	sth	r3,44(r2)
   17ad0:	e0bfe617 	ldw	r2,-104(fp)
   17ad4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ad8:	e0bfea17 	ldw	r2,-88(fp)
   17adc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17ae0:	e0800217 	ldw	r2,8(fp)
   17ae4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17ae8:	e0bfe78b 	ldhu	r2,-98(fp)
   17aec:	00010006 	br	17ef0 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17af0:	e1bffd0b 	ldhu	r6,-12(fp)
   17af4:	e0fffe03 	ldbu	r3,-8(fp)
   17af8:	e0bfff0b 	ldhu	r2,-4(fp)
   17afc:	e17ff704 	addi	r5,fp,-36
   17b00:	d8800015 	stw	r2,0(sp)
   17b04:	e13ffc17 	ldw	r4,-16(fp)
   17b08:	180f883a 	mov	r7,r3
   17b0c:	00183b80 	call	183b8 <OS_FlagBlock>
   17b10:	e0bfe617 	ldw	r2,-104(fp)
   17b14:	e0bfeb15 	stw	r2,-84(fp)
   17b18:	e0bfeb17 	ldw	r2,-84(fp)
   17b1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17b20:	00009206 	br	17d6c <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   17b24:	e0bffc17 	ldw	r2,-16(fp)
   17b28:	10c0020b 	ldhu	r3,8(r2)
   17b2c:	e0bffd0b 	ldhu	r2,-12(fp)
   17b30:	1884703a 	and	r2,r3,r2
   17b34:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   17b38:	e0bfe78b 	ldhu	r2,-98(fp)
   17b3c:	10001926 	beq	r2,zero,17ba4 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17b40:	e0bfe503 	ldbu	r2,-108(fp)
   17b44:	10800058 	cmpnei	r2,r2,1
   17b48:	1000091e 	bne	r2,zero,17b70 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   17b4c:	e0bffc17 	ldw	r2,-16(fp)
   17b50:	1080020b 	ldhu	r2,8(r2)
   17b54:	1007883a 	mov	r3,r2
   17b58:	e0bfe78b 	ldhu	r2,-98(fp)
   17b5c:	0084303a 	nor	r2,zero,r2
   17b60:	1884703a 	and	r2,r3,r2
   17b64:	1007883a 	mov	r3,r2
   17b68:	e0bffc17 	ldw	r2,-16(fp)
   17b6c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17b70:	008000b4 	movhi	r2,2
   17b74:	1093ee04 	addi	r2,r2,20408
   17b78:	10800017 	ldw	r2,0(r2)
   17b7c:	e0ffe78b 	ldhu	r3,-98(fp)
   17b80:	10c00b0d 	sth	r3,44(r2)
   17b84:	e0bfe617 	ldw	r2,-104(fp)
   17b88:	e0bfec15 	stw	r2,-80(fp)
   17b8c:	e0bfec17 	ldw	r2,-80(fp)
   17b90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17b94:	e0800217 	ldw	r2,8(fp)
   17b98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17b9c:	e0bfe78b 	ldhu	r2,-98(fp)
   17ba0:	0000d306 	br	17ef0 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17ba4:	e1bffd0b 	ldhu	r6,-12(fp)
   17ba8:	e0fffe03 	ldbu	r3,-8(fp)
   17bac:	e0bfff0b 	ldhu	r2,-4(fp)
   17bb0:	e17ff704 	addi	r5,fp,-36
   17bb4:	d8800015 	stw	r2,0(sp)
   17bb8:	e13ffc17 	ldw	r4,-16(fp)
   17bbc:	180f883a 	mov	r7,r3
   17bc0:	00183b80 	call	183b8 <OS_FlagBlock>
   17bc4:	e0bfe617 	ldw	r2,-104(fp)
   17bc8:	e0bfed15 	stw	r2,-76(fp)
   17bcc:	e0bfed17 	ldw	r2,-76(fp)
   17bd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17bd4:	00006506 	br	17d6c <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   17bd8:	e0bffc17 	ldw	r2,-16(fp)
   17bdc:	1080020b 	ldhu	r2,8(r2)
   17be0:	0084303a 	nor	r2,zero,r2
   17be4:	1007883a 	mov	r3,r2
   17be8:	e0bffd0b 	ldhu	r2,-12(fp)
   17bec:	1884703a 	and	r2,r3,r2
   17bf0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   17bf4:	e0ffe78b 	ldhu	r3,-98(fp)
   17bf8:	e0bffd0b 	ldhu	r2,-12(fp)
   17bfc:	1880171e 	bne	r3,r2,17c5c <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17c00:	e0bfe503 	ldbu	r2,-108(fp)
   17c04:	10800058 	cmpnei	r2,r2,1
   17c08:	1000071e 	bne	r2,zero,17c28 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   17c0c:	e0bffc17 	ldw	r2,-16(fp)
   17c10:	10c0020b 	ldhu	r3,8(r2)
   17c14:	e0bfe78b 	ldhu	r2,-98(fp)
   17c18:	1884b03a 	or	r2,r3,r2
   17c1c:	1007883a 	mov	r3,r2
   17c20:	e0bffc17 	ldw	r2,-16(fp)
   17c24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17c28:	008000b4 	movhi	r2,2
   17c2c:	1093ee04 	addi	r2,r2,20408
   17c30:	10800017 	ldw	r2,0(r2)
   17c34:	e0ffe78b 	ldhu	r3,-98(fp)
   17c38:	10c00b0d 	sth	r3,44(r2)
   17c3c:	e0bfe617 	ldw	r2,-104(fp)
   17c40:	e0bfee15 	stw	r2,-72(fp)
   17c44:	e0bfee17 	ldw	r2,-72(fp)
   17c48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17c4c:	e0800217 	ldw	r2,8(fp)
   17c50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17c54:	e0bfe78b 	ldhu	r2,-98(fp)
   17c58:	0000a506 	br	17ef0 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17c5c:	e1bffd0b 	ldhu	r6,-12(fp)
   17c60:	e0fffe03 	ldbu	r3,-8(fp)
   17c64:	e0bfff0b 	ldhu	r2,-4(fp)
   17c68:	e17ff704 	addi	r5,fp,-36
   17c6c:	d8800015 	stw	r2,0(sp)
   17c70:	e13ffc17 	ldw	r4,-16(fp)
   17c74:	180f883a 	mov	r7,r3
   17c78:	00183b80 	call	183b8 <OS_FlagBlock>
   17c7c:	e0bfe617 	ldw	r2,-104(fp)
   17c80:	e0bfef15 	stw	r2,-68(fp)
   17c84:	e0bfef17 	ldw	r2,-68(fp)
   17c88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17c8c:	00003706 	br	17d6c <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   17c90:	e0bffc17 	ldw	r2,-16(fp)
   17c94:	1080020b 	ldhu	r2,8(r2)
   17c98:	0084303a 	nor	r2,zero,r2
   17c9c:	1007883a 	mov	r3,r2
   17ca0:	e0bffd0b 	ldhu	r2,-12(fp)
   17ca4:	1884703a 	and	r2,r3,r2
   17ca8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   17cac:	e0bfe78b 	ldhu	r2,-98(fp)
   17cb0:	10001726 	beq	r2,zero,17d10 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17cb4:	e0bfe503 	ldbu	r2,-108(fp)
   17cb8:	10800058 	cmpnei	r2,r2,1
   17cbc:	1000071e 	bne	r2,zero,17cdc <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   17cc0:	e0bffc17 	ldw	r2,-16(fp)
   17cc4:	10c0020b 	ldhu	r3,8(r2)
   17cc8:	e0bfe78b 	ldhu	r2,-98(fp)
   17ccc:	1884b03a 	or	r2,r3,r2
   17cd0:	1007883a 	mov	r3,r2
   17cd4:	e0bffc17 	ldw	r2,-16(fp)
   17cd8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17cdc:	008000b4 	movhi	r2,2
   17ce0:	1093ee04 	addi	r2,r2,20408
   17ce4:	10800017 	ldw	r2,0(r2)
   17ce8:	e0ffe78b 	ldhu	r3,-98(fp)
   17cec:	10c00b0d 	sth	r3,44(r2)
   17cf0:	e0bfe617 	ldw	r2,-104(fp)
   17cf4:	e0bff015 	stw	r2,-64(fp)
   17cf8:	e0bff017 	ldw	r2,-64(fp)
   17cfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17d00:	e0800217 	ldw	r2,8(fp)
   17d04:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17d08:	e0bfe78b 	ldhu	r2,-98(fp)
   17d0c:	00007806 	br	17ef0 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17d10:	e1bffd0b 	ldhu	r6,-12(fp)
   17d14:	e0fffe03 	ldbu	r3,-8(fp)
   17d18:	e0bfff0b 	ldhu	r2,-4(fp)
   17d1c:	e17ff704 	addi	r5,fp,-36
   17d20:	d8800015 	stw	r2,0(sp)
   17d24:	e13ffc17 	ldw	r4,-16(fp)
   17d28:	180f883a 	mov	r7,r3
   17d2c:	00183b80 	call	183b8 <OS_FlagBlock>
   17d30:	e0bfe617 	ldw	r2,-104(fp)
   17d34:	e0bff115 	stw	r2,-60(fp)
   17d38:	e0bff117 	ldw	r2,-60(fp)
   17d3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17d40:	00000a06 	br	17d6c <OSFlagPend+0x458>
   17d44:	e0bfe617 	ldw	r2,-104(fp)
   17d48:	e0bff215 	stw	r2,-56(fp)
   17d4c:	e0bff217 	ldw	r2,-56(fp)
   17d50:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   17d54:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   17d58:	e0800217 	ldw	r2,8(fp)
   17d5c:	00c01bc4 	movi	r3,111
   17d60:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   17d64:	e0bfe78b 	ldhu	r2,-98(fp)
   17d68:	00006106 	br	17ef0 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   17d6c:	00167900 	call	16790 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d70:	0005303a 	rdctl	r2,status
   17d74:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d78:	e0fff317 	ldw	r3,-52(fp)
   17d7c:	00bfff84 	movi	r2,-2
   17d80:	1884703a 	and	r2,r3,r2
   17d84:	1001703a 	wrctl	status,r2
  
  return context;
   17d88:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   17d8c:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   17d90:	008000b4 	movhi	r2,2
   17d94:	1093ee04 	addi	r2,r2,20408
   17d98:	10800017 	ldw	r2,0(r2)
   17d9c:	10800c43 	ldbu	r2,49(r2)
   17da0:	10803fcc 	andi	r2,r2,255
   17da4:	10002226 	beq	r2,zero,17e30 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   17da8:	008000b4 	movhi	r2,2
   17dac:	1093ee04 	addi	r2,r2,20408
   17db0:	10800017 	ldw	r2,0(r2)
   17db4:	10800c43 	ldbu	r2,49(r2)
   17db8:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17dbc:	008000b4 	movhi	r2,2
   17dc0:	1093ee04 	addi	r2,r2,20408
   17dc4:	10800017 	ldw	r2,0(r2)
   17dc8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   17dcc:	e0bff704 	addi	r2,fp,-36
   17dd0:	1009883a 	mov	r4,r2
   17dd4:	00187700 	call	18770 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   17dd8:	008000b4 	movhi	r2,2
   17ddc:	1093ee04 	addi	r2,r2,20408
   17de0:	10800017 	ldw	r2,0(r2)
   17de4:	10000c05 	stb	zero,48(r2)
   17de8:	e0bfe617 	ldw	r2,-104(fp)
   17dec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17df0:	e0bff417 	ldw	r2,-48(fp)
   17df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   17df8:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   17dfc:	e0bfe803 	ldbu	r2,-96(fp)
   17e00:	108000a0 	cmpeqi	r2,r2,2
   17e04:	10000426 	beq	r2,zero,17e18 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   17e08:	e0800217 	ldw	r2,8(fp)
   17e0c:	00c00384 	movi	r3,14
   17e10:	10c00005 	stb	r3,0(r2)
                 break;
   17e14:	00000406 	br	17e28 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   17e18:	e0800217 	ldw	r2,8(fp)
   17e1c:	00c00284 	movi	r3,10
   17e20:	10c00005 	stb	r3,0(r2)
                 break;
   17e24:	0001883a 	nop
        }
        return (flags_rdy);
   17e28:	e0bfe78b 	ldhu	r2,-98(fp)
   17e2c:	00003006 	br	17ef0 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   17e30:	008000b4 	movhi	r2,2
   17e34:	1093ee04 	addi	r2,r2,20408
   17e38:	10800017 	ldw	r2,0(r2)
   17e3c:	10800b0b 	ldhu	r2,44(r2)
   17e40:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   17e44:	e0bfe503 	ldbu	r2,-108(fp)
   17e48:	10800058 	cmpnei	r2,r2,1
   17e4c:	1000211e 	bne	r2,zero,17ed4 <OSFlagPend+0x5c0>
        switch (wait_type) {
   17e50:	e0bffe03 	ldbu	r2,-8(fp)
   17e54:	10001616 	blt	r2,zero,17eb0 <OSFlagPend+0x59c>
   17e58:	10c00090 	cmplti	r3,r2,2
   17e5c:	18000c1e 	bne	r3,zero,17e90 <OSFlagPend+0x57c>
   17e60:	10800108 	cmpgei	r2,r2,4
   17e64:	1000121e 	bne	r2,zero,17eb0 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   17e68:	e0bffc17 	ldw	r2,-16(fp)
   17e6c:	1080020b 	ldhu	r2,8(r2)
   17e70:	1007883a 	mov	r3,r2
   17e74:	e0bfe78b 	ldhu	r2,-98(fp)
   17e78:	0084303a 	nor	r2,zero,r2
   17e7c:	1884703a 	and	r2,r3,r2
   17e80:	1007883a 	mov	r3,r2
   17e84:	e0bffc17 	ldw	r2,-16(fp)
   17e88:	10c0020d 	sth	r3,8(r2)
                 break;
   17e8c:	00001106 	br	17ed4 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   17e90:	e0bffc17 	ldw	r2,-16(fp)
   17e94:	10c0020b 	ldhu	r3,8(r2)
   17e98:	e0bfe78b 	ldhu	r2,-98(fp)
   17e9c:	1884b03a 	or	r2,r3,r2
   17ea0:	1007883a 	mov	r3,r2
   17ea4:	e0bffc17 	ldw	r2,-16(fp)
   17ea8:	10c0020d 	sth	r3,8(r2)
                 break;
   17eac:	00000906 	br	17ed4 <OSFlagPend+0x5c0>
   17eb0:	e0bfe617 	ldw	r2,-104(fp)
   17eb4:	e0bff515 	stw	r2,-44(fp)
   17eb8:	e0bff517 	ldw	r2,-44(fp)
   17ebc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   17ec0:	e0800217 	ldw	r2,8(fp)
   17ec4:	00c01bc4 	movi	r3,111
   17ec8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17ecc:	0005883a 	mov	r2,zero
   17ed0:	00000706 	br	17ef0 <OSFlagPend+0x5dc>
   17ed4:	e0bfe617 	ldw	r2,-104(fp)
   17ed8:	e0bff615 	stw	r2,-40(fp)
   17edc:	e0bff617 	ldw	r2,-40(fp)
   17ee0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   17ee4:	e0800217 	ldw	r2,8(fp)
   17ee8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   17eec:	e0bfe78b 	ldhu	r2,-98(fp)
}
   17ef0:	e037883a 	mov	sp,fp
   17ef4:	dfc00117 	ldw	ra,4(sp)
   17ef8:	df000017 	ldw	fp,0(sp)
   17efc:	dec00204 	addi	sp,sp,8
   17f00:	f800283a 	ret

00017f04 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   17f04:	defffb04 	addi	sp,sp,-20
   17f08:	df000415 	stw	fp,16(sp)
   17f0c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   17f10:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f14:	0005303a 	rdctl	r2,status
   17f18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f1c:	e0fffe17 	ldw	r3,-8(fp)
   17f20:	00bfff84 	movi	r2,-2
   17f24:	1884703a 	and	r2,r3,r2
   17f28:	1001703a 	wrctl	status,r2
  
  return context;
   17f2c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   17f30:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   17f34:	008000b4 	movhi	r2,2
   17f38:	1093ee04 	addi	r2,r2,20408
   17f3c:	10800017 	ldw	r2,0(r2)
   17f40:	10800b0b 	ldhu	r2,44(r2)
   17f44:	e0bffd0d 	sth	r2,-12(fp)
   17f48:	e0bffc17 	ldw	r2,-16(fp)
   17f4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f50:	e0bfff17 	ldw	r2,-4(fp)
   17f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   17f58:	e0bffd0b 	ldhu	r2,-12(fp)
}
   17f5c:	e037883a 	mov	sp,fp
   17f60:	df000017 	ldw	fp,0(sp)
   17f64:	dec00104 	addi	sp,sp,4
   17f68:	f800283a 	ret

00017f6c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   17f6c:	deffef04 	addi	sp,sp,-68
   17f70:	dfc01015 	stw	ra,64(sp)
   17f74:	df000f15 	stw	fp,60(sp)
   17f78:	df000f04 	addi	fp,sp,60
   17f7c:	e13ffc15 	stw	r4,-16(fp)
   17f80:	2807883a 	mov	r3,r5
   17f84:	3005883a 	mov	r2,r6
   17f88:	e1ffff15 	stw	r7,-4(fp)
   17f8c:	e0fffd0d 	sth	r3,-12(fp)
   17f90:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   17f94:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   17f98:	e0bfff17 	ldw	r2,-4(fp)
   17f9c:	1000021e 	bne	r2,zero,17fa8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   17fa0:	0005883a 	mov	r2,zero
   17fa4:	0000ce06 	br	182e0 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   17fa8:	e0bffc17 	ldw	r2,-16(fp)
   17fac:	1000051e 	bne	r2,zero,17fc4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17fb0:	e0bfff17 	ldw	r2,-4(fp)
   17fb4:	00c01b84 	movi	r3,110
   17fb8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17fbc:	0005883a 	mov	r2,zero
   17fc0:	0000c706 	br	182e0 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   17fc4:	e0bffc17 	ldw	r2,-16(fp)
   17fc8:	10800003 	ldbu	r2,0(r2)
   17fcc:	10803fcc 	andi	r2,r2,255
   17fd0:	10800160 	cmpeqi	r2,r2,5
   17fd4:	1000051e 	bne	r2,zero,17fec <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   17fd8:	e0bfff17 	ldw	r2,-4(fp)
   17fdc:	00c00044 	movi	r3,1
   17fe0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17fe4:	0005883a 	mov	r2,zero
   17fe8:	0000bd06 	br	182e0 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17fec:	0005303a 	rdctl	r2,status
   17ff0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ff4:	e0fff617 	ldw	r3,-40(fp)
   17ff8:	00bfff84 	movi	r2,-2
   17ffc:	1884703a 	and	r2,r3,r2
   18000:	1001703a 	wrctl	status,r2
  
  return context;
   18004:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   18008:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1800c:	e0bffe03 	ldbu	r2,-8(fp)
   18010:	10000326 	beq	r2,zero,18020 <OSFlagPost+0xb4>
   18014:	10800060 	cmpeqi	r2,r2,1
   18018:	10000b1e 	bne	r2,zero,18048 <OSFlagPost+0xdc>
   1801c:	00001206 	br	18068 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   18020:	e0bffc17 	ldw	r2,-16(fp)
   18024:	1080020b 	ldhu	r2,8(r2)
   18028:	1007883a 	mov	r3,r2
   1802c:	e0bffd0b 	ldhu	r2,-12(fp)
   18030:	0084303a 	nor	r2,zero,r2
   18034:	1884703a 	and	r2,r3,r2
   18038:	1007883a 	mov	r3,r2
   1803c:	e0bffc17 	ldw	r2,-16(fp)
   18040:	10c0020d 	sth	r3,8(r2)
             break;
   18044:	00001106 	br	1808c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   18048:	e0bffc17 	ldw	r2,-16(fp)
   1804c:	10c0020b 	ldhu	r3,8(r2)
   18050:	e0bffd0b 	ldhu	r2,-12(fp)
   18054:	1884b03a 	or	r2,r3,r2
   18058:	1007883a 	mov	r3,r2
   1805c:	e0bffc17 	ldw	r2,-16(fp)
   18060:	10c0020d 	sth	r3,8(r2)
             break;
   18064:	00000906 	br	1808c <OSFlagPost+0x120>
   18068:	e0bff317 	ldw	r2,-52(fp)
   1806c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18070:	e0bff717 	ldw	r2,-36(fp)
   18074:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   18078:	e0bfff17 	ldw	r2,-4(fp)
   1807c:	00c01c44 	movi	r3,113
   18080:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   18084:	0005883a 	mov	r2,zero
   18088:	00009506 	br	182e0 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1808c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   18090:	e0bffc17 	ldw	r2,-16(fp)
   18094:	10800117 	ldw	r2,4(r2)
   18098:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1809c:	00007406 	br	18270 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   180a0:	e0bff117 	ldw	r2,-60(fp)
   180a4:	10800483 	ldbu	r2,18(r2)
   180a8:	10803fcc 	andi	r2,r2,255
   180ac:	10c00060 	cmpeqi	r3,r2,1
   180b0:	18004d1e 	bne	r3,zero,181e8 <OSFlagPost+0x27c>
   180b4:	10c00088 	cmpgei	r3,r2,2
   180b8:	1800021e 	bne	r3,zero,180c4 <OSFlagPost+0x158>
   180bc:	10003126 	beq	r2,zero,18184 <OSFlagPost+0x218>
   180c0:	00005f06 	br	18240 <OSFlagPost+0x2d4>
   180c4:	10c000a0 	cmpeqi	r3,r2,2
   180c8:	1800031e 	bne	r3,zero,180d8 <OSFlagPost+0x16c>
   180cc:	108000e0 	cmpeqi	r2,r2,3
   180d0:	1000181e 	bne	r2,zero,18134 <OSFlagPost+0x1c8>
   180d4:	00005a06 	br	18240 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   180d8:	e0bffc17 	ldw	r2,-16(fp)
   180dc:	10c0020b 	ldhu	r3,8(r2)
   180e0:	e0bff117 	ldw	r2,-60(fp)
   180e4:	1080040b 	ldhu	r2,16(r2)
   180e8:	1884703a 	and	r2,r3,r2
   180ec:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   180f0:	e0bff117 	ldw	r2,-60(fp)
   180f4:	1080040b 	ldhu	r2,16(r2)
   180f8:	10ffffcc 	andi	r3,r2,65535
   180fc:	e0bff40b 	ldhu	r2,-48(fp)
   18100:	18800b1e 	bne	r3,r2,18130 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   18104:	e0bff40b 	ldhu	r2,-48(fp)
   18108:	e13ff117 	ldw	r4,-60(fp)
   1810c:	100b883a 	mov	r5,r2
   18110:	00186600 	call	18660 <OS_FlagTaskRdy>
   18114:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   18118:	e0bff483 	ldbu	r2,-46(fp)
   1811c:	10800058 	cmpnei	r2,r2,1
   18120:	1000031e 	bne	r2,zero,18130 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   18124:	00800044 	movi	r2,1
   18128:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1812c:	00004d06 	br	18264 <OSFlagPost+0x2f8>
   18130:	00004c06 	br	18264 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   18134:	e0bffc17 	ldw	r2,-16(fp)
   18138:	10c0020b 	ldhu	r3,8(r2)
   1813c:	e0bff117 	ldw	r2,-60(fp)
   18140:	1080040b 	ldhu	r2,16(r2)
   18144:	1884703a 	and	r2,r3,r2
   18148:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1814c:	e0bff40b 	ldhu	r2,-48(fp)
   18150:	10000b26 	beq	r2,zero,18180 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   18154:	e0bff40b 	ldhu	r2,-48(fp)
   18158:	e13ff117 	ldw	r4,-60(fp)
   1815c:	100b883a 	mov	r5,r2
   18160:	00186600 	call	18660 <OS_FlagTaskRdy>
   18164:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   18168:	e0bff483 	ldbu	r2,-46(fp)
   1816c:	10800058 	cmpnei	r2,r2,1
   18170:	1000031e 	bne	r2,zero,18180 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   18174:	00800044 	movi	r2,1
   18178:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1817c:	00003906 	br	18264 <OSFlagPost+0x2f8>
   18180:	00003806 	br	18264 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   18184:	e0bffc17 	ldw	r2,-16(fp)
   18188:	1080020b 	ldhu	r2,8(r2)
   1818c:	0084303a 	nor	r2,zero,r2
   18190:	1007883a 	mov	r3,r2
   18194:	e0bff117 	ldw	r2,-60(fp)
   18198:	1080040b 	ldhu	r2,16(r2)
   1819c:	1884703a 	and	r2,r3,r2
   181a0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   181a4:	e0bff117 	ldw	r2,-60(fp)
   181a8:	1080040b 	ldhu	r2,16(r2)
   181ac:	10ffffcc 	andi	r3,r2,65535
   181b0:	e0bff40b 	ldhu	r2,-48(fp)
   181b4:	18800b1e 	bne	r3,r2,181e4 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   181b8:	e0bff40b 	ldhu	r2,-48(fp)
   181bc:	e13ff117 	ldw	r4,-60(fp)
   181c0:	100b883a 	mov	r5,r2
   181c4:	00186600 	call	18660 <OS_FlagTaskRdy>
   181c8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   181cc:	e0bff483 	ldbu	r2,-46(fp)
   181d0:	10800058 	cmpnei	r2,r2,1
   181d4:	1000031e 	bne	r2,zero,181e4 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   181d8:	00800044 	movi	r2,1
   181dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   181e0:	00002006 	br	18264 <OSFlagPost+0x2f8>
   181e4:	00001f06 	br	18264 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   181e8:	e0bffc17 	ldw	r2,-16(fp)
   181ec:	1080020b 	ldhu	r2,8(r2)
   181f0:	0084303a 	nor	r2,zero,r2
   181f4:	1007883a 	mov	r3,r2
   181f8:	e0bff117 	ldw	r2,-60(fp)
   181fc:	1080040b 	ldhu	r2,16(r2)
   18200:	1884703a 	and	r2,r3,r2
   18204:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   18208:	e0bff40b 	ldhu	r2,-48(fp)
   1820c:	10000b26 	beq	r2,zero,1823c <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   18210:	e0bff40b 	ldhu	r2,-48(fp)
   18214:	e13ff117 	ldw	r4,-60(fp)
   18218:	100b883a 	mov	r5,r2
   1821c:	00186600 	call	18660 <OS_FlagTaskRdy>
   18220:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   18224:	e0bff483 	ldbu	r2,-46(fp)
   18228:	10800058 	cmpnei	r2,r2,1
   1822c:	1000031e 	bne	r2,zero,1823c <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   18230:	00800044 	movi	r2,1
   18234:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   18238:	00000a06 	br	18264 <OSFlagPost+0x2f8>
   1823c:	00000906 	br	18264 <OSFlagPost+0x2f8>
   18240:	e0bff317 	ldw	r2,-52(fp)
   18244:	e0bff815 	stw	r2,-32(fp)
   18248:	e0bff817 	ldw	r2,-32(fp)
   1824c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   18250:	e0bfff17 	ldw	r2,-4(fp)
   18254:	00c01bc4 	movi	r3,111
   18258:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1825c:	0005883a 	mov	r2,zero
   18260:	00001f06 	br	182e0 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   18264:	e0bff117 	ldw	r2,-60(fp)
   18268:	10800017 	ldw	r2,0(r2)
   1826c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   18270:	e0bff117 	ldw	r2,-60(fp)
   18274:	103f8a1e 	bne	r2,zero,180a0 <__alt_mem_Flash_flash_data+0xf40180a0>
   18278:	e0bff317 	ldw	r2,-52(fp)
   1827c:	e0bff915 	stw	r2,-28(fp)
   18280:	e0bff917 	ldw	r2,-28(fp)
   18284:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   18288:	e0bff203 	ldbu	r2,-56(fp)
   1828c:	10800058 	cmpnei	r2,r2,1
   18290:	1000011e 	bne	r2,zero,18298 <OSFlagPost+0x32c>
        OS_Sched();
   18294:	00167900 	call	16790 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18298:	0005303a 	rdctl	r2,status
   1829c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182a0:	e0fffa17 	ldw	r3,-24(fp)
   182a4:	00bfff84 	movi	r2,-2
   182a8:	1884703a 	and	r2,r3,r2
   182ac:	1001703a 	wrctl	status,r2
  
  return context;
   182b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   182b4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   182b8:	e0bffc17 	ldw	r2,-16(fp)
   182bc:	1080020b 	ldhu	r2,8(r2)
   182c0:	e0bff50d 	sth	r2,-44(fp)
   182c4:	e0bff317 	ldw	r2,-52(fp)
   182c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   182cc:	e0bffb17 	ldw	r2,-20(fp)
   182d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   182d4:	e0bfff17 	ldw	r2,-4(fp)
   182d8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   182dc:	e0bff50b 	ldhu	r2,-44(fp)
}
   182e0:	e037883a 	mov	sp,fp
   182e4:	dfc00117 	ldw	ra,4(sp)
   182e8:	df000017 	ldw	fp,0(sp)
   182ec:	dec00204 	addi	sp,sp,8
   182f0:	f800283a 	ret

000182f4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   182f4:	defff904 	addi	sp,sp,-28
   182f8:	df000615 	stw	fp,24(sp)
   182fc:	df000604 	addi	fp,sp,24
   18300:	e13ffe15 	stw	r4,-8(fp)
   18304:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   18308:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1830c:	e0bfff17 	ldw	r2,-4(fp)
   18310:	1000021e 	bne	r2,zero,1831c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   18314:	0005883a 	mov	r2,zero
   18318:	00002306 	br	183a8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1831c:	e0bffe17 	ldw	r2,-8(fp)
   18320:	1000051e 	bne	r2,zero,18338 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   18324:	e0bfff17 	ldw	r2,-4(fp)
   18328:	00c01b84 	movi	r3,110
   1832c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   18330:	0005883a 	mov	r2,zero
   18334:	00001c06 	br	183a8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   18338:	e0bffe17 	ldw	r2,-8(fp)
   1833c:	10800003 	ldbu	r2,0(r2)
   18340:	10803fcc 	andi	r2,r2,255
   18344:	10800160 	cmpeqi	r2,r2,5
   18348:	1000051e 	bne	r2,zero,18360 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1834c:	e0bfff17 	ldw	r2,-4(fp)
   18350:	00c00044 	movi	r3,1
   18354:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   18358:	0005883a 	mov	r2,zero
   1835c:	00001206 	br	183a8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18360:	0005303a 	rdctl	r2,status
   18364:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18368:	e0fffc17 	ldw	r3,-16(fp)
   1836c:	00bfff84 	movi	r2,-2
   18370:	1884703a 	and	r2,r3,r2
   18374:	1001703a 	wrctl	status,r2
  
  return context;
   18378:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1837c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   18380:	e0bffe17 	ldw	r2,-8(fp)
   18384:	1080020b 	ldhu	r2,8(r2)
   18388:	e0bffb0d 	sth	r2,-20(fp)
   1838c:	e0bffa17 	ldw	r2,-24(fp)
   18390:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18394:	e0bffd17 	ldw	r2,-12(fp)
   18398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1839c:	e0bfff17 	ldw	r2,-4(fp)
   183a0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   183a4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   183a8:	e037883a 	mov	sp,fp
   183ac:	df000017 	ldw	fp,0(sp)
   183b0:	dec00104 	addi	sp,sp,4
   183b4:	f800283a 	ret

000183b8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   183b8:	defff804 	addi	sp,sp,-32
   183bc:	df000715 	stw	fp,28(sp)
   183c0:	df000704 	addi	fp,sp,28
   183c4:	e13ffb15 	stw	r4,-20(fp)
   183c8:	e17ffc15 	stw	r5,-16(fp)
   183cc:	3009883a 	mov	r4,r6
   183d0:	3807883a 	mov	r3,r7
   183d4:	e0800117 	ldw	r2,4(fp)
   183d8:	e13ffd0d 	sth	r4,-12(fp)
   183dc:	e0fffe05 	stb	r3,-8(fp)
   183e0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   183e4:	008000b4 	movhi	r2,2
   183e8:	1093ee04 	addi	r2,r2,20408
   183ec:	10c00017 	ldw	r3,0(r2)
   183f0:	008000b4 	movhi	r2,2
   183f4:	1093ee04 	addi	r2,r2,20408
   183f8:	10800017 	ldw	r2,0(r2)
   183fc:	10800c03 	ldbu	r2,48(r2)
   18400:	10800814 	ori	r2,r2,32
   18404:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   18408:	008000b4 	movhi	r2,2
   1840c:	1093ee04 	addi	r2,r2,20408
   18410:	10800017 	ldw	r2,0(r2)
   18414:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   18418:	008000b4 	movhi	r2,2
   1841c:	1093ee04 	addi	r2,r2,20408
   18420:	10800017 	ldw	r2,0(r2)
   18424:	e0ffff0b 	ldhu	r3,-4(fp)
   18428:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1842c:	008000b4 	movhi	r2,2
   18430:	1093ee04 	addi	r2,r2,20408
   18434:	10800017 	ldw	r2,0(r2)
   18438:	e0fffc17 	ldw	r3,-16(fp)
   1843c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   18440:	e0bffc17 	ldw	r2,-16(fp)
   18444:	e0fffd0b 	ldhu	r3,-12(fp)
   18448:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1844c:	e0bffc17 	ldw	r2,-16(fp)
   18450:	e0fffe03 	ldbu	r3,-8(fp)
   18454:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   18458:	008000b4 	movhi	r2,2
   1845c:	1093ee04 	addi	r2,r2,20408
   18460:	10c00017 	ldw	r3,0(r2)
   18464:	e0bffc17 	ldw	r2,-16(fp)
   18468:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1846c:	e0bffb17 	ldw	r2,-20(fp)
   18470:	10c00117 	ldw	r3,4(r2)
   18474:	e0bffc17 	ldw	r2,-16(fp)
   18478:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1847c:	e0bffc17 	ldw	r2,-16(fp)
   18480:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   18484:	e0bffc17 	ldw	r2,-16(fp)
   18488:	e0fffb17 	ldw	r3,-20(fp)
   1848c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   18490:	e0bffb17 	ldw	r2,-20(fp)
   18494:	10800117 	ldw	r2,4(r2)
   18498:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1849c:	e0bff917 	ldw	r2,-28(fp)
   184a0:	10000326 	beq	r2,zero,184b0 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   184a4:	e0bff917 	ldw	r2,-28(fp)
   184a8:	e0fffc17 	ldw	r3,-16(fp)
   184ac:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   184b0:	e0bffb17 	ldw	r2,-20(fp)
   184b4:	e0fffc17 	ldw	r3,-16(fp)
   184b8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   184bc:	008000b4 	movhi	r2,2
   184c0:	1093ee04 	addi	r2,r2,20408
   184c4:	10800017 	ldw	r2,0(r2)
   184c8:	10800d03 	ldbu	r2,52(r2)
   184cc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   184d0:	e0fffa03 	ldbu	r3,-24(fp)
   184d4:	e13ffa03 	ldbu	r4,-24(fp)
   184d8:	008000b4 	movhi	r2,2
   184dc:	1093eb44 	addi	r2,r2,20397
   184e0:	1105883a 	add	r2,r2,r4
   184e4:	10800003 	ldbu	r2,0(r2)
   184e8:	1009883a 	mov	r4,r2
   184ec:	008000b4 	movhi	r2,2
   184f0:	1093ee04 	addi	r2,r2,20408
   184f4:	10800017 	ldw	r2,0(r2)
   184f8:	10800d43 	ldbu	r2,53(r2)
   184fc:	0084303a 	nor	r2,zero,r2
   18500:	2084703a 	and	r2,r4,r2
   18504:	1009883a 	mov	r4,r2
   18508:	008000b4 	movhi	r2,2
   1850c:	1093eb44 	addi	r2,r2,20397
   18510:	10c5883a 	add	r2,r2,r3
   18514:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   18518:	e0fffa03 	ldbu	r3,-24(fp)
   1851c:	008000b4 	movhi	r2,2
   18520:	1093eb44 	addi	r2,r2,20397
   18524:	10c5883a 	add	r2,r2,r3
   18528:	10800003 	ldbu	r2,0(r2)
   1852c:	10803fcc 	andi	r2,r2,255
   18530:	10000e1e 	bne	r2,zero,1856c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   18534:	008000b4 	movhi	r2,2
   18538:	1093ee04 	addi	r2,r2,20408
   1853c:	10800017 	ldw	r2,0(r2)
   18540:	10800d83 	ldbu	r2,54(r2)
   18544:	0084303a 	nor	r2,zero,r2
   18548:	1007883a 	mov	r3,r2
   1854c:	008000b4 	movhi	r2,2
   18550:	1093eb04 	addi	r2,r2,20396
   18554:	10800003 	ldbu	r2,0(r2)
   18558:	1884703a 	and	r2,r3,r2
   1855c:	1007883a 	mov	r3,r2
   18560:	008000b4 	movhi	r2,2
   18564:	1093eb04 	addi	r2,r2,20396
   18568:	10c00005 	stb	r3,0(r2)
    }
}
   1856c:	e037883a 	mov	sp,fp
   18570:	df000017 	ldw	fp,0(sp)
   18574:	dec00104 	addi	sp,sp,4
   18578:	f800283a 	ret

0001857c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1857c:	defffb04 	addi	sp,sp,-20
   18580:	dfc00415 	stw	ra,16(sp)
   18584:	df000315 	stw	fp,12(sp)
   18588:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1858c:	010000f4 	movhi	r4,3
   18590:	21240104 	addi	r4,r4,-28668
   18594:	0140dc04 	movi	r5,880
   18598:	00166dc0 	call	166dc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1859c:	008000f4 	movhi	r2,3
   185a0:	10a40104 	addi	r2,r2,-28668
   185a4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   185a8:	008000f4 	movhi	r2,3
   185ac:	10a40c04 	addi	r2,r2,-28624
   185b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   185b4:	e03ffd0d 	sth	zero,-12(fp)
   185b8:	00001306 	br	18608 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   185bc:	e0bffe17 	ldw	r2,-8(fp)
   185c0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   185c4:	e0bffe17 	ldw	r2,-8(fp)
   185c8:	e0ffff17 	ldw	r3,-4(fp)
   185cc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   185d0:	e0bffe17 	ldw	r2,-8(fp)
   185d4:	00c00fc4 	movi	r3,63
   185d8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   185dc:	e0bffe17 	ldw	r2,-8(fp)
   185e0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   185e4:	e0bffe17 	ldw	r2,-8(fp)
   185e8:	10800b04 	addi	r2,r2,44
   185ec:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   185f0:	e0bfff17 	ldw	r2,-4(fp)
   185f4:	10800b04 	addi	r2,r2,44
   185f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   185fc:	e0bffd0b 	ldhu	r2,-12(fp)
   18600:	10800044 	addi	r2,r2,1
   18604:	e0bffd0d 	sth	r2,-12(fp)
   18608:	e0bffd0b 	ldhu	r2,-12(fp)
   1860c:	108004f0 	cmpltui	r2,r2,19
   18610:	103fea1e 	bne	r2,zero,185bc <__alt_mem_Flash_flash_data+0xf40185bc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   18614:	e0bffe17 	ldw	r2,-8(fp)
   18618:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1861c:	e0bffe17 	ldw	r2,-8(fp)
   18620:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   18624:	e0bffe17 	ldw	r2,-8(fp)
   18628:	00c00fc4 	movi	r3,63
   1862c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   18630:	e0bffe17 	ldw	r2,-8(fp)
   18634:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   18638:	008000b4 	movhi	r2,2
   1863c:	1093f004 	addi	r2,r2,20416
   18640:	00c000f4 	movhi	r3,3
   18644:	18e40104 	addi	r3,r3,-28668
   18648:	10c00015 	stw	r3,0(r2)
#endif
}
   1864c:	e037883a 	mov	sp,fp
   18650:	dfc00117 	ldw	ra,4(sp)
   18654:	df000017 	ldw	fp,0(sp)
   18658:	dec00204 	addi	sp,sp,8
   1865c:	f800283a 	ret

00018660 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   18660:	defffa04 	addi	sp,sp,-24
   18664:	dfc00515 	stw	ra,20(sp)
   18668:	df000415 	stw	fp,16(sp)
   1866c:	df000404 	addi	fp,sp,16
   18670:	e13ffe15 	stw	r4,-8(fp)
   18674:	2805883a 	mov	r2,r5
   18678:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1867c:	e0bffe17 	ldw	r2,-8(fp)
   18680:	10800217 	ldw	r2,8(r2)
   18684:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   18688:	e0bffd17 	ldw	r2,-12(fp)
   1868c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   18690:	e0bffd17 	ldw	r2,-12(fp)
   18694:	e0ffff0b 	ldhu	r3,-4(fp)
   18698:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1869c:	e0bffd17 	ldw	r2,-12(fp)
   186a0:	10c00c03 	ldbu	r3,48(r2)
   186a4:	00bff7c4 	movi	r2,-33
   186a8:	1884703a 	and	r2,r3,r2
   186ac:	1007883a 	mov	r3,r2
   186b0:	e0bffd17 	ldw	r2,-12(fp)
   186b4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   186b8:	e0bffd17 	ldw	r2,-12(fp)
   186bc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   186c0:	e0bffd17 	ldw	r2,-12(fp)
   186c4:	10800c03 	ldbu	r2,48(r2)
   186c8:	10803fcc 	andi	r2,r2,255
   186cc:	10001f1e 	bne	r2,zero,1874c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   186d0:	e0bffd17 	ldw	r2,-12(fp)
   186d4:	10c00d83 	ldbu	r3,54(r2)
   186d8:	008000b4 	movhi	r2,2
   186dc:	1093eb04 	addi	r2,r2,20396
   186e0:	10800003 	ldbu	r2,0(r2)
   186e4:	1884b03a 	or	r2,r3,r2
   186e8:	1007883a 	mov	r3,r2
   186ec:	008000b4 	movhi	r2,2
   186f0:	1093eb04 	addi	r2,r2,20396
   186f4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   186f8:	e0bffd17 	ldw	r2,-12(fp)
   186fc:	10800d03 	ldbu	r2,52(r2)
   18700:	10c03fcc 	andi	r3,r2,255
   18704:	e0bffd17 	ldw	r2,-12(fp)
   18708:	10800d03 	ldbu	r2,52(r2)
   1870c:	11003fcc 	andi	r4,r2,255
   18710:	008000b4 	movhi	r2,2
   18714:	1093eb44 	addi	r2,r2,20397
   18718:	1105883a 	add	r2,r2,r4
   1871c:	11000003 	ldbu	r4,0(r2)
   18720:	e0bffd17 	ldw	r2,-12(fp)
   18724:	10800d43 	ldbu	r2,53(r2)
   18728:	2084b03a 	or	r2,r4,r2
   1872c:	1009883a 	mov	r4,r2
   18730:	008000b4 	movhi	r2,2
   18734:	1093eb44 	addi	r2,r2,20397
   18738:	10c5883a 	add	r2,r2,r3
   1873c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   18740:	00800044 	movi	r2,1
   18744:	e0bffc05 	stb	r2,-16(fp)
   18748:	00000106 	br	18750 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   1874c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   18750:	e13ffe17 	ldw	r4,-8(fp)
   18754:	00187700 	call	18770 <OS_FlagUnlink>
    return (sched);
   18758:	e0bffc03 	ldbu	r2,-16(fp)
}
   1875c:	e037883a 	mov	sp,fp
   18760:	dfc00117 	ldw	ra,4(sp)
   18764:	df000017 	ldw	fp,0(sp)
   18768:	dec00204 	addi	sp,sp,8
   1876c:	f800283a 	ret

00018770 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   18770:	defffa04 	addi	sp,sp,-24
   18774:	df000515 	stw	fp,20(sp)
   18778:	df000504 	addi	fp,sp,20
   1877c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   18780:	e0bfff17 	ldw	r2,-4(fp)
   18784:	10800117 	ldw	r2,4(r2)
   18788:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1878c:	e0bfff17 	ldw	r2,-4(fp)
   18790:	10800017 	ldw	r2,0(r2)
   18794:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   18798:	e0bffb17 	ldw	r2,-20(fp)
   1879c:	10000b1e 	bne	r2,zero,187cc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   187a0:	e0bfff17 	ldw	r2,-4(fp)
   187a4:	10800317 	ldw	r2,12(r2)
   187a8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   187ac:	e0bffd17 	ldw	r2,-12(fp)
   187b0:	e0fffc17 	ldw	r3,-16(fp)
   187b4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   187b8:	e0bffc17 	ldw	r2,-16(fp)
   187bc:	10000b26 	beq	r2,zero,187ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   187c0:	e0bffc17 	ldw	r2,-16(fp)
   187c4:	10000115 	stw	zero,4(r2)
   187c8:	00000806 	br	187ec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   187cc:	e0bffb17 	ldw	r2,-20(fp)
   187d0:	e0fffc17 	ldw	r3,-16(fp)
   187d4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   187d8:	e0bffc17 	ldw	r2,-16(fp)
   187dc:	10000326 	beq	r2,zero,187ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   187e0:	e0bffc17 	ldw	r2,-16(fp)
   187e4:	e0fffb17 	ldw	r3,-20(fp)
   187e8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   187ec:	e0bfff17 	ldw	r2,-4(fp)
   187f0:	10800217 	ldw	r2,8(r2)
   187f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   187f8:	e0bffe17 	ldw	r2,-8(fp)
   187fc:	10000a15 	stw	zero,40(r2)
#endif
}
   18800:	e037883a 	mov	sp,fp
   18804:	df000017 	ldw	fp,0(sp)
   18808:	dec00104 	addi	sp,sp,4
   1880c:	f800283a 	ret

00018810 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   18810:	defff404 	addi	sp,sp,-48
   18814:	df000b15 	stw	fp,44(sp)
   18818:	df000b04 	addi	fp,sp,44
   1881c:	e13ffc15 	stw	r4,-16(fp)
   18820:	e17ffd15 	stw	r5,-12(fp)
   18824:	e1bffe15 	stw	r6,-8(fp)
   18828:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1882c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18830:	e0bfff17 	ldw	r2,-4(fp)
   18834:	1000021e 	bne	r2,zero,18840 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   18838:	0005883a 	mov	r2,zero
   1883c:	00006d06 	br	189f4 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   18840:	e0bffc17 	ldw	r2,-16(fp)
   18844:	1000051e 	bne	r2,zero,1885c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18848:	e0bfff17 	ldw	r2,-4(fp)
   1884c:	00c01884 	movi	r3,98
   18850:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18854:	0005883a 	mov	r2,zero
   18858:	00006606 	br	189f4 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1885c:	e0bffc17 	ldw	r2,-16(fp)
   18860:	108000cc 	andi	r2,r2,3
   18864:	10000526 	beq	r2,zero,1887c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18868:	e0bfff17 	ldw	r2,-4(fp)
   1886c:	00c01884 	movi	r3,98
   18870:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18874:	0005883a 	mov	r2,zero
   18878:	00005e06 	br	189f4 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1887c:	e0bffd17 	ldw	r2,-12(fp)
   18880:	108000a8 	cmpgeui	r2,r2,2
   18884:	1000051e 	bne	r2,zero,1889c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   18888:	e0bfff17 	ldw	r2,-4(fp)
   1888c:	00c016c4 	movi	r3,91
   18890:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18894:	0005883a 	mov	r2,zero
   18898:	00005606 	br	189f4 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1889c:	e0bffe17 	ldw	r2,-8(fp)
   188a0:	10800128 	cmpgeui	r2,r2,4
   188a4:	1000051e 	bne	r2,zero,188bc <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   188a8:	e0bfff17 	ldw	r2,-4(fp)
   188ac:	00c01704 	movi	r3,92
   188b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   188b4:	0005883a 	mov	r2,zero
   188b8:	00004e06 	br	189f4 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188bc:	0005303a 	rdctl	r2,status
   188c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188c4:	e0fffa17 	ldw	r3,-24(fp)
   188c8:	00bfff84 	movi	r2,-2
   188cc:	1884703a 	and	r2,r3,r2
   188d0:	1001703a 	wrctl	status,r2
  
  return context;
   188d4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   188d8:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   188dc:	008000b4 	movhi	r2,2
   188e0:	1093e804 	addi	r2,r2,20384
   188e4:	10800017 	ldw	r2,0(r2)
   188e8:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   188ec:	008000b4 	movhi	r2,2
   188f0:	1093e804 	addi	r2,r2,20384
   188f4:	10800017 	ldw	r2,0(r2)
   188f8:	10000726 	beq	r2,zero,18918 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   188fc:	008000b4 	movhi	r2,2
   18900:	1093e804 	addi	r2,r2,20384
   18904:	10800017 	ldw	r2,0(r2)
   18908:	10c00117 	ldw	r3,4(r2)
   1890c:	008000b4 	movhi	r2,2
   18910:	1093e804 	addi	r2,r2,20384
   18914:	10c00015 	stw	r3,0(r2)
   18918:	e0bff817 	ldw	r2,-32(fp)
   1891c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18920:	e0bffb17 	ldw	r2,-20(fp)
   18924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   18928:	e0bff917 	ldw	r2,-28(fp)
   1892c:	1000051e 	bne	r2,zero,18944 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   18930:	e0bfff17 	ldw	r2,-4(fp)
   18934:	00c01684 	movi	r3,90
   18938:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1893c:	0005883a 	mov	r2,zero
   18940:	00002c06 	br	189f4 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   18944:	e0bffc17 	ldw	r2,-16(fp)
   18948:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1894c:	e0fffc17 	ldw	r3,-16(fp)
   18950:	e0bffe17 	ldw	r2,-8(fp)
   18954:	1885883a 	add	r2,r3,r2
   18958:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1895c:	e03ff715 	stw	zero,-36(fp)
   18960:	00000c06 	br	18994 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   18964:	e0bff617 	ldw	r2,-40(fp)
   18968:	e0fff517 	ldw	r3,-44(fp)
   1896c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   18970:	e0bff517 	ldw	r2,-44(fp)
   18974:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   18978:	e0fff517 	ldw	r3,-44(fp)
   1897c:	e0bffe17 	ldw	r2,-8(fp)
   18980:	1885883a 	add	r2,r3,r2
   18984:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   18988:	e0bff717 	ldw	r2,-36(fp)
   1898c:	10800044 	addi	r2,r2,1
   18990:	e0bff715 	stw	r2,-36(fp)
   18994:	e0bffd17 	ldw	r2,-12(fp)
   18998:	10bfffc4 	addi	r2,r2,-1
   1899c:	e0fff717 	ldw	r3,-36(fp)
   189a0:	18bff036 	bltu	r3,r2,18964 <__alt_mem_Flash_flash_data+0xf4018964>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   189a4:	e0bff617 	ldw	r2,-40(fp)
   189a8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   189ac:	e0bff917 	ldw	r2,-28(fp)
   189b0:	e0fffc17 	ldw	r3,-16(fp)
   189b4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   189b8:	e0bff917 	ldw	r2,-28(fp)
   189bc:	e0fffc17 	ldw	r3,-16(fp)
   189c0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   189c4:	e0bff917 	ldw	r2,-28(fp)
   189c8:	e0fffd17 	ldw	r3,-12(fp)
   189cc:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   189d0:	e0bff917 	ldw	r2,-28(fp)
   189d4:	e0fffd17 	ldw	r3,-12(fp)
   189d8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   189dc:	e0bff917 	ldw	r2,-28(fp)
   189e0:	e0fffe17 	ldw	r3,-8(fp)
   189e4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   189e8:	e0bfff17 	ldw	r2,-4(fp)
   189ec:	10000005 	stb	zero,0(r2)
    return (pmem);
   189f0:	e0bff917 	ldw	r2,-28(fp)
}
   189f4:	e037883a 	mov	sp,fp
   189f8:	df000017 	ldw	fp,0(sp)
   189fc:	dec00104 	addi	sp,sp,4
   18a00:	f800283a 	ret

00018a04 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   18a04:	defff804 	addi	sp,sp,-32
   18a08:	df000715 	stw	fp,28(sp)
   18a0c:	df000704 	addi	fp,sp,28
   18a10:	e13ffe15 	stw	r4,-8(fp)
   18a14:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a18:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18a1c:	e0bfff17 	ldw	r2,-4(fp)
   18a20:	1000021e 	bne	r2,zero,18a2c <OSMemGet+0x28>
        return ((void *)0);
   18a24:	0005883a 	mov	r2,zero
   18a28:	00002e06 	br	18ae4 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   18a2c:	e0bffe17 	ldw	r2,-8(fp)
   18a30:	1000051e 	bne	r2,zero,18a48 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   18a34:	e0bfff17 	ldw	r2,-4(fp)
   18a38:	00c01804 	movi	r3,96
   18a3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18a40:	0005883a 	mov	r2,zero
   18a44:	00002706 	br	18ae4 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a48:	0005303a 	rdctl	r2,status
   18a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a50:	e0fffb17 	ldw	r3,-20(fp)
   18a54:	00bfff84 	movi	r2,-2
   18a58:	1884703a 	and	r2,r3,r2
   18a5c:	1001703a 	wrctl	status,r2
  
  return context;
   18a60:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18a64:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   18a68:	e0bffe17 	ldw	r2,-8(fp)
   18a6c:	10800417 	ldw	r2,16(r2)
   18a70:	10001426 	beq	r2,zero,18ac4 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   18a74:	e0bffe17 	ldw	r2,-8(fp)
   18a78:	10800117 	ldw	r2,4(r2)
   18a7c:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   18a80:	e0bffa17 	ldw	r2,-24(fp)
   18a84:	10c00017 	ldw	r3,0(r2)
   18a88:	e0bffe17 	ldw	r2,-8(fp)
   18a8c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   18a90:	e0bffe17 	ldw	r2,-8(fp)
   18a94:	10800417 	ldw	r2,16(r2)
   18a98:	10ffffc4 	addi	r3,r2,-1
   18a9c:	e0bffe17 	ldw	r2,-8(fp)
   18aa0:	10c00415 	stw	r3,16(r2)
   18aa4:	e0bff917 	ldw	r2,-28(fp)
   18aa8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18aac:	e0bffc17 	ldw	r2,-16(fp)
   18ab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   18ab4:	e0bfff17 	ldw	r2,-4(fp)
   18ab8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   18abc:	e0bffa17 	ldw	r2,-24(fp)
   18ac0:	00000806 	br	18ae4 <OSMemGet+0xe0>
   18ac4:	e0bff917 	ldw	r2,-28(fp)
   18ac8:	e0bffd15 	stw	r2,-12(fp)
   18acc:	e0bffd17 	ldw	r2,-12(fp)
   18ad0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   18ad4:	e0bfff17 	ldw	r2,-4(fp)
   18ad8:	00c01744 	movi	r3,93
   18adc:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   18ae0:	0005883a 	mov	r2,zero
}
   18ae4:	e037883a 	mov	sp,fp
   18ae8:	df000017 	ldw	fp,0(sp)
   18aec:	dec00104 	addi	sp,sp,4
   18af0:	f800283a 	ret

00018af4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   18af4:	defff704 	addi	sp,sp,-36
   18af8:	dfc00815 	stw	ra,32(sp)
   18afc:	df000715 	stw	fp,28(sp)
   18b00:	df000704 	addi	fp,sp,28
   18b04:	e13ffd15 	stw	r4,-12(fp)
   18b08:	e17ffe15 	stw	r5,-8(fp)
   18b0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18b10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18b14:	e0bfff17 	ldw	r2,-4(fp)
   18b18:	1000021e 	bne	r2,zero,18b24 <OSMemNameGet+0x30>
        return (0);
   18b1c:	0005883a 	mov	r2,zero
   18b20:	00002d06 	br	18bd8 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   18b24:	e0bffd17 	ldw	r2,-12(fp)
   18b28:	1000051e 	bne	r2,zero,18b40 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   18b2c:	e0bfff17 	ldw	r2,-4(fp)
   18b30:	00c01804 	movi	r3,96
   18b34:	10c00005 	stb	r3,0(r2)
        return (0);
   18b38:	0005883a 	mov	r2,zero
   18b3c:	00002606 	br	18bd8 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   18b40:	e0bffe17 	ldw	r2,-8(fp)
   18b44:	1000051e 	bne	r2,zero,18b5c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   18b48:	e0bfff17 	ldw	r2,-4(fp)
   18b4c:	00c00304 	movi	r3,12
   18b50:	10c00005 	stb	r3,0(r2)
        return (0);
   18b54:	0005883a 	mov	r2,zero
   18b58:	00001f06 	br	18bd8 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18b5c:	008000b4 	movhi	r2,2
   18b60:	1093ed04 	addi	r2,r2,20404
   18b64:	10800003 	ldbu	r2,0(r2)
   18b68:	10803fcc 	andi	r2,r2,255
   18b6c:	10000526 	beq	r2,zero,18b84 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   18b70:	e0bfff17 	ldw	r2,-4(fp)
   18b74:	00c00444 	movi	r3,17
   18b78:	10c00005 	stb	r3,0(r2)
        return (0);
   18b7c:	0005883a 	mov	r2,zero
   18b80:	00001506 	br	18bd8 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b84:	0005303a 	rdctl	r2,status
   18b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b8c:	e0fffb17 	ldw	r3,-20(fp)
   18b90:	00bfff84 	movi	r2,-2
   18b94:	1884703a 	and	r2,r3,r2
   18b98:	1001703a 	wrctl	status,r2
  
  return context;
   18b9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   18ba0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   18ba4:	e0bffd17 	ldw	r2,-12(fp)
   18ba8:	10800504 	addi	r2,r2,20
   18bac:	e13ffe17 	ldw	r4,-8(fp)
   18bb0:	100b883a 	mov	r5,r2
   18bb4:	00168cc0 	call	168cc <OS_StrCopy>
   18bb8:	e0bffa05 	stb	r2,-24(fp)
   18bbc:	e0bff917 	ldw	r2,-28(fp)
   18bc0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bc4:	e0bffc17 	ldw	r2,-16(fp)
   18bc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18bcc:	e0bfff17 	ldw	r2,-4(fp)
   18bd0:	10000005 	stb	zero,0(r2)
    return (len);
   18bd4:	e0bffa03 	ldbu	r2,-24(fp)
}
   18bd8:	e037883a 	mov	sp,fp
   18bdc:	dfc00117 	ldw	ra,4(sp)
   18be0:	df000017 	ldw	fp,0(sp)
   18be4:	dec00204 	addi	sp,sp,8
   18be8:	f800283a 	ret

00018bec <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   18bec:	defff604 	addi	sp,sp,-40
   18bf0:	dfc00915 	stw	ra,36(sp)
   18bf4:	df000815 	stw	fp,32(sp)
   18bf8:	df000804 	addi	fp,sp,32
   18bfc:	e13ffd15 	stw	r4,-12(fp)
   18c00:	e17ffe15 	stw	r5,-8(fp)
   18c04:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18c08:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18c0c:	e0bfff17 	ldw	r2,-4(fp)
   18c10:	1000011e 	bne	r2,zero,18c18 <OSMemNameSet+0x2c>
        return;
   18c14:	00003606 	br	18cf0 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   18c18:	e0bffd17 	ldw	r2,-12(fp)
   18c1c:	1000041e 	bne	r2,zero,18c30 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   18c20:	e0bfff17 	ldw	r2,-4(fp)
   18c24:	00c01804 	movi	r3,96
   18c28:	10c00005 	stb	r3,0(r2)
        return;
   18c2c:	00003006 	br	18cf0 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   18c30:	e0bffe17 	ldw	r2,-8(fp)
   18c34:	1000041e 	bne	r2,zero,18c48 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   18c38:	e0bfff17 	ldw	r2,-4(fp)
   18c3c:	00c00304 	movi	r3,12
   18c40:	10c00005 	stb	r3,0(r2)
        return;
   18c44:	00002a06 	br	18cf0 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18c48:	008000b4 	movhi	r2,2
   18c4c:	1093ed04 	addi	r2,r2,20404
   18c50:	10800003 	ldbu	r2,0(r2)
   18c54:	10803fcc 	andi	r2,r2,255
   18c58:	10000426 	beq	r2,zero,18c6c <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   18c5c:	e0bfff17 	ldw	r2,-4(fp)
   18c60:	00c00484 	movi	r3,18
   18c64:	10c00005 	stb	r3,0(r2)
        return;
   18c68:	00002106 	br	18cf0 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c6c:	0005303a 	rdctl	r2,status
   18c70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c74:	e0fffa17 	ldw	r3,-24(fp)
   18c78:	00bfff84 	movi	r2,-2
   18c7c:	1884703a 	and	r2,r3,r2
   18c80:	1001703a 	wrctl	status,r2
  
  return context;
   18c84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18c88:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   18c8c:	e13ffe17 	ldw	r4,-8(fp)
   18c90:	00169400 	call	16940 <OS_StrLen>
   18c94:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   18c98:	e0bff903 	ldbu	r2,-28(fp)
   18c9c:	10800830 	cmpltui	r2,r2,32
   18ca0:	1000081e 	bne	r2,zero,18cc4 <OSMemNameSet+0xd8>
   18ca4:	e0bff817 	ldw	r2,-32(fp)
   18ca8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cac:	e0bffb17 	ldw	r2,-20(fp)
   18cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   18cb4:	e0bfff17 	ldw	r2,-4(fp)
   18cb8:	00c018c4 	movi	r3,99
   18cbc:	10c00005 	stb	r3,0(r2)
        return;
   18cc0:	00000b06 	br	18cf0 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   18cc4:	e0bffd17 	ldw	r2,-12(fp)
   18cc8:	10800504 	addi	r2,r2,20
   18ccc:	1009883a 	mov	r4,r2
   18cd0:	e17ffe17 	ldw	r5,-8(fp)
   18cd4:	00168cc0 	call	168cc <OS_StrCopy>
   18cd8:	e0bff817 	ldw	r2,-32(fp)
   18cdc:	e0bffc15 	stw	r2,-16(fp)
   18ce0:	e0bffc17 	ldw	r2,-16(fp)
   18ce4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18ce8:	e0bfff17 	ldw	r2,-4(fp)
   18cec:	10000005 	stb	zero,0(r2)
}
   18cf0:	e037883a 	mov	sp,fp
   18cf4:	dfc00117 	ldw	ra,4(sp)
   18cf8:	df000017 	ldw	fp,0(sp)
   18cfc:	dec00204 	addi	sp,sp,8
   18d00:	f800283a 	ret

00018d04 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   18d04:	defff904 	addi	sp,sp,-28
   18d08:	df000615 	stw	fp,24(sp)
   18d0c:	df000604 	addi	fp,sp,24
   18d10:	e13ffe15 	stw	r4,-8(fp)
   18d14:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18d18:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   18d1c:	e0bffe17 	ldw	r2,-8(fp)
   18d20:	1000021e 	bne	r2,zero,18d2c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   18d24:	00801804 	movi	r2,96
   18d28:	00002806 	br	18dcc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   18d2c:	e0bfff17 	ldw	r2,-4(fp)
   18d30:	1000021e 	bne	r2,zero,18d3c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   18d34:	008017c4 	movi	r2,95
   18d38:	00002406 	br	18dcc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d3c:	0005303a 	rdctl	r2,status
   18d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d44:	e0fffb17 	ldw	r3,-20(fp)
   18d48:	00bfff84 	movi	r2,-2
   18d4c:	1884703a 	and	r2,r3,r2
   18d50:	1001703a 	wrctl	status,r2
  
  return context;
   18d54:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18d58:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   18d5c:	e0bffe17 	ldw	r2,-8(fp)
   18d60:	10c00417 	ldw	r3,16(r2)
   18d64:	e0bffe17 	ldw	r2,-8(fp)
   18d68:	10800317 	ldw	r2,12(r2)
   18d6c:	18800636 	bltu	r3,r2,18d88 <OSMemPut+0x84>
   18d70:	e0bffa17 	ldw	r2,-24(fp)
   18d74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d78:	e0bffc17 	ldw	r2,-16(fp)
   18d7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   18d80:	00801784 	movi	r2,94
   18d84:	00001106 	br	18dcc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   18d88:	e0bffe17 	ldw	r2,-8(fp)
   18d8c:	10c00117 	ldw	r3,4(r2)
   18d90:	e0bfff17 	ldw	r2,-4(fp)
   18d94:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   18d98:	e0bffe17 	ldw	r2,-8(fp)
   18d9c:	e0ffff17 	ldw	r3,-4(fp)
   18da0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   18da4:	e0bffe17 	ldw	r2,-8(fp)
   18da8:	10800417 	ldw	r2,16(r2)
   18dac:	10c00044 	addi	r3,r2,1
   18db0:	e0bffe17 	ldw	r2,-8(fp)
   18db4:	10c00415 	stw	r3,16(r2)
   18db8:	e0bffa17 	ldw	r2,-24(fp)
   18dbc:	e0bffd15 	stw	r2,-12(fp)
   18dc0:	e0bffd17 	ldw	r2,-12(fp)
   18dc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   18dc8:	0005883a 	mov	r2,zero
}
   18dcc:	e037883a 	mov	sp,fp
   18dd0:	df000017 	ldw	fp,0(sp)
   18dd4:	dec00104 	addi	sp,sp,4
   18dd8:	f800283a 	ret

00018ddc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   18ddc:	defffa04 	addi	sp,sp,-24
   18de0:	df000515 	stw	fp,20(sp)
   18de4:	df000504 	addi	fp,sp,20
   18de8:	e13ffe15 	stw	r4,-8(fp)
   18dec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18df0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   18df4:	e0bffe17 	ldw	r2,-8(fp)
   18df8:	1000021e 	bne	r2,zero,18e04 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   18dfc:	00801804 	movi	r2,96
   18e00:	00002c06 	br	18eb4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   18e04:	e0bfff17 	ldw	r2,-4(fp)
   18e08:	1000021e 	bne	r2,zero,18e14 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   18e0c:	00801844 	movi	r2,97
   18e10:	00002806 	br	18eb4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e14:	0005303a 	rdctl	r2,status
   18e18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e1c:	e0fffc17 	ldw	r3,-16(fp)
   18e20:	00bfff84 	movi	r2,-2
   18e24:	1884703a 	and	r2,r3,r2
   18e28:	1001703a 	wrctl	status,r2
  
  return context;
   18e2c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18e30:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   18e34:	e0bffe17 	ldw	r2,-8(fp)
   18e38:	10c00017 	ldw	r3,0(r2)
   18e3c:	e0bfff17 	ldw	r2,-4(fp)
   18e40:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   18e44:	e0bffe17 	ldw	r2,-8(fp)
   18e48:	10c00117 	ldw	r3,4(r2)
   18e4c:	e0bfff17 	ldw	r2,-4(fp)
   18e50:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   18e54:	e0bffe17 	ldw	r2,-8(fp)
   18e58:	10c00217 	ldw	r3,8(r2)
   18e5c:	e0bfff17 	ldw	r2,-4(fp)
   18e60:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   18e64:	e0bffe17 	ldw	r2,-8(fp)
   18e68:	10c00317 	ldw	r3,12(r2)
   18e6c:	e0bfff17 	ldw	r2,-4(fp)
   18e70:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   18e74:	e0bffe17 	ldw	r2,-8(fp)
   18e78:	10c00417 	ldw	r3,16(r2)
   18e7c:	e0bfff17 	ldw	r2,-4(fp)
   18e80:	10c00415 	stw	r3,16(r2)
   18e84:	e0bffb17 	ldw	r2,-20(fp)
   18e88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e8c:	e0bffd17 	ldw	r2,-12(fp)
   18e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   18e94:	e0bfff17 	ldw	r2,-4(fp)
   18e98:	10c00317 	ldw	r3,12(r2)
   18e9c:	e0bfff17 	ldw	r2,-4(fp)
   18ea0:	10800417 	ldw	r2,16(r2)
   18ea4:	1887c83a 	sub	r3,r3,r2
   18ea8:	e0bfff17 	ldw	r2,-4(fp)
   18eac:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   18eb0:	0005883a 	mov	r2,zero
}
   18eb4:	e037883a 	mov	sp,fp
   18eb8:	df000017 	ldw	fp,0(sp)
   18ebc:	dec00104 	addi	sp,sp,4
   18ec0:	f800283a 	ret

00018ec4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   18ec4:	defffc04 	addi	sp,sp,-16
   18ec8:	dfc00315 	stw	ra,12(sp)
   18ecc:	df000215 	stw	fp,8(sp)
   18ed0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   18ed4:	010000f4 	movhi	r4,3
   18ed8:	2124dd04 	addi	r4,r4,-27788
   18edc:	01430c04 	movi	r5,3120
   18ee0:	00166dc0 	call	166dc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   18ee4:	008000f4 	movhi	r2,3
   18ee8:	10a4dd04 	addi	r2,r2,-27788
   18eec:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   18ef0:	e03fff0d 	sth	zero,-4(fp)
   18ef4:	00001306 	br	18f44 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   18ef8:	e0bfff0b 	ldhu	r2,-4(fp)
   18efc:	10800044 	addi	r2,r2,1
   18f00:	10c00d24 	muli	r3,r2,52
   18f04:	008000f4 	movhi	r2,3
   18f08:	10a4dd04 	addi	r2,r2,-27788
   18f0c:	1887883a 	add	r3,r3,r2
   18f10:	e0bffe17 	ldw	r2,-8(fp)
   18f14:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   18f18:	e0bffe17 	ldw	r2,-8(fp)
   18f1c:	00c00fc4 	movi	r3,63
   18f20:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   18f24:	e0bffe17 	ldw	r2,-8(fp)
   18f28:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   18f2c:	e0bffe17 	ldw	r2,-8(fp)
   18f30:	10800d04 	addi	r2,r2,52
   18f34:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   18f38:	e0bfff0b 	ldhu	r2,-4(fp)
   18f3c:	10800044 	addi	r2,r2,1
   18f40:	e0bfff0d 	sth	r2,-4(fp)
   18f44:	e0bfff0b 	ldhu	r2,-4(fp)
   18f48:	10800ef0 	cmpltui	r2,r2,59
   18f4c:	103fea1e 	bne	r2,zero,18ef8 <__alt_mem_Flash_flash_data+0xf4018ef8>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   18f50:	e0bffe17 	ldw	r2,-8(fp)
   18f54:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   18f58:	e0bffe17 	ldw	r2,-8(fp)
   18f5c:	00c00fc4 	movi	r3,63
   18f60:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   18f64:	e0bffe17 	ldw	r2,-8(fp)
   18f68:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   18f6c:	008000b4 	movhi	r2,2
   18f70:	1093e804 	addi	r2,r2,20384
   18f74:	00c000f4 	movhi	r3,3
   18f78:	18e4dd04 	addi	r3,r3,-27788
   18f7c:	10c00015 	stw	r3,0(r2)
#endif
}
   18f80:	e037883a 	mov	sp,fp
   18f84:	dfc00117 	ldw	ra,4(sp)
   18f88:	df000017 	ldw	fp,0(sp)
   18f8c:	dec00204 	addi	sp,sp,8
   18f90:	f800283a 	ret

00018f94 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   18f94:	defff804 	addi	sp,sp,-32
   18f98:	df000715 	stw	fp,28(sp)
   18f9c:	df000704 	addi	fp,sp,28
   18fa0:	e13ffe15 	stw	r4,-8(fp)
   18fa4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18fa8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18fac:	e0bfff17 	ldw	r2,-4(fp)
   18fb0:	1000021e 	bne	r2,zero,18fbc <OSQAccept+0x28>
        return ((void *)0);
   18fb4:	0005883a 	mov	r2,zero
   18fb8:	00004206 	br	190c4 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   18fbc:	e0bffe17 	ldw	r2,-8(fp)
   18fc0:	1000051e 	bne	r2,zero,18fd8 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18fc4:	e0bfff17 	ldw	r2,-4(fp)
   18fc8:	00c00104 	movi	r3,4
   18fcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18fd0:	0005883a 	mov	r2,zero
   18fd4:	00003b06 	br	190c4 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   18fd8:	e0bffe17 	ldw	r2,-8(fp)
   18fdc:	10800003 	ldbu	r2,0(r2)
   18fe0:	10803fcc 	andi	r2,r2,255
   18fe4:	108000a0 	cmpeqi	r2,r2,2
   18fe8:	1000051e 	bne	r2,zero,19000 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   18fec:	e0bfff17 	ldw	r2,-4(fp)
   18ff0:	00c00044 	movi	r3,1
   18ff4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18ff8:	0005883a 	mov	r2,zero
   18ffc:	00003106 	br	190c4 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19000:	0005303a 	rdctl	r2,status
   19004:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19008:	e0fffc17 	ldw	r3,-16(fp)
   1900c:	00bfff84 	movi	r2,-2
   19010:	1884703a 	and	r2,r3,r2
   19014:	1001703a 	wrctl	status,r2
  
  return context;
   19018:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1901c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19020:	e0bffe17 	ldw	r2,-8(fp)
   19024:	10800117 	ldw	r2,4(r2)
   19028:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1902c:	e0bffb17 	ldw	r2,-20(fp)
   19030:	1080058b 	ldhu	r2,22(r2)
   19034:	10bfffcc 	andi	r2,r2,65535
   19038:	10001926 	beq	r2,zero,190a0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1903c:	e0bffb17 	ldw	r2,-20(fp)
   19040:	10800417 	ldw	r2,16(r2)
   19044:	11000104 	addi	r4,r2,4
   19048:	e0fffb17 	ldw	r3,-20(fp)
   1904c:	19000415 	stw	r4,16(r3)
   19050:	10800017 	ldw	r2,0(r2)
   19054:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   19058:	e0bffb17 	ldw	r2,-20(fp)
   1905c:	1080058b 	ldhu	r2,22(r2)
   19060:	10bfffc4 	addi	r2,r2,-1
   19064:	1007883a 	mov	r3,r2
   19068:	e0bffb17 	ldw	r2,-20(fp)
   1906c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   19070:	e0bffb17 	ldw	r2,-20(fp)
   19074:	10c00417 	ldw	r3,16(r2)
   19078:	e0bffb17 	ldw	r2,-20(fp)
   1907c:	10800217 	ldw	r2,8(r2)
   19080:	1880041e 	bne	r3,r2,19094 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   19084:	e0bffb17 	ldw	r2,-20(fp)
   19088:	10c00117 	ldw	r3,4(r2)
   1908c:	e0bffb17 	ldw	r2,-20(fp)
   19090:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   19094:	e0bfff17 	ldw	r2,-4(fp)
   19098:	10000005 	stb	zero,0(r2)
   1909c:	00000406 	br	190b0 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   190a0:	e0bfff17 	ldw	r2,-4(fp)
   190a4:	00c007c4 	movi	r3,31
   190a8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   190ac:	e03ff915 	stw	zero,-28(fp)
   190b0:	e0bffa17 	ldw	r2,-24(fp)
   190b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190b8:	e0bffd17 	ldw	r2,-12(fp)
   190bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   190c0:	e0bff917 	ldw	r2,-28(fp)
}
   190c4:	e037883a 	mov	sp,fp
   190c8:	df000017 	ldw	fp,0(sp)
   190cc:	dec00104 	addi	sp,sp,4
   190d0:	f800283a 	ret

000190d4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   190d4:	defff404 	addi	sp,sp,-48
   190d8:	dfc00b15 	stw	ra,44(sp)
   190dc:	df000a15 	stw	fp,40(sp)
   190e0:	df000a04 	addi	fp,sp,40
   190e4:	e13ffe15 	stw	r4,-8(fp)
   190e8:	2805883a 	mov	r2,r5
   190ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   190f0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   190f4:	008000b4 	movhi	r2,2
   190f8:	1093ed04 	addi	r2,r2,20404
   190fc:	10800003 	ldbu	r2,0(r2)
   19100:	10803fcc 	andi	r2,r2,255
   19104:	10000226 	beq	r2,zero,19110 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   19108:	0005883a 	mov	r2,zero
   1910c:	00006b06 	br	192bc <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19110:	0005303a 	rdctl	r2,status
   19114:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19118:	e0fff917 	ldw	r3,-28(fp)
   1911c:	00bfff84 	movi	r2,-2
   19120:	1884703a 	and	r2,r3,r2
   19124:	1001703a 	wrctl	status,r2
  
  return context;
   19128:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1912c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   19130:	008000b4 	movhi	r2,2
   19134:	1093ec04 	addi	r2,r2,20400
   19138:	10800017 	ldw	r2,0(r2)
   1913c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   19140:	008000b4 	movhi	r2,2
   19144:	1093ec04 	addi	r2,r2,20400
   19148:	10800017 	ldw	r2,0(r2)
   1914c:	10000726 	beq	r2,zero,1916c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   19150:	008000b4 	movhi	r2,2
   19154:	1093ec04 	addi	r2,r2,20400
   19158:	10800017 	ldw	r2,0(r2)
   1915c:	10c00117 	ldw	r3,4(r2)
   19160:	008000b4 	movhi	r2,2
   19164:	1093ec04 	addi	r2,r2,20400
   19168:	10c00015 	stw	r3,0(r2)
   1916c:	e0bff717 	ldw	r2,-36(fp)
   19170:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19174:	e0bffa17 	ldw	r2,-24(fp)
   19178:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1917c:	e0bff617 	ldw	r2,-40(fp)
   19180:	10004d26 	beq	r2,zero,192b8 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19184:	0005303a 	rdctl	r2,status
   19188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1918c:	e0fffb17 	ldw	r3,-20(fp)
   19190:	00bfff84 	movi	r2,-2
   19194:	1884703a 	and	r2,r3,r2
   19198:	1001703a 	wrctl	status,r2
  
  return context;
   1919c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   191a0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   191a4:	008000b4 	movhi	r2,2
   191a8:	1093ea04 	addi	r2,r2,20392
   191ac:	10800017 	ldw	r2,0(r2)
   191b0:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   191b4:	e0bff817 	ldw	r2,-32(fp)
   191b8:	10003126 	beq	r2,zero,19280 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   191bc:	008000b4 	movhi	r2,2
   191c0:	1093ea04 	addi	r2,r2,20392
   191c4:	10800017 	ldw	r2,0(r2)
   191c8:	10c00017 	ldw	r3,0(r2)
   191cc:	008000b4 	movhi	r2,2
   191d0:	1093ea04 	addi	r2,r2,20392
   191d4:	10c00015 	stw	r3,0(r2)
   191d8:	e0bff717 	ldw	r2,-36(fp)
   191dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   191e0:	e0bffc17 	ldw	r2,-16(fp)
   191e4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   191e8:	e0bff817 	ldw	r2,-32(fp)
   191ec:	e0fffe17 	ldw	r3,-8(fp)
   191f0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   191f4:	e0bfff0b 	ldhu	r2,-4(fp)
   191f8:	1085883a 	add	r2,r2,r2
   191fc:	1085883a 	add	r2,r2,r2
   19200:	1007883a 	mov	r3,r2
   19204:	e0bffe17 	ldw	r2,-8(fp)
   19208:	10c7883a 	add	r3,r2,r3
   1920c:	e0bff817 	ldw	r2,-32(fp)
   19210:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   19214:	e0bff817 	ldw	r2,-32(fp)
   19218:	e0fffe17 	ldw	r3,-8(fp)
   1921c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   19220:	e0bff817 	ldw	r2,-32(fp)
   19224:	e0fffe17 	ldw	r3,-8(fp)
   19228:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1922c:	e0bff817 	ldw	r2,-32(fp)
   19230:	e0ffff0b 	ldhu	r3,-4(fp)
   19234:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   19238:	e0bff817 	ldw	r2,-32(fp)
   1923c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   19240:	e0bff617 	ldw	r2,-40(fp)
   19244:	00c00084 	movi	r3,2
   19248:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1924c:	e0bff617 	ldw	r2,-40(fp)
   19250:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   19254:	e0bff617 	ldw	r2,-40(fp)
   19258:	e0fff817 	ldw	r3,-32(fp)
   1925c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   19260:	e0bff617 	ldw	r2,-40(fp)
   19264:	00c00fc4 	movi	r3,63
   19268:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1926c:	e0bff617 	ldw	r2,-40(fp)
   19270:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   19274:	e13ff617 	ldw	r4,-40(fp)
   19278:	00163180 	call	16318 <OS_EventWaitListInit>
   1927c:	00000e06 	br	192b8 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   19280:	008000b4 	movhi	r2,2
   19284:	1093ec04 	addi	r2,r2,20400
   19288:	10c00017 	ldw	r3,0(r2)
   1928c:	e0bff617 	ldw	r2,-40(fp)
   19290:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   19294:	008000b4 	movhi	r2,2
   19298:	1093ec04 	addi	r2,r2,20400
   1929c:	e0fff617 	ldw	r3,-40(fp)
   192a0:	10c00015 	stw	r3,0(r2)
   192a4:	e0bff717 	ldw	r2,-36(fp)
   192a8:	e0bffd15 	stw	r2,-12(fp)
   192ac:	e0bffd17 	ldw	r2,-12(fp)
   192b0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   192b4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   192b8:	e0bff617 	ldw	r2,-40(fp)
}
   192bc:	e037883a 	mov	sp,fp
   192c0:	dfc00117 	ldw	ra,4(sp)
   192c4:	df000017 	ldw	fp,0(sp)
   192c8:	dec00204 	addi	sp,sp,8
   192cc:	f800283a 	ret

000192d0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   192d0:	defff204 	addi	sp,sp,-56
   192d4:	dfc00d15 	stw	ra,52(sp)
   192d8:	df000c15 	stw	fp,48(sp)
   192dc:	df000c04 	addi	fp,sp,48
   192e0:	e13ffd15 	stw	r4,-12(fp)
   192e4:	2805883a 	mov	r2,r5
   192e8:	e1bfff15 	stw	r6,-4(fp)
   192ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   192f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   192f4:	e0bfff17 	ldw	r2,-4(fp)
   192f8:	1000021e 	bne	r2,zero,19304 <OSQDel+0x34>
        return (pevent);
   192fc:	e0bffd17 	ldw	r2,-12(fp)
   19300:	0000a006 	br	19584 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19304:	e0bffd17 	ldw	r2,-12(fp)
   19308:	1000051e 	bne	r2,zero,19320 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1930c:	e0bfff17 	ldw	r2,-4(fp)
   19310:	00c00104 	movi	r3,4
   19314:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19318:	e0bffd17 	ldw	r2,-12(fp)
   1931c:	00009906 	br	19584 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   19320:	e0bffd17 	ldw	r2,-12(fp)
   19324:	10800003 	ldbu	r2,0(r2)
   19328:	10803fcc 	andi	r2,r2,255
   1932c:	108000a0 	cmpeqi	r2,r2,2
   19330:	1000051e 	bne	r2,zero,19348 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19334:	e0bfff17 	ldw	r2,-4(fp)
   19338:	00c00044 	movi	r3,1
   1933c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19340:	e0bffd17 	ldw	r2,-12(fp)
   19344:	00008f06 	br	19584 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19348:	008000b4 	movhi	r2,2
   1934c:	1093ed04 	addi	r2,r2,20404
   19350:	10800003 	ldbu	r2,0(r2)
   19354:	10803fcc 	andi	r2,r2,255
   19358:	10000526 	beq	r2,zero,19370 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1935c:	e0bfff17 	ldw	r2,-4(fp)
   19360:	00c003c4 	movi	r3,15
   19364:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19368:	e0bffd17 	ldw	r2,-12(fp)
   1936c:	00008506 	br	19584 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19370:	0005303a 	rdctl	r2,status
   19374:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19378:	e0fff817 	ldw	r3,-32(fp)
   1937c:	00bfff84 	movi	r2,-2
   19380:	1884703a 	and	r2,r3,r2
   19384:	1001703a 	wrctl	status,r2
  
  return context;
   19388:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1938c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   19390:	e0bffd17 	ldw	r2,-12(fp)
   19394:	10800283 	ldbu	r2,10(r2)
   19398:	10803fcc 	andi	r2,r2,255
   1939c:	10000326 	beq	r2,zero,193ac <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   193a0:	00800044 	movi	r2,1
   193a4:	e0bff405 	stb	r2,-48(fp)
   193a8:	00000106 	br	193b0 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   193ac:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   193b0:	e0bffe03 	ldbu	r2,-8(fp)
   193b4:	10000326 	beq	r2,zero,193c4 <OSQDel+0xf4>
   193b8:	10800060 	cmpeqi	r2,r2,1
   193bc:	1000381e 	bne	r2,zero,194a0 <OSQDel+0x1d0>
   193c0:	00006506 	br	19558 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   193c4:	e0bff403 	ldbu	r2,-48(fp)
   193c8:	1000261e 	bne	r2,zero,19464 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   193cc:	e0bffd17 	ldw	r2,-12(fp)
   193d0:	00c00fc4 	movi	r3,63
   193d4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   193d8:	e0bffd17 	ldw	r2,-12(fp)
   193dc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   193e0:	e0bffd17 	ldw	r2,-12(fp)
   193e4:	10800117 	ldw	r2,4(r2)
   193e8:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   193ec:	008000b4 	movhi	r2,2
   193f0:	1093ea04 	addi	r2,r2,20392
   193f4:	10c00017 	ldw	r3,0(r2)
   193f8:	e0bff717 	ldw	r2,-36(fp)
   193fc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   19400:	008000b4 	movhi	r2,2
   19404:	1093ea04 	addi	r2,r2,20392
   19408:	e0fff717 	ldw	r3,-36(fp)
   1940c:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19410:	e0bffd17 	ldw	r2,-12(fp)
   19414:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19418:	008000b4 	movhi	r2,2
   1941c:	1093ec04 	addi	r2,r2,20400
   19420:	10c00017 	ldw	r3,0(r2)
   19424:	e0bffd17 	ldw	r2,-12(fp)
   19428:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1942c:	e0bffd17 	ldw	r2,-12(fp)
   19430:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19434:	008000b4 	movhi	r2,2
   19438:	1093ec04 	addi	r2,r2,20400
   1943c:	e0fffd17 	ldw	r3,-12(fp)
   19440:	10c00015 	stw	r3,0(r2)
   19444:	e0bff617 	ldw	r2,-40(fp)
   19448:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1944c:	e0bff917 	ldw	r2,-28(fp)
   19450:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   19454:	e0bfff17 	ldw	r2,-4(fp)
   19458:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1945c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19460:	00004706 	br	19580 <OSQDel+0x2b0>
   19464:	e0bff617 	ldw	r2,-40(fp)
   19468:	e0bffa15 	stw	r2,-24(fp)
   1946c:	e0bffa17 	ldw	r2,-24(fp)
   19470:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19474:	e0bfff17 	ldw	r2,-4(fp)
   19478:	00c01244 	movi	r3,73
   1947c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19480:	e0bffd17 	ldw	r2,-12(fp)
   19484:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   19488:	00003d06 	br	19580 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1948c:	e13ffd17 	ldw	r4,-12(fp)
   19490:	000b883a 	mov	r5,zero
   19494:	01800104 	movi	r6,4
   19498:	000f883a 	mov	r7,zero
   1949c:	0015d780 	call	15d78 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   194a0:	e0bffd17 	ldw	r2,-12(fp)
   194a4:	10800283 	ldbu	r2,10(r2)
   194a8:	10803fcc 	andi	r2,r2,255
   194ac:	103ff71e 	bne	r2,zero,1948c <__alt_mem_Flash_flash_data+0xf401948c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   194b0:	e0bffd17 	ldw	r2,-12(fp)
   194b4:	00c00fc4 	movi	r3,63
   194b8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   194bc:	e0bffd17 	ldw	r2,-12(fp)
   194c0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   194c4:	e0bffd17 	ldw	r2,-12(fp)
   194c8:	10800117 	ldw	r2,4(r2)
   194cc:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   194d0:	008000b4 	movhi	r2,2
   194d4:	1093ea04 	addi	r2,r2,20392
   194d8:	10c00017 	ldw	r3,0(r2)
   194dc:	e0bff717 	ldw	r2,-36(fp)
   194e0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   194e4:	008000b4 	movhi	r2,2
   194e8:	1093ea04 	addi	r2,r2,20392
   194ec:	e0fff717 	ldw	r3,-36(fp)
   194f0:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   194f4:	e0bffd17 	ldw	r2,-12(fp)
   194f8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   194fc:	008000b4 	movhi	r2,2
   19500:	1093ec04 	addi	r2,r2,20400
   19504:	10c00017 	ldw	r3,0(r2)
   19508:	e0bffd17 	ldw	r2,-12(fp)
   1950c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19510:	e0bffd17 	ldw	r2,-12(fp)
   19514:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19518:	008000b4 	movhi	r2,2
   1951c:	1093ec04 	addi	r2,r2,20400
   19520:	e0fffd17 	ldw	r3,-12(fp)
   19524:	10c00015 	stw	r3,0(r2)
   19528:	e0bff617 	ldw	r2,-40(fp)
   1952c:	e0bffb15 	stw	r2,-20(fp)
   19530:	e0bffb17 	ldw	r2,-20(fp)
   19534:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19538:	e0bff403 	ldbu	r2,-48(fp)
   1953c:	10800058 	cmpnei	r2,r2,1
   19540:	1000011e 	bne	r2,zero,19548 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19544:	00167900 	call	16790 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19548:	e0bfff17 	ldw	r2,-4(fp)
   1954c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   19550:	e03ff515 	stw	zero,-44(fp)
             break;
   19554:	00000a06 	br	19580 <OSQDel+0x2b0>
   19558:	e0bff617 	ldw	r2,-40(fp)
   1955c:	e0bffc15 	stw	r2,-16(fp)
   19560:	e0bffc17 	ldw	r2,-16(fp)
   19564:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19568:	e0bfff17 	ldw	r2,-4(fp)
   1956c:	00c001c4 	movi	r3,7
   19570:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19574:	e0bffd17 	ldw	r2,-12(fp)
   19578:	e0bff515 	stw	r2,-44(fp)
             break;
   1957c:	0001883a 	nop
    }
    return (pevent_return);
   19580:	e0bff517 	ldw	r2,-44(fp)
}
   19584:	e037883a 	mov	sp,fp
   19588:	dfc00117 	ldw	ra,4(sp)
   1958c:	df000017 	ldw	fp,0(sp)
   19590:	dec00204 	addi	sp,sp,8
   19594:	f800283a 	ret

00019598 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   19598:	defffa04 	addi	sp,sp,-24
   1959c:	df000515 	stw	fp,20(sp)
   195a0:	df000504 	addi	fp,sp,20
   195a4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   195a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   195ac:	e0bfff17 	ldw	r2,-4(fp)
   195b0:	1000021e 	bne	r2,zero,195bc <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   195b4:	00800104 	movi	r2,4
   195b8:	00002106 	br	19640 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   195bc:	e0bfff17 	ldw	r2,-4(fp)
   195c0:	10800003 	ldbu	r2,0(r2)
   195c4:	10803fcc 	andi	r2,r2,255
   195c8:	108000a0 	cmpeqi	r2,r2,2
   195cc:	1000021e 	bne	r2,zero,195d8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   195d0:	00800044 	movi	r2,1
   195d4:	00001a06 	br	19640 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195d8:	0005303a 	rdctl	r2,status
   195dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195e0:	e0fffd17 	ldw	r3,-12(fp)
   195e4:	00bfff84 	movi	r2,-2
   195e8:	1884703a 	and	r2,r3,r2
   195ec:	1001703a 	wrctl	status,r2
  
  return context;
   195f0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   195f4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   195f8:	e0bfff17 	ldw	r2,-4(fp)
   195fc:	10800117 	ldw	r2,4(r2)
   19600:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   19604:	e0bffc17 	ldw	r2,-16(fp)
   19608:	10c00117 	ldw	r3,4(r2)
   1960c:	e0bffc17 	ldw	r2,-16(fp)
   19610:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   19614:	e0bffc17 	ldw	r2,-16(fp)
   19618:	10c00117 	ldw	r3,4(r2)
   1961c:	e0bffc17 	ldw	r2,-16(fp)
   19620:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   19624:	e0bffc17 	ldw	r2,-16(fp)
   19628:	1000058d 	sth	zero,22(r2)
   1962c:	e0bffb17 	ldw	r2,-20(fp)
   19630:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19634:	e0bffe17 	ldw	r2,-8(fp)
   19638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1963c:	0005883a 	mov	r2,zero
}
   19640:	e037883a 	mov	sp,fp
   19644:	df000017 	ldw	fp,0(sp)
   19648:	dec00104 	addi	sp,sp,4
   1964c:	f800283a 	ret

00019650 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19650:	defff304 	addi	sp,sp,-52
   19654:	dfc00c15 	stw	ra,48(sp)
   19658:	df000b15 	stw	fp,44(sp)
   1965c:	df000b04 	addi	fp,sp,44
   19660:	e13ffd15 	stw	r4,-12(fp)
   19664:	2805883a 	mov	r2,r5
   19668:	e1bfff15 	stw	r6,-4(fp)
   1966c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19670:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   19674:	e0bfff17 	ldw	r2,-4(fp)
   19678:	1000021e 	bne	r2,zero,19684 <OSQPend+0x34>
        return ((void *)0);
   1967c:	0005883a 	mov	r2,zero
   19680:	0000ad06 	br	19938 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   19684:	e0bffd17 	ldw	r2,-12(fp)
   19688:	1000051e 	bne	r2,zero,196a0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1968c:	e0bfff17 	ldw	r2,-4(fp)
   19690:	00c00104 	movi	r3,4
   19694:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19698:	0005883a 	mov	r2,zero
   1969c:	0000a606 	br	19938 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   196a0:	e0bffd17 	ldw	r2,-12(fp)
   196a4:	10800003 	ldbu	r2,0(r2)
   196a8:	10803fcc 	andi	r2,r2,255
   196ac:	108000a0 	cmpeqi	r2,r2,2
   196b0:	1000051e 	bne	r2,zero,196c8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   196b4:	e0bfff17 	ldw	r2,-4(fp)
   196b8:	00c00044 	movi	r3,1
   196bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   196c0:	0005883a 	mov	r2,zero
   196c4:	00009c06 	br	19938 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   196c8:	008000b4 	movhi	r2,2
   196cc:	1093ed04 	addi	r2,r2,20404
   196d0:	10800003 	ldbu	r2,0(r2)
   196d4:	10803fcc 	andi	r2,r2,255
   196d8:	10000526 	beq	r2,zero,196f0 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   196dc:	e0bfff17 	ldw	r2,-4(fp)
   196e0:	00c00084 	movi	r3,2
   196e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   196e8:	0005883a 	mov	r2,zero
   196ec:	00009206 	br	19938 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   196f0:	008000b4 	movhi	r2,2
   196f4:	1093df04 	addi	r2,r2,20348
   196f8:	10800003 	ldbu	r2,0(r2)
   196fc:	10803fcc 	andi	r2,r2,255
   19700:	10000526 	beq	r2,zero,19718 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   19704:	e0bfff17 	ldw	r2,-4(fp)
   19708:	00c00344 	movi	r3,13
   1970c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19710:	0005883a 	mov	r2,zero
   19714:	00008806 	br	19938 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19718:	0005303a 	rdctl	r2,status
   1971c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19720:	e0fff817 	ldw	r3,-32(fp)
   19724:	00bfff84 	movi	r2,-2
   19728:	1884703a 	and	r2,r3,r2
   1972c:	1001703a 	wrctl	status,r2
  
  return context;
   19730:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19734:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19738:	e0bffd17 	ldw	r2,-12(fp)
   1973c:	10800117 	ldw	r2,4(r2)
   19740:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   19744:	e0bff717 	ldw	r2,-36(fp)
   19748:	1080058b 	ldhu	r2,22(r2)
   1974c:	10bfffcc 	andi	r2,r2,65535
   19750:	10001e26 	beq	r2,zero,197cc <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   19754:	e0bff717 	ldw	r2,-36(fp)
   19758:	10800417 	ldw	r2,16(r2)
   1975c:	11000104 	addi	r4,r2,4
   19760:	e0fff717 	ldw	r3,-36(fp)
   19764:	19000415 	stw	r4,16(r3)
   19768:	10800017 	ldw	r2,0(r2)
   1976c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   19770:	e0bff717 	ldw	r2,-36(fp)
   19774:	1080058b 	ldhu	r2,22(r2)
   19778:	10bfffc4 	addi	r2,r2,-1
   1977c:	1007883a 	mov	r3,r2
   19780:	e0bff717 	ldw	r2,-36(fp)
   19784:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   19788:	e0bff717 	ldw	r2,-36(fp)
   1978c:	10c00417 	ldw	r3,16(r2)
   19790:	e0bff717 	ldw	r2,-36(fp)
   19794:	10800217 	ldw	r2,8(r2)
   19798:	1880041e 	bne	r3,r2,197ac <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   1979c:	e0bff717 	ldw	r2,-36(fp)
   197a0:	10c00117 	ldw	r3,4(r2)
   197a4:	e0bff717 	ldw	r2,-36(fp)
   197a8:	10c00415 	stw	r3,16(r2)
   197ac:	e0bff617 	ldw	r2,-40(fp)
   197b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197b4:	e0bff917 	ldw	r2,-28(fp)
   197b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   197bc:	e0bfff17 	ldw	r2,-4(fp)
   197c0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   197c4:	e0bff517 	ldw	r2,-44(fp)
   197c8:	00005b06 	br	19938 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   197cc:	008000b4 	movhi	r2,2
   197d0:	1093ee04 	addi	r2,r2,20408
   197d4:	10c00017 	ldw	r3,0(r2)
   197d8:	008000b4 	movhi	r2,2
   197dc:	1093ee04 	addi	r2,r2,20408
   197e0:	10800017 	ldw	r2,0(r2)
   197e4:	10800c03 	ldbu	r2,48(r2)
   197e8:	10800114 	ori	r2,r2,4
   197ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   197f0:	008000b4 	movhi	r2,2
   197f4:	1093ee04 	addi	r2,r2,20408
   197f8:	10800017 	ldw	r2,0(r2)
   197fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   19800:	008000b4 	movhi	r2,2
   19804:	1093ee04 	addi	r2,r2,20408
   19808:	10800017 	ldw	r2,0(r2)
   1980c:	e0fffe0b 	ldhu	r3,-8(fp)
   19810:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   19814:	e13ffd17 	ldw	r4,-12(fp)
   19818:	0015f100 	call	15f10 <OS_EventTaskWait>
   1981c:	e0bff617 	ldw	r2,-40(fp)
   19820:	e0bffa15 	stw	r2,-24(fp)
   19824:	e0bffa17 	ldw	r2,-24(fp)
   19828:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1982c:	00167900 	call	16790 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19830:	0005303a 	rdctl	r2,status
   19834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19838:	e0fffb17 	ldw	r3,-20(fp)
   1983c:	00bfff84 	movi	r2,-2
   19840:	1884703a 	and	r2,r3,r2
   19844:	1001703a 	wrctl	status,r2
  
  return context;
   19848:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1984c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19850:	008000b4 	movhi	r2,2
   19854:	1093ee04 	addi	r2,r2,20408
   19858:	10800017 	ldw	r2,0(r2)
   1985c:	10800c43 	ldbu	r2,49(r2)
   19860:	10803fcc 	andi	r2,r2,255
   19864:	10000326 	beq	r2,zero,19874 <OSQPend+0x224>
   19868:	108000a0 	cmpeqi	r2,r2,2
   1986c:	1000091e 	bne	r2,zero,19894 <OSQPend+0x244>
   19870:	00000d06 	br	198a8 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   19874:	008000b4 	movhi	r2,2
   19878:	1093ee04 	addi	r2,r2,20408
   1987c:	10800017 	ldw	r2,0(r2)
   19880:	10800917 	ldw	r2,36(r2)
   19884:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   19888:	e0bfff17 	ldw	r2,-4(fp)
   1988c:	10000005 	stb	zero,0(r2)
             break;
   19890:	00001006 	br	198d4 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   19894:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19898:	e0bfff17 	ldw	r2,-4(fp)
   1989c:	00c00384 	movi	r3,14
   198a0:	10c00005 	stb	r3,0(r2)
             break;
   198a4:	00000b06 	br	198d4 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   198a8:	008000b4 	movhi	r2,2
   198ac:	1093ee04 	addi	r2,r2,20408
   198b0:	10800017 	ldw	r2,0(r2)
   198b4:	1009883a 	mov	r4,r2
   198b8:	e17ffd17 	ldw	r5,-12(fp)
   198bc:	00161680 	call	16168 <OS_EventTaskRemove>
             pmsg = (void *)0;
   198c0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   198c4:	e0bfff17 	ldw	r2,-4(fp)
   198c8:	00c00284 	movi	r3,10
   198cc:	10c00005 	stb	r3,0(r2)
             break;
   198d0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   198d4:	008000b4 	movhi	r2,2
   198d8:	1093ee04 	addi	r2,r2,20408
   198dc:	10800017 	ldw	r2,0(r2)
   198e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   198e4:	008000b4 	movhi	r2,2
   198e8:	1093ee04 	addi	r2,r2,20408
   198ec:	10800017 	ldw	r2,0(r2)
   198f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   198f4:	008000b4 	movhi	r2,2
   198f8:	1093ee04 	addi	r2,r2,20408
   198fc:	10800017 	ldw	r2,0(r2)
   19900:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19904:	008000b4 	movhi	r2,2
   19908:	1093ee04 	addi	r2,r2,20408
   1990c:	10800017 	ldw	r2,0(r2)
   19910:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   19914:	008000b4 	movhi	r2,2
   19918:	1093ee04 	addi	r2,r2,20408
   1991c:	10800017 	ldw	r2,0(r2)
   19920:	10000915 	stw	zero,36(r2)
   19924:	e0bff617 	ldw	r2,-40(fp)
   19928:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1992c:	e0bffc17 	ldw	r2,-16(fp)
   19930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   19934:	e0bff517 	ldw	r2,-44(fp)
}
   19938:	e037883a 	mov	sp,fp
   1993c:	dfc00117 	ldw	ra,4(sp)
   19940:	df000017 	ldw	fp,0(sp)
   19944:	dec00204 	addi	sp,sp,8
   19948:	f800283a 	ret

0001994c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1994c:	defff604 	addi	sp,sp,-40
   19950:	dfc00915 	stw	ra,36(sp)
   19954:	df000815 	stw	fp,32(sp)
   19958:	df000804 	addi	fp,sp,32
   1995c:	e13ffd15 	stw	r4,-12(fp)
   19960:	2805883a 	mov	r2,r5
   19964:	e1bfff15 	stw	r6,-4(fp)
   19968:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1996c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19970:	e0bfff17 	ldw	r2,-4(fp)
   19974:	1000021e 	bne	r2,zero,19980 <OSQPendAbort+0x34>
        return (0);
   19978:	0005883a 	mov	r2,zero
   1997c:	00004906 	br	19aa4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19980:	e0bffd17 	ldw	r2,-12(fp)
   19984:	1000051e 	bne	r2,zero,1999c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19988:	e0bfff17 	ldw	r2,-4(fp)
   1998c:	00c00104 	movi	r3,4
   19990:	10c00005 	stb	r3,0(r2)
        return (0);
   19994:	0005883a 	mov	r2,zero
   19998:	00004206 	br	19aa4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1999c:	e0bffd17 	ldw	r2,-12(fp)
   199a0:	10800003 	ldbu	r2,0(r2)
   199a4:	10803fcc 	andi	r2,r2,255
   199a8:	108000a0 	cmpeqi	r2,r2,2
   199ac:	1000051e 	bne	r2,zero,199c4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   199b0:	e0bfff17 	ldw	r2,-4(fp)
   199b4:	00c00044 	movi	r3,1
   199b8:	10c00005 	stb	r3,0(r2)
        return (0);
   199bc:	0005883a 	mov	r2,zero
   199c0:	00003806 	br	19aa4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199c4:	0005303a 	rdctl	r2,status
   199c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   199cc:	e0fffa17 	ldw	r3,-24(fp)
   199d0:	00bfff84 	movi	r2,-2
   199d4:	1884703a 	and	r2,r3,r2
   199d8:	1001703a 	wrctl	status,r2
  
  return context;
   199dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   199e0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   199e4:	e0bffd17 	ldw	r2,-12(fp)
   199e8:	10800283 	ldbu	r2,10(r2)
   199ec:	10803fcc 	andi	r2,r2,255
   199f0:	10002526 	beq	r2,zero,19a88 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   199f4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   199f8:	e0bffe03 	ldbu	r2,-8(fp)
   199fc:	10800060 	cmpeqi	r2,r2,1
   19a00:	10000e26 	beq	r2,zero,19a3c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19a04:	00000806 	br	19a28 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   19a08:	e13ffd17 	ldw	r4,-12(fp)
   19a0c:	000b883a 	mov	r5,zero
   19a10:	01800104 	movi	r6,4
   19a14:	01c00084 	movi	r7,2
   19a18:	0015d780 	call	15d78 <OS_EventTaskRdy>
                     nbr_tasks++;
   19a1c:	e0bff803 	ldbu	r2,-32(fp)
   19a20:	10800044 	addi	r2,r2,1
   19a24:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19a28:	e0bffd17 	ldw	r2,-12(fp)
   19a2c:	10800283 	ldbu	r2,10(r2)
   19a30:	10803fcc 	andi	r2,r2,255
   19a34:	103ff41e 	bne	r2,zero,19a08 <__alt_mem_Flash_flash_data+0xf4019a08>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19a38:	00000906 	br	19a60 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   19a3c:	e13ffd17 	ldw	r4,-12(fp)
   19a40:	000b883a 	mov	r5,zero
   19a44:	01800104 	movi	r6,4
   19a48:	01c00084 	movi	r7,2
   19a4c:	0015d780 	call	15d78 <OS_EventTaskRdy>
                 nbr_tasks++;
   19a50:	e0bff803 	ldbu	r2,-32(fp)
   19a54:	10800044 	addi	r2,r2,1
   19a58:	e0bff805 	stb	r2,-32(fp)
                 break;
   19a5c:	0001883a 	nop
   19a60:	e0bff917 	ldw	r2,-28(fp)
   19a64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a68:	e0bffb17 	ldw	r2,-20(fp)
   19a6c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   19a70:	00167900 	call	16790 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19a74:	e0bfff17 	ldw	r2,-4(fp)
   19a78:	00c00384 	movi	r3,14
   19a7c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19a80:	e0bff803 	ldbu	r2,-32(fp)
   19a84:	00000706 	br	19aa4 <OSQPendAbort+0x158>
   19a88:	e0bff917 	ldw	r2,-28(fp)
   19a8c:	e0bffc15 	stw	r2,-16(fp)
   19a90:	e0bffc17 	ldw	r2,-16(fp)
   19a94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19a98:	e0bfff17 	ldw	r2,-4(fp)
   19a9c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   19aa0:	0005883a 	mov	r2,zero
}
   19aa4:	e037883a 	mov	sp,fp
   19aa8:	dfc00117 	ldw	ra,4(sp)
   19aac:	df000017 	ldw	fp,0(sp)
   19ab0:	dec00204 	addi	sp,sp,8
   19ab4:	f800283a 	ret

00019ab8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   19ab8:	defff604 	addi	sp,sp,-40
   19abc:	dfc00915 	stw	ra,36(sp)
   19ac0:	df000815 	stw	fp,32(sp)
   19ac4:	df000804 	addi	fp,sp,32
   19ac8:	e13ffe15 	stw	r4,-8(fp)
   19acc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19ad0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19ad4:	e0bffe17 	ldw	r2,-8(fp)
   19ad8:	1000021e 	bne	r2,zero,19ae4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   19adc:	00800104 	movi	r2,4
   19ae0:	00004a06 	br	19c0c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19ae4:	e0bffe17 	ldw	r2,-8(fp)
   19ae8:	10800003 	ldbu	r2,0(r2)
   19aec:	10803fcc 	andi	r2,r2,255
   19af0:	108000a0 	cmpeqi	r2,r2,2
   19af4:	1000021e 	bne	r2,zero,19b00 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   19af8:	00800044 	movi	r2,1
   19afc:	00004306 	br	19c0c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b00:	0005303a 	rdctl	r2,status
   19b04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19b08:	e0fffa17 	ldw	r3,-24(fp)
   19b0c:	00bfff84 	movi	r2,-2
   19b10:	1884703a 	and	r2,r3,r2
   19b14:	1001703a 	wrctl	status,r2
  
  return context;
   19b18:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19b1c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   19b20:	e0bffe17 	ldw	r2,-8(fp)
   19b24:	10800283 	ldbu	r2,10(r2)
   19b28:	10803fcc 	andi	r2,r2,255
   19b2c:	10000c26 	beq	r2,zero,19b60 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19b30:	e13ffe17 	ldw	r4,-8(fp)
   19b34:	e17fff17 	ldw	r5,-4(fp)
   19b38:	01800104 	movi	r6,4
   19b3c:	000f883a 	mov	r7,zero
   19b40:	0015d780 	call	15d78 <OS_EventTaskRdy>
   19b44:	e0bff817 	ldw	r2,-32(fp)
   19b48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b4c:	e0bffb17 	ldw	r2,-20(fp)
   19b50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   19b54:	00167900 	call	16790 <OS_Sched>
        return (OS_ERR_NONE);
   19b58:	0005883a 	mov	r2,zero
   19b5c:	00002b06 	br	19c0c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   19b60:	e0bffe17 	ldw	r2,-8(fp)
   19b64:	10800117 	ldw	r2,4(r2)
   19b68:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   19b6c:	e0bff917 	ldw	r2,-28(fp)
   19b70:	10c0058b 	ldhu	r3,22(r2)
   19b74:	e0bff917 	ldw	r2,-28(fp)
   19b78:	1080050b 	ldhu	r2,20(r2)
   19b7c:	18ffffcc 	andi	r3,r3,65535
   19b80:	10bfffcc 	andi	r2,r2,65535
   19b84:	18800636 	bltu	r3,r2,19ba0 <OSQPost+0xe8>
   19b88:	e0bff817 	ldw	r2,-32(fp)
   19b8c:	e0bffc15 	stw	r2,-16(fp)
   19b90:	e0bffc17 	ldw	r2,-16(fp)
   19b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19b98:	00800784 	movi	r2,30
   19b9c:	00001b06 	br	19c0c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   19ba0:	e0bff917 	ldw	r2,-28(fp)
   19ba4:	10800317 	ldw	r2,12(r2)
   19ba8:	11000104 	addi	r4,r2,4
   19bac:	e0fff917 	ldw	r3,-28(fp)
   19bb0:	19000315 	stw	r4,12(r3)
   19bb4:	e0ffff17 	ldw	r3,-4(fp)
   19bb8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   19bbc:	e0bff917 	ldw	r2,-28(fp)
   19bc0:	1080058b 	ldhu	r2,22(r2)
   19bc4:	10800044 	addi	r2,r2,1
   19bc8:	1007883a 	mov	r3,r2
   19bcc:	e0bff917 	ldw	r2,-28(fp)
   19bd0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   19bd4:	e0bff917 	ldw	r2,-28(fp)
   19bd8:	10c00317 	ldw	r3,12(r2)
   19bdc:	e0bff917 	ldw	r2,-28(fp)
   19be0:	10800217 	ldw	r2,8(r2)
   19be4:	1880041e 	bne	r3,r2,19bf8 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   19be8:	e0bff917 	ldw	r2,-28(fp)
   19bec:	10c00117 	ldw	r3,4(r2)
   19bf0:	e0bff917 	ldw	r2,-28(fp)
   19bf4:	10c00315 	stw	r3,12(r2)
   19bf8:	e0bff817 	ldw	r2,-32(fp)
   19bfc:	e0bffd15 	stw	r2,-12(fp)
   19c00:	e0bffd17 	ldw	r2,-12(fp)
   19c04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19c08:	0005883a 	mov	r2,zero
}
   19c0c:	e037883a 	mov	sp,fp
   19c10:	dfc00117 	ldw	ra,4(sp)
   19c14:	df000017 	ldw	fp,0(sp)
   19c18:	dec00204 	addi	sp,sp,8
   19c1c:	f800283a 	ret

00019c20 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   19c20:	defff604 	addi	sp,sp,-40
   19c24:	dfc00915 	stw	ra,36(sp)
   19c28:	df000815 	stw	fp,32(sp)
   19c2c:	df000804 	addi	fp,sp,32
   19c30:	e13ffe15 	stw	r4,-8(fp)
   19c34:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19c38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19c3c:	e0bffe17 	ldw	r2,-8(fp)
   19c40:	1000021e 	bne	r2,zero,19c4c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   19c44:	00800104 	movi	r2,4
   19c48:	00004c06 	br	19d7c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19c4c:	e0bffe17 	ldw	r2,-8(fp)
   19c50:	10800003 	ldbu	r2,0(r2)
   19c54:	10803fcc 	andi	r2,r2,255
   19c58:	108000a0 	cmpeqi	r2,r2,2
   19c5c:	1000021e 	bne	r2,zero,19c68 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   19c60:	00800044 	movi	r2,1
   19c64:	00004506 	br	19d7c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c68:	0005303a 	rdctl	r2,status
   19c6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c70:	e0fffa17 	ldw	r3,-24(fp)
   19c74:	00bfff84 	movi	r2,-2
   19c78:	1884703a 	and	r2,r3,r2
   19c7c:	1001703a 	wrctl	status,r2
  
  return context;
   19c80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19c84:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   19c88:	e0bffe17 	ldw	r2,-8(fp)
   19c8c:	10800283 	ldbu	r2,10(r2)
   19c90:	10803fcc 	andi	r2,r2,255
   19c94:	10000c26 	beq	r2,zero,19cc8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19c98:	e13ffe17 	ldw	r4,-8(fp)
   19c9c:	e17fff17 	ldw	r5,-4(fp)
   19ca0:	01800104 	movi	r6,4
   19ca4:	000f883a 	mov	r7,zero
   19ca8:	0015d780 	call	15d78 <OS_EventTaskRdy>
   19cac:	e0bff817 	ldw	r2,-32(fp)
   19cb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19cb4:	e0bffb17 	ldw	r2,-20(fp)
   19cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   19cbc:	00167900 	call	16790 <OS_Sched>
        return (OS_ERR_NONE);
   19cc0:	0005883a 	mov	r2,zero
   19cc4:	00002d06 	br	19d7c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   19cc8:	e0bffe17 	ldw	r2,-8(fp)
   19ccc:	10800117 	ldw	r2,4(r2)
   19cd0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   19cd4:	e0bff917 	ldw	r2,-28(fp)
   19cd8:	10c0058b 	ldhu	r3,22(r2)
   19cdc:	e0bff917 	ldw	r2,-28(fp)
   19ce0:	1080050b 	ldhu	r2,20(r2)
   19ce4:	18ffffcc 	andi	r3,r3,65535
   19ce8:	10bfffcc 	andi	r2,r2,65535
   19cec:	18800636 	bltu	r3,r2,19d08 <OSQPostFront+0xe8>
   19cf0:	e0bff817 	ldw	r2,-32(fp)
   19cf4:	e0bffc15 	stw	r2,-16(fp)
   19cf8:	e0bffc17 	ldw	r2,-16(fp)
   19cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19d00:	00800784 	movi	r2,30
   19d04:	00001d06 	br	19d7c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   19d08:	e0bff917 	ldw	r2,-28(fp)
   19d0c:	10c00417 	ldw	r3,16(r2)
   19d10:	e0bff917 	ldw	r2,-28(fp)
   19d14:	10800117 	ldw	r2,4(r2)
   19d18:	1880041e 	bne	r3,r2,19d2c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   19d1c:	e0bff917 	ldw	r2,-28(fp)
   19d20:	10c00217 	ldw	r3,8(r2)
   19d24:	e0bff917 	ldw	r2,-28(fp)
   19d28:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   19d2c:	e0bff917 	ldw	r2,-28(fp)
   19d30:	10800417 	ldw	r2,16(r2)
   19d34:	10ffff04 	addi	r3,r2,-4
   19d38:	e0bff917 	ldw	r2,-28(fp)
   19d3c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   19d40:	e0bff917 	ldw	r2,-28(fp)
   19d44:	10800417 	ldw	r2,16(r2)
   19d48:	e0ffff17 	ldw	r3,-4(fp)
   19d4c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   19d50:	e0bff917 	ldw	r2,-28(fp)
   19d54:	1080058b 	ldhu	r2,22(r2)
   19d58:	10800044 	addi	r2,r2,1
   19d5c:	1007883a 	mov	r3,r2
   19d60:	e0bff917 	ldw	r2,-28(fp)
   19d64:	10c0058d 	sth	r3,22(r2)
   19d68:	e0bff817 	ldw	r2,-32(fp)
   19d6c:	e0bffd15 	stw	r2,-12(fp)
   19d70:	e0bffd17 	ldw	r2,-12(fp)
   19d74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19d78:	0005883a 	mov	r2,zero
}
   19d7c:	e037883a 	mov	sp,fp
   19d80:	dfc00117 	ldw	ra,4(sp)
   19d84:	df000017 	ldw	fp,0(sp)
   19d88:	dec00204 	addi	sp,sp,8
   19d8c:	f800283a 	ret

00019d90 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   19d90:	defff504 	addi	sp,sp,-44
   19d94:	dfc00a15 	stw	ra,40(sp)
   19d98:	df000915 	stw	fp,36(sp)
   19d9c:	df000904 	addi	fp,sp,36
   19da0:	e13ffd15 	stw	r4,-12(fp)
   19da4:	e17ffe15 	stw	r5,-8(fp)
   19da8:	3005883a 	mov	r2,r6
   19dac:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19db0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19db4:	e0bffd17 	ldw	r2,-12(fp)
   19db8:	1000021e 	bne	r2,zero,19dc4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   19dbc:	00800104 	movi	r2,4
   19dc0:	00007106 	br	19f88 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19dc4:	e0bffd17 	ldw	r2,-12(fp)
   19dc8:	10800003 	ldbu	r2,0(r2)
   19dcc:	10803fcc 	andi	r2,r2,255
   19dd0:	108000a0 	cmpeqi	r2,r2,2
   19dd4:	1000021e 	bne	r2,zero,19de0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   19dd8:	00800044 	movi	r2,1
   19ddc:	00006a06 	br	19f88 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19de0:	0005303a 	rdctl	r2,status
   19de4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19de8:	e0fff917 	ldw	r3,-28(fp)
   19dec:	00bfff84 	movi	r2,-2
   19df0:	1884703a 	and	r2,r3,r2
   19df4:	1001703a 	wrctl	status,r2
  
  return context;
   19df8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   19dfc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   19e00:	e0bffd17 	ldw	r2,-12(fp)
   19e04:	10800283 	ldbu	r2,10(r2)
   19e08:	10803fcc 	andi	r2,r2,255
   19e0c:	10001d26 	beq	r2,zero,19e84 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   19e10:	e0bfff03 	ldbu	r2,-4(fp)
   19e14:	1080004c 	andi	r2,r2,1
   19e18:	10000b26 	beq	r2,zero,19e48 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   19e1c:	00000506 	br	19e34 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19e20:	e13ffd17 	ldw	r4,-12(fp)
   19e24:	e17ffe17 	ldw	r5,-8(fp)
   19e28:	01800104 	movi	r6,4
   19e2c:	000f883a 	mov	r7,zero
   19e30:	0015d780 	call	15d78 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   19e34:	e0bffd17 	ldw	r2,-12(fp)
   19e38:	10800283 	ldbu	r2,10(r2)
   19e3c:	10803fcc 	andi	r2,r2,255
   19e40:	103ff71e 	bne	r2,zero,19e20 <__alt_mem_Flash_flash_data+0xf4019e20>
   19e44:	00000506 	br	19e5c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19e48:	e13ffd17 	ldw	r4,-12(fp)
   19e4c:	e17ffe17 	ldw	r5,-8(fp)
   19e50:	01800104 	movi	r6,4
   19e54:	000f883a 	mov	r7,zero
   19e58:	0015d780 	call	15d78 <OS_EventTaskRdy>
   19e5c:	e0bff717 	ldw	r2,-36(fp)
   19e60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e64:	e0bffa17 	ldw	r2,-24(fp)
   19e68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   19e6c:	e0bfff03 	ldbu	r2,-4(fp)
   19e70:	1080010c 	andi	r2,r2,4
   19e74:	1000011e 	bne	r2,zero,19e7c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   19e78:	00167900 	call	16790 <OS_Sched>
        }
        return (OS_ERR_NONE);
   19e7c:	0005883a 	mov	r2,zero
   19e80:	00004106 	br	19f88 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   19e84:	e0bffd17 	ldw	r2,-12(fp)
   19e88:	10800117 	ldw	r2,4(r2)
   19e8c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   19e90:	e0bff817 	ldw	r2,-32(fp)
   19e94:	10c0058b 	ldhu	r3,22(r2)
   19e98:	e0bff817 	ldw	r2,-32(fp)
   19e9c:	1080050b 	ldhu	r2,20(r2)
   19ea0:	18ffffcc 	andi	r3,r3,65535
   19ea4:	10bfffcc 	andi	r2,r2,65535
   19ea8:	18800636 	bltu	r3,r2,19ec4 <OSQPostOpt+0x134>
   19eac:	e0bff717 	ldw	r2,-36(fp)
   19eb0:	e0bffb15 	stw	r2,-20(fp)
   19eb4:	e0bffb17 	ldw	r2,-20(fp)
   19eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19ebc:	00800784 	movi	r2,30
   19ec0:	00003106 	br	19f88 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   19ec4:	e0bfff03 	ldbu	r2,-4(fp)
   19ec8:	1080008c 	andi	r2,r2,2
   19ecc:	10001326 	beq	r2,zero,19f1c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   19ed0:	e0bff817 	ldw	r2,-32(fp)
   19ed4:	10c00417 	ldw	r3,16(r2)
   19ed8:	e0bff817 	ldw	r2,-32(fp)
   19edc:	10800117 	ldw	r2,4(r2)
   19ee0:	1880041e 	bne	r3,r2,19ef4 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   19ee4:	e0bff817 	ldw	r2,-32(fp)
   19ee8:	10c00217 	ldw	r3,8(r2)
   19eec:	e0bff817 	ldw	r2,-32(fp)
   19ef0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   19ef4:	e0bff817 	ldw	r2,-32(fp)
   19ef8:	10800417 	ldw	r2,16(r2)
   19efc:	10ffff04 	addi	r3,r2,-4
   19f00:	e0bff817 	ldw	r2,-32(fp)
   19f04:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   19f08:	e0bff817 	ldw	r2,-32(fp)
   19f0c:	10800417 	ldw	r2,16(r2)
   19f10:	e0fffe17 	ldw	r3,-8(fp)
   19f14:	10c00015 	stw	r3,0(r2)
   19f18:	00001006 	br	19f5c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   19f1c:	e0bff817 	ldw	r2,-32(fp)
   19f20:	10800317 	ldw	r2,12(r2)
   19f24:	11000104 	addi	r4,r2,4
   19f28:	e0fff817 	ldw	r3,-32(fp)
   19f2c:	19000315 	stw	r4,12(r3)
   19f30:	e0fffe17 	ldw	r3,-8(fp)
   19f34:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   19f38:	e0bff817 	ldw	r2,-32(fp)
   19f3c:	10c00317 	ldw	r3,12(r2)
   19f40:	e0bff817 	ldw	r2,-32(fp)
   19f44:	10800217 	ldw	r2,8(r2)
   19f48:	1880041e 	bne	r3,r2,19f5c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   19f4c:	e0bff817 	ldw	r2,-32(fp)
   19f50:	10c00117 	ldw	r3,4(r2)
   19f54:	e0bff817 	ldw	r2,-32(fp)
   19f58:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   19f5c:	e0bff817 	ldw	r2,-32(fp)
   19f60:	1080058b 	ldhu	r2,22(r2)
   19f64:	10800044 	addi	r2,r2,1
   19f68:	1007883a 	mov	r3,r2
   19f6c:	e0bff817 	ldw	r2,-32(fp)
   19f70:	10c0058d 	sth	r3,22(r2)
   19f74:	e0bff717 	ldw	r2,-36(fp)
   19f78:	e0bffc15 	stw	r2,-16(fp)
   19f7c:	e0bffc17 	ldw	r2,-16(fp)
   19f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19f84:	0005883a 	mov	r2,zero
}
   19f88:	e037883a 	mov	sp,fp
   19f8c:	dfc00117 	ldw	ra,4(sp)
   19f90:	df000017 	ldw	fp,0(sp)
   19f94:	dec00204 	addi	sp,sp,8
   19f98:	f800283a 	ret

00019f9c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   19f9c:	defff604 	addi	sp,sp,-40
   19fa0:	df000915 	stw	fp,36(sp)
   19fa4:	df000904 	addi	fp,sp,36
   19fa8:	e13ffe15 	stw	r4,-8(fp)
   19fac:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19fb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19fb4:	e0bffe17 	ldw	r2,-8(fp)
   19fb8:	1000021e 	bne	r2,zero,19fc4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   19fbc:	00800104 	movi	r2,4
   19fc0:	00004906 	br	1a0e8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   19fc4:	e0bfff17 	ldw	r2,-4(fp)
   19fc8:	1000021e 	bne	r2,zero,19fd4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   19fcc:	00800244 	movi	r2,9
   19fd0:	00004506 	br	1a0e8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19fd4:	e0bffe17 	ldw	r2,-8(fp)
   19fd8:	10800003 	ldbu	r2,0(r2)
   19fdc:	10803fcc 	andi	r2,r2,255
   19fe0:	108000a0 	cmpeqi	r2,r2,2
   19fe4:	1000021e 	bne	r2,zero,19ff0 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   19fe8:	00800044 	movi	r2,1
   19fec:	00003e06 	br	1a0e8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ff0:	0005303a 	rdctl	r2,status
   19ff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ff8:	e0fffc17 	ldw	r3,-16(fp)
   19ffc:	00bfff84 	movi	r2,-2
   1a000:	1884703a 	and	r2,r3,r2
   1a004:	1001703a 	wrctl	status,r2
  
  return context;
   1a008:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a00c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1a010:	e0bffe17 	ldw	r2,-8(fp)
   1a014:	10c00283 	ldbu	r3,10(r2)
   1a018:	e0bfff17 	ldw	r2,-4(fp)
   1a01c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1a020:	e0bffe17 	ldw	r2,-8(fp)
   1a024:	108002c4 	addi	r2,r2,11
   1a028:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1a02c:	e0bfff17 	ldw	r2,-4(fp)
   1a030:	10800204 	addi	r2,r2,8
   1a034:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a038:	e03ff705 	stb	zero,-36(fp)
   1a03c:	00000b06 	br	1a06c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1a040:	e0bff917 	ldw	r2,-28(fp)
   1a044:	10c00044 	addi	r3,r2,1
   1a048:	e0fff915 	stw	r3,-28(fp)
   1a04c:	e0fff817 	ldw	r3,-32(fp)
   1a050:	19000044 	addi	r4,r3,1
   1a054:	e13ff815 	stw	r4,-32(fp)
   1a058:	18c00003 	ldbu	r3,0(r3)
   1a05c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a060:	e0bff703 	ldbu	r2,-36(fp)
   1a064:	10800044 	addi	r2,r2,1
   1a068:	e0bff705 	stb	r2,-36(fp)
   1a06c:	e0bff703 	ldbu	r2,-36(fp)
   1a070:	108000f0 	cmpltui	r2,r2,3
   1a074:	103ff21e 	bne	r2,zero,1a040 <__alt_mem_Flash_flash_data+0xf401a040>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1a078:	e0bffe17 	ldw	r2,-8(fp)
   1a07c:	10800117 	ldw	r2,4(r2)
   1a080:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   1a084:	e0bffb17 	ldw	r2,-20(fp)
   1a088:	1080058b 	ldhu	r2,22(r2)
   1a08c:	10bfffcc 	andi	r2,r2,65535
   1a090:	10000626 	beq	r2,zero,1a0ac <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1a094:	e0bffb17 	ldw	r2,-20(fp)
   1a098:	10800417 	ldw	r2,16(r2)
   1a09c:	10c00017 	ldw	r3,0(r2)
   1a0a0:	e0bfff17 	ldw	r2,-4(fp)
   1a0a4:	10c00015 	stw	r3,0(r2)
   1a0a8:	00000206 	br	1a0b4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1a0ac:	e0bfff17 	ldw	r2,-4(fp)
   1a0b0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1a0b4:	e0bffb17 	ldw	r2,-20(fp)
   1a0b8:	10c0058b 	ldhu	r3,22(r2)
   1a0bc:	e0bfff17 	ldw	r2,-4(fp)
   1a0c0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1a0c4:	e0bffb17 	ldw	r2,-20(fp)
   1a0c8:	10c0050b 	ldhu	r3,20(r2)
   1a0cc:	e0bfff17 	ldw	r2,-4(fp)
   1a0d0:	10c0018d 	sth	r3,6(r2)
   1a0d4:	e0bffa17 	ldw	r2,-24(fp)
   1a0d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a0dc:	e0bffd17 	ldw	r2,-12(fp)
   1a0e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a0e4:	0005883a 	mov	r2,zero
}
   1a0e8:	e037883a 	mov	sp,fp
   1a0ec:	df000017 	ldw	fp,0(sp)
   1a0f0:	dec00104 	addi	sp,sp,4
   1a0f4:	f800283a 	ret

0001a0f8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1a0f8:	defffb04 	addi	sp,sp,-20
   1a0fc:	dfc00415 	stw	ra,16(sp)
   1a100:	df000315 	stw	fp,12(sp)
   1a104:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1a108:	010000f4 	movhi	r4,3
   1a10c:	2129e904 	addi	r4,r4,-22620
   1a110:	01407804 	movi	r5,480
   1a114:	00166dc0 	call	166dc <OS_MemClr>
    pq1 = &OSQTbl[0];
   1a118:	008000f4 	movhi	r2,3
   1a11c:	10a9e904 	addi	r2,r2,-22620
   1a120:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1a124:	008000f4 	movhi	r2,3
   1a128:	10a9ef04 	addi	r2,r2,-22596
   1a12c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a130:	e03ffd0d 	sth	zero,-12(fp)
   1a134:	00000c06 	br	1a168 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1a138:	e0bffe17 	ldw	r2,-8(fp)
   1a13c:	e0ffff17 	ldw	r3,-4(fp)
   1a140:	10c00015 	stw	r3,0(r2)
        pq1++;
   1a144:	e0bffe17 	ldw	r2,-8(fp)
   1a148:	10800604 	addi	r2,r2,24
   1a14c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1a150:	e0bfff17 	ldw	r2,-4(fp)
   1a154:	10800604 	addi	r2,r2,24
   1a158:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a15c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a160:	10800044 	addi	r2,r2,1
   1a164:	e0bffd0d 	sth	r2,-12(fp)
   1a168:	e0bffd0b 	ldhu	r2,-12(fp)
   1a16c:	108004f0 	cmpltui	r2,r2,19
   1a170:	103ff11e 	bne	r2,zero,1a138 <__alt_mem_Flash_flash_data+0xf401a138>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1a174:	e0bffe17 	ldw	r2,-8(fp)
   1a178:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1a17c:	008000b4 	movhi	r2,2
   1a180:	1093ea04 	addi	r2,r2,20392
   1a184:	00c000f4 	movhi	r3,3
   1a188:	18e9e904 	addi	r3,r3,-22620
   1a18c:	10c00015 	stw	r3,0(r2)
#endif
}
   1a190:	e037883a 	mov	sp,fp
   1a194:	dfc00117 	ldw	ra,4(sp)
   1a198:	df000017 	ldw	fp,0(sp)
   1a19c:	dec00204 	addi	sp,sp,8
   1a1a0:	f800283a 	ret

0001a1a4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1a1a4:	defffa04 	addi	sp,sp,-24
   1a1a8:	df000515 	stw	fp,20(sp)
   1a1ac:	df000504 	addi	fp,sp,20
   1a1b0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a1b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a1b8:	e0bfff17 	ldw	r2,-4(fp)
   1a1bc:	1000021e 	bne	r2,zero,1a1c8 <OSSemAccept+0x24>
        return (0);
   1a1c0:	0005883a 	mov	r2,zero
   1a1c4:	00001f06 	br	1a244 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a1c8:	e0bfff17 	ldw	r2,-4(fp)
   1a1cc:	10800003 	ldbu	r2,0(r2)
   1a1d0:	10803fcc 	andi	r2,r2,255
   1a1d4:	108000e0 	cmpeqi	r2,r2,3
   1a1d8:	1000021e 	bne	r2,zero,1a1e4 <OSSemAccept+0x40>
        return (0);
   1a1dc:	0005883a 	mov	r2,zero
   1a1e0:	00001806 	br	1a244 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1e4:	0005303a 	rdctl	r2,status
   1a1e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a1ec:	e0fffd17 	ldw	r3,-12(fp)
   1a1f0:	00bfff84 	movi	r2,-2
   1a1f4:	1884703a 	and	r2,r3,r2
   1a1f8:	1001703a 	wrctl	status,r2
  
  return context;
   1a1fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a200:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1a204:	e0bfff17 	ldw	r2,-4(fp)
   1a208:	1080020b 	ldhu	r2,8(r2)
   1a20c:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1a210:	e0bffc0b 	ldhu	r2,-16(fp)
   1a214:	10000626 	beq	r2,zero,1a230 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1a218:	e0bfff17 	ldw	r2,-4(fp)
   1a21c:	1080020b 	ldhu	r2,8(r2)
   1a220:	10bfffc4 	addi	r2,r2,-1
   1a224:	1007883a 	mov	r3,r2
   1a228:	e0bfff17 	ldw	r2,-4(fp)
   1a22c:	10c0020d 	sth	r3,8(r2)
   1a230:	e0bffb17 	ldw	r2,-20(fp)
   1a234:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a238:	e0bffe17 	ldw	r2,-8(fp)
   1a23c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1a240:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1a244:	e037883a 	mov	sp,fp
   1a248:	df000017 	ldw	fp,0(sp)
   1a24c:	dec00104 	addi	sp,sp,4
   1a250:	f800283a 	ret

0001a254 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1a254:	defff904 	addi	sp,sp,-28
   1a258:	dfc00615 	stw	ra,24(sp)
   1a25c:	df000515 	stw	fp,20(sp)
   1a260:	df000504 	addi	fp,sp,20
   1a264:	2005883a 	mov	r2,r4
   1a268:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a26c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a270:	008000b4 	movhi	r2,2
   1a274:	1093ed04 	addi	r2,r2,20404
   1a278:	10800003 	ldbu	r2,0(r2)
   1a27c:	10803fcc 	andi	r2,r2,255
   1a280:	10000226 	beq	r2,zero,1a28c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1a284:	0005883a 	mov	r2,zero
   1a288:	00002d06 	br	1a340 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a28c:	0005303a 	rdctl	r2,status
   1a290:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a294:	e0fffd17 	ldw	r3,-12(fp)
   1a298:	00bfff84 	movi	r2,-2
   1a29c:	1884703a 	and	r2,r3,r2
   1a2a0:	1001703a 	wrctl	status,r2
  
  return context;
   1a2a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a2a8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1a2ac:	008000b4 	movhi	r2,2
   1a2b0:	1093ec04 	addi	r2,r2,20400
   1a2b4:	10800017 	ldw	r2,0(r2)
   1a2b8:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1a2bc:	008000b4 	movhi	r2,2
   1a2c0:	1093ec04 	addi	r2,r2,20400
   1a2c4:	10800017 	ldw	r2,0(r2)
   1a2c8:	10000726 	beq	r2,zero,1a2e8 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1a2cc:	008000b4 	movhi	r2,2
   1a2d0:	1093ec04 	addi	r2,r2,20400
   1a2d4:	10800017 	ldw	r2,0(r2)
   1a2d8:	10c00117 	ldw	r3,4(r2)
   1a2dc:	008000b4 	movhi	r2,2
   1a2e0:	1093ec04 	addi	r2,r2,20400
   1a2e4:	10c00015 	stw	r3,0(r2)
   1a2e8:	e0bffb17 	ldw	r2,-20(fp)
   1a2ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2f0:	e0bffe17 	ldw	r2,-8(fp)
   1a2f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1a2f8:	e0bffc17 	ldw	r2,-16(fp)
   1a2fc:	10000f26 	beq	r2,zero,1a33c <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1a300:	e0bffc17 	ldw	r2,-16(fp)
   1a304:	00c000c4 	movi	r3,3
   1a308:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1a30c:	e0bffc17 	ldw	r2,-16(fp)
   1a310:	e0ffff0b 	ldhu	r3,-4(fp)
   1a314:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1a318:	e0bffc17 	ldw	r2,-16(fp)
   1a31c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1a320:	e0bffc17 	ldw	r2,-16(fp)
   1a324:	00c00fc4 	movi	r3,63
   1a328:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1a32c:	e0bffc17 	ldw	r2,-16(fp)
   1a330:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1a334:	e13ffc17 	ldw	r4,-16(fp)
   1a338:	00163180 	call	16318 <OS_EventWaitListInit>
    }
    return (pevent);
   1a33c:	e0bffc17 	ldw	r2,-16(fp)
}
   1a340:	e037883a 	mov	sp,fp
   1a344:	dfc00117 	ldw	ra,4(sp)
   1a348:	df000017 	ldw	fp,0(sp)
   1a34c:	dec00204 	addi	sp,sp,8
   1a350:	f800283a 	ret

0001a354 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1a354:	defff304 	addi	sp,sp,-52
   1a358:	dfc00c15 	stw	ra,48(sp)
   1a35c:	df000b15 	stw	fp,44(sp)
   1a360:	df000b04 	addi	fp,sp,44
   1a364:	e13ffd15 	stw	r4,-12(fp)
   1a368:	2805883a 	mov	r2,r5
   1a36c:	e1bfff15 	stw	r6,-4(fp)
   1a370:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a374:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a378:	e0bfff17 	ldw	r2,-4(fp)
   1a37c:	1000021e 	bne	r2,zero,1a388 <OSSemDel+0x34>
        return (pevent);
   1a380:	e0bffd17 	ldw	r2,-12(fp)
   1a384:	00008806 	br	1a5a8 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1a388:	e0bffd17 	ldw	r2,-12(fp)
   1a38c:	1000051e 	bne	r2,zero,1a3a4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1a390:	e0bfff17 	ldw	r2,-4(fp)
   1a394:	00c00104 	movi	r3,4
   1a398:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a39c:	e0bffd17 	ldw	r2,-12(fp)
   1a3a0:	00008106 	br	1a5a8 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1a3a4:	e0bffd17 	ldw	r2,-12(fp)
   1a3a8:	10800003 	ldbu	r2,0(r2)
   1a3ac:	10803fcc 	andi	r2,r2,255
   1a3b0:	108000e0 	cmpeqi	r2,r2,3
   1a3b4:	1000051e 	bne	r2,zero,1a3cc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1a3b8:	e0bfff17 	ldw	r2,-4(fp)
   1a3bc:	00c00044 	movi	r3,1
   1a3c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a3c4:	e0bffd17 	ldw	r2,-12(fp)
   1a3c8:	00007706 	br	1a5a8 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a3cc:	008000b4 	movhi	r2,2
   1a3d0:	1093ed04 	addi	r2,r2,20404
   1a3d4:	10800003 	ldbu	r2,0(r2)
   1a3d8:	10803fcc 	andi	r2,r2,255
   1a3dc:	10000526 	beq	r2,zero,1a3f4 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1a3e0:	e0bfff17 	ldw	r2,-4(fp)
   1a3e4:	00c003c4 	movi	r3,15
   1a3e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a3ec:	e0bffd17 	ldw	r2,-12(fp)
   1a3f0:	00006d06 	br	1a5a8 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a3f4:	0005303a 	rdctl	r2,status
   1a3f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a3fc:	e0fff817 	ldw	r3,-32(fp)
   1a400:	00bfff84 	movi	r2,-2
   1a404:	1884703a 	and	r2,r3,r2
   1a408:	1001703a 	wrctl	status,r2
  
  return context;
   1a40c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1a410:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1a414:	e0bffd17 	ldw	r2,-12(fp)
   1a418:	10800283 	ldbu	r2,10(r2)
   1a41c:	10803fcc 	andi	r2,r2,255
   1a420:	10000326 	beq	r2,zero,1a430 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1a424:	00800044 	movi	r2,1
   1a428:	e0bff505 	stb	r2,-44(fp)
   1a42c:	00000106 	br	1a434 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1a430:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1a434:	e0bffe03 	ldbu	r2,-8(fp)
   1a438:	10000326 	beq	r2,zero,1a448 <OSSemDel+0xf4>
   1a43c:	10800060 	cmpeqi	r2,r2,1
   1a440:	10002c1e 	bne	r2,zero,1a4f4 <OSSemDel+0x1a0>
   1a444:	00004d06 	br	1a57c <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1a448:	e0bff503 	ldbu	r2,-44(fp)
   1a44c:	10001a1e 	bne	r2,zero,1a4b8 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1a450:	e0bffd17 	ldw	r2,-12(fp)
   1a454:	00c00fc4 	movi	r3,63
   1a458:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1a45c:	e0bffd17 	ldw	r2,-12(fp)
   1a460:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1a464:	e0bffd17 	ldw	r2,-12(fp)
   1a468:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1a46c:	008000b4 	movhi	r2,2
   1a470:	1093ec04 	addi	r2,r2,20400
   1a474:	10c00017 	ldw	r3,0(r2)
   1a478:	e0bffd17 	ldw	r2,-12(fp)
   1a47c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1a480:	e0bffd17 	ldw	r2,-12(fp)
   1a484:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1a488:	008000b4 	movhi	r2,2
   1a48c:	1093ec04 	addi	r2,r2,20400
   1a490:	e0fffd17 	ldw	r3,-12(fp)
   1a494:	10c00015 	stw	r3,0(r2)
   1a498:	e0bff717 	ldw	r2,-36(fp)
   1a49c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4a0:	e0bff917 	ldw	r2,-28(fp)
   1a4a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1a4a8:	e0bfff17 	ldw	r2,-4(fp)
   1a4ac:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1a4b0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1a4b4:	00003b06 	br	1a5a4 <OSSemDel+0x250>
   1a4b8:	e0bff717 	ldw	r2,-36(fp)
   1a4bc:	e0bffa15 	stw	r2,-24(fp)
   1a4c0:	e0bffa17 	ldw	r2,-24(fp)
   1a4c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1a4c8:	e0bfff17 	ldw	r2,-4(fp)
   1a4cc:	00c01244 	movi	r3,73
   1a4d0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1a4d4:	e0bffd17 	ldw	r2,-12(fp)
   1a4d8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1a4dc:	00003106 	br	1a5a4 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1a4e0:	e13ffd17 	ldw	r4,-12(fp)
   1a4e4:	000b883a 	mov	r5,zero
   1a4e8:	01800044 	movi	r6,1
   1a4ec:	000f883a 	mov	r7,zero
   1a4f0:	0015d780 	call	15d78 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1a4f4:	e0bffd17 	ldw	r2,-12(fp)
   1a4f8:	10800283 	ldbu	r2,10(r2)
   1a4fc:	10803fcc 	andi	r2,r2,255
   1a500:	103ff71e 	bne	r2,zero,1a4e0 <__alt_mem_Flash_flash_data+0xf401a4e0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1a504:	e0bffd17 	ldw	r2,-12(fp)
   1a508:	00c00fc4 	movi	r3,63
   1a50c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1a510:	e0bffd17 	ldw	r2,-12(fp)
   1a514:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1a518:	e0bffd17 	ldw	r2,-12(fp)
   1a51c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1a520:	008000b4 	movhi	r2,2
   1a524:	1093ec04 	addi	r2,r2,20400
   1a528:	10c00017 	ldw	r3,0(r2)
   1a52c:	e0bffd17 	ldw	r2,-12(fp)
   1a530:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1a534:	e0bffd17 	ldw	r2,-12(fp)
   1a538:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1a53c:	008000b4 	movhi	r2,2
   1a540:	1093ec04 	addi	r2,r2,20400
   1a544:	e0fffd17 	ldw	r3,-12(fp)
   1a548:	10c00015 	stw	r3,0(r2)
   1a54c:	e0bff717 	ldw	r2,-36(fp)
   1a550:	e0bffb15 	stw	r2,-20(fp)
   1a554:	e0bffb17 	ldw	r2,-20(fp)
   1a558:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1a55c:	e0bff503 	ldbu	r2,-44(fp)
   1a560:	10800058 	cmpnei	r2,r2,1
   1a564:	1000011e 	bne	r2,zero,1a56c <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1a568:	00167900 	call	16790 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1a56c:	e0bfff17 	ldw	r2,-4(fp)
   1a570:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1a574:	e03ff615 	stw	zero,-40(fp)
             break;
   1a578:	00000a06 	br	1a5a4 <OSSemDel+0x250>
   1a57c:	e0bff717 	ldw	r2,-36(fp)
   1a580:	e0bffc15 	stw	r2,-16(fp)
   1a584:	e0bffc17 	ldw	r2,-16(fp)
   1a588:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1a58c:	e0bfff17 	ldw	r2,-4(fp)
   1a590:	00c001c4 	movi	r3,7
   1a594:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1a598:	e0bffd17 	ldw	r2,-12(fp)
   1a59c:	e0bff615 	stw	r2,-40(fp)
             break;
   1a5a0:	0001883a 	nop
    }
    return (pevent_return);
   1a5a4:	e0bff617 	ldw	r2,-40(fp)
}
   1a5a8:	e037883a 	mov	sp,fp
   1a5ac:	dfc00117 	ldw	ra,4(sp)
   1a5b0:	df000017 	ldw	fp,0(sp)
   1a5b4:	dec00204 	addi	sp,sp,8
   1a5b8:	f800283a 	ret

0001a5bc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1a5bc:	defff504 	addi	sp,sp,-44
   1a5c0:	dfc00a15 	stw	ra,40(sp)
   1a5c4:	df000915 	stw	fp,36(sp)
   1a5c8:	df000904 	addi	fp,sp,36
   1a5cc:	e13ffd15 	stw	r4,-12(fp)
   1a5d0:	2805883a 	mov	r2,r5
   1a5d4:	e1bfff15 	stw	r6,-4(fp)
   1a5d8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a5dc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1a5e0:	e0bfff17 	ldw	r2,-4(fp)
   1a5e4:	1000011e 	bne	r2,zero,1a5ec <OSSemPend+0x30>
        return;
   1a5e8:	00008906 	br	1a810 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a5ec:	e0bffd17 	ldw	r2,-12(fp)
   1a5f0:	1000041e 	bne	r2,zero,1a604 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1a5f4:	e0bfff17 	ldw	r2,-4(fp)
   1a5f8:	00c00104 	movi	r3,4
   1a5fc:	10c00005 	stb	r3,0(r2)
        return;
   1a600:	00008306 	br	1a810 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a604:	e0bffd17 	ldw	r2,-12(fp)
   1a608:	10800003 	ldbu	r2,0(r2)
   1a60c:	10803fcc 	andi	r2,r2,255
   1a610:	108000e0 	cmpeqi	r2,r2,3
   1a614:	1000041e 	bne	r2,zero,1a628 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1a618:	e0bfff17 	ldw	r2,-4(fp)
   1a61c:	00c00044 	movi	r3,1
   1a620:	10c00005 	stb	r3,0(r2)
        return;
   1a624:	00007a06 	br	1a810 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1a628:	008000b4 	movhi	r2,2
   1a62c:	1093ed04 	addi	r2,r2,20404
   1a630:	10800003 	ldbu	r2,0(r2)
   1a634:	10803fcc 	andi	r2,r2,255
   1a638:	10000426 	beq	r2,zero,1a64c <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1a63c:	e0bfff17 	ldw	r2,-4(fp)
   1a640:	00c00084 	movi	r3,2
   1a644:	10c00005 	stb	r3,0(r2)
        return;
   1a648:	00007106 	br	1a810 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1a64c:	008000b4 	movhi	r2,2
   1a650:	1093df04 	addi	r2,r2,20348
   1a654:	10800003 	ldbu	r2,0(r2)
   1a658:	10803fcc 	andi	r2,r2,255
   1a65c:	10000426 	beq	r2,zero,1a670 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1a660:	e0bfff17 	ldw	r2,-4(fp)
   1a664:	00c00344 	movi	r3,13
   1a668:	10c00005 	stb	r3,0(r2)
        return;
   1a66c:	00006806 	br	1a810 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a670:	0005303a 	rdctl	r2,status
   1a674:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a678:	e0fff817 	ldw	r3,-32(fp)
   1a67c:	00bfff84 	movi	r2,-2
   1a680:	1884703a 	and	r2,r3,r2
   1a684:	1001703a 	wrctl	status,r2
  
  return context;
   1a688:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1a68c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1a690:	e0bffd17 	ldw	r2,-12(fp)
   1a694:	1080020b 	ldhu	r2,8(r2)
   1a698:	10bfffcc 	andi	r2,r2,65535
   1a69c:	10000d26 	beq	r2,zero,1a6d4 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1a6a0:	e0bffd17 	ldw	r2,-12(fp)
   1a6a4:	1080020b 	ldhu	r2,8(r2)
   1a6a8:	10bfffc4 	addi	r2,r2,-1
   1a6ac:	1007883a 	mov	r3,r2
   1a6b0:	e0bffd17 	ldw	r2,-12(fp)
   1a6b4:	10c0020d 	sth	r3,8(r2)
   1a6b8:	e0bff717 	ldw	r2,-36(fp)
   1a6bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6c0:	e0bff917 	ldw	r2,-28(fp)
   1a6c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1a6c8:	e0bfff17 	ldw	r2,-4(fp)
   1a6cc:	10000005 	stb	zero,0(r2)
        return;
   1a6d0:	00004f06 	br	1a810 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1a6d4:	008000b4 	movhi	r2,2
   1a6d8:	1093ee04 	addi	r2,r2,20408
   1a6dc:	10c00017 	ldw	r3,0(r2)
   1a6e0:	008000b4 	movhi	r2,2
   1a6e4:	1093ee04 	addi	r2,r2,20408
   1a6e8:	10800017 	ldw	r2,0(r2)
   1a6ec:	10800c03 	ldbu	r2,48(r2)
   1a6f0:	10800054 	ori	r2,r2,1
   1a6f4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1a6f8:	008000b4 	movhi	r2,2
   1a6fc:	1093ee04 	addi	r2,r2,20408
   1a700:	10800017 	ldw	r2,0(r2)
   1a704:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1a708:	008000b4 	movhi	r2,2
   1a70c:	1093ee04 	addi	r2,r2,20408
   1a710:	10800017 	ldw	r2,0(r2)
   1a714:	e0fffe0b 	ldhu	r3,-8(fp)
   1a718:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1a71c:	e13ffd17 	ldw	r4,-12(fp)
   1a720:	0015f100 	call	15f10 <OS_EventTaskWait>
   1a724:	e0bff717 	ldw	r2,-36(fp)
   1a728:	e0bffa15 	stw	r2,-24(fp)
   1a72c:	e0bffa17 	ldw	r2,-24(fp)
   1a730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1a734:	00167900 	call	16790 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a738:	0005303a 	rdctl	r2,status
   1a73c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a740:	e0fffb17 	ldw	r3,-20(fp)
   1a744:	00bfff84 	movi	r2,-2
   1a748:	1884703a 	and	r2,r3,r2
   1a74c:	1001703a 	wrctl	status,r2
  
  return context;
   1a750:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1a754:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1a758:	008000b4 	movhi	r2,2
   1a75c:	1093ee04 	addi	r2,r2,20408
   1a760:	10800017 	ldw	r2,0(r2)
   1a764:	10800c43 	ldbu	r2,49(r2)
   1a768:	10803fcc 	andi	r2,r2,255
   1a76c:	10000326 	beq	r2,zero,1a77c <OSSemPend+0x1c0>
   1a770:	108000a0 	cmpeqi	r2,r2,2
   1a774:	1000041e 	bne	r2,zero,1a788 <OSSemPend+0x1cc>
   1a778:	00000706 	br	1a798 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1a77c:	e0bfff17 	ldw	r2,-4(fp)
   1a780:	10000005 	stb	zero,0(r2)
             break;
   1a784:	00000e06 	br	1a7c0 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	00c00384 	movi	r3,14
   1a790:	10c00005 	stb	r3,0(r2)
             break;
   1a794:	00000a06 	br	1a7c0 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1a798:	008000b4 	movhi	r2,2
   1a79c:	1093ee04 	addi	r2,r2,20408
   1a7a0:	10800017 	ldw	r2,0(r2)
   1a7a4:	1009883a 	mov	r4,r2
   1a7a8:	e17ffd17 	ldw	r5,-12(fp)
   1a7ac:	00161680 	call	16168 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1a7b0:	e0bfff17 	ldw	r2,-4(fp)
   1a7b4:	00c00284 	movi	r3,10
   1a7b8:	10c00005 	stb	r3,0(r2)
             break;
   1a7bc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1a7c0:	008000b4 	movhi	r2,2
   1a7c4:	1093ee04 	addi	r2,r2,20408
   1a7c8:	10800017 	ldw	r2,0(r2)
   1a7cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1a7d0:	008000b4 	movhi	r2,2
   1a7d4:	1093ee04 	addi	r2,r2,20408
   1a7d8:	10800017 	ldw	r2,0(r2)
   1a7dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1a7e0:	008000b4 	movhi	r2,2
   1a7e4:	1093ee04 	addi	r2,r2,20408
   1a7e8:	10800017 	ldw	r2,0(r2)
   1a7ec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1a7f0:	008000b4 	movhi	r2,2
   1a7f4:	1093ee04 	addi	r2,r2,20408
   1a7f8:	10800017 	ldw	r2,0(r2)
   1a7fc:	10000815 	stw	zero,32(r2)
   1a800:	e0bff717 	ldw	r2,-36(fp)
   1a804:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a808:	e0bffc17 	ldw	r2,-16(fp)
   1a80c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1a810:	e037883a 	mov	sp,fp
   1a814:	dfc00117 	ldw	ra,4(sp)
   1a818:	df000017 	ldw	fp,0(sp)
   1a81c:	dec00204 	addi	sp,sp,8
   1a820:	f800283a 	ret

0001a824 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1a824:	defff604 	addi	sp,sp,-40
   1a828:	dfc00915 	stw	ra,36(sp)
   1a82c:	df000815 	stw	fp,32(sp)
   1a830:	df000804 	addi	fp,sp,32
   1a834:	e13ffd15 	stw	r4,-12(fp)
   1a838:	2805883a 	mov	r2,r5
   1a83c:	e1bfff15 	stw	r6,-4(fp)
   1a840:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a844:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1a848:	e0bfff17 	ldw	r2,-4(fp)
   1a84c:	1000021e 	bne	r2,zero,1a858 <OSSemPendAbort+0x34>
        return (0);
   1a850:	0005883a 	mov	r2,zero
   1a854:	00004906 	br	1a97c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a858:	e0bffd17 	ldw	r2,-12(fp)
   1a85c:	1000051e 	bne	r2,zero,1a874 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1a860:	e0bfff17 	ldw	r2,-4(fp)
   1a864:	00c00104 	movi	r3,4
   1a868:	10c00005 	stb	r3,0(r2)
        return (0);
   1a86c:	0005883a 	mov	r2,zero
   1a870:	00004206 	br	1a97c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a874:	e0bffd17 	ldw	r2,-12(fp)
   1a878:	10800003 	ldbu	r2,0(r2)
   1a87c:	10803fcc 	andi	r2,r2,255
   1a880:	108000e0 	cmpeqi	r2,r2,3
   1a884:	1000051e 	bne	r2,zero,1a89c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1a888:	e0bfff17 	ldw	r2,-4(fp)
   1a88c:	00c00044 	movi	r3,1
   1a890:	10c00005 	stb	r3,0(r2)
        return (0);
   1a894:	0005883a 	mov	r2,zero
   1a898:	00003806 	br	1a97c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a89c:	0005303a 	rdctl	r2,status
   1a8a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8a4:	e0fffa17 	ldw	r3,-24(fp)
   1a8a8:	00bfff84 	movi	r2,-2
   1a8ac:	1884703a 	and	r2,r3,r2
   1a8b0:	1001703a 	wrctl	status,r2
  
  return context;
   1a8b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a8b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1a8bc:	e0bffd17 	ldw	r2,-12(fp)
   1a8c0:	10800283 	ldbu	r2,10(r2)
   1a8c4:	10803fcc 	andi	r2,r2,255
   1a8c8:	10002526 	beq	r2,zero,1a960 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1a8cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1a8d0:	e0bffe03 	ldbu	r2,-8(fp)
   1a8d4:	10800060 	cmpeqi	r2,r2,1
   1a8d8:	10000e26 	beq	r2,zero,1a914 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1a8dc:	00000806 	br	1a900 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1a8e0:	e13ffd17 	ldw	r4,-12(fp)
   1a8e4:	000b883a 	mov	r5,zero
   1a8e8:	01800044 	movi	r6,1
   1a8ec:	01c00084 	movi	r7,2
   1a8f0:	0015d780 	call	15d78 <OS_EventTaskRdy>
                     nbr_tasks++;
   1a8f4:	e0bff803 	ldbu	r2,-32(fp)
   1a8f8:	10800044 	addi	r2,r2,1
   1a8fc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1a900:	e0bffd17 	ldw	r2,-12(fp)
   1a904:	10800283 	ldbu	r2,10(r2)
   1a908:	10803fcc 	andi	r2,r2,255
   1a90c:	103ff41e 	bne	r2,zero,1a8e0 <__alt_mem_Flash_flash_data+0xf401a8e0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1a910:	00000906 	br	1a938 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1a914:	e13ffd17 	ldw	r4,-12(fp)
   1a918:	000b883a 	mov	r5,zero
   1a91c:	01800044 	movi	r6,1
   1a920:	01c00084 	movi	r7,2
   1a924:	0015d780 	call	15d78 <OS_EventTaskRdy>
                 nbr_tasks++;
   1a928:	e0bff803 	ldbu	r2,-32(fp)
   1a92c:	10800044 	addi	r2,r2,1
   1a930:	e0bff805 	stb	r2,-32(fp)
                 break;
   1a934:	0001883a 	nop
   1a938:	e0bff917 	ldw	r2,-28(fp)
   1a93c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a940:	e0bffb17 	ldw	r2,-20(fp)
   1a944:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1a948:	00167900 	call	16790 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1a94c:	e0bfff17 	ldw	r2,-4(fp)
   1a950:	00c00384 	movi	r3,14
   1a954:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1a958:	e0bff803 	ldbu	r2,-32(fp)
   1a95c:	00000706 	br	1a97c <OSSemPendAbort+0x158>
   1a960:	e0bff917 	ldw	r2,-28(fp)
   1a964:	e0bffc15 	stw	r2,-16(fp)
   1a968:	e0bffc17 	ldw	r2,-16(fp)
   1a96c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a970:	e0bfff17 	ldw	r2,-4(fp)
   1a974:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1a978:	0005883a 	mov	r2,zero
}
   1a97c:	e037883a 	mov	sp,fp
   1a980:	dfc00117 	ldw	ra,4(sp)
   1a984:	df000017 	ldw	fp,0(sp)
   1a988:	dec00204 	addi	sp,sp,8
   1a98c:	f800283a 	ret

0001a990 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1a990:	defff804 	addi	sp,sp,-32
   1a994:	dfc00715 	stw	ra,28(sp)
   1a998:	df000615 	stw	fp,24(sp)
   1a99c:	df000604 	addi	fp,sp,24
   1a9a0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a9a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a9a8:	e0bfff17 	ldw	r2,-4(fp)
   1a9ac:	1000021e 	bne	r2,zero,1a9b8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a9b0:	00800104 	movi	r2,4
   1a9b4:	00003506 	br	1aa8c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a9b8:	e0bfff17 	ldw	r2,-4(fp)
   1a9bc:	10800003 	ldbu	r2,0(r2)
   1a9c0:	10803fcc 	andi	r2,r2,255
   1a9c4:	108000e0 	cmpeqi	r2,r2,3
   1a9c8:	1000021e 	bne	r2,zero,1a9d4 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1a9cc:	00800044 	movi	r2,1
   1a9d0:	00002e06 	br	1aa8c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a9d4:	0005303a 	rdctl	r2,status
   1a9d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9dc:	e0fffb17 	ldw	r3,-20(fp)
   1a9e0:	00bfff84 	movi	r2,-2
   1a9e4:	1884703a 	and	r2,r3,r2
   1a9e8:	1001703a 	wrctl	status,r2
  
  return context;
   1a9ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a9f0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1a9f4:	e0bfff17 	ldw	r2,-4(fp)
   1a9f8:	10800283 	ldbu	r2,10(r2)
   1a9fc:	10803fcc 	andi	r2,r2,255
   1aa00:	10000c26 	beq	r2,zero,1aa34 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1aa04:	e13fff17 	ldw	r4,-4(fp)
   1aa08:	000b883a 	mov	r5,zero
   1aa0c:	01800044 	movi	r6,1
   1aa10:	000f883a 	mov	r7,zero
   1aa14:	0015d780 	call	15d78 <OS_EventTaskRdy>
   1aa18:	e0bffa17 	ldw	r2,-24(fp)
   1aa1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa20:	e0bffc17 	ldw	r2,-16(fp)
   1aa24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1aa28:	00167900 	call	16790 <OS_Sched>
        return (OS_ERR_NONE);
   1aa2c:	0005883a 	mov	r2,zero
   1aa30:	00001606 	br	1aa8c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1aa34:	e0bfff17 	ldw	r2,-4(fp)
   1aa38:	1080020b 	ldhu	r2,8(r2)
   1aa3c:	10ffffcc 	andi	r3,r2,65535
   1aa40:	00bfffd4 	movui	r2,65535
   1aa44:	18800c26 	beq	r3,r2,1aa78 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1aa48:	e0bfff17 	ldw	r2,-4(fp)
   1aa4c:	1080020b 	ldhu	r2,8(r2)
   1aa50:	10800044 	addi	r2,r2,1
   1aa54:	1007883a 	mov	r3,r2
   1aa58:	e0bfff17 	ldw	r2,-4(fp)
   1aa5c:	10c0020d 	sth	r3,8(r2)
   1aa60:	e0bffa17 	ldw	r2,-24(fp)
   1aa64:	e0bffd15 	stw	r2,-12(fp)
   1aa68:	e0bffd17 	ldw	r2,-12(fp)
   1aa6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1aa70:	0005883a 	mov	r2,zero
   1aa74:	00000506 	br	1aa8c <OSSemPost+0xfc>
   1aa78:	e0bffa17 	ldw	r2,-24(fp)
   1aa7c:	e0bffe15 	stw	r2,-8(fp)
   1aa80:	e0bffe17 	ldw	r2,-8(fp)
   1aa84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1aa88:	00800c84 	movi	r2,50
}
   1aa8c:	e037883a 	mov	sp,fp
   1aa90:	dfc00117 	ldw	ra,4(sp)
   1aa94:	df000017 	ldw	fp,0(sp)
   1aa98:	dec00204 	addi	sp,sp,8
   1aa9c:	f800283a 	ret

0001aaa0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1aaa0:	defff704 	addi	sp,sp,-36
   1aaa4:	df000815 	stw	fp,32(sp)
   1aaa8:	df000804 	addi	fp,sp,32
   1aaac:	e13ffe15 	stw	r4,-8(fp)
   1aab0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1aab4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1aab8:	e0bffe17 	ldw	r2,-8(fp)
   1aabc:	1000021e 	bne	r2,zero,1aac8 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1aac0:	00800104 	movi	r2,4
   1aac4:	00003606 	br	1aba0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1aac8:	e0bfff17 	ldw	r2,-4(fp)
   1aacc:	1000021e 	bne	r2,zero,1aad8 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1aad0:	00800244 	movi	r2,9
   1aad4:	00003206 	br	1aba0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1aad8:	e0bffe17 	ldw	r2,-8(fp)
   1aadc:	10800003 	ldbu	r2,0(r2)
   1aae0:	10803fcc 	andi	r2,r2,255
   1aae4:	108000e0 	cmpeqi	r2,r2,3
   1aae8:	1000021e 	bne	r2,zero,1aaf4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1aaec:	00800044 	movi	r2,1
   1aaf0:	00002b06 	br	1aba0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aaf4:	0005303a 	rdctl	r2,status
   1aaf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aafc:	e0fffc17 	ldw	r3,-16(fp)
   1ab00:	00bfff84 	movi	r2,-2
   1ab04:	1884703a 	and	r2,r3,r2
   1ab08:	1001703a 	wrctl	status,r2
  
  return context;
   1ab0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1ab10:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1ab14:	e0bffe17 	ldw	r2,-8(fp)
   1ab18:	10c00283 	ldbu	r3,10(r2)
   1ab1c:	e0bfff17 	ldw	r2,-4(fp)
   1ab20:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1ab24:	e0bffe17 	ldw	r2,-8(fp)
   1ab28:	108002c4 	addi	r2,r2,11
   1ab2c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1ab30:	e0bfff17 	ldw	r2,-4(fp)
   1ab34:	10800084 	addi	r2,r2,2
   1ab38:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1ab3c:	e03ffa05 	stb	zero,-24(fp)
   1ab40:	00000b06 	br	1ab70 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1ab44:	e0bff917 	ldw	r2,-28(fp)
   1ab48:	10c00044 	addi	r3,r2,1
   1ab4c:	e0fff915 	stw	r3,-28(fp)
   1ab50:	e0fff817 	ldw	r3,-32(fp)
   1ab54:	19000044 	addi	r4,r3,1
   1ab58:	e13ff815 	stw	r4,-32(fp)
   1ab5c:	18c00003 	ldbu	r3,0(r3)
   1ab60:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1ab64:	e0bffa03 	ldbu	r2,-24(fp)
   1ab68:	10800044 	addi	r2,r2,1
   1ab6c:	e0bffa05 	stb	r2,-24(fp)
   1ab70:	e0bffa03 	ldbu	r2,-24(fp)
   1ab74:	108000f0 	cmpltui	r2,r2,3
   1ab78:	103ff21e 	bne	r2,zero,1ab44 <__alt_mem_Flash_flash_data+0xf401ab44>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1ab7c:	e0bffe17 	ldw	r2,-8(fp)
   1ab80:	10c0020b 	ldhu	r3,8(r2)
   1ab84:	e0bfff17 	ldw	r2,-4(fp)
   1ab88:	10c0000d 	sth	r3,0(r2)
   1ab8c:	e0bffb17 	ldw	r2,-20(fp)
   1ab90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab94:	e0bffd17 	ldw	r2,-12(fp)
   1ab98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ab9c:	0005883a 	mov	r2,zero
}
   1aba0:	e037883a 	mov	sp,fp
   1aba4:	df000017 	ldw	fp,0(sp)
   1aba8:	dec00104 	addi	sp,sp,4
   1abac:	f800283a 	ret

0001abb0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1abb0:	defff904 	addi	sp,sp,-28
   1abb4:	df000615 	stw	fp,24(sp)
   1abb8:	df000604 	addi	fp,sp,24
   1abbc:	e13ffd15 	stw	r4,-12(fp)
   1abc0:	2805883a 	mov	r2,r5
   1abc4:	e1bfff15 	stw	r6,-4(fp)
   1abc8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1abcc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1abd0:	e0bfff17 	ldw	r2,-4(fp)
   1abd4:	1000011e 	bne	r2,zero,1abdc <OSSemSet+0x2c>
        return;
   1abd8:	00003006 	br	1ac9c <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1abdc:	e0bffd17 	ldw	r2,-12(fp)
   1abe0:	1000041e 	bne	r2,zero,1abf4 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1abe4:	e0bfff17 	ldw	r2,-4(fp)
   1abe8:	00c00104 	movi	r3,4
   1abec:	10c00005 	stb	r3,0(r2)
        return;
   1abf0:	00002a06 	br	1ac9c <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1abf4:	e0bffd17 	ldw	r2,-12(fp)
   1abf8:	10800003 	ldbu	r2,0(r2)
   1abfc:	10803fcc 	andi	r2,r2,255
   1ac00:	108000e0 	cmpeqi	r2,r2,3
   1ac04:	1000041e 	bne	r2,zero,1ac18 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1ac08:	e0bfff17 	ldw	r2,-4(fp)
   1ac0c:	00c00044 	movi	r3,1
   1ac10:	10c00005 	stb	r3,0(r2)
        return;
   1ac14:	00002106 	br	1ac9c <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ac18:	0005303a 	rdctl	r2,status
   1ac1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ac20:	e0fffb17 	ldw	r3,-20(fp)
   1ac24:	00bfff84 	movi	r2,-2
   1ac28:	1884703a 	and	r2,r3,r2
   1ac2c:	1001703a 	wrctl	status,r2
  
  return context;
   1ac30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1ac34:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1ac38:	e0bfff17 	ldw	r2,-4(fp)
   1ac3c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1ac40:	e0bffd17 	ldw	r2,-12(fp)
   1ac44:	1080020b 	ldhu	r2,8(r2)
   1ac48:	10bfffcc 	andi	r2,r2,65535
   1ac4c:	10000426 	beq	r2,zero,1ac60 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1ac50:	e0bffd17 	ldw	r2,-12(fp)
   1ac54:	e0fffe0b 	ldhu	r3,-8(fp)
   1ac58:	10c0020d 	sth	r3,8(r2)
   1ac5c:	00000b06 	br	1ac8c <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1ac60:	e0bffd17 	ldw	r2,-12(fp)
   1ac64:	10800283 	ldbu	r2,10(r2)
   1ac68:	10803fcc 	andi	r2,r2,255
   1ac6c:	1000041e 	bne	r2,zero,1ac80 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1ac70:	e0bffd17 	ldw	r2,-12(fp)
   1ac74:	e0fffe0b 	ldhu	r3,-8(fp)
   1ac78:	10c0020d 	sth	r3,8(r2)
   1ac7c:	00000306 	br	1ac8c <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1ac80:	e0bfff17 	ldw	r2,-4(fp)
   1ac84:	00c01244 	movi	r3,73
   1ac88:	10c00005 	stb	r3,0(r2)
   1ac8c:	e0bffa17 	ldw	r2,-24(fp)
   1ac90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac94:	e0bffc17 	ldw	r2,-16(fp)
   1ac98:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1ac9c:	e037883a 	mov	sp,fp
   1aca0:	df000017 	ldw	fp,0(sp)
   1aca4:	dec00104 	addi	sp,sp,4
   1aca8:	f800283a 	ret

0001acac <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1acac:	defff104 	addi	sp,sp,-60
   1acb0:	dfc00e15 	stw	ra,56(sp)
   1acb4:	df000d15 	stw	fp,52(sp)
   1acb8:	df000d04 	addi	fp,sp,52
   1acbc:	2007883a 	mov	r3,r4
   1acc0:	2805883a 	mov	r2,r5
   1acc4:	e0fffe05 	stb	r3,-8(fp)
   1acc8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1accc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1acd0:	e0bffe03 	ldbu	r2,-8(fp)
   1acd4:	10800530 	cmpltui	r2,r2,20
   1acd8:	1000051e 	bne	r2,zero,1acf0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1acdc:	e0bffe03 	ldbu	r2,-8(fp)
   1ace0:	10803fe0 	cmpeqi	r2,r2,255
   1ace4:	1000021e 	bne	r2,zero,1acf0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1ace8:	00800a84 	movi	r2,42
   1acec:	00013a06 	br	1b1d8 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1acf0:	e0bfff03 	ldbu	r2,-4(fp)
   1acf4:	10800530 	cmpltui	r2,r2,20
   1acf8:	1000021e 	bne	r2,zero,1ad04 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1acfc:	00800a84 	movi	r2,42
   1ad00:	00013506 	br	1b1d8 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad04:	0005303a 	rdctl	r2,status
   1ad08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad0c:	e0fff917 	ldw	r3,-28(fp)
   1ad10:	00bfff84 	movi	r2,-2
   1ad14:	1884703a 	and	r2,r3,r2
   1ad18:	1001703a 	wrctl	status,r2
  
  return context;
   1ad1c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ad20:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1ad24:	e0ffff03 	ldbu	r3,-4(fp)
   1ad28:	008000f4 	movhi	r2,3
   1ad2c:	10b07504 	addi	r2,r2,-15916
   1ad30:	18c7883a 	add	r3,r3,r3
   1ad34:	18c7883a 	add	r3,r3,r3
   1ad38:	10c5883a 	add	r2,r2,r3
   1ad3c:	10800017 	ldw	r2,0(r2)
   1ad40:	10000626 	beq	r2,zero,1ad5c <OSTaskChangePrio+0xb0>
   1ad44:	e0bff517 	ldw	r2,-44(fp)
   1ad48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad4c:	e0bffa17 	ldw	r2,-24(fp)
   1ad50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1ad54:	00800a04 	movi	r2,40
   1ad58:	00011f06 	br	1b1d8 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1ad5c:	e0bffe03 	ldbu	r2,-8(fp)
   1ad60:	10803fd8 	cmpnei	r2,r2,255
   1ad64:	1000051e 	bne	r2,zero,1ad7c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1ad68:	008000b4 	movhi	r2,2
   1ad6c:	1093ee04 	addi	r2,r2,20408
   1ad70:	10800017 	ldw	r2,0(r2)
   1ad74:	10800c83 	ldbu	r2,50(r2)
   1ad78:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1ad7c:	e0fffe03 	ldbu	r3,-8(fp)
   1ad80:	008000f4 	movhi	r2,3
   1ad84:	10b07504 	addi	r2,r2,-15916
   1ad88:	18c7883a 	add	r3,r3,r3
   1ad8c:	18c7883a 	add	r3,r3,r3
   1ad90:	10c5883a 	add	r2,r2,r3
   1ad94:	10800017 	ldw	r2,0(r2)
   1ad98:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1ad9c:	e0bff617 	ldw	r2,-40(fp)
   1ada0:	1000061e 	bne	r2,zero,1adbc <OSTaskChangePrio+0x110>
   1ada4:	e0bff517 	ldw	r2,-44(fp)
   1ada8:	e0bffb15 	stw	r2,-20(fp)
   1adac:	e0bffb17 	ldw	r2,-20(fp)
   1adb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1adb4:	00800a44 	movi	r2,41
   1adb8:	00010706 	br	1b1d8 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1adbc:	e0bff617 	ldw	r2,-40(fp)
   1adc0:	10800058 	cmpnei	r2,r2,1
   1adc4:	1000061e 	bne	r2,zero,1ade0 <OSTaskChangePrio+0x134>
   1adc8:	e0bff517 	ldw	r2,-44(fp)
   1adcc:	e0bffc15 	stw	r2,-16(fp)
   1add0:	e0bffc17 	ldw	r2,-16(fp)
   1add4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1add8:	008010c4 	movi	r2,67
   1addc:	0000fe06 	br	1b1d8 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1ade0:	e0bfff03 	ldbu	r2,-4(fp)
   1ade4:	1004d0fa 	srli	r2,r2,3
   1ade8:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1adec:	e0bfff03 	ldbu	r2,-4(fp)
   1adf0:	108001cc 	andi	r2,r2,7
   1adf4:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1adf8:	e0bff703 	ldbu	r2,-36(fp)
   1adfc:	00c00044 	movi	r3,1
   1ae00:	1884983a 	sll	r2,r3,r2
   1ae04:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1ae08:	e0bff743 	ldbu	r2,-35(fp)
   1ae0c:	00c00044 	movi	r3,1
   1ae10:	1884983a 	sll	r2,r3,r2
   1ae14:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1ae18:	e0fffe03 	ldbu	r3,-8(fp)
   1ae1c:	008000f4 	movhi	r2,3
   1ae20:	10b07504 	addi	r2,r2,-15916
   1ae24:	18c7883a 	add	r3,r3,r3
   1ae28:	18c7883a 	add	r3,r3,r3
   1ae2c:	10c5883a 	add	r2,r2,r3
   1ae30:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1ae34:	e0ffff03 	ldbu	r3,-4(fp)
   1ae38:	008000f4 	movhi	r2,3
   1ae3c:	10b07504 	addi	r2,r2,-15916
   1ae40:	18c7883a 	add	r3,r3,r3
   1ae44:	18c7883a 	add	r3,r3,r3
   1ae48:	10c5883a 	add	r2,r2,r3
   1ae4c:	e0fff617 	ldw	r3,-40(fp)
   1ae50:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1ae54:	e0bff617 	ldw	r2,-40(fp)
   1ae58:	10800d03 	ldbu	r2,52(r2)
   1ae5c:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1ae60:	e0bff617 	ldw	r2,-40(fp)
   1ae64:	10800d83 	ldbu	r2,54(r2)
   1ae68:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1ae6c:	e0bff617 	ldw	r2,-40(fp)
   1ae70:	10800d43 	ldbu	r2,53(r2)
   1ae74:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1ae78:	e0fff803 	ldbu	r3,-32(fp)
   1ae7c:	008000b4 	movhi	r2,2
   1ae80:	1093eb44 	addi	r2,r2,20397
   1ae84:	10c5883a 	add	r2,r2,r3
   1ae88:	10c00003 	ldbu	r3,0(r2)
   1ae8c:	e0bff883 	ldbu	r2,-30(fp)
   1ae90:	1884703a 	and	r2,r3,r2
   1ae94:	10803fcc 	andi	r2,r2,255
   1ae98:	10003726 	beq	r2,zero,1af78 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1ae9c:	e0fff803 	ldbu	r3,-32(fp)
   1aea0:	e13ff803 	ldbu	r4,-32(fp)
   1aea4:	008000b4 	movhi	r2,2
   1aea8:	1093eb44 	addi	r2,r2,20397
   1aeac:	1105883a 	add	r2,r2,r4
   1aeb0:	10800003 	ldbu	r2,0(r2)
   1aeb4:	1009883a 	mov	r4,r2
   1aeb8:	e0bff883 	ldbu	r2,-30(fp)
   1aebc:	0084303a 	nor	r2,zero,r2
   1aec0:	2084703a 	and	r2,r4,r2
   1aec4:	1009883a 	mov	r4,r2
   1aec8:	008000b4 	movhi	r2,2
   1aecc:	1093eb44 	addi	r2,r2,20397
   1aed0:	10c5883a 	add	r2,r2,r3
   1aed4:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1aed8:	e0fff803 	ldbu	r3,-32(fp)
   1aedc:	008000b4 	movhi	r2,2
   1aee0:	1093eb44 	addi	r2,r2,20397
   1aee4:	10c5883a 	add	r2,r2,r3
   1aee8:	10800003 	ldbu	r2,0(r2)
   1aeec:	10803fcc 	andi	r2,r2,255
   1aef0:	10000b1e 	bne	r2,zero,1af20 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1aef4:	e0bff843 	ldbu	r2,-31(fp)
   1aef8:	0084303a 	nor	r2,zero,r2
   1aefc:	1007883a 	mov	r3,r2
   1af00:	008000b4 	movhi	r2,2
   1af04:	1093eb04 	addi	r2,r2,20396
   1af08:	10800003 	ldbu	r2,0(r2)
   1af0c:	1884703a 	and	r2,r3,r2
   1af10:	1007883a 	mov	r3,r2
   1af14:	008000b4 	movhi	r2,2
   1af18:	1093eb04 	addi	r2,r2,20396
   1af1c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1af20:	008000b4 	movhi	r2,2
   1af24:	1093eb04 	addi	r2,r2,20396
   1af28:	10c00003 	ldbu	r3,0(r2)
   1af2c:	e0bff783 	ldbu	r2,-34(fp)
   1af30:	1884b03a 	or	r2,r3,r2
   1af34:	1007883a 	mov	r3,r2
   1af38:	008000b4 	movhi	r2,2
   1af3c:	1093eb04 	addi	r2,r2,20396
   1af40:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1af44:	e0fff703 	ldbu	r3,-36(fp)
   1af48:	e13ff703 	ldbu	r4,-36(fp)
   1af4c:	008000b4 	movhi	r2,2
   1af50:	1093eb44 	addi	r2,r2,20397
   1af54:	1105883a 	add	r2,r2,r4
   1af58:	11000003 	ldbu	r4,0(r2)
   1af5c:	e0bff7c3 	ldbu	r2,-33(fp)
   1af60:	2084b03a 	or	r2,r4,r2
   1af64:	1009883a 	mov	r4,r2
   1af68:	008000b4 	movhi	r2,2
   1af6c:	1093eb44 	addi	r2,r2,20397
   1af70:	10c5883a 	add	r2,r2,r3
   1af74:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1af78:	e0bff617 	ldw	r2,-40(fp)
   1af7c:	10800717 	ldw	r2,28(r2)
   1af80:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1af84:	e0bff317 	ldw	r2,-52(fp)
   1af88:	10003326 	beq	r2,zero,1b058 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1af8c:	e0bff803 	ldbu	r2,-32(fp)
   1af90:	e0fff803 	ldbu	r3,-32(fp)
   1af94:	e13ff317 	ldw	r4,-52(fp)
   1af98:	20c7883a 	add	r3,r4,r3
   1af9c:	18c00204 	addi	r3,r3,8
   1afa0:	18c000c3 	ldbu	r3,3(r3)
   1afa4:	1809883a 	mov	r4,r3
   1afa8:	e0fff883 	ldbu	r3,-30(fp)
   1afac:	00c6303a 	nor	r3,zero,r3
   1afb0:	20c6703a 	and	r3,r4,r3
   1afb4:	1809883a 	mov	r4,r3
   1afb8:	e0fff317 	ldw	r3,-52(fp)
   1afbc:	1885883a 	add	r2,r3,r2
   1afc0:	10800204 	addi	r2,r2,8
   1afc4:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1afc8:	e0bff803 	ldbu	r2,-32(fp)
   1afcc:	e0fff317 	ldw	r3,-52(fp)
   1afd0:	1885883a 	add	r2,r3,r2
   1afd4:	10800204 	addi	r2,r2,8
   1afd8:	108000c3 	ldbu	r2,3(r2)
   1afdc:	10803fcc 	andi	r2,r2,255
   1afe0:	1000091e 	bne	r2,zero,1b008 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1afe4:	e0bff317 	ldw	r2,-52(fp)
   1afe8:	10800283 	ldbu	r2,10(r2)
   1afec:	1007883a 	mov	r3,r2
   1aff0:	e0bff843 	ldbu	r2,-31(fp)
   1aff4:	0084303a 	nor	r2,zero,r2
   1aff8:	1884703a 	and	r2,r3,r2
   1affc:	1007883a 	mov	r3,r2
   1b000:	e0bff317 	ldw	r2,-52(fp)
   1b004:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1b008:	e0bff317 	ldw	r2,-52(fp)
   1b00c:	10c00283 	ldbu	r3,10(r2)
   1b010:	e0bff783 	ldbu	r2,-34(fp)
   1b014:	1884b03a 	or	r2,r3,r2
   1b018:	1007883a 	mov	r3,r2
   1b01c:	e0bff317 	ldw	r2,-52(fp)
   1b020:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1b024:	e0bff703 	ldbu	r2,-36(fp)
   1b028:	e0fff703 	ldbu	r3,-36(fp)
   1b02c:	e13ff317 	ldw	r4,-52(fp)
   1b030:	20c7883a 	add	r3,r4,r3
   1b034:	18c00204 	addi	r3,r3,8
   1b038:	190000c3 	ldbu	r4,3(r3)
   1b03c:	e0fff7c3 	ldbu	r3,-33(fp)
   1b040:	20c6b03a 	or	r3,r4,r3
   1b044:	1809883a 	mov	r4,r3
   1b048:	e0fff317 	ldw	r3,-52(fp)
   1b04c:	1885883a 	add	r2,r3,r2
   1b050:	10800204 	addi	r2,r2,8
   1b054:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1b058:	e0bff617 	ldw	r2,-40(fp)
   1b05c:	10800817 	ldw	r2,32(r2)
   1b060:	10004226 	beq	r2,zero,1b16c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1b064:	e0bff617 	ldw	r2,-40(fp)
   1b068:	10800817 	ldw	r2,32(r2)
   1b06c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1b070:	e0bff417 	ldw	r2,-48(fp)
   1b074:	10800017 	ldw	r2,0(r2)
   1b078:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1b07c:	00003906 	br	1b164 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1b080:	e0bff803 	ldbu	r2,-32(fp)
   1b084:	e0fff803 	ldbu	r3,-32(fp)
   1b088:	e13ff317 	ldw	r4,-52(fp)
   1b08c:	20c7883a 	add	r3,r4,r3
   1b090:	18c00204 	addi	r3,r3,8
   1b094:	18c000c3 	ldbu	r3,3(r3)
   1b098:	1809883a 	mov	r4,r3
   1b09c:	e0fff883 	ldbu	r3,-30(fp)
   1b0a0:	00c6303a 	nor	r3,zero,r3
   1b0a4:	20c6703a 	and	r3,r4,r3
   1b0a8:	1809883a 	mov	r4,r3
   1b0ac:	e0fff317 	ldw	r3,-52(fp)
   1b0b0:	1885883a 	add	r2,r3,r2
   1b0b4:	10800204 	addi	r2,r2,8
   1b0b8:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1b0bc:	e0bff803 	ldbu	r2,-32(fp)
   1b0c0:	e0fff317 	ldw	r3,-52(fp)
   1b0c4:	1885883a 	add	r2,r3,r2
   1b0c8:	10800204 	addi	r2,r2,8
   1b0cc:	108000c3 	ldbu	r2,3(r2)
   1b0d0:	10803fcc 	andi	r2,r2,255
   1b0d4:	1000091e 	bne	r2,zero,1b0fc <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1b0d8:	e0bff317 	ldw	r2,-52(fp)
   1b0dc:	10800283 	ldbu	r2,10(r2)
   1b0e0:	1007883a 	mov	r3,r2
   1b0e4:	e0bff843 	ldbu	r2,-31(fp)
   1b0e8:	0084303a 	nor	r2,zero,r2
   1b0ec:	1884703a 	and	r2,r3,r2
   1b0f0:	1007883a 	mov	r3,r2
   1b0f4:	e0bff317 	ldw	r2,-52(fp)
   1b0f8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1b0fc:	e0bff317 	ldw	r2,-52(fp)
   1b100:	10c00283 	ldbu	r3,10(r2)
   1b104:	e0bff783 	ldbu	r2,-34(fp)
   1b108:	1884b03a 	or	r2,r3,r2
   1b10c:	1007883a 	mov	r3,r2
   1b110:	e0bff317 	ldw	r2,-52(fp)
   1b114:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1b118:	e0bff703 	ldbu	r2,-36(fp)
   1b11c:	e0fff703 	ldbu	r3,-36(fp)
   1b120:	e13ff317 	ldw	r4,-52(fp)
   1b124:	20c7883a 	add	r3,r4,r3
   1b128:	18c00204 	addi	r3,r3,8
   1b12c:	190000c3 	ldbu	r4,3(r3)
   1b130:	e0fff7c3 	ldbu	r3,-33(fp)
   1b134:	20c6b03a 	or	r3,r4,r3
   1b138:	1809883a 	mov	r4,r3
   1b13c:	e0fff317 	ldw	r3,-52(fp)
   1b140:	1885883a 	add	r2,r3,r2
   1b144:	10800204 	addi	r2,r2,8
   1b148:	110000c5 	stb	r4,3(r2)
            pevents++;
   1b14c:	e0bff417 	ldw	r2,-48(fp)
   1b150:	10800104 	addi	r2,r2,4
   1b154:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1b158:	e0bff417 	ldw	r2,-48(fp)
   1b15c:	10800017 	ldw	r2,0(r2)
   1b160:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1b164:	e0bff317 	ldw	r2,-52(fp)
   1b168:	103fc51e 	bne	r2,zero,1b080 <__alt_mem_Flash_flash_data+0xf401b080>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1b16c:	e0bff617 	ldw	r2,-40(fp)
   1b170:	e0ffff03 	ldbu	r3,-4(fp)
   1b174:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1b178:	e0bff617 	ldw	r2,-40(fp)
   1b17c:	e0fff703 	ldbu	r3,-36(fp)
   1b180:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1b184:	e0bff617 	ldw	r2,-40(fp)
   1b188:	e0fff743 	ldbu	r3,-35(fp)
   1b18c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1b190:	e0bff617 	ldw	r2,-40(fp)
   1b194:	e0fff783 	ldbu	r3,-34(fp)
   1b198:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1b19c:	e0bff617 	ldw	r2,-40(fp)
   1b1a0:	e0fff7c3 	ldbu	r3,-33(fp)
   1b1a4:	10c00d45 	stb	r3,53(r2)
   1b1a8:	e0bff517 	ldw	r2,-44(fp)
   1b1ac:	e0bffd15 	stw	r2,-12(fp)
   1b1b0:	e0bffd17 	ldw	r2,-12(fp)
   1b1b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1b1b8:	008000b4 	movhi	r2,2
   1b1bc:	1093df44 	addi	r2,r2,20349
   1b1c0:	10800003 	ldbu	r2,0(r2)
   1b1c4:	10803fcc 	andi	r2,r2,255
   1b1c8:	10800058 	cmpnei	r2,r2,1
   1b1cc:	1000011e 	bne	r2,zero,1b1d4 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1b1d0:	00167900 	call	16790 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b1d4:	0005883a 	mov	r2,zero
}
   1b1d8:	e037883a 	mov	sp,fp
   1b1dc:	dfc00117 	ldw	ra,4(sp)
   1b1e0:	df000017 	ldw	fp,0(sp)
   1b1e4:	dec00204 	addi	sp,sp,8
   1b1e8:	f800283a 	ret

0001b1ec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1b1ec:	deffee04 	addi	sp,sp,-72
   1b1f0:	dfc01115 	stw	ra,68(sp)
   1b1f4:	df001015 	stw	fp,64(sp)
   1b1f8:	df001004 	addi	fp,sp,64
   1b1fc:	e13ffc15 	stw	r4,-16(fp)
   1b200:	e17ffd15 	stw	r5,-12(fp)
   1b204:	e1bffe15 	stw	r6,-8(fp)
   1b208:	3805883a 	mov	r2,r7
   1b20c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1b210:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1b214:	e0bfff03 	ldbu	r2,-4(fp)
   1b218:	10800570 	cmpltui	r2,r2,21
   1b21c:	1000021e 	bne	r2,zero,1b228 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1b220:	00800a84 	movi	r2,42
   1b224:	00005b06 	br	1b394 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b228:	0005303a 	rdctl	r2,status
   1b22c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b230:	e0fff617 	ldw	r3,-40(fp)
   1b234:	00bfff84 	movi	r2,-2
   1b238:	1884703a 	and	r2,r3,r2
   1b23c:	1001703a 	wrctl	status,r2
  
  return context;
   1b240:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b244:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1b248:	008000b4 	movhi	r2,2
   1b24c:	1093ed04 	addi	r2,r2,20404
   1b250:	10800003 	ldbu	r2,0(r2)
   1b254:	10803fcc 	andi	r2,r2,255
   1b258:	10000626 	beq	r2,zero,1b274 <OSTaskCreate+0x88>
   1b25c:	e0bff317 	ldw	r2,-52(fp)
   1b260:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b264:	e0bff717 	ldw	r2,-36(fp)
   1b268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1b26c:	00800f04 	movi	r2,60
   1b270:	00004806 	br	1b394 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1b274:	e0ffff03 	ldbu	r3,-4(fp)
   1b278:	008000f4 	movhi	r2,3
   1b27c:	10b07504 	addi	r2,r2,-15916
   1b280:	18c7883a 	add	r3,r3,r3
   1b284:	18c7883a 	add	r3,r3,r3
   1b288:	10c5883a 	add	r2,r2,r3
   1b28c:	10800017 	ldw	r2,0(r2)
   1b290:	10003b1e 	bne	r2,zero,1b380 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1b294:	e0ffff03 	ldbu	r3,-4(fp)
   1b298:	008000f4 	movhi	r2,3
   1b29c:	10b07504 	addi	r2,r2,-15916
   1b2a0:	18c7883a 	add	r3,r3,r3
   1b2a4:	18c7883a 	add	r3,r3,r3
   1b2a8:	10c5883a 	add	r2,r2,r3
   1b2ac:	00c00044 	movi	r3,1
   1b2b0:	10c00015 	stw	r3,0(r2)
   1b2b4:	e0bff317 	ldw	r2,-52(fp)
   1b2b8:	e0bff815 	stw	r2,-32(fp)
   1b2bc:	e0bff817 	ldw	r2,-32(fp)
   1b2c0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1b2c4:	e13ffc17 	ldw	r4,-16(fp)
   1b2c8:	e17ffd17 	ldw	r5,-12(fp)
   1b2cc:	e1bffe17 	ldw	r6,-8(fp)
   1b2d0:	000f883a 	mov	r7,zero
   1b2d4:	001fea00 	call	1fea0 <OSTaskStkInit>
   1b2d8:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1b2dc:	e0bfff03 	ldbu	r2,-4(fp)
   1b2e0:	d8000015 	stw	zero,0(sp)
   1b2e4:	d8000115 	stw	zero,4(sp)
   1b2e8:	d8000215 	stw	zero,8(sp)
   1b2ec:	1009883a 	mov	r4,r2
   1b2f0:	e17ff417 	ldw	r5,-48(fp)
   1b2f4:	000d883a 	mov	r6,zero
   1b2f8:	000f883a 	mov	r7,zero
   1b2fc:	0016b940 	call	16b94 <OS_TCBInit>
   1b300:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1b304:	e0bff503 	ldbu	r2,-44(fp)
   1b308:	1000081e 	bne	r2,zero,1b32c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1b30c:	008000b4 	movhi	r2,2
   1b310:	1093df44 	addi	r2,r2,20349
   1b314:	10800003 	ldbu	r2,0(r2)
   1b318:	10803fcc 	andi	r2,r2,255
   1b31c:	10800058 	cmpnei	r2,r2,1
   1b320:	1000151e 	bne	r2,zero,1b378 <OSTaskCreate+0x18c>
                OS_Sched();
   1b324:	00167900 	call	16790 <OS_Sched>
   1b328:	00001306 	br	1b378 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b32c:	0005303a 	rdctl	r2,status
   1b330:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b334:	e0fff917 	ldw	r3,-28(fp)
   1b338:	00bfff84 	movi	r2,-2
   1b33c:	1884703a 	and	r2,r3,r2
   1b340:	1001703a 	wrctl	status,r2
  
  return context;
   1b344:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1b348:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1b34c:	e0ffff03 	ldbu	r3,-4(fp)
   1b350:	008000f4 	movhi	r2,3
   1b354:	10b07504 	addi	r2,r2,-15916
   1b358:	18c7883a 	add	r3,r3,r3
   1b35c:	18c7883a 	add	r3,r3,r3
   1b360:	10c5883a 	add	r2,r2,r3
   1b364:	10000015 	stw	zero,0(r2)
   1b368:	e0bff317 	ldw	r2,-52(fp)
   1b36c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b370:	e0bffa17 	ldw	r2,-24(fp)
   1b374:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1b378:	e0bff503 	ldbu	r2,-44(fp)
   1b37c:	00000506 	br	1b394 <OSTaskCreate+0x1a8>
   1b380:	e0bff317 	ldw	r2,-52(fp)
   1b384:	e0bffb15 	stw	r2,-20(fp)
   1b388:	e0bffb17 	ldw	r2,-20(fp)
   1b38c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1b390:	00800a04 	movi	r2,40
}
   1b394:	e037883a 	mov	sp,fp
   1b398:	dfc00117 	ldw	ra,4(sp)
   1b39c:	df000017 	ldw	fp,0(sp)
   1b3a0:	dec00204 	addi	sp,sp,8
   1b3a4:	f800283a 	ret

0001b3a8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1b3a8:	deffec04 	addi	sp,sp,-80
   1b3ac:	dfc01315 	stw	ra,76(sp)
   1b3b0:	df001215 	stw	fp,72(sp)
   1b3b4:	df001204 	addi	fp,sp,72
   1b3b8:	e13ffa15 	stw	r4,-24(fp)
   1b3bc:	e17ffb15 	stw	r5,-20(fp)
   1b3c0:	e1bffc15 	stw	r6,-16(fp)
   1b3c4:	3809883a 	mov	r4,r7
   1b3c8:	e0c00217 	ldw	r3,8(fp)
   1b3cc:	e0800617 	ldw	r2,24(fp)
   1b3d0:	e13ffd05 	stb	r4,-12(fp)
   1b3d4:	e0fffe0d 	sth	r3,-8(fp)
   1b3d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1b3dc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1b3e0:	e0bffd03 	ldbu	r2,-12(fp)
   1b3e4:	10800570 	cmpltui	r2,r2,21
   1b3e8:	1000021e 	bne	r2,zero,1b3f4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1b3ec:	00800a84 	movi	r2,42
   1b3f0:	00006306 	br	1b580 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3f4:	0005303a 	rdctl	r2,status
   1b3f8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3fc:	e0fff417 	ldw	r3,-48(fp)
   1b400:	00bfff84 	movi	r2,-2
   1b404:	1884703a 	and	r2,r3,r2
   1b408:	1001703a 	wrctl	status,r2
  
  return context;
   1b40c:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b410:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1b414:	008000b4 	movhi	r2,2
   1b418:	1093ed04 	addi	r2,r2,20404
   1b41c:	10800003 	ldbu	r2,0(r2)
   1b420:	10803fcc 	andi	r2,r2,255
   1b424:	10000626 	beq	r2,zero,1b440 <OSTaskCreateExt+0x98>
   1b428:	e0bff117 	ldw	r2,-60(fp)
   1b42c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b430:	e0bff517 	ldw	r2,-44(fp)
   1b434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1b438:	00800f04 	movi	r2,60
   1b43c:	00005006 	br	1b580 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1b440:	e0fffd03 	ldbu	r3,-12(fp)
   1b444:	008000f4 	movhi	r2,3
   1b448:	10b07504 	addi	r2,r2,-15916
   1b44c:	18c7883a 	add	r3,r3,r3
   1b450:	18c7883a 	add	r3,r3,r3
   1b454:	10c5883a 	add	r2,r2,r3
   1b458:	10800017 	ldw	r2,0(r2)
   1b45c:	1000431e 	bne	r2,zero,1b56c <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1b460:	e0fffd03 	ldbu	r3,-12(fp)
   1b464:	008000f4 	movhi	r2,3
   1b468:	10b07504 	addi	r2,r2,-15916
   1b46c:	18c7883a 	add	r3,r3,r3
   1b470:	18c7883a 	add	r3,r3,r3
   1b474:	10c5883a 	add	r2,r2,r3
   1b478:	00c00044 	movi	r3,1
   1b47c:	10c00015 	stw	r3,0(r2)
   1b480:	e0bff117 	ldw	r2,-60(fp)
   1b484:	e0bff615 	stw	r2,-40(fp)
   1b488:	e0bff617 	ldw	r2,-40(fp)
   1b48c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1b490:	e0bfff0b 	ldhu	r2,-4(fp)
   1b494:	e1000317 	ldw	r4,12(fp)
   1b498:	e1400417 	ldw	r5,16(fp)
   1b49c:	100d883a 	mov	r6,r2
   1b4a0:	001c5340 	call	1c534 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1b4a4:	e0bfff0b 	ldhu	r2,-4(fp)
   1b4a8:	e13ffa17 	ldw	r4,-24(fp)
   1b4ac:	e17ffb17 	ldw	r5,-20(fp)
   1b4b0:	e1bffc17 	ldw	r6,-16(fp)
   1b4b4:	100f883a 	mov	r7,r2
   1b4b8:	001fea00 	call	1fea0 <OSTaskStkInit>
   1b4bc:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1b4c0:	e13ffd03 	ldbu	r4,-12(fp)
   1b4c4:	e1fffe0b 	ldhu	r7,-8(fp)
   1b4c8:	e0bfff0b 	ldhu	r2,-4(fp)
   1b4cc:	e0c00417 	ldw	r3,16(fp)
   1b4d0:	d8c00015 	stw	r3,0(sp)
   1b4d4:	e0c00517 	ldw	r3,20(fp)
   1b4d8:	d8c00115 	stw	r3,4(sp)
   1b4dc:	d8800215 	stw	r2,8(sp)
   1b4e0:	e17ff217 	ldw	r5,-56(fp)
   1b4e4:	e1800317 	ldw	r6,12(fp)
   1b4e8:	0016b940 	call	16b94 <OS_TCBInit>
   1b4ec:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1b4f0:	e0bff303 	ldbu	r2,-52(fp)
   1b4f4:	1000081e 	bne	r2,zero,1b518 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1b4f8:	008000b4 	movhi	r2,2
   1b4fc:	1093df44 	addi	r2,r2,20349
   1b500:	10800003 	ldbu	r2,0(r2)
   1b504:	10803fcc 	andi	r2,r2,255
   1b508:	10800058 	cmpnei	r2,r2,1
   1b50c:	1000151e 	bne	r2,zero,1b564 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1b510:	00167900 	call	16790 <OS_Sched>
   1b514:	00001306 	br	1b564 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b518:	0005303a 	rdctl	r2,status
   1b51c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b520:	e0fff717 	ldw	r3,-36(fp)
   1b524:	00bfff84 	movi	r2,-2
   1b528:	1884703a 	and	r2,r3,r2
   1b52c:	1001703a 	wrctl	status,r2
  
  return context;
   1b530:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1b534:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1b538:	e0fffd03 	ldbu	r3,-12(fp)
   1b53c:	008000f4 	movhi	r2,3
   1b540:	10b07504 	addi	r2,r2,-15916
   1b544:	18c7883a 	add	r3,r3,r3
   1b548:	18c7883a 	add	r3,r3,r3
   1b54c:	10c5883a 	add	r2,r2,r3
   1b550:	10000015 	stw	zero,0(r2)
   1b554:	e0bff117 	ldw	r2,-60(fp)
   1b558:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b55c:	e0bff817 	ldw	r2,-32(fp)
   1b560:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1b564:	e0bff303 	ldbu	r2,-52(fp)
   1b568:	00000506 	br	1b580 <OSTaskCreateExt+0x1d8>
   1b56c:	e0bff117 	ldw	r2,-60(fp)
   1b570:	e0bff915 	stw	r2,-28(fp)
   1b574:	e0bff917 	ldw	r2,-28(fp)
   1b578:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1b57c:	00800a04 	movi	r2,40
}
   1b580:	e037883a 	mov	sp,fp
   1b584:	dfc00117 	ldw	ra,4(sp)
   1b588:	df000017 	ldw	fp,0(sp)
   1b58c:	dec00204 	addi	sp,sp,8
   1b590:	f800283a 	ret

0001b594 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1b594:	defff404 	addi	sp,sp,-48
   1b598:	dfc00b15 	stw	ra,44(sp)
   1b59c:	df000a15 	stw	fp,40(sp)
   1b5a0:	df000a04 	addi	fp,sp,40
   1b5a4:	2005883a 	mov	r2,r4
   1b5a8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1b5ac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1b5b0:	008000b4 	movhi	r2,2
   1b5b4:	1093ed04 	addi	r2,r2,20404
   1b5b8:	10800003 	ldbu	r2,0(r2)
   1b5bc:	10803fcc 	andi	r2,r2,255
   1b5c0:	10000226 	beq	r2,zero,1b5cc <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1b5c4:	00801004 	movi	r2,64
   1b5c8:	0000e506 	br	1b960 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1b5cc:	e0bfff03 	ldbu	r2,-4(fp)
   1b5d0:	10800518 	cmpnei	r2,r2,20
   1b5d4:	1000021e 	bne	r2,zero,1b5e0 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1b5d8:	00800f84 	movi	r2,62
   1b5dc:	0000e006 	br	1b960 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1b5e0:	e0bfff03 	ldbu	r2,-4(fp)
   1b5e4:	10800530 	cmpltui	r2,r2,20
   1b5e8:	1000051e 	bne	r2,zero,1b600 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1b5ec:	e0bfff03 	ldbu	r2,-4(fp)
   1b5f0:	10803fe0 	cmpeqi	r2,r2,255
   1b5f4:	1000021e 	bne	r2,zero,1b600 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1b5f8:	00800a84 	movi	r2,42
   1b5fc:	0000d806 	br	1b960 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b600:	0005303a 	rdctl	r2,status
   1b604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b608:	e0fff917 	ldw	r3,-28(fp)
   1b60c:	00bfff84 	movi	r2,-2
   1b610:	1884703a 	and	r2,r3,r2
   1b614:	1001703a 	wrctl	status,r2
  
  return context;
   1b618:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1b61c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1b620:	e0bfff03 	ldbu	r2,-4(fp)
   1b624:	10803fd8 	cmpnei	r2,r2,255
   1b628:	1000051e 	bne	r2,zero,1b640 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1b62c:	008000b4 	movhi	r2,2
   1b630:	1093ee04 	addi	r2,r2,20408
   1b634:	10800017 	ldw	r2,0(r2)
   1b638:	10800c83 	ldbu	r2,50(r2)
   1b63c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b640:	e0ffff03 	ldbu	r3,-4(fp)
   1b644:	008000f4 	movhi	r2,3
   1b648:	10b07504 	addi	r2,r2,-15916
   1b64c:	18c7883a 	add	r3,r3,r3
   1b650:	18c7883a 	add	r3,r3,r3
   1b654:	10c5883a 	add	r2,r2,r3
   1b658:	10800017 	ldw	r2,0(r2)
   1b65c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1b660:	e0bff717 	ldw	r2,-36(fp)
   1b664:	1000061e 	bne	r2,zero,1b680 <OSTaskDel+0xec>
   1b668:	e0bff617 	ldw	r2,-40(fp)
   1b66c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b670:	e0bffa17 	ldw	r2,-24(fp)
   1b674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b678:	008010c4 	movi	r2,67
   1b67c:	0000b806 	br	1b960 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1b680:	e0bff717 	ldw	r2,-36(fp)
   1b684:	10800058 	cmpnei	r2,r2,1
   1b688:	1000061e 	bne	r2,zero,1b6a4 <OSTaskDel+0x110>
   1b68c:	e0bff617 	ldw	r2,-40(fp)
   1b690:	e0bffb15 	stw	r2,-20(fp)
   1b694:	e0bffb17 	ldw	r2,-20(fp)
   1b698:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1b69c:	00800f44 	movi	r2,61
   1b6a0:	0000af06 	br	1b960 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1b6a4:	e0bff717 	ldw	r2,-36(fp)
   1b6a8:	10800d03 	ldbu	r2,52(r2)
   1b6ac:	10c03fcc 	andi	r3,r2,255
   1b6b0:	e0bff717 	ldw	r2,-36(fp)
   1b6b4:	10800d03 	ldbu	r2,52(r2)
   1b6b8:	11003fcc 	andi	r4,r2,255
   1b6bc:	008000b4 	movhi	r2,2
   1b6c0:	1093eb44 	addi	r2,r2,20397
   1b6c4:	1105883a 	add	r2,r2,r4
   1b6c8:	10800003 	ldbu	r2,0(r2)
   1b6cc:	1009883a 	mov	r4,r2
   1b6d0:	e0bff717 	ldw	r2,-36(fp)
   1b6d4:	10800d43 	ldbu	r2,53(r2)
   1b6d8:	0084303a 	nor	r2,zero,r2
   1b6dc:	2084703a 	and	r2,r4,r2
   1b6e0:	1009883a 	mov	r4,r2
   1b6e4:	008000b4 	movhi	r2,2
   1b6e8:	1093eb44 	addi	r2,r2,20397
   1b6ec:	10c5883a 	add	r2,r2,r3
   1b6f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1b6f4:	e0bff717 	ldw	r2,-36(fp)
   1b6f8:	10800d03 	ldbu	r2,52(r2)
   1b6fc:	10c03fcc 	andi	r3,r2,255
   1b700:	008000b4 	movhi	r2,2
   1b704:	1093eb44 	addi	r2,r2,20397
   1b708:	10c5883a 	add	r2,r2,r3
   1b70c:	10800003 	ldbu	r2,0(r2)
   1b710:	10803fcc 	andi	r2,r2,255
   1b714:	10000c1e 	bne	r2,zero,1b748 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1b718:	e0bff717 	ldw	r2,-36(fp)
   1b71c:	10800d83 	ldbu	r2,54(r2)
   1b720:	0084303a 	nor	r2,zero,r2
   1b724:	1007883a 	mov	r3,r2
   1b728:	008000b4 	movhi	r2,2
   1b72c:	1093eb04 	addi	r2,r2,20396
   1b730:	10800003 	ldbu	r2,0(r2)
   1b734:	1884703a 	and	r2,r3,r2
   1b738:	1007883a 	mov	r3,r2
   1b73c:	008000b4 	movhi	r2,2
   1b740:	1093eb04 	addi	r2,r2,20396
   1b744:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1b748:	e0bff717 	ldw	r2,-36(fp)
   1b74c:	10800717 	ldw	r2,28(r2)
   1b750:	10000526 	beq	r2,zero,1b768 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1b754:	e0bff717 	ldw	r2,-36(fp)
   1b758:	10800717 	ldw	r2,28(r2)
   1b75c:	e13ff717 	ldw	r4,-36(fp)
   1b760:	100b883a 	mov	r5,r2
   1b764:	00161680 	call	16168 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1b768:	e0bff717 	ldw	r2,-36(fp)
   1b76c:	10800817 	ldw	r2,32(r2)
   1b770:	10000526 	beq	r2,zero,1b788 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1b774:	e0bff717 	ldw	r2,-36(fp)
   1b778:	10800817 	ldw	r2,32(r2)
   1b77c:	e13ff717 	ldw	r4,-36(fp)
   1b780:	100b883a 	mov	r5,r2
   1b784:	001621c0 	call	1621c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1b788:	e0bff717 	ldw	r2,-36(fp)
   1b78c:	10800a17 	ldw	r2,40(r2)
   1b790:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1b794:	e0bff817 	ldw	r2,-32(fp)
   1b798:	10000226 	beq	r2,zero,1b7a4 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1b79c:	e13ff817 	ldw	r4,-32(fp)
   1b7a0:	00187700 	call	18770 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1b7a4:	e0bff717 	ldw	r2,-36(fp)
   1b7a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1b7ac:	e0bff717 	ldw	r2,-36(fp)
   1b7b0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1b7b4:	e0bff717 	ldw	r2,-36(fp)
   1b7b8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1b7bc:	008000b4 	movhi	r2,2
   1b7c0:	1093df04 	addi	r2,r2,20348
   1b7c4:	10800003 	ldbu	r2,0(r2)
   1b7c8:	10803fcc 	andi	r2,r2,255
   1b7cc:	10803fe0 	cmpeqi	r2,r2,255
   1b7d0:	1000081e 	bne	r2,zero,1b7f4 <OSTaskDel+0x260>
        OSLockNesting++;
   1b7d4:	008000b4 	movhi	r2,2
   1b7d8:	1093df04 	addi	r2,r2,20348
   1b7dc:	10800003 	ldbu	r2,0(r2)
   1b7e0:	10800044 	addi	r2,r2,1
   1b7e4:	1007883a 	mov	r3,r2
   1b7e8:	008000b4 	movhi	r2,2
   1b7ec:	1093df04 	addi	r2,r2,20348
   1b7f0:	10c00005 	stb	r3,0(r2)
   1b7f4:	e0bff617 	ldw	r2,-40(fp)
   1b7f8:	e0bffc15 	stw	r2,-16(fp)
   1b7fc:	e0bffc17 	ldw	r2,-16(fp)
   1b800:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1b804:	0015d5c0 	call	15d5c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b808:	0005303a 	rdctl	r2,status
   1b80c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b810:	e0fffd17 	ldw	r3,-12(fp)
   1b814:	00bfff84 	movi	r2,-2
   1b818:	1884703a 	and	r2,r3,r2
   1b81c:	1001703a 	wrctl	status,r2
  
  return context;
   1b820:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1b824:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1b828:	008000b4 	movhi	r2,2
   1b82c:	1093df04 	addi	r2,r2,20348
   1b830:	10800003 	ldbu	r2,0(r2)
   1b834:	10803fcc 	andi	r2,r2,255
   1b838:	10000826 	beq	r2,zero,1b85c <OSTaskDel+0x2c8>
        OSLockNesting--;
   1b83c:	008000b4 	movhi	r2,2
   1b840:	1093df04 	addi	r2,r2,20348
   1b844:	10800003 	ldbu	r2,0(r2)
   1b848:	10bfffc4 	addi	r2,r2,-1
   1b84c:	1007883a 	mov	r3,r2
   1b850:	008000b4 	movhi	r2,2
   1b854:	1093df04 	addi	r2,r2,20348
   1b858:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1b85c:	e13ff717 	ldw	r4,-36(fp)
   1b860:	002001c0 	call	2001c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1b864:	008000b4 	movhi	r2,2
   1b868:	1093e744 	addi	r2,r2,20381
   1b86c:	10800003 	ldbu	r2,0(r2)
   1b870:	10bfffc4 	addi	r2,r2,-1
   1b874:	1007883a 	mov	r3,r2
   1b878:	008000b4 	movhi	r2,2
   1b87c:	1093e744 	addi	r2,r2,20381
   1b880:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1b884:	e0ffff03 	ldbu	r3,-4(fp)
   1b888:	008000f4 	movhi	r2,3
   1b88c:	10b07504 	addi	r2,r2,-15916
   1b890:	18c7883a 	add	r3,r3,r3
   1b894:	18c7883a 	add	r3,r3,r3
   1b898:	10c5883a 	add	r2,r2,r3
   1b89c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1b8a0:	e0bff717 	ldw	r2,-36(fp)
   1b8a4:	10800617 	ldw	r2,24(r2)
   1b8a8:	1000091e 	bne	r2,zero,1b8d0 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1b8ac:	e0bff717 	ldw	r2,-36(fp)
   1b8b0:	10800517 	ldw	r2,20(r2)
   1b8b4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1b8b8:	e0bff717 	ldw	r2,-36(fp)
   1b8bc:	10c00517 	ldw	r3,20(r2)
   1b8c0:	008000b4 	movhi	r2,2
   1b8c4:	1093e204 	addi	r2,r2,20360
   1b8c8:	10c00015 	stw	r3,0(r2)
   1b8cc:	00000a06 	br	1b8f8 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1b8d0:	e0bff717 	ldw	r2,-36(fp)
   1b8d4:	10800617 	ldw	r2,24(r2)
   1b8d8:	e0fff717 	ldw	r3,-36(fp)
   1b8dc:	18c00517 	ldw	r3,20(r3)
   1b8e0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1b8e4:	e0bff717 	ldw	r2,-36(fp)
   1b8e8:	10800517 	ldw	r2,20(r2)
   1b8ec:	e0fff717 	ldw	r3,-36(fp)
   1b8f0:	18c00617 	ldw	r3,24(r3)
   1b8f4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1b8f8:	008000b4 	movhi	r2,2
   1b8fc:	1093e604 	addi	r2,r2,20376
   1b900:	10c00017 	ldw	r3,0(r2)
   1b904:	e0bff717 	ldw	r2,-36(fp)
   1b908:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1b90c:	008000b4 	movhi	r2,2
   1b910:	1093e604 	addi	r2,r2,20376
   1b914:	e0fff717 	ldw	r3,-36(fp)
   1b918:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1b91c:	e0bff717 	ldw	r2,-36(fp)
   1b920:	00c00fc4 	movi	r3,63
   1b924:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1b928:	e0bff717 	ldw	r2,-36(fp)
   1b92c:	10001345 	stb	zero,77(r2)
   1b930:	e0bff617 	ldw	r2,-40(fp)
   1b934:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b938:	e0bffe17 	ldw	r2,-8(fp)
   1b93c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1b940:	008000b4 	movhi	r2,2
   1b944:	1093df44 	addi	r2,r2,20349
   1b948:	10800003 	ldbu	r2,0(r2)
   1b94c:	10803fcc 	andi	r2,r2,255
   1b950:	10800058 	cmpnei	r2,r2,1
   1b954:	1000011e 	bne	r2,zero,1b95c <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1b958:	00167900 	call	16790 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b95c:	0005883a 	mov	r2,zero
}
   1b960:	e037883a 	mov	sp,fp
   1b964:	dfc00117 	ldw	ra,4(sp)
   1b968:	df000017 	ldw	fp,0(sp)
   1b96c:	dec00204 	addi	sp,sp,8
   1b970:	f800283a 	ret

0001b974 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1b974:	defff504 	addi	sp,sp,-44
   1b978:	df000a15 	stw	fp,40(sp)
   1b97c:	df000a04 	addi	fp,sp,40
   1b980:	2005883a 	mov	r2,r4
   1b984:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b988:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1b98c:	e0bfff03 	ldbu	r2,-4(fp)
   1b990:	10800518 	cmpnei	r2,r2,20
   1b994:	1000021e 	bne	r2,zero,1b9a0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1b998:	00800f84 	movi	r2,62
   1b99c:	00004706 	br	1babc <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b9a0:	e0bfff03 	ldbu	r2,-4(fp)
   1b9a4:	10800530 	cmpltui	r2,r2,20
   1b9a8:	1000051e 	bne	r2,zero,1b9c0 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1b9ac:	e0bfff03 	ldbu	r2,-4(fp)
   1b9b0:	10803fe0 	cmpeqi	r2,r2,255
   1b9b4:	1000021e 	bne	r2,zero,1b9c0 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1b9b8:	00800a84 	movi	r2,42
   1b9bc:	00003f06 	br	1babc <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1b9c0:	e0bfff03 	ldbu	r2,-4(fp)
   1b9c4:	10803fd8 	cmpnei	r2,r2,255
   1b9c8:	1000131e 	bne	r2,zero,1ba18 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9cc:	0005303a 	rdctl	r2,status
   1b9d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9d4:	e0fff917 	ldw	r3,-28(fp)
   1b9d8:	00bfff84 	movi	r2,-2
   1b9dc:	1884703a 	and	r2,r3,r2
   1b9e0:	1001703a 	wrctl	status,r2
  
  return context;
   1b9e4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1b9e8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1b9ec:	008000b4 	movhi	r2,2
   1b9f0:	1093ee04 	addi	r2,r2,20408
   1b9f4:	10800017 	ldw	r2,0(r2)
   1b9f8:	10800dc3 	ldbu	r2,55(r2)
   1b9fc:	e0bff705 	stb	r2,-36(fp)
   1ba00:	e0bff617 	ldw	r2,-40(fp)
   1ba04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba08:	e0bffa17 	ldw	r2,-24(fp)
   1ba0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1ba10:	e0bff703 	ldbu	r2,-36(fp)
   1ba14:	00002906 	br	1babc <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba18:	0005303a 	rdctl	r2,status
   1ba1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba20:	e0fffb17 	ldw	r3,-20(fp)
   1ba24:	00bfff84 	movi	r2,-2
   1ba28:	1884703a 	and	r2,r3,r2
   1ba2c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1ba34:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1ba38:	e0ffff03 	ldbu	r3,-4(fp)
   1ba3c:	008000f4 	movhi	r2,3
   1ba40:	10b07504 	addi	r2,r2,-15916
   1ba44:	18c7883a 	add	r3,r3,r3
   1ba48:	18c7883a 	add	r3,r3,r3
   1ba4c:	10c5883a 	add	r2,r2,r3
   1ba50:	10800017 	ldw	r2,0(r2)
   1ba54:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1ba58:	e0bff817 	ldw	r2,-32(fp)
   1ba5c:	1000061e 	bne	r2,zero,1ba78 <OSTaskDelReq+0x104>
   1ba60:	e0bff617 	ldw	r2,-40(fp)
   1ba64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba68:	e0bffc17 	ldw	r2,-16(fp)
   1ba6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1ba70:	008010c4 	movi	r2,67
   1ba74:	00001106 	br	1babc <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1ba78:	e0bff817 	ldw	r2,-32(fp)
   1ba7c:	10800058 	cmpnei	r2,r2,1
   1ba80:	1000061e 	bne	r2,zero,1ba9c <OSTaskDelReq+0x128>
   1ba84:	e0bff617 	ldw	r2,-40(fp)
   1ba88:	e0bffd15 	stw	r2,-12(fp)
   1ba8c:	e0bffd17 	ldw	r2,-12(fp)
   1ba90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1ba94:	00800f44 	movi	r2,61
   1ba98:	00000806 	br	1babc <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1ba9c:	e0bff817 	ldw	r2,-32(fp)
   1baa0:	00c00fc4 	movi	r3,63
   1baa4:	10c00dc5 	stb	r3,55(r2)
   1baa8:	e0bff617 	ldw	r2,-40(fp)
   1baac:	e0bffe15 	stw	r2,-8(fp)
   1bab0:	e0bffe17 	ldw	r2,-8(fp)
   1bab4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1bab8:	0005883a 	mov	r2,zero
}
   1babc:	e037883a 	mov	sp,fp
   1bac0:	df000017 	ldw	fp,0(sp)
   1bac4:	dec00104 	addi	sp,sp,4
   1bac8:	f800283a 	ret

0001bacc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1bacc:	defff404 	addi	sp,sp,-48
   1bad0:	dfc00b15 	stw	ra,44(sp)
   1bad4:	df000a15 	stw	fp,40(sp)
   1bad8:	df000a04 	addi	fp,sp,40
   1badc:	2005883a 	mov	r2,r4
   1bae0:	e17ffe15 	stw	r5,-8(fp)
   1bae4:	e1bfff15 	stw	r6,-4(fp)
   1bae8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1baec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1baf0:	e0bfff17 	ldw	r2,-4(fp)
   1baf4:	1000021e 	bne	r2,zero,1bb00 <OSTaskNameGet+0x34>
        return (0);
   1baf8:	0005883a 	mov	r2,zero
   1bafc:	00005806 	br	1bc60 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1bb00:	e0bffd03 	ldbu	r2,-12(fp)
   1bb04:	10800570 	cmpltui	r2,r2,21
   1bb08:	1000081e 	bne	r2,zero,1bb2c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1bb0c:	e0bffd03 	ldbu	r2,-12(fp)
   1bb10:	10803fe0 	cmpeqi	r2,r2,255
   1bb14:	1000051e 	bne	r2,zero,1bb2c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1bb18:	e0bfff17 	ldw	r2,-4(fp)
   1bb1c:	00c00a84 	movi	r3,42
   1bb20:	10c00005 	stb	r3,0(r2)
            return (0);
   1bb24:	0005883a 	mov	r2,zero
   1bb28:	00004d06 	br	1bc60 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1bb2c:	e0bffe17 	ldw	r2,-8(fp)
   1bb30:	1000051e 	bne	r2,zero,1bb48 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1bb34:	e0bfff17 	ldw	r2,-4(fp)
   1bb38:	00c00304 	movi	r3,12
   1bb3c:	10c00005 	stb	r3,0(r2)
        return (0);
   1bb40:	0005883a 	mov	r2,zero
   1bb44:	00004606 	br	1bc60 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1bb48:	008000b4 	movhi	r2,2
   1bb4c:	1093ed04 	addi	r2,r2,20404
   1bb50:	10800003 	ldbu	r2,0(r2)
   1bb54:	10803fcc 	andi	r2,r2,255
   1bb58:	10000526 	beq	r2,zero,1bb70 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1bb5c:	e0bfff17 	ldw	r2,-4(fp)
   1bb60:	00c00444 	movi	r3,17
   1bb64:	10c00005 	stb	r3,0(r2)
        return (0);
   1bb68:	0005883a 	mov	r2,zero
   1bb6c:	00003c06 	br	1bc60 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb70:	0005303a 	rdctl	r2,status
   1bb74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb78:	e0fff917 	ldw	r3,-28(fp)
   1bb7c:	00bfff84 	movi	r2,-2
   1bb80:	1884703a 	and	r2,r3,r2
   1bb84:	1001703a 	wrctl	status,r2
  
  return context;
   1bb88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1bb8c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1bb90:	e0bffd03 	ldbu	r2,-12(fp)
   1bb94:	10803fd8 	cmpnei	r2,r2,255
   1bb98:	1000051e 	bne	r2,zero,1bbb0 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1bb9c:	008000b4 	movhi	r2,2
   1bba0:	1093ee04 	addi	r2,r2,20408
   1bba4:	10800017 	ldw	r2,0(r2)
   1bba8:	10800c83 	ldbu	r2,50(r2)
   1bbac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bbb0:	e0fffd03 	ldbu	r3,-12(fp)
   1bbb4:	008000f4 	movhi	r2,3
   1bbb8:	10b07504 	addi	r2,r2,-15916
   1bbbc:	18c7883a 	add	r3,r3,r3
   1bbc0:	18c7883a 	add	r3,r3,r3
   1bbc4:	10c5883a 	add	r2,r2,r3
   1bbc8:	10800017 	ldw	r2,0(r2)
   1bbcc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1bbd0:	e0bff717 	ldw	r2,-36(fp)
   1bbd4:	1000091e 	bne	r2,zero,1bbfc <OSTaskNameGet+0x130>
   1bbd8:	e0bff617 	ldw	r2,-40(fp)
   1bbdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bbe0:	e0bffa17 	ldw	r2,-24(fp)
   1bbe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1bbe8:	e0bfff17 	ldw	r2,-4(fp)
   1bbec:	00c010c4 	movi	r3,67
   1bbf0:	10c00005 	stb	r3,0(r2)
        return (0);
   1bbf4:	0005883a 	mov	r2,zero
   1bbf8:	00001906 	br	1bc60 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1bbfc:	e0bff717 	ldw	r2,-36(fp)
   1bc00:	10800058 	cmpnei	r2,r2,1
   1bc04:	1000091e 	bne	r2,zero,1bc2c <OSTaskNameGet+0x160>
   1bc08:	e0bff617 	ldw	r2,-40(fp)
   1bc0c:	e0bffb15 	stw	r2,-20(fp)
   1bc10:	e0bffb17 	ldw	r2,-20(fp)
   1bc14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1bc18:	e0bfff17 	ldw	r2,-4(fp)
   1bc1c:	00c010c4 	movi	r3,67
   1bc20:	10c00005 	stb	r3,0(r2)
        return (0);
   1bc24:	0005883a 	mov	r2,zero
   1bc28:	00000d06 	br	1bc60 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1bc2c:	e0bff717 	ldw	r2,-36(fp)
   1bc30:	10801304 	addi	r2,r2,76
   1bc34:	e13ffe17 	ldw	r4,-8(fp)
   1bc38:	100b883a 	mov	r5,r2
   1bc3c:	00168cc0 	call	168cc <OS_StrCopy>
   1bc40:	e0bff805 	stb	r2,-32(fp)
   1bc44:	e0bff617 	ldw	r2,-40(fp)
   1bc48:	e0bffc15 	stw	r2,-16(fp)
   1bc4c:	e0bffc17 	ldw	r2,-16(fp)
   1bc50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1bc54:	e0bfff17 	ldw	r2,-4(fp)
   1bc58:	10000005 	stb	zero,0(r2)
    return (len);
   1bc5c:	e0bff803 	ldbu	r2,-32(fp)
}
   1bc60:	e037883a 	mov	sp,fp
   1bc64:	dfc00117 	ldw	ra,4(sp)
   1bc68:	df000017 	ldw	fp,0(sp)
   1bc6c:	dec00204 	addi	sp,sp,8
   1bc70:	f800283a 	ret

0001bc74 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1bc74:	defff304 	addi	sp,sp,-52
   1bc78:	dfc00c15 	stw	ra,48(sp)
   1bc7c:	df000b15 	stw	fp,44(sp)
   1bc80:	df000b04 	addi	fp,sp,44
   1bc84:	2005883a 	mov	r2,r4
   1bc88:	e17ffe15 	stw	r5,-8(fp)
   1bc8c:	e1bfff15 	stw	r6,-4(fp)
   1bc90:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1bc94:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1bc98:	e0bfff17 	ldw	r2,-4(fp)
   1bc9c:	1000011e 	bne	r2,zero,1bca4 <OSTaskNameSet+0x30>
        return;
   1bca0:	00005f06 	br	1be20 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1bca4:	e0bffd03 	ldbu	r2,-12(fp)
   1bca8:	10800570 	cmpltui	r2,r2,21
   1bcac:	1000071e 	bne	r2,zero,1bccc <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1bcb0:	e0bffd03 	ldbu	r2,-12(fp)
   1bcb4:	10803fe0 	cmpeqi	r2,r2,255
   1bcb8:	1000041e 	bne	r2,zero,1bccc <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1bcbc:	e0bfff17 	ldw	r2,-4(fp)
   1bcc0:	00c00a84 	movi	r3,42
   1bcc4:	10c00005 	stb	r3,0(r2)
            return;
   1bcc8:	00005506 	br	1be20 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1bccc:	e0bffe17 	ldw	r2,-8(fp)
   1bcd0:	1000041e 	bne	r2,zero,1bce4 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1bcd4:	e0bfff17 	ldw	r2,-4(fp)
   1bcd8:	00c00304 	movi	r3,12
   1bcdc:	10c00005 	stb	r3,0(r2)
        return;
   1bce0:	00004f06 	br	1be20 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1bce4:	008000b4 	movhi	r2,2
   1bce8:	1093ed04 	addi	r2,r2,20404
   1bcec:	10800003 	ldbu	r2,0(r2)
   1bcf0:	10803fcc 	andi	r2,r2,255
   1bcf4:	10000426 	beq	r2,zero,1bd08 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1bcf8:	e0bfff17 	ldw	r2,-4(fp)
   1bcfc:	00c00484 	movi	r3,18
   1bd00:	10c00005 	stb	r3,0(r2)
        return;
   1bd04:	00004606 	br	1be20 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bd08:	0005303a 	rdctl	r2,status
   1bd0c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd10:	e0fff817 	ldw	r3,-32(fp)
   1bd14:	00bfff84 	movi	r2,-2
   1bd18:	1884703a 	and	r2,r3,r2
   1bd1c:	1001703a 	wrctl	status,r2
  
  return context;
   1bd20:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1bd24:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1bd28:	e0bffd03 	ldbu	r2,-12(fp)
   1bd2c:	10803fd8 	cmpnei	r2,r2,255
   1bd30:	1000051e 	bne	r2,zero,1bd48 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1bd34:	008000b4 	movhi	r2,2
   1bd38:	1093ee04 	addi	r2,r2,20408
   1bd3c:	10800017 	ldw	r2,0(r2)
   1bd40:	10800c83 	ldbu	r2,50(r2)
   1bd44:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bd48:	e0fffd03 	ldbu	r3,-12(fp)
   1bd4c:	008000f4 	movhi	r2,3
   1bd50:	10b07504 	addi	r2,r2,-15916
   1bd54:	18c7883a 	add	r3,r3,r3
   1bd58:	18c7883a 	add	r3,r3,r3
   1bd5c:	10c5883a 	add	r2,r2,r3
   1bd60:	10800017 	ldw	r2,0(r2)
   1bd64:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1bd68:	e0bff617 	ldw	r2,-40(fp)
   1bd6c:	1000081e 	bne	r2,zero,1bd90 <OSTaskNameSet+0x11c>
   1bd70:	e0bff517 	ldw	r2,-44(fp)
   1bd74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd78:	e0bff917 	ldw	r2,-28(fp)
   1bd7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1bd80:	e0bfff17 	ldw	r2,-4(fp)
   1bd84:	00c010c4 	movi	r3,67
   1bd88:	10c00005 	stb	r3,0(r2)
        return;
   1bd8c:	00002406 	br	1be20 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1bd90:	e0bff617 	ldw	r2,-40(fp)
   1bd94:	10800058 	cmpnei	r2,r2,1
   1bd98:	1000081e 	bne	r2,zero,1bdbc <OSTaskNameSet+0x148>
   1bd9c:	e0bff517 	ldw	r2,-44(fp)
   1bda0:	e0bffa15 	stw	r2,-24(fp)
   1bda4:	e0bffa17 	ldw	r2,-24(fp)
   1bda8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1bdac:	e0bfff17 	ldw	r2,-4(fp)
   1bdb0:	00c010c4 	movi	r3,67
   1bdb4:	10c00005 	stb	r3,0(r2)
        return;
   1bdb8:	00001906 	br	1be20 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1bdbc:	e13ffe17 	ldw	r4,-8(fp)
   1bdc0:	00169400 	call	16940 <OS_StrLen>
   1bdc4:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1bdc8:	e0bff703 	ldbu	r2,-36(fp)
   1bdcc:	10800830 	cmpltui	r2,r2,32
   1bdd0:	1000081e 	bne	r2,zero,1bdf4 <OSTaskNameSet+0x180>
   1bdd4:	e0bff517 	ldw	r2,-44(fp)
   1bdd8:	e0bffb15 	stw	r2,-20(fp)
   1bddc:	e0bffb17 	ldw	r2,-20(fp)
   1bde0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1bde4:	e0bfff17 	ldw	r2,-4(fp)
   1bde8:	00c01044 	movi	r3,65
   1bdec:	10c00005 	stb	r3,0(r2)
        return;
   1bdf0:	00000b06 	br	1be20 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1bdf4:	e0bff617 	ldw	r2,-40(fp)
   1bdf8:	10801304 	addi	r2,r2,76
   1bdfc:	1009883a 	mov	r4,r2
   1be00:	e17ffe17 	ldw	r5,-8(fp)
   1be04:	00168cc0 	call	168cc <OS_StrCopy>
   1be08:	e0bff517 	ldw	r2,-44(fp)
   1be0c:	e0bffc15 	stw	r2,-16(fp)
   1be10:	e0bffc17 	ldw	r2,-16(fp)
   1be14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1be18:	e0bfff17 	ldw	r2,-4(fp)
   1be1c:	10000005 	stb	zero,0(r2)
}
   1be20:	e037883a 	mov	sp,fp
   1be24:	dfc00117 	ldw	ra,4(sp)
   1be28:	df000017 	ldw	fp,0(sp)
   1be2c:	dec00204 	addi	sp,sp,8
   1be30:	f800283a 	ret

0001be34 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1be34:	defff404 	addi	sp,sp,-48
   1be38:	dfc00b15 	stw	ra,44(sp)
   1be3c:	df000a15 	stw	fp,40(sp)
   1be40:	df000a04 	addi	fp,sp,40
   1be44:	2005883a 	mov	r2,r4
   1be48:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1be4c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1be50:	e0bfff03 	ldbu	r2,-4(fp)
   1be54:	10800530 	cmpltui	r2,r2,20
   1be58:	1000021e 	bne	r2,zero,1be64 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1be5c:	00800a84 	movi	r2,42
   1be60:	00006d06 	br	1c018 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be64:	0005303a 	rdctl	r2,status
   1be68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be6c:	e0fff817 	ldw	r3,-32(fp)
   1be70:	00bfff84 	movi	r2,-2
   1be74:	1884703a 	and	r2,r3,r2
   1be78:	1001703a 	wrctl	status,r2
  
  return context;
   1be7c:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1be80:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1be84:	e0ffff03 	ldbu	r3,-4(fp)
   1be88:	008000f4 	movhi	r2,3
   1be8c:	10b07504 	addi	r2,r2,-15916
   1be90:	18c7883a 	add	r3,r3,r3
   1be94:	18c7883a 	add	r3,r3,r3
   1be98:	10c5883a 	add	r2,r2,r3
   1be9c:	10800017 	ldw	r2,0(r2)
   1bea0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1bea4:	e0bff717 	ldw	r2,-36(fp)
   1bea8:	1000061e 	bne	r2,zero,1bec4 <OSTaskResume+0x90>
   1beac:	e0bff617 	ldw	r2,-40(fp)
   1beb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1beb4:	e0bff917 	ldw	r2,-28(fp)
   1beb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1bebc:	00801184 	movi	r2,70
   1bec0:	00005506 	br	1c018 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1bec4:	e0bff717 	ldw	r2,-36(fp)
   1bec8:	10800058 	cmpnei	r2,r2,1
   1becc:	1000061e 	bne	r2,zero,1bee8 <OSTaskResume+0xb4>
   1bed0:	e0bff617 	ldw	r2,-40(fp)
   1bed4:	e0bffa15 	stw	r2,-24(fp)
   1bed8:	e0bffa17 	ldw	r2,-24(fp)
   1bedc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1bee0:	008010c4 	movi	r2,67
   1bee4:	00004c06 	br	1c018 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1bee8:	e0bff717 	ldw	r2,-36(fp)
   1beec:	10800c03 	ldbu	r2,48(r2)
   1bef0:	10803fcc 	andi	r2,r2,255
   1bef4:	1080020c 	andi	r2,r2,8
   1bef8:	10004226 	beq	r2,zero,1c004 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1befc:	e0bff717 	ldw	r2,-36(fp)
   1bf00:	10c00c03 	ldbu	r3,48(r2)
   1bf04:	00bffdc4 	movi	r2,-9
   1bf08:	1884703a 	and	r2,r3,r2
   1bf0c:	1007883a 	mov	r3,r2
   1bf10:	e0bff717 	ldw	r2,-36(fp)
   1bf14:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1bf18:	e0bff717 	ldw	r2,-36(fp)
   1bf1c:	10800c03 	ldbu	r2,48(r2)
   1bf20:	10803fcc 	andi	r2,r2,255
   1bf24:	1000311e 	bne	r2,zero,1bfec <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1bf28:	e0bff717 	ldw	r2,-36(fp)
   1bf2c:	10800b8b 	ldhu	r2,46(r2)
   1bf30:	10bfffcc 	andi	r2,r2,65535
   1bf34:	1000281e 	bne	r2,zero,1bfd8 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1bf38:	e0bff717 	ldw	r2,-36(fp)
   1bf3c:	10c00d83 	ldbu	r3,54(r2)
   1bf40:	008000b4 	movhi	r2,2
   1bf44:	1093eb04 	addi	r2,r2,20396
   1bf48:	10800003 	ldbu	r2,0(r2)
   1bf4c:	1884b03a 	or	r2,r3,r2
   1bf50:	1007883a 	mov	r3,r2
   1bf54:	008000b4 	movhi	r2,2
   1bf58:	1093eb04 	addi	r2,r2,20396
   1bf5c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1bf60:	e0bff717 	ldw	r2,-36(fp)
   1bf64:	10800d03 	ldbu	r2,52(r2)
   1bf68:	10c03fcc 	andi	r3,r2,255
   1bf6c:	e0bff717 	ldw	r2,-36(fp)
   1bf70:	10800d03 	ldbu	r2,52(r2)
   1bf74:	11003fcc 	andi	r4,r2,255
   1bf78:	008000b4 	movhi	r2,2
   1bf7c:	1093eb44 	addi	r2,r2,20397
   1bf80:	1105883a 	add	r2,r2,r4
   1bf84:	11000003 	ldbu	r4,0(r2)
   1bf88:	e0bff717 	ldw	r2,-36(fp)
   1bf8c:	10800d43 	ldbu	r2,53(r2)
   1bf90:	2084b03a 	or	r2,r4,r2
   1bf94:	1009883a 	mov	r4,r2
   1bf98:	008000b4 	movhi	r2,2
   1bf9c:	1093eb44 	addi	r2,r2,20397
   1bfa0:	10c5883a 	add	r2,r2,r3
   1bfa4:	11000005 	stb	r4,0(r2)
   1bfa8:	e0bff617 	ldw	r2,-40(fp)
   1bfac:	e0bffb15 	stw	r2,-20(fp)
   1bfb0:	e0bffb17 	ldw	r2,-20(fp)
   1bfb4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1bfb8:	008000b4 	movhi	r2,2
   1bfbc:	1093df44 	addi	r2,r2,20349
   1bfc0:	10800003 	ldbu	r2,0(r2)
   1bfc4:	10803fcc 	andi	r2,r2,255
   1bfc8:	10800058 	cmpnei	r2,r2,1
   1bfcc:	10000b1e 	bne	r2,zero,1bffc <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1bfd0:	00167900 	call	16790 <OS_Sched>
   1bfd4:	00000906 	br	1bffc <OSTaskResume+0x1c8>
   1bfd8:	e0bff617 	ldw	r2,-40(fp)
   1bfdc:	e0bffc15 	stw	r2,-16(fp)
   1bfe0:	e0bffc17 	ldw	r2,-16(fp)
   1bfe4:	1001703a 	wrctl	status,r2
   1bfe8:	00000406 	br	1bffc <OSTaskResume+0x1c8>
   1bfec:	e0bff617 	ldw	r2,-40(fp)
   1bff0:	e0bffd15 	stw	r2,-12(fp)
   1bff4:	e0bffd17 	ldw	r2,-12(fp)
   1bff8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1bffc:	0005883a 	mov	r2,zero
   1c000:	00000506 	br	1c018 <OSTaskResume+0x1e4>
   1c004:	e0bff617 	ldw	r2,-40(fp)
   1c008:	e0bffe15 	stw	r2,-8(fp)
   1c00c:	e0bffe17 	ldw	r2,-8(fp)
   1c010:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1c014:	00801104 	movi	r2,68
}
   1c018:	e037883a 	mov	sp,fp
   1c01c:	dfc00117 	ldw	ra,4(sp)
   1c020:	df000017 	ldw	fp,0(sp)
   1c024:	dec00204 	addi	sp,sp,8
   1c028:	f800283a 	ret

0001c02c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1c02c:	defff304 	addi	sp,sp,-52
   1c030:	df000c15 	stw	fp,48(sp)
   1c034:	df000c04 	addi	fp,sp,48
   1c038:	2005883a 	mov	r2,r4
   1c03c:	e17fff15 	stw	r5,-4(fp)
   1c040:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c044:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1c048:	e0bffe03 	ldbu	r2,-8(fp)
   1c04c:	10800570 	cmpltui	r2,r2,21
   1c050:	1000051e 	bne	r2,zero,1c068 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1c054:	e0bffe03 	ldbu	r2,-8(fp)
   1c058:	10803fe0 	cmpeqi	r2,r2,255
   1c05c:	1000021e 	bne	r2,zero,1c068 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1c060:	00800a84 	movi	r2,42
   1c064:	00005f06 	br	1c1e4 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1c068:	e0bfff17 	ldw	r2,-4(fp)
   1c06c:	1000021e 	bne	r2,zero,1c078 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1c070:	00800244 	movi	r2,9
   1c074:	00005b06 	br	1c1e4 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1c078:	e0bfff17 	ldw	r2,-4(fp)
   1c07c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1c080:	e0bfff17 	ldw	r2,-4(fp)
   1c084:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c088:	0005303a 	rdctl	r2,status
   1c08c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c090:	e0fff917 	ldw	r3,-28(fp)
   1c094:	00bfff84 	movi	r2,-2
   1c098:	1884703a 	and	r2,r3,r2
   1c09c:	1001703a 	wrctl	status,r2
  
  return context;
   1c0a0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1c0a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1c0a8:	e0bffe03 	ldbu	r2,-8(fp)
   1c0ac:	10803fd8 	cmpnei	r2,r2,255
   1c0b0:	1000051e 	bne	r2,zero,1c0c8 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c0b4:	008000b4 	movhi	r2,2
   1c0b8:	1093ee04 	addi	r2,r2,20408
   1c0bc:	10800017 	ldw	r2,0(r2)
   1c0c0:	10800c83 	ldbu	r2,50(r2)
   1c0c4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c0c8:	e0fffe03 	ldbu	r3,-8(fp)
   1c0cc:	008000f4 	movhi	r2,3
   1c0d0:	10b07504 	addi	r2,r2,-15916
   1c0d4:	18c7883a 	add	r3,r3,r3
   1c0d8:	18c7883a 	add	r3,r3,r3
   1c0dc:	10c5883a 	add	r2,r2,r3
   1c0e0:	10800017 	ldw	r2,0(r2)
   1c0e4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1c0e8:	e0bff717 	ldw	r2,-36(fp)
   1c0ec:	1000061e 	bne	r2,zero,1c108 <OSTaskStkChk+0xdc>
   1c0f0:	e0bff617 	ldw	r2,-40(fp)
   1c0f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0f8:	e0bffa17 	ldw	r2,-24(fp)
   1c0fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c100:	008010c4 	movi	r2,67
   1c104:	00003706 	br	1c1e4 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1c108:	e0bff717 	ldw	r2,-36(fp)
   1c10c:	10800058 	cmpnei	r2,r2,1
   1c110:	1000061e 	bne	r2,zero,1c12c <OSTaskStkChk+0x100>
   1c114:	e0bff617 	ldw	r2,-40(fp)
   1c118:	e0bffb15 	stw	r2,-20(fp)
   1c11c:	e0bffb17 	ldw	r2,-20(fp)
   1c120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c124:	008010c4 	movi	r2,67
   1c128:	00002e06 	br	1c1e4 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1c12c:	e0bff717 	ldw	r2,-36(fp)
   1c130:	1080040b 	ldhu	r2,16(r2)
   1c134:	10bfffcc 	andi	r2,r2,65535
   1c138:	1080004c 	andi	r2,r2,1
   1c13c:	1000061e 	bne	r2,zero,1c158 <OSTaskStkChk+0x12c>
   1c140:	e0bff617 	ldw	r2,-40(fp)
   1c144:	e0bffc15 	stw	r2,-16(fp)
   1c148:	e0bffc17 	ldw	r2,-16(fp)
   1c14c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1c150:	00801144 	movi	r2,69
   1c154:	00002306 	br	1c1e4 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1c158:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1c15c:	e0bff717 	ldw	r2,-36(fp)
   1c160:	10800317 	ldw	r2,12(r2)
   1c164:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1c168:	e0bff717 	ldw	r2,-36(fp)
   1c16c:	10800217 	ldw	r2,8(r2)
   1c170:	e0bff415 	stw	r2,-48(fp)
   1c174:	e0bff617 	ldw	r2,-40(fp)
   1c178:	e0bffd15 	stw	r2,-12(fp)
   1c17c:	e0bffd17 	ldw	r2,-12(fp)
   1c180:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c184:	00000306 	br	1c194 <OSTaskStkChk+0x168>
        nfree++;
   1c188:	e0bff517 	ldw	r2,-44(fp)
   1c18c:	10800044 	addi	r2,r2,1
   1c190:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c194:	e0bff417 	ldw	r2,-48(fp)
   1c198:	10c00104 	addi	r3,r2,4
   1c19c:	e0fff415 	stw	r3,-48(fp)
   1c1a0:	10800017 	ldw	r2,0(r2)
   1c1a4:	103ff826 	beq	r2,zero,1c188 <__alt_mem_Flash_flash_data+0xf401c188>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1c1a8:	e0bff517 	ldw	r2,-44(fp)
   1c1ac:	1085883a 	add	r2,r2,r2
   1c1b0:	1085883a 	add	r2,r2,r2
   1c1b4:	1007883a 	mov	r3,r2
   1c1b8:	e0bfff17 	ldw	r2,-4(fp)
   1c1bc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1c1c0:	e0fff817 	ldw	r3,-32(fp)
   1c1c4:	e0bff517 	ldw	r2,-44(fp)
   1c1c8:	1885c83a 	sub	r2,r3,r2
   1c1cc:	1085883a 	add	r2,r2,r2
   1c1d0:	1085883a 	add	r2,r2,r2
   1c1d4:	1007883a 	mov	r3,r2
   1c1d8:	e0bfff17 	ldw	r2,-4(fp)
   1c1dc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1c1e0:	0005883a 	mov	r2,zero
}
   1c1e4:	e037883a 	mov	sp,fp
   1c1e8:	df000017 	ldw	fp,0(sp)
   1c1ec:	dec00104 	addi	sp,sp,4
   1c1f0:	f800283a 	ret

0001c1f4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1c1f4:	defff504 	addi	sp,sp,-44
   1c1f8:	dfc00a15 	stw	ra,40(sp)
   1c1fc:	df000915 	stw	fp,36(sp)
   1c200:	df000904 	addi	fp,sp,36
   1c204:	2005883a 	mov	r2,r4
   1c208:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c20c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1c210:	e0bfff03 	ldbu	r2,-4(fp)
   1c214:	10800518 	cmpnei	r2,r2,20
   1c218:	1000021e 	bne	r2,zero,1c224 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1c21c:	008011c4 	movi	r2,71
   1c220:	00007406 	br	1c3f4 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1c224:	e0bfff03 	ldbu	r2,-4(fp)
   1c228:	10800530 	cmpltui	r2,r2,20
   1c22c:	1000051e 	bne	r2,zero,1c244 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1c230:	e0bfff03 	ldbu	r2,-4(fp)
   1c234:	10803fe0 	cmpeqi	r2,r2,255
   1c238:	1000021e 	bne	r2,zero,1c244 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1c23c:	00800a84 	movi	r2,42
   1c240:	00006c06 	br	1c3f4 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c244:	0005303a 	rdctl	r2,status
   1c248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c24c:	e0fffb17 	ldw	r3,-20(fp)
   1c250:	00bfff84 	movi	r2,-2
   1c254:	1884703a 	and	r2,r3,r2
   1c258:	1001703a 	wrctl	status,r2
  
  return context;
   1c25c:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1c260:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1c264:	e0bfff03 	ldbu	r2,-4(fp)
   1c268:	10803fd8 	cmpnei	r2,r2,255
   1c26c:	1000081e 	bne	r2,zero,1c290 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c270:	008000b4 	movhi	r2,2
   1c274:	1093ee04 	addi	r2,r2,20408
   1c278:	10800017 	ldw	r2,0(r2)
   1c27c:	10800c83 	ldbu	r2,50(r2)
   1c280:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1c284:	00800044 	movi	r2,1
   1c288:	e0bff705 	stb	r2,-36(fp)
   1c28c:	00000b06 	br	1c2bc <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1c290:	008000b4 	movhi	r2,2
   1c294:	1093ee04 	addi	r2,r2,20408
   1c298:	10800017 	ldw	r2,0(r2)
   1c29c:	10800c83 	ldbu	r2,50(r2)
   1c2a0:	10c03fcc 	andi	r3,r2,255
   1c2a4:	e0bfff03 	ldbu	r2,-4(fp)
   1c2a8:	1880031e 	bne	r3,r2,1c2b8 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1c2ac:	00800044 	movi	r2,1
   1c2b0:	e0bff705 	stb	r2,-36(fp)
   1c2b4:	00000106 	br	1c2bc <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1c2b8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c2bc:	e0ffff03 	ldbu	r3,-4(fp)
   1c2c0:	008000f4 	movhi	r2,3
   1c2c4:	10b07504 	addi	r2,r2,-15916
   1c2c8:	18c7883a 	add	r3,r3,r3
   1c2cc:	18c7883a 	add	r3,r3,r3
   1c2d0:	10c5883a 	add	r2,r2,r3
   1c2d4:	10800017 	ldw	r2,0(r2)
   1c2d8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1c2dc:	e0bff917 	ldw	r2,-28(fp)
   1c2e0:	1000061e 	bne	r2,zero,1c2fc <OSTaskSuspend+0x108>
   1c2e4:	e0bff817 	ldw	r2,-32(fp)
   1c2e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c2ec:	e0bffc17 	ldw	r2,-16(fp)
   1c2f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1c2f4:	00801204 	movi	r2,72
   1c2f8:	00003e06 	br	1c3f4 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1c2fc:	e0bff917 	ldw	r2,-28(fp)
   1c300:	10800058 	cmpnei	r2,r2,1
   1c304:	1000061e 	bne	r2,zero,1c320 <OSTaskSuspend+0x12c>
   1c308:	e0bff817 	ldw	r2,-32(fp)
   1c30c:	e0bffd15 	stw	r2,-12(fp)
   1c310:	e0bffd17 	ldw	r2,-12(fp)
   1c314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c318:	008010c4 	movi	r2,67
   1c31c:	00003506 	br	1c3f4 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1c320:	e0bff917 	ldw	r2,-28(fp)
   1c324:	10800d03 	ldbu	r2,52(r2)
   1c328:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1c32c:	e0fffa03 	ldbu	r3,-24(fp)
   1c330:	e13ffa03 	ldbu	r4,-24(fp)
   1c334:	008000b4 	movhi	r2,2
   1c338:	1093eb44 	addi	r2,r2,20397
   1c33c:	1105883a 	add	r2,r2,r4
   1c340:	10800003 	ldbu	r2,0(r2)
   1c344:	1009883a 	mov	r4,r2
   1c348:	e0bff917 	ldw	r2,-28(fp)
   1c34c:	10800d43 	ldbu	r2,53(r2)
   1c350:	0084303a 	nor	r2,zero,r2
   1c354:	2084703a 	and	r2,r4,r2
   1c358:	1009883a 	mov	r4,r2
   1c35c:	008000b4 	movhi	r2,2
   1c360:	1093eb44 	addi	r2,r2,20397
   1c364:	10c5883a 	add	r2,r2,r3
   1c368:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c36c:	e0fffa03 	ldbu	r3,-24(fp)
   1c370:	008000b4 	movhi	r2,2
   1c374:	1093eb44 	addi	r2,r2,20397
   1c378:	10c5883a 	add	r2,r2,r3
   1c37c:	10800003 	ldbu	r2,0(r2)
   1c380:	10803fcc 	andi	r2,r2,255
   1c384:	10000c1e 	bne	r2,zero,1c3b8 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1c388:	e0bff917 	ldw	r2,-28(fp)
   1c38c:	10800d83 	ldbu	r2,54(r2)
   1c390:	0084303a 	nor	r2,zero,r2
   1c394:	1007883a 	mov	r3,r2
   1c398:	008000b4 	movhi	r2,2
   1c39c:	1093eb04 	addi	r2,r2,20396
   1c3a0:	10800003 	ldbu	r2,0(r2)
   1c3a4:	1884703a 	and	r2,r3,r2
   1c3a8:	1007883a 	mov	r3,r2
   1c3ac:	008000b4 	movhi	r2,2
   1c3b0:	1093eb04 	addi	r2,r2,20396
   1c3b4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1c3b8:	e0bff917 	ldw	r2,-28(fp)
   1c3bc:	10800c03 	ldbu	r2,48(r2)
   1c3c0:	10800214 	ori	r2,r2,8
   1c3c4:	1007883a 	mov	r3,r2
   1c3c8:	e0bff917 	ldw	r2,-28(fp)
   1c3cc:	10c00c05 	stb	r3,48(r2)
   1c3d0:	e0bff817 	ldw	r2,-32(fp)
   1c3d4:	e0bffe15 	stw	r2,-8(fp)
   1c3d8:	e0bffe17 	ldw	r2,-8(fp)
   1c3dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1c3e0:	e0bff703 	ldbu	r2,-36(fp)
   1c3e4:	10800058 	cmpnei	r2,r2,1
   1c3e8:	1000011e 	bne	r2,zero,1c3f0 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1c3ec:	00167900 	call	16790 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1c3f0:	0005883a 	mov	r2,zero
}
   1c3f4:	e037883a 	mov	sp,fp
   1c3f8:	dfc00117 	ldw	ra,4(sp)
   1c3fc:	df000017 	ldw	fp,0(sp)
   1c400:	dec00204 	addi	sp,sp,8
   1c404:	f800283a 	ret

0001c408 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1c408:	defff604 	addi	sp,sp,-40
   1c40c:	dfc00915 	stw	ra,36(sp)
   1c410:	df000815 	stw	fp,32(sp)
   1c414:	df000804 	addi	fp,sp,32
   1c418:	2005883a 	mov	r2,r4
   1c41c:	e17fff15 	stw	r5,-4(fp)
   1c420:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c424:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1c428:	e0bffe03 	ldbu	r2,-8(fp)
   1c42c:	10800570 	cmpltui	r2,r2,21
   1c430:	1000051e 	bne	r2,zero,1c448 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1c434:	e0bffe03 	ldbu	r2,-8(fp)
   1c438:	10803fe0 	cmpeqi	r2,r2,255
   1c43c:	1000021e 	bne	r2,zero,1c448 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1c440:	00800a84 	movi	r2,42
   1c444:	00003606 	br	1c520 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1c448:	e0bfff17 	ldw	r2,-4(fp)
   1c44c:	1000021e 	bne	r2,zero,1c458 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1c450:	00800244 	movi	r2,9
   1c454:	00003206 	br	1c520 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c458:	0005303a 	rdctl	r2,status
   1c45c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c460:	e0fffa17 	ldw	r3,-24(fp)
   1c464:	00bfff84 	movi	r2,-2
   1c468:	1884703a 	and	r2,r3,r2
   1c46c:	1001703a 	wrctl	status,r2
  
  return context;
   1c470:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c474:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1c478:	e0bffe03 	ldbu	r2,-8(fp)
   1c47c:	10803fd8 	cmpnei	r2,r2,255
   1c480:	1000051e 	bne	r2,zero,1c498 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1c484:	008000b4 	movhi	r2,2
   1c488:	1093ee04 	addi	r2,r2,20408
   1c48c:	10800017 	ldw	r2,0(r2)
   1c490:	10800c83 	ldbu	r2,50(r2)
   1c494:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c498:	e0fffe03 	ldbu	r3,-8(fp)
   1c49c:	008000f4 	movhi	r2,3
   1c4a0:	10b07504 	addi	r2,r2,-15916
   1c4a4:	18c7883a 	add	r3,r3,r3
   1c4a8:	18c7883a 	add	r3,r3,r3
   1c4ac:	10c5883a 	add	r2,r2,r3
   1c4b0:	10800017 	ldw	r2,0(r2)
   1c4b4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1c4b8:	e0bff917 	ldw	r2,-28(fp)
   1c4bc:	1000061e 	bne	r2,zero,1c4d8 <OSTaskQuery+0xd0>
   1c4c0:	e0bff817 	ldw	r2,-32(fp)
   1c4c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c4c8:	e0bffb17 	ldw	r2,-20(fp)
   1c4cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1c4d0:	00800a44 	movi	r2,41
   1c4d4:	00001206 	br	1c520 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1c4d8:	e0bff917 	ldw	r2,-28(fp)
   1c4dc:	10800058 	cmpnei	r2,r2,1
   1c4e0:	1000061e 	bne	r2,zero,1c4fc <OSTaskQuery+0xf4>
   1c4e4:	e0bff817 	ldw	r2,-32(fp)
   1c4e8:	e0bffc15 	stw	r2,-16(fp)
   1c4ec:	e0bffc17 	ldw	r2,-16(fp)
   1c4f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c4f4:	008010c4 	movi	r2,67
   1c4f8:	00000906 	br	1c520 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1c4fc:	e13fff17 	ldw	r4,-4(fp)
   1c500:	e17ff917 	ldw	r5,-28(fp)
   1c504:	01801b04 	movi	r6,108
   1c508:	001672c0 	call	1672c <OS_MemCopy>
   1c50c:	e0bff817 	ldw	r2,-32(fp)
   1c510:	e0bffd15 	stw	r2,-12(fp)
   1c514:	e0bffd17 	ldw	r2,-12(fp)
   1c518:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1c51c:	0005883a 	mov	r2,zero
}
   1c520:	e037883a 	mov	sp,fp
   1c524:	dfc00117 	ldw	ra,4(sp)
   1c528:	df000017 	ldw	fp,0(sp)
   1c52c:	dec00204 	addi	sp,sp,8
   1c530:	f800283a 	ret

0001c534 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1c534:	defffc04 	addi	sp,sp,-16
   1c538:	df000315 	stw	fp,12(sp)
   1c53c:	df000304 	addi	fp,sp,12
   1c540:	e13ffd15 	stw	r4,-12(fp)
   1c544:	e17ffe15 	stw	r5,-8(fp)
   1c548:	3005883a 	mov	r2,r6
   1c54c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1c550:	e0bfff0b 	ldhu	r2,-4(fp)
   1c554:	1080004c 	andi	r2,r2,1
   1c558:	10000d26 	beq	r2,zero,1c590 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1c55c:	e0bfff0b 	ldhu	r2,-4(fp)
   1c560:	1080008c 	andi	r2,r2,2
   1c564:	10000a26 	beq	r2,zero,1c590 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1c568:	00000706 	br	1c588 <OS_TaskStkClr+0x54>
                size--;
   1c56c:	e0bffe17 	ldw	r2,-8(fp)
   1c570:	10bfffc4 	addi	r2,r2,-1
   1c574:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1c578:	e0bffd17 	ldw	r2,-12(fp)
   1c57c:	10c00104 	addi	r3,r2,4
   1c580:	e0fffd15 	stw	r3,-12(fp)
   1c584:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1c588:	e0bffe17 	ldw	r2,-8(fp)
   1c58c:	103ff71e 	bne	r2,zero,1c56c <__alt_mem_Flash_flash_data+0xf401c56c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1c590:	e037883a 	mov	sp,fp
   1c594:	df000017 	ldw	fp,0(sp)
   1c598:	dec00104 	addi	sp,sp,4
   1c59c:	f800283a 	ret

0001c5a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1c5a0:	defff904 	addi	sp,sp,-28
   1c5a4:	dfc00615 	stw	ra,24(sp)
   1c5a8:	df000515 	stw	fp,20(sp)
   1c5ac:	df000504 	addi	fp,sp,20
   1c5b0:	2005883a 	mov	r2,r4
   1c5b4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c5b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1c5bc:	008000b4 	movhi	r2,2
   1c5c0:	1093ed04 	addi	r2,r2,20404
   1c5c4:	10800003 	ldbu	r2,0(r2)
   1c5c8:	10803fcc 	andi	r2,r2,255
   1c5cc:	10000126 	beq	r2,zero,1c5d4 <OSTimeDly+0x34>
        return;
   1c5d0:	00004006 	br	1c6d4 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1c5d4:	e0bfff0b 	ldhu	r2,-4(fp)
   1c5d8:	10003e26 	beq	r2,zero,1c6d4 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c5dc:	0005303a 	rdctl	r2,status
   1c5e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c5e4:	e0fffd17 	ldw	r3,-12(fp)
   1c5e8:	00bfff84 	movi	r2,-2
   1c5ec:	1884703a 	and	r2,r3,r2
   1c5f0:	1001703a 	wrctl	status,r2
  
  return context;
   1c5f4:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1c5f8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1c5fc:	008000b4 	movhi	r2,2
   1c600:	1093ee04 	addi	r2,r2,20408
   1c604:	10800017 	ldw	r2,0(r2)
   1c608:	10800d03 	ldbu	r2,52(r2)
   1c60c:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1c610:	e0fffc03 	ldbu	r3,-16(fp)
   1c614:	e13ffc03 	ldbu	r4,-16(fp)
   1c618:	008000b4 	movhi	r2,2
   1c61c:	1093eb44 	addi	r2,r2,20397
   1c620:	1105883a 	add	r2,r2,r4
   1c624:	10800003 	ldbu	r2,0(r2)
   1c628:	1009883a 	mov	r4,r2
   1c62c:	008000b4 	movhi	r2,2
   1c630:	1093ee04 	addi	r2,r2,20408
   1c634:	10800017 	ldw	r2,0(r2)
   1c638:	10800d43 	ldbu	r2,53(r2)
   1c63c:	0084303a 	nor	r2,zero,r2
   1c640:	2084703a 	and	r2,r4,r2
   1c644:	1009883a 	mov	r4,r2
   1c648:	008000b4 	movhi	r2,2
   1c64c:	1093eb44 	addi	r2,r2,20397
   1c650:	10c5883a 	add	r2,r2,r3
   1c654:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1c658:	e0fffc03 	ldbu	r3,-16(fp)
   1c65c:	008000b4 	movhi	r2,2
   1c660:	1093eb44 	addi	r2,r2,20397
   1c664:	10c5883a 	add	r2,r2,r3
   1c668:	10800003 	ldbu	r2,0(r2)
   1c66c:	10803fcc 	andi	r2,r2,255
   1c670:	10000e1e 	bne	r2,zero,1c6ac <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1c674:	008000b4 	movhi	r2,2
   1c678:	1093ee04 	addi	r2,r2,20408
   1c67c:	10800017 	ldw	r2,0(r2)
   1c680:	10800d83 	ldbu	r2,54(r2)
   1c684:	0084303a 	nor	r2,zero,r2
   1c688:	1007883a 	mov	r3,r2
   1c68c:	008000b4 	movhi	r2,2
   1c690:	1093eb04 	addi	r2,r2,20396
   1c694:	10800003 	ldbu	r2,0(r2)
   1c698:	1884703a 	and	r2,r3,r2
   1c69c:	1007883a 	mov	r3,r2
   1c6a0:	008000b4 	movhi	r2,2
   1c6a4:	1093eb04 	addi	r2,r2,20396
   1c6a8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1c6ac:	008000b4 	movhi	r2,2
   1c6b0:	1093ee04 	addi	r2,r2,20408
   1c6b4:	10800017 	ldw	r2,0(r2)
   1c6b8:	e0ffff0b 	ldhu	r3,-4(fp)
   1c6bc:	10c00b8d 	sth	r3,46(r2)
   1c6c0:	e0bffb17 	ldw	r2,-20(fp)
   1c6c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c6c8:	e0bffe17 	ldw	r2,-8(fp)
   1c6cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1c6d0:	00167900 	call	16790 <OS_Sched>
    }
}
   1c6d4:	e037883a 	mov	sp,fp
   1c6d8:	dfc00117 	ldw	ra,4(sp)
   1c6dc:	df000017 	ldw	fp,0(sp)
   1c6e0:	dec00204 	addi	sp,sp,8
   1c6e4:	f800283a 	ret

0001c6e8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1c6e8:	defff804 	addi	sp,sp,-32
   1c6ec:	dfc00715 	stw	ra,28(sp)
   1c6f0:	df000615 	stw	fp,24(sp)
   1c6f4:	df000604 	addi	fp,sp,24
   1c6f8:	2015883a 	mov	r10,r4
   1c6fc:	2809883a 	mov	r4,r5
   1c700:	3007883a 	mov	r3,r6
   1c704:	3805883a 	mov	r2,r7
   1c708:	e2bffc05 	stb	r10,-16(fp)
   1c70c:	e13ffd05 	stb	r4,-12(fp)
   1c710:	e0fffe05 	stb	r3,-8(fp)
   1c714:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1c718:	008000b4 	movhi	r2,2
   1c71c:	1093ed04 	addi	r2,r2,20404
   1c720:	10800003 	ldbu	r2,0(r2)
   1c724:	10803fcc 	andi	r2,r2,255
   1c728:	10000226 	beq	r2,zero,1c734 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1c72c:	00801544 	movi	r2,85
   1c730:	00004206 	br	1c83c <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1c734:	e0bffc03 	ldbu	r2,-16(fp)
   1c738:	1000081e 	bne	r2,zero,1c75c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1c73c:	e0bffd03 	ldbu	r2,-12(fp)
   1c740:	1000061e 	bne	r2,zero,1c75c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1c744:	e0bffe03 	ldbu	r2,-8(fp)
   1c748:	1000041e 	bne	r2,zero,1c75c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1c74c:	e0bfff0b 	ldhu	r2,-4(fp)
   1c750:	1000021e 	bne	r2,zero,1c75c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1c754:	00801504 	movi	r2,84
   1c758:	00003806 	br	1c83c <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1c75c:	e0bffd03 	ldbu	r2,-12(fp)
   1c760:	10800f30 	cmpltui	r2,r2,60
   1c764:	1000021e 	bne	r2,zero,1c770 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1c768:	00801444 	movi	r2,81
   1c76c:	00003306 	br	1c83c <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1c770:	e0bffe03 	ldbu	r2,-8(fp)
   1c774:	10800f30 	cmpltui	r2,r2,60
   1c778:	1000021e 	bne	r2,zero,1c784 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1c77c:	00801484 	movi	r2,82
   1c780:	00002e06 	br	1c83c <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1c784:	e0bfff0b 	ldhu	r2,-4(fp)
   1c788:	1080fa30 	cmpltui	r2,r2,1000
   1c78c:	1000021e 	bne	r2,zero,1c798 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1c790:	008014c4 	movi	r2,83
   1c794:	00002906 	br	1c83c <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1c798:	e0bffc03 	ldbu	r2,-16(fp)
   1c79c:	10c38424 	muli	r3,r2,3600
   1c7a0:	e0bffd03 	ldbu	r2,-12(fp)
   1c7a4:	10800f24 	muli	r2,r2,60
   1c7a8:	1887883a 	add	r3,r3,r2
   1c7ac:	e0bffe03 	ldbu	r2,-8(fp)
   1c7b0:	1885883a 	add	r2,r3,r2
   1c7b4:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1c7b8:	e0bfff0b 	ldhu	r2,-4(fp)
   1c7bc:	10800f84 	addi	r2,r2,62
   1c7c0:	100690fa 	slli	r3,r2,3
   1c7c4:	008418b4 	movhi	r2,4194
   1c7c8:	109374c4 	addi	r2,r2,19923
   1c7cc:	188a383a 	mulxuu	r5,r3,r2
   1c7d0:	1885383a 	mul	r2,r3,r2
   1c7d4:	1011883a 	mov	r8,r2
   1c7d8:	2813883a 	mov	r9,r5
   1c7dc:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1c7e0:	2085883a 	add	r2,r4,r2
   1c7e4:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1c7e8:	e0bffb17 	ldw	r2,-20(fp)
   1c7ec:	1004d43a 	srli	r2,r2,16
   1c7f0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1c7f4:	e0bffb17 	ldw	r2,-20(fp)
   1c7f8:	10bfffcc 	andi	r2,r2,65535
   1c7fc:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1c800:	e0bffb17 	ldw	r2,-20(fp)
   1c804:	10bfffcc 	andi	r2,r2,65535
   1c808:	1009883a 	mov	r4,r2
   1c80c:	001c5a00 	call	1c5a0 <OSTimeDly>
    while (loops > 0) {
   1c810:	00000706 	br	1c830 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1c814:	01200014 	movui	r4,32768
   1c818:	001c5a00 	call	1c5a0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1c81c:	01200014 	movui	r4,32768
   1c820:	001c5a00 	call	1c5a0 <OSTimeDly>
        loops--;
   1c824:	e0bffa0b 	ldhu	r2,-24(fp)
   1c828:	10bfffc4 	addi	r2,r2,-1
   1c82c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1c830:	e0bffa0b 	ldhu	r2,-24(fp)
   1c834:	103ff71e 	bne	r2,zero,1c814 <__alt_mem_Flash_flash_data+0xf401c814>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1c838:	0005883a 	mov	r2,zero
}
   1c83c:	e037883a 	mov	sp,fp
   1c840:	dfc00117 	ldw	ra,4(sp)
   1c844:	df000017 	ldw	fp,0(sp)
   1c848:	dec00204 	addi	sp,sp,8
   1c84c:	f800283a 	ret

0001c850 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1c850:	defff504 	addi	sp,sp,-44
   1c854:	dfc00a15 	stw	ra,40(sp)
   1c858:	df000915 	stw	fp,36(sp)
   1c85c:	df000904 	addi	fp,sp,36
   1c860:	2005883a 	mov	r2,r4
   1c864:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1c868:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1c86c:	e0bfff03 	ldbu	r2,-4(fp)
   1c870:	10800530 	cmpltui	r2,r2,20
   1c874:	1000021e 	bne	r2,zero,1c880 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1c878:	00800a84 	movi	r2,42
   1c87c:	00006b06 	br	1ca2c <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c880:	0005303a 	rdctl	r2,status
   1c884:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c888:	e0fff917 	ldw	r3,-28(fp)
   1c88c:	00bfff84 	movi	r2,-2
   1c890:	1884703a 	and	r2,r3,r2
   1c894:	1001703a 	wrctl	status,r2
  
  return context;
   1c898:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1c89c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1c8a0:	e0ffff03 	ldbu	r3,-4(fp)
   1c8a4:	008000f4 	movhi	r2,3
   1c8a8:	10b07504 	addi	r2,r2,-15916
   1c8ac:	18c7883a 	add	r3,r3,r3
   1c8b0:	18c7883a 	add	r3,r3,r3
   1c8b4:	10c5883a 	add	r2,r2,r3
   1c8b8:	10800017 	ldw	r2,0(r2)
   1c8bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1c8c0:	e0bff817 	ldw	r2,-32(fp)
   1c8c4:	1000061e 	bne	r2,zero,1c8e0 <OSTimeDlyResume+0x90>
   1c8c8:	e0bff717 	ldw	r2,-36(fp)
   1c8cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c8d0:	e0bffa17 	ldw	r2,-24(fp)
   1c8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1c8d8:	008010c4 	movi	r2,67
   1c8dc:	00005306 	br	1ca2c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1c8e0:	e0bff817 	ldw	r2,-32(fp)
   1c8e4:	10800058 	cmpnei	r2,r2,1
   1c8e8:	1000061e 	bne	r2,zero,1c904 <OSTimeDlyResume+0xb4>
   1c8ec:	e0bff717 	ldw	r2,-36(fp)
   1c8f0:	e0bffb15 	stw	r2,-20(fp)
   1c8f4:	e0bffb17 	ldw	r2,-20(fp)
   1c8f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1c8fc:	008010c4 	movi	r2,67
   1c900:	00004a06 	br	1ca2c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1c904:	e0bff817 	ldw	r2,-32(fp)
   1c908:	10800b8b 	ldhu	r2,46(r2)
   1c90c:	10bfffcc 	andi	r2,r2,65535
   1c910:	1000061e 	bne	r2,zero,1c92c <OSTimeDlyResume+0xdc>
   1c914:	e0bff717 	ldw	r2,-36(fp)
   1c918:	e0bffc15 	stw	r2,-16(fp)
   1c91c:	e0bffc17 	ldw	r2,-16(fp)
   1c920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1c924:	00801404 	movi	r2,80
   1c928:	00004006 	br	1ca2c <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1c92c:	e0bff817 	ldw	r2,-32(fp)
   1c930:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1c934:	e0bff817 	ldw	r2,-32(fp)
   1c938:	10800c03 	ldbu	r2,48(r2)
   1c93c:	10803fcc 	andi	r2,r2,255
   1c940:	10800dcc 	andi	r2,r2,55
   1c944:	10000b26 	beq	r2,zero,1c974 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1c948:	e0bff817 	ldw	r2,-32(fp)
   1c94c:	10c00c03 	ldbu	r3,48(r2)
   1c950:	00bff204 	movi	r2,-56
   1c954:	1884703a 	and	r2,r3,r2
   1c958:	1007883a 	mov	r3,r2
   1c95c:	e0bff817 	ldw	r2,-32(fp)
   1c960:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1c964:	e0bff817 	ldw	r2,-32(fp)
   1c968:	00c00044 	movi	r3,1
   1c96c:	10c00c45 	stb	r3,49(r2)
   1c970:	00000206 	br	1c97c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1c974:	e0bff817 	ldw	r2,-32(fp)
   1c978:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1c97c:	e0bff817 	ldw	r2,-32(fp)
   1c980:	10800c03 	ldbu	r2,48(r2)
   1c984:	10803fcc 	andi	r2,r2,255
   1c988:	1080020c 	andi	r2,r2,8
   1c98c:	1000221e 	bne	r2,zero,1ca18 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1c990:	e0bff817 	ldw	r2,-32(fp)
   1c994:	10c00d83 	ldbu	r3,54(r2)
   1c998:	008000b4 	movhi	r2,2
   1c99c:	1093eb04 	addi	r2,r2,20396
   1c9a0:	10800003 	ldbu	r2,0(r2)
   1c9a4:	1884b03a 	or	r2,r3,r2
   1c9a8:	1007883a 	mov	r3,r2
   1c9ac:	008000b4 	movhi	r2,2
   1c9b0:	1093eb04 	addi	r2,r2,20396
   1c9b4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1c9b8:	e0bff817 	ldw	r2,-32(fp)
   1c9bc:	10800d03 	ldbu	r2,52(r2)
   1c9c0:	10c03fcc 	andi	r3,r2,255
   1c9c4:	e0bff817 	ldw	r2,-32(fp)
   1c9c8:	10800d03 	ldbu	r2,52(r2)
   1c9cc:	11003fcc 	andi	r4,r2,255
   1c9d0:	008000b4 	movhi	r2,2
   1c9d4:	1093eb44 	addi	r2,r2,20397
   1c9d8:	1105883a 	add	r2,r2,r4
   1c9dc:	11000003 	ldbu	r4,0(r2)
   1c9e0:	e0bff817 	ldw	r2,-32(fp)
   1c9e4:	10800d43 	ldbu	r2,53(r2)
   1c9e8:	2084b03a 	or	r2,r4,r2
   1c9ec:	1009883a 	mov	r4,r2
   1c9f0:	008000b4 	movhi	r2,2
   1c9f4:	1093eb44 	addi	r2,r2,20397
   1c9f8:	10c5883a 	add	r2,r2,r3
   1c9fc:	11000005 	stb	r4,0(r2)
   1ca00:	e0bff717 	ldw	r2,-36(fp)
   1ca04:	e0bffd15 	stw	r2,-12(fp)
   1ca08:	e0bffd17 	ldw	r2,-12(fp)
   1ca0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1ca10:	00167900 	call	16790 <OS_Sched>
   1ca14:	00000406 	br	1ca28 <OSTimeDlyResume+0x1d8>
   1ca18:	e0bff717 	ldw	r2,-36(fp)
   1ca1c:	e0bffe15 	stw	r2,-8(fp)
   1ca20:	e0bffe17 	ldw	r2,-8(fp)
   1ca24:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1ca28:	0005883a 	mov	r2,zero
}
   1ca2c:	e037883a 	mov	sp,fp
   1ca30:	dfc00117 	ldw	ra,4(sp)
   1ca34:	df000017 	ldw	fp,0(sp)
   1ca38:	dec00204 	addi	sp,sp,8
   1ca3c:	f800283a 	ret

0001ca40 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1ca40:	defffb04 	addi	sp,sp,-20
   1ca44:	df000415 	stw	fp,16(sp)
   1ca48:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ca4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ca50:	0005303a 	rdctl	r2,status
   1ca54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ca58:	e0fffe17 	ldw	r3,-8(fp)
   1ca5c:	00bfff84 	movi	r2,-2
   1ca60:	1884703a 	and	r2,r3,r2
   1ca64:	1001703a 	wrctl	status,r2
  
  return context;
   1ca68:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1ca6c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1ca70:	008000b4 	movhi	r2,2
   1ca74:	1093ef04 	addi	r2,r2,20412
   1ca78:	10800017 	ldw	r2,0(r2)
   1ca7c:	e0bffd15 	stw	r2,-12(fp)
   1ca80:	e0bffc17 	ldw	r2,-16(fp)
   1ca84:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ca88:	e0bfff17 	ldw	r2,-4(fp)
   1ca8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1ca90:	e0bffd17 	ldw	r2,-12(fp)
}
   1ca94:	e037883a 	mov	sp,fp
   1ca98:	df000017 	ldw	fp,0(sp)
   1ca9c:	dec00104 	addi	sp,sp,4
   1caa0:	f800283a 	ret

0001caa4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1caa4:	defffb04 	addi	sp,sp,-20
   1caa8:	df000415 	stw	fp,16(sp)
   1caac:	df000404 	addi	fp,sp,16
   1cab0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1cab4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cab8:	0005303a 	rdctl	r2,status
   1cabc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cac0:	e0fffd17 	ldw	r3,-12(fp)
   1cac4:	00bfff84 	movi	r2,-2
   1cac8:	1884703a 	and	r2,r3,r2
   1cacc:	1001703a 	wrctl	status,r2
  
  return context;
   1cad0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1cad4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1cad8:	008000b4 	movhi	r2,2
   1cadc:	1093ef04 	addi	r2,r2,20412
   1cae0:	e0ffff17 	ldw	r3,-4(fp)
   1cae4:	10c00015 	stw	r3,0(r2)
   1cae8:	e0bffc17 	ldw	r2,-16(fp)
   1caec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1caf0:	e0bffe17 	ldw	r2,-8(fp)
   1caf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1caf8:	e037883a 	mov	sp,fp
   1cafc:	df000017 	ldw	fp,0(sp)
   1cb00:	dec00104 	addi	sp,sp,4
   1cb04:	f800283a 	ret

0001cb08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1cb08:	defffd04 	addi	sp,sp,-12
   1cb0c:	dfc00215 	stw	ra,8(sp)
   1cb10:	df000115 	stw	fp,4(sp)
   1cb14:	df000104 	addi	fp,sp,4
   1cb18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1cb1c:	e13fff17 	ldw	r4,-4(fp)
   1cb20:	014000b4 	movhi	r5,2
   1cb24:	294be704 	addi	r5,r5,12188
   1cb28:	001f49c0 	call	1f49c <alt_dev_llist_insert>
}
   1cb2c:	e037883a 	mov	sp,fp
   1cb30:	dfc00117 	ldw	ra,4(sp)
   1cb34:	df000017 	ldw	fp,0(sp)
   1cb38:	dec00204 	addi	sp,sp,8
   1cb3c:	f800283a 	ret

0001cb40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1cb40:	defffd04 	addi	sp,sp,-12
   1cb44:	dfc00215 	stw	ra,8(sp)
   1cb48:	df000115 	stw	fp,4(sp)
   1cb4c:	df000104 	addi	fp,sp,4
   1cb50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1cb54:	001fdb00 	call	1fdb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1cb58:	00800044 	movi	r2,1
   1cb5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1cb60:	e037883a 	mov	sp,fp
   1cb64:	dfc00117 	ldw	ra,4(sp)
   1cb68:	df000017 	ldw	fp,0(sp)
   1cb6c:	dec00204 	addi	sp,sp,8
   1cb70:	f800283a 	ret

0001cb74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1cb74:	defffd04 	addi	sp,sp,-12
   1cb78:	dfc00215 	stw	ra,8(sp)
   1cb7c:	df000115 	stw	fp,4(sp)
   1cb80:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1cb84:	01040034 	movhi	r4,4096
   1cb88:	21080004 	addi	r4,r4,8192
   1cb8c:	000b883a 	mov	r5,zero
   1cb90:	000d883a 	mov	r6,zero
   1cb94:	01c00204 	movi	r7,8
   1cb98:	001dce80 	call	1dce8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1cb9c:	010000b4 	movhi	r4,2
   1cba0:	2106ed04 	addi	r4,r4,7092
   1cba4:	000b883a 	mov	r5,zero
   1cba8:	01800204 	movi	r6,8
   1cbac:	001d0b00 	call	1d0b0 <altera_avalon_jtag_uart_init>
   1cbb0:	010000b4 	movhi	r4,2
   1cbb4:	2106e304 	addi	r4,r4,7052
   1cbb8:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1cbbc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1cbc0:	010000b4 	movhi	r4,2
   1cbc4:	210afe04 	addi	r4,r4,11256
   1cbc8:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1cbcc:	010000b4 	movhi	r4,2
   1cbd0:	210b0a04 	addi	r4,r4,11304
   1cbd4:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1cbd8:	010000b4 	movhi	r4,2
   1cbdc:	210b1604 	addi	r4,r4,11352
   1cbe0:	001de180 	call	1de18 <alt_up_character_lcd_init>
   1cbe4:	010000b4 	movhi	r4,2
   1cbe8:	210b1604 	addi	r4,r4,11352
   1cbec:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1cbf0:	010000b4 	movhi	r4,2
   1cbf4:	210b2104 	addi	r4,r4,11396
   1cbf8:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1cbfc:	010000b4 	movhi	r4,2
   1cc00:	210b2c04 	addi	r4,r4,11440
   1cc04:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1cc08:	010000b4 	movhi	r4,2
   1cc0c:	210b3704 	addi	r4,r4,11484
   1cc10:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1cc14:	010000b4 	movhi	r4,2
   1cc18:	210b4204 	addi	r4,r4,11528
   1cc1c:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1cc20:	010000b4 	movhi	r4,2
   1cc24:	210b4d04 	addi	r4,r4,11572
   1cc28:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1cc2c:	010000b4 	movhi	r4,2
   1cc30:	210b5804 	addi	r4,r4,11616
   1cc34:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1cc38:	010000b4 	movhi	r4,2
   1cc3c:	210b6304 	addi	r4,r4,11660
   1cc40:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1cc44:	010000b4 	movhi	r4,2
   1cc48:	210b6e04 	addi	r4,r4,11704
   1cc4c:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1cc50:	010000b4 	movhi	r4,2
   1cc54:	210b7904 	addi	r4,r4,11748
   1cc58:	001e6f00 	call	1e6f0 <alt_up_ps2_init>
   1cc5c:	010000b4 	movhi	r4,2
   1cc60:	210b7904 	addi	r4,r4,11748
   1cc64:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1cc68:	010000b4 	movhi	r4,2
   1cc6c:	210b8704 	addi	r4,r4,11804
   1cc70:	001e6f00 	call	1e6f0 <alt_up_ps2_init>
   1cc74:	010000b4 	movhi	r4,2
   1cc78:	210b8704 	addi	r4,r4,11804
   1cc7c:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1cc80:	010000b4 	movhi	r4,2
   1cc84:	210b9504 	addi	r4,r4,11860
   1cc88:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1cc8c:	010000b4 	movhi	r4,2
   1cc90:	210ba004 	addi	r4,r4,11904
   1cc94:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1cc98:	008000b4 	movhi	r2,2
   1cc9c:	108bad04 	addi	r2,r2,11956
   1cca0:	10800a17 	ldw	r2,40(r2)
   1cca4:	10800104 	addi	r2,r2,4
   1cca8:	10800017 	ldw	r2,0(r2)
   1ccac:	10ffffcc 	andi	r3,r2,65535
   1ccb0:	008000b4 	movhi	r2,2
   1ccb4:	108bad04 	addi	r2,r2,11956
   1ccb8:	10c00c15 	stw	r3,48(r2)
   1ccbc:	008000b4 	movhi	r2,2
   1ccc0:	108bad04 	addi	r2,r2,11956
   1ccc4:	10800a17 	ldw	r2,40(r2)
   1ccc8:	10800104 	addi	r2,r2,4
   1cccc:	10800017 	ldw	r2,0(r2)
   1ccd0:	1006d43a 	srli	r3,r2,16
   1ccd4:	008000b4 	movhi	r2,2
   1ccd8:	108bad04 	addi	r2,r2,11956
   1ccdc:	10c00d15 	stw	r3,52(r2)
   1cce0:	008000b4 	movhi	r2,2
   1cce4:	108bad04 	addi	r2,r2,11956
   1cce8:	10800c17 	ldw	r2,48(r2)
   1ccec:	10801068 	cmpgeui	r2,r2,65
   1ccf0:	1000081e 	bne	r2,zero,1cd14 <alt_sys_init+0x1a0>
   1ccf4:	008000b4 	movhi	r2,2
   1ccf8:	108bad04 	addi	r2,r2,11956
   1ccfc:	00c00fc4 	movi	r3,63
   1cd00:	10c00f15 	stw	r3,60(r2)
   1cd04:	008000b4 	movhi	r2,2
   1cd08:	108bad04 	addi	r2,r2,11956
   1cd0c:	00c00184 	movi	r3,6
   1cd10:	10c01015 	stw	r3,64(r2)
   1cd14:	008000b4 	movhi	r2,2
   1cd18:	108bad04 	addi	r2,r2,11956
   1cd1c:	10800d17 	ldw	r2,52(r2)
   1cd20:	10800868 	cmpgeui	r2,r2,33
   1cd24:	1000041e 	bne	r2,zero,1cd38 <alt_sys_init+0x1c4>
   1cd28:	008000b4 	movhi	r2,2
   1cd2c:	108bad04 	addi	r2,r2,11956
   1cd30:	00c007c4 	movi	r3,31
   1cd34:	10c01115 	stw	r3,68(r2)
   1cd38:	010000b4 	movhi	r4,2
   1cd3c:	210bad04 	addi	r4,r4,11956
   1cd40:	001f0080 	call	1f008 <alt_up_char_buffer_init>
   1cd44:	010000b4 	movhi	r4,2
   1cd48:	210bad04 	addi	r4,r4,11956
   1cd4c:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1cd50:	008000b4 	movhi	r2,2
   1cd54:	108bbf04 	addi	r2,r2,12028
   1cd58:	10800a17 	ldw	r2,40(r2)
   1cd5c:	10800017 	ldw	r2,0(r2)
   1cd60:	1007883a 	mov	r3,r2
   1cd64:	008000b4 	movhi	r2,2
   1cd68:	108bbf04 	addi	r2,r2,12028
   1cd6c:	10c00b15 	stw	r3,44(r2)
   1cd70:	008000b4 	movhi	r2,2
   1cd74:	108bbf04 	addi	r2,r2,12028
   1cd78:	10800a17 	ldw	r2,40(r2)
   1cd7c:	10800104 	addi	r2,r2,4
   1cd80:	10800017 	ldw	r2,0(r2)
   1cd84:	1007883a 	mov	r3,r2
   1cd88:	008000b4 	movhi	r2,2
   1cd8c:	108bbf04 	addi	r2,r2,12028
   1cd90:	10c00c15 	stw	r3,48(r2)
   1cd94:	008000b4 	movhi	r2,2
   1cd98:	108bbf04 	addi	r2,r2,12028
   1cd9c:	10800a17 	ldw	r2,40(r2)
   1cda0:	10800204 	addi	r2,r2,8
   1cda4:	10800017 	ldw	r2,0(r2)
   1cda8:	10ffffcc 	andi	r3,r2,65535
   1cdac:	008000b4 	movhi	r2,2
   1cdb0:	108bbf04 	addi	r2,r2,12028
   1cdb4:	10c00f15 	stw	r3,60(r2)
   1cdb8:	008000b4 	movhi	r2,2
   1cdbc:	108bbf04 	addi	r2,r2,12028
   1cdc0:	10800a17 	ldw	r2,40(r2)
   1cdc4:	10800204 	addi	r2,r2,8
   1cdc8:	10800017 	ldw	r2,0(r2)
   1cdcc:	1006d43a 	srli	r3,r2,16
   1cdd0:	008000b4 	movhi	r2,2
   1cdd4:	108bbf04 	addi	r2,r2,12028
   1cdd8:	10c01015 	stw	r3,64(r2)
   1cddc:	008000b4 	movhi	r2,2
   1cde0:	108bbf04 	addi	r2,r2,12028
   1cde4:	10800a17 	ldw	r2,40(r2)
   1cde8:	10800304 	addi	r2,r2,12
   1cdec:	10800017 	ldw	r2,0(r2)
   1cdf0:	1005d07a 	srai	r2,r2,1
   1cdf4:	10c0004c 	andi	r3,r2,1
   1cdf8:	008000b4 	movhi	r2,2
   1cdfc:	108bbf04 	addi	r2,r2,12028
   1ce00:	10c00d15 	stw	r3,52(r2)
   1ce04:	008000b4 	movhi	r2,2
   1ce08:	108bbf04 	addi	r2,r2,12028
   1ce0c:	10800a17 	ldw	r2,40(r2)
   1ce10:	10800304 	addi	r2,r2,12
   1ce14:	10800017 	ldw	r2,0(r2)
   1ce18:	1005d13a 	srai	r2,r2,4
   1ce1c:	10c003cc 	andi	r3,r2,15
   1ce20:	008000b4 	movhi	r2,2
   1ce24:	108bbf04 	addi	r2,r2,12028
   1ce28:	10c00e15 	stw	r3,56(r2)
   1ce2c:	008000b4 	movhi	r2,2
   1ce30:	108bbf04 	addi	r2,r2,12028
   1ce34:	10800a17 	ldw	r2,40(r2)
   1ce38:	10800304 	addi	r2,r2,12
   1ce3c:	10800017 	ldw	r2,0(r2)
   1ce40:	1005d43a 	srai	r2,r2,16
   1ce44:	e0bfff05 	stb	r2,-4(fp)
   1ce48:	008000b4 	movhi	r2,2
   1ce4c:	108bbf04 	addi	r2,r2,12028
   1ce50:	10800a17 	ldw	r2,40(r2)
   1ce54:	10800304 	addi	r2,r2,12
   1ce58:	10800017 	ldw	r2,0(r2)
   1ce5c:	1004d63a 	srli	r2,r2,24
   1ce60:	e0bfff45 	stb	r2,-3(fp)
   1ce64:	008000b4 	movhi	r2,2
   1ce68:	108bbf04 	addi	r2,r2,12028
   1ce6c:	10800e17 	ldw	r2,56(r2)
   1ce70:	10800058 	cmpnei	r2,r2,1
   1ce74:	1000041e 	bne	r2,zero,1ce88 <alt_sys_init+0x314>
   1ce78:	008000b4 	movhi	r2,2
   1ce7c:	108bbf04 	addi	r2,r2,12028
   1ce80:	10001115 	stw	zero,68(r2)
   1ce84:	00000e06 	br	1cec0 <alt_sys_init+0x34c>
   1ce88:	008000b4 	movhi	r2,2
   1ce8c:	108bbf04 	addi	r2,r2,12028
   1ce90:	10800e17 	ldw	r2,56(r2)
   1ce94:	10800098 	cmpnei	r2,r2,2
   1ce98:	1000051e 	bne	r2,zero,1ceb0 <alt_sys_init+0x33c>
   1ce9c:	008000b4 	movhi	r2,2
   1cea0:	108bbf04 	addi	r2,r2,12028
   1cea4:	00c00044 	movi	r3,1
   1cea8:	10c01115 	stw	r3,68(r2)
   1ceac:	00000406 	br	1cec0 <alt_sys_init+0x34c>
   1ceb0:	008000b4 	movhi	r2,2
   1ceb4:	108bbf04 	addi	r2,r2,12028
   1ceb8:	00c00084 	movi	r3,2
   1cebc:	10c01115 	stw	r3,68(r2)
   1cec0:	e0bfff03 	ldbu	r2,-4(fp)
   1cec4:	00c00804 	movi	r3,32
   1cec8:	1885c83a 	sub	r2,r3,r2
   1cecc:	00ffffc4 	movi	r3,-1
   1ced0:	1886d83a 	srl	r3,r3,r2
   1ced4:	008000b4 	movhi	r2,2
   1ced8:	108bbf04 	addi	r2,r2,12028
   1cedc:	10c01215 	stw	r3,72(r2)
   1cee0:	e0ffff03 	ldbu	r3,-4(fp)
   1cee4:	008000b4 	movhi	r2,2
   1cee8:	108bbf04 	addi	r2,r2,12028
   1ceec:	10801117 	ldw	r2,68(r2)
   1cef0:	1887883a 	add	r3,r3,r2
   1cef4:	008000b4 	movhi	r2,2
   1cef8:	108bbf04 	addi	r2,r2,12028
   1cefc:	10c01315 	stw	r3,76(r2)
   1cf00:	e0bfff43 	ldbu	r2,-3(fp)
   1cf04:	00c00804 	movi	r3,32
   1cf08:	1885c83a 	sub	r2,r3,r2
   1cf0c:	00ffffc4 	movi	r3,-1
   1cf10:	1886d83a 	srl	r3,r3,r2
   1cf14:	008000b4 	movhi	r2,2
   1cf18:	108bbf04 	addi	r2,r2,12028
   1cf1c:	10c01415 	stw	r3,80(r2)
   1cf20:	010000b4 	movhi	r4,2
   1cf24:	210bbf04 	addi	r4,r4,12028
   1cf28:	001cb080 	call	1cb08 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1cf2c:	010000b4 	movhi	r4,2
   1cf30:	210bd404 	addi	r4,r4,12112
   1cf34:	001cb080 	call	1cb08 <alt_dev_reg>
}
   1cf38:	e037883a 	mov	sp,fp
   1cf3c:	dfc00117 	ldw	ra,4(sp)
   1cf40:	df000017 	ldw	fp,0(sp)
   1cf44:	dec00204 	addi	sp,sp,8
   1cf48:	f800283a 	ret

0001cf4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1cf4c:	defffa04 	addi	sp,sp,-24
   1cf50:	dfc00515 	stw	ra,20(sp)
   1cf54:	df000415 	stw	fp,16(sp)
   1cf58:	df000404 	addi	fp,sp,16
   1cf5c:	e13ffd15 	stw	r4,-12(fp)
   1cf60:	e17ffe15 	stw	r5,-8(fp)
   1cf64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1cf68:	e0bffd17 	ldw	r2,-12(fp)
   1cf6c:	10800017 	ldw	r2,0(r2)
   1cf70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1cf74:	e0bffc17 	ldw	r2,-16(fp)
   1cf78:	10c00a04 	addi	r3,r2,40
   1cf7c:	e0bffd17 	ldw	r2,-12(fp)
   1cf80:	10800217 	ldw	r2,8(r2)
   1cf84:	1809883a 	mov	r4,r3
   1cf88:	e17ffe17 	ldw	r5,-8(fp)
   1cf8c:	e1bfff17 	ldw	r6,-4(fp)
   1cf90:	100f883a 	mov	r7,r2
   1cf94:	001d6fc0 	call	1d6fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1cf98:	e037883a 	mov	sp,fp
   1cf9c:	dfc00117 	ldw	ra,4(sp)
   1cfa0:	df000017 	ldw	fp,0(sp)
   1cfa4:	dec00204 	addi	sp,sp,8
   1cfa8:	f800283a 	ret

0001cfac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1cfac:	defffa04 	addi	sp,sp,-24
   1cfb0:	dfc00515 	stw	ra,20(sp)
   1cfb4:	df000415 	stw	fp,16(sp)
   1cfb8:	df000404 	addi	fp,sp,16
   1cfbc:	e13ffd15 	stw	r4,-12(fp)
   1cfc0:	e17ffe15 	stw	r5,-8(fp)
   1cfc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1cfc8:	e0bffd17 	ldw	r2,-12(fp)
   1cfcc:	10800017 	ldw	r2,0(r2)
   1cfd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1cfd4:	e0bffc17 	ldw	r2,-16(fp)
   1cfd8:	10c00a04 	addi	r3,r2,40
   1cfdc:	e0bffd17 	ldw	r2,-12(fp)
   1cfe0:	10800217 	ldw	r2,8(r2)
   1cfe4:	1809883a 	mov	r4,r3
   1cfe8:	e17ffe17 	ldw	r5,-8(fp)
   1cfec:	e1bfff17 	ldw	r6,-4(fp)
   1cff0:	100f883a 	mov	r7,r2
   1cff4:	001d9b00 	call	1d9b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1cff8:	e037883a 	mov	sp,fp
   1cffc:	dfc00117 	ldw	ra,4(sp)
   1d000:	df000017 	ldw	fp,0(sp)
   1d004:	dec00204 	addi	sp,sp,8
   1d008:	f800283a 	ret

0001d00c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1d00c:	defffc04 	addi	sp,sp,-16
   1d010:	dfc00315 	stw	ra,12(sp)
   1d014:	df000215 	stw	fp,8(sp)
   1d018:	df000204 	addi	fp,sp,8
   1d01c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1d020:	e0bfff17 	ldw	r2,-4(fp)
   1d024:	10800017 	ldw	r2,0(r2)
   1d028:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1d02c:	e0bffe17 	ldw	r2,-8(fp)
   1d030:	10c00a04 	addi	r3,r2,40
   1d034:	e0bfff17 	ldw	r2,-4(fp)
   1d038:	10800217 	ldw	r2,8(r2)
   1d03c:	1809883a 	mov	r4,r3
   1d040:	100b883a 	mov	r5,r2
   1d044:	001d5a80 	call	1d5a8 <altera_avalon_jtag_uart_close>
}
   1d048:	e037883a 	mov	sp,fp
   1d04c:	dfc00117 	ldw	ra,4(sp)
   1d050:	df000017 	ldw	fp,0(sp)
   1d054:	dec00204 	addi	sp,sp,8
   1d058:	f800283a 	ret

0001d05c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1d05c:	defffa04 	addi	sp,sp,-24
   1d060:	dfc00515 	stw	ra,20(sp)
   1d064:	df000415 	stw	fp,16(sp)
   1d068:	df000404 	addi	fp,sp,16
   1d06c:	e13ffd15 	stw	r4,-12(fp)
   1d070:	e17ffe15 	stw	r5,-8(fp)
   1d074:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1d078:	e0bffd17 	ldw	r2,-12(fp)
   1d07c:	10800017 	ldw	r2,0(r2)
   1d080:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1d084:	e0bffc17 	ldw	r2,-16(fp)
   1d088:	10800a04 	addi	r2,r2,40
   1d08c:	1009883a 	mov	r4,r2
   1d090:	e17ffe17 	ldw	r5,-8(fp)
   1d094:	e1bfff17 	ldw	r6,-4(fp)
   1d098:	001d6100 	call	1d610 <altera_avalon_jtag_uart_ioctl>
}
   1d09c:	e037883a 	mov	sp,fp
   1d0a0:	dfc00117 	ldw	ra,4(sp)
   1d0a4:	df000017 	ldw	fp,0(sp)
   1d0a8:	dec00204 	addi	sp,sp,8
   1d0ac:	f800283a 	ret

0001d0b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1d0b0:	defff104 	addi	sp,sp,-60
   1d0b4:	dfc00e15 	stw	ra,56(sp)
   1d0b8:	df000d15 	stw	fp,52(sp)
   1d0bc:	df000d04 	addi	fp,sp,52
   1d0c0:	e13ff915 	stw	r4,-28(fp)
   1d0c4:	e17ffa15 	stw	r5,-24(fp)
   1d0c8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1d0cc:	e0bff917 	ldw	r2,-28(fp)
   1d0d0:	10800c04 	addi	r2,r2,48
   1d0d4:	e0bff315 	stw	r2,-52(fp)
   1d0d8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1d0dc:	e0fff40b 	ldhu	r3,-48(fp)
   1d0e0:	e0bff884 	addi	r2,fp,-30
   1d0e4:	1809883a 	mov	r4,r3
   1d0e8:	100b883a 	mov	r5,r2
   1d0ec:	00172fc0 	call	172fc <OSFlagCreate>
   1d0f0:	1007883a 	mov	r3,r2
   1d0f4:	e0bff317 	ldw	r2,-52(fp)
   1d0f8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1d0fc:	e0bff917 	ldw	r2,-28(fp)
   1d100:	10800a04 	addi	r2,r2,40
   1d104:	e0bff515 	stw	r2,-44(fp)
   1d108:	00800044 	movi	r2,1
   1d10c:	e0bff60d 	sth	r2,-40(fp)
   1d110:	e0bff60b 	ldhu	r2,-40(fp)
   1d114:	1009883a 	mov	r4,r2
   1d118:	001a2540 	call	1a254 <OSSemCreate>
   1d11c:	1007883a 	mov	r3,r2
   1d120:	e0bff517 	ldw	r2,-44(fp)
   1d124:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1d128:	e0bff917 	ldw	r2,-28(fp)
   1d12c:	10800b04 	addi	r2,r2,44
   1d130:	e0bff715 	stw	r2,-36(fp)
   1d134:	00800044 	movi	r2,1
   1d138:	e0bff80d 	sth	r2,-32(fp)
   1d13c:	e0bff80b 	ldhu	r2,-32(fp)
   1d140:	1009883a 	mov	r4,r2
   1d144:	001a2540 	call	1a254 <OSSemCreate>
   1d148:	1007883a 	mov	r3,r2
   1d14c:	e0bff717 	ldw	r2,-36(fp)
   1d150:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d154:	e0bff917 	ldw	r2,-28(fp)
   1d158:	00c00044 	movi	r3,1
   1d15c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1d160:	e0bff917 	ldw	r2,-28(fp)
   1d164:	10800017 	ldw	r2,0(r2)
   1d168:	10800104 	addi	r2,r2,4
   1d16c:	1007883a 	mov	r3,r2
   1d170:	e0bff917 	ldw	r2,-28(fp)
   1d174:	10800817 	ldw	r2,32(r2)
   1d178:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1d17c:	e0bffb17 	ldw	r2,-20(fp)
   1d180:	1009883a 	mov	r4,r2
   1d184:	e17ff917 	ldw	r5,-28(fp)
   1d188:	018000b4 	movhi	r6,2
   1d18c:	31b47c04 	addi	r6,r6,-11792
   1d190:	001f7f00 	call	1f7f0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1d194:	e0bff917 	ldw	r2,-28(fp)
   1d198:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1d19c:	e0bff917 	ldw	r2,-28(fp)
   1d1a0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d1a4:	008000b4 	movhi	r2,2
   1d1a8:	1093f404 	addi	r2,r2,20432
   1d1ac:	10800017 	ldw	r2,0(r2)
   1d1b0:	1809883a 	mov	r4,r3
   1d1b4:	100b883a 	mov	r5,r2
   1d1b8:	018000b4 	movhi	r6,2
   1d1bc:	31b52604 	addi	r6,r6,-11112
   1d1c0:	e1fff917 	ldw	r7,-28(fp)
   1d1c4:	001f2f00 	call	1f2f0 <alt_alarm_start>
   1d1c8:	1000040e 	bge	r2,zero,1d1dc <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1d1cc:	e0fff917 	ldw	r3,-28(fp)
   1d1d0:	00a00034 	movhi	r2,32768
   1d1d4:	10bfffc4 	addi	r2,r2,-1
   1d1d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1d1dc:	e037883a 	mov	sp,fp
   1d1e0:	dfc00117 	ldw	ra,4(sp)
   1d1e4:	df000017 	ldw	fp,0(sp)
   1d1e8:	dec00204 	addi	sp,sp,8
   1d1ec:	f800283a 	ret

0001d1f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1d1f0:	defff104 	addi	sp,sp,-60
   1d1f4:	dfc00e15 	stw	ra,56(sp)
   1d1f8:	df000d15 	stw	fp,52(sp)
   1d1fc:	df000d04 	addi	fp,sp,52
   1d200:	e13ffe15 	stw	r4,-8(fp)
   1d204:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1d208:	e0bffe17 	ldw	r2,-8(fp)
   1d20c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1d210:	e0bff517 	ldw	r2,-44(fp)
   1d214:	10800017 	ldw	r2,0(r2)
   1d218:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d21c:	e0bff617 	ldw	r2,-40(fp)
   1d220:	10800104 	addi	r2,r2,4
   1d224:	10800037 	ldwio	r2,0(r2)
   1d228:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1d22c:	e0bff717 	ldw	r2,-36(fp)
   1d230:	1080c00c 	andi	r2,r2,768
   1d234:	1000011e 	bne	r2,zero,1d23c <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1d238:	00009206 	br	1d484 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1d23c:	e0bff717 	ldw	r2,-36(fp)
   1d240:	1080400c 	andi	r2,r2,256
   1d244:	10004726 	beq	r2,zero,1d364 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1d248:	00800074 	movhi	r2,1
   1d24c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d250:	e0bff517 	ldw	r2,-44(fp)
   1d254:	10800d17 	ldw	r2,52(r2)
   1d258:	10800044 	addi	r2,r2,1
   1d25c:	1081ffcc 	andi	r2,r2,2047
   1d260:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1d264:	e0bff517 	ldw	r2,-44(fp)
   1d268:	10c00e17 	ldw	r3,56(r2)
   1d26c:	e0bff817 	ldw	r2,-32(fp)
   1d270:	1880011e 	bne	r3,r2,1d278 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1d274:	00002906 	br	1d31c <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1d278:	e0bff617 	ldw	r2,-40(fp)
   1d27c:	10800037 	ldwio	r2,0(r2)
   1d280:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1d284:	e0bff317 	ldw	r2,-52(fp)
   1d288:	10a0000c 	andi	r2,r2,32768
   1d28c:	1000011e 	bne	r2,zero,1d294 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1d290:	00002206 	br	1d31c <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1d294:	e0bff517 	ldw	r2,-44(fp)
   1d298:	10800d17 	ldw	r2,52(r2)
   1d29c:	e0fff317 	ldw	r3,-52(fp)
   1d2a0:	1809883a 	mov	r4,r3
   1d2a4:	e0fff517 	ldw	r3,-44(fp)
   1d2a8:	1885883a 	add	r2,r3,r2
   1d2ac:	10801104 	addi	r2,r2,68
   1d2b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d2b4:	e0bff517 	ldw	r2,-44(fp)
   1d2b8:	10800d17 	ldw	r2,52(r2)
   1d2bc:	10800044 	addi	r2,r2,1
   1d2c0:	10c1ffcc 	andi	r3,r2,2047
   1d2c4:	e0bff517 	ldw	r2,-44(fp)
   1d2c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1d2cc:	e0bff517 	ldw	r2,-44(fp)
   1d2d0:	10800c17 	ldw	r2,48(r2)
   1d2d4:	e0bff915 	stw	r2,-28(fp)
   1d2d8:	00800044 	movi	r2,1
   1d2dc:	e0bffa0d 	sth	r2,-24(fp)
   1d2e0:	00800044 	movi	r2,1
   1d2e4:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d2e8:	008000b4 	movhi	r2,2
   1d2ec:	1093df44 	addi	r2,r2,20349
   1d2f0:	10800003 	ldbu	r2,0(r2)
   1d2f4:	10803fcc 	andi	r2,r2,255
   1d2f8:	103fd526 	beq	r2,zero,1d250 <__alt_mem_Flash_flash_data+0xf401d250>
  {
    OSFlagPost (group, flags, opt, &err);
   1d2fc:	e17ffa0b 	ldhu	r5,-24(fp)
   1d300:	e0fffa83 	ldbu	r3,-22(fp)
   1d304:	e0bffcc4 	addi	r2,fp,-13
   1d308:	e13ff917 	ldw	r4,-28(fp)
   1d30c:	180d883a 	mov	r6,r3
   1d310:	100f883a 	mov	r7,r2
   1d314:	0017f6c0 	call	17f6c <OSFlagPost>
      }
   1d318:	003fcd06 	br	1d250 <__alt_mem_Flash_flash_data+0xf401d250>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1d31c:	e0bff317 	ldw	r2,-52(fp)
   1d320:	10bfffec 	andhi	r2,r2,65535
   1d324:	10000f26 	beq	r2,zero,1d364 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d328:	e0bff517 	ldw	r2,-44(fp)
   1d32c:	10c00817 	ldw	r3,32(r2)
   1d330:	00bfff84 	movi	r2,-2
   1d334:	1886703a 	and	r3,r3,r2
   1d338:	e0bff517 	ldw	r2,-44(fp)
   1d33c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1d340:	e0bff617 	ldw	r2,-40(fp)
   1d344:	10800104 	addi	r2,r2,4
   1d348:	1007883a 	mov	r3,r2
   1d34c:	e0bff517 	ldw	r2,-44(fp)
   1d350:	10800817 	ldw	r2,32(r2)
   1d354:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d358:	e0bff617 	ldw	r2,-40(fp)
   1d35c:	10800104 	addi	r2,r2,4
   1d360:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1d364:	e0bff717 	ldw	r2,-36(fp)
   1d368:	1080800c 	andi	r2,r2,512
   1d36c:	10004426 	beq	r2,zero,1d480 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1d370:	e0bff717 	ldw	r2,-36(fp)
   1d374:	1004d43a 	srli	r2,r2,16
   1d378:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d37c:	00002706 	br	1d41c <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1d380:	e0bff617 	ldw	r2,-40(fp)
   1d384:	e0fff517 	ldw	r3,-44(fp)
   1d388:	18c01017 	ldw	r3,64(r3)
   1d38c:	e13ff517 	ldw	r4,-44(fp)
   1d390:	20c7883a 	add	r3,r4,r3
   1d394:	18c21104 	addi	r3,r3,2116
   1d398:	18c00003 	ldbu	r3,0(r3)
   1d39c:	18c03fcc 	andi	r3,r3,255
   1d3a0:	18c0201c 	xori	r3,r3,128
   1d3a4:	18ffe004 	addi	r3,r3,-128
   1d3a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d3ac:	e0bff517 	ldw	r2,-44(fp)
   1d3b0:	10801017 	ldw	r2,64(r2)
   1d3b4:	10800044 	addi	r2,r2,1
   1d3b8:	10c1ffcc 	andi	r3,r2,2047
   1d3bc:	e0bff517 	ldw	r2,-44(fp)
   1d3c0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1d3c4:	e0bff517 	ldw	r2,-44(fp)
   1d3c8:	10800c17 	ldw	r2,48(r2)
   1d3cc:	e0bffb15 	stw	r2,-20(fp)
   1d3d0:	00800084 	movi	r2,2
   1d3d4:	e0bffc0d 	sth	r2,-16(fp)
   1d3d8:	00800044 	movi	r2,1
   1d3dc:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d3e0:	008000b4 	movhi	r2,2
   1d3e4:	1093df44 	addi	r2,r2,20349
   1d3e8:	10800003 	ldbu	r2,0(r2)
   1d3ec:	10803fcc 	andi	r2,r2,255
   1d3f0:	10000726 	beq	r2,zero,1d410 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1d3f4:	e17ffc0b 	ldhu	r5,-16(fp)
   1d3f8:	e0fffc83 	ldbu	r3,-14(fp)
   1d3fc:	e0bffd04 	addi	r2,fp,-12
   1d400:	e13ffb17 	ldw	r4,-20(fp)
   1d404:	180d883a 	mov	r6,r3
   1d408:	100f883a 	mov	r7,r2
   1d40c:	0017f6c0 	call	17f6c <OSFlagPost>

        space--;
   1d410:	e0bff417 	ldw	r2,-48(fp)
   1d414:	10bfffc4 	addi	r2,r2,-1
   1d418:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d41c:	e0bff417 	ldw	r2,-48(fp)
   1d420:	10000526 	beq	r2,zero,1d438 <altera_avalon_jtag_uart_irq+0x248>
   1d424:	e0bff517 	ldw	r2,-44(fp)
   1d428:	10c01017 	ldw	r3,64(r2)
   1d42c:	e0bff517 	ldw	r2,-44(fp)
   1d430:	10800f17 	ldw	r2,60(r2)
   1d434:	18bfd21e 	bne	r3,r2,1d380 <__alt_mem_Flash_flash_data+0xf401d380>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1d438:	e0bff417 	ldw	r2,-48(fp)
   1d43c:	10001026 	beq	r2,zero,1d480 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d440:	e0bff517 	ldw	r2,-44(fp)
   1d444:	10c00817 	ldw	r3,32(r2)
   1d448:	00bfff44 	movi	r2,-3
   1d44c:	1886703a 	and	r3,r3,r2
   1d450:	e0bff517 	ldw	r2,-44(fp)
   1d454:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d458:	e0bff517 	ldw	r2,-44(fp)
   1d45c:	10800017 	ldw	r2,0(r2)
   1d460:	10800104 	addi	r2,r2,4
   1d464:	1007883a 	mov	r3,r2
   1d468:	e0bff517 	ldw	r2,-44(fp)
   1d46c:	10800817 	ldw	r2,32(r2)
   1d470:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d474:	e0bff617 	ldw	r2,-40(fp)
   1d478:	10800104 	addi	r2,r2,4
   1d47c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1d480:	003f6606 	br	1d21c <__alt_mem_Flash_flash_data+0xf401d21c>
}
   1d484:	e037883a 	mov	sp,fp
   1d488:	dfc00117 	ldw	ra,4(sp)
   1d48c:	df000017 	ldw	fp,0(sp)
   1d490:	dec00204 	addi	sp,sp,8
   1d494:	f800283a 	ret

0001d498 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1d498:	defff904 	addi	sp,sp,-28
   1d49c:	dfc00615 	stw	ra,24(sp)
   1d4a0:	df000515 	stw	fp,20(sp)
   1d4a4:	df000504 	addi	fp,sp,20
   1d4a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1d4ac:	e0bfff17 	ldw	r2,-4(fp)
   1d4b0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1d4b4:	e0bffb17 	ldw	r2,-20(fp)
   1d4b8:	10800017 	ldw	r2,0(r2)
   1d4bc:	10800104 	addi	r2,r2,4
   1d4c0:	10800037 	ldwio	r2,0(r2)
   1d4c4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1d4c8:	e0bffc17 	ldw	r2,-16(fp)
   1d4cc:	1081000c 	andi	r2,r2,1024
   1d4d0:	10000b26 	beq	r2,zero,1d500 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1d4d4:	e0bffb17 	ldw	r2,-20(fp)
   1d4d8:	10800017 	ldw	r2,0(r2)
   1d4dc:	10800104 	addi	r2,r2,4
   1d4e0:	1007883a 	mov	r3,r2
   1d4e4:	e0bffb17 	ldw	r2,-20(fp)
   1d4e8:	10800817 	ldw	r2,32(r2)
   1d4ec:	10810014 	ori	r2,r2,1024
   1d4f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1d4f4:	e0bffb17 	ldw	r2,-20(fp)
   1d4f8:	10000915 	stw	zero,36(r2)
   1d4fc:	00002206 	br	1d588 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1d500:	e0bffb17 	ldw	r2,-20(fp)
   1d504:	10c00917 	ldw	r3,36(r2)
   1d508:	00a00034 	movhi	r2,32768
   1d50c:	10bfff04 	addi	r2,r2,-4
   1d510:	10c01d36 	bltu	r2,r3,1d588 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1d514:	e0bffb17 	ldw	r2,-20(fp)
   1d518:	10800917 	ldw	r2,36(r2)
   1d51c:	10c00044 	addi	r3,r2,1
   1d520:	e0bffb17 	ldw	r2,-20(fp)
   1d524:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1d528:	e0bffb17 	ldw	r2,-20(fp)
   1d52c:	10c00917 	ldw	r3,36(r2)
   1d530:	e0bffb17 	ldw	r2,-20(fp)
   1d534:	10800117 	ldw	r2,4(r2)
   1d538:	18801336 	bltu	r3,r2,1d588 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1d53c:	e0bffb17 	ldw	r2,-20(fp)
   1d540:	10800c17 	ldw	r2,48(r2)
   1d544:	e0bffd15 	stw	r2,-12(fp)
   1d548:	00800104 	movi	r2,4
   1d54c:	e0bffe0d 	sth	r2,-8(fp)
   1d550:	00800044 	movi	r2,1
   1d554:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d558:	008000b4 	movhi	r2,2
   1d55c:	1093df44 	addi	r2,r2,20349
   1d560:	10800003 	ldbu	r2,0(r2)
   1d564:	10803fcc 	andi	r2,r2,255
   1d568:	10000726 	beq	r2,zero,1d588 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1d56c:	e17ffe0b 	ldhu	r5,-8(fp)
   1d570:	e0fffe83 	ldbu	r3,-6(fp)
   1d574:	e0bffec4 	addi	r2,fp,-5
   1d578:	e13ffd17 	ldw	r4,-12(fp)
   1d57c:	180d883a 	mov	r6,r3
   1d580:	100f883a 	mov	r7,r2
   1d584:	0017f6c0 	call	17f6c <OSFlagPost>
   1d588:	008000b4 	movhi	r2,2
   1d58c:	1093f404 	addi	r2,r2,20432
   1d590:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1d594:	e037883a 	mov	sp,fp
   1d598:	dfc00117 	ldw	ra,4(sp)
   1d59c:	df000017 	ldw	fp,0(sp)
   1d5a0:	dec00204 	addi	sp,sp,8
   1d5a4:	f800283a 	ret

0001d5a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1d5a8:	defffd04 	addi	sp,sp,-12
   1d5ac:	df000215 	stw	fp,8(sp)
   1d5b0:	df000204 	addi	fp,sp,8
   1d5b4:	e13ffe15 	stw	r4,-8(fp)
   1d5b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1d5bc:	00000506 	br	1d5d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1d5c0:	e0bfff17 	ldw	r2,-4(fp)
   1d5c4:	1090000c 	andi	r2,r2,16384
   1d5c8:	10000226 	beq	r2,zero,1d5d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1d5cc:	00bffd44 	movi	r2,-11
   1d5d0:	00000b06 	br	1d600 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1d5d4:	e0bffe17 	ldw	r2,-8(fp)
   1d5d8:	10c01017 	ldw	r3,64(r2)
   1d5dc:	e0bffe17 	ldw	r2,-8(fp)
   1d5e0:	10800f17 	ldw	r2,60(r2)
   1d5e4:	18800526 	beq	r3,r2,1d5fc <altera_avalon_jtag_uart_close+0x54>
   1d5e8:	e0bffe17 	ldw	r2,-8(fp)
   1d5ec:	10c00917 	ldw	r3,36(r2)
   1d5f0:	e0bffe17 	ldw	r2,-8(fp)
   1d5f4:	10800117 	ldw	r2,4(r2)
   1d5f8:	18bff136 	bltu	r3,r2,1d5c0 <__alt_mem_Flash_flash_data+0xf401d5c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1d5fc:	0005883a 	mov	r2,zero
}
   1d600:	e037883a 	mov	sp,fp
   1d604:	df000017 	ldw	fp,0(sp)
   1d608:	dec00104 	addi	sp,sp,4
   1d60c:	f800283a 	ret

0001d610 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1d610:	defffa04 	addi	sp,sp,-24
   1d614:	df000515 	stw	fp,20(sp)
   1d618:	df000504 	addi	fp,sp,20
   1d61c:	e13ffd15 	stw	r4,-12(fp)
   1d620:	e17ffe15 	stw	r5,-8(fp)
   1d624:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1d628:	00bff9c4 	movi	r2,-25
   1d62c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1d630:	e0bffe17 	ldw	r2,-8(fp)
   1d634:	10da8060 	cmpeqi	r3,r2,27137
   1d638:	1800031e 	bne	r3,zero,1d648 <altera_avalon_jtag_uart_ioctl+0x38>
   1d63c:	109a80a0 	cmpeqi	r2,r2,27138
   1d640:	1000191e 	bne	r2,zero,1d6a8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1d644:	00002806 	br	1d6e8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1d648:	e0bffd17 	ldw	r2,-12(fp)
   1d64c:	10c00117 	ldw	r3,4(r2)
   1d650:	00a00034 	movhi	r2,32768
   1d654:	10bfffc4 	addi	r2,r2,-1
   1d658:	18801226 	beq	r3,r2,1d6a4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1d65c:	e0bfff17 	ldw	r2,-4(fp)
   1d660:	10800017 	ldw	r2,0(r2)
   1d664:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1d668:	e0bffc17 	ldw	r2,-16(fp)
   1d66c:	10800090 	cmplti	r2,r2,2
   1d670:	1000061e 	bne	r2,zero,1d68c <altera_avalon_jtag_uart_ioctl+0x7c>
   1d674:	e0fffc17 	ldw	r3,-16(fp)
   1d678:	00a00034 	movhi	r2,32768
   1d67c:	10bfffc4 	addi	r2,r2,-1
   1d680:	18800226 	beq	r3,r2,1d68c <altera_avalon_jtag_uart_ioctl+0x7c>
   1d684:	e0bffc17 	ldw	r2,-16(fp)
   1d688:	00000206 	br	1d694 <altera_avalon_jtag_uart_ioctl+0x84>
   1d68c:	00a00034 	movhi	r2,32768
   1d690:	10bfff84 	addi	r2,r2,-2
   1d694:	e0fffd17 	ldw	r3,-12(fp)
   1d698:	18800115 	stw	r2,4(r3)
      rc = 0;
   1d69c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d6a0:	00001106 	br	1d6e8 <altera_avalon_jtag_uart_ioctl+0xd8>
   1d6a4:	00001006 	br	1d6e8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1d6a8:	e0bffd17 	ldw	r2,-12(fp)
   1d6ac:	10c00117 	ldw	r3,4(r2)
   1d6b0:	00a00034 	movhi	r2,32768
   1d6b4:	10bfffc4 	addi	r2,r2,-1
   1d6b8:	18800a26 	beq	r3,r2,1d6e4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1d6bc:	e0bffd17 	ldw	r2,-12(fp)
   1d6c0:	10c00917 	ldw	r3,36(r2)
   1d6c4:	e0bffd17 	ldw	r2,-12(fp)
   1d6c8:	10800117 	ldw	r2,4(r2)
   1d6cc:	1885803a 	cmpltu	r2,r3,r2
   1d6d0:	10c03fcc 	andi	r3,r2,255
   1d6d4:	e0bfff17 	ldw	r2,-4(fp)
   1d6d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1d6dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d6e0:	00000006 	br	1d6e4 <altera_avalon_jtag_uart_ioctl+0xd4>
   1d6e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1d6e8:	e0bffb17 	ldw	r2,-20(fp)
}
   1d6ec:	e037883a 	mov	sp,fp
   1d6f0:	df000017 	ldw	fp,0(sp)
   1d6f4:	dec00104 	addi	sp,sp,4
   1d6f8:	f800283a 	ret

0001d6fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1d6fc:	deffec04 	addi	sp,sp,-80
   1d700:	dfc01315 	stw	ra,76(sp)
   1d704:	df001215 	stw	fp,72(sp)
   1d708:	df001204 	addi	fp,sp,72
   1d70c:	e13ffc15 	stw	r4,-16(fp)
   1d710:	e17ffd15 	stw	r5,-12(fp)
   1d714:	e1bffe15 	stw	r6,-8(fp)
   1d718:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1d71c:	e0bffd17 	ldw	r2,-12(fp)
   1d720:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1d724:	e0bffc17 	ldw	r2,-16(fp)
   1d728:	10800a17 	ldw	r2,40(r2)
   1d72c:	e0bff415 	stw	r2,-48(fp)
   1d730:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1d734:	e0fff50b 	ldhu	r3,-44(fp)
   1d738:	e0bffb04 	addi	r2,fp,-20
   1d73c:	e13ff417 	ldw	r4,-48(fp)
   1d740:	180b883a 	mov	r5,r3
   1d744:	100d883a 	mov	r6,r2
   1d748:	001a5bc0 	call	1a5bc <OSSemPend>

  while (space > 0)
   1d74c:	00006506 	br	1d8e4 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1d750:	e0bffc17 	ldw	r2,-16(fp)
   1d754:	10800d17 	ldw	r2,52(r2)
   1d758:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1d75c:	e0bffc17 	ldw	r2,-16(fp)
   1d760:	10800e17 	ldw	r2,56(r2)
   1d764:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1d768:	e0fff117 	ldw	r3,-60(fp)
   1d76c:	e0bff217 	ldw	r2,-56(fp)
   1d770:	18800536 	bltu	r3,r2,1d788 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1d774:	e0fff117 	ldw	r3,-60(fp)
   1d778:	e0bff217 	ldw	r2,-56(fp)
   1d77c:	1885c83a 	sub	r2,r3,r2
   1d780:	e0bff015 	stw	r2,-64(fp)
   1d784:	00000406 	br	1d798 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1d788:	00c20004 	movi	r3,2048
   1d78c:	e0bff217 	ldw	r2,-56(fp)
   1d790:	1885c83a 	sub	r2,r3,r2
   1d794:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1d798:	e0bff017 	ldw	r2,-64(fp)
   1d79c:	1000011e 	bne	r2,zero,1d7a4 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1d7a0:	00001d06 	br	1d818 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1d7a4:	e0fffe17 	ldw	r3,-8(fp)
   1d7a8:	e0bff017 	ldw	r2,-64(fp)
   1d7ac:	1880022e 	bgeu	r3,r2,1d7b8 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1d7b0:	e0bffe17 	ldw	r2,-8(fp)
   1d7b4:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1d7b8:	e0bff217 	ldw	r2,-56(fp)
   1d7bc:	10801104 	addi	r2,r2,68
   1d7c0:	e0fffc17 	ldw	r3,-16(fp)
   1d7c4:	1885883a 	add	r2,r3,r2
   1d7c8:	e13fef17 	ldw	r4,-68(fp)
   1d7cc:	100b883a 	mov	r5,r2
   1d7d0:	e1bff017 	ldw	r6,-64(fp)
   1d7d4:	00070180 	call	7018 <memcpy>
      ptr   += n;
   1d7d8:	e0ffef17 	ldw	r3,-68(fp)
   1d7dc:	e0bff017 	ldw	r2,-64(fp)
   1d7e0:	1885883a 	add	r2,r3,r2
   1d7e4:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1d7e8:	e0fffe17 	ldw	r3,-8(fp)
   1d7ec:	e0bff017 	ldw	r2,-64(fp)
   1d7f0:	1885c83a 	sub	r2,r3,r2
   1d7f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d7f8:	e0fff217 	ldw	r3,-56(fp)
   1d7fc:	e0bff017 	ldw	r2,-64(fp)
   1d800:	1885883a 	add	r2,r3,r2
   1d804:	10c1ffcc 	andi	r3,r2,2047
   1d808:	e0bffc17 	ldw	r2,-16(fp)
   1d80c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1d810:	e0bffe17 	ldw	r2,-8(fp)
   1d814:	00bfce16 	blt	zero,r2,1d750 <__alt_mem_Flash_flash_data+0xf401d750>

    /* If we read any data then return it */
    if (ptr != buffer)
   1d818:	e0ffef17 	ldw	r3,-68(fp)
   1d81c:	e0bffd17 	ldw	r2,-12(fp)
   1d820:	18800126 	beq	r3,r2,1d828 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1d824:	00003106 	br	1d8ec <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1d828:	e0bfff17 	ldw	r2,-4(fp)
   1d82c:	1090000c 	andi	r2,r2,16384
   1d830:	10000126 	beq	r2,zero,1d838 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1d834:	00002d06 	br	1d8ec <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1d838:	008000b4 	movhi	r2,2
   1d83c:	1093df44 	addi	r2,r2,20349
   1d840:	10800003 	ldbu	r2,0(r2)
   1d844:	10803fcc 	andi	r2,r2,255
   1d848:	10800058 	cmpnei	r2,r2,1
   1d84c:	1000161e 	bne	r2,zero,1d8a8 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1d850:	e0bffc17 	ldw	r2,-16(fp)
   1d854:	10800c17 	ldw	r2,48(r2)
   1d858:	e0bff615 	stw	r2,-40(fp)
   1d85c:	00800144 	movi	r2,5
   1d860:	e0bff70d 	sth	r2,-36(fp)
   1d864:	00bfe0c4 	movi	r2,-125
   1d868:	e0bff785 	stb	r2,-34(fp)
   1d86c:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1d870:	008000b4 	movhi	r2,2
   1d874:	1093df44 	addi	r2,r2,20349
   1d878:	10800003 	ldbu	r2,0(r2)
   1d87c:	10803fcc 	andi	r2,r2,255
   1d880:	10001326 	beq	r2,zero,1d8d0 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1d884:	e17ff70b 	ldhu	r5,-36(fp)
   1d888:	e1bff783 	ldbu	r6,-34(fp)
   1d88c:	e0fff80b 	ldhu	r3,-32(fp)
   1d890:	e0bffb44 	addi	r2,fp,-19
   1d894:	d8800015 	stw	r2,0(sp)
   1d898:	e13ff617 	ldw	r4,-40(fp)
   1d89c:	180f883a 	mov	r7,r3
   1d8a0:	00179140 	call	17914 <OSFlagPend>
   1d8a4:	00000a06 	br	1d8d0 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1d8a8:	0001883a 	nop
   1d8ac:	e0bffc17 	ldw	r2,-16(fp)
   1d8b0:	10c00d17 	ldw	r3,52(r2)
   1d8b4:	e0bff117 	ldw	r2,-60(fp)
   1d8b8:	1880051e 	bne	r3,r2,1d8d0 <altera_avalon_jtag_uart_read+0x1d4>
   1d8bc:	e0bffc17 	ldw	r2,-16(fp)
   1d8c0:	10c00917 	ldw	r3,36(r2)
   1d8c4:	e0bffc17 	ldw	r2,-16(fp)
   1d8c8:	10800117 	ldw	r2,4(r2)
   1d8cc:	18bff736 	bltu	r3,r2,1d8ac <__alt_mem_Flash_flash_data+0xf401d8ac>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1d8d0:	e0bffc17 	ldw	r2,-16(fp)
   1d8d4:	10c00d17 	ldw	r3,52(r2)
   1d8d8:	e0bff117 	ldw	r2,-60(fp)
   1d8dc:	1880011e 	bne	r3,r2,1d8e4 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1d8e0:	00000206 	br	1d8ec <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1d8e4:	e0bffe17 	ldw	r2,-8(fp)
   1d8e8:	00bf9916 	blt	zero,r2,1d750 <__alt_mem_Flash_flash_data+0xf401d750>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1d8ec:	e0bffc17 	ldw	r2,-16(fp)
   1d8f0:	10800a17 	ldw	r2,40(r2)
   1d8f4:	1009883a 	mov	r4,r2
   1d8f8:	001a9900 	call	1a990 <OSSemPost>

  if (ptr != buffer)
   1d8fc:	e0ffef17 	ldw	r3,-68(fp)
   1d900:	e0bffd17 	ldw	r2,-12(fp)
   1d904:	18801826 	beq	r3,r2,1d968 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d908:	0005303a 	rdctl	r2,status
   1d90c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d910:	e0fff917 	ldw	r3,-28(fp)
   1d914:	00bfff84 	movi	r2,-2
   1d918:	1884703a 	and	r2,r3,r2
   1d91c:	1001703a 	wrctl	status,r2
  
  return context;
   1d920:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1d924:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d928:	e0bffc17 	ldw	r2,-16(fp)
   1d92c:	10800817 	ldw	r2,32(r2)
   1d930:	10c00054 	ori	r3,r2,1
   1d934:	e0bffc17 	ldw	r2,-16(fp)
   1d938:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d93c:	e0bffc17 	ldw	r2,-16(fp)
   1d940:	10800017 	ldw	r2,0(r2)
   1d944:	10800104 	addi	r2,r2,4
   1d948:	1007883a 	mov	r3,r2
   1d94c:	e0bffc17 	ldw	r2,-16(fp)
   1d950:	10800817 	ldw	r2,32(r2)
   1d954:	18800035 	stwio	r2,0(r3)
   1d958:	e0bff317 	ldw	r2,-52(fp)
   1d95c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d960:	e0bffa17 	ldw	r2,-24(fp)
   1d964:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1d968:	e0ffef17 	ldw	r3,-68(fp)
   1d96c:	e0bffd17 	ldw	r2,-12(fp)
   1d970:	18800426 	beq	r3,r2,1d984 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1d974:	e0ffef17 	ldw	r3,-68(fp)
   1d978:	e0bffd17 	ldw	r2,-12(fp)
   1d97c:	1885c83a 	sub	r2,r3,r2
   1d980:	00000606 	br	1d99c <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1d984:	e0bfff17 	ldw	r2,-4(fp)
   1d988:	1090000c 	andi	r2,r2,16384
   1d98c:	10000226 	beq	r2,zero,1d998 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1d990:	00bffd44 	movi	r2,-11
   1d994:	00000106 	br	1d99c <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1d998:	00bffec4 	movi	r2,-5
}
   1d99c:	e037883a 	mov	sp,fp
   1d9a0:	dfc00117 	ldw	ra,4(sp)
   1d9a4:	df000017 	ldw	fp,0(sp)
   1d9a8:	dec00204 	addi	sp,sp,8
   1d9ac:	f800283a 	ret

0001d9b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1d9b0:	deffed04 	addi	sp,sp,-76
   1d9b4:	dfc01215 	stw	ra,72(sp)
   1d9b8:	df001115 	stw	fp,68(sp)
   1d9bc:	df001104 	addi	fp,sp,68
   1d9c0:	e13ffc15 	stw	r4,-16(fp)
   1d9c4:	e17ffd15 	stw	r5,-12(fp)
   1d9c8:	e1bffe15 	stw	r6,-8(fp)
   1d9cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1d9d0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1d9d4:	e0bffd17 	ldw	r2,-12(fp)
   1d9d8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1d9dc:	e0bffc17 	ldw	r2,-16(fp)
   1d9e0:	10800b17 	ldw	r2,44(r2)
   1d9e4:	e0bff515 	stw	r2,-44(fp)
   1d9e8:	e03ff60d 	sth	zero,-40(fp)
   1d9ec:	e0fff60b 	ldhu	r3,-40(fp)
   1d9f0:	e0bffbc4 	addi	r2,fp,-17
   1d9f4:	e13ff517 	ldw	r4,-44(fp)
   1d9f8:	180b883a 	mov	r5,r3
   1d9fc:	100d883a 	mov	r6,r2
   1da00:	001a5bc0 	call	1a5bc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1da04:	00003806 	br	1dae8 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1da08:	e0bffc17 	ldw	r2,-16(fp)
   1da0c:	10800f17 	ldw	r2,60(r2)
   1da10:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1da14:	e0bffc17 	ldw	r2,-16(fp)
   1da18:	10801017 	ldw	r2,64(r2)
   1da1c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1da20:	e0fff317 	ldw	r3,-52(fp)
   1da24:	e0bff017 	ldw	r2,-64(fp)
   1da28:	1880062e 	bgeu	r3,r2,1da44 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1da2c:	e0fff017 	ldw	r3,-64(fp)
   1da30:	e0bff317 	ldw	r2,-52(fp)
   1da34:	1885c83a 	sub	r2,r3,r2
   1da38:	10bfffc4 	addi	r2,r2,-1
   1da3c:	e0bff115 	stw	r2,-60(fp)
   1da40:	00000b06 	br	1da70 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1da44:	e0bff017 	ldw	r2,-64(fp)
   1da48:	10000526 	beq	r2,zero,1da60 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1da4c:	00c20004 	movi	r3,2048
   1da50:	e0bff317 	ldw	r2,-52(fp)
   1da54:	1885c83a 	sub	r2,r3,r2
   1da58:	e0bff115 	stw	r2,-60(fp)
   1da5c:	00000406 	br	1da70 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1da60:	00c1ffc4 	movi	r3,2047
   1da64:	e0bff317 	ldw	r2,-52(fp)
   1da68:	1885c83a 	sub	r2,r3,r2
   1da6c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1da70:	e0bff117 	ldw	r2,-60(fp)
   1da74:	1000011e 	bne	r2,zero,1da7c <altera_avalon_jtag_uart_write+0xcc>
        break;
   1da78:	00001d06 	br	1daf0 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1da7c:	e0fffe17 	ldw	r3,-8(fp)
   1da80:	e0bff117 	ldw	r2,-60(fp)
   1da84:	1880022e 	bgeu	r3,r2,1da90 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1da88:	e0bffe17 	ldw	r2,-8(fp)
   1da8c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1da90:	e0bff317 	ldw	r2,-52(fp)
   1da94:	10821104 	addi	r2,r2,2116
   1da98:	e0fffc17 	ldw	r3,-16(fp)
   1da9c:	1885883a 	add	r2,r3,r2
   1daa0:	1009883a 	mov	r4,r2
   1daa4:	e17ffd17 	ldw	r5,-12(fp)
   1daa8:	e1bff117 	ldw	r6,-60(fp)
   1daac:	00070180 	call	7018 <memcpy>
      ptr   += n;
   1dab0:	e0fffd17 	ldw	r3,-12(fp)
   1dab4:	e0bff117 	ldw	r2,-60(fp)
   1dab8:	1885883a 	add	r2,r3,r2
   1dabc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1dac0:	e0fffe17 	ldw	r3,-8(fp)
   1dac4:	e0bff117 	ldw	r2,-60(fp)
   1dac8:	1885c83a 	sub	r2,r3,r2
   1dacc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1dad0:	e0fff317 	ldw	r3,-52(fp)
   1dad4:	e0bff117 	ldw	r2,-60(fp)
   1dad8:	1885883a 	add	r2,r3,r2
   1dadc:	10c1ffcc 	andi	r3,r2,2047
   1dae0:	e0bffc17 	ldw	r2,-16(fp)
   1dae4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1dae8:	e0bffe17 	ldw	r2,-8(fp)
   1daec:	00bfc616 	blt	zero,r2,1da08 <__alt_mem_Flash_flash_data+0xf401da08>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1daf0:	0005303a 	rdctl	r2,status
   1daf4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1daf8:	e0fff717 	ldw	r3,-36(fp)
   1dafc:	00bfff84 	movi	r2,-2
   1db00:	1884703a 	and	r2,r3,r2
   1db04:	1001703a 	wrctl	status,r2
  
  return context;
   1db08:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1db0c:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1db10:	e0bffc17 	ldw	r2,-16(fp)
   1db14:	10800817 	ldw	r2,32(r2)
   1db18:	10c00094 	ori	r3,r2,2
   1db1c:	e0bffc17 	ldw	r2,-16(fp)
   1db20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1db24:	e0bffc17 	ldw	r2,-16(fp)
   1db28:	10800017 	ldw	r2,0(r2)
   1db2c:	10800104 	addi	r2,r2,4
   1db30:	1007883a 	mov	r3,r2
   1db34:	e0bffc17 	ldw	r2,-16(fp)
   1db38:	10800817 	ldw	r2,32(r2)
   1db3c:	18800035 	stwio	r2,0(r3)
   1db40:	e0bff417 	ldw	r2,-48(fp)
   1db44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db48:	e0bff817 	ldw	r2,-32(fp)
   1db4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1db50:	e0bffe17 	ldw	r2,-8(fp)
   1db54:	00802e0e 	bge	zero,r2,1dc10 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1db58:	e0bfff17 	ldw	r2,-4(fp)
   1db5c:	1090000c 	andi	r2,r2,16384
   1db60:	10000126 	beq	r2,zero,1db68 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1db64:	00002c06 	br	1dc18 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1db68:	008000b4 	movhi	r2,2
   1db6c:	1093df44 	addi	r2,r2,20349
   1db70:	10800003 	ldbu	r2,0(r2)
   1db74:	10803fcc 	andi	r2,r2,255
   1db78:	10800058 	cmpnei	r2,r2,1
   1db7c:	1000161e 	bne	r2,zero,1dbd8 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1db80:	e0bffc17 	ldw	r2,-16(fp)
   1db84:	10800c17 	ldw	r2,48(r2)
   1db88:	e0bff915 	stw	r2,-28(fp)
   1db8c:	00800184 	movi	r2,6
   1db90:	e0bffa0d 	sth	r2,-24(fp)
   1db94:	00bfe0c4 	movi	r2,-125
   1db98:	e0bffa85 	stb	r2,-22(fp)
   1db9c:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1dba0:	008000b4 	movhi	r2,2
   1dba4:	1093df44 	addi	r2,r2,20349
   1dba8:	10800003 	ldbu	r2,0(r2)
   1dbac:	10803fcc 	andi	r2,r2,255
   1dbb0:	10001326 	beq	r2,zero,1dc00 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1dbb4:	e17ffa0b 	ldhu	r5,-24(fp)
   1dbb8:	e1bffa83 	ldbu	r6,-22(fp)
   1dbbc:	e0fffb0b 	ldhu	r3,-20(fp)
   1dbc0:	e0bffb84 	addi	r2,fp,-18
   1dbc4:	d8800015 	stw	r2,0(sp)
   1dbc8:	e13ff917 	ldw	r4,-28(fp)
   1dbcc:	180f883a 	mov	r7,r3
   1dbd0:	00179140 	call	17914 <OSFlagPend>
   1dbd4:	00000a06 	br	1dc00 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1dbd8:	0001883a 	nop
   1dbdc:	e0bffc17 	ldw	r2,-16(fp)
   1dbe0:	10c01017 	ldw	r3,64(r2)
   1dbe4:	e0bff017 	ldw	r2,-64(fp)
   1dbe8:	1880051e 	bne	r3,r2,1dc00 <altera_avalon_jtag_uart_write+0x250>
   1dbec:	e0bffc17 	ldw	r2,-16(fp)
   1dbf0:	10c00917 	ldw	r3,36(r2)
   1dbf4:	e0bffc17 	ldw	r2,-16(fp)
   1dbf8:	10800117 	ldw	r2,4(r2)
   1dbfc:	18bff736 	bltu	r3,r2,1dbdc <__alt_mem_Flash_flash_data+0xf401dbdc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1dc00:	e0bffc17 	ldw	r2,-16(fp)
   1dc04:	10800917 	ldw	r2,36(r2)
   1dc08:	10000126 	beq	r2,zero,1dc10 <altera_avalon_jtag_uart_write+0x260>
         break;
   1dc0c:	00000206 	br	1dc18 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1dc10:	e0bffe17 	ldw	r2,-8(fp)
   1dc14:	00bf7b16 	blt	zero,r2,1da04 <__alt_mem_Flash_flash_data+0xf401da04>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1dc18:	e0bffc17 	ldw	r2,-16(fp)
   1dc1c:	10800b17 	ldw	r2,44(r2)
   1dc20:	1009883a 	mov	r4,r2
   1dc24:	001a9900 	call	1a990 <OSSemPost>

  if (ptr != start)
   1dc28:	e0fffd17 	ldw	r3,-12(fp)
   1dc2c:	e0bff217 	ldw	r2,-56(fp)
   1dc30:	18800426 	beq	r3,r2,1dc44 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1dc34:	e0fffd17 	ldw	r3,-12(fp)
   1dc38:	e0bff217 	ldw	r2,-56(fp)
   1dc3c:	1885c83a 	sub	r2,r3,r2
   1dc40:	00000606 	br	1dc5c <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1dc44:	e0bfff17 	ldw	r2,-4(fp)
   1dc48:	1090000c 	andi	r2,r2,16384
   1dc4c:	10000226 	beq	r2,zero,1dc58 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1dc50:	00bffd44 	movi	r2,-11
   1dc54:	00000106 	br	1dc5c <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1dc58:	00bffec4 	movi	r2,-5
}
   1dc5c:	e037883a 	mov	sp,fp
   1dc60:	dfc00117 	ldw	ra,4(sp)
   1dc64:	df000017 	ldw	fp,0(sp)
   1dc68:	dec00204 	addi	sp,sp,8
   1dc6c:	f800283a 	ret

0001dc70 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1dc70:	defff904 	addi	sp,sp,-28
   1dc74:	dfc00615 	stw	ra,24(sp)
   1dc78:	df000515 	stw	fp,20(sp)
   1dc7c:	df000504 	addi	fp,sp,20
   1dc80:	e13ffe15 	stw	r4,-8(fp)
   1dc84:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1dc88:	0007883a 	mov	r3,zero
   1dc8c:	e0bffe17 	ldw	r2,-8(fp)
   1dc90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1dc94:	e0bffe17 	ldw	r2,-8(fp)
   1dc98:	10800104 	addi	r2,r2,4
   1dc9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dca0:	0005303a 	rdctl	r2,status
   1dca4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dca8:	e0fffc17 	ldw	r3,-16(fp)
   1dcac:	00bfff84 	movi	r2,-2
   1dcb0:	1884703a 	and	r2,r3,r2
   1dcb4:	1001703a 	wrctl	status,r2
  
  return context;
   1dcb8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1dcbc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1dcc0:	001fcac0 	call	1fcac <alt_tick>
   1dcc4:	e0bffb17 	ldw	r2,-20(fp)
   1dcc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dccc:	e0bffd17 	ldw	r2,-12(fp)
   1dcd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1dcd4:	e037883a 	mov	sp,fp
   1dcd8:	dfc00117 	ldw	ra,4(sp)
   1dcdc:	df000017 	ldw	fp,0(sp)
   1dce0:	dec00204 	addi	sp,sp,8
   1dce4:	f800283a 	ret

0001dce8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1dce8:	defff904 	addi	sp,sp,-28
   1dcec:	dfc00615 	stw	ra,24(sp)
   1dcf0:	df000515 	stw	fp,20(sp)
   1dcf4:	df000504 	addi	fp,sp,20
   1dcf8:	e13ffc15 	stw	r4,-16(fp)
   1dcfc:	e17ffd15 	stw	r5,-12(fp)
   1dd00:	e1bffe15 	stw	r6,-8(fp)
   1dd04:	e1ffff15 	stw	r7,-4(fp)
   1dd08:	e0bfff17 	ldw	r2,-4(fp)
   1dd0c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1dd10:	008000b4 	movhi	r2,2
   1dd14:	1093f404 	addi	r2,r2,20432
   1dd18:	10800017 	ldw	r2,0(r2)
   1dd1c:	1000041e 	bne	r2,zero,1dd30 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1dd20:	008000b4 	movhi	r2,2
   1dd24:	1093f404 	addi	r2,r2,20432
   1dd28:	e0fffb17 	ldw	r3,-20(fp)
   1dd2c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1dd30:	e0bffc17 	ldw	r2,-16(fp)
   1dd34:	10800104 	addi	r2,r2,4
   1dd38:	00c001c4 	movi	r3,7
   1dd3c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1dd40:	e13ffe17 	ldw	r4,-8(fp)
   1dd44:	e17ffc17 	ldw	r5,-16(fp)
   1dd48:	018000b4 	movhi	r6,2
   1dd4c:	31b71c04 	addi	r6,r6,-9104
   1dd50:	001f7f00 	call	1f7f0 <alt_irq_register>
#endif  
}
   1dd54:	e037883a 	mov	sp,fp
   1dd58:	dfc00117 	ldw	ra,4(sp)
   1dd5c:	df000017 	ldw	fp,0(sp)
   1dd60:	dec00204 	addi	sp,sp,8
   1dd64:	f800283a 	ret

0001dd68 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1dd68:	defffc04 	addi	sp,sp,-16
   1dd6c:	df000315 	stw	fp,12(sp)
   1dd70:	df000304 	addi	fp,sp,12
   1dd74:	e13ffe15 	stw	r4,-8(fp)
   1dd78:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1dd7c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1dd80:	e0bfff17 	ldw	r2,-4(fp)
   1dd84:	1000061e 	bne	r2,zero,1dda0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1dd88:	e0bffe17 	ldw	r2,-8(fp)
   1dd8c:	1007883a 	mov	r3,r2
   1dd90:	e0bffd03 	ldbu	r2,-12(fp)
   1dd94:	1884b03a 	or	r2,r3,r2
   1dd98:	e0bffd05 	stb	r2,-12(fp)
   1dd9c:	00000806 	br	1ddc0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1dda0:	e0bffe17 	ldw	r2,-8(fp)
   1dda4:	1007883a 	mov	r3,r2
   1dda8:	e0bffd03 	ldbu	r2,-12(fp)
   1ddac:	1884b03a 	or	r2,r3,r2
   1ddb0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1ddb4:	e0bffd03 	ldbu	r2,-12(fp)
   1ddb8:	10801014 	ori	r2,r2,64
   1ddbc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1ddc0:	e0fffd03 	ldbu	r3,-12(fp)
   1ddc4:	00bfe004 	movi	r2,-128
   1ddc8:	1884b03a 	or	r2,r3,r2
}
   1ddcc:	e037883a 	mov	sp,fp
   1ddd0:	df000017 	ldw	fp,0(sp)
   1ddd4:	dec00104 	addi	sp,sp,4
   1ddd8:	f800283a 	ret

0001dddc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1dddc:	defffd04 	addi	sp,sp,-12
   1dde0:	df000215 	stw	fp,8(sp)
   1dde4:	df000204 	addi	fp,sp,8
   1dde8:	e13ffe15 	stw	r4,-8(fp)
   1ddec:	2805883a 	mov	r2,r5
   1ddf0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1ddf4:	e0bffe17 	ldw	r2,-8(fp)
   1ddf8:	10800a17 	ldw	r2,40(r2)
   1ddfc:	1007883a 	mov	r3,r2
   1de00:	e0bfff03 	ldbu	r2,-4(fp)
   1de04:	18800025 	stbio	r2,0(r3)
}
   1de08:	e037883a 	mov	sp,fp
   1de0c:	df000017 	ldw	fp,0(sp)
   1de10:	dec00104 	addi	sp,sp,4
   1de14:	f800283a 	ret

0001de18 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1de18:	defffe04 	addi	sp,sp,-8
   1de1c:	df000115 	stw	fp,4(sp)
   1de20:	df000104 	addi	fp,sp,4
   1de24:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1de28:	e0bfff17 	ldw	r2,-4(fp)
   1de2c:	10800a17 	ldw	r2,40(r2)
   1de30:	1007883a 	mov	r3,r2
   1de34:	00800044 	movi	r2,1
   1de38:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1de3c:	e037883a 	mov	sp,fp
   1de40:	df000017 	ldw	fp,0(sp)
   1de44:	dec00104 	addi	sp,sp,4
   1de48:	f800283a 	ret

0001de4c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1de4c:	defffc04 	addi	sp,sp,-16
   1de50:	dfc00315 	stw	ra,12(sp)
   1de54:	df000215 	stw	fp,8(sp)
   1de58:	df000204 	addi	fp,sp,8
   1de5c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1de60:	e13fff17 	ldw	r4,-4(fp)
   1de64:	014000b4 	movhi	r5,2
   1de68:	294be704 	addi	r5,r5,12188
   1de6c:	001f5f80 	call	1f5f8 <alt_find_dev>
   1de70:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1de74:	e0bffe17 	ldw	r2,-8(fp)
}
   1de78:	e037883a 	mov	sp,fp
   1de7c:	dfc00117 	ldw	ra,4(sp)
   1de80:	df000017 	ldw	fp,0(sp)
   1de84:	dec00204 	addi	sp,sp,8
   1de88:	f800283a 	ret

0001de8c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1de8c:	defffb04 	addi	sp,sp,-20
   1de90:	df000415 	stw	fp,16(sp)
   1de94:	df000404 	addi	fp,sp,16
   1de98:	e13ffd15 	stw	r4,-12(fp)
   1de9c:	e17ffe15 	stw	r5,-8(fp)
   1dea0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1dea4:	e03ffc15 	stw	zero,-16(fp)
   1dea8:	00000f06 	br	1dee8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1deac:	e0bffd17 	ldw	r2,-12(fp)
   1deb0:	10800a17 	ldw	r2,40(r2)
   1deb4:	10800044 	addi	r2,r2,1
   1deb8:	1009883a 	mov	r4,r2
   1debc:	e0fffe17 	ldw	r3,-8(fp)
   1dec0:	e0bffc17 	ldw	r2,-16(fp)
   1dec4:	1885883a 	add	r2,r3,r2
   1dec8:	10800003 	ldbu	r2,0(r2)
   1decc:	10803fcc 	andi	r2,r2,255
   1ded0:	1080201c 	xori	r2,r2,128
   1ded4:	10bfe004 	addi	r2,r2,-128
   1ded8:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1dedc:	e0bffc17 	ldw	r2,-16(fp)
   1dee0:	10800044 	addi	r2,r2,1
   1dee4:	e0bffc15 	stw	r2,-16(fp)
   1dee8:	e0fffc17 	ldw	r3,-16(fp)
   1deec:	e0bfff17 	ldw	r2,-4(fp)
   1def0:	18bfee36 	bltu	r3,r2,1deac <__alt_mem_Flash_flash_data+0xf401deac>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1def4:	e037883a 	mov	sp,fp
   1def8:	df000017 	ldw	fp,0(sp)
   1defc:	dec00104 	addi	sp,sp,4
   1df00:	f800283a 	ret

0001df04 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1df04:	defffd04 	addi	sp,sp,-12
   1df08:	df000215 	stw	fp,8(sp)
   1df0c:	df000204 	addi	fp,sp,8
   1df10:	e13ffe15 	stw	r4,-8(fp)
   1df14:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1df18:	00000d06 	br	1df50 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1df1c:	e0bffe17 	ldw	r2,-8(fp)
   1df20:	10800a17 	ldw	r2,40(r2)
   1df24:	10800044 	addi	r2,r2,1
   1df28:	1007883a 	mov	r3,r2
   1df2c:	e0bfff17 	ldw	r2,-4(fp)
   1df30:	10800003 	ldbu	r2,0(r2)
   1df34:	10803fcc 	andi	r2,r2,255
   1df38:	1080201c 	xori	r2,r2,128
   1df3c:	10bfe004 	addi	r2,r2,-128
   1df40:	18800025 	stbio	r2,0(r3)
		++ptr;
   1df44:	e0bfff17 	ldw	r2,-4(fp)
   1df48:	10800044 	addi	r2,r2,1
   1df4c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1df50:	e0bfff17 	ldw	r2,-4(fp)
   1df54:	10800003 	ldbu	r2,0(r2)
   1df58:	10803fcc 	andi	r2,r2,255
   1df5c:	1080201c 	xori	r2,r2,128
   1df60:	10bfe004 	addi	r2,r2,-128
   1df64:	103fed1e 	bne	r2,zero,1df1c <__alt_mem_Flash_flash_data+0xf401df1c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1df68:	e037883a 	mov	sp,fp
   1df6c:	df000017 	ldw	fp,0(sp)
   1df70:	dec00104 	addi	sp,sp,4
   1df74:	f800283a 	ret

0001df78 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1df78:	defffb04 	addi	sp,sp,-20
   1df7c:	dfc00415 	stw	ra,16(sp)
   1df80:	df000315 	stw	fp,12(sp)
   1df84:	df000304 	addi	fp,sp,12
   1df88:	e13ffd15 	stw	r4,-12(fp)
   1df8c:	e17ffe15 	stw	r5,-8(fp)
   1df90:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1df94:	e0bffd17 	ldw	r2,-12(fp)
   1df98:	10c00017 	ldw	r3,0(r2)
   1df9c:	e0bfff17 	ldw	r2,-4(fp)
   1dfa0:	1809883a 	mov	r4,r3
   1dfa4:	e17ffe17 	ldw	r5,-8(fp)
   1dfa8:	100d883a 	mov	r6,r2
   1dfac:	001de8c0 	call	1de8c <alt_up_character_lcd_write>
	return 0;
   1dfb0:	0005883a 	mov	r2,zero
}
   1dfb4:	e037883a 	mov	sp,fp
   1dfb8:	dfc00117 	ldw	ra,4(sp)
   1dfbc:	df000017 	ldw	fp,0(sp)
   1dfc0:	dec00204 	addi	sp,sp,8
   1dfc4:	f800283a 	ret

0001dfc8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1dfc8:	defffa04 	addi	sp,sp,-24
   1dfcc:	dfc00515 	stw	ra,20(sp)
   1dfd0:	df000415 	stw	fp,16(sp)
   1dfd4:	df000404 	addi	fp,sp,16
   1dfd8:	e13ffd15 	stw	r4,-12(fp)
   1dfdc:	e17ffe15 	stw	r5,-8(fp)
   1dfe0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1dfe4:	e0bffe17 	ldw	r2,-8(fp)
   1dfe8:	10800a28 	cmpgeui	r2,r2,40
   1dfec:	1000031e 	bne	r2,zero,1dffc <alt_up_character_lcd_set_cursor_pos+0x34>
   1dff0:	e0bfff17 	ldw	r2,-4(fp)
   1dff4:	108000b0 	cmpltui	r2,r2,2
   1dff8:	1000021e 	bne	r2,zero,1e004 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1dffc:	00bfffc4 	movi	r2,-1
   1e000:	00000906 	br	1e028 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1e004:	e13ffe17 	ldw	r4,-8(fp)
   1e008:	e17fff17 	ldw	r5,-4(fp)
   1e00c:	001dd680 	call	1dd68 <get_DDRAM_addr>
   1e010:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1e014:	e0bffc03 	ldbu	r2,-16(fp)
   1e018:	e13ffd17 	ldw	r4,-12(fp)
   1e01c:	100b883a 	mov	r5,r2
   1e020:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
	return 0;
   1e024:	0005883a 	mov	r2,zero
}
   1e028:	e037883a 	mov	sp,fp
   1e02c:	dfc00117 	ldw	ra,4(sp)
   1e030:	df000017 	ldw	fp,0(sp)
   1e034:	dec00204 	addi	sp,sp,8
   1e038:	f800283a 	ret

0001e03c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1e03c:	defffb04 	addi	sp,sp,-20
   1e040:	dfc00415 	stw	ra,16(sp)
   1e044:	df000315 	stw	fp,12(sp)
   1e048:	df000304 	addi	fp,sp,12
   1e04c:	e13ffe15 	stw	r4,-8(fp)
   1e050:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1e054:	e0bfff17 	ldw	r2,-4(fp)
   1e058:	1000011e 	bne	r2,zero,1e060 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1e05c:	00001406 	br	1e0b0 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1e060:	e0bfff17 	ldw	r2,-4(fp)
   1e064:	0080020e 	bge	zero,r2,1e070 <alt_up_character_lcd_shift_cursor+0x34>
   1e068:	00800504 	movi	r2,20
   1e06c:	00000106 	br	1e074 <alt_up_character_lcd_shift_cursor+0x38>
   1e070:	00800404 	movi	r2,16
   1e074:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1e078:	e0bfff17 	ldw	r2,-4(fp)
   1e07c:	1000010e 	bge	r2,zero,1e084 <alt_up_character_lcd_shift_cursor+0x48>
   1e080:	0085c83a 	sub	r2,zero,r2
   1e084:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e088:	00000406 	br	1e09c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1e08c:	e0bffd43 	ldbu	r2,-11(fp)
   1e090:	e13ffe17 	ldw	r4,-8(fp)
   1e094:	100b883a 	mov	r5,r2
   1e098:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e09c:	e0bffd03 	ldbu	r2,-12(fp)
   1e0a0:	10ffffc4 	addi	r3,r2,-1
   1e0a4:	e0fffd05 	stb	r3,-12(fp)
   1e0a8:	10803fcc 	andi	r2,r2,255
   1e0ac:	103ff71e 	bne	r2,zero,1e08c <__alt_mem_Flash_flash_data+0xf401e08c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e0b0:	e037883a 	mov	sp,fp
   1e0b4:	dfc00117 	ldw	ra,4(sp)
   1e0b8:	df000017 	ldw	fp,0(sp)
   1e0bc:	dec00204 	addi	sp,sp,8
   1e0c0:	f800283a 	ret

0001e0c4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1e0c4:	defffb04 	addi	sp,sp,-20
   1e0c8:	dfc00415 	stw	ra,16(sp)
   1e0cc:	df000315 	stw	fp,12(sp)
   1e0d0:	df000304 	addi	fp,sp,12
   1e0d4:	e13ffe15 	stw	r4,-8(fp)
   1e0d8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1e0dc:	e0bfff17 	ldw	r2,-4(fp)
   1e0e0:	1000011e 	bne	r2,zero,1e0e8 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1e0e4:	00001406 	br	1e138 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1e0e8:	e0bfff17 	ldw	r2,-4(fp)
   1e0ec:	0080020e 	bge	zero,r2,1e0f8 <alt_up_character_lcd_shift_display+0x34>
   1e0f0:	00800704 	movi	r2,28
   1e0f4:	00000106 	br	1e0fc <alt_up_character_lcd_shift_display+0x38>
   1e0f8:	00800604 	movi	r2,24
   1e0fc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1e100:	e0bfff17 	ldw	r2,-4(fp)
   1e104:	1000010e 	bge	r2,zero,1e10c <alt_up_character_lcd_shift_display+0x48>
   1e108:	0085c83a 	sub	r2,zero,r2
   1e10c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e110:	00000406 	br	1e124 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1e114:	e0bffd43 	ldbu	r2,-11(fp)
   1e118:	e13ffe17 	ldw	r4,-8(fp)
   1e11c:	100b883a 	mov	r5,r2
   1e120:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e124:	e0bffd03 	ldbu	r2,-12(fp)
   1e128:	10ffffc4 	addi	r3,r2,-1
   1e12c:	e0fffd05 	stb	r3,-12(fp)
   1e130:	10803fcc 	andi	r2,r2,255
   1e134:	103ff71e 	bne	r2,zero,1e114 <__alt_mem_Flash_flash_data+0xf401e114>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e138:	e037883a 	mov	sp,fp
   1e13c:	dfc00117 	ldw	ra,4(sp)
   1e140:	df000017 	ldw	fp,0(sp)
   1e144:	dec00204 	addi	sp,sp,8
   1e148:	f800283a 	ret

0001e14c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1e14c:	defffa04 	addi	sp,sp,-24
   1e150:	dfc00515 	stw	ra,20(sp)
   1e154:	df000415 	stw	fp,16(sp)
   1e158:	df000404 	addi	fp,sp,16
   1e15c:	e13ffd15 	stw	r4,-12(fp)
   1e160:	e17ffe15 	stw	r5,-8(fp)
   1e164:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1e168:	e0bffe17 	ldw	r2,-8(fp)
   1e16c:	10800a28 	cmpgeui	r2,r2,40
   1e170:	1000031e 	bne	r2,zero,1e180 <alt_up_character_lcd_erase_pos+0x34>
   1e174:	e0bfff17 	ldw	r2,-4(fp)
   1e178:	108000b0 	cmpltui	r2,r2,2
   1e17c:	1000021e 	bne	r2,zero,1e188 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1e180:	00bfffc4 	movi	r2,-1
   1e184:	00000f06 	br	1e1c4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1e188:	e13ffe17 	ldw	r4,-8(fp)
   1e18c:	e17fff17 	ldw	r5,-4(fp)
   1e190:	001dd680 	call	1dd68 <get_DDRAM_addr>
   1e194:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1e198:	e0bffc03 	ldbu	r2,-16(fp)
   1e19c:	e13ffd17 	ldw	r4,-12(fp)
   1e1a0:	100b883a 	mov	r5,r2
   1e1a4:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1e1a8:	e0bffd17 	ldw	r2,-12(fp)
   1e1ac:	10800a17 	ldw	r2,40(r2)
   1e1b0:	10800044 	addi	r2,r2,1
   1e1b4:	1007883a 	mov	r3,r2
   1e1b8:	00800084 	movi	r2,2
   1e1bc:	18800025 	stbio	r2,0(r3)
	return 0;
   1e1c0:	0005883a 	mov	r2,zero
}
   1e1c4:	e037883a 	mov	sp,fp
   1e1c8:	dfc00117 	ldw	ra,4(sp)
   1e1cc:	df000017 	ldw	fp,0(sp)
   1e1d0:	dec00204 	addi	sp,sp,8
   1e1d4:	f800283a 	ret

0001e1d8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1e1d8:	defffd04 	addi	sp,sp,-12
   1e1dc:	dfc00215 	stw	ra,8(sp)
   1e1e0:	df000115 	stw	fp,4(sp)
   1e1e4:	df000104 	addi	fp,sp,4
   1e1e8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1e1ec:	e13fff17 	ldw	r4,-4(fp)
   1e1f0:	01400304 	movi	r5,12
   1e1f4:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
}
   1e1f8:	e037883a 	mov	sp,fp
   1e1fc:	dfc00117 	ldw	ra,4(sp)
   1e200:	df000017 	ldw	fp,0(sp)
   1e204:	dec00204 	addi	sp,sp,8
   1e208:	f800283a 	ret

0001e20c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1e20c:	defffd04 	addi	sp,sp,-12
   1e210:	dfc00215 	stw	ra,8(sp)
   1e214:	df000115 	stw	fp,4(sp)
   1e218:	df000104 	addi	fp,sp,4
   1e21c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1e220:	e13fff17 	ldw	r4,-4(fp)
   1e224:	014003c4 	movi	r5,15
   1e228:	001dddc0 	call	1dddc <alt_up_character_lcd_send_cmd>
}
   1e22c:	e037883a 	mov	sp,fp
   1e230:	dfc00117 	ldw	ra,4(sp)
   1e234:	df000017 	ldw	fp,0(sp)
   1e238:	dec00204 	addi	sp,sp,8
   1e23c:	f800283a 	ret

0001e240 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1e240:	defffd04 	addi	sp,sp,-12
   1e244:	df000215 	stw	fp,8(sp)
   1e248:	df000204 	addi	fp,sp,8
   1e24c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e250:	e0bfff17 	ldw	r2,-4(fp)
   1e254:	10800a17 	ldw	r2,40(r2)
   1e258:	10800104 	addi	r2,r2,4
   1e25c:	10800037 	ldwio	r2,0(r2)
   1e260:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1e264:	e0bffe17 	ldw	r2,-8(fp)
   1e268:	10800054 	ori	r2,r2,1
   1e26c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e270:	e0bfff17 	ldw	r2,-4(fp)
   1e274:	10800a17 	ldw	r2,40(r2)
   1e278:	10800104 	addi	r2,r2,4
   1e27c:	1007883a 	mov	r3,r2
   1e280:	e0bffe17 	ldw	r2,-8(fp)
   1e284:	18800035 	stwio	r2,0(r3)
}
   1e288:	e037883a 	mov	sp,fp
   1e28c:	df000017 	ldw	fp,0(sp)
   1e290:	dec00104 	addi	sp,sp,4
   1e294:	f800283a 	ret

0001e298 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1e298:	defffd04 	addi	sp,sp,-12
   1e29c:	df000215 	stw	fp,8(sp)
   1e2a0:	df000204 	addi	fp,sp,8
   1e2a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e2a8:	e0bfff17 	ldw	r2,-4(fp)
   1e2ac:	10800a17 	ldw	r2,40(r2)
   1e2b0:	10800104 	addi	r2,r2,4
   1e2b4:	10800037 	ldwio	r2,0(r2)
   1e2b8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1e2bc:	e0fffe17 	ldw	r3,-8(fp)
   1e2c0:	00bfff84 	movi	r2,-2
   1e2c4:	1884703a 	and	r2,r3,r2
   1e2c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e2cc:	e0bfff17 	ldw	r2,-4(fp)
   1e2d0:	10800a17 	ldw	r2,40(r2)
   1e2d4:	10800104 	addi	r2,r2,4
   1e2d8:	1007883a 	mov	r3,r2
   1e2dc:	e0bffe17 	ldw	r2,-8(fp)
   1e2e0:	18800035 	stwio	r2,0(r3)
}
   1e2e4:	e037883a 	mov	sp,fp
   1e2e8:	df000017 	ldw	fp,0(sp)
   1e2ec:	dec00104 	addi	sp,sp,4
   1e2f0:	f800283a 	ret

0001e2f4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1e2f4:	defffd04 	addi	sp,sp,-12
   1e2f8:	df000215 	stw	fp,8(sp)
   1e2fc:	df000204 	addi	fp,sp,8
   1e300:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e304:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1e308:	e0bfff17 	ldw	r2,-4(fp)
   1e30c:	10800a17 	ldw	r2,40(r2)
   1e310:	10800084 	addi	r2,r2,2
   1e314:	1080002b 	ldhuio	r2,0(r2)
   1e318:	10bfffcc 	andi	r2,r2,65535
   1e31c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1e320:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e324:	e037883a 	mov	sp,fp
   1e328:	df000017 	ldw	fp,0(sp)
   1e32c:	dec00104 	addi	sp,sp,4
   1e330:	f800283a 	ret

0001e334 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1e334:	defffd04 	addi	sp,sp,-12
   1e338:	df000215 	stw	fp,8(sp)
   1e33c:	df000204 	addi	fp,sp,8
   1e340:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e344:	e0bfff17 	ldw	r2,-4(fp)
   1e348:	10800a17 	ldw	r2,40(r2)
   1e34c:	10800104 	addi	r2,r2,4
   1e350:	10800037 	ldwio	r2,0(r2)
   1e354:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1e358:	e0bffe17 	ldw	r2,-8(fp)
   1e35c:	1004d43a 	srli	r2,r2,16
}
   1e360:	e037883a 	mov	sp,fp
   1e364:	df000017 	ldw	fp,0(sp)
   1e368:	dec00104 	addi	sp,sp,4
   1e36c:	f800283a 	ret

0001e370 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1e370:	defffd04 	addi	sp,sp,-12
   1e374:	df000215 	stw	fp,8(sp)
   1e378:	df000204 	addi	fp,sp,8
   1e37c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1e380:	e0bfff17 	ldw	r2,-4(fp)
   1e384:	1080800c 	andi	r2,r2,512
   1e388:	1004d27a 	srli	r2,r2,9
   1e38c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e390:	e0bffe17 	ldw	r2,-8(fp)
   1e394:	10000226 	beq	r2,zero,1e3a0 <alt_up_irda_check_parity+0x30>
   1e398:	00bfffc4 	movi	r2,-1
   1e39c:	00000106 	br	1e3a4 <alt_up_irda_check_parity+0x34>
   1e3a0:	0005883a 	mov	r2,zero
}
   1e3a4:	e037883a 	mov	sp,fp
   1e3a8:	df000017 	ldw	fp,0(sp)
   1e3ac:	dec00104 	addi	sp,sp,4
   1e3b0:	f800283a 	ret

0001e3b4 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1e3b4:	defffd04 	addi	sp,sp,-12
   1e3b8:	df000215 	stw	fp,8(sp)
   1e3bc:	df000204 	addi	fp,sp,8
   1e3c0:	e13ffe15 	stw	r4,-8(fp)
   1e3c4:	2805883a 	mov	r2,r5
   1e3c8:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1e3cc:	e0bffe17 	ldw	r2,-8(fp)
   1e3d0:	10800a17 	ldw	r2,40(r2)
   1e3d4:	1007883a 	mov	r3,r2
   1e3d8:	e0bfff03 	ldbu	r2,-4(fp)
   1e3dc:	18800035 	stwio	r2,0(r3)
	return 0;
   1e3e0:	0005883a 	mov	r2,zero
}
   1e3e4:	e037883a 	mov	sp,fp
   1e3e8:	df000017 	ldw	fp,0(sp)
   1e3ec:	dec00104 	addi	sp,sp,4
   1e3f0:	f800283a 	ret

0001e3f4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1e3f4:	defffa04 	addi	sp,sp,-24
   1e3f8:	dfc00515 	stw	ra,20(sp)
   1e3fc:	df000415 	stw	fp,16(sp)
   1e400:	df000404 	addi	fp,sp,16
   1e404:	e13ffd15 	stw	r4,-12(fp)
   1e408:	e17ffe15 	stw	r5,-8(fp)
   1e40c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1e410:	e0bffd17 	ldw	r2,-12(fp)
   1e414:	10800a17 	ldw	r2,40(r2)
   1e418:	10800037 	ldwio	r2,0(r2)
   1e41c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1e420:	e0bffc17 	ldw	r2,-16(fp)
   1e424:	1007883a 	mov	r3,r2
   1e428:	e0bffe17 	ldw	r2,-8(fp)
   1e42c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1e430:	e13ffc17 	ldw	r4,-16(fp)
   1e434:	001e3700 	call	1e370 <alt_up_irda_check_parity>
   1e438:	1007883a 	mov	r3,r2
   1e43c:	e0bfff17 	ldw	r2,-4(fp)
   1e440:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1e444:	e0bffc17 	ldw	r2,-16(fp)
   1e448:	10a0000c 	andi	r2,r2,32768
   1e44c:	1004d3fa 	srli	r2,r2,15
   1e450:	10bfffc4 	addi	r2,r2,-1
}
   1e454:	e037883a 	mov	sp,fp
   1e458:	dfc00117 	ldw	ra,4(sp)
   1e45c:	df000017 	ldw	fp,0(sp)
   1e460:	dec00204 	addi	sp,sp,8
   1e464:	f800283a 	ret

0001e468 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e468:	defff804 	addi	sp,sp,-32
   1e46c:	dfc00715 	stw	ra,28(sp)
   1e470:	df000615 	stw	fp,24(sp)
   1e474:	df000604 	addi	fp,sp,24
   1e478:	e13ffd15 	stw	r4,-12(fp)
   1e47c:	e17ffe15 	stw	r5,-8(fp)
   1e480:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e484:	e0bffd17 	ldw	r2,-12(fp)
   1e488:	10800017 	ldw	r2,0(r2)
   1e48c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e490:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e494:	00000e06 	br	1e4d0 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1e498:	e0bffe17 	ldw	r2,-8(fp)
   1e49c:	10c00044 	addi	r3,r2,1
   1e4a0:	e0fffe15 	stw	r3,-8(fp)
   1e4a4:	e0fffc04 	addi	r3,fp,-16
   1e4a8:	e13ffb17 	ldw	r4,-20(fp)
   1e4ac:	100b883a 	mov	r5,r2
   1e4b0:	180d883a 	mov	r6,r3
   1e4b4:	001e3f40 	call	1e3f4 <alt_up_irda_read_data>
   1e4b8:	1000041e 	bne	r2,zero,1e4cc <alt_up_irda_read_fd+0x64>
			count++;
   1e4bc:	e0bffa17 	ldw	r2,-24(fp)
   1e4c0:	10800044 	addi	r2,r2,1
   1e4c4:	e0bffa15 	stw	r2,-24(fp)
   1e4c8:	00000106 	br	1e4d0 <alt_up_irda_read_fd+0x68>
		else
			break;
   1e4cc:	00000406 	br	1e4e0 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e4d0:	e0bfff17 	ldw	r2,-4(fp)
   1e4d4:	10ffffc4 	addi	r3,r2,-1
   1e4d8:	e0ffff15 	stw	r3,-4(fp)
   1e4dc:	103fee1e 	bne	r2,zero,1e498 <__alt_mem_Flash_flash_data+0xf401e498>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e4e0:	e0bffa17 	ldw	r2,-24(fp)
}
   1e4e4:	e037883a 	mov	sp,fp
   1e4e8:	dfc00117 	ldw	ra,4(sp)
   1e4ec:	df000017 	ldw	fp,0(sp)
   1e4f0:	dec00204 	addi	sp,sp,8
   1e4f4:	f800283a 	ret

0001e4f8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e4f8:	defff904 	addi	sp,sp,-28
   1e4fc:	dfc00615 	stw	ra,24(sp)
   1e500:	df000515 	stw	fp,20(sp)
   1e504:	df000504 	addi	fp,sp,20
   1e508:	e13ffd15 	stw	r4,-12(fp)
   1e50c:	e17ffe15 	stw	r5,-8(fp)
   1e510:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e514:	e0bffd17 	ldw	r2,-12(fp)
   1e518:	10800017 	ldw	r2,0(r2)
   1e51c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e520:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e524:	00000e06 	br	1e560 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1e528:	e0bffe17 	ldw	r2,-8(fp)
   1e52c:	10c00044 	addi	r3,r2,1
   1e530:	e0fffe15 	stw	r3,-8(fp)
   1e534:	10800003 	ldbu	r2,0(r2)
   1e538:	10803fcc 	andi	r2,r2,255
   1e53c:	e13ffc17 	ldw	r4,-16(fp)
   1e540:	100b883a 	mov	r5,r2
   1e544:	001e3b40 	call	1e3b4 <alt_up_irda_write_data>
   1e548:	1000041e 	bne	r2,zero,1e55c <alt_up_irda_write_fd+0x64>
			count++;
   1e54c:	e0bffb17 	ldw	r2,-20(fp)
   1e550:	10800044 	addi	r2,r2,1
   1e554:	e0bffb15 	stw	r2,-20(fp)
   1e558:	00000106 	br	1e560 <alt_up_irda_write_fd+0x68>
		else
			break;
   1e55c:	00000406 	br	1e570 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1e560:	e0bfff17 	ldw	r2,-4(fp)
   1e564:	10ffffc4 	addi	r3,r2,-1
   1e568:	e0ffff15 	stw	r3,-4(fp)
   1e56c:	103fee1e 	bne	r2,zero,1e528 <__alt_mem_Flash_flash_data+0xf401e528>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1e570:	e0bffb17 	ldw	r2,-20(fp)
}
   1e574:	e037883a 	mov	sp,fp
   1e578:	dfc00117 	ldw	ra,4(sp)
   1e57c:	df000017 	ldw	fp,0(sp)
   1e580:	dec00204 	addi	sp,sp,8
   1e584:	f800283a 	ret

0001e588 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1e588:	defffc04 	addi	sp,sp,-16
   1e58c:	dfc00315 	stw	ra,12(sp)
   1e590:	df000215 	stw	fp,8(sp)
   1e594:	df000204 	addi	fp,sp,8
   1e598:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1e59c:	e13fff17 	ldw	r4,-4(fp)
   1e5a0:	014000b4 	movhi	r5,2
   1e5a4:	294be704 	addi	r5,r5,12188
   1e5a8:	001f5f80 	call	1f5f8 <alt_find_dev>
   1e5ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e5b0:	e0bffe17 	ldw	r2,-8(fp)
}
   1e5b4:	e037883a 	mov	sp,fp
   1e5b8:	dfc00117 	ldw	ra,4(sp)
   1e5bc:	df000017 	ldw	fp,0(sp)
   1e5c0:	dec00204 	addi	sp,sp,8
   1e5c4:	f800283a 	ret

0001e5c8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1e5c8:	defffd04 	addi	sp,sp,-12
   1e5cc:	df000215 	stw	fp,8(sp)
   1e5d0:	df000204 	addi	fp,sp,8
   1e5d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1e5d8:	e0bfff17 	ldw	r2,-4(fp)
   1e5dc:	1080400c 	andi	r2,r2,256
   1e5e0:	1004d23a 	srli	r2,r2,8
   1e5e4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1e5e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e5ec:	e037883a 	mov	sp,fp
   1e5f0:	df000017 	ldw	fp,0(sp)
   1e5f4:	dec00104 	addi	sp,sp,4
   1e5f8:	f800283a 	ret

0001e5fc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1e5fc:	defffd04 	addi	sp,sp,-12
   1e600:	df000215 	stw	fp,8(sp)
   1e604:	df000204 	addi	fp,sp,8
   1e608:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1e60c:	e0bfff17 	ldw	r2,-4(fp)
   1e610:	1080004c 	andi	r2,r2,1
   1e614:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1e618:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e61c:	e037883a 	mov	sp,fp
   1e620:	df000017 	ldw	fp,0(sp)
   1e624:	dec00104 	addi	sp,sp,4
   1e628:	f800283a 	ret

0001e62c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1e62c:	defffd04 	addi	sp,sp,-12
   1e630:	df000215 	stw	fp,8(sp)
   1e634:	df000204 	addi	fp,sp,8
   1e638:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1e63c:	e0bfff17 	ldw	r2,-4(fp)
   1e640:	1081000c 	andi	r2,r2,1024
   1e644:	1004d2ba 	srli	r2,r2,10
   1e648:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1e64c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e650:	e037883a 	mov	sp,fp
   1e654:	df000017 	ldw	fp,0(sp)
   1e658:	dec00104 	addi	sp,sp,4
   1e65c:	f800283a 	ret

0001e660 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1e660:	defffd04 	addi	sp,sp,-12
   1e664:	df000215 	stw	fp,8(sp)
   1e668:	df000204 	addi	fp,sp,8
   1e66c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1e670:	e0bfff17 	ldw	r2,-4(fp)
   1e674:	1004d43a 	srli	r2,r2,16
   1e678:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1e67c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e680:	e037883a 	mov	sp,fp
   1e684:	df000017 	ldw	fp,0(sp)
   1e688:	dec00104 	addi	sp,sp,4
   1e68c:	f800283a 	ret

0001e690 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1e690:	defffd04 	addi	sp,sp,-12
   1e694:	df000215 	stw	fp,8(sp)
   1e698:	df000204 	addi	fp,sp,8
   1e69c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1e6a0:	e0bfff17 	ldw	r2,-4(fp)
   1e6a4:	10a0000c 	andi	r2,r2,32768
   1e6a8:	1004d3fa 	srli	r2,r2,15
   1e6ac:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1e6b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e6b4:	e037883a 	mov	sp,fp
   1e6b8:	df000017 	ldw	fp,0(sp)
   1e6bc:	dec00104 	addi	sp,sp,4
   1e6c0:	f800283a 	ret

0001e6c4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1e6c4:	defffd04 	addi	sp,sp,-12
   1e6c8:	df000215 	stw	fp,8(sp)
   1e6cc:	df000204 	addi	fp,sp,8
   1e6d0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1e6d4:	e0bfff17 	ldw	r2,-4(fp)
   1e6d8:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1e6dc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e6e0:	e037883a 	mov	sp,fp
   1e6e4:	df000017 	ldw	fp,0(sp)
   1e6e8:	dec00104 	addi	sp,sp,4
   1e6ec:	f800283a 	ret

0001e6f0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1e6f0:	defffb04 	addi	sp,sp,-20
   1e6f4:	dfc00415 	stw	ra,16(sp)
   1e6f8:	df000315 	stw	fp,12(sp)
   1e6fc:	df000304 	addi	fp,sp,12
   1e700:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1e704:	e13fff17 	ldw	r4,-4(fp)
   1e708:	01403fc4 	movi	r5,255
   1e70c:	001e94c0 	call	1e94c <alt_up_ps2_write_data_byte_with_ack>
   1e710:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1e714:	e0bffd17 	ldw	r2,-12(fp)
   1e718:	1000211e 	bne	r2,zero,1e7a0 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e71c:	e0bffe04 	addi	r2,fp,-8
   1e720:	e13fff17 	ldw	r4,-4(fp)
   1e724:	100b883a 	mov	r5,r2
   1e728:	001e9b00 	call	1e9b0 <alt_up_ps2_read_data_byte_timeout>
   1e72c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1e730:	e0bffd17 	ldw	r2,-12(fp)
   1e734:	10001a1e 	bne	r2,zero,1e7a0 <alt_up_ps2_init+0xb0>
   1e738:	e0bffe03 	ldbu	r2,-8(fp)
   1e73c:	10803fcc 	andi	r2,r2,255
   1e740:	10802a98 	cmpnei	r2,r2,170
   1e744:	1000161e 	bne	r2,zero,1e7a0 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e748:	e0bffe04 	addi	r2,fp,-8
   1e74c:	e13fff17 	ldw	r4,-4(fp)
   1e750:	100b883a 	mov	r5,r2
   1e754:	001e9b00 	call	1e9b0 <alt_up_ps2_read_data_byte_timeout>
   1e758:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1e75c:	e0bffd17 	ldw	r2,-12(fp)
   1e760:	10bfe318 	cmpnei	r2,r2,-116
   1e764:	1000041e 	bne	r2,zero,1e778 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1e768:	e0bfff17 	ldw	r2,-4(fp)
   1e76c:	00c00044 	movi	r3,1
   1e770:	10c00d15 	stw	r3,52(r2)
   1e774:	00000a06 	br	1e7a0 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1e778:	e0bffd17 	ldw	r2,-12(fp)
   1e77c:	1000081e 	bne	r2,zero,1e7a0 <alt_up_ps2_init+0xb0>
   1e780:	e0bffe03 	ldbu	r2,-8(fp)
   1e784:	10803fcc 	andi	r2,r2,255
   1e788:	1000051e 	bne	r2,zero,1e7a0 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1e78c:	e0bfff17 	ldw	r2,-4(fp)
   1e790:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1e794:	e13fff17 	ldw	r4,-4(fp)
   1e798:	01403d04 	movi	r5,244
   1e79c:	001e8680 	call	1e868 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1e7a0:	e037883a 	mov	sp,fp
   1e7a4:	dfc00117 	ldw	ra,4(sp)
   1e7a8:	df000017 	ldw	fp,0(sp)
   1e7ac:	dec00204 	addi	sp,sp,8
   1e7b0:	f800283a 	ret

0001e7b4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e7b4:	defffd04 	addi	sp,sp,-12
   1e7b8:	df000215 	stw	fp,8(sp)
   1e7bc:	df000204 	addi	fp,sp,8
   1e7c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e7c4:	e0bfff17 	ldw	r2,-4(fp)
   1e7c8:	10800a17 	ldw	r2,40(r2)
   1e7cc:	10800104 	addi	r2,r2,4
   1e7d0:	10800037 	ldwio	r2,0(r2)
   1e7d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e7d8:	e0bffe17 	ldw	r2,-8(fp)
   1e7dc:	10800054 	ori	r2,r2,1
   1e7e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e7e4:	e0bfff17 	ldw	r2,-4(fp)
   1e7e8:	10800a17 	ldw	r2,40(r2)
   1e7ec:	10800104 	addi	r2,r2,4
   1e7f0:	1007883a 	mov	r3,r2
   1e7f4:	e0bffe17 	ldw	r2,-8(fp)
   1e7f8:	18800035 	stwio	r2,0(r3)
}
   1e7fc:	e037883a 	mov	sp,fp
   1e800:	df000017 	ldw	fp,0(sp)
   1e804:	dec00104 	addi	sp,sp,4
   1e808:	f800283a 	ret

0001e80c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e80c:	defffd04 	addi	sp,sp,-12
   1e810:	df000215 	stw	fp,8(sp)
   1e814:	df000204 	addi	fp,sp,8
   1e818:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e81c:	e0bfff17 	ldw	r2,-4(fp)
   1e820:	10800a17 	ldw	r2,40(r2)
   1e824:	10800104 	addi	r2,r2,4
   1e828:	10800037 	ldwio	r2,0(r2)
   1e82c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e830:	e0fffe17 	ldw	r3,-8(fp)
   1e834:	00bfff84 	movi	r2,-2
   1e838:	1884703a 	and	r2,r3,r2
   1e83c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e840:	e0bfff17 	ldw	r2,-4(fp)
   1e844:	10800a17 	ldw	r2,40(r2)
   1e848:	10800104 	addi	r2,r2,4
   1e84c:	1007883a 	mov	r3,r2
   1e850:	e0bffe17 	ldw	r2,-8(fp)
   1e854:	18800035 	stwio	r2,0(r3)
}
   1e858:	e037883a 	mov	sp,fp
   1e85c:	df000017 	ldw	fp,0(sp)
   1e860:	dec00104 	addi	sp,sp,4
   1e864:	f800283a 	ret

0001e868 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e868:	defffb04 	addi	sp,sp,-20
   1e86c:	dfc00415 	stw	ra,16(sp)
   1e870:	df000315 	stw	fp,12(sp)
   1e874:	df000304 	addi	fp,sp,12
   1e878:	e13ffe15 	stw	r4,-8(fp)
   1e87c:	2805883a 	mov	r2,r5
   1e880:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1e884:	e0bffe17 	ldw	r2,-8(fp)
   1e888:	10800a17 	ldw	r2,40(r2)
   1e88c:	1007883a 	mov	r3,r2
   1e890:	e0bfff03 	ldbu	r2,-4(fp)
   1e894:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1e898:	e0bffe17 	ldw	r2,-8(fp)
   1e89c:	10800a17 	ldw	r2,40(r2)
   1e8a0:	10800104 	addi	r2,r2,4
   1e8a4:	10800037 	ldwio	r2,0(r2)
   1e8a8:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1e8ac:	e13ffd17 	ldw	r4,-12(fp)
   1e8b0:	001e62c0 	call	1e62c <read_CE_bit>
   1e8b4:	10803fcc 	andi	r2,r2,255
   1e8b8:	10000226 	beq	r2,zero,1e8c4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1e8bc:	00bffec4 	movi	r2,-5
   1e8c0:	00000106 	br	1e8c8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1e8c4:	0005883a 	mov	r2,zero
}
   1e8c8:	e037883a 	mov	sp,fp
   1e8cc:	dfc00117 	ldw	ra,4(sp)
   1e8d0:	df000017 	ldw	fp,0(sp)
   1e8d4:	dec00204 	addi	sp,sp,8
   1e8d8:	f800283a 	ret

0001e8dc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1e8dc:	defffc04 	addi	sp,sp,-16
   1e8e0:	dfc00315 	stw	ra,12(sp)
   1e8e4:	df000215 	stw	fp,8(sp)
   1e8e8:	df000204 	addi	fp,sp,8
   1e8ec:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1e8f0:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1e8f4:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1e8f8:	e0bffe44 	addi	r2,fp,-7
   1e8fc:	e13fff17 	ldw	r4,-4(fp)
   1e900:	100b883a 	mov	r5,r2
   1e904:	001e9b00 	call	1e9b0 <alt_up_ps2_read_data_byte_timeout>
   1e908:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1e90c:	e0bffe03 	ldbu	r2,-8(fp)
   1e910:	1000061e 	bne	r2,zero,1e92c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1e914:	e0bffe43 	ldbu	r2,-7(fp)
   1e918:	10803fcc 	andi	r2,r2,255
   1e91c:	10803e98 	cmpnei	r2,r2,250
   1e920:	1000041e 	bne	r2,zero,1e934 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1e924:	0005883a 	mov	r2,zero
   1e928:	00000306 	br	1e938 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1e92c:	e0bffe03 	ldbu	r2,-8(fp)
   1e930:	00000106 	br	1e938 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1e934:	003ff006 	br	1e8f8 <__alt_mem_Flash_flash_data+0xf401e8f8>
	return -ETIMEDOUT;
}
   1e938:	e037883a 	mov	sp,fp
   1e93c:	dfc00117 	ldw	ra,4(sp)
   1e940:	df000017 	ldw	fp,0(sp)
   1e944:	dec00204 	addi	sp,sp,8
   1e948:	f800283a 	ret

0001e94c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e94c:	defffa04 	addi	sp,sp,-24
   1e950:	dfc00515 	stw	ra,20(sp)
   1e954:	df000415 	stw	fp,16(sp)
   1e958:	df000404 	addi	fp,sp,16
   1e95c:	e13ffe15 	stw	r4,-8(fp)
   1e960:	2805883a 	mov	r2,r5
   1e964:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1e968:	e0bfff03 	ldbu	r2,-4(fp)
   1e96c:	e13ffe17 	ldw	r4,-8(fp)
   1e970:	100b883a 	mov	r5,r2
   1e974:	001e8680 	call	1e868 <alt_up_ps2_write_data_byte>
   1e978:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1e97c:	e0bffc17 	ldw	r2,-16(fp)
   1e980:	10000226 	beq	r2,zero,1e98c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1e984:	e0bffc17 	ldw	r2,-16(fp)
   1e988:	00000406 	br	1e99c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1e98c:	e13ffe17 	ldw	r4,-8(fp)
   1e990:	001e8dc0 	call	1e8dc <alt_up_ps2_wait_for_ack>
   1e994:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1e998:	e0bffd17 	ldw	r2,-12(fp)
}
   1e99c:	e037883a 	mov	sp,fp
   1e9a0:	dfc00117 	ldw	ra,4(sp)
   1e9a4:	df000017 	ldw	fp,0(sp)
   1e9a8:	dec00204 	addi	sp,sp,8
   1e9ac:	f800283a 	ret

0001e9b0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e9b0:	defffa04 	addi	sp,sp,-24
   1e9b4:	dfc00515 	stw	ra,20(sp)
   1e9b8:	df000415 	stw	fp,16(sp)
   1e9bc:	df000404 	addi	fp,sp,16
   1e9c0:	e13ffe15 	stw	r4,-8(fp)
   1e9c4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e9c8:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1e9cc:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1e9d0:	e0bffc17 	ldw	r2,-16(fp)
   1e9d4:	10800044 	addi	r2,r2,1
   1e9d8:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e9dc:	e0bffe17 	ldw	r2,-8(fp)
   1e9e0:	10800a17 	ldw	r2,40(r2)
   1e9e4:	10800037 	ldwio	r2,0(r2)
   1e9e8:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1e9ec:	e13ffd17 	ldw	r4,-12(fp)
   1e9f0:	001e6900 	call	1e690 <read_data_valid>
   1e9f4:	10803fcc 	andi	r2,r2,255
   1e9f8:	10000726 	beq	r2,zero,1ea18 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1e9fc:	e13ffd17 	ldw	r4,-12(fp)
   1ea00:	001e6c40 	call	1e6c4 <read_data_byte>
   1ea04:	1007883a 	mov	r3,r2
   1ea08:	e0bfff17 	ldw	r2,-4(fp)
   1ea0c:	10c00005 	stb	r3,0(r2)
			return 0;
   1ea10:	0005883a 	mov	r2,zero
   1ea14:	00000a06 	br	1ea40 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1ea18:	e0bffe17 	ldw	r2,-8(fp)
   1ea1c:	10800c17 	ldw	r2,48(r2)
   1ea20:	10000626 	beq	r2,zero,1ea3c <alt_up_ps2_read_data_byte_timeout+0x8c>
   1ea24:	e0bffe17 	ldw	r2,-8(fp)
   1ea28:	10c00c17 	ldw	r3,48(r2)
   1ea2c:	e0bffc17 	ldw	r2,-16(fp)
   1ea30:	1880022e 	bgeu	r3,r2,1ea3c <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1ea34:	00bfe304 	movi	r2,-116
   1ea38:	00000106 	br	1ea40 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1ea3c:	003fe406 	br	1e9d0 <__alt_mem_Flash_flash_data+0xf401e9d0>
}
   1ea40:	e037883a 	mov	sp,fp
   1ea44:	dfc00117 	ldw	ra,4(sp)
   1ea48:	df000017 	ldw	fp,0(sp)
   1ea4c:	dec00204 	addi	sp,sp,8
   1ea50:	f800283a 	ret

0001ea54 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ea54:	defffb04 	addi	sp,sp,-20
   1ea58:	dfc00415 	stw	ra,16(sp)
   1ea5c:	df000315 	stw	fp,12(sp)
   1ea60:	df000304 	addi	fp,sp,12
   1ea64:	e13ffe15 	stw	r4,-8(fp)
   1ea68:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ea6c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ea70:	e0bffe17 	ldw	r2,-8(fp)
   1ea74:	10800a17 	ldw	r2,40(r2)
   1ea78:	10800037 	ldwio	r2,0(r2)
   1ea7c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1ea80:	e13ffd17 	ldw	r4,-12(fp)
   1ea84:	001e6900 	call	1e690 <read_data_valid>
   1ea88:	10803fcc 	andi	r2,r2,255
   1ea8c:	10000726 	beq	r2,zero,1eaac <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1ea90:	e13ffd17 	ldw	r4,-12(fp)
   1ea94:	001e6c40 	call	1e6c4 <read_data_byte>
   1ea98:	1007883a 	mov	r3,r2
   1ea9c:	e0bfff17 	ldw	r2,-4(fp)
   1eaa0:	10c00005 	stb	r3,0(r2)
		return 0;
   1eaa4:	0005883a 	mov	r2,zero
   1eaa8:	00000106 	br	1eab0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1eaac:	00bfffc4 	movi	r2,-1
}
   1eab0:	e037883a 	mov	sp,fp
   1eab4:	dfc00117 	ldw	ra,4(sp)
   1eab8:	df000017 	ldw	fp,0(sp)
   1eabc:	dec00204 	addi	sp,sp,8
   1eac0:	f800283a 	ret

0001eac4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1eac4:	defffb04 	addi	sp,sp,-20
   1eac8:	dfc00415 	stw	ra,16(sp)
   1eacc:	df000315 	stw	fp,12(sp)
   1ead0:	df000304 	addi	fp,sp,12
   1ead4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1ead8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1eadc:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1eae0:	e0bfff17 	ldw	r2,-4(fp)
   1eae4:	10800a17 	ldw	r2,40(r2)
   1eae8:	10800037 	ldwio	r2,0(r2)
   1eaec:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1eaf0:	e13ffe17 	ldw	r4,-8(fp)
   1eaf4:	001e6600 	call	1e660 <read_num_bytes_available>
   1eaf8:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1eafc:	e0bffd0b 	ldhu	r2,-12(fp)
   1eb00:	103ff71e 	bne	r2,zero,1eae0 <__alt_mem_Flash_flash_data+0xf401eae0>
}
   1eb04:	e037883a 	mov	sp,fp
   1eb08:	dfc00117 	ldw	ra,4(sp)
   1eb0c:	df000017 	ldw	fp,0(sp)
   1eb10:	dec00204 	addi	sp,sp,8
   1eb14:	f800283a 	ret

0001eb18 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1eb18:	defff804 	addi	sp,sp,-32
   1eb1c:	dfc00715 	stw	ra,28(sp)
   1eb20:	df000615 	stw	fp,24(sp)
   1eb24:	df000604 	addi	fp,sp,24
   1eb28:	e13ffd15 	stw	r4,-12(fp)
   1eb2c:	e17ffe15 	stw	r5,-8(fp)
   1eb30:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1eb34:	e0bffd17 	ldw	r2,-12(fp)
   1eb38:	10800017 	ldw	r2,0(r2)
   1eb3c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1eb40:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1eb44:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1eb48:	e0fffc17 	ldw	r3,-16(fp)
   1eb4c:	e0bfff17 	ldw	r2,-4(fp)
   1eb50:	18bffd16 	blt	r3,r2,1eb48 <__alt_mem_Flash_flash_data+0xf401eb48>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1eb54:	e0bffe17 	ldw	r2,-8(fp)
   1eb58:	10c00044 	addi	r3,r2,1
   1eb5c:	e0fffe15 	stw	r3,-8(fp)
   1eb60:	e13ffa17 	ldw	r4,-24(fp)
   1eb64:	100b883a 	mov	r5,r2
   1eb68:	001e9b00 	call	1e9b0 <alt_up_ps2_read_data_byte_timeout>
   1eb6c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1eb70:	e0bffb17 	ldw	r2,-20(fp)
   1eb74:	10000226 	beq	r2,zero,1eb80 <alt_up_ps2_read_fd+0x68>
			return count;
   1eb78:	e0bffc17 	ldw	r2,-16(fp)
   1eb7c:	00000406 	br	1eb90 <alt_up_ps2_read_fd+0x78>
		count++;
   1eb80:	e0bffc17 	ldw	r2,-16(fp)
   1eb84:	10800044 	addi	r2,r2,1
   1eb88:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1eb8c:	e0bffc17 	ldw	r2,-16(fp)
}
   1eb90:	e037883a 	mov	sp,fp
   1eb94:	dfc00117 	ldw	ra,4(sp)
   1eb98:	df000017 	ldw	fp,0(sp)
   1eb9c:	dec00204 	addi	sp,sp,8
   1eba0:	f800283a 	ret

0001eba4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1eba4:	defff804 	addi	sp,sp,-32
   1eba8:	dfc00715 	stw	ra,28(sp)
   1ebac:	df000615 	stw	fp,24(sp)
   1ebb0:	df000604 	addi	fp,sp,24
   1ebb4:	e13ffd15 	stw	r4,-12(fp)
   1ebb8:	e17ffe15 	stw	r5,-8(fp)
   1ebbc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1ebc0:	e0bffd17 	ldw	r2,-12(fp)
   1ebc4:	10800017 	ldw	r2,0(r2)
   1ebc8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1ebcc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1ebd0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1ebd4:	00001006 	br	1ec18 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1ebd8:	e0bffe17 	ldw	r2,-8(fp)
   1ebdc:	10c00044 	addi	r3,r2,1
   1ebe0:	e0fffe15 	stw	r3,-8(fp)
   1ebe4:	10800003 	ldbu	r2,0(r2)
   1ebe8:	10803fcc 	andi	r2,r2,255
   1ebec:	e13ffb17 	ldw	r4,-20(fp)
   1ebf0:	100b883a 	mov	r5,r2
   1ebf4:	001e8680 	call	1e868 <alt_up_ps2_write_data_byte>
   1ebf8:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1ebfc:	e0bffc17 	ldw	r2,-16(fp)
   1ec00:	10000226 	beq	r2,zero,1ec0c <alt_up_ps2_write_fd+0x68>
			return count;
   1ec04:	e0bffa17 	ldw	r2,-24(fp)
   1ec08:	00000706 	br	1ec28 <alt_up_ps2_write_fd+0x84>
		count++;
   1ec0c:	e0bffa17 	ldw	r2,-24(fp)
   1ec10:	10800044 	addi	r2,r2,1
   1ec14:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1ec18:	e0fffa17 	ldw	r3,-24(fp)
   1ec1c:	e0bfff17 	ldw	r2,-4(fp)
   1ec20:	18bfed16 	blt	r3,r2,1ebd8 <__alt_mem_Flash_flash_data+0xf401ebd8>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1ec24:	e0bffa17 	ldw	r2,-24(fp)
}
   1ec28:	e037883a 	mov	sp,fp
   1ec2c:	dfc00117 	ldw	ra,4(sp)
   1ec30:	df000017 	ldw	fp,0(sp)
   1ec34:	dec00204 	addi	sp,sp,8
   1ec38:	f800283a 	ret

0001ec3c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1ec3c:	defffc04 	addi	sp,sp,-16
   1ec40:	dfc00315 	stw	ra,12(sp)
   1ec44:	df000215 	stw	fp,8(sp)
   1ec48:	df000204 	addi	fp,sp,8
   1ec4c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1ec50:	e13fff17 	ldw	r4,-4(fp)
   1ec54:	014000b4 	movhi	r5,2
   1ec58:	294be704 	addi	r5,r5,12188
   1ec5c:	001f5f80 	call	1f5f8 <alt_find_dev>
   1ec60:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ec64:	e0bffe17 	ldw	r2,-8(fp)
}
   1ec68:	e037883a 	mov	sp,fp
   1ec6c:	dfc00117 	ldw	ra,4(sp)
   1ec70:	df000017 	ldw	fp,0(sp)
   1ec74:	dec00204 	addi	sp,sp,8
   1ec78:	f800283a 	ret

0001ec7c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ec7c:	defffd04 	addi	sp,sp,-12
   1ec80:	df000215 	stw	fp,8(sp)
   1ec84:	df000204 	addi	fp,sp,8
   1ec88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ec8c:	e0bfff17 	ldw	r2,-4(fp)
   1ec90:	10800a17 	ldw	r2,40(r2)
   1ec94:	10800104 	addi	r2,r2,4
   1ec98:	10800037 	ldwio	r2,0(r2)
   1ec9c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1eca0:	e0bffe17 	ldw	r2,-8(fp)
   1eca4:	10800054 	ori	r2,r2,1
   1eca8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1ecac:	e0bfff17 	ldw	r2,-4(fp)
   1ecb0:	10800a17 	ldw	r2,40(r2)
   1ecb4:	10800104 	addi	r2,r2,4
   1ecb8:	1007883a 	mov	r3,r2
   1ecbc:	e0bffe17 	ldw	r2,-8(fp)
   1ecc0:	18800035 	stwio	r2,0(r3)
}
   1ecc4:	e037883a 	mov	sp,fp
   1ecc8:	df000017 	ldw	fp,0(sp)
   1eccc:	dec00104 	addi	sp,sp,4
   1ecd0:	f800283a 	ret

0001ecd4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ecd4:	defffd04 	addi	sp,sp,-12
   1ecd8:	df000215 	stw	fp,8(sp)
   1ecdc:	df000204 	addi	fp,sp,8
   1ece0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ece4:	e0bfff17 	ldw	r2,-4(fp)
   1ece8:	10800a17 	ldw	r2,40(r2)
   1ecec:	10800104 	addi	r2,r2,4
   1ecf0:	10800037 	ldwio	r2,0(r2)
   1ecf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1ecf8:	e0fffe17 	ldw	r3,-8(fp)
   1ecfc:	00bfff84 	movi	r2,-2
   1ed00:	1884703a 	and	r2,r3,r2
   1ed04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1ed08:	e0bfff17 	ldw	r2,-4(fp)
   1ed0c:	10800a17 	ldw	r2,40(r2)
   1ed10:	10800104 	addi	r2,r2,4
   1ed14:	1007883a 	mov	r3,r2
   1ed18:	e0bffe17 	ldw	r2,-8(fp)
   1ed1c:	18800035 	stwio	r2,0(r3)
}
   1ed20:	e037883a 	mov	sp,fp
   1ed24:	df000017 	ldw	fp,0(sp)
   1ed28:	dec00104 	addi	sp,sp,4
   1ed2c:	f800283a 	ret

0001ed30 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1ed30:	defffd04 	addi	sp,sp,-12
   1ed34:	df000215 	stw	fp,8(sp)
   1ed38:	df000204 	addi	fp,sp,8
   1ed3c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1ed40:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1ed44:	e0bfff17 	ldw	r2,-4(fp)
   1ed48:	10800a17 	ldw	r2,40(r2)
   1ed4c:	10800084 	addi	r2,r2,2
   1ed50:	1080002b 	ldhuio	r2,0(r2)
   1ed54:	10bfffcc 	andi	r2,r2,65535
   1ed58:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1ed5c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1ed60:	e037883a 	mov	sp,fp
   1ed64:	df000017 	ldw	fp,0(sp)
   1ed68:	dec00104 	addi	sp,sp,4
   1ed6c:	f800283a 	ret

0001ed70 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1ed70:	defffd04 	addi	sp,sp,-12
   1ed74:	df000215 	stw	fp,8(sp)
   1ed78:	df000204 	addi	fp,sp,8
   1ed7c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ed80:	e0bfff17 	ldw	r2,-4(fp)
   1ed84:	10800a17 	ldw	r2,40(r2)
   1ed88:	10800104 	addi	r2,r2,4
   1ed8c:	10800037 	ldwio	r2,0(r2)
   1ed90:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1ed94:	e0bffe17 	ldw	r2,-8(fp)
   1ed98:	1004d43a 	srli	r2,r2,16
}
   1ed9c:	e037883a 	mov	sp,fp
   1eda0:	df000017 	ldw	fp,0(sp)
   1eda4:	dec00104 	addi	sp,sp,4
   1eda8:	f800283a 	ret

0001edac <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1edac:	defffd04 	addi	sp,sp,-12
   1edb0:	df000215 	stw	fp,8(sp)
   1edb4:	df000204 	addi	fp,sp,8
   1edb8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1edbc:	e0bfff17 	ldw	r2,-4(fp)
   1edc0:	1080800c 	andi	r2,r2,512
   1edc4:	1004d27a 	srli	r2,r2,9
   1edc8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1edcc:	e0bffe17 	ldw	r2,-8(fp)
   1edd0:	10000226 	beq	r2,zero,1eddc <alt_up_rs232_check_parity+0x30>
   1edd4:	00bfffc4 	movi	r2,-1
   1edd8:	00000106 	br	1ede0 <alt_up_rs232_check_parity+0x34>
   1eddc:	0005883a 	mov	r2,zero
}
   1ede0:	e037883a 	mov	sp,fp
   1ede4:	df000017 	ldw	fp,0(sp)
   1ede8:	dec00104 	addi	sp,sp,4
   1edec:	f800283a 	ret

0001edf0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1edf0:	defffd04 	addi	sp,sp,-12
   1edf4:	df000215 	stw	fp,8(sp)
   1edf8:	df000204 	addi	fp,sp,8
   1edfc:	e13ffe15 	stw	r4,-8(fp)
   1ee00:	2805883a 	mov	r2,r5
   1ee04:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1ee08:	e0bffe17 	ldw	r2,-8(fp)
   1ee0c:	10800a17 	ldw	r2,40(r2)
   1ee10:	1007883a 	mov	r3,r2
   1ee14:	e0bfff03 	ldbu	r2,-4(fp)
   1ee18:	18800035 	stwio	r2,0(r3)
	return 0;
   1ee1c:	0005883a 	mov	r2,zero
}
   1ee20:	e037883a 	mov	sp,fp
   1ee24:	df000017 	ldw	fp,0(sp)
   1ee28:	dec00104 	addi	sp,sp,4
   1ee2c:	f800283a 	ret

0001ee30 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ee30:	defffa04 	addi	sp,sp,-24
   1ee34:	dfc00515 	stw	ra,20(sp)
   1ee38:	df000415 	stw	fp,16(sp)
   1ee3c:	df000404 	addi	fp,sp,16
   1ee40:	e13ffd15 	stw	r4,-12(fp)
   1ee44:	e17ffe15 	stw	r5,-8(fp)
   1ee48:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1ee4c:	e0bffd17 	ldw	r2,-12(fp)
   1ee50:	10800a17 	ldw	r2,40(r2)
   1ee54:	10800037 	ldwio	r2,0(r2)
   1ee58:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1ee5c:	e0bffc17 	ldw	r2,-16(fp)
   1ee60:	1007883a 	mov	r3,r2
   1ee64:	e0bffe17 	ldw	r2,-8(fp)
   1ee68:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1ee6c:	e13ffc17 	ldw	r4,-16(fp)
   1ee70:	001edac0 	call	1edac <alt_up_rs232_check_parity>
   1ee74:	1007883a 	mov	r3,r2
   1ee78:	e0bfff17 	ldw	r2,-4(fp)
   1ee7c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1ee80:	e0bffc17 	ldw	r2,-16(fp)
   1ee84:	10a0000c 	andi	r2,r2,32768
   1ee88:	1004d3fa 	srli	r2,r2,15
   1ee8c:	10bfffc4 	addi	r2,r2,-1
}
   1ee90:	e037883a 	mov	sp,fp
   1ee94:	dfc00117 	ldw	ra,4(sp)
   1ee98:	df000017 	ldw	fp,0(sp)
   1ee9c:	dec00204 	addi	sp,sp,8
   1eea0:	f800283a 	ret

0001eea4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1eea4:	defff804 	addi	sp,sp,-32
   1eea8:	dfc00715 	stw	ra,28(sp)
   1eeac:	df000615 	stw	fp,24(sp)
   1eeb0:	df000604 	addi	fp,sp,24
   1eeb4:	e13ffd15 	stw	r4,-12(fp)
   1eeb8:	e17ffe15 	stw	r5,-8(fp)
   1eebc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1eec0:	e0bffd17 	ldw	r2,-12(fp)
   1eec4:	10800017 	ldw	r2,0(r2)
   1eec8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1eecc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1eed0:	00000e06 	br	1ef0c <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1eed4:	e0bffe17 	ldw	r2,-8(fp)
   1eed8:	10c00044 	addi	r3,r2,1
   1eedc:	e0fffe15 	stw	r3,-8(fp)
   1eee0:	e0fffc04 	addi	r3,fp,-16
   1eee4:	e13ffb17 	ldw	r4,-20(fp)
   1eee8:	100b883a 	mov	r5,r2
   1eeec:	180d883a 	mov	r6,r3
   1eef0:	001ee300 	call	1ee30 <alt_up_rs232_read_data>
   1eef4:	1000041e 	bne	r2,zero,1ef08 <alt_up_rs232_read_fd+0x64>
			count++;
   1eef8:	e0bffa17 	ldw	r2,-24(fp)
   1eefc:	10800044 	addi	r2,r2,1
   1ef00:	e0bffa15 	stw	r2,-24(fp)
   1ef04:	00000106 	br	1ef0c <alt_up_rs232_read_fd+0x68>
		else
			break;
   1ef08:	00000406 	br	1ef1c <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ef0c:	e0bfff17 	ldw	r2,-4(fp)
   1ef10:	10ffffc4 	addi	r3,r2,-1
   1ef14:	e0ffff15 	stw	r3,-4(fp)
   1ef18:	103fee1e 	bne	r2,zero,1eed4 <__alt_mem_Flash_flash_data+0xf401eed4>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ef1c:	e0bffa17 	ldw	r2,-24(fp)
}
   1ef20:	e037883a 	mov	sp,fp
   1ef24:	dfc00117 	ldw	ra,4(sp)
   1ef28:	df000017 	ldw	fp,0(sp)
   1ef2c:	dec00204 	addi	sp,sp,8
   1ef30:	f800283a 	ret

0001ef34 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ef34:	defff904 	addi	sp,sp,-28
   1ef38:	dfc00615 	stw	ra,24(sp)
   1ef3c:	df000515 	stw	fp,20(sp)
   1ef40:	df000504 	addi	fp,sp,20
   1ef44:	e13ffd15 	stw	r4,-12(fp)
   1ef48:	e17ffe15 	stw	r5,-8(fp)
   1ef4c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ef50:	e0bffd17 	ldw	r2,-12(fp)
   1ef54:	10800017 	ldw	r2,0(r2)
   1ef58:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1ef5c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1ef60:	00000f06 	br	1efa0 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1ef64:	e0bffe17 	ldw	r2,-8(fp)
   1ef68:	10800003 	ldbu	r2,0(r2)
   1ef6c:	10803fcc 	andi	r2,r2,255
   1ef70:	e13ffc17 	ldw	r4,-16(fp)
   1ef74:	100b883a 	mov	r5,r2
   1ef78:	001edf00 	call	1edf0 <alt_up_rs232_write_data>
   1ef7c:	1000071e 	bne	r2,zero,1ef9c <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1ef80:	e0bffb17 	ldw	r2,-20(fp)
   1ef84:	10800044 	addi	r2,r2,1
   1ef88:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1ef8c:	e0bffe17 	ldw	r2,-8(fp)
   1ef90:	10800044 	addi	r2,r2,1
   1ef94:	e0bffe15 	stw	r2,-8(fp)
   1ef98:	00000106 	br	1efa0 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1ef9c:	00000406 	br	1efb0 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1efa0:	e0bfff17 	ldw	r2,-4(fp)
   1efa4:	10ffffc4 	addi	r3,r2,-1
   1efa8:	e0ffff15 	stw	r3,-4(fp)
   1efac:	103fed1e 	bne	r2,zero,1ef64 <__alt_mem_Flash_flash_data+0xf401ef64>
			ptr++;
		}
		else
			break;
	}
	return count;
   1efb0:	e0bffb17 	ldw	r2,-20(fp)
}
   1efb4:	e037883a 	mov	sp,fp
   1efb8:	dfc00117 	ldw	ra,4(sp)
   1efbc:	df000017 	ldw	fp,0(sp)
   1efc0:	dec00204 	addi	sp,sp,8
   1efc4:	f800283a 	ret

0001efc8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1efc8:	defffc04 	addi	sp,sp,-16
   1efcc:	dfc00315 	stw	ra,12(sp)
   1efd0:	df000215 	stw	fp,8(sp)
   1efd4:	df000204 	addi	fp,sp,8
   1efd8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1efdc:	e13fff17 	ldw	r4,-4(fp)
   1efe0:	014000b4 	movhi	r5,2
   1efe4:	294be704 	addi	r5,r5,12188
   1efe8:	001f5f80 	call	1f5f8 <alt_find_dev>
   1efec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1eff0:	e0bffe17 	ldw	r2,-8(fp)
}
   1eff4:	e037883a 	mov	sp,fp
   1eff8:	dfc00117 	ldw	ra,4(sp)
   1effc:	df000017 	ldw	fp,0(sp)
   1f000:	dec00204 	addi	sp,sp,8
   1f004:	f800283a 	ret

0001f008 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1f008:	defffc04 	addi	sp,sp,-16
   1f00c:	dfc00315 	stw	ra,12(sp)
   1f010:	df000215 	stw	fp,8(sp)
   1f014:	df000204 	addi	fp,sp,8
   1f018:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1f01c:	e0bfff17 	ldw	r2,-4(fp)
   1f020:	10800217 	ldw	r2,8(r2)
   1f024:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1f028:	00000b06 	br	1f058 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1f02c:	e13ffe17 	ldw	r4,-8(fp)
   1f030:	014000b4 	movhi	r5,2
   1f034:	29444804 	addi	r5,r5,4384
   1f038:	000fba80 	call	fba8 <strcmp>
   1f03c:	1000031e 	bne	r2,zero,1f04c <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1f040:	e0bffe17 	ldw	r2,-8(fp)
   1f044:	10000005 	stb	zero,0(r2)
			break;
   1f048:	00000906 	br	1f070 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1f04c:	e0bffe17 	ldw	r2,-8(fp)
   1f050:	10800044 	addi	r2,r2,1
   1f054:	e0bffe15 	stw	r2,-8(fp)
   1f058:	e0bffe17 	ldw	r2,-8(fp)
   1f05c:	10800003 	ldbu	r2,0(r2)
   1f060:	10803fcc 	andi	r2,r2,255
   1f064:	1080201c 	xori	r2,r2,128
   1f068:	10bfe004 	addi	r2,r2,-128
   1f06c:	103fef1e 	bne	r2,zero,1f02c <__alt_mem_Flash_flash_data+0xf401f02c>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1f070:	0001883a 	nop
}
   1f074:	e037883a 	mov	sp,fp
   1f078:	dfc00117 	ldw	ra,4(sp)
   1f07c:	df000017 	ldw	fp,0(sp)
   1f080:	dec00204 	addi	sp,sp,8
   1f084:	f800283a 	ret

0001f088 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1f088:	defffc04 	addi	sp,sp,-16
   1f08c:	dfc00315 	stw	ra,12(sp)
   1f090:	df000215 	stw	fp,8(sp)
   1f094:	df000204 	addi	fp,sp,8
   1f098:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1f09c:	e13fff17 	ldw	r4,-4(fp)
   1f0a0:	014000b4 	movhi	r5,2
   1f0a4:	294be704 	addi	r5,r5,12188
   1f0a8:	001f5f80 	call	1f5f8 <alt_find_dev>
   1f0ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1f0b0:	e0bffe17 	ldw	r2,-8(fp)
}
   1f0b4:	e037883a 	mov	sp,fp
   1f0b8:	dfc00117 	ldw	ra,4(sp)
   1f0bc:	df000017 	ldw	fp,0(sp)
   1f0c0:	dec00204 	addi	sp,sp,8
   1f0c4:	f800283a 	ret

0001f0c8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1f0c8:	defffa04 	addi	sp,sp,-24
   1f0cc:	df000515 	stw	fp,20(sp)
   1f0d0:	df000504 	addi	fp,sp,20
   1f0d4:	e13ffc15 	stw	r4,-16(fp)
   1f0d8:	2805883a 	mov	r2,r5
   1f0dc:	e1bffe15 	stw	r6,-8(fp)
   1f0e0:	e1ffff15 	stw	r7,-4(fp)
   1f0e4:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f0e8:	e0bffc17 	ldw	r2,-16(fp)
   1f0ec:	10800c17 	ldw	r2,48(r2)
   1f0f0:	e0fffe17 	ldw	r3,-8(fp)
   1f0f4:	1880042e 	bgeu	r3,r2,1f108 <alt_up_char_buffer_draw+0x40>
   1f0f8:	e0bffc17 	ldw	r2,-16(fp)
   1f0fc:	10800d17 	ldw	r2,52(r2)
   1f100:	e0ffff17 	ldw	r3,-4(fp)
   1f104:	18800236 	bltu	r3,r2,1f110 <alt_up_char_buffer_draw+0x48>
		return -1;
   1f108:	00bfffc4 	movi	r2,-1
   1f10c:	00001d06 	br	1f184 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1f110:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1f114:	e0bffc17 	ldw	r2,-16(fp)
   1f118:	10c00f17 	ldw	r3,60(r2)
   1f11c:	e0bffe17 	ldw	r2,-8(fp)
   1f120:	1884703a 	and	r2,r3,r2
   1f124:	e0fffc17 	ldw	r3,-16(fp)
   1f128:	18c00e17 	ldw	r3,56(r3)
   1f12c:	10c4983a 	sll	r2,r2,r3
   1f130:	e0fffb17 	ldw	r3,-20(fp)
   1f134:	1884b03a 	or	r2,r3,r2
   1f138:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1f13c:	e0bffc17 	ldw	r2,-16(fp)
   1f140:	10c01117 	ldw	r3,68(r2)
   1f144:	e0bfff17 	ldw	r2,-4(fp)
   1f148:	1884703a 	and	r2,r3,r2
   1f14c:	e0fffc17 	ldw	r3,-16(fp)
   1f150:	18c01017 	ldw	r3,64(r3)
   1f154:	10c4983a 	sll	r2,r2,r3
   1f158:	e0fffb17 	ldw	r3,-20(fp)
   1f15c:	1884b03a 	or	r2,r3,r2
   1f160:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1f164:	e0bffc17 	ldw	r2,-16(fp)
   1f168:	10c00b17 	ldw	r3,44(r2)
   1f16c:	e0bffb17 	ldw	r2,-20(fp)
   1f170:	1885883a 	add	r2,r3,r2
   1f174:	1007883a 	mov	r3,r2
   1f178:	e0bffd03 	ldbu	r2,-12(fp)
   1f17c:	18800025 	stbio	r2,0(r3)

	return 0;
   1f180:	0005883a 	mov	r2,zero
}
   1f184:	e037883a 	mov	sp,fp
   1f188:	df000017 	ldw	fp,0(sp)
   1f18c:	dec00104 	addi	sp,sp,4
   1f190:	f800283a 	ret

0001f194 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1f194:	defffa04 	addi	sp,sp,-24
   1f198:	df000515 	stw	fp,20(sp)
   1f19c:	df000504 	addi	fp,sp,20
   1f1a0:	e13ffc15 	stw	r4,-16(fp)
   1f1a4:	e17ffd15 	stw	r5,-12(fp)
   1f1a8:	e1bffe15 	stw	r6,-8(fp)
   1f1ac:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f1b0:	e0bffc17 	ldw	r2,-16(fp)
   1f1b4:	10800c17 	ldw	r2,48(r2)
   1f1b8:	e0fffe17 	ldw	r3,-8(fp)
   1f1bc:	1880042e 	bgeu	r3,r2,1f1d0 <alt_up_char_buffer_string+0x3c>
   1f1c0:	e0bffc17 	ldw	r2,-16(fp)
   1f1c4:	10800d17 	ldw	r2,52(r2)
   1f1c8:	e0ffff17 	ldw	r3,-4(fp)
   1f1cc:	18800236 	bltu	r3,r2,1f1d8 <alt_up_char_buffer_string+0x44>
		return -1;
   1f1d0:	00bfffc4 	movi	r2,-1
   1f1d4:	00002b06 	br	1f284 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1f1d8:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1f1dc:	e0bffc17 	ldw	r2,-16(fp)
   1f1e0:	10801017 	ldw	r2,64(r2)
   1f1e4:	1007883a 	mov	r3,r2
   1f1e8:	e0bfff17 	ldw	r2,-4(fp)
   1f1ec:	10c6983a 	sll	r3,r2,r3
   1f1f0:	e0bffe17 	ldw	r2,-8(fp)
   1f1f4:	1885883a 	add	r2,r3,r2
   1f1f8:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1f1fc:	00001a06 	br	1f268 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1f200:	e0bffc17 	ldw	r2,-16(fp)
   1f204:	10c00b17 	ldw	r3,44(r2)
   1f208:	e0bffb17 	ldw	r2,-20(fp)
   1f20c:	1885883a 	add	r2,r3,r2
   1f210:	1007883a 	mov	r3,r2
   1f214:	e0bffd17 	ldw	r2,-12(fp)
   1f218:	10800003 	ldbu	r2,0(r2)
   1f21c:	10803fcc 	andi	r2,r2,255
   1f220:	1080201c 	xori	r2,r2,128
   1f224:	10bfe004 	addi	r2,r2,-128
   1f228:	18800025 	stbio	r2,0(r3)
		++ptr;
   1f22c:	e0bffd17 	ldw	r2,-12(fp)
   1f230:	10800044 	addi	r2,r2,1
   1f234:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1f238:	e0bffe17 	ldw	r2,-8(fp)
   1f23c:	10800044 	addi	r2,r2,1
   1f240:	e0bffe15 	stw	r2,-8(fp)
   1f244:	e0bffc17 	ldw	r2,-16(fp)
   1f248:	10800c17 	ldw	r2,48(r2)
   1f24c:	e0fffe17 	ldw	r3,-8(fp)
   1f250:	18800236 	bltu	r3,r2,1f25c <alt_up_char_buffer_string+0xc8>
			return -1;
   1f254:	00bfffc4 	movi	r2,-1
   1f258:	00000a06 	br	1f284 <alt_up_char_buffer_string+0xf0>
		++offset;
   1f25c:	e0bffb17 	ldw	r2,-20(fp)
   1f260:	10800044 	addi	r2,r2,1
   1f264:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1f268:	e0bffd17 	ldw	r2,-12(fp)
   1f26c:	10800003 	ldbu	r2,0(r2)
   1f270:	10803fcc 	andi	r2,r2,255
   1f274:	1080201c 	xori	r2,r2,128
   1f278:	10bfe004 	addi	r2,r2,-128
   1f27c:	103fe01e 	bne	r2,zero,1f200 <__alt_mem_Flash_flash_data+0xf401f200>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1f280:	0005883a 	mov	r2,zero
}
   1f284:	e037883a 	mov	sp,fp
   1f288:	df000017 	ldw	fp,0(sp)
   1f28c:	dec00104 	addi	sp,sp,4
   1f290:	f800283a 	ret

0001f294 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1f294:	defffe04 	addi	sp,sp,-8
   1f298:	df000115 	stw	fp,4(sp)
   1f29c:	df000104 	addi	fp,sp,4
   1f2a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1f2a4:	e0bfff17 	ldw	r2,-4(fp)
   1f2a8:	10800a17 	ldw	r2,40(r2)
   1f2ac:	10800084 	addi	r2,r2,2
   1f2b0:	1007883a 	mov	r3,r2
   1f2b4:	00800044 	movi	r2,1
   1f2b8:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1f2bc:	0001883a 	nop
   1f2c0:	e0bfff17 	ldw	r2,-4(fp)
   1f2c4:	10800a17 	ldw	r2,40(r2)
   1f2c8:	10800084 	addi	r2,r2,2
   1f2cc:	10800023 	ldbuio	r2,0(r2)
   1f2d0:	10803fcc 	andi	r2,r2,255
   1f2d4:	1080004c 	andi	r2,r2,1
   1f2d8:	103ff91e 	bne	r2,zero,1f2c0 <__alt_mem_Flash_flash_data+0xf401f2c0>
	return 0;
   1f2dc:	0005883a 	mov	r2,zero
}
   1f2e0:	e037883a 	mov	sp,fp
   1f2e4:	df000017 	ldw	fp,0(sp)
   1f2e8:	dec00104 	addi	sp,sp,4
   1f2ec:	f800283a 	ret

0001f2f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1f2f0:	defff504 	addi	sp,sp,-44
   1f2f4:	df000a15 	stw	fp,40(sp)
   1f2f8:	df000a04 	addi	fp,sp,40
   1f2fc:	e13ffc15 	stw	r4,-16(fp)
   1f300:	e17ffd15 	stw	r5,-12(fp)
   1f304:	e1bffe15 	stw	r6,-8(fp)
   1f308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1f30c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f310:	008000b4 	movhi	r2,2
   1f314:	1093f404 	addi	r2,r2,20432
   1f318:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1f31c:	10003f26 	beq	r2,zero,1f41c <alt_alarm_start+0x12c>
  {
    if (alarm)
   1f320:	e0bffc17 	ldw	r2,-16(fp)
   1f324:	10003b26 	beq	r2,zero,1f414 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1f328:	e0bffc17 	ldw	r2,-16(fp)
   1f32c:	e0fffe17 	ldw	r3,-8(fp)
   1f330:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1f334:	e0bffc17 	ldw	r2,-16(fp)
   1f338:	e0ffff17 	ldw	r3,-4(fp)
   1f33c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f340:	0005303a 	rdctl	r2,status
   1f344:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f348:	e0fff817 	ldw	r3,-32(fp)
   1f34c:	00bfff84 	movi	r2,-2
   1f350:	1884703a 	and	r2,r3,r2
   1f354:	1001703a 	wrctl	status,r2
  
  return context;
   1f358:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1f35c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f360:	008000b4 	movhi	r2,2
   1f364:	1093f504 	addi	r2,r2,20436
   1f368:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1f36c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1f370:	e0fffd17 	ldw	r3,-12(fp)
   1f374:	e0bff617 	ldw	r2,-40(fp)
   1f378:	1885883a 	add	r2,r3,r2
   1f37c:	10c00044 	addi	r3,r2,1
   1f380:	e0bffc17 	ldw	r2,-16(fp)
   1f384:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1f388:	e0bffc17 	ldw	r2,-16(fp)
   1f38c:	10c00217 	ldw	r3,8(r2)
   1f390:	e0bff617 	ldw	r2,-40(fp)
   1f394:	1880042e 	bgeu	r3,r2,1f3a8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1f398:	e0bffc17 	ldw	r2,-16(fp)
   1f39c:	00c00044 	movi	r3,1
   1f3a0:	10c00405 	stb	r3,16(r2)
   1f3a4:	00000206 	br	1f3b0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1f3a8:	e0bffc17 	ldw	r2,-16(fp)
   1f3ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1f3b0:	e0fffc17 	ldw	r3,-16(fp)
   1f3b4:	008000b4 	movhi	r2,2
   1f3b8:	108c0c04 	addi	r2,r2,12336
   1f3bc:	e0bff915 	stw	r2,-28(fp)
   1f3c0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f3c4:	e0bffa17 	ldw	r2,-24(fp)
   1f3c8:	e0fff917 	ldw	r3,-28(fp)
   1f3cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f3d0:	e0bff917 	ldw	r2,-28(fp)
   1f3d4:	10c00017 	ldw	r3,0(r2)
   1f3d8:	e0bffa17 	ldw	r2,-24(fp)
   1f3dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f3e0:	e0bff917 	ldw	r2,-28(fp)
   1f3e4:	10800017 	ldw	r2,0(r2)
   1f3e8:	e0fffa17 	ldw	r3,-24(fp)
   1f3ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f3f0:	e0bff917 	ldw	r2,-28(fp)
   1f3f4:	e0fffa17 	ldw	r3,-24(fp)
   1f3f8:	10c00015 	stw	r3,0(r2)
   1f3fc:	e0bff717 	ldw	r2,-36(fp)
   1f400:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f404:	e0bffb17 	ldw	r2,-20(fp)
   1f408:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1f40c:	0005883a 	mov	r2,zero
   1f410:	00000306 	br	1f420 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1f414:	00bffa84 	movi	r2,-22
   1f418:	00000106 	br	1f420 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1f41c:	00bfde84 	movi	r2,-134
  }
}
   1f420:	e037883a 	mov	sp,fp
   1f424:	df000017 	ldw	fp,0(sp)
   1f428:	dec00104 	addi	sp,sp,4
   1f42c:	f800283a 	ret

0001f430 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1f430:	deffff04 	addi	sp,sp,-4
   1f434:	df000015 	stw	fp,0(sp)
   1f438:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1f43c:	e037883a 	mov	sp,fp
   1f440:	df000017 	ldw	fp,0(sp)
   1f444:	dec00104 	addi	sp,sp,4
   1f448:	f800283a 	ret

0001f44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f44c:	defffe04 	addi	sp,sp,-8
   1f450:	dfc00115 	stw	ra,4(sp)
   1f454:	df000015 	stw	fp,0(sp)
   1f458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f45c:	008000b4 	movhi	r2,2
   1f460:	108bea04 	addi	r2,r2,12200
   1f464:	10800017 	ldw	r2,0(r2)
   1f468:	10000526 	beq	r2,zero,1f480 <alt_get_errno+0x34>
   1f46c:	008000b4 	movhi	r2,2
   1f470:	108bea04 	addi	r2,r2,12200
   1f474:	10800017 	ldw	r2,0(r2)
   1f478:	103ee83a 	callr	r2
   1f47c:	00000206 	br	1f488 <alt_get_errno+0x3c>
   1f480:	008000b4 	movhi	r2,2
   1f484:	1093d304 	addi	r2,r2,20300
}
   1f488:	e037883a 	mov	sp,fp
   1f48c:	dfc00117 	ldw	ra,4(sp)
   1f490:	df000017 	ldw	fp,0(sp)
   1f494:	dec00204 	addi	sp,sp,8
   1f498:	f800283a 	ret

0001f49c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1f49c:	defffa04 	addi	sp,sp,-24
   1f4a0:	dfc00515 	stw	ra,20(sp)
   1f4a4:	df000415 	stw	fp,16(sp)
   1f4a8:	df000404 	addi	fp,sp,16
   1f4ac:	e13ffe15 	stw	r4,-8(fp)
   1f4b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1f4b4:	e0bffe17 	ldw	r2,-8(fp)
   1f4b8:	10000326 	beq	r2,zero,1f4c8 <alt_dev_llist_insert+0x2c>
   1f4bc:	e0bffe17 	ldw	r2,-8(fp)
   1f4c0:	10800217 	ldw	r2,8(r2)
   1f4c4:	1000061e 	bne	r2,zero,1f4e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1f4c8:	001f44c0 	call	1f44c <alt_get_errno>
   1f4cc:	1007883a 	mov	r3,r2
   1f4d0:	00800584 	movi	r2,22
   1f4d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1f4d8:	00bffa84 	movi	r2,-22
   1f4dc:	00001306 	br	1f52c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1f4e0:	e0bffe17 	ldw	r2,-8(fp)
   1f4e4:	e0ffff17 	ldw	r3,-4(fp)
   1f4e8:	e0fffc15 	stw	r3,-16(fp)
   1f4ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f4f0:	e0bffd17 	ldw	r2,-12(fp)
   1f4f4:	e0fffc17 	ldw	r3,-16(fp)
   1f4f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f4fc:	e0bffc17 	ldw	r2,-16(fp)
   1f500:	10c00017 	ldw	r3,0(r2)
   1f504:	e0bffd17 	ldw	r2,-12(fp)
   1f508:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f50c:	e0bffc17 	ldw	r2,-16(fp)
   1f510:	10800017 	ldw	r2,0(r2)
   1f514:	e0fffd17 	ldw	r3,-12(fp)
   1f518:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f51c:	e0bffc17 	ldw	r2,-16(fp)
   1f520:	e0fffd17 	ldw	r3,-12(fp)
   1f524:	10c00015 	stw	r3,0(r2)

  return 0;  
   1f528:	0005883a 	mov	r2,zero
}
   1f52c:	e037883a 	mov	sp,fp
   1f530:	dfc00117 	ldw	ra,4(sp)
   1f534:	df000017 	ldw	fp,0(sp)
   1f538:	dec00204 	addi	sp,sp,8
   1f53c:	f800283a 	ret

0001f540 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1f540:	defffd04 	addi	sp,sp,-12
   1f544:	dfc00215 	stw	ra,8(sp)
   1f548:	df000115 	stw	fp,4(sp)
   1f54c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1f550:	008000b4 	movhi	r2,2
   1f554:	1081f904 	addi	r2,r2,2020
   1f558:	e0bfff15 	stw	r2,-4(fp)
   1f55c:	00000606 	br	1f578 <_do_ctors+0x38>
        (*ctor) (); 
   1f560:	e0bfff17 	ldw	r2,-4(fp)
   1f564:	10800017 	ldw	r2,0(r2)
   1f568:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1f56c:	e0bfff17 	ldw	r2,-4(fp)
   1f570:	10bfff04 	addi	r2,r2,-4
   1f574:	e0bfff15 	stw	r2,-4(fp)
   1f578:	e0ffff17 	ldw	r3,-4(fp)
   1f57c:	008000b4 	movhi	r2,2
   1f580:	1081fa04 	addi	r2,r2,2024
   1f584:	18bff62e 	bgeu	r3,r2,1f560 <__alt_mem_Flash_flash_data+0xf401f560>
        (*ctor) (); 
}
   1f588:	e037883a 	mov	sp,fp
   1f58c:	dfc00117 	ldw	ra,4(sp)
   1f590:	df000017 	ldw	fp,0(sp)
   1f594:	dec00204 	addi	sp,sp,8
   1f598:	f800283a 	ret

0001f59c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1f59c:	defffd04 	addi	sp,sp,-12
   1f5a0:	dfc00215 	stw	ra,8(sp)
   1f5a4:	df000115 	stw	fp,4(sp)
   1f5a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1f5ac:	008000b4 	movhi	r2,2
   1f5b0:	1081f904 	addi	r2,r2,2020
   1f5b4:	e0bfff15 	stw	r2,-4(fp)
   1f5b8:	00000606 	br	1f5d4 <_do_dtors+0x38>
        (*dtor) (); 
   1f5bc:	e0bfff17 	ldw	r2,-4(fp)
   1f5c0:	10800017 	ldw	r2,0(r2)
   1f5c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1f5c8:	e0bfff17 	ldw	r2,-4(fp)
   1f5cc:	10bfff04 	addi	r2,r2,-4
   1f5d0:	e0bfff15 	stw	r2,-4(fp)
   1f5d4:	e0ffff17 	ldw	r3,-4(fp)
   1f5d8:	008000b4 	movhi	r2,2
   1f5dc:	1081fa04 	addi	r2,r2,2024
   1f5e0:	18bff62e 	bgeu	r3,r2,1f5bc <__alt_mem_Flash_flash_data+0xf401f5bc>
        (*dtor) (); 
}
   1f5e4:	e037883a 	mov	sp,fp
   1f5e8:	dfc00117 	ldw	ra,4(sp)
   1f5ec:	df000017 	ldw	fp,0(sp)
   1f5f0:	dec00204 	addi	sp,sp,8
   1f5f4:	f800283a 	ret

0001f5f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1f5f8:	defffa04 	addi	sp,sp,-24
   1f5fc:	dfc00515 	stw	ra,20(sp)
   1f600:	df000415 	stw	fp,16(sp)
   1f604:	df000404 	addi	fp,sp,16
   1f608:	e13ffe15 	stw	r4,-8(fp)
   1f60c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1f610:	e0bfff17 	ldw	r2,-4(fp)
   1f614:	10800017 	ldw	r2,0(r2)
   1f618:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1f61c:	e13ffe17 	ldw	r4,-8(fp)
   1f620:	000738c0 	call	738c <strlen>
   1f624:	10800044 	addi	r2,r2,1
   1f628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1f62c:	00000d06 	br	1f664 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1f630:	e0bffc17 	ldw	r2,-16(fp)
   1f634:	10c00217 	ldw	r3,8(r2)
   1f638:	e0bffd17 	ldw	r2,-12(fp)
   1f63c:	1809883a 	mov	r4,r3
   1f640:	e17ffe17 	ldw	r5,-8(fp)
   1f644:	100d883a 	mov	r6,r2
   1f648:	00204880 	call	20488 <memcmp>
   1f64c:	1000021e 	bne	r2,zero,1f658 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1f650:	e0bffc17 	ldw	r2,-16(fp)
   1f654:	00000706 	br	1f674 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1f658:	e0bffc17 	ldw	r2,-16(fp)
   1f65c:	10800017 	ldw	r2,0(r2)
   1f660:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1f664:	e0fffc17 	ldw	r3,-16(fp)
   1f668:	e0bfff17 	ldw	r2,-4(fp)
   1f66c:	18bff01e 	bne	r3,r2,1f630 <__alt_mem_Flash_flash_data+0xf401f630>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1f670:	0005883a 	mov	r2,zero
}
   1f674:	e037883a 	mov	sp,fp
   1f678:	dfc00117 	ldw	ra,4(sp)
   1f67c:	df000017 	ldw	fp,0(sp)
   1f680:	dec00204 	addi	sp,sp,8
   1f684:	f800283a 	ret

0001f688 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1f688:	defffe04 	addi	sp,sp,-8
   1f68c:	dfc00115 	stw	ra,4(sp)
   1f690:	df000015 	stw	fp,0(sp)
   1f694:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1f698:	0009883a 	mov	r4,zero
   1f69c:	01440004 	movi	r5,4096
   1f6a0:	00203140 	call	20314 <alt_icache_flush>
#endif
}
   1f6a4:	e037883a 	mov	sp,fp
   1f6a8:	dfc00117 	ldw	ra,4(sp)
   1f6ac:	df000017 	ldw	fp,0(sp)
   1f6b0:	dec00204 	addi	sp,sp,8
   1f6b4:	f800283a 	ret

0001f6b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1f6b8:	defff904 	addi	sp,sp,-28
   1f6bc:	dfc00615 	stw	ra,24(sp)
   1f6c0:	df000515 	stw	fp,20(sp)
   1f6c4:	df000504 	addi	fp,sp,20
   1f6c8:	e13ffc15 	stw	r4,-16(fp)
   1f6cc:	e17ffd15 	stw	r5,-12(fp)
   1f6d0:	e1bffe15 	stw	r6,-8(fp)
   1f6d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1f6d8:	e13ffd17 	ldw	r4,-12(fp)
   1f6dc:	e17ffe17 	ldw	r5,-8(fp)
   1f6e0:	e1bfff17 	ldw	r6,-4(fp)
   1f6e4:	001fabc0 	call	1fabc <open>
   1f6e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1f6ec:	e0bffb17 	ldw	r2,-20(fp)
   1f6f0:	10001c16 	blt	r2,zero,1f764 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1f6f4:	008000b4 	movhi	r2,2
   1f6f8:	10868304 	addi	r2,r2,6668
   1f6fc:	e0fffb17 	ldw	r3,-20(fp)
   1f700:	18c00324 	muli	r3,r3,12
   1f704:	10c5883a 	add	r2,r2,r3
   1f708:	10c00017 	ldw	r3,0(r2)
   1f70c:	e0bffc17 	ldw	r2,-16(fp)
   1f710:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1f714:	008000b4 	movhi	r2,2
   1f718:	10868304 	addi	r2,r2,6668
   1f71c:	e0fffb17 	ldw	r3,-20(fp)
   1f720:	18c00324 	muli	r3,r3,12
   1f724:	18c00104 	addi	r3,r3,4
   1f728:	10c5883a 	add	r2,r2,r3
   1f72c:	10c00017 	ldw	r3,0(r2)
   1f730:	e0bffc17 	ldw	r2,-16(fp)
   1f734:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1f738:	008000b4 	movhi	r2,2
   1f73c:	10868304 	addi	r2,r2,6668
   1f740:	e0fffb17 	ldw	r3,-20(fp)
   1f744:	18c00324 	muli	r3,r3,12
   1f748:	18c00204 	addi	r3,r3,8
   1f74c:	10c5883a 	add	r2,r2,r3
   1f750:	10c00017 	ldw	r3,0(r2)
   1f754:	e0bffc17 	ldw	r2,-16(fp)
   1f758:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1f75c:	e13ffb17 	ldw	r4,-20(fp)
   1f760:	00149140 	call	14914 <alt_release_fd>
  }
} 
   1f764:	e037883a 	mov	sp,fp
   1f768:	dfc00117 	ldw	ra,4(sp)
   1f76c:	df000017 	ldw	fp,0(sp)
   1f770:	dec00204 	addi	sp,sp,8
   1f774:	f800283a 	ret

0001f778 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1f778:	defffb04 	addi	sp,sp,-20
   1f77c:	dfc00415 	stw	ra,16(sp)
   1f780:	df000315 	stw	fp,12(sp)
   1f784:	df000304 	addi	fp,sp,12
   1f788:	e13ffd15 	stw	r4,-12(fp)
   1f78c:	e17ffe15 	stw	r5,-8(fp)
   1f790:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1f794:	010000b4 	movhi	r4,2
   1f798:	21068604 	addi	r4,r4,6680
   1f79c:	e17ffd17 	ldw	r5,-12(fp)
   1f7a0:	01800044 	movi	r6,1
   1f7a4:	01c07fc4 	movi	r7,511
   1f7a8:	001f6b80 	call	1f6b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1f7ac:	010000b4 	movhi	r4,2
   1f7b0:	21068304 	addi	r4,r4,6668
   1f7b4:	e17ffe17 	ldw	r5,-8(fp)
   1f7b8:	000d883a 	mov	r6,zero
   1f7bc:	01c07fc4 	movi	r7,511
   1f7c0:	001f6b80 	call	1f6b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1f7c4:	010000b4 	movhi	r4,2
   1f7c8:	21068904 	addi	r4,r4,6692
   1f7cc:	e17fff17 	ldw	r5,-4(fp)
   1f7d0:	01800044 	movi	r6,1
   1f7d4:	01c07fc4 	movi	r7,511
   1f7d8:	001f6b80 	call	1f6b8 <alt_open_fd>
}  
   1f7dc:	e037883a 	mov	sp,fp
   1f7e0:	dfc00117 	ldw	ra,4(sp)
   1f7e4:	df000017 	ldw	fp,0(sp)
   1f7e8:	dec00204 	addi	sp,sp,8
   1f7ec:	f800283a 	ret

0001f7f0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1f7f0:	defff004 	addi	sp,sp,-64
   1f7f4:	df000f15 	stw	fp,60(sp)
   1f7f8:	df000f04 	addi	fp,sp,60
   1f7fc:	e13ffd15 	stw	r4,-12(fp)
   1f800:	e17ffe15 	stw	r5,-8(fp)
   1f804:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1f808:	00bffa84 	movi	r2,-22
   1f80c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1f810:	e0bffd17 	ldw	r2,-12(fp)
   1f814:	10800828 	cmpgeui	r2,r2,32
   1f818:	10005c1e 	bne	r2,zero,1f98c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f81c:	0005303a 	rdctl	r2,status
   1f820:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f824:	e0fff317 	ldw	r3,-52(fp)
   1f828:	00bfff84 	movi	r2,-2
   1f82c:	1884703a 	and	r2,r3,r2
   1f830:	1001703a 	wrctl	status,r2
  
  return context;
   1f834:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1f838:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1f83c:	008000f4 	movhi	r2,3
   1f840:	10b08a04 	addi	r2,r2,-15832
   1f844:	e0fffd17 	ldw	r3,-12(fp)
   1f848:	180690fa 	slli	r3,r3,3
   1f84c:	10c5883a 	add	r2,r2,r3
   1f850:	e0ffff17 	ldw	r3,-4(fp)
   1f854:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1f858:	008000f4 	movhi	r2,3
   1f85c:	10b08a04 	addi	r2,r2,-15832
   1f860:	e0fffd17 	ldw	r3,-12(fp)
   1f864:	180690fa 	slli	r3,r3,3
   1f868:	18c00104 	addi	r3,r3,4
   1f86c:	10c5883a 	add	r2,r2,r3
   1f870:	e0fffe17 	ldw	r3,-8(fp)
   1f874:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1f878:	e0bfff17 	ldw	r2,-4(fp)
   1f87c:	10001f26 	beq	r2,zero,1f8fc <alt_irq_register+0x10c>
   1f880:	e0bffd17 	ldw	r2,-12(fp)
   1f884:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f888:	0005303a 	rdctl	r2,status
   1f88c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f890:	e0fff517 	ldw	r3,-44(fp)
   1f894:	00bfff84 	movi	r2,-2
   1f898:	1884703a 	and	r2,r3,r2
   1f89c:	1001703a 	wrctl	status,r2
  
  return context;
   1f8a0:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f8a4:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1f8a8:	e0bff417 	ldw	r2,-48(fp)
   1f8ac:	00c00044 	movi	r3,1
   1f8b0:	1884983a 	sll	r2,r3,r2
   1f8b4:	1007883a 	mov	r3,r2
   1f8b8:	008000b4 	movhi	r2,2
   1f8bc:	1093f304 	addi	r2,r2,20428
   1f8c0:	10800017 	ldw	r2,0(r2)
   1f8c4:	1886b03a 	or	r3,r3,r2
   1f8c8:	008000b4 	movhi	r2,2
   1f8cc:	1093f304 	addi	r2,r2,20428
   1f8d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f8d4:	008000b4 	movhi	r2,2
   1f8d8:	1093f304 	addi	r2,r2,20428
   1f8dc:	10800017 	ldw	r2,0(r2)
   1f8e0:	100170fa 	wrctl	ienable,r2
   1f8e4:	e0bff617 	ldw	r2,-40(fp)
   1f8e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8ec:	e0bff717 	ldw	r2,-36(fp)
   1f8f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f8f4:	0005883a 	mov	r2,zero
   1f8f8:	00001f06 	br	1f978 <alt_irq_register+0x188>
   1f8fc:	e0bffd17 	ldw	r2,-12(fp)
   1f900:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f904:	0005303a 	rdctl	r2,status
   1f908:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f90c:	e0fff917 	ldw	r3,-28(fp)
   1f910:	00bfff84 	movi	r2,-2
   1f914:	1884703a 	and	r2,r3,r2
   1f918:	1001703a 	wrctl	status,r2
  
  return context;
   1f91c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f920:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1f924:	e0bff817 	ldw	r2,-32(fp)
   1f928:	00c00044 	movi	r3,1
   1f92c:	1884983a 	sll	r2,r3,r2
   1f930:	0084303a 	nor	r2,zero,r2
   1f934:	1007883a 	mov	r3,r2
   1f938:	008000b4 	movhi	r2,2
   1f93c:	1093f304 	addi	r2,r2,20428
   1f940:	10800017 	ldw	r2,0(r2)
   1f944:	1886703a 	and	r3,r3,r2
   1f948:	008000b4 	movhi	r2,2
   1f94c:	1093f304 	addi	r2,r2,20428
   1f950:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f954:	008000b4 	movhi	r2,2
   1f958:	1093f304 	addi	r2,r2,20428
   1f95c:	10800017 	ldw	r2,0(r2)
   1f960:	100170fa 	wrctl	ienable,r2
   1f964:	e0bffa17 	ldw	r2,-24(fp)
   1f968:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f96c:	e0bffb17 	ldw	r2,-20(fp)
   1f970:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f974:	0005883a 	mov	r2,zero
   1f978:	e0bff115 	stw	r2,-60(fp)
   1f97c:	e0bff217 	ldw	r2,-56(fp)
   1f980:	e0bffc15 	stw	r2,-16(fp)
   1f984:	e0bffc17 	ldw	r2,-16(fp)
   1f988:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1f98c:	e0bff117 	ldw	r2,-60(fp)
}
   1f990:	e037883a 	mov	sp,fp
   1f994:	df000017 	ldw	fp,0(sp)
   1f998:	dec00104 	addi	sp,sp,4
   1f99c:	f800283a 	ret

0001f9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f9a0:	defffe04 	addi	sp,sp,-8
   1f9a4:	dfc00115 	stw	ra,4(sp)
   1f9a8:	df000015 	stw	fp,0(sp)
   1f9ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f9b0:	008000b4 	movhi	r2,2
   1f9b4:	108bea04 	addi	r2,r2,12200
   1f9b8:	10800017 	ldw	r2,0(r2)
   1f9bc:	10000526 	beq	r2,zero,1f9d4 <alt_get_errno+0x34>
   1f9c0:	008000b4 	movhi	r2,2
   1f9c4:	108bea04 	addi	r2,r2,12200
   1f9c8:	10800017 	ldw	r2,0(r2)
   1f9cc:	103ee83a 	callr	r2
   1f9d0:	00000206 	br	1f9dc <alt_get_errno+0x3c>
   1f9d4:	008000b4 	movhi	r2,2
   1f9d8:	1093d304 	addi	r2,r2,20300
}
   1f9dc:	e037883a 	mov	sp,fp
   1f9e0:	dfc00117 	ldw	ra,4(sp)
   1f9e4:	df000017 	ldw	fp,0(sp)
   1f9e8:	dec00204 	addi	sp,sp,8
   1f9ec:	f800283a 	ret

0001f9f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1f9f0:	defffd04 	addi	sp,sp,-12
   1f9f4:	df000215 	stw	fp,8(sp)
   1f9f8:	df000204 	addi	fp,sp,8
   1f9fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1fa00:	e0bfff17 	ldw	r2,-4(fp)
   1fa04:	10800217 	ldw	r2,8(r2)
   1fa08:	10d00034 	orhi	r3,r2,16384
   1fa0c:	e0bfff17 	ldw	r2,-4(fp)
   1fa10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1fa14:	e03ffe15 	stw	zero,-8(fp)
   1fa18:	00001d06 	br	1fa90 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1fa1c:	008000b4 	movhi	r2,2
   1fa20:	10868304 	addi	r2,r2,6668
   1fa24:	e0fffe17 	ldw	r3,-8(fp)
   1fa28:	18c00324 	muli	r3,r3,12
   1fa2c:	10c5883a 	add	r2,r2,r3
   1fa30:	10c00017 	ldw	r3,0(r2)
   1fa34:	e0bfff17 	ldw	r2,-4(fp)
   1fa38:	10800017 	ldw	r2,0(r2)
   1fa3c:	1880111e 	bne	r3,r2,1fa84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1fa40:	008000b4 	movhi	r2,2
   1fa44:	10868304 	addi	r2,r2,6668
   1fa48:	e0fffe17 	ldw	r3,-8(fp)
   1fa4c:	18c00324 	muli	r3,r3,12
   1fa50:	18c00204 	addi	r3,r3,8
   1fa54:	10c5883a 	add	r2,r2,r3
   1fa58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1fa5c:	1000090e 	bge	r2,zero,1fa84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1fa60:	e0bffe17 	ldw	r2,-8(fp)
   1fa64:	10c00324 	muli	r3,r2,12
   1fa68:	008000b4 	movhi	r2,2
   1fa6c:	10868304 	addi	r2,r2,6668
   1fa70:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1fa74:	e0bfff17 	ldw	r2,-4(fp)
   1fa78:	18800226 	beq	r3,r2,1fa84 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1fa7c:	00bffcc4 	movi	r2,-13
   1fa80:	00000a06 	br	1faac <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1fa84:	e0bffe17 	ldw	r2,-8(fp)
   1fa88:	10800044 	addi	r2,r2,1
   1fa8c:	e0bffe15 	stw	r2,-8(fp)
   1fa90:	008000b4 	movhi	r2,2
   1fa94:	108be904 	addi	r2,r2,12196
   1fa98:	10800017 	ldw	r2,0(r2)
   1fa9c:	1007883a 	mov	r3,r2
   1faa0:	e0bffe17 	ldw	r2,-8(fp)
   1faa4:	18bfdd2e 	bgeu	r3,r2,1fa1c <__alt_mem_Flash_flash_data+0xf401fa1c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1faa8:	0005883a 	mov	r2,zero
}
   1faac:	e037883a 	mov	sp,fp
   1fab0:	df000017 	ldw	fp,0(sp)
   1fab4:	dec00104 	addi	sp,sp,4
   1fab8:	f800283a 	ret

0001fabc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1fabc:	defff604 	addi	sp,sp,-40
   1fac0:	dfc00915 	stw	ra,36(sp)
   1fac4:	df000815 	stw	fp,32(sp)
   1fac8:	df000804 	addi	fp,sp,32
   1facc:	e13ffd15 	stw	r4,-12(fp)
   1fad0:	e17ffe15 	stw	r5,-8(fp)
   1fad4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1fad8:	00bfffc4 	movi	r2,-1
   1fadc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1fae0:	00bffb44 	movi	r2,-19
   1fae4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1fae8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1faec:	e13ffd17 	ldw	r4,-12(fp)
   1faf0:	014000b4 	movhi	r5,2
   1faf4:	294be704 	addi	r5,r5,12188
   1faf8:	001f5f80 	call	1f5f8 <alt_find_dev>
   1fafc:	e0bff815 	stw	r2,-32(fp)
   1fb00:	e0bff817 	ldw	r2,-32(fp)
   1fb04:	1000051e 	bne	r2,zero,1fb1c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1fb08:	e13ffd17 	ldw	r4,-12(fp)
   1fb0c:	00201040 	call	20104 <alt_find_file>
   1fb10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1fb14:	00800044 	movi	r2,1
   1fb18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1fb1c:	e0bff817 	ldw	r2,-32(fp)
   1fb20:	10002926 	beq	r2,zero,1fbc8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1fb24:	e13ff817 	ldw	r4,-32(fp)
   1fb28:	00202180 	call	20218 <alt_get_fd>
   1fb2c:	e0bff915 	stw	r2,-28(fp)
   1fb30:	e0bff917 	ldw	r2,-28(fp)
   1fb34:	1000030e 	bge	r2,zero,1fb44 <open+0x88>
    {
      status = index;
   1fb38:	e0bff917 	ldw	r2,-28(fp)
   1fb3c:	e0bffa15 	stw	r2,-24(fp)
   1fb40:	00002306 	br	1fbd0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1fb44:	e0bff917 	ldw	r2,-28(fp)
   1fb48:	10c00324 	muli	r3,r2,12
   1fb4c:	008000b4 	movhi	r2,2
   1fb50:	10868304 	addi	r2,r2,6668
   1fb54:	1885883a 	add	r2,r3,r2
   1fb58:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1fb5c:	e0fffe17 	ldw	r3,-8(fp)
   1fb60:	00900034 	movhi	r2,16384
   1fb64:	10bfffc4 	addi	r2,r2,-1
   1fb68:	1886703a 	and	r3,r3,r2
   1fb6c:	e0bffc17 	ldw	r2,-16(fp)
   1fb70:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1fb74:	e0bffb17 	ldw	r2,-20(fp)
   1fb78:	1000051e 	bne	r2,zero,1fb90 <open+0xd4>
   1fb7c:	e13ffc17 	ldw	r4,-16(fp)
   1fb80:	001f9f00 	call	1f9f0 <alt_file_locked>
   1fb84:	e0bffa15 	stw	r2,-24(fp)
   1fb88:	e0bffa17 	ldw	r2,-24(fp)
   1fb8c:	10001016 	blt	r2,zero,1fbd0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1fb90:	e0bff817 	ldw	r2,-32(fp)
   1fb94:	10800317 	ldw	r2,12(r2)
   1fb98:	10000826 	beq	r2,zero,1fbbc <open+0x100>
   1fb9c:	e0bff817 	ldw	r2,-32(fp)
   1fba0:	10800317 	ldw	r2,12(r2)
   1fba4:	e13ffc17 	ldw	r4,-16(fp)
   1fba8:	e17ffd17 	ldw	r5,-12(fp)
   1fbac:	e1bffe17 	ldw	r6,-8(fp)
   1fbb0:	e1ffff17 	ldw	r7,-4(fp)
   1fbb4:	103ee83a 	callr	r2
   1fbb8:	00000106 	br	1fbc0 <open+0x104>
   1fbbc:	0005883a 	mov	r2,zero
   1fbc0:	e0bffa15 	stw	r2,-24(fp)
   1fbc4:	00000206 	br	1fbd0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1fbc8:	00bffb44 	movi	r2,-19
   1fbcc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1fbd0:	e0bffa17 	ldw	r2,-24(fp)
   1fbd4:	1000090e 	bge	r2,zero,1fbfc <open+0x140>
  {
    alt_release_fd (index);  
   1fbd8:	e13ff917 	ldw	r4,-28(fp)
   1fbdc:	00149140 	call	14914 <alt_release_fd>
    ALT_ERRNO = -status;
   1fbe0:	001f9a00 	call	1f9a0 <alt_get_errno>
   1fbe4:	1007883a 	mov	r3,r2
   1fbe8:	e0bffa17 	ldw	r2,-24(fp)
   1fbec:	0085c83a 	sub	r2,zero,r2
   1fbf0:	18800015 	stw	r2,0(r3)
    return -1;
   1fbf4:	00bfffc4 	movi	r2,-1
   1fbf8:	00000106 	br	1fc00 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1fbfc:	e0bff917 	ldw	r2,-28(fp)
}
   1fc00:	e037883a 	mov	sp,fp
   1fc04:	dfc00117 	ldw	ra,4(sp)
   1fc08:	df000017 	ldw	fp,0(sp)
   1fc0c:	dec00204 	addi	sp,sp,8
   1fc10:	f800283a 	ret

0001fc14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1fc14:	defffa04 	addi	sp,sp,-24
   1fc18:	df000515 	stw	fp,20(sp)
   1fc1c:	df000504 	addi	fp,sp,20
   1fc20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fc24:	0005303a 	rdctl	r2,status
   1fc28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fc2c:	e0fffc17 	ldw	r3,-16(fp)
   1fc30:	00bfff84 	movi	r2,-2
   1fc34:	1884703a 	and	r2,r3,r2
   1fc38:	1001703a 	wrctl	status,r2
  
  return context;
   1fc3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1fc40:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1fc44:	e0bfff17 	ldw	r2,-4(fp)
   1fc48:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1fc4c:	e0bffd17 	ldw	r2,-12(fp)
   1fc50:	10800017 	ldw	r2,0(r2)
   1fc54:	e0fffd17 	ldw	r3,-12(fp)
   1fc58:	18c00117 	ldw	r3,4(r3)
   1fc5c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1fc60:	e0bffd17 	ldw	r2,-12(fp)
   1fc64:	10800117 	ldw	r2,4(r2)
   1fc68:	e0fffd17 	ldw	r3,-12(fp)
   1fc6c:	18c00017 	ldw	r3,0(r3)
   1fc70:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1fc74:	e0bffd17 	ldw	r2,-12(fp)
   1fc78:	e0fffd17 	ldw	r3,-12(fp)
   1fc7c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1fc80:	e0bffd17 	ldw	r2,-12(fp)
   1fc84:	e0fffd17 	ldw	r3,-12(fp)
   1fc88:	10c00015 	stw	r3,0(r2)
   1fc8c:	e0bffb17 	ldw	r2,-20(fp)
   1fc90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fc94:	e0bffe17 	ldw	r2,-8(fp)
   1fc98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1fc9c:	e037883a 	mov	sp,fp
   1fca0:	df000017 	ldw	fp,0(sp)
   1fca4:	dec00104 	addi	sp,sp,4
   1fca8:	f800283a 	ret

0001fcac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1fcac:	defffb04 	addi	sp,sp,-20
   1fcb0:	dfc00415 	stw	ra,16(sp)
   1fcb4:	df000315 	stw	fp,12(sp)
   1fcb8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1fcbc:	d0a02d17 	ldw	r2,-32588(gp)
   1fcc0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1fcc4:	d0a81617 	ldw	r2,-24488(gp)
   1fcc8:	10800044 	addi	r2,r2,1
   1fccc:	d0a81615 	stw	r2,-24488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1fcd0:	00002e06 	br	1fd8c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1fcd4:	e0bffd17 	ldw	r2,-12(fp)
   1fcd8:	10800017 	ldw	r2,0(r2)
   1fcdc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1fce0:	e0bffd17 	ldw	r2,-12(fp)
   1fce4:	10800403 	ldbu	r2,16(r2)
   1fce8:	10803fcc 	andi	r2,r2,255
   1fcec:	10000426 	beq	r2,zero,1fd00 <alt_tick+0x54>
   1fcf0:	d0a81617 	ldw	r2,-24488(gp)
   1fcf4:	1000021e 	bne	r2,zero,1fd00 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1fcf8:	e0bffd17 	ldw	r2,-12(fp)
   1fcfc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1fd00:	e0bffd17 	ldw	r2,-12(fp)
   1fd04:	10800217 	ldw	r2,8(r2)
   1fd08:	d0e81617 	ldw	r3,-24488(gp)
   1fd0c:	18801d36 	bltu	r3,r2,1fd84 <alt_tick+0xd8>
   1fd10:	e0bffd17 	ldw	r2,-12(fp)
   1fd14:	10800403 	ldbu	r2,16(r2)
   1fd18:	10803fcc 	andi	r2,r2,255
   1fd1c:	1000191e 	bne	r2,zero,1fd84 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1fd20:	e0bffd17 	ldw	r2,-12(fp)
   1fd24:	10800317 	ldw	r2,12(r2)
   1fd28:	e0fffd17 	ldw	r3,-12(fp)
   1fd2c:	18c00517 	ldw	r3,20(r3)
   1fd30:	1809883a 	mov	r4,r3
   1fd34:	103ee83a 	callr	r2
   1fd38:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1fd3c:	e0bfff17 	ldw	r2,-4(fp)
   1fd40:	1000031e 	bne	r2,zero,1fd50 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1fd44:	e13ffd17 	ldw	r4,-12(fp)
   1fd48:	001fc140 	call	1fc14 <alt_alarm_stop>
   1fd4c:	00000d06 	br	1fd84 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1fd50:	e0bffd17 	ldw	r2,-12(fp)
   1fd54:	10c00217 	ldw	r3,8(r2)
   1fd58:	e0bfff17 	ldw	r2,-4(fp)
   1fd5c:	1887883a 	add	r3,r3,r2
   1fd60:	e0bffd17 	ldw	r2,-12(fp)
   1fd64:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1fd68:	e0bffd17 	ldw	r2,-12(fp)
   1fd6c:	10c00217 	ldw	r3,8(r2)
   1fd70:	d0a81617 	ldw	r2,-24488(gp)
   1fd74:	1880032e 	bgeu	r3,r2,1fd84 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1fd78:	e0bffd17 	ldw	r2,-12(fp)
   1fd7c:	00c00044 	movi	r3,1
   1fd80:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1fd84:	e0bffe17 	ldw	r2,-8(fp)
   1fd88:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1fd8c:	e0fffd17 	ldw	r3,-12(fp)
   1fd90:	d0a02d04 	addi	r2,gp,-32588
   1fd94:	18bfcf1e 	bne	r3,r2,1fcd4 <__alt_mem_Flash_flash_data+0xf401fcd4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1fd98:	0015b200 	call	15b20 <OSTimeTick>
}
   1fd9c:	e037883a 	mov	sp,fp
   1fda0:	dfc00117 	ldw	ra,4(sp)
   1fda4:	df000017 	ldw	fp,0(sp)
   1fda8:	dec00204 	addi	sp,sp,8
   1fdac:	f800283a 	ret

0001fdb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1fdb0:	deffff04 	addi	sp,sp,-4
   1fdb4:	df000015 	stw	fp,0(sp)
   1fdb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1fdbc:	000170fa 	wrctl	ienable,zero
}
   1fdc0:	e037883a 	mov	sp,fp
   1fdc4:	df000017 	ldw	fp,0(sp)
   1fdc8:	dec00104 	addi	sp,sp,4
   1fdcc:	f800283a 	ret

0001fdd0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1fdd0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1fdd4:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1fdd8:	d1280f17 	ldw	r4,-24516(gp)

      stw ra,  0(sp)
   1fddc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1fde0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1fde4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1fde8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1fdec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1fdf0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1fdf4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1fdf8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1fdfc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1fe00:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1fe04:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1fe08:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1fe0c:	002003c0 	call	2003c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1fe10:	d1280a17 	ldw	r4,-24536(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1fe14:	d1680207 	ldb	r5,-24568(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1fe18:	d1280f15 	stw	r4,-24516(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1fe1c:	d1680245 	stb	r5,-24567(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1fe20:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1fe24:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1fe28:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1fe2c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1fe30:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1fe34:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1fe38:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1fe3c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1fe40:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1fe44:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1fe48:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1fe4c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1fe50:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1fe54:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1fe58:	f800283a 	ret

0001fe5c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1fe5c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1fe60:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1fe64:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1fe68:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1fe6c:	002003c0 	call	2003c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1fe70:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1fe74:	d4a80045 	stb	r18,-24575(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1fe78:	003fe506 	br	1fe10 <__alt_mem_Flash_flash_data+0xf401fe10>

0001fe7c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1fe7c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1fe80:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1fe84:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1fe88:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1fe8c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1fe90:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1fe94:	dec00204 	addi	sp,sp,8

      callr r2
   1fe98:	103ee83a 	callr	r2

      nop
   1fe9c:	0001883a 	nop

0001fea0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1fea0:	defff704 	addi	sp,sp,-36
   1fea4:	dfc00815 	stw	ra,32(sp)
   1fea8:	df000715 	stw	fp,28(sp)
   1feac:	df000704 	addi	fp,sp,28
   1feb0:	e13ffc15 	stw	r4,-16(fp)
   1feb4:	e17ffd15 	stw	r5,-12(fp)
   1feb8:	e1bffe15 	stw	r6,-8(fp)
   1febc:	3805883a 	mov	r2,r7
   1fec0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1fec4:	e0fffe17 	ldw	r3,-8(fp)
   1fec8:	00bfff04 	movi	r2,-4
   1fecc:	1884703a 	and	r2,r3,r2
   1fed0:	10bef704 	addi	r2,r2,-1060
   1fed4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1fed8:	e13ff917 	ldw	r4,-28(fp)
   1fedc:	000b883a 	mov	r5,zero
   1fee0:	01810904 	movi	r6,1060
   1fee4:	000e3cc0 	call	e3cc <memset>
   1fee8:	e0bff917 	ldw	r2,-28(fp)
   1feec:	10c0bb04 	addi	r3,r2,748
   1fef0:	e0bff917 	ldw	r2,-28(fp)
   1fef4:	10c00115 	stw	r3,4(r2)
   1fef8:	e0bff917 	ldw	r2,-28(fp)
   1fefc:	10c0d504 	addi	r3,r2,852
   1ff00:	e0bff917 	ldw	r2,-28(fp)
   1ff04:	10c00215 	stw	r3,8(r2)
   1ff08:	e0bff917 	ldw	r2,-28(fp)
   1ff0c:	10c0ef04 	addi	r3,r2,956
   1ff10:	e0bff917 	ldw	r2,-28(fp)
   1ff14:	10c00315 	stw	r3,12(r2)
   1ff18:	e0fff917 	ldw	r3,-28(fp)
   1ff1c:	008000b4 	movhi	r2,2
   1ff20:	10844f04 	addi	r2,r2,4412
   1ff24:	18800d15 	stw	r2,52(r3)
   1ff28:	e0bff917 	ldw	r2,-28(fp)
   1ff2c:	00c00044 	movi	r3,1
   1ff30:	10c02915 	stw	r3,164(r2)
   1ff34:	10002a15 	stw	zero,168(r2)
   1ff38:	e0bff917 	ldw	r2,-28(fp)
   1ff3c:	00ccc384 	movi	r3,13070
   1ff40:	10c02b0d 	sth	r3,172(r2)
   1ff44:	e0bff917 	ldw	r2,-28(fp)
   1ff48:	00eaf344 	movi	r3,-21555
   1ff4c:	10c02b8d 	sth	r3,174(r2)
   1ff50:	e0bff917 	ldw	r2,-28(fp)
   1ff54:	00c48d04 	movi	r3,4660
   1ff58:	10c02c0d 	sth	r3,176(r2)
   1ff5c:	e0bff917 	ldw	r2,-28(fp)
   1ff60:	00f99b44 	movi	r3,-6547
   1ff64:	10c02c8d 	sth	r3,178(r2)
   1ff68:	e0bff917 	ldw	r2,-28(fp)
   1ff6c:	00f7bb04 	movi	r3,-8468
   1ff70:	10c02d0d 	sth	r3,180(r2)
   1ff74:	e0bff917 	ldw	r2,-28(fp)
   1ff78:	00c00144 	movi	r3,5
   1ff7c:	10c02d8d 	sth	r3,182(r2)
   1ff80:	e0bff917 	ldw	r2,-28(fp)
   1ff84:	00c002c4 	movi	r3,11
   1ff88:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1ff8c:	e0bff917 	ldw	r2,-28(fp)
   1ff90:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1ff94:	e0bffa17 	ldw	r2,-24(fp)
   1ff98:	10bff304 	addi	r2,r2,-52
   1ff9c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1ffa0:	e0bffb17 	ldw	r2,-20(fp)
   1ffa4:	10800c04 	addi	r2,r2,48
   1ffa8:	e0fffc17 	ldw	r3,-16(fp)
   1ffac:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1ffb0:	e0bffb17 	ldw	r2,-20(fp)
   1ffb4:	10800b04 	addi	r2,r2,44
   1ffb8:	e0fffd17 	ldw	r3,-12(fp)
   1ffbc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1ffc0:	e0bffb17 	ldw	r2,-20(fp)
   1ffc4:	10800a04 	addi	r2,r2,40
   1ffc8:	e0fff917 	ldw	r3,-28(fp)
   1ffcc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ffd0:	008000b4 	movhi	r2,2
   1ffd4:	10bf9f04 	addi	r2,r2,-388
   1ffd8:	10c00104 	addi	r3,r2,4
   1ffdc:	e0bffb17 	ldw	r2,-20(fp)
   1ffe0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ffe4:	e0bffb17 	ldw	r2,-20(fp)
}
   1ffe8:	e037883a 	mov	sp,fp
   1ffec:	dfc00117 	ldw	ra,4(sp)
   1fff0:	df000017 	ldw	fp,0(sp)
   1fff4:	dec00204 	addi	sp,sp,8
   1fff8:	f800283a 	ret

0001fffc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1fffc:	defffe04 	addi	sp,sp,-8
   20000:	df000115 	stw	fp,4(sp)
   20004:	df000104 	addi	fp,sp,4
   20008:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   2000c:	e037883a 	mov	sp,fp
   20010:	df000017 	ldw	fp,0(sp)
   20014:	dec00104 	addi	sp,sp,4
   20018:	f800283a 	ret

0002001c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   2001c:	defffe04 	addi	sp,sp,-8
   20020:	df000115 	stw	fp,4(sp)
   20024:	df000104 	addi	fp,sp,4
   20028:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   2002c:	e037883a 	mov	sp,fp
   20030:	df000017 	ldw	fp,0(sp)
   20034:	dec00104 	addi	sp,sp,4
   20038:	f800283a 	ret

0002003c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   2003c:	deffff04 	addi	sp,sp,-4
   20040:	df000015 	stw	fp,0(sp)
   20044:	d839883a 	mov	fp,sp
}
   20048:	e037883a 	mov	sp,fp
   2004c:	df000017 	ldw	fp,0(sp)
   20050:	dec00104 	addi	sp,sp,4
   20054:	f800283a 	ret

00020058 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   20058:	deffff04 	addi	sp,sp,-4
   2005c:	df000015 	stw	fp,0(sp)
   20060:	d839883a 	mov	fp,sp
}
   20064:	e037883a 	mov	sp,fp
   20068:	df000017 	ldw	fp,0(sp)
   2006c:	dec00104 	addi	sp,sp,4
   20070:	f800283a 	ret

00020074 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   20074:	deffff04 	addi	sp,sp,-4
   20078:	df000015 	stw	fp,0(sp)
   2007c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   20080:	e037883a 	mov	sp,fp
   20084:	df000017 	ldw	fp,0(sp)
   20088:	dec00104 	addi	sp,sp,4
   2008c:	f800283a 	ret

00020090 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   20090:	deffff04 	addi	sp,sp,-4
   20094:	df000015 	stw	fp,0(sp)
   20098:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   2009c:	e037883a 	mov	sp,fp
   200a0:	df000017 	ldw	fp,0(sp)
   200a4:	dec00104 	addi	sp,sp,4
   200a8:	f800283a 	ret

000200ac <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   200ac:	deffff04 	addi	sp,sp,-4
   200b0:	df000015 	stw	fp,0(sp)
   200b4:	d839883a 	mov	fp,sp
}
   200b8:	e037883a 	mov	sp,fp
   200bc:	df000017 	ldw	fp,0(sp)
   200c0:	dec00104 	addi	sp,sp,4
   200c4:	f800283a 	ret

000200c8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   200c8:	deffff04 	addi	sp,sp,-4
   200cc:	df000015 	stw	fp,0(sp)
   200d0:	d839883a 	mov	fp,sp
}
   200d4:	e037883a 	mov	sp,fp
   200d8:	df000017 	ldw	fp,0(sp)
   200dc:	dec00104 	addi	sp,sp,4
   200e0:	f800283a 	ret

000200e4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   200e4:	defffe04 	addi	sp,sp,-8
   200e8:	df000115 	stw	fp,4(sp)
   200ec:	df000104 	addi	fp,sp,4
   200f0:	e13fff15 	stw	r4,-4(fp)
}
   200f4:	e037883a 	mov	sp,fp
   200f8:	df000017 	ldw	fp,0(sp)
   200fc:	dec00104 	addi	sp,sp,4
   20100:	f800283a 	ret

00020104 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   20104:	defffb04 	addi	sp,sp,-20
   20108:	dfc00415 	stw	ra,16(sp)
   2010c:	df000315 	stw	fp,12(sp)
   20110:	df000304 	addi	fp,sp,12
   20114:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   20118:	008000b4 	movhi	r2,2
   2011c:	108be504 	addi	r2,r2,12180
   20120:	10800017 	ldw	r2,0(r2)
   20124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   20128:	00003106 	br	201f0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	10800217 	ldw	r2,8(r2)
   20134:	1009883a 	mov	r4,r2
   20138:	000738c0 	call	738c <strlen>
   2013c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   20140:	e0bffd17 	ldw	r2,-12(fp)
   20144:	10c00217 	ldw	r3,8(r2)
   20148:	e0bffe17 	ldw	r2,-8(fp)
   2014c:	10bfffc4 	addi	r2,r2,-1
   20150:	1885883a 	add	r2,r3,r2
   20154:	10800003 	ldbu	r2,0(r2)
   20158:	10803fcc 	andi	r2,r2,255
   2015c:	1080201c 	xori	r2,r2,128
   20160:	10bfe004 	addi	r2,r2,-128
   20164:	10800bd8 	cmpnei	r2,r2,47
   20168:	1000031e 	bne	r2,zero,20178 <alt_find_file+0x74>
    {
      len -= 1;
   2016c:	e0bffe17 	ldw	r2,-8(fp)
   20170:	10bfffc4 	addi	r2,r2,-1
   20174:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   20178:	e0bffe17 	ldw	r2,-8(fp)
   2017c:	e0ffff17 	ldw	r3,-4(fp)
   20180:	1885883a 	add	r2,r3,r2
   20184:	10800003 	ldbu	r2,0(r2)
   20188:	10803fcc 	andi	r2,r2,255
   2018c:	1080201c 	xori	r2,r2,128
   20190:	10bfe004 	addi	r2,r2,-128
   20194:	10800be0 	cmpeqi	r2,r2,47
   20198:	1000081e 	bne	r2,zero,201bc <alt_find_file+0xb8>
   2019c:	e0bffe17 	ldw	r2,-8(fp)
   201a0:	e0ffff17 	ldw	r3,-4(fp)
   201a4:	1885883a 	add	r2,r3,r2
   201a8:	10800003 	ldbu	r2,0(r2)
   201ac:	10803fcc 	andi	r2,r2,255
   201b0:	1080201c 	xori	r2,r2,128
   201b4:	10bfe004 	addi	r2,r2,-128
   201b8:	10000a1e 	bne	r2,zero,201e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   201bc:	e0bffd17 	ldw	r2,-12(fp)
   201c0:	10c00217 	ldw	r3,8(r2)
   201c4:	e0bffe17 	ldw	r2,-8(fp)
   201c8:	1809883a 	mov	r4,r3
   201cc:	e17fff17 	ldw	r5,-4(fp)
   201d0:	100d883a 	mov	r6,r2
   201d4:	00204880 	call	20488 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   201d8:	1000021e 	bne	r2,zero,201e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   201dc:	e0bffd17 	ldw	r2,-12(fp)
   201e0:	00000806 	br	20204 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   201e4:	e0bffd17 	ldw	r2,-12(fp)
   201e8:	10800017 	ldw	r2,0(r2)
   201ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   201f0:	e0fffd17 	ldw	r3,-12(fp)
   201f4:	008000b4 	movhi	r2,2
   201f8:	108be504 	addi	r2,r2,12180
   201fc:	18bfcb1e 	bne	r3,r2,2012c <__alt_mem_Flash_flash_data+0xf402012c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   20200:	0005883a 	mov	r2,zero
}
   20204:	e037883a 	mov	sp,fp
   20208:	dfc00117 	ldw	ra,4(sp)
   2020c:	df000017 	ldw	fp,0(sp)
   20210:	dec00204 	addi	sp,sp,8
   20214:	f800283a 	ret

00020218 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   20218:	defff904 	addi	sp,sp,-28
   2021c:	dfc00615 	stw	ra,24(sp)
   20220:	df000515 	stw	fp,20(sp)
   20224:	df000504 	addi	fp,sp,20
   20228:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2022c:	00bffa04 	movi	r2,-24
   20230:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   20234:	008000b4 	movhi	r2,2
   20238:	1093d704 	addi	r2,r2,20316
   2023c:	10800017 	ldw	r2,0(r2)
   20240:	e0bffd15 	stw	r2,-12(fp)
   20244:	e03ffe0d 	sth	zero,-8(fp)
   20248:	e0fffe0b 	ldhu	r3,-8(fp)
   2024c:	e0bffe84 	addi	r2,fp,-6
   20250:	e13ffd17 	ldw	r4,-12(fp)
   20254:	180b883a 	mov	r5,r3
   20258:	100d883a 	mov	r6,r2
   2025c:	001a5bc0 	call	1a5bc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20260:	e03ffb15 	stw	zero,-20(fp)
   20264:	00001d06 	br	202dc <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   20268:	008000b4 	movhi	r2,2
   2026c:	10868304 	addi	r2,r2,6668
   20270:	e0fffb17 	ldw	r3,-20(fp)
   20274:	18c00324 	muli	r3,r3,12
   20278:	10c5883a 	add	r2,r2,r3
   2027c:	10800017 	ldw	r2,0(r2)
   20280:	1000131e 	bne	r2,zero,202d0 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   20284:	008000b4 	movhi	r2,2
   20288:	10868304 	addi	r2,r2,6668
   2028c:	e0fffb17 	ldw	r3,-20(fp)
   20290:	18c00324 	muli	r3,r3,12
   20294:	10c5883a 	add	r2,r2,r3
   20298:	e0ffff17 	ldw	r3,-4(fp)
   2029c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   202a0:	008000b4 	movhi	r2,2
   202a4:	108be904 	addi	r2,r2,12196
   202a8:	10c00017 	ldw	r3,0(r2)
   202ac:	e0bffb17 	ldw	r2,-20(fp)
   202b0:	1880040e 	bge	r3,r2,202c4 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   202b4:	008000b4 	movhi	r2,2
   202b8:	108be904 	addi	r2,r2,12196
   202bc:	e0fffb17 	ldw	r3,-20(fp)
   202c0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   202c4:	e0bffb17 	ldw	r2,-20(fp)
   202c8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   202cc:	00000606 	br	202e8 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   202d0:	e0bffb17 	ldw	r2,-20(fp)
   202d4:	10800044 	addi	r2,r2,1
   202d8:	e0bffb15 	stw	r2,-20(fp)
   202dc:	e0bffb17 	ldw	r2,-20(fp)
   202e0:	10800810 	cmplti	r2,r2,32
   202e4:	103fe01e 	bne	r2,zero,20268 <__alt_mem_Flash_flash_data+0xf4020268>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   202e8:	008000b4 	movhi	r2,2
   202ec:	1093d704 	addi	r2,r2,20316
   202f0:	10800017 	ldw	r2,0(r2)
   202f4:	1009883a 	mov	r4,r2
   202f8:	001a9900 	call	1a990 <OSSemPost>

  return rc;
   202fc:	e0bffc17 	ldw	r2,-16(fp)
}
   20300:	e037883a 	mov	sp,fp
   20304:	dfc00117 	ldw	ra,4(sp)
   20308:	df000017 	ldw	fp,0(sp)
   2030c:	dec00204 	addi	sp,sp,8
   20310:	f800283a 	ret

00020314 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   20314:	defffb04 	addi	sp,sp,-20
   20318:	df000415 	stw	fp,16(sp)
   2031c:	df000404 	addi	fp,sp,16
   20320:	e13ffe15 	stw	r4,-8(fp)
   20324:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   20328:	e0bfff17 	ldw	r2,-4(fp)
   2032c:	10840070 	cmpltui	r2,r2,4097
   20330:	1000021e 	bne	r2,zero,2033c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   20334:	00840004 	movi	r2,4096
   20338:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2033c:	e0fffe17 	ldw	r3,-8(fp)
   20340:	e0bfff17 	ldw	r2,-4(fp)
   20344:	1885883a 	add	r2,r3,r2
   20348:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2034c:	e0bffe17 	ldw	r2,-8(fp)
   20350:	e0bffc15 	stw	r2,-16(fp)
   20354:	00000506 	br	2036c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   20358:	e0bffc17 	ldw	r2,-16(fp)
   2035c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20360:	e0bffc17 	ldw	r2,-16(fp)
   20364:	10800804 	addi	r2,r2,32
   20368:	e0bffc15 	stw	r2,-16(fp)
   2036c:	e0fffc17 	ldw	r3,-16(fp)
   20370:	e0bffd17 	ldw	r2,-12(fp)
   20374:	18bff836 	bltu	r3,r2,20358 <__alt_mem_Flash_flash_data+0xf4020358>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   20378:	e0bffe17 	ldw	r2,-8(fp)
   2037c:	108007cc 	andi	r2,r2,31
   20380:	10000226 	beq	r2,zero,2038c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   20384:	e0bffc17 	ldw	r2,-16(fp)
   20388:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2038c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   20390:	e037883a 	mov	sp,fp
   20394:	df000017 	ldw	fp,0(sp)
   20398:	dec00104 	addi	sp,sp,4
   2039c:	f800283a 	ret

000203a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   203a0:	defffe04 	addi	sp,sp,-8
   203a4:	df000115 	stw	fp,4(sp)
   203a8:	df000104 	addi	fp,sp,4
   203ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   203b0:	e0bfff17 	ldw	r2,-4(fp)
   203b4:	10bffe84 	addi	r2,r2,-6
   203b8:	10c00428 	cmpgeui	r3,r2,16
   203bc:	18001a1e 	bne	r3,zero,20428 <alt_exception_cause_generated_bad_addr+0x88>
   203c0:	100690ba 	slli	r3,r2,2
   203c4:	008000b4 	movhi	r2,2
   203c8:	1080f604 	addi	r2,r2,984
   203cc:	1885883a 	add	r2,r3,r2
   203d0:	10800017 	ldw	r2,0(r2)
   203d4:	1000683a 	jmp	r2
   203d8:	00020418 	cmpnei	zero,zero,2064
   203dc:	00020418 	cmpnei	zero,zero,2064
   203e0:	00020428 	cmpgeui	zero,zero,2064
   203e4:	00020428 	cmpgeui	zero,zero,2064
   203e8:	00020428 	cmpgeui	zero,zero,2064
   203ec:	00020418 	cmpnei	zero,zero,2064
   203f0:	00020420 	cmpeqi	zero,zero,2064
   203f4:	00020428 	cmpgeui	zero,zero,2064
   203f8:	00020418 	cmpnei	zero,zero,2064
   203fc:	00020418 	cmpnei	zero,zero,2064
   20400:	00020428 	cmpgeui	zero,zero,2064
   20404:	00020418 	cmpnei	zero,zero,2064
   20408:	00020420 	cmpeqi	zero,zero,2064
   2040c:	00020428 	cmpgeui	zero,zero,2064
   20410:	00020428 	cmpgeui	zero,zero,2064
   20414:	00020418 	cmpnei	zero,zero,2064
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   20418:	00800044 	movi	r2,1
   2041c:	00000306 	br	2042c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   20420:	0005883a 	mov	r2,zero
   20424:	00000106 	br	2042c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   20428:	0005883a 	mov	r2,zero
  }
}
   2042c:	e037883a 	mov	sp,fp
   20430:	df000017 	ldw	fp,0(sp)
   20434:	dec00104 	addi	sp,sp,4
   20438:	f800283a 	ret

0002043c <atexit>:
   2043c:	200b883a 	mov	r5,r4
   20440:	000d883a 	mov	r6,zero
   20444:	0009883a 	mov	r4,zero
   20448:	000f883a 	mov	r7,zero
   2044c:	00205041 	jmpi	20504 <__register_exitproc>

00020450 <exit>:
   20450:	defffe04 	addi	sp,sp,-8
   20454:	000b883a 	mov	r5,zero
   20458:	dc000015 	stw	r16,0(sp)
   2045c:	dfc00115 	stw	ra,4(sp)
   20460:	2021883a 	mov	r16,r4
   20464:	00206180 	call	20618 <__call_exitprocs>
   20468:	008000b4 	movhi	r2,2
   2046c:	108be104 	addi	r2,r2,12164
   20470:	11000017 	ldw	r4,0(r2)
   20474:	20800f17 	ldw	r2,60(r4)
   20478:	10000126 	beq	r2,zero,20480 <exit+0x30>
   2047c:	103ee83a 	callr	r2
   20480:	8009883a 	mov	r4,r16
   20484:	00207ac0 	call	207ac <_exit>

00020488 <memcmp>:
   20488:	01c000c4 	movi	r7,3
   2048c:	3980192e 	bgeu	r7,r6,204f4 <memcmp+0x6c>
   20490:	2144b03a 	or	r2,r4,r5
   20494:	11c4703a 	and	r2,r2,r7
   20498:	10000f26 	beq	r2,zero,204d8 <memcmp+0x50>
   2049c:	20800003 	ldbu	r2,0(r4)
   204a0:	28c00003 	ldbu	r3,0(r5)
   204a4:	10c0151e 	bne	r2,r3,204fc <memcmp+0x74>
   204a8:	31bfff84 	addi	r6,r6,-2
   204ac:	01ffffc4 	movi	r7,-1
   204b0:	00000406 	br	204c4 <memcmp+0x3c>
   204b4:	20800003 	ldbu	r2,0(r4)
   204b8:	28c00003 	ldbu	r3,0(r5)
   204bc:	31bfffc4 	addi	r6,r6,-1
   204c0:	10c00e1e 	bne	r2,r3,204fc <memcmp+0x74>
   204c4:	21000044 	addi	r4,r4,1
   204c8:	29400044 	addi	r5,r5,1
   204cc:	31fff91e 	bne	r6,r7,204b4 <__alt_mem_Flash_flash_data+0xf40204b4>
   204d0:	0005883a 	mov	r2,zero
   204d4:	f800283a 	ret
   204d8:	20c00017 	ldw	r3,0(r4)
   204dc:	28800017 	ldw	r2,0(r5)
   204e0:	1880041e 	bne	r3,r2,204f4 <memcmp+0x6c>
   204e4:	31bfff04 	addi	r6,r6,-4
   204e8:	21000104 	addi	r4,r4,4
   204ec:	29400104 	addi	r5,r5,4
   204f0:	39bff936 	bltu	r7,r6,204d8 <__alt_mem_Flash_flash_data+0xf40204d8>
   204f4:	303fe91e 	bne	r6,zero,2049c <__alt_mem_Flash_flash_data+0xf402049c>
   204f8:	003ff506 	br	204d0 <__alt_mem_Flash_flash_data+0xf40204d0>
   204fc:	10c5c83a 	sub	r2,r2,r3
   20500:	f800283a 	ret

00020504 <__register_exitproc>:
   20504:	008000b4 	movhi	r2,2
   20508:	defffa04 	addi	sp,sp,-24
   2050c:	108be104 	addi	r2,r2,12164
   20510:	dc000315 	stw	r16,12(sp)
   20514:	14000017 	ldw	r16,0(r2)
   20518:	dc400415 	stw	r17,16(sp)
   2051c:	dfc00515 	stw	ra,20(sp)
   20520:	80805217 	ldw	r2,328(r16)
   20524:	2023883a 	mov	r17,r4
   20528:	10003626 	beq	r2,zero,20604 <__register_exitproc+0x100>
   2052c:	10c00117 	ldw	r3,4(r2)
   20530:	010007c4 	movi	r4,31
   20534:	20c00e16 	blt	r4,r3,20570 <__register_exitproc+0x6c>
   20538:	1a400044 	addi	r9,r3,1
   2053c:	8800211e 	bne	r17,zero,205c4 <__register_exitproc+0xc0>
   20540:	18c00084 	addi	r3,r3,2
   20544:	18c7883a 	add	r3,r3,r3
   20548:	18c7883a 	add	r3,r3,r3
   2054c:	12400115 	stw	r9,4(r2)
   20550:	10c7883a 	add	r3,r2,r3
   20554:	19400015 	stw	r5,0(r3)
   20558:	0005883a 	mov	r2,zero
   2055c:	dfc00517 	ldw	ra,20(sp)
   20560:	dc400417 	ldw	r17,16(sp)
   20564:	dc000317 	ldw	r16,12(sp)
   20568:	dec00604 	addi	sp,sp,24
   2056c:	f800283a 	ret
   20570:	00800034 	movhi	r2,0
   20574:	109a1204 	addi	r2,r2,26696
   20578:	10002526 	beq	r2,zero,20610 <__register_exitproc+0x10c>
   2057c:	01006404 	movi	r4,400
   20580:	d9400015 	stw	r5,0(sp)
   20584:	d9800115 	stw	r6,4(sp)
   20588:	d9c00215 	stw	r7,8(sp)
   2058c:	00068480 	call	6848 <malloc>
   20590:	d9400017 	ldw	r5,0(sp)
   20594:	d9800117 	ldw	r6,4(sp)
   20598:	d9c00217 	ldw	r7,8(sp)
   2059c:	10001c26 	beq	r2,zero,20610 <__register_exitproc+0x10c>
   205a0:	80c05217 	ldw	r3,328(r16)
   205a4:	10000115 	stw	zero,4(r2)
   205a8:	02400044 	movi	r9,1
   205ac:	10c00015 	stw	r3,0(r2)
   205b0:	80805215 	stw	r2,328(r16)
   205b4:	10006215 	stw	zero,392(r2)
   205b8:	10006315 	stw	zero,396(r2)
   205bc:	0007883a 	mov	r3,zero
   205c0:	883fdf26 	beq	r17,zero,20540 <__alt_mem_Flash_flash_data+0xf4020540>
   205c4:	18d1883a 	add	r8,r3,r3
   205c8:	4211883a 	add	r8,r8,r8
   205cc:	1211883a 	add	r8,r2,r8
   205d0:	41802215 	stw	r6,136(r8)
   205d4:	01000044 	movi	r4,1
   205d8:	11806217 	ldw	r6,392(r2)
   205dc:	20c8983a 	sll	r4,r4,r3
   205e0:	310cb03a 	or	r6,r6,r4
   205e4:	11806215 	stw	r6,392(r2)
   205e8:	41c04215 	stw	r7,264(r8)
   205ec:	01800084 	movi	r6,2
   205f0:	89bfd31e 	bne	r17,r6,20540 <__alt_mem_Flash_flash_data+0xf4020540>
   205f4:	11806317 	ldw	r6,396(r2)
   205f8:	3108b03a 	or	r4,r6,r4
   205fc:	11006315 	stw	r4,396(r2)
   20600:	003fcf06 	br	20540 <__alt_mem_Flash_flash_data+0xf4020540>
   20604:	80805304 	addi	r2,r16,332
   20608:	80805215 	stw	r2,328(r16)
   2060c:	003fc706 	br	2052c <__alt_mem_Flash_flash_data+0xf402052c>
   20610:	00bfffc4 	movi	r2,-1
   20614:	003fd106 	br	2055c <__alt_mem_Flash_flash_data+0xf402055c>

00020618 <__call_exitprocs>:
   20618:	008000b4 	movhi	r2,2
   2061c:	108be104 	addi	r2,r2,12164
   20620:	10800017 	ldw	r2,0(r2)
   20624:	defff404 	addi	sp,sp,-48
   20628:	dd800815 	stw	r22,32(sp)
   2062c:	d8800015 	stw	r2,0(sp)
   20630:	10805204 	addi	r2,r2,328
   20634:	dd000615 	stw	r20,24(sp)
   20638:	dc800415 	stw	r18,16(sp)
   2063c:	dfc00b15 	stw	ra,44(sp)
   20640:	df000a15 	stw	fp,40(sp)
   20644:	ddc00915 	stw	r23,36(sp)
   20648:	dd400715 	stw	r21,28(sp)
   2064c:	dcc00515 	stw	r19,20(sp)
   20650:	dc400315 	stw	r17,12(sp)
   20654:	dc000215 	stw	r16,8(sp)
   20658:	2025883a 	mov	r18,r4
   2065c:	2829883a 	mov	r20,r5
   20660:	d8800115 	stw	r2,4(sp)
   20664:	05bfffc4 	movi	r22,-1
   20668:	d8800017 	ldw	r2,0(sp)
   2066c:	14c05217 	ldw	r19,328(r2)
   20670:	98001d26 	beq	r19,zero,206e8 <__call_exitprocs+0xd0>
   20674:	dd400117 	ldw	r21,4(sp)
   20678:	98800117 	ldw	r2,4(r19)
   2067c:	173fffc4 	addi	fp,r2,-1
   20680:	e0000d16 	blt	fp,zero,206b8 <__call_exitprocs+0xa0>
   20684:	14000044 	addi	r16,r2,1
   20688:	8421883a 	add	r16,r16,r16
   2068c:	8421883a 	add	r16,r16,r16
   20690:	84402004 	addi	r17,r16,128
   20694:	9c63883a 	add	r17,r19,r17
   20698:	9c21883a 	add	r16,r19,r16
   2069c:	a0001e26 	beq	r20,zero,20718 <__call_exitprocs+0x100>
   206a0:	80804017 	ldw	r2,256(r16)
   206a4:	15001c26 	beq	r2,r20,20718 <__call_exitprocs+0x100>
   206a8:	e73fffc4 	addi	fp,fp,-1
   206ac:	843fff04 	addi	r16,r16,-4
   206b0:	8c7fff04 	addi	r17,r17,-4
   206b4:	e5bff91e 	bne	fp,r22,2069c <__alt_mem_Flash_flash_data+0xf402069c>
   206b8:	00800034 	movhi	r2,0
   206bc:	109a1704 	addi	r2,r2,26716
   206c0:	10000926 	beq	r2,zero,206e8 <__call_exitprocs+0xd0>
   206c4:	98800117 	ldw	r2,4(r19)
   206c8:	1000311e 	bne	r2,zero,20790 <__call_exitprocs+0x178>
   206cc:	98800017 	ldw	r2,0(r19)
   206d0:	10003426 	beq	r2,zero,207a4 <__call_exitprocs+0x18c>
   206d4:	9809883a 	mov	r4,r19
   206d8:	a8800015 	stw	r2,0(r21)
   206dc:	000685c0 	call	685c <free>
   206e0:	acc00017 	ldw	r19,0(r21)
   206e4:	983fe41e 	bne	r19,zero,20678 <__alt_mem_Flash_flash_data+0xf4020678>
   206e8:	dfc00b17 	ldw	ra,44(sp)
   206ec:	df000a17 	ldw	fp,40(sp)
   206f0:	ddc00917 	ldw	r23,36(sp)
   206f4:	dd800817 	ldw	r22,32(sp)
   206f8:	dd400717 	ldw	r21,28(sp)
   206fc:	dd000617 	ldw	r20,24(sp)
   20700:	dcc00517 	ldw	r19,20(sp)
   20704:	dc800417 	ldw	r18,16(sp)
   20708:	dc400317 	ldw	r17,12(sp)
   2070c:	dc000217 	ldw	r16,8(sp)
   20710:	dec00c04 	addi	sp,sp,48
   20714:	f800283a 	ret
   20718:	98800117 	ldw	r2,4(r19)
   2071c:	80c00017 	ldw	r3,0(r16)
   20720:	10bfffc4 	addi	r2,r2,-1
   20724:	17001526 	beq	r2,fp,2077c <__call_exitprocs+0x164>
   20728:	80000015 	stw	zero,0(r16)
   2072c:	183fde26 	beq	r3,zero,206a8 <__alt_mem_Flash_flash_data+0xf40206a8>
   20730:	00800044 	movi	r2,1
   20734:	1708983a 	sll	r4,r2,fp
   20738:	98806217 	ldw	r2,392(r19)
   2073c:	9dc00117 	ldw	r23,4(r19)
   20740:	2084703a 	and	r2,r4,r2
   20744:	1000061e 	bne	r2,zero,20760 <__call_exitprocs+0x148>
   20748:	183ee83a 	callr	r3
   2074c:	98800117 	ldw	r2,4(r19)
   20750:	15ffc51e 	bne	r2,r23,20668 <__alt_mem_Flash_flash_data+0xf4020668>
   20754:	a8800017 	ldw	r2,0(r21)
   20758:	14ffd326 	beq	r2,r19,206a8 <__alt_mem_Flash_flash_data+0xf40206a8>
   2075c:	003fc206 	br	20668 <__alt_mem_Flash_flash_data+0xf4020668>
   20760:	98806317 	ldw	r2,396(r19)
   20764:	2084703a 	and	r2,r4,r2
   20768:	1000061e 	bne	r2,zero,20784 <__call_exitprocs+0x16c>
   2076c:	89400017 	ldw	r5,0(r17)
   20770:	9009883a 	mov	r4,r18
   20774:	183ee83a 	callr	r3
   20778:	003ff406 	br	2074c <__alt_mem_Flash_flash_data+0xf402074c>
   2077c:	9f000115 	stw	fp,4(r19)
   20780:	003fea06 	br	2072c <__alt_mem_Flash_flash_data+0xf402072c>
   20784:	89000017 	ldw	r4,0(r17)
   20788:	183ee83a 	callr	r3
   2078c:	003fef06 	br	2074c <__alt_mem_Flash_flash_data+0xf402074c>
   20790:	98800017 	ldw	r2,0(r19)
   20794:	982b883a 	mov	r21,r19
   20798:	1027883a 	mov	r19,r2
   2079c:	983fb61e 	bne	r19,zero,20678 <__alt_mem_Flash_flash_data+0xf4020678>
   207a0:	003fd106 	br	206e8 <__alt_mem_Flash_flash_data+0xf40206e8>
   207a4:	0005883a 	mov	r2,zero
   207a8:	003ffa06 	br	20794 <__alt_mem_Flash_flash_data+0xf4020794>

000207ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   207ac:	defffd04 	addi	sp,sp,-12
   207b0:	df000215 	stw	fp,8(sp)
   207b4:	df000204 	addi	fp,sp,8
   207b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   207bc:	008000b4 	movhi	r2,2
   207c0:	1093df44 	addi	r2,r2,20349
   207c4:	10000005 	stb	zero,0(r2)
   207c8:	e0bfff17 	ldw	r2,-4(fp)
   207cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   207d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   207d4:	10000226 	beq	r2,zero,207e0 <_exit+0x34>
    ALT_SIM_FAIL();
   207d8:	002af070 	cmpltui	zero,zero,43969
   207dc:	00000106 	br	207e4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   207e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   207e4:	003fff06 	br	207e4 <__alt_mem_Flash_flash_data+0xf40207e4>
